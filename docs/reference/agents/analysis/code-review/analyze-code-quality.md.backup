---
name: "code-analyzer"
colour: "purple"
type: "analysis"
version: "1.0.0"
created: "2025-07-25"
author: "Claude Code"

metadata:
  description: "Advanced code quality analysis agent for comprehensive code reviews and improvements"
  specialization: "Code quality, best practices, refactoring suggestions, technical debt"
  complexity: "complex"
  autonomous: true
  
triggers:
  keywords:
    - "code review"
    - "analyze code"
    - "code quality"
    - "refactor"
    - "technical debt"
    - "code smell"
  file_patterns:
    - "**/*.js"
    - "**/*.ts"
    - "**/*.py"
    - "**/*.java"
  task_patterns:
    - "review * code"
    - "analyze * quality"
    - "find code smells"
  domains:
    - "analysis"
    - "quality"

capabilities:
  allowed_tools:
    - Read
    - Grep
    - Glob
    - WebSearch  # For best practices research
  restricted_tools:
    - Write  # Read-only analysis
    - Edit
    - MultiEdit
    - Bash  # No execution needed
    - Task  # No delegation
  max_file_operations: 100
  max_execution_time: 600
  memory_access: "both"
  
constraints:
  allowed_paths:
    - "src/**"
    - "lib/**"
    - "app/**"
    - "components/**"
    - "services/**"
    - "utils/**"
  forbidden_paths:
    - "node_modules/**"
    - ".git/**"
    - "dist/**"
    - "build/**"
    - "coverage/**"
  max_file_size: 1048576  # 1MB
  allowed_file_types:
    - ".js"
    - ".ts"
    - ".jsx"
    - ".tsx"
    - ".py"
    - ".java"
    - ".go"

behaviour:
  error_handling: "lenient"
  confirmation_required: []
  auto_rollback: false
  logging_level: "verbose"
  
communication:
  style: "technical"
  update_frequency: "summary"
  include_code_snippets: true
  emoji_usage: "minimal"
  
integration:
  can_spawn: []
  can_delegate_to:
    - "analyze-security"
    - "analyze-performance"
  requires_approval_from: []
  shares_context_with:
    - "analyze-refactoring"
    - "test-unit"

optimisation:
  parallel_operations: true
  batch_size: 20
  cache_results: true
  memory_limit: "512MB"
  
hooks:
  pre_execution: |
    echo "🔍 Code Quality Analyzer initializing..."
    echo "📁 Scanning project structure..."
    # Count files to analyze

*[Reference](../index.md) > [Agents](../../../reference/agents/index.md) > [Analysis](../../reference/agents/analysis/index.md) > [Code Review](../reference/agents/analysis/code-review/index.md)*
    find . -name "*.js" -o -name "*.ts" -o -name "*.py" | grep -v node_modules | wc -l | xargs echo "Files to analyze:"
    # Check for linting configs
    echo "📋 Checking for code quality configs..."
    ls -la .eslintrc* .prettierrc* .pylintrc tslint.json 2>/dev/null || echo "No linting configs found"
  post_execution: |
    echo "✅ Code quality analysis completed"
    echo "📊 Analysis stored in memory for future reference"
    echo "💡 Run 'analyze-refactoring' for detailed refactoring suggestions"
  on_error: |
    echo "⚠️ Analysis warning: {{error_message}}"
    echo "🔄 Continuing with partial analysis..."
    
examples:
  - trigger: "review code quality in the authentication module"
    response: "I'll perform a comprehensive code quality analysis of the authentication module, checking for code smells, complexity, and improvement opportunities..."
  - trigger: "analyze technical debt in the codebase"
    response: "I'll analyze the entire codebase for technical debt, identifying areas that need refactoring and estimating the effort required..."
---

# Code Quality Analyzer

You are a Code Quality Analyzer performing comprehensive code reviews and analysis.

## Key responsibilities:
1. Identify code smells and anti-patterns
2. Evaluate code complexity and maintainability
3. Check adherence to coding standards
4. Suggest refactoring opportunities
5. Assess technical debt

## Analysis criteria:
- **Readability**: Clear naming, proper comments, consistent formatting
- **Maintainability**: Low complexity, high cohesion, low coupling
- **Performance**: Efficient algorithms, no obvious bottlenecks
- **Security**: No obvious vulnerabilities, proper input validation
- **Best Practices**: Design patterns, SOLID principles, DRY/KISS

## Code smell detection:
- Long methods (>50 lines)
- Large classes (>500 lines)
- Duplicate code
- Dead code
- Complex conditionals
- Feature envy
- Inappropriate intimacy
- God objects

## Review output format:
```markdown
## Code Quality Analysis Report

### Summary
- Overall Quality Score: X/10
- Files Analyzed: N
- Issues Found: N
- Technical Debt Estimate: X hours

### Critical Issues
1. [Issue description]
   - File: path/to/file.js:line
   - Severity: High
   - Suggestion: [Improvement]

### Code Smells
- [Smell type]: [Description]

### Refactoring Opportunities
- [Opportunity]: [Benefit]

### Positive Findings
- [Good practice observed]
```

## Related Topics

- [Agent Orchestration Architecture](../../../../features/agent-orchestration.md)
- [Agent Type Conventions and Mapping](../../../../AGENT_TYPE_CONVENTIONS.md)
- [Agent Visualisation Architecture](../../../../agent-visualization-architecture.md)
- [Agentic Alliance](../../../../archive/legacy/old_markdown/Agentic Alliance.md)
- [Agentic Metaverse for Global Creatives](../../../../archive/legacy/old_markdown/Agentic Metaverse for Global Creatives.md)
- [Agentic Mycelia](../../../../archive/legacy/old_markdown/Agentic Mycelia.md)
- [Agents](../../../../archive/legacy/old_markdown/Agents.md)
- [Benchmark Suite Agent](../../../../reference/agents/optimization/benchmark-suite.md)
- [Claude Code Agents Directory Structure](../../../../reference/agents/README.md)
- [Claude Flow Commands to Agent System Migration Summary](../../../../reference/agents/migration-summary.md)
- [Distributed Consensus Builder Agents](../../../../reference/agents/consensus/README.md)
- [Financialised Agentic Memetics](../../../../archive/legacy/old_markdown/Financialised Agentic Memetics.md)
- [Load Balancing Coordinator Agent](../../../../reference/agents/optimization/load-balancer.md)
- [Multi Agent Orchestration](../../../../server/agent-swarm.md)
- [Multi Agent RAG scrapbook](../../../../archive/legacy/old_markdown/Multi Agent RAG scrapbook.md)
- [Multi-Agent Container Setup](../../../../deployment/multi-agent-setup.md)
- [Multi-MCP Agent Visualisation System](../../../../MCP_AGENT_VISUALIZATION.md)
- [Multi-MCP Agent Visualisation System](../../../../multi-mcp-agent-visualization.md)
- [Performance Monitor Agent](../../../../reference/agents/optimization/performance-monitor.md)
- [Performance Optimisation Agents](../../../../reference/agents/optimization/README.md)
- [Resource Allocator Agent](../../../../reference/agents/optimization/resource-allocator.md)
- [Swarm Coordination Agents](../../../../reference/agents/swarm/README.md)
- [Topology Optimizer Agent](../../../../reference/agents/optimization/topology-optimizer.md)
- [adaptive-coordinator](../../../../reference/agents/swarm/adaptive-coordinator.md)
- [arch-system-design](../../../../reference/agents/architecture/system-design/arch-system-design.md)
- [architecture](../../../../reference/agents/sparc/architecture.md)
- [automation-smart-agent](../../../../reference/agents/templates/automation-smart-agent.md)
- [base-template-generator](../../../../reference/agents/base-template-generator.md)
- [byzantine-coordinator](../../../../reference/agents/consensus/byzantine-coordinator.md)
- [code-analyzer](../../../../reference/agents/analysis/code-analyzer.md)
- [code-review-swarm](../../../../reference/agents/github/code-review-swarm.md)
- [coder](../../../../reference/agents/core/coder.md)
- [coordinator-swarm-init](../../../../reference/agents/templates/coordinator-swarm-init.md)
- [crdt-synchronizer](../../../../reference/agents/consensus/crdt-synchronizer.md)
- [data-ml-model](../../../../reference/agents/data/ml/data-ml-model.md)
- [dev-backend-api](../../../../reference/agents/development/backend/dev-backend-api.md)
- [docs-api-openapi](../../../../reference/agents/documentation/api-docs/docs-api-openapi.md)
- [github-modes](../../../../reference/agents/github/github-modes.md)
- [github-pr-manager](../../../../reference/agents/templates/github-pr-manager.md)
- [gossip-coordinator](../../../../reference/agents/consensus/gossip-coordinator.md)
- [hierarchical-coordinator](../../../../reference/agents/swarm/hierarchical-coordinator.md)
- [implementer-sparc-coder](../../../../reference/agents/templates/implementer-sparc-coder.md)
- [issue-tracker](../../../../reference/agents/github/issue-tracker.md)
- [memory-coordinator](../../../../reference/agents/templates/memory-coordinator.md)
- [mesh-coordinator](../../../../reference/agents/swarm/mesh-coordinator.md)
- [migration-plan](../../../../reference/agents/templates/migration-plan.md)
- [multi-repo-swarm](../../../../reference/agents/github/multi-repo-swarm.md)
- [ops-cicd-github](../../../../reference/agents/devops/ci-cd/ops-cicd-github.md)
- [orchestrator-task](../../../../reference/agents/templates/orchestrator-task.md)
- [performance-analyzer](../../../../reference/agents/templates/performance-analyzer.md)
- [performance-benchmarker](../../../../reference/agents/consensus/performance-benchmarker.md)
- [planner](../../../../reference/agents/core/planner.md)
- [pr-manager](../../../../reference/agents/github/pr-manager.md)
- [production-validator](../../../../reference/agents/testing/validation/production-validator.md)
- [project-board-sync](../../../../reference/agents/github/project-board-sync.md)
- [pseudocode](../../../../reference/agents/sparc/pseudocode.md)
- [quorum-manager](../../../../reference/agents/consensus/quorum-manager.md)
- [raft-manager](../../../../reference/agents/consensus/raft-manager.md)
- [refinement](../../../../reference/agents/sparc/refinement.md)
- [release-manager](../../../../reference/agents/github/release-manager.md)
- [release-swarm](../../../../reference/agents/github/release-swarm.md)
- [repo-architect](../../../../reference/agents/github/repo-architect.md)
- [researcher](../../../../reference/agents/core/researcher.md)
- [reviewer](../../../../reference/agents/core/reviewer.md)
- [security-manager](../../../../reference/agents/consensus/security-manager.md)
- [sparc-coordinator](../../../../reference/agents/templates/sparc-coordinator.md)
- [spec-mobile-react-native](../../../../reference/agents/specialized/mobile/spec-mobile-react-native.md)
- [specification](../../../../reference/agents/sparc/specification.md)
- [swarm-issue](../../../../reference/agents/github/swarm-issue.md)
- [swarm-pr](../../../../reference/agents/github/swarm-pr.md)
- [sync-coordinator](../../../../reference/agents/github/sync-coordinator.md)
- [tdd-london-swarm](../../../../reference/agents/testing/unit/tdd-london-swarm.md)
- [tester](../../../../reference/agents/core/tester.md)
- [workflow-automation](../../../../reference/agents/github/workflow-automation.md)

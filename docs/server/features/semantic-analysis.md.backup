# Semantic Analysis Pipeline

*[Server](../index.md) > [Features](../server/features/index.md)*

## Introduction

The goal of the semantic analysis pipeline is to enrich the knowledge graph with a deeper layer of meaning, creating a more insightful and organised visualisation. Instead of relying solely on the explicit links defined in the source data, this pipeline analyzes the content and structure of the graph to infer semantic relationships.

This process is broken down into a three-stage pipeline that progressively adds semantic richness to the graph.

## The Three-Stage Pipeline

```mermaid
graph TD
    subgraph "Stage 1: Feature Extraction"
        MS[MetadataStore] --> SA[SemanticAnalyzer]
        SA -- "Produces" --> SF[SemanticFeatures Struct]
    end

    subgraph "Stage 2: Edge Generation"
        SF --> AEG[AdvancedEdgeGenerator]
        AEG -- "Generates" --> SE[New Semantic Edges]
    end

    subgraph "Stage 3: Constraint Generation"
        SF --> SC[semantic_constraints.rs]
        SC -- "Generates" --> C[Physics Constraints]
    end

    subgraph "Output"
        SE --> G[Graph Topology]
        C --> PE[Physics Engine]
    end

    style SA fill:#3A3F47,stroke:#61DAFB,color:#FFFFFF
    style AEG fill:#3A3F47,stroke:#68D391,color:#FFFFFF
    style SC fill:#3A3F47,stroke:#F56565,color:#FFFFFF
```

### 1. Feature Extraction (`SemanticAnalyzer`)
-   **File**: `semantic_analyzer.rs`
-   **Description**: This is the first stage of the pipeline. The `SemanticAnalyzer` service processes the raw `MetadataStore`, which contains information about each file and its connections. For each node in the graph, it extracts a rich set of features and compiles them into a `SemanticFeatures` struct.
-   **Extracted Features**:
    -   **Topics and Keywords**: Identified from the content of the source files.
    -   **Knowledge Domain**: The broader subject area the node belongs to.
    -   **Structural Information**: Metrics like node degree, centrality, and local clustering coefficient.
    -   **Content Type**: The type of the source file (e.g., documentation, source code, configuration).

### 2. Edge Generation (`AdvancedEdgeGenerator`)
-   **File**: `edge_generation.rs`
-   **Description**: In the second stage, the `AdvancedEdgeGenerator` takes the `SemanticFeatures` for each node and uses them to compute multi-modal similarity scores. It compares nodes based on their topics, domains, and structural roles to identify implicit relationships.
-   **Process**:
    1.  It calculates a similarity score between all pairs of nodes.
    2.  If the similarity score exceeds a certain threshold, a new, weighted "semantic edge" is generated between the two nodes.
    3.  This creates a much richer graph topology than the explicit links alone, revealing connections between concepts that are not directly linked in the source data.

### 3. Constraint Generation (`semantic_constraints.rs`)
-   **File**: `semantic_constraints.rs`
-   **Description**: The final stage uses the `SemanticFeatures` to create dynamic constraints for the physics engine. This is a crucial step that translates the abstract semantic information into a tangible impact on the graph's visual layout.
-   **Process**: The `GraphServiceActor` uses this module to generate forces that organise the graph in a semantically meaningful way. For example:
    -   Nodes that share the same `KnowledgeDomain` are given an attractive force, pulling them together into visual clusters.
    -   Nodes with very different topics might be given a gentle repulsive force to ensure they are visually separated.
-   **Outcome**: The result is a graph layout where the spatial proximity of nodes directly reflects their semantic similarity, making the visualisation more intuitive and easier to interpret.

## Related Topics

- [AI Services Documentation](../../server/ai-services.md)
- [Actor System](../../server/actors.md)
- [Adaptive Balancing](../../features/adaptive-balancing.md)
- [Agent Orchestration Architecture](../../features/agent-orchestration.md)
- [Claude Flow MCP Integration](../../server/features/claude-flow-mcp-integration.md)
- [Configuration Architecture](../../server/config.md)
- [Feature Access Control](../../server/feature-access.md)
- [Features Documentation](../../features/index.md)
- [GPU Compute Architecture](../../server/gpu-compute.md)
- [GPU-Accelerated Analytics](../../client/features/gpu-analytics.md)
- [Graph Clustering](../../server/features/clustering.md)
- [MCP Integration](../../server/mcp-integration.md)
- [Multi Agent Orchestration](../../server/agent-swarm.md)
- [Neural Auto-Balance Feature](../../features/auto-balance.md)
- [Ontology Validation](../../server/features/ontology.md)
- [Physics Engine](../../server/physics-engine.md)
- [Request Handlers Architecture](../../server/handlers.md)
- [Server Architecture](../../server/architecture.md)
- [Server Documentation](../../server/index.md)
- [Server-Side Data Models](../../server/models.md)
- [Services Architecture](../../server/services.md)
- [Types Architecture](../../server/types.md)
- [Utilities Architecture](../../server/utils.md)

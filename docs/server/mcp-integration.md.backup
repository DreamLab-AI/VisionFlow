# MCP Integration

*[Server](../index.md)*

VisionFlow integrates with the Model Context Protocol (MCP) to orchestrate and visualise AI agents from an external controller, such as Claude Flow. The entire integration is handled by a dedicated actor, `ClaudeFlowActorTcp`, which communicates with the MCP server over a resilient, TCP-only connection.

This document outlines the architecture and key features of this integration.

## Architecture: TCP-Only Communication

To ensure robustness and security, all MCP communication happens exclusively between the VisionFlow backend and the MCP server. The frontend client has no direct access to the MCP server.

-   **Protocol**: Line-delimited JSON-RPC 2.0 over a raw TCP socket.
-   **Endpoint**: The server connects to the MCP endpoint specified in the configuration (e.g., `multi-agent-container:9500`).
-   **No WebSockets or Stdio**: All previous methods of communication have been deprecated and removed in favour of this more resilient TCP-based approach.

## The `ClaudeFlowActorTcp`

This actor is the sole component responsible for managing the MCP connection and processing its data.

**Key Responsibilities:**

1.  **Connection Management**: It establishes and maintains a persistent TCP connection to the MCP server.
2.  **Request/Response Correlation**: It manages the lifecycle of outgoing requests and correlates them with incoming responses. This is achieved using a `pending_requests` `HashMap`, where the key is a unique request ID (UUID) and the value is a channel to send the response back to the original caller.
3.  **Telemetry Processing**: It receives a continuous stream of agent telemetry from the MCP server and forwards it to the `GraphServiceActor` to update the agent graph.
4.  **Resilience**: It implements a suite of network resilience patterns to handle the unreliability of network communication.

## Network Resilience Patterns

The TCP connection is hardened against common network issues using patterns from `src/utils/network/`:

-   **Connection Pooling**: Manages a pool of TCP connections to reduce the overhead of establishing new connections for each request.
-   **Exponential Backoff**: If a connection attempt fails, the actor waits for a progressively longer interval before retrying. This prevents the actor from overwhelming the MCP server during a service outage.
-   **Circuit Breaker**: After a configured number of consecutive connection failures, the circuit breaker "opens," and the actor will not attempt any new connections for a specified cool-down period. This gives the remote service time to recover.
-   **Health Checks**: The actor periodically sends health check messages to the MCP server to ensure the connection is still alive. If a health check fails, the connection is terminated and re-established.

## Message Flow: Request and Response

```mermaid
sequenceDiagram
    participant Requester as "Other Actor (e.g., GraphServiceActor)"
    participant CFA as "ClaudeFlowActorTcp"
    participant MCP as "MCP Server"

    Requester->>+CFA: send(InitializeSwarm)
    CFA->>CFA: Generate UUID for request
    CFA->>CFA: Store sender in pending_requests map
    CFA->>+MCP: Send JSON-RPC request over TCP
    MCP --> >-CFA: Send JSON-RPC response
    CFA->>CFA: Look up request ID in pending_requests
    CFA --> >-Requester: Forward response via channel
```

1.  An actor sends a message (e.g., `InitializeSwarm`) to `ClaudeFlowActorTcp`.
2.  `ClaudeFlowActorTcp` serializes this into a JSON-RPC request, generating a unique ID.
3.  Before sending, it stores a `oneshot::Sender` in its `pending_requests` `HashMap`, keyed by the request ID.
4.  The request is sent over the TCP stream.
5.  When a response arrives, the actor parses it, extracts the ID, and finds the corresponding sender in the map.
6.  The response is then sent back to the original requester through the channel, completing the asynchronous round trip.

## Related Topics

- [AI Services Documentation](../server/ai-services.md)
- [Actor System](../server/actors.md)
- [Claude Flow MCP Integration](../server/features/claude-flow-mcp-integration.md)
- [Configuration Architecture](../server/config.md)
- [Docker MCP Integration - Production Deployment Guide](../deployment/docker-mcp-integration.md)
- [Feature Access Control](../server/feature-access.md)
- [GPU Compute Architecture](../server/gpu-compute.md)
- [Graph Clustering](../server/features/clustering.md)
- [MCP Connection Architecture](../architecture/mcp-connection.md)
- [MCP Integration Architecture](../architecture/mcp-integration.md)
- [MCP Tool Integration Analysis](../technical/mcp-tool-usage.md)
- [MCP WebSocket Relay Architecture](../architecture/mcp-websocket-relay.md)
- [Multi Agent Orchestration](../server/agent-swarm.md)
- [Multi-MCP Agent Visualisation API Reference](../api/multi-mcp-visualization-api.md)
- [Multi-MCP Agent Visualisation System](../MCP_AGENT_VISUALIZATION.md)
- [Multi-MCP Agent Visualisation System](../multi-mcp-agent-visualization.md)
- [Ontology Validation](../server/features/ontology.md)
- [Physics Engine](../server/physics-engine.md)
- [Request Handlers Architecture](../server/handlers.md)
- [Semantic Analysis Pipeline](../server/features/semantic-analysis.md)
- [Server Architecture](../server/architecture.md)
- [Server Documentation](../server/index.md)
- [Server-Side Data Models](../server/models.md)
- [Services Architecture](../server/services.md)
- [Types Architecture](../server/types.md)
- [Utilities Architecture](../server/utils.md)
- [VisionFlow MCP Integration Documentation](../api/mcp/index.md)

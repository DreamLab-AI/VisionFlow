# Multi-stage build for WebXR with CUDA support
# Stage 1: Builder
FROM nvidia/cuda:12.4.1-devel-ubuntu22.04 AS builder

# Build argument for CUDA architecture
ARG CUDA_ARCH=86

ENV DEBIAN_FRONTEND=noninteractive \
    RUST_LOG=${RUST_LOG:-warn} \
    PATH="/root/.cargo/bin:${PATH}" \
    NVIDIA_DRIVER_CAPABILITIES=all \
    CUDA_HOME=/usr/local/cuda \
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}" \
    CUDA_PATH=/usr/local/cuda

# Install Rust toolchain
RUN apt-get clean && rm -rf /var/lib/apt/lists/* && apt-get update -o Acquire::Retries=3 && apt-get install -y curl && \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
ENV PATH="/root/.cargo/bin:${PATH}"

# Install build dependencies
RUN apt-get clean && rm -rf /var/lib/apt/lists/* && apt-get update -o Acquire::Retries=3 && apt-get install -y --no-install-recommends \
    build-essential \
    pkg-config \
    libssl-dev

WORKDIR /app

# Copy only necessary files for dependency caching
COPY Cargo.toml ./
COPY build.rs ./
RUN cargo fetch

# Copy source and build
COPY src ./src
RUN cargo build --release

# Stage 2: Final runtime image
FROM nvidia/cuda:12.4.1-devel-ubuntu22.04

# Build argument for CUDA architecture
ARG CUDA_ARCH=86

ENV DEBIAN_FRONTEND=noninteractive \
    RUST_LOG=${RUST_LOG:-warn} \
    PATH="/root/.cargo/bin:${PATH}" \
    NVIDIA_DRIVER_CAPABILITIES=all \
    CUDA_HOME=/usr/local/cuda \
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}" \
    CUDA_PATH=/usr/local/cuda

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    git \
    gcc-11 \
    g++-11 \
    netcat-openbsd \
    lsof \
    gzip \
    expect \
    docker.io \
    supervisor \
    nginx \
    && rm -rf /var/lib/apt/lists/*

# Create Nginx log and run directories and verify nginx installation
RUN mkdir -p /var/log/nginx /var/run/nginx && \
    chown -R www-data:www-data /var/run/nginx && \
    which nginx && \
    nginx -v

# Set gcc-11 as default compiler (needed for CUDA compatibility)
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100 \
    && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100

# Install Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs

WORKDIR /app

# Create necessary directories
RUN mkdir -p /app/data/markdown \
    /app/data/metadata \
    /app/data/runtime \
    /app/user_settings \
    /app/client

# Copy built binary from builder stage
COPY --from=builder /app/target/release/webxr /app/webxr

# Copy client directory with all frontend files
COPY client ./client

# Install Node.js dependencies
WORKDIR /app/client
RUN npm install

WORKDIR /app

# Copy Nginx config for development
COPY nginx.dev.conf /etc/nginx/nginx.conf

# Copy settings file
COPY data/settings.yaml /app/settings.yaml

# Development entrypoint script
COPY scripts/dev-entrypoint.sh ./
RUN chmod +x ./dev-entrypoint.sh

EXPOSE 3001 4000 5173 24678

ENTRYPOINT ["./dev-entrypoint.sh"]
diff --git a/client/src/app/main.tsx b/client/src/app/main.tsx
index 280bafd6..56fabf79 100644
--- a/client/src/app/main.tsx
+++ b/client/src/app/main.tsx
@@ -5,6 +5,29 @@ import '../styles/tokens.css'; // Use relative path
 // Removed import for layout.css as the file was deleted
 import '../styles/globals.css'; // Use relative path
 
+// Suppress errors from custom.js in iframe (e.g., logseq not defined)
+window.addEventListener('error', function (event) {
+  if (event.filename && (
+    event.filename.includes('custom.js') || 
+    event.message.includes('logseq is not defined')
+  )) {
+    event.stopImmediatePropagation();
+    return false;
+  }
+}, true);
+
+window.addEventListener('unhandledrejection', function (event) {
+  if (
+    event.reason &&
+    typeof event.reason === 'object' &&
+    event.reason.stack &&
+    (event.reason.stack.includes('custom.js') || 
+     event.reason.message?.includes('logseq is not defined'))
+  ) {
+    event.preventDefault();
+  }
+});
+
 ReactDOM.createRoot(document.getElementById('root')!).render(
   <React.StrictMode>
     <App />
diff --git a/client/src/services/WebSocketService.ts b/client/src/services/WebSocketService.ts
index cd13fa34..61077f28 100644
--- a/client/src/services/WebSocketService.ts
+++ b/client/src/services/WebSocketService.ts
@@ -84,17 +84,14 @@ class WebSocketService {
   }
 
   private determineWebSocketUrl(): string {
-    // In development, use the Vite dev server proxy
-    // The proxy will forward the WebSocket connection to the backend
-    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
-    const host = window.location.hostname;
-    // Use the current port, Vite handles proxying
-    const port = window.location.port;
-    const url = `${protocol}//${host}:${port}/wss`; // Path defined in vite proxy config
-    if (debugState.isEnabled()) { // Log only if debug is enabled
-        logger.info(`Determined WebSocket URL for dev: ${url}`);
+    if (process.env.NODE_ENV === 'development') {
+      // In development, connect to the WebSocket through the Vite proxy
+      return `ws://${window.location.hostname}:${window.location.port}/ws`;
+    } else {
+      // In production, use relative path
+      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
+      return `${protocol}//${window.location.host}/ws`;
     }
-    return url;
   }
 
   /**
diff --git a/client/vite.config.ts b/client/vite.config.ts
index 58e49f18..5f07a903 100644
--- a/client/vite.config.ts
+++ b/client/vite.config.ts
@@ -3,127 +3,46 @@ import { defineConfig } from 'vite';
 import react from '@vitejs/plugin-react';
 import path from 'path';
 
-// Custom plugin to capture client-side console logs
-const captureClientLogs = () => {
-  return {
-    name: 'capture-client-logs',
-    transformIndexHtml(html) {
-      return html.replace(
-        '</head>',
-        `<script>
-          // Override console methods to ensure client logs are visible in the terminal
-          const originalConsole = {
-            log: console.log,
-            info: console.info,
-            warn: console.warn,
-            error: console.error,
-            debug: console.debug
-          };
-
-          // Send logs to the server
-          function sendLogToServer(level, args) {
-            try {
-              const message = args.map(arg =>
-                typeof arg === 'object' ? JSON.stringify(arg) : String(arg)
-              ).join(' ');
-
-              fetch('/api/__log', {
-                method: 'POST',
-                headers: { 'Content-Type': 'application/json' },
-                body: JSON.stringify({ level, message }),
-              }).catch(() => {});
-            } catch (e) {}
-          }
-
-          // Override console methods
-          console.log = function(...args) {
-            originalConsole.log.apply(console, args);
-            sendLogToServer('log', args);
-          };
-          console.info = function(...args) {
-            originalConsole.info.apply(console, args);
-            sendLogToServer('info', args);
-          };
-          console.warn = function(...args) {
-            originalConsole.warn.apply(console, args);
-            sendLogToServer('warn', args);
-          };
-          console.error = function(...args) {
-            originalConsole.error.apply(console, args);
-            sendLogToServer('error', args);
-          };
-          console.debug = function(...args) {
-            originalConsole.debug.apply(console, args);
-            sendLogToServer('debug', args);
-          };
-        </script></head>`
-      );
-    },
-    configureServer(server) {
-      // Add endpoint to receive logs from client
-      server.middlewares.use((req, res, next) => {
-        if (req.url === '/api/__log' && req.method === 'POST') {
-          let body = '';
-          req.on('data', chunk => { body += chunk.toString(); });
-          req.on('end', () => {
-            try {
-              const { level, message } = JSON.parse(body);
-              console.log(`[CLIENT] [${level.toUpperCase()}] ${message}`);
-              res.statusCode = 200;
-              res.end('OK');
-            } catch (e) {
-              res.statusCode = 400;
-              res.end('Bad Request');
-            }
-          });
-        } else {
-          next();
-        }
-      });
-    }
-  };
-};
-
 export default defineConfig({
-  plugins: [react(), captureClientLogs()],
-  build: {
-    outDir: 'dist',
-    emptyOutDir: true,
-  },
+  plugins: [react()],
   server: {
     host: '0.0.0.0',
     port: parseInt(process.env.VITE_DEV_SERVER_PORT || '3001'),
     strictPort: true,
     hmr: {
-      port: 24678,
+      port: parseInt(process.env.VITE_HMR_PORT || '24678'),
       protocol: 'ws',
+      host: 'localhost',
     },
     proxy: {
       '/api': {
         target: `http://localhost:${process.env.VITE_API_PORT || '4000'}`,
         changeOrigin: true,
+        secure: false,
+        rewrite: (path) => path.replace(/^\/api/, ''),
         configure: (proxy, _options) => {
           proxy.on('error', (err, _req, _res) => {
             console.log('[PROXY ERROR]', err);
           });
         },
       },
-      '/ws': {
+      '/wss': {
         target: `ws://localhost:${process.env.VITE_API_PORT || '4000'}`,
         ws: true,
         changeOrigin: true,
+        secure: false,
+      },
+      '/ws': {
+        target: `ws://localhost:${process.env.VITE_HMR_PORT || '24678'}`,
+        ws: true,
+        changeOrigin: true,
+        secure: false,
       }
-    },
-    // Log all server events
-    logger: {
-      level: 'info',
-      timestamp: true,
-    },
+    }
   },
   resolve: {
     alias: {
       '@': path.resolve(__dirname, './src'),
-    },
-  },
+    }
+  }
 });
-
diff --git a/docker-compose.dev.yml b/docker-compose.dev.yml
index fd292506..83d0cc51 100644
--- a/docker-compose.dev.yml
+++ b/docker-compose.dev.yml
@@ -25,9 +25,9 @@ services:
       - NODE_ENV=development
       - VITE_DEV_SERVER_PORT=3001
       - VITE_API_PORT=4000
+      - VITE_HMR_PORT=24678
       - RUST_LOG_REDIRECT=true
-      # Override the port from settings.yaml for development environment
-      # Ensure Rust backend listens on 4000, which Vite proxies to.
+      # Ensure WebSocket endpoint is available
       - SYSTEM_NETWORK_PORT=4000
     deploy:
       resources:
@@ -38,8 +38,8 @@ services:
               device_ids: ['0']
     ports:
       - "3001:3001"  # Vite dev server
-      - "4000:4000"  # Nginx/Backend API
-      - "24678:24678"  # Vite HMR
+      - "4000:4000"  # Backend API/WebSocket
+      - "24678:24678"  # Vite HMR (exposed directly)
     networks:
       - docker_ragflow
 
diff --git a/nginx.dev.conf b/nginx.dev.conf
new file mode 100644
index 00000000..1a26c393
--- /dev/null
+++ b/nginx.dev.conf
@@ -0,0 +1,54 @@
+# Development-specific Nginx configuration
+map $http_upgrade $connection_upgrade {
+    default upgrade;
+    '' close;
+}
+
+upstream backend {
+    server localhost:4000;
+}
+
+upstream vite {
+    server localhost:3001;
+}
+
+upstream hmr {
+    server localhost:24678;
+}
+
+server {
+    listen 3001;
+    server_name localhost;
+
+    # Vite HMR WebSocket
+    location /ws {
+        proxy_pass http://hmr;
+        proxy_http_version 1.1;
+        proxy_set_header Upgrade $http_upgrade;
+        proxy_set_header Connection $connection_upgrade;
+        proxy_set_header Host $host;
+    }
+
+    # Backend WebSocket
+    location /wss {
+        proxy_pass http://backend;
+        proxy_http_version 1.1;
+        proxy_set_header Upgrade $http_upgrade;
+        proxy_set_header Connection $connection_upgrade;
+        proxy_set_header Host $host;
+    }
+
+    # API endpoints
+    location /api {
+        proxy_pass http://backend;
+        proxy_http_version 1.1;
+        proxy_set_header Host $host;
+    }
+
+    # Everything else goes to Vite
+    location / {
+        proxy_pass http://vite;
+        proxy_http_version 1.1;
+        proxy_set_header Host $host;
+    }
+}
\ No newline at end of file
diff --git a/scripts/dev.sh b/scripts/dev.sh
index 4a3d0373..49ab0b8f 100755
--- a/scripts/dev.sh
+++ b/scripts/dev.sh
@@ -20,6 +20,24 @@ log() {
     echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
 }
 
+# Check if ports are available
+check_ports() {
+    local ports=(3001 4000 24678)
+    local port_check_failed=false
+
+    for port in "${ports[@]}"; do
+        if lsof -i ":$port" > /dev/null 2>&1; then
+            log "${RED}Port $port is already in use${NC}"
+            port_check_failed=true
+        fi
+    done
+
+    if [ "$port_check_failed" = true ]; then
+        log "${RED}One or more required ports are in use. Please free them before continuing.${NC}"
+        exit 1
+    fi
+}
+
 # Cleanup function
 cleanup() {
     log "${YELLOW}Cleaning up development environment...${NC}"
@@ -30,25 +48,66 @@ cleanup() {
         cd "$PROJECT_ROOT" && docker compose -f $DOCKER_COMPOSE_FILE down
     fi
     
-    # Host process cleanup removed as Node/Vite run inside the container
-    
     log "${GREEN}Cleanup complete${NC}"
 }
 
 # Trap signals
 trap cleanup SIGINT SIGTERM EXIT
 
-# Setup function removed as dependencies are installed during Docker build
+# Check Docker network
+check_docker_network() {
+    if ! docker network ls | grep -q "docker_ragflow"; then
+        log "${YELLOW}Creating docker_ragflow network...${NC}"
+        docker network create docker_ragflow || {
+            log "${RED}Failed to create docker_ragflow network${NC}"
+            exit 1
+        }
+    fi
+}
+
 # Start development servers
 start_dev() {
     log "${YELLOW}Starting development servers...${NC}"
     
+    # Check ports before starting
+    check_ports
+    
+    # Ensure Docker network exists
+    check_docker_network
+    
     # Build and start containers with updated configuration
     log "${YELLOW}Starting Docker containers...${NC}"
     cd "$PROJECT_ROOT" && DOCKER_BUILDKIT=1 docker compose -f $DOCKER_COMPOSE_FILE up --build
+
+    # Wait for services to be ready
+    local max_attempts=30
+    local attempt=1
+    local services_ready=false
+
+    while [ $attempt -le $max_attempts ]; do
+        if curl -s http://localhost:3001 >/dev/null && \
+           curl -s http://localhost:4000/api/health >/dev/null && \
+           nc -z localhost 24678; then
+            services_ready=true
+            break
+        fi
+        log "${YELLOW}Waiting for services to be ready (attempt $attempt/$max_attempts)...${NC}"
+        sleep 1
+        ((attempt++))
+    done
+
+    if [ "$services_ready" = true ]; then
+        log "${GREEN}All services are ready!${NC}"
+        log "${GREEN}Development server running at: http://localhost:3001${NC}"
+        log "${GREEN}API endpoint available at: http://localhost:4000${NC}"
+        log "${GREEN}HMR WebSocket available at: ws://localhost:24678${NC}"
+    else
+        log "${RED}Services failed to start properly${NC}"
+        cleanup
+        exit 1
+    fi
 }
 
 # Main execution
 cleanup  # Clean up any existing processes first
-# setup_dev call removed
 start_dev
diff --git a/src/main.rs b/src/main.rs
index 6f9775ee..efca667e 100755
--- a/src/main.rs
+++ b/src/main.rs
@@ -278,19 +278,14 @@ async fn main() -> std::io::Result<()> {
             .supports_credentials();
 
         let mut app = App::new()
-            .wrap(middleware::Logger::default())
             .wrap(cors)
-            .wrap(middleware::Compress::default())
-            .app_data(settings_data.clone())
-            .app_data(web::Data::new(github_client.clone()))
-            .app_data(web::Data::new(content_api.clone()))
-            .app_data(app_state_data.clone())  // Add the complete AppState
-            .app_data(app_state_data.nostr_service.clone().unwrap())
-            .app_data(app_state_data.feature_access.clone())
-            .route("/wss", web::get().to(socket_flow_handler))
-            .route("/speech", web::get().to(speech_socket_handler))
+            .wrap(middleware::Logger::default())
+            .service(
+                web::scope("/ws")
+                    .route("", web::get().to(socket_flow_handler))
+            )
             .service(
-                web::scope("")
+                web::scope("/api")
                     .configure(api_handler::config)
                     .service(web::scope("/health").configure(health_handler::config))
                     .service(web::scope("/pages").configure(pages_handler::config))

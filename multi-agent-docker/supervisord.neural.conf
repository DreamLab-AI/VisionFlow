[unix_http_server]
file=/tmp/supervisor.sock
chmod=0700

[supervisord]
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid
childlogdir=/var/log/supervisor
nodaemon=true
user=root

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock

# Neural Server - Main neural-enhanced server with codex-syntaptic integration
[program:neural-server]
command=tsx /app/src/neural-server.ts
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/neural-server.log
stderr_logfile=/var/log/supervisor/neural-server.error.log
environment=NODE_ENV="production",NEURAL_PORT="9600",NEURAL_HOST="0.0.0.0",LOG_LEVEL="info"
priority=100
startretries=3
stopwaitsecs=30

# Neural Resource Manager - GPU/CPU optimization service
[program:neural-resource-manager]
command=tsx /app/src/neural-resource-manager.ts
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/neural-resource-manager.log
stderr_logfile=/var/log/supervisor/neural-resource-manager.error.log
environment=NODE_ENV="production",LOG_LEVEL="info"
priority=90
startretries=3

# Neural Monitoring - System performance tracking
[program:neural-monitoring]
command=tsx /app/src/neural-monitoring.ts
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/neural-monitoring.log
stderr_logfile=/var/log/supervisor/neural-monitoring.error.log
environment=NODE_ENV="production",LOG_LEVEL="info"
priority=80
startretries=3

# MCP TCP Server - Enhanced with neural processing
[program:mcp-tcp-neural]
command=node /app/core-assets/scripts/mcp-tcp-server.js
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/mcp-tcp-neural.log
stderr_logfile=/var/log/supervisor/mcp-tcp-neural.error.log
environment=MCP_PORT="9500",NEURAL_ENHANCED="true"
priority=70

# MCP WebSocket Relay - Neural-enhanced WebSocket bridge
[program:mcp-ws-neural]
command=node /app/core-assets/scripts/mcp-ws-relay.js
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/mcp-ws-neural.log
stderr_logfile=/var/log/supervisor/mcp-ws-neural.error.log
environment=WS_PORT="3002",NEURAL_ENHANCED="true"
priority=65

# Claude Flow - Neural-enhanced multi-agent orchestration
[program:claude-flow-neural]
command=claude-flow serve --port 8081 --host 0.0.0.0 --neural
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/claude-flow-neural.log
stderr_logfile=/var/log/supervisor/claude-flow-neural.error.log
environment=CLAUDE_FLOW_NEURAL="true",NEURAL_SERVER_URL="http://localhost:9600"
priority=60

# RUV Swarm - Neural swarm intelligence
[program:ruv-swarm-neural]
command=npx ruv-swarm serve --port 8082 --neural
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/ruv-swarm-neural.log
stderr_logfile=/var/log/supervisor/ruv-swarm-neural.error.log
environment=RUV_SWARM_NEURAL="true",NEURAL_SERVER_URL="http://localhost:9600"
priority=55

# Flow Nexus - Cloud neural orchestration (optional)
[program:flow-nexus-neural]
command=npx flow-nexus@latest serve --port 8083 --neural
directory=/app
user=root
autostart=false
autorestart=true
stdout_logfile=/var/log/supervisor/flow-nexus-neural.log
stderr_logfile=/var/log/supervisor/flow-nexus-neural.error.log
environment=FLOW_NEXUS_NEURAL="true",NEURAL_SERVER_URL="http://localhost:9600"
priority=50

# Playwright MCP Proxy - Neural-enhanced browser automation
[program:playwright-mcp-neural]
command=node /app/core-assets/scripts/playwright-mcp-proxy.js
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/playwright-mcp-neural.log
stderr_logfile=/var/log/supervisor/playwright-mcp-neural.error.log
environment=PLAYWRIGHT_PORT="9879",NEURAL_ENHANCED="true"
priority=45

# Neural Health Monitor - Advanced health checking with neural insights
[program:neural-health-monitor]
command=node /app/core-assets/scripts/health-check.js
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/neural-health-monitor.log
stderr_logfile=/var/log/supervisor/neural-health-monitor.error.log
environment=HEALTH_CHECK_PORT="9501",NEURAL_ENHANCED="true",NEURAL_SERVER_URL="http://localhost:9600"
priority=40

# Neural Agent Initializer - Initialize and manage neural agents
[program:neural-agent-init]
command=bash /app/core-assets/scripts/init-claude-flow-agents.sh
directory=/app
user=root
autostart=true
autorestart=false
stdout_logfile=/var/log/supervisor/neural-agent-init.log
stderr_logfile=/var/log/supervisor/neural-agent-init.error.log
environment=NEURAL_AGENTS="true",NEURAL_SERVER_URL="http://localhost:9600"
priority=35
startsecs=0
exitcodes=0

# Neural Cache Manager - Intelligent caching with neural optimization
[program:neural-cache-manager]
command=tsx -e "
import { createServer } from 'http';
import { NeuralResourceManager } from '/app/src/neural-resource-manager';
import pino from 'pino';

const logger = pino({ name: 'neural-cache-manager' });
const resourceManager = new NeuralResourceManager(logger);

const server = createServer((req, res) => {
  if (req.url === '/cache/clear') {
    resourceManager.emit('clear-caches');
    res.writeHead(200, {'Content-Type': 'application/json'});
    res.end(JSON.stringify({success: true, cleared: true}));
  } else if (req.url === '/cache/status') {
    res.writeHead(200, {'Content-Type': 'application/json'});
    res.end(JSON.stringify(resourceManager.getStatus()));
  } else {
    res.writeHead(404);
    res.end();
  }
});

server.listen(9610, '0.0.0.0', () => {
  logger.info('Neural cache manager listening on port 9610');
});
"
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/neural-cache-manager.log
stderr_logfile=/var/log/supervisor/neural-cache-manager.error.log
environment=NODE_ENV="production"
priority=30

# Neural Metrics Collector - Advanced metrics collection and analysis
[program:neural-metrics-collector]
command=tsx -e "
import { NeuralMonitoring } from '/app/src/neural-monitoring';
import pino from 'pino';
import { createServer } from 'http';

const logger = pino({ name: 'neural-metrics-collector' });
const monitoring = new NeuralMonitoring({
  enabled: true,
  metrics: ['cpu', 'memory', 'gpu', 'neural'],
  interval: 5000,
  retention: { raw: 3600, aggregated: 86400 },
  alerts: {
    enabled: true,
    thresholds: { cpu: 80, memory: 85, gpu: 90, neural: 10 }
  }
}, logger);

monitoring.start();

const server = createServer((req, res) => {
  if (req.url === '/metrics') {
    res.writeHead(200, {'Content-Type': 'application/json'});
    res.end(JSON.stringify(monitoring.getMetrics()));
  } else if (req.url === '/alerts') {
    res.writeHead(200, {'Content-Type': 'application/json'});
    res.end(JSON.stringify(monitoring.getActiveAlerts()));
  } else {
    res.writeHead(404);
    res.end();
  }
});

server.listen(9620, '0.0.0.0', () => {
  logger.info('Neural metrics collector listening on port 9620');
});
"
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/neural-metrics-collector.log
stderr_logfile=/var/log/supervisor/neural-metrics-collector.error.log
environment=NODE_ENV="production"
priority=25

# Neural API Gateway Health Check
[program:neural-api-health]
command=tsx -e "
import { createServer } from 'http';

const server = createServer(async (req, res) => {
  const healthData = {
    timestamp: new Date().toISOString(),
    services: {
      neuralServer: await checkService('http://localhost:9600/health'),
      mcpTcp: await checkService('http://localhost:9500/health'),
      mcpWs: await checkService('http://localhost:3002/health'),
      claudeFlow: await checkService('http://localhost:8081/health'),
      ruvSwarm: await checkService('http://localhost:8082/health'),
      cacheManager: await checkService('http://localhost:9610/cache/status'),
      metricsCollector: await checkService('http://localhost:9620/metrics')
    }
  };

  const allHealthy = Object.values(healthData.services).every(s => s === 'healthy');

  res.writeHead(allHealthy ? 200 : 503, {'Content-Type': 'application/json'});
  res.end(JSON.stringify(healthData));
});

async function checkService(url) {
  try {
    const response = await fetch(url, { timeout: 1000 });
    return response.ok ? 'healthy' : 'unhealthy';
  } catch (error) {
    return 'unreachable';
  }
}

server.listen(9630, '0.0.0.0', () => {
  console.log('Neural API health check listening on port 9630');
});
"
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/neural-api-health.log
stderr_logfile=/var/log/supervisor/neural-api-health.error.log
environment=NODE_ENV="production"
priority=20

# Log aggregation and rotation for neural services
[program:neural-log-rotator]
command=bash -c "
while true; do
  find /var/log/supervisor -name '*.log' -size +100M -exec logrotate -f {} \;
  sleep 3600
done
"
directory=/app
user=root
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/neural-log-rotator.log
stderr_logfile=/var/log/supervisor/neural-log-rotator.error.log
priority=10

# Group configurations for easier management
[group:neural-core]
programs=neural-server,neural-resource-manager,neural-monitoring
priority=100

[group:neural-mcp]
programs=mcp-tcp-neural,mcp-ws-neural,playwright-mcp-neural
priority=90

[group:neural-agents]
programs=claude-flow-neural,ruv-swarm-neural,flow-nexus-neural
priority=80

[group:neural-support]
programs=neural-cache-manager,neural-metrics-collector,neural-api-health,neural-log-rotator
priority=70

[group:neural-init]
programs=neural-agent-init,neural-health-monitor
priority=60

# Event listeners for neural system coordination
[eventlistener:neural-crashmail]
command=tsx -e "
import { exec } from 'child_process';

process.stdin.on('data', (data) => {
  const event = data.toString();
  if (event.includes('FATAL') || event.includes('EXITED')) {
    console.log('Neural service crash detected:', event);
    // Trigger neural system recovery procedures
    exec('supervisorctl restart neural-core:*', (error) => {
      if (error) console.error('Recovery failed:', error);
      else console.log('Neural core services restarted');
    });
  }
});
"
directory=/app
user=root
events=PROCESS_STATE_FATAL,PROCESS_STATE_EXITED
stdout_logfile=/var/log/supervisor/neural-crashmail.log
stderr_logfile=/var/log/supervisor/neural-crashmail.error.log

[include]
files = /app/supervisord.conf
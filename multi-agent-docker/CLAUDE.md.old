## üîå Additional Services & Development Context

This environment is enhanced with several services and a specific development workflow.

### MCP Services Available
- **TCP Server**: `localhost:9500` for external controllers.
- **WebSocket Bridge**: `localhost:3002` for browser-based tools.
- **Health Check**: `localhost:9501/health` for service monitoring.
- **GUI Tools**: via `gui-tools-service` (Blender:9876, QGIS:9877, PBR:9878).
- **Playwright**: via `playwright` (Proxy: 9879)
- **Chrome DevTools**: via `chrome-devtools-mcp` (Proxy: 9222)

### Claude-Flow v110 Features
This environment includes Claude-Flow v110 with advanced AI capabilities:

#### üéØ Goal Planner Agent
- Applies Goal-Oriented Action Planning (GOAP) with A* pathfinding
- Evaluates current state and calculates optimal action sequences
- Adapts dynamically when conditions change or steps fail
- Perfect for deployments, migrations, and complex workflows

#### üß† SAFLA Neural Agent
- Four-tier memory architecture: vector, episodic, semantic, and working memory
- Accumulates knowledge and recognizes patterns across sessions
- Creates self-improving code assistants that learn your style
- Enables distributed swarms with collective intelligence

### üé≠ Playwright MCP Integration (Visual Mode)
Powerful browser automation with visual debugging through the GUI container:

#### Visual Browser Automation
- **Real-time visualization**: See browser actions through VNC (port 5901)
- **Cross-browser testing**: Chromium, Firefox, and WebKit with visual feedback
- **Interactive debugging**: Pause and inspect during automation
- **Visual selector development**: Point-and-click to create selectors
- **DevTools access**: Full browser developer tools available

#### Enhanced Capabilities in GUI Container
- **Native dialogs**: Handle file pickers, print dialogs visually
- **Complex interactions**: Drag & drop, hover effects with visual confirmation
- **Multi-window support**: See popup handling and tab management
- **Screenshot/video recording**: Capture automation runs visually
- **GPU acceleration**: Faster rendering for complex web apps

#### MCP Server Access
- **Proxy connection**: Seamless integration from main container
- **Page navigation**: `playwright_navigate`, `playwright_click`, `playwright_fill`
- **Element interaction**: Forms, buttons, dropdowns with visual feedback
- **Script evaluation**: Execute JavaScript and see results
- **Session management**: Persistent browser contexts across tests

### üïµÔ∏è Chrome DevTools MCP Integration (Visual Mode)
Inspect and debug web pages with the Chrome DevTools Protocol:

#### Features
- **Live DOM inspection**: View and modify the DOM in real-time.
- **JavaScript debugging**: Set breakpoints, step through code, and inspect variables.
- **Network monitoring**: Analyze network requests and performance.
- **Performance profiling**: Identify and fix performance bottlenecks.

#### MCP Server Access
- **Proxy connection**: Seamless integration from the main container.
- **Direct protocol access**: Send raw Chrome DevTools Protocol commands.

### Development Context
- **Project Root**: Your project is mounted at `ext/`.
- **Always read the current state of ext/task.md**
- **Always update task.md with your progress, removing elements that are confirmed as working by the user**
- **Execution Environment**: Claude operates within this Docker container. It cannot build external Docker images or see services running on your host machine.
- **Available Toolchains**: You can validate your code using tools inside this container, such as `cargo check`, `npm test`, or `python -m py_compile`.

### ü§ñ Automated Setup
This environment features comprehensive automated setup that runs on container startup:

#### What's Automated
- **Claude Authentication**: Credentials from .env are automatically configured
- **Workspace Configuration**: Claude project settings and MCP alignment
- **AI Agents**: Goal Planner and SAFLA Neural agents are initialized
- **Service Management**: All MCP services start automatically with health monitoring
- **Development Tools**: Git configuration, shortcuts, and example projects

#### Monitoring Automation
- **Check Status**: Run `setup-status` to see automation progress
- **View Logs**: Run `setup-logs` to watch setup in real-time
- **Re-run Setup**: Run `rerun-setup` if needed

#### Automation Markers
The system tracks setup progress with these markers:
- `/workspace/.claude_configured` - Claude workspace is set up
- `/workspace/.swarm/.agents_initialized` - AI agents are ready
- `/workspace/.full_setup_completed` - Full automation completed

### Quick Commands
```bash
# Check code without a full build
cargo check         # For Rust projects in ext/
npm run test        # For Node.js projects in ext/

# Manage and test MCP services
mcp-tcp-status
mcp-test-health
validate-toolchains

# Initialize Claude-Flow v110 agents
claude-flow-init-agents  # Initialize Goal Planner and Neural agents

# Playwright MCP commands (Visual Mode)
playwright-vnc          # Connect to VNC for visual browser access
playwright-proxy-status # Check proxy connection status
playwright-proxy-logs   # View proxy logs
name: GPU Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly to catch regressions
    - cron: '0 2 * * *'

jobs:
  gpu-tests:
    runs-on: [self-hosted, gpu, nvidia]
    container:
      image: nvidia/cuda:12.0-devel-ubuntu20.04
      options: --gpus all
      
    env:
      CUDA_ARCH: "86"
      RUN_GPU_SMOKE: "1"
      RUST_LOG: "debug"
      DOCKER_ENV: "1"
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify GPU environment
      run: |
        echo "üîç Verifying GPU environment..."
        nvidia-smi
        nvcc --version
        echo "‚úÖ GPU environment ready"
        
    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y build-essential cmake pkg-config
        
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
        
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-gpu-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-gpu-
          
    - name: Build project with GPU support
      run: |
        cd /workspace/ext
        echo "üîß Building with CUDA arch $CUDA_ARCH..."
        CUDA_ARCH=$CUDA_ARCH cargo build --release --features gpu-tests
        echo "‚úÖ Build completed"
        
    - name: Run PTX smoke tests
      run: |
        cd /workspace/ext
        echo "üå°Ô∏è Running PTX cold start smoke tests..."
        RUN_GPU_SMOKE=1 cargo test --test ptx_smoke_test -- --nocapture
        echo "‚úÖ PTX smoke tests passed"
        
    - name: Run GPU safety validation
      run: |
        cd /workspace/ext
        echo "üõ°Ô∏è Running GPU safety validation suite..."
        cargo test gpu_safety_tests -- --nocapture --test-threads=1
        echo "‚úÖ GPU safety tests passed"
        
    - name: Run buffer management tests
      run: |
        cd /workspace/ext
        echo "üìä Running buffer management integration tests..."
        cargo test buffer_resize -- --nocapture
        echo "‚úÖ Buffer management tests passed"
        
    - name: Run constraint stability tests
      run: |
        cd /workspace/ext
        echo "‚õìÔ∏è Running constraint stability regression tests..."
        cargo test constraint_stability -- --nocapture
        echo "‚úÖ Constraint stability tests passed"
        
    - name: Run SSSP accuracy validation
      run: |
        cd /workspace/ext
        echo "üõ§Ô∏è Running SSSP accuracy validation..."
        cargo test sssp_accuracy -- --nocapture
        echo "‚úÖ SSSP accuracy tests passed"
        
    - name: Run spatial hashing efficiency tests
      run: |
        cd /workspace/ext
        echo "üóÇÔ∏è Running spatial hashing efficiency tests..."
        cargo test spatial_hashing_efficiency -- --nocapture
        echo "‚úÖ Spatial hashing tests passed"
        
    - name: Run GPU analytics validation
      run: |
        cd /workspace/ext
        echo "üéØ Running GPU analytics validation..."
        cargo test gpu_kmeans_validation gpu_anomaly_validation -- --nocapture --test-threads=1
        echo "‚úÖ GPU analytics tests passed"
        
    - name: Run performance benchmarks
      run: |
        cd /workspace/ext
        echo "‚ö° Running performance benchmarks..."
        cargo test performance_benchmarks -- --nocapture --test-threads=1
        echo "‚úÖ Performance benchmarks completed"
        
    - name: Generate test coverage report
      run: |
        cd /workspace/ext
        echo "üìã Generating test coverage report..."
        cargo test -- --format json > gpu-test-results.json || true
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: gpu-test-results-${{ github.sha }}
        path: |
          /workspace/ext/gpu-test-results.json
          /workspace/ext/target/debug/deps/
          
    - name: Test result summary
      if: always()
      run: |
        cd /workspace/ext
        echo "üìä GPU Test Suite Summary"
        echo "========================"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref }}"
        echo "Timestamp: $(date -Iseconds)"
        echo ""
        echo "Test Categories Executed:"
        echo "  ‚úÖ PTX Pipeline & Cold Start"
        echo "  ‚úÖ GPU Safety Validation"
        echo "  ‚úÖ Buffer Management Integration"
        echo "  ‚úÖ Constraint Stability Regression"
        echo "  ‚úÖ SSSP Accuracy Validation"
        echo "  ‚úÖ Spatial Hashing Efficiency"
        echo "  ‚úÖ GPU Analytics (K-means, Anomaly)"
        echo "  ‚úÖ Performance Benchmarks"
        echo ""
        
  gpu-tests-fallback:
    # Fallback job for when GPU runners aren't available
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Run CPU-only tests
      run: |
        cd /workspace/ext
        echo "‚ö†Ô∏è GPU not available, running CPU-only tests..."
        cargo test --lib --features cpu-fallback -- --nocapture
        echo "‚úÖ CPU fallback tests completed"
        
    - name: Notify GPU unavailable
      run: |
        echo "‚ö†Ô∏è GPU test infrastructure unavailable"
        echo "Only CPU fallback tests were executed"
        echo "Manual GPU testing required before merge"
import React, { useState, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Chip,\n  LinearProgress,\n  IconButton,\n  Tooltip,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  Divider,\n  CircularProgress,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow\n} from '@mui/material';\nimport {\n  HowToVote,\n  Add,\n  ThumbUp,\n  ThumbDown,\n  RemoveCircle,\n  CheckCircle,\n  Error as ErrorIcon,\n  Pending,\n  Timeline,\n  Speed,\n  Security,\n  Group,\n  Gavel,\n  Psychology,\n  TrendingUp,\n  AccessTime\n} from '@mui/icons-material';\nimport { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer, LineChart, Line } from 'recharts';\nimport { ConsensusState, ConsensusProposal, ConsensusDecision, NeuralAgent } from '../types/neural';\nimport { neuralAPI } from '../services/neuralAPI';\nimport toast from 'react-hot-toast';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface ConsensusMonitorProps {\n  consensus: ConsensusState;\n  agents: NeuralAgent[];\n  onRefresh: () => void;\n  isConnected: boolean;\n}\n\nconst COLORS = ['#64ffda', '#2196f3', '#ff9800', '#f44336', '#4caf50', '#9c27b0'];\n\nconst getProposalStatusColor = (status: string) => {\n  const colors = {\n    pending: 'warning',\n    accepted: 'success',\n    rejected: 'error',\n    expired: 'default'\n  };\n  return colors[status as keyof typeof colors] || 'default';\n};\n\nconst getProposalIcon = (status: string) => {\n  const icons = {\n    pending: <Pending />,\n    accepted: <CheckCircle />,\n    rejected: <ErrorIcon />,\n    expired: <AccessTime />\n  };\n  return icons[status as keyof typeof icons] || <Pending />;\n};\n\nconst getMechanismDescription = (mechanism: string) => {\n  const descriptions = {\n    'proof-of-learning': 'Agents vote based on their learning performance and expertise',\n    'byzantine': 'Byzantine fault-tolerant consensus for adversarial environments',\n    'raft': 'Leader-based consensus with strong consistency guarantees',\n    'gossip': 'Epidemic-style information dissemination and agreement'\n  };\n  return descriptions[mechanism as keyof typeof descriptions] || 'Unknown consensus mechanism';\n};\n\nexport const ConsensusMonitor: React.FC<ConsensusMonitorProps> = ({\n  consensus,\n  agents,\n  onRefresh,\n  isConnected\n}) => {\n  const [selectedProposal, setSelectedProposal] = useState<ConsensusProposal | null>(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [newProposal, setNewProposal] = useState({\n    content: '',\n    description: ''\n  });\n  \n  const consensusStats = useMemo(() => {\n    const totalProposals = consensus.proposals.length;\n    const acceptedProposals = consensus.proposals.filter(p => p.status === 'accepted').length;\n    const rejectedProposals = consensus.proposals.filter(p => p.status === 'rejected').length;\n    const pendingProposals = consensus.proposals.filter(p => p.status === 'pending').length;\n    \n    const acceptanceRate = totalProposals > 0 ? (acceptedProposals / totalProposals) * 100 : 0;\n    const participationRate = consensus.participants.length > 0 ? \n      (consensus.participants.length / agents.length) * 100 : 0;\n    \n    return {\n      totalProposals,\n      acceptedProposals,\n      rejectedProposals,\n      pendingProposals,\n      acceptanceRate,\n      participationRate\n    };\n  }, [consensus, agents]);\n  \n  const voteDistribution = useMemo(() => {\n    if (!selectedProposal) return [];\n    \n    const votes = { accept: 0, reject: 0, abstain: 0 };\n    Object.values(selectedProposal.votes).forEach(vote => {\n      votes[vote]++;\n    });\n    \n    return [\n      { name: 'Accept', value: votes.accept, color: '#4caf50' },\n      { name: 'Reject', value: votes.reject, color: '#f44336' },\n      { name: 'Abstain', value: votes.abstain, color: '#ff9800' }\n    ];\n  }, [selectedProposal]);\n  \n  const recentDecisions = useMemo(() => {\n    return consensus.decisions\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, 10);\n  }, [consensus.decisions]);\n  \n  const handleCreateProposal = async () => {\n    try {\n      setLoading(true);\n      const proposalContent = {\n        description: newProposal.description,\n        content: newProposal.content,\n        timestamp: new Date().toISOString()\n      };\n      \n      await neuralAPI.createProposal(proposalContent);\n      toast.success('Proposal created successfully');\n      setShowCreateDialog(false);\n      setNewProposal({ content: '', description: '' });\n      onRefresh();\n    } catch (error) {\n      toast.error('Failed to create proposal');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const handleVote = async (proposalId: string, vote: 'accept' | 'reject' | 'abstain') => {\n    try {\n      setLoading(true);\n      await neuralAPI.voteOnProposal(proposalId, vote);\n      toast.success(`Vote cast: ${vote}`);\n      onRefresh();\n    } catch (error) {\n      toast.error('Failed to cast vote');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  return (\n    <Box sx={{ p: 3, height: '100%', overflow: 'auto', bgcolor: '#0a0a0a' }}>\n      {/* Header */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h5\" sx={{ color: 'white', fontWeight: 'bold' }}>\n          Consensus Monitor\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<Add />}\n          onClick={() => setShowCreateDialog(true)}\n          disabled={!isConnected}\n          sx={{\n            background: 'linear-gradient(45deg, #64ffda, #00bcd4)'\n          }}\n        >\n          Create Proposal\n        </Button>\n      </Box>\n      \n      {!isConnected && (\n        <Alert severity=\"warning\" sx={{ mb: 2 }}>\n          Neural network disconnected. Consensus operations may be unavailable.\n        </Alert>\n      )}\n      \n      {/* Consensus Overview */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} md={8}>\n          <Card\n            sx={{\n              background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n              border: '1px solid rgba(100, 255, 218, 0.2)'\n            }}\n          >\n            <CardContent>\n              <Typography variant=\"h6\" sx={{ color: '#64ffda', mb: 2 }}>\n                Consensus Mechanism: {consensus.mechanism.toUpperCase()}\n              </Typography>\n              <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 3 }}>\n                {getMechanismDescription(consensus.mechanism)}\n              </Typography>\n              \n              <Grid container spacing={2}>\n                <Grid item xs={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h4\" sx={{ color: '#64ffda' }}>\n                      {consensus.round}\n                    </Typography>\n                    <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                      Current Round\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h4\" sx={{ color: '#2196f3' }}>\n                      {consensus.participants.length}\n                    </Typography>\n                    <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                      Participants\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h4\" sx={{ color: '#4caf50' }}>\n                      {(consensus.health * 100).toFixed(0)}%\n                    </Typography>\n                    <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                      Health Score\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h4\" sx={{ color: '#ff9800' }}>\n                      {consensus.latency}ms\n                    </Typography>\n                    <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                      Avg Latency\n                    </Typography>\n                  </Box>\n                </Grid>\n              </Grid>\n              \n              {/* Health Progress */}\n              <Box sx={{ mt: 2 }}>\n                <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1 }}>\n                  Consensus Health\n                </Typography>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={consensus.health * 100}\n                  sx={{\n                    height: 8,\n                    borderRadius: 4,\n                    bgcolor: 'rgba(255,255,255,0.1)',\n                    '& .MuiLinearProgress-bar': {\n                      bgcolor: consensus.health > 0.8 ? '#4caf50' : consensus.health > 0.5 ? '#ff9800' : '#f44336',\n                      borderRadius: 4\n                    }\n                  }}\n                />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} md={4}>\n          <Card\n            sx={{\n              background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n              border: '1px solid rgba(100, 255, 218, 0.2)',\n              height: '100%'\n            }}\n          >\n            <CardContent>\n              <Typography variant=\"h6\" sx={{ color: '#64ffda', mb: 2 }}>\n                Statistics\n              </Typography>\n              \n              <Box sx={{ mb: 2 }}>\n                <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                  Acceptance Rate\n                </Typography>\n                <Typography variant=\"h5\" sx={{ color: '#4caf50' }}>\n                  {consensusStats.acceptanceRate.toFixed(1)}%\n                </Typography>\n              </Box>\n              \n              <Box sx={{ mb: 2 }}>\n                <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                  Participation Rate\n                </Typography>\n                <Typography variant=\"h5\" sx={{ color: '#2196f3' }}>\n                  {consensusStats.participationRate.toFixed(1)}%\n                </Typography>\n              </Box>\n              \n              <Divider sx={{ my: 2, bgcolor: 'rgba(255,255,255,0.1)' }} />\n              \n              <Grid container spacing={1}>\n                <Grid item xs={6}>\n                  <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                    Pending\n                  </Typography>\n                  <Typography variant=\"h6\" sx={{ color: '#ff9800' }}>\n                    {consensusStats.pendingProposals}\n                  </Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                    Accepted\n                  </Typography>\n                  <Typography variant=\"h6\" sx={{ color: '#4caf50' }}>\n                    {consensusStats.acceptedProposals}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      \n      {/* Proposals and Decisions */}\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={selectedProposal ? 8 : 12}>\n          <Card\n            sx={{\n              background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n              border: '1px solid rgba(100, 255, 218, 0.2)',\n              height: 600\n            }}\n          >\n            <CardContent sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n              <Typography variant=\"h6\" sx={{ color: '#64ffda', mb: 2 }}>\n                Active Proposals ({consensus.proposals.length})\n              </Typography>\n              \n              <Box sx={{ flexGrow: 1, overflow: 'auto' }}>\n                {consensus.proposals.length > 0 ? (\n                  <List>\n                    {consensus.proposals.map((proposal, index) => {\n                      const totalVotes = Object.keys(proposal.votes).length;\n                      const acceptVotes = Object.values(proposal.votes).filter(v => v === 'accept').length;\n                      const rejectVotes = Object.values(proposal.votes).filter(v => v === 'reject').length;\n                      \n                      return (\n                        <motion.div\n                          key={proposal.id}\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: index * 0.1 }}\n                        >\n                          <ListItem\n                            button\n                            onClick={() => setSelectedProposal(proposal)}\n                            sx={{\n                              border: selectedProposal?.id === proposal.id\n                                ? '2px solid #64ffda'\n                                : '1px solid rgba(255,255,255,0.1)',\n                              borderRadius: 2,\n                              mb: 1,\n                              bgcolor: selectedProposal?.id === proposal.id\n                                ? 'rgba(100, 255, 218, 0.1)'\n                                : 'transparent'\n                            }}\n                          >\n                            <ListItemIcon>\n                              {getProposalIcon(proposal.status)}\n                            </ListItemIcon>\n                            <ListItemText\n                              primary={\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                  <Typography sx={{ color: 'white' }}>\n                                    Proposal {proposal.id.slice(0, 8)}...\n                                  </Typography>\n                                  <Chip\n                                    label={proposal.status}\n                                    size=\"small\"\n                                    color={getProposalStatusColor(proposal.status) as any}\n                                    variant=\"outlined\"\n                                  />\n                                </Box>\n                              }\n                              secondary={\n                                <Box>\n                                  <Typography\n                                    variant=\"body2\"\n                                    sx={{\n                                      color: 'rgba(255,255,255,0.7)',\n                                      overflow: 'hidden',\n                                      textOverflow: 'ellipsis',\n                                      whiteSpace: 'nowrap',\n                                      mb: 1\n                                    }}\n                                  >\n                                    {typeof proposal.content === 'string'\n                                      ? proposal.content\n                                      : JSON.stringify(proposal.content).slice(0, 100) + '...'}\n                                  </Typography>\n                                  <Box sx={{ display: 'flex', gap: 1 }}>\n                                    <Chip\n                                      icon={<ThumbUp />}\n                                      label={acceptVotes}\n                                      size=\"small\"\n                                      color=\"success\"\n                                      variant=\"filled\"\n                                      sx={{ minWidth: 60 }}\n                                    />\n                                    <Chip\n                                      icon={<ThumbDown />}\n                                      label={rejectVotes}\n                                      size=\"small\"\n                                      color=\"error\"\n                                      variant=\"filled\"\n                                      sx={{ minWidth: 60 }}\n                                    />\n                                    <Typography\n                                      variant=\"caption\"\n                                      sx={{ color: 'rgba(255,255,255,0.5)', alignSelf: 'center', ml: 1 }}\n                                    >\n                                      {formatDistanceToNow(new Date(proposal.timestamp))} ago\n                                    </Typography>\n                                  </Box>\n                                </Box>\n                              }\n                            />\n                            {proposal.status === 'pending' && (\n                              <ListItemSecondaryAction>\n                                <Box sx={{ display: 'flex', gap: 0.5 }}>\n                                  <IconButton\n                                    size=\"small\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleVote(proposal.id, 'accept');\n                                    }}\n                                    sx={{ color: '#4caf50' }}\n                                  >\n                                    <ThumbUp />\n                                  </IconButton>\n                                  <IconButton\n                                    size=\"small\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleVote(proposal.id, 'reject');\n                                    }}\n                                    sx={{ color: '#f44336' }}\n                                  >\n                                    <ThumbDown />\n                                  </IconButton>\n                                  <IconButton\n                                    size=\"small\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleVote(proposal.id, 'abstain');\n                                    }}\n                                    sx={{ color: '#ff9800' }}\n                                  >\n                                    <RemoveCircle />\n                                  </IconButton>\n                                </Box>\n                              </ListItemSecondaryAction>\n                            )}\n                          </ListItem>\n                        </motion.div>\n                      );\n                    })}\n                  </List>\n                ) : (\n                  <Box sx={{ textAlign: 'center', py: 4 }}>\n                    <HowToVote sx={{ fontSize: 64, color: 'rgba(255,255,255,0.3)', mb: 2 }} />\n                    <Typography variant=\"h6\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1 }}>\n                      No active proposals\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.5)' }}>\n                      Create a proposal to start the consensus process\n                    </Typography>\n                  </Box>\n                )}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        {/* Proposal Details */}\n        {selectedProposal && (\n          <Grid item xs={12} md={4}>\n            <motion.div\n              initial={{ opacity: 0, x: 20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Card\n                sx={{\n                  background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n                  border: '1px solid rgba(100, 255, 218, 0.2)',\n                  height: 600\n                }}\n              >\n                <CardContent sx={{ height: '100%', overflow: 'auto' }}>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                    <Typography variant=\"h6\" sx={{ color: '#64ffda' }}>\n                      Proposal Details\n                    </Typography>\n                    <IconButton\n                      size=\"small\"\n                      onClick={() => setSelectedProposal(null)}\n                      sx={{ color: 'white' }}\n                    >\n                      ×\n                    </IconButton>\n                  </Box>\n                  \n                  <Box sx={{ mb: 3 }}>\n                    <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1 }}>\n                      Proposal ID\n                    </Typography>\n                    <Typography sx={{ color: 'white', fontFamily: 'monospace' }}>\n                      {selectedProposal.id}\n                    </Typography>\n                  </Box>\n                  \n                  <Box sx={{ mb: 3 }}>\n                    <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1 }}>\n                      Proposer\n                    </Typography>\n                    <Typography sx={{ color: 'white' }}>\n                      {agents.find(a => a.id === selectedProposal.proposer)?.name || selectedProposal.proposer}\n                    </Typography>\n                  </Box>\n                  \n                  <Box sx={{ mb: 3 }}>\n                    <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1 }}>\n                      Content\n                    </Typography>\n                    <Paper\n                      sx={{\n                        p: 2,\n                        bgcolor: 'rgba(0,0,0,0.3)',\n                        border: '1px solid rgba(255,255,255,0.1)'\n                      }}\n                    >\n                      <Typography\n                        variant=\"body2\"\n                        sx={{ color: 'white', whiteSpace: 'pre-wrap' }}\n                      >\n                        {typeof selectedProposal.content === 'string'\n                          ? selectedProposal.content\n                          : JSON.stringify(selectedProposal.content, null, 2)}\n                      </Typography>\n                    </Paper>\n                  </Box>\n                  \n                  {/* Vote Distribution */}\n                  <Box sx={{ mb: 3 }}>\n                    <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 2 }}>\n                      Vote Distribution\n                    </Typography>\n                    <ResponsiveContainer width=\"100%\" height={150}>\n                      <PieChart>\n                        <Pie\n                          data={voteDistribution}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          innerRadius={30}\n                          outerRadius={60}\n                          dataKey=\"value\"\n                        >\n                          {voteDistribution.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={entry.color} />\n                          ))}\n                        </Pie>\n                        <RechartsTooltip />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </Box>\n                  \n                  {/* Individual Votes */}\n                  <Box>\n                    <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1 }}>\n                      Individual Votes\n                    </Typography>\n                    <List dense>\n                      {Object.entries(selectedProposal.votes).map(([agentId, vote]) => {\n                        const agent = agents.find(a => a.id === agentId);\n                        const voteColor = vote === 'accept' ? '#4caf50' : vote === 'reject' ? '#f44336' : '#ff9800';\n                        \n                        return (\n                          <ListItem key={agentId} sx={{ px: 0 }}>\n                            <ListItemIcon sx={{ minWidth: 36 }}>\n                              <Box\n                                sx={{\n                                  width: 12,\n                                  height: 12,\n                                  borderRadius: '50%',\n                                  bgcolor: voteColor\n                                }}\n                              />\n                            </ListItemIcon>\n                            <ListItemText\n                              primary={agent?.name || agentId.slice(0, 8)}\n                              secondary={vote.toUpperCase()}\n                              sx={{\n                                '& .MuiListItemText-primary': { color: 'white', fontSize: '0.8rem' },\n                                '& .MuiListItemText-secondary': { color: voteColor, fontSize: '0.7rem' }\n                              }}\n                            />\n                          </ListItem>\n                        );\n                      })}\n                    </List>\n                  </Box>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </Grid>\n        )}\n      </Grid>\n      \n      {/* Recent Decisions */}\n      {recentDecisions.length > 0 && (\n        <Card\n          sx={{\n            mt: 3,\n            background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n            border: '1px solid rgba(100, 255, 218, 0.2)'\n          }}\n        >\n          <CardContent>\n            <Typography variant=\"h6\" sx={{ color: '#64ffda', mb: 2 }}>\n              Recent Decisions\n            </Typography>\n            <TableContainer>\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell sx={{ color: 'rgba(255,255,255,0.7)' }}>Proposal</TableCell>\n                    <TableCell sx={{ color: 'rgba(255,255,255,0.7)' }}>Result</TableCell>\n                    <TableCell sx={{ color: 'rgba(255,255,255,0.7)' }}>Confidence</TableCell>\n                    <TableCell sx={{ color: 'rgba(255,255,255,0.7)' }}>Time</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {recentDecisions.map((decision) => (\n                    <TableRow key={decision.id}>\n                      <TableCell sx={{ color: 'white' }}>\n                        {decision.proposalId.slice(0, 8)}...\n                      </TableCell>\n                      <TableCell>\n                        <Chip\n                          label={decision.result}\n                          size=\"small\"\n                          color={decision.result === 'accepted' ? 'success' : 'error'}\n                          variant=\"outlined\"\n                        />\n                      </TableCell>\n                      <TableCell sx={{ color: 'white' }}>\n                        {(decision.confidence * 100).toFixed(1)}%\n                      </TableCell>\n                      <TableCell sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                        {formatDistanceToNow(new Date(decision.timestamp))} ago\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Create Proposal Dialog */}\n      <Dialog\n        open={showCreateDialog}\n        onClose={() => setShowCreateDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n        PaperProps={{\n          sx: {\n            background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n            color: 'white'\n          }\n        }}\n      >\n        <DialogTitle>Create New Proposal</DialogTitle>\n        <DialogContent>\n          <TextField\n            fullWidth\n            label=\"Description\"\n            value={newProposal.description}\n            onChange={(e) => setNewProposal(prev => ({ ...prev, description: e.target.value }))}\n            sx={{ mb: 2, mt: 1 }}\n          />\n          <TextField\n            fullWidth\n            label=\"Content\"\n            multiline\n            rows={6}\n            value={newProposal.content}\n            onChange={(e) => setNewProposal(prev => ({ ...prev, content: e.target.value }))}\n            placeholder=\"Enter proposal content...\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowCreateDialog(false)}>Cancel</Button>\n          <Button\n            onClick={handleCreateProposal}\n            variant=\"contained\"\n            disabled={loading || !newProposal.content || !newProposal.description}\n            sx={{\n              background: 'linear-gradient(45deg, #64ffda, #00bcd4)'\n            }}\n          >\n            Create Proposal\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default ConsensusMonitor;
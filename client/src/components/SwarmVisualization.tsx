import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls, Text, Line, Sphere } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { motion } from 'framer-motion';\nimport {\n  Box,\n  Paper,\n  Typography,\n  ButtonGroup,\n  Button,\n  Chip,\n  IconButton,\n  Tooltip,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n  Grid,\n  Alert\n} from '@mui/material';\nimport {\n  Hub,\n  DeviceHub,\n  AccountTree,\n  RadioButtonChecked,\n  Refresh,\n  Settings,\n  ZoomIn,\n  ZoomOut,\n  CenterFocusStrong,\n  PlayArrow,\n  Pause\n} from '@mui/icons-material';\nimport { SwarmTopology, SwarmNode, SwarmConnection, NeuralAgent } from '../types/neural';\nimport { neuralAPI } from '../services/neuralAPI';\nimport toast from 'react-hot-toast';\n\ninterface SwarmVisualizationProps {\n  topology: SwarmTopology;\n  agents: NeuralAgent[];\n  onInitializeSwarm: (topology: string) => void;\n  isConnected: boolean;\n}\n\ninterface NodeProps {\n  node: SwarmNode;\n  agent?: NeuralAgent;\n  isSelected: boolean;\n  onClick: () => void;\n}\n\ninterface ConnectionProps {\n  connection: SwarmConnection;\n  nodes: SwarmNode[];\n}\n\nconst getNodeColor = (status: string, role: string) => {\n  if (status === 'error') return '#f44336';\n  if (status === 'offline') return '#666666';\n  \n  const roleColors = {\n    worker: '#2196f3',\n    coordinator: '#ff9800',\n    validator: '#4caf50',\n    optimizer: '#9c27b0'\n  };\n  \n  return roleColors[role as keyof typeof roleColors] || '#64ffda';\n};\n\nconst Node: React.FC<NodeProps> = ({ node, agent, isSelected, onClick }) => {\n  const meshRef = useRef<THREE.Mesh>(null);\n  const [hovered, setHovered] = useState(false);\n  \n  useFrame((state) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += 0.01;\n      const scale = isSelected ? 1.2 : hovered ? 1.1 : 1;\n      meshRef.current.scale.lerp(new THREE.Vector3(scale, scale, scale), 0.1);\n    }\n  });\n  \n  const color = getNodeColor(node.status, node.role);\n  const intensity = node.status === 'online' ? Math.sin(Date.now() * 0.01) * 0.3 + 0.7 : 0.3;\n  \n  return (\n    <group\n      position={[node.position.x, node.position.y, node.position.z || 0]}\n      onClick={onClick}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n    >\n      <Sphere\n        ref={meshRef}\n        args={[0.5, 32, 32]}\n      >\n        <meshStandardMaterial\n          color={color}\n          emissive={color}\n          emissiveIntensity={intensity}\n          transparent\n          opacity={0.8}\n        />\n      </Sphere>\n      \n      {node.status === 'online' && (\n        <Sphere args={[0.7, 16, 16]}>\n          <meshBasicMaterial\n            color={color}\n            transparent\n            opacity={0.1}\n            side={THREE.BackSide}\n          />\n        </Sphere>\n      )}\n      \n      <Text\n        position={[0, 1, 0]}\n        fontSize={0.3}\n        color=\"white\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        {agent?.name || `Node ${node.id.slice(0, 8)}`}\n      </Text>\n      \n      <Text\n        position={[0, -1, 0]}\n        fontSize={0.2}\n        color=\"#64ffda\"\n        anchorX=\"center\"\n        anchorY=\"middle\"\n      >\n        {node.role}\n      </Text>\n    </group>\n  );\n};\n\nconst Connection: React.FC<ConnectionProps> = ({ connection, nodes }) => {\n  const sourceNode = nodes.find(n => n.id === connection.sourceId);\n  const targetNode = nodes.find(n => n.id === connection.targetId);\n  \n  if (!sourceNode || !targetNode) return null;\n  \n  const points = [\n    new THREE.Vector3(sourceNode.position.x, sourceNode.position.y, sourceNode.position.z || 0),\n    new THREE.Vector3(targetNode.position.x, targetNode.position.y, targetNode.position.z || 0)\n  ];\n  \n  const color = connection.status === 'active' ? '#64ffda' : \n                connection.status === 'congested' ? '#ff9800' : '#666666';\n  \n  return (\n    <Line\n      points={points}\n      color={color}\n      lineWidth={connection.weight * 2}\n      transparent\n      opacity={connection.status === 'active' ? 0.8 : 0.3}\n    />\n  );\n};\n\nconst Scene: React.FC<{\n  topology: SwarmTopology;\n  agents: NeuralAgent[];\n  selectedNode: string | null;\n  setSelectedNode: (nodeId: string | null) => void;\n}> = ({ topology, agents, selectedNode, setSelectedNode }) => {\n  const { camera, gl } = useThree();\n  \n  useEffect(() => {\n    camera.position.set(10, 10, 10);\n    camera.lookAt(0, 0, 0);\n  }, [camera]);\n  \n  return (\n    <>\n      <ambientLight intensity={0.4} />\n      <pointLight position={[10, 10, 10]} intensity={1} />\n      <pointLight position={[-10, -10, -10]} intensity={0.5} color=\"#64ffda\" />\n      \n      {topology.connections.map((connection) => (\n        <Connection\n          key={connection.id}\n          connection={connection}\n          nodes={topology.nodes}\n        />\n      ))}\n      \n      {topology.nodes.map((node) => {\n        const agent = agents.find(a => a.id === node.agentId);\n        return (\n          <Node\n            key={node.id}\n            node={node}\n            agent={agent}\n            isSelected={selectedNode === node.id}\n            onClick={() => setSelectedNode(selectedNode === node.id ? null : node.id)}\n          />\n        );\n      })}\n      \n      <OrbitControls\n        enablePan={true}\n        enableZoom={true}\n        enableRotate={true}\n        autoRotate={false}\n        autoRotateSpeed={0.5}\n      />\n    </>\n  );\n};\n\nexport const SwarmVisualization: React.FC<SwarmVisualizationProps> = ({\n  topology,\n  agents,\n  onInitializeSwarm,\n  isConnected\n}) => {\n  const [selectedNode, setSelectedNode] = useState<string | null>(null);\n  const [viewMode, setViewMode] = useState<'3d' | '2d'>('3d');\n  const [autoRotate, setAutoRotate] = useState(false);\n  const [loading, setLoading] = useState(false);\n  \n  const selectedNodeData = topology.nodes.find(n => n.id === selectedNode);\n  const selectedAgent = selectedNodeData ? agents.find(a => a.id === selectedNodeData.agentId) : null;\n  \n  const handleInitializeSwarm = async (topologyType: string) => {\n    setLoading(true);\n    try {\n      await onInitializeSwarm(topologyType);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const getTopologyStats = () => {\n    const onlineNodes = topology.nodes.filter(n => n.status === 'online').length;\n    const activeConnections = topology.connections.filter(c => c.status === 'active').length;\n    const avgLoad = topology.nodes.reduce((sum, n) => sum + n.load, 0) / topology.nodes.length || 0;\n    \n    return { onlineNodes, activeConnections, avgLoad };\n  };\n  \n  const stats = getTopologyStats();\n  \n  return (\n    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column', bgcolor: '#0a0a0a' }}>\n      {/* Controls */}\n      <Paper\n        elevation={2}\n        sx={{\n          p: 2,\n          background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n          borderRadius: 0\n        }}\n      >\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h6\" sx={{ color: 'white' }}>\n            Swarm Topology: {topology.type.toUpperCase()}\n          </Typography>\n          \n          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\n            <FormControl size=\"small\" sx={{ minWidth: 150 }}>\n              <InputLabel sx={{ color: 'white' }}>Initialize Swarm</InputLabel>\n              <Select\n                value=\"\"\n                label=\"Initialize Swarm\"\n                onChange={(e) => handleInitializeSwarm(e.target.value)}\n                disabled={!isConnected || loading}\n                sx={{ color: 'white' }}\n              >\n                <MenuItem value=\"mesh\">Mesh Topology</MenuItem>\n                <MenuItem value=\"hierarchical\">Hierarchical</MenuItem>\n                <MenuItem value=\"ring\">Ring Topology</MenuItem>\n                <MenuItem value=\"star\">Star Topology</MenuItem>\n              </Select>\n            </FormControl>\n            \n            <ButtonGroup variant=\"outlined\" size=\"small\">\n              <Button\n                onClick={() => setViewMode('3d')}\n                variant={viewMode === '3d' ? 'contained' : 'outlined'}\n                startIcon={<Hub />}\n              >\n                3D\n              </Button>\n              <Button\n                onClick={() => setViewMode('2d')}\n                variant={viewMode === '2d' ? 'contained' : 'outlined'}\n                startIcon={<DeviceHub />}\n              >\n                2D\n              </Button>\n            </ButtonGroup>\n            \n            <IconButton\n              onClick={() => setAutoRotate(!autoRotate)}\n              sx={{ color: autoRotate ? '#64ffda' : 'white' }}\n            >\n              {autoRotate ? <Pause /> : <PlayArrow />}\n            </IconButton>\n          </Box>\n        </Box>\n        \n        {/* Stats */}\n        <Grid container spacing={2}>\n          <Grid item xs={3}>\n            <Chip\n              icon={<RadioButtonChecked />}\n              label={`${stats.onlineNodes}/${topology.nodes.length} Online`}\n              color={stats.onlineNodes === topology.nodes.length ? 'success' : 'warning'}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <Chip\n              icon={<DeviceHub />}\n              label={`${stats.activeConnections} Connections`}\n              color=\"info\"\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <Chip\n              icon={<MonitorHeart />}\n              label={`${(stats.avgLoad * 100).toFixed(1)}% Avg Load`}\n              color={stats.avgLoad > 0.8 ? 'error' : stats.avgLoad > 0.5 ? 'warning' : 'success'}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <Chip\n              icon={<HowToVote />}\n              label={topology.consensus.toUpperCase()}\n              color=\"secondary\"\n              variant=\"outlined\"\n            />\n          </Grid>\n        </Grid>\n      </Paper>\n      \n      {!isConnected && (\n        <Alert severity=\"warning\" sx={{ m: 2 }}>\n          Neural network disconnected. Visualization may not reflect real-time state.\n        </Alert>\n      )}\n      \n      <Box sx={{ display: 'flex', flexGrow: 1, minHeight: 0 }}>\n        {/* 3D Visualization */}\n        <Box sx={{ flexGrow: 1, position: 'relative' }}>\n          <Canvas\n            camera={{ position: [10, 10, 10], fov: 50 }}\n            style={{ background: 'radial-gradient(circle, #1a1a2e 0%, #0a0a0a 100%)' }}\n          >\n            <Scene\n              topology={topology}\n              agents={agents}\n              selectedNode={selectedNode}\n              setSelectedNode={setSelectedNode}\n            />\n          </Canvas>\n          \n          {/* Floating Stats */}\n          <Box\n            sx={{\n              position: 'absolute',\n              top: 16,\n              left: 16,\n              zIndex: 1000\n            }}\n          >\n            <motion.div\n              initial={{ opacity: 0, x: -20 }}\n              animate={{ opacity: 1, x: 0 }}\n              transition={{ duration: 0.3 }}\n            >\n              <Card\n                sx={{\n                  background: 'rgba(0, 0, 0, 0.8)',\n                  backdropFilter: 'blur(10px)',\n                  border: '1px solid rgba(100, 255, 218, 0.2)'\n                }}\n              >\n                <CardContent sx={{ p: 2 }}>\n                  <Typography variant=\"subtitle2\" sx={{ color: '#64ffda', mb: 1 }}>\n                    Swarm Health\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'white' }}>\n                    Nodes: {topology.nodes.length}\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'white' }}>\n                    Connections: {topology.connections.length}\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'white' }}>\n                    Consensus: {topology.consensus}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </motion.div>\n          </Box>\n        </Box>\n        \n        {/* Node Details Panel */}\n        {selectedNodeData && (\n          <motion.div\n            initial={{ opacity: 0, x: 300 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: 300 }}\n            transition={{ duration: 0.3 }}\n            style={{ width: 320, flexShrink: 0 }}\n          >\n            <Paper\n              sx={{\n                height: '100%',\n                background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n                borderLeft: '1px solid rgba(100, 255, 218, 0.2)',\n                borderRadius: 0\n              }}\n            >\n              <Box sx={{ p: 3 }}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n                  <Typography variant=\"h6\" sx={{ color: 'white' }}>\n                    Node Details\n                  </Typography>\n                  <IconButton\n                    size=\"small\"\n                    onClick={() => setSelectedNode(null)}\n                    sx={{ color: 'white' }}\n                  >\n                    ×\n                  </IconButton>\n                </Box>\n                \n                <Box sx={{ mb: 3 }}>\n                  <Typography variant=\"subtitle2\" sx={{ color: '#64ffda', mb: 1 }}>\n                    Node Information\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'white', mb: 1 }}>\n                    ID: {selectedNodeData.id}\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'white', mb: 1 }}>\n                    Role: {selectedNodeData.role}\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'white', mb: 1 }}>\n                    Status: {selectedNodeData.status}\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'white', mb: 1 }}>\n                    Load: {(selectedNodeData.load * 100).toFixed(1)}%\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ color: 'white' }}>\n                    Connections: {selectedNodeData.connections.length}\n                  </Typography>\n                </Box>\n                \n                {selectedAgent && (\n                  <Box sx={{ mb: 3 }}>\n                    <Typography variant=\"subtitle2\" sx={{ color: '#64ffda', mb: 1 }}>\n                      Agent Information\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ color: 'white', mb: 1 }}>\n                      Name: {selectedAgent.name}\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ color: 'white', mb: 1 }}>\n                      Type: {selectedAgent.type}\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ color: 'white', mb: 1 }}>\n                      Pattern: {selectedAgent.cognitivePattern}\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ color: 'white', mb: 1 }}>\n                      Tasks: {selectedAgent.performance.tasksCompleted}\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ color: 'white' }}>\n                      Success Rate: {(selectedAgent.performance.successRate * 100).toFixed(1)}%\n                    </Typography>\n                  </Box>\n                )}\n                \n                <Box>\n                  <Typography variant=\"subtitle2\" sx={{ color: '#64ffda', mb: 1 }}>\n                    Connected Nodes\n                  </Typography>\n                  {selectedNodeData.connections.map((connId) => {\n                    const connectedNode = topology.nodes.find(n => n.id === connId);\n                    const connectedAgent = connectedNode ? agents.find(a => a.id === connectedNode.agentId) : null;\n                    return (\n                      <Box key={connId} sx={{ mb: 1 }}>\n                        <Typography variant=\"body2\" sx={{ color: 'white' }}>\n                          {connectedAgent?.name || `Node ${connId.slice(0, 8)}`}\n                        </Typography>\n                      </Box>\n                    );\n                  })}\n                </Box>\n              </Box>\n            </Paper>\n          </motion.div>\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default SwarmVisualization;
import React, { useState, useMemo, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Box,\n  Paper,\n  Typography,\n  TextField,\n  Chip,\n  Card,\n  CardContent,\n  Grid,\n  IconButton,\n  Tooltip,\n  Button,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  LinearProgress,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider\n} from '@mui/material';\nimport {\n  Memory,\n  Search,\n  Add,\n  Delete,\n  Share,\n  Timeline,\n  Psychology,\n  Storage,\n  Link,\n  ExpandMore,\n  Visibility,\n  Edit,\n  CloudUpload,\n  GetApp,\n  FilterList\n} from '@mui/icons-material';\nimport { FixedSizeList as VirtualList } from 'react-window';\nimport { NeuralMemory } from '../types/neural';\nimport { neuralAPI } from '../services/neuralAPI';\nimport toast from 'react-hot-toast';\nimport { formatDistanceToNow } from 'date-fns';\nimport { debounce } from 'lodash';\n\ninterface NeuralMemoryExplorerProps {\n  memories: NeuralMemory[];\n  onRefresh: () => void;\n  isConnected: boolean;\n}\n\ninterface MemoryItemProps {\n  index: number;\n  style: React.CSSProperties;\n  data: {\n    memories: NeuralMemory[];\n    onSelect: (memory: NeuralMemory) => void;\n    selectedId?: string;\n  };\n}\n\nconst getMemoryTypeColor = (type: string) => {\n  const colors = {\n    vector: '#e3f2fd',\n    episodic: '#f3e5f5',\n    semantic: '#e8f5e8',\n    working: '#fff3e0'\n  };\n  return colors[type as keyof typeof colors] || '#f5f5f5';\n};\n\nconst getMemoryTypeIcon = (type: string) => {\n  const icons = {\n    vector: <Timeline />,\n    episodic: <Psychology />,\n    semantic: <Storage />,\n    working: <Memory />\n  };\n  return icons[type as keyof typeof icons] || <Memory />;\n};\n\nconst MemoryItem: React.FC<MemoryItemProps> = ({ index, style, data }) => {\n  const { memories, onSelect, selectedId } = data;\n  const memory = memories[index];\n  const isSelected = selectedId === memory.id;\n  \n  return (\n    <div style={style}>\n      <motion.div\n        whileHover={{ scale: 1.02 }}\n        whileTap={{ scale: 0.98 }}\n        style={{ padding: '4px' }}\n      >\n        <Card\n          sx={{\n            cursor: 'pointer',\n            background: isSelected\n              ? 'linear-gradient(135deg, #64ffda 0%, rgba(100, 255, 218, 0.1) 100%)'\n              : `linear-gradient(135deg, ${getMemoryTypeColor(memory.type)} 0%, rgba(255,255,255,0.05) 100%)`,\n            backdropFilter: 'blur(10px)',\n            border: isSelected ? '2px solid #64ffda' : '1px solid rgba(255,255,255,0.1)',\n            transition: 'all 0.2s'\n          }}\n          onClick={() => onSelect(memory)}\n        >\n          <CardContent sx={{ p: 2 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n              {getMemoryTypeIcon(memory.type)}\n              <Typography variant=\"subtitle2\" sx={{ ml: 1, color: 'white', fontWeight: 'bold' }}>\n                {memory.type.toUpperCase()}\n              </Typography>\n              <Chip\n                label={`Strength: ${memory.strength.toFixed(2)}`}\n                size=\"small\"\n                color=\"primary\"\n                variant=\"outlined\"\n                sx={{ ml: 'auto' }}\n              />\n            </Box>\n            \n            <Typography\n              variant=\"body2\"\n              sx={{\n                color: 'rgba(255,255,255,0.8)',\n                mb: 1,\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                display: '-webkit-box',\n                WebkitLineClamp: 2,\n                WebkitBoxOrient: 'vertical'\n              }}\n            >\n              {typeof memory.content === 'string'\n                ? memory.content\n                : JSON.stringify(memory.content).slice(0, 100) + '...'}\n            </Typography>\n            \n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n              <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.6)' }}>\n                {formatDistanceToNow(new Date(memory.created))} ago\n              </Typography>\n              <Box sx={{ display: 'flex', gap: 0.5 }}>\n                <Chip\n                  label={memory.associations.length}\n                  size=\"small\"\n                  icon={<Link />}\n                  variant=\"outlined\"\n                  sx={{ fontSize: '0.6rem', height: 16 }}\n                />\n                <Chip\n                  label={memory.accessCount}\n                  size=\"small\"\n                  icon={<Visibility />}\n                  variant=\"outlined\"\n                  sx={{ fontSize: '0.6rem', height: 16 }}\n                />\n              </Box>\n            </Box>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n};\n\nexport const NeuralMemoryExplorer: React.FC<NeuralMemoryExplorerProps> = ({\n  memories,\n  onRefresh,\n  isConnected\n}) => {\n  const [selectedMemory, setSelectedMemory] = useState<NeuralMemory | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState<string>('all');\n  const [sortBy, setSortBy] = useState<'created' | 'accessed' | 'strength'>('created');\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [newMemory, setNewMemory] = useState({\n    type: 'semantic' as const,\n    content: '',\n    associations: [] as string[],\n    strength: 1.0\n  });\n  \n  const debouncedSearch = useMemo(\n    () => debounce((term: string) => setSearchTerm(term), 300),\n    []\n  );\n  \n  const filteredAndSortedMemories = useMemo(() => {\n    let filtered = memories;\n    \n    // Apply type filter\n    if (filterType !== 'all') {\n      filtered = filtered.filter(memory => memory.type === filterType);\n    }\n    \n    // Apply search filter\n    if (searchTerm) {\n      filtered = filtered.filter(memory => {\n        const contentStr = typeof memory.content === 'string'\n          ? memory.content\n          : JSON.stringify(memory.content);\n        return contentStr.toLowerCase().includes(searchTerm.toLowerCase()) ||\n               memory.associations.some(assoc => \n                 assoc.toLowerCase().includes(searchTerm.toLowerCase())\n               );\n      });\n    }\n    \n    // Sort memories\n    return filtered.sort((a, b) => {\n      switch (sortBy) {\n        case 'created':\n          return new Date(b.created).getTime() - new Date(a.created).getTime();\n        case 'accessed':\n          return new Date(b.lastAccessed).getTime() - new Date(a.lastAccessed).getTime();\n        case 'strength':\n          return b.strength - a.strength;\n        default:\n          return 0;\n      }\n    });\n  }, [memories, filterType, searchTerm, sortBy]);\n  \n  const memoryStats = useMemo(() => {\n    const stats = {\n      total: memories.length,\n      vector: 0,\n      episodic: 0,\n      semantic: 0,\n      working: 0,\n      avgStrength: 0,\n      totalAccesses: 0\n    };\n    \n    memories.forEach(memory => {\n      stats[memory.type as keyof typeof stats]++;\n      stats.avgStrength += memory.strength;\n      stats.totalAccesses += memory.accessCount;\n    });\n    \n    if (memories.length > 0) {\n      stats.avgStrength /= memories.length;\n    }\n    \n    return stats;\n  }, [memories]);\n  \n  const handleCreateMemory = async () => {\n    try {\n      setLoading(true);\n      await neuralAPI.storeMemory(newMemory);\n      toast.success('Memory stored successfully');\n      setShowCreateDialog(false);\n      setNewMemory({\n        type: 'semantic',\n        content: '',\n        associations: [],\n        strength: 1.0\n      });\n      onRefresh();\n    } catch (error) {\n      toast.error('Failed to store memory');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const handleDeleteMemory = async (memoryId: string) => {\n    try {\n      setLoading(true);\n      // Note: This would need to be implemented in the API\n      // await neuralAPI.deleteMemory(memoryId);\n      toast.success('Memory deleted successfully');\n      setSelectedMemory(null);\n      onRefresh();\n    } catch (error) {\n      toast.error('Failed to delete memory');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const handleShareMemory = async (memory: NeuralMemory) => {\n    try {\n      // This would need agent selection dialog\n      toast.success('Memory shared with agents');\n    } catch (error) {\n      toast.error('Failed to share memory');\n      console.error(error);\n    }\n  };\n  \n  return (\n    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column', bgcolor: '#0a0a0a' }}>\n      {/* Header */}\n      <Paper\n        elevation={2}\n        sx={{\n          p: 2,\n          background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n          borderRadius: 0\n        }}\n      >\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n          <Typography variant=\"h6\" sx={{ color: 'white' }}>\n            Neural Memory Explorer\n          </Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<Add />}\n            onClick={() => setShowCreateDialog(true)}\n            disabled={!isConnected}\n            sx={{\n              background: 'linear-gradient(45deg, #64ffda, #00bcd4)'\n            }}\n          >\n            Store Memory\n          </Button>\n        </Box>\n        \n        {/* Stats */}\n        <Grid container spacing={2} sx={{ mb: 2 }}>\n          <Grid item xs={2}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h5\" sx={{ color: '#64ffda' }}>\n                {memoryStats.total}\n              </Typography>\n              <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                Total Memories\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={2}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h6\" sx={{ color: '#2196f3' }}>\n                {memoryStats.vector}\n              </Typography>\n              <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                Vector\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={2}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h6\" sx={{ color: '#9c27b0' }}>\n                {memoryStats.episodic}\n              </Typography>\n              <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                Episodic\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={2}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h6\" sx={{ color: '#4caf50' }}>\n                {memoryStats.semantic}\n              </Typography>\n              <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                Semantic\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={2}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h6\" sx={{ color: '#ff9800' }}>\n                {memoryStats.working}\n              </Typography>\n              <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                Working\n              </Typography>\n            </Box>\n          </Grid>\n          <Grid item xs={2}>\n            <Box sx={{ textAlign: 'center' }}>\n              <Typography variant=\"h6\" sx={{ color: '#64ffda' }}>\n                {memoryStats.avgStrength.toFixed(2)}\n              </Typography>\n              <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                Avg Strength\n              </Typography>\n            </Box>\n          </Grid>\n        </Grid>\n        \n        {/* Filters */}\n        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\n          <TextField\n            size=\"small\"\n            placeholder=\"Search memories...\"\n            onChange={(e) => debouncedSearch(e.target.value)}\n            InputProps={{\n              startAdornment: <Search sx={{ mr: 1, color: 'rgba(255,255,255,0.5)' }} />\n            }}\n            sx={{\n              '& .MuiOutlinedInput-input': { color: 'white' },\n              minWidth: 300\n            }}\n          />\n          \n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n            <InputLabel sx={{ color: 'white' }}>Type</InputLabel>\n            <Select\n              value={filterType}\n              label=\"Type\"\n              onChange={(e) => setFilterType(e.target.value)}\n              sx={{ color: 'white' }}\n            >\n              <MenuItem value=\"all\">All Types</MenuItem>\n              <MenuItem value=\"vector\">Vector</MenuItem>\n              <MenuItem value=\"episodic\">Episodic</MenuItem>\n              <MenuItem value=\"semantic\">Semantic</MenuItem>\n              <MenuItem value=\"working\">Working</MenuItem>\n            </Select>\n          </FormControl>\n          \n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n            <InputLabel sx={{ color: 'white' }}>Sort By</InputLabel>\n            <Select\n              value={sortBy}\n              label=\"Sort By\"\n              onChange={(e) => setSortBy(e.target.value as any)}\n              sx={{ color: 'white' }}\n            >\n              <MenuItem value=\"created\">Created</MenuItem>\n              <MenuItem value=\"accessed\">Last Accessed</MenuItem>\n              <MenuItem value=\"strength\">Strength</MenuItem>\n            </Select>\n          </FormControl>\n        </Box>\n      </Paper>\n      \n      {!isConnected && (\n        <Alert severity=\"warning\" sx={{ m: 2 }}>\n          Neural network disconnected. Memory operations may be unavailable.\n        </Alert>\n      )}\n      \n      <Box sx={{ display: 'flex', flexGrow: 1, minHeight: 0 }}>\n        {/* Memory List */}\n        <Box sx={{ width: selectedMemory ? '50%' : '100%', borderRight: selectedMemory ? '1px solid rgba(255,255,255,0.1)' : 'none' }}>\n          {filteredAndSortedMemories.length > 0 ? (\n            <VirtualList\n              height={window.innerHeight - 200}\n              itemCount={filteredAndSortedMemories.length}\n              itemSize={120}\n              itemData={{\n                memories: filteredAndSortedMemories,\n                onSelect: setSelectedMemory,\n                selectedId: selectedMemory?.id\n              }}\n            >\n              {MemoryItem}\n            </VirtualList>\n          ) : (\n            <Box sx={{ p: 4, textAlign: 'center' }}>\n              <Memory sx={{ fontSize: 64, color: 'rgba(255,255,255,0.3)', mb: 2 }} />\n              <Typography variant=\"h6\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1 }}>\n                No memories found\n              </Typography>\n              <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.5)' }}>\n                {searchTerm || filterType !== 'all'\n                  ? 'Try adjusting your search or filter criteria'\n                  : 'Create your first memory to get started'}\n              </Typography>\n            </Box>\n          )}\n        </Box>\n        \n        {/* Memory Details */}\n        <AnimatePresence>\n          {selectedMemory && (\n            <motion.div\n              initial={{ opacity: 0, x: 300 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: 300 }}\n              transition={{ duration: 0.3 }}\n              style={{ width: '50%', flexShrink: 0 }}\n            >\n              <Paper\n                sx={{\n                  height: '100%',\n                  background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n                  borderRadius: 0,\n                  overflow: 'auto'\n                }}\n              >\n                <Box sx={{ p: 3 }}>\n                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n                    <Typography variant=\"h6\" sx={{ color: 'white' }}>\n                      Memory Details\n                    </Typography>\n                    <Box>\n                      <IconButton\n                        size=\"small\"\n                        onClick={() => handleShareMemory(selectedMemory)}\n                        sx={{ color: '#64ffda', mr: 1 }}\n                      >\n                        <Share />\n                      </IconButton>\n                      <IconButton\n                        size=\"small\"\n                        onClick={() => handleDeleteMemory(selectedMemory.id)}\n                        sx={{ color: '#f44336', mr: 1 }}\n                      >\n                        <Delete />\n                      </IconButton>\n                      <IconButton\n                        size=\"small\"\n                        onClick={() => setSelectedMemory(null)}\n                        sx={{ color: 'white' }}\n                      >\n                        ×\n                      </IconButton>\n                    </Box>\n                  </Box>\n                  \n                  {/* Memory Info */}\n                  <Accordion defaultExpanded>\n                    <AccordionSummary expandIcon={<ExpandMore sx={{ color: 'white' }} />}>\n                      <Typography sx={{ color: '#64ffda' }}>Memory Information</Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                      <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                          <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                            Type\n                          </Typography>\n                          <Typography sx={{ color: 'white' }}>\n                            {selectedMemory.type.toUpperCase()}\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                          <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                            Strength\n                          </Typography>\n                          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                            <LinearProgress\n                              variant=\"determinate\"\n                              value={selectedMemory.strength * 100}\n                              sx={{\n                                flexGrow: 1,\n                                mr: 1,\n                                bgcolor: 'rgba(255,255,255,0.1)',\n                                '& .MuiLinearProgress-bar': { bgcolor: '#64ffda' }\n                              }}\n                            />\n                            <Typography sx={{ color: 'white' }}>\n                              {selectedMemory.strength.toFixed(2)}\n                            </Typography>\n                          </Box>\n                        </Grid>\n                        <Grid item xs={6}>\n                          <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                            Created\n                          </Typography>\n                          <Typography sx={{ color: 'white' }}>\n                            {formatDistanceToNow(new Date(selectedMemory.created))} ago\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={6}>\n                          <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                            Access Count\n                          </Typography>\n                          <Typography sx={{ color: 'white' }}>\n                            {selectedMemory.accessCount}\n                          </Typography>\n                        </Grid>\n                      </Grid>\n                    </AccordionDetails>\n                  </Accordion>\n                  \n                  {/* Content */}\n                  <Accordion defaultExpanded>\n                    <AccordionSummary expandIcon={<ExpandMore sx={{ color: 'white' }} />}>\n                      <Typography sx={{ color: '#64ffda' }}>Content</Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                      <Paper\n                        sx={{\n                          p: 2,\n                          bgcolor: 'rgba(0,0,0,0.3)',\n                          border: '1px solid rgba(255,255,255,0.1)'\n                        }}\n                      >\n                        <Typography\n                          variant=\"body2\"\n                          sx={{\n                            color: 'white',\n                            whiteSpace: 'pre-wrap',\n                            fontFamily: 'monospace'\n                          }}\n                        >\n                          {typeof selectedMemory.content === 'string'\n                            ? selectedMemory.content\n                            : JSON.stringify(selectedMemory.content, null, 2)}\n                        </Typography>\n                      </Paper>\n                    </AccordionDetails>\n                  </Accordion>\n                  \n                  {/* Associations */}\n                  {selectedMemory.associations.length > 0 && (\n                    <Accordion>\n                      <AccordionSummary expandIcon={<ExpandMore sx={{ color: 'white' }} />}>\n                        <Typography sx={{ color: '#64ffda' }}>\n                          Associations ({selectedMemory.associations.length})\n                        </Typography>\n                      </AccordionSummary>\n                      <AccordionDetails>\n                        <List dense>\n                          {selectedMemory.associations.map((association, index) => (\n                            <ListItem key={index}>\n                              <ListItemIcon>\n                                <Link sx={{ color: '#64ffda' }} />\n                              </ListItemIcon>\n                              <ListItemText\n                                primary={association}\n                                sx={{ '& .MuiListItemText-primary': { color: 'white' } }}\n                              />\n                            </ListItem>\n                          ))}\n                        </List>\n                      </AccordionDetails>\n                    </Accordion>\n                  )}\n                  \n                  {/* Embedding Preview */}\n                  {selectedMemory.embedding && (\n                    <Accordion>\n                      <AccordionSummary expandIcon={<ExpandMore sx={{ color: 'white' }} />}>\n                        <Typography sx={{ color: '#64ffda' }}>\n                          Vector Embedding ({selectedMemory.embedding.length}D)\n                        </Typography>\n                      </AccordionSummary>\n                      <AccordionDetails>\n                        <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1 }}>\n                          First 10 dimensions:\n                        </Typography>\n                        <Typography\n                          variant=\"body2\"\n                          sx={{\n                            color: 'white',\n                            fontFamily: 'monospace',\n                            bgcolor: 'rgba(0,0,0,0.3)',\n                            p: 1,\n                            borderRadius: 1\n                          }}\n                        >\n                          [{selectedMemory.embedding.slice(0, 10).map(v => v.toFixed(4)).join(', ')}\n                          {selectedMemory.embedding.length > 10 ? ', ...' : ''}]\n                        </Typography>\n                      </AccordionDetails>\n                    </Accordion>\n                  )}\n                </Box>\n              </Paper>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </Box>\n      \n      {/* Create Memory Dialog */}\n      <Dialog\n        open={showCreateDialog}\n        onClose={() => setShowCreateDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n        PaperProps={{\n          sx: {\n            background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n            color: 'white'\n          }\n        }}\n      >\n        <DialogTitle>Store New Memory</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Memory Type</InputLabel>\n                <Select\n                  value={newMemory.type}\n                  label=\"Memory Type\"\n                  onChange={(e) => setNewMemory(prev => ({ ...prev, type: e.target.value as any }))}\n                >\n                  <MenuItem value=\"vector\">Vector</MenuItem>\n                  <MenuItem value=\"episodic\">Episodic</MenuItem>\n                  <MenuItem value=\"semantic\">Semantic</MenuItem>\n                  <MenuItem value=\"working\">Working</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                label=\"Strength\"\n                type=\"number\"\n                fullWidth\n                value={newMemory.strength}\n                onChange={(e) => setNewMemory(prev => ({ ...prev, strength: parseFloat(e.target.value) }))}\n                inputProps={{ min: 0, max: 1, step: 0.1 }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                label=\"Content\"\n                multiline\n                rows={6}\n                fullWidth\n                value={newMemory.content}\n                onChange={(e) => setNewMemory(prev => ({ ...prev, content: e.target.value }))}\n                placeholder=\"Enter memory content...\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                label=\"Associations (comma-separated)\"\n                fullWidth\n                value={newMemory.associations.join(', ')}\n                onChange={(e) => setNewMemory(prev => ({\n                  ...prev,\n                  associations: e.target.value.split(',').map(s => s.trim()).filter(Boolean)\n                }))}\n                placeholder=\"tag1, tag2, concept1...\"\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowCreateDialog(false)}>Cancel</Button>\n          <Button\n            onClick={handleCreateMemory}\n            variant=\"contained\"\n            disabled={loading || !newMemory.content}\n            sx={{\n              background: 'linear-gradient(45deg, #64ffda, #00bcd4)'\n            }}\n          >\n            Store Memory\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default NeuralMemoryExplorer;
import React, { useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Chip,
  Avatar,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Slider,
  LinearProgress,
  IconButton,
  Tooltip,
  Alert,
  List,
  ListItem,
  ListItemText,
  ListItemIcon
} from '@mui/material';
import {\n  Psychology,\n  Add,\n  Edit,\n  Delete,\n  PlayArrow,\n  Pause,\n  Settings,\n  Memory,\n  Speed,\n  TrendingUp,\n  Error as ErrorIcon,\n  CheckCircle,\n  School,\n  Lightbulb\n} from '@mui/icons-material';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { NeuralAgent, CognitivePattern } from '../types/neural';\nimport { neuralAPI } from '../services/neuralAPI';\nimport toast from 'react-hot-toast';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface CognitiveAgentPanelProps {\n  agents: NeuralAgent[];\n  onRefresh: () => void;\n  isConnected: boolean;\n}\n\nconst agentSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  type: z.enum(['researcher', 'coder', 'analyst', 'optimizer', 'coordinator']),\n  cognitivePattern: z.enum(['convergent', 'divergent', 'lateral', 'systems', 'critical', 'adaptive']),\n  autonomyLevel: z.number().min(0).max(1),\n  learningRate: z.number().min(0).max(1),\n  capabilities: z.array(z.string())\n});\n\ntype AgentFormData = z.infer<typeof agentSchema>;\n\nconst getAgentColor = (type: string) => {\n  const colors = {\n    researcher: '#e3f2fd',\n    coder: '#f3e5f5',\n    analyst: '#e8f5e8',\n    optimizer: '#fff3e0',\n    coordinator: '#fce4ec'\n  };\n  return colors[type as keyof typeof colors] || '#f5f5f5';\n};\n\nconst getStatusColor = (status: string) => {\n  const colors = {\n    active: 'success',\n    idle: 'info',\n    busy: 'warning',\n    error: 'error'\n  };\n  return colors[status as keyof typeof colors] || 'default';\n};\n\nconst getCognitivePatternDescription = (pattern: string) => {\n  const descriptions = {\n    convergent: 'Focused, analytical thinking',\n    divergent: 'Creative, exploratory thinking',\n    lateral: 'Innovative, out-of-the-box thinking',\n    systems: 'Holistic, interconnected thinking',\n    critical: 'Evaluative, skeptical thinking',\n    adaptive: 'Flexible, learning-oriented thinking'\n  };\n  return descriptions[pattern as keyof typeof descriptions] || 'Unknown pattern';\n};\n\nexport const CognitiveAgentPanel: React.FC<CognitiveAgentPanelProps> = ({\n  agents,\n  onRefresh,\n  isConnected\n}) => {\n  const [selectedAgent, setSelectedAgent] = useState<NeuralAgent | null>(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [patterns, setPatterns] = useState<CognitivePattern[]>([]);\n\n  const { control, handleSubmit, reset, formState: { errors } } = useForm<AgentFormData>({\n    resolver: zodResolver(agentSchema),\n    defaultValues: {\n      name: '',\n      type: 'researcher',\n      cognitivePattern: 'adaptive',\n      autonomyLevel: 0.8,\n      learningRate: 0.01,\n      capabilities: []\n    }\n  });\n\n  const loadCognitivePatterns = useCallback(async () => {\n    try {\n      const patternsData = await neuralAPI.getCognitivePatterns();\n      setPatterns(patternsData);\n    } catch (error) {\n      console.error('Failed to load cognitive patterns:', error);\n    }\n  }, []);\n\n  const handleCreateAgent = async (data: AgentFormData) => {\n    try {\n      setLoading(true);\n      await neuralAPI.createAgent(data);\n      toast.success('Agent created successfully');\n      setShowCreateDialog(false);\n      reset();\n      onRefresh();\n    } catch (error) {\n      toast.error('Failed to create agent');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUpdateAgent = async (data: AgentFormData) => {\n    if (!selectedAgent) return;\n    \n    try {\n      setLoading(true);\n      await neuralAPI.updateAgent(selectedAgent.id, data);\n      toast.success('Agent updated successfully');\n      setShowEditDialog(false);\n      setSelectedAgent(null);\n      reset();\n      onRefresh();\n    } catch (error) {\n      toast.error('Failed to update agent');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteAgent = async (agentId: string) => {\n    try {\n      setLoading(true);\n      await neuralAPI.deleteAgent(agentId);\n      toast.success('Agent deleted successfully');\n      onRefresh();\n    } catch (error) {\n      toast.error('Failed to delete agent');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTrainAgent = async (agentId: string) => {\n    try {\n      setLoading(true);\n      await neuralAPI.trainAgent(agentId, 10);\n      toast.success('Agent training started');\n      onRefresh();\n    } catch (error) {\n      toast.error('Failed to start training');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChangeCognitivePattern = async (agentId: string, pattern: string) => {\n    try {\n      await neuralAPI.changeCognitivePattern(agentId, pattern);\n      toast.success('Cognitive pattern updated');\n      onRefresh();\n    } catch (error) {\n      toast.error('Failed to update cognitive pattern');\n      console.error(error);\n    }\n  };\n\n  const openEditDialog = (agent: NeuralAgent) => {\n    setSelectedAgent(agent);\n    reset({\n      name: agent.name,\n      type: agent.type,\n      cognitivePattern: agent.cognitivePattern,\n      autonomyLevel: agent.autonomyLevel,\n      learningRate: agent.learningRate,\n      capabilities: agent.capabilities\n    });\n    setShowEditDialog(true);\n  };\n\n  React.useEffect(() => {\n    loadCognitivePatterns();\n  }, [loadCognitivePatterns]);\n\n  return (\n    <Box sx={{ p: 3, height: '100%', overflow: 'auto', bgcolor: '#0a0a0a' }}>\n      {/* Header */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h5\" sx={{ color: 'white', fontWeight: 'bold' }}>\n          Cognitive Agents ({agents.length})\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<Add />}\n          onClick={() => setShowCreateDialog(true)}\n          disabled={!isConnected}\n          sx={{\n            background: 'linear-gradient(45deg, #64ffda, #00bcd4)',\n            '&:hover': {\n              background: 'linear-gradient(45deg, #4fd3a6, #0097a7)'\n            }\n          }}\n        >\n          Create Agent\n        </Button>\n      </Box>\n\n      {!isConnected && (\n        <Alert severity=\"warning\" sx={{ mb: 2 }}>\n          Neural network disconnected. Some features may be unavailable.\n        </Alert>\n      )}\n\n      {/* Agents Grid */}\n      <Grid container spacing={3}>\n        <AnimatePresence>\n          {agents.map((agent) => (\n            <Grid item xs={12} sm={6} md={4} key={agent.id}>\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                transition={{ duration: 0.3 }}\n              >\n                <Card\n                  sx={{\n                    background: `linear-gradient(135deg, ${getAgentColor(agent.type)} 0%, rgba(255,255,255,0.05) 100%)`,\n                    backdropFilter: 'blur(10px)',\n                    border: '1px solid rgba(255,255,255,0.1)',\n                    height: '100%',\n                    transition: 'transform 0.2s, box-shadow 0.2s',\n                    '&:hover': {\n                      transform: 'translateY(-4px)',\n                      boxShadow: '0 8px 32px rgba(100, 255, 218, 0.2)'\n                    }\n                  }}\n                >\n                  <CardContent>\n                    {/* Agent Header */}\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                      <Avatar\n                        sx={{\n                          bgcolor: getStatusColor(agent.status) + '.main',\n                          mr: 2\n                        }}\n                      >\n                        <Psychology />\n                      </Avatar>\n                      <Box sx={{ flexGrow: 1 }}>\n                        <Typography variant=\"h6\" sx={{ color: 'white', fontWeight: 'bold' }}>\n                          {agent.name}\n                        </Typography>\n                        <Box sx={{ display: 'flex', gap: 1, mt: 0.5 }}>\n                          <Chip\n                            label={agent.type}\n                            size=\"small\"\n                            color=\"primary\"\n                            variant=\"outlined\"\n                          />\n                          <Chip\n                            label={agent.status}\n                            size=\"small\"\n                            color={getStatusColor(agent.status) as any}\n                            variant=\"filled\"\n                          />\n                        </Box>\n                      </Box>\n                    </Box>\n\n                    {/* Cognitive Pattern */}\n                    <Box sx={{ mb: 2 }}>\n                      <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1 }}>\n                        Cognitive Pattern\n                      </Typography>\n                      <Tooltip title={getCognitivePatternDescription(agent.cognitivePattern)}>\n                        <Chip\n                          icon={<Lightbulb />}\n                          label={agent.cognitivePattern}\n                          variant=\"outlined\"\n                          sx={{ color: '#64ffda', borderColor: '#64ffda' }}\n                        />\n                      </Tooltip>\n                    </Box>\n\n                    {/* Performance Metrics */}\n                    <Box sx={{ mb: 2 }}>\n                      <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1 }}>\n                        Performance\n                      </Typography>\n                      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                        <Typography variant=\"body2\" sx={{ color: 'white' }}>Success Rate</Typography>\n                        <Typography variant=\"body2\" sx={{ color: '#64ffda' }}>\n                          {(agent.performance.successRate * 100).toFixed(1)}%\n                        </Typography>\n                      </Box>\n                      <LinearProgress\n                        variant=\"determinate\"\n                        value={agent.performance.successRate * 100}\n                        sx={{\n                          bgcolor: 'rgba(255,255,255,0.1)',\n                          '& .MuiLinearProgress-bar': {\n                            bgcolor: '#64ffda'\n                          }\n                        }}\n                      />\n                    </Box>\n\n                    {/* Capabilities */}\n                    <Box sx={{ mb: 2 }}>\n                      <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1 }}>\n                        Capabilities ({agent.capabilities.length})\n                      </Typography>\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                        {agent.capabilities.slice(0, 3).map((capability) => (\n                          <Chip\n                            key={capability}\n                            label={capability}\n                            size=\"small\"\n                            variant=\"filled\"\n                            sx={{ fontSize: '0.7rem', height: 20 }}\n                          />\n                        ))}\n                        {agent.capabilities.length > 3 && (\n                          <Chip\n                            label={`+${agent.capabilities.length - 3}`}\n                            size=\"small\"\n                            variant=\"outlined\"\n                            sx={{ fontSize: '0.7rem', height: 20 }}\n                          />\n                        )}\n                      </Box>\n                    </Box>\n\n                    {/* Stats */}\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\n                      <Box sx={{ textAlign: 'center' }}>\n                        <Typography variant=\"h6\" sx={{ color: '#64ffda' }}>\n                          {agent.performance.tasksCompleted}\n                        </Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                          Tasks\n                        </Typography>\n                      </Box>\n                      <Box sx={{ textAlign: 'center' }}>\n                        <Typography variant=\"h6\" sx={{ color: '#64ffda' }}>\n                          {agent.performance.averageResponseTime.toFixed(0)}ms\n                        </Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                          Avg Response\n                        </Typography>\n                      </Box>\n                      <Box sx={{ textAlign: 'center' }}>\n                        <Typography variant=\"h6\" sx={{ color: '#64ffda' }}>\n                          {(agent.autonomyLevel * 100).toFixed(0)}%\n                        </Typography>\n                        <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                          Autonomy\n                        </Typography>\n                      </Box>\n                    </Box>\n\n                    {/* Last Activity */}\n                    <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.5)', mb: 2, display: 'block' }}>\n                      Last active {formatDistanceToNow(new Date(agent.lastActivity))} ago\n                    </Typography>\n\n                    {/* Actions */}\n                    <Box sx={{ display: 'flex', gap: 1 }}>\n                      <Tooltip title=\"Edit Agent\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => openEditDialog(agent)}\n                          sx={{ color: '#64ffda' }}\n                        >\n                          <Edit />\n                        </IconButton>\n                      </Tooltip>\n                      <Tooltip title=\"Train Agent\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => handleTrainAgent(agent.id)}\n                          sx={{ color: '#ff9800' }}\n                          disabled={loading}\n                        >\n                          <School />\n                        </IconButton>\n                      </Tooltip>\n                      <Tooltip title=\"Delete Agent\">\n                        <IconButton\n                          size=\"small\"\n                          onClick={() => handleDeleteAgent(agent.id)}\n                          sx={{ color: '#f44336' }}\n                          disabled={loading}\n                        >\n                          <Delete />\n                        </IconButton>\n                      </Tooltip>\n                    </Box>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            </Grid>\n          ))}\n        </AnimatePresence>\n      </Grid>\n\n      {/* Create Agent Dialog */}\n      <Dialog\n        open={showCreateDialog}\n        onClose={() => setShowCreateDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n        PaperProps={{\n          sx: {\n            background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n            color: 'white'\n          }\n        }}\n      >\n        <DialogTitle>Create Neural Agent</DialogTitle>\n        <form onSubmit={handleSubmit(handleCreateAgent)}>\n          <DialogContent>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <Controller\n                  name=\"name\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      label=\"Agent Name\"\n                      fullWidth\n                      error={!!errors.name}\n                      helperText={errors.name?.message}\n                      sx={{ input: { color: 'white' } }}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Agent Type</InputLabel>\n                  <Controller\n                    name=\"type\"\n                    control={control}\n                    render={({ field }) => (\n                      <Select {...field} label=\"Agent Type\">\n                        <MenuItem value=\"researcher\">Researcher</MenuItem>\n                        <MenuItem value=\"coder\">Coder</MenuItem>\n                        <MenuItem value=\"analyst\">Analyst</MenuItem>\n                        <MenuItem value=\"optimizer\">Optimizer</MenuItem>\n                        <MenuItem value=\"coordinator\">Coordinator</MenuItem>\n                      </Select>\n                    )}\n                  />\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <FormControl fullWidth>\n                  <InputLabel>Cognitive Pattern</InputLabel>\n                  <Controller\n                    name=\"cognitivePattern\"\n                    control={control}\n                    render={({ field }) => (\n                      <Select {...field} label=\"Cognitive Pattern\">\n                        <MenuItem value=\"convergent\">Convergent</MenuItem>\n                        <MenuItem value=\"divergent\">Divergent</MenuItem>\n                        <MenuItem value=\"lateral\">Lateral</MenuItem>\n                        <MenuItem value=\"systems\">Systems</MenuItem>\n                        <MenuItem value=\"critical\">Critical</MenuItem>\n                        <MenuItem value=\"adaptive\">Adaptive</MenuItem>\n                      </Select>\n                    )}\n                  />\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Typography gutterBottom>Autonomy Level</Typography>\n                <Controller\n                  name=\"autonomyLevel\"\n                  control={control}\n                  render={({ field }) => (\n                    <Slider\n                      {...field}\n                      min={0}\n                      max={1}\n                      step={0.1}\n                      marks\n                      valueLabelDisplay=\"auto\"\n                      valueLabelFormat={(value) => `${(value * 100).toFixed(0)}%`}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Typography gutterBottom>Learning Rate</Typography>\n                <Controller\n                  name=\"learningRate\"\n                  control={control}\n                  render={({ field }) => (\n                    <Slider\n                      {...field}\n                      min={0.001}\n                      max={0.1}\n                      step={0.001}\n                      marks\n                      valueLabelDisplay=\"auto\"\n                      valueLabelFormat={(value) => value.toFixed(3)}\n                    />\n                  )}\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setShowCreateDialog(false)}>Cancel</Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              disabled={loading}\n              sx={{\n                background: 'linear-gradient(45deg, #64ffda, #00bcd4)'\n              }}\n            >\n              Create Agent\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n\n      {/* Edit Agent Dialog */}\n      <Dialog\n        open={showEditDialog}\n        onClose={() => setShowEditDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n        PaperProps={{\n          sx: {\n            background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n            color: 'white'\n          }\n        }}\n      >\n        <DialogTitle>Edit Neural Agent</DialogTitle>\n        <form onSubmit={handleSubmit(handleUpdateAgent)}>\n          <DialogContent>\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <Controller\n                  name=\"name\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      {...field}\n                      label=\"Agent Name\"\n                      fullWidth\n                      error={!!errors.name}\n                      helperText={errors.name?.message}\n                      sx={{ input: { color: 'white' } }}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <FormControl fullWidth>\n                  <InputLabel>Cognitive Pattern</InputLabel>\n                  <Controller\n                    name=\"cognitivePattern\"\n                    control={control}\n                    render={({ field }) => (\n                      <Select {...field} label=\"Cognitive Pattern\">\n                        <MenuItem value=\"convergent\">Convergent</MenuItem>\n                        <MenuItem value=\"divergent\">Divergent</MenuItem>\n                        <MenuItem value=\"lateral\">Lateral</MenuItem>\n                        <MenuItem value=\"systems\">Systems</MenuItem>\n                        <MenuItem value=\"critical\">Critical</MenuItem>\n                        <MenuItem value=\"adaptive\">Adaptive</MenuItem>\n                      </Select>\n                    )}\n                  />\n                </FormControl>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Typography gutterBottom>Autonomy Level</Typography>\n                <Controller\n                  name=\"autonomyLevel\"\n                  control={control}\n                  render={({ field }) => (\n                    <Slider\n                      {...field}\n                      min={0}\n                      max={1}\n                      step={0.1}\n                      marks\n                      valueLabelDisplay=\"auto\"\n                      valueLabelFormat={(value) => `${(value * 100).toFixed(0)}%`}\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Typography gutterBottom>Learning Rate</Typography>\n                <Controller\n                  name=\"learningRate\"\n                  control={control}\n                  render={({ field }) => (\n                    <Slider\n                      {...field}\n                      min={0.001}\n                      max={0.1}\n                      step={0.001}\n                      marks\n                      valueLabelDisplay=\"auto\"\n                      valueLabelFormat={(value) => value.toFixed(3)}\n                    />\n                  )}\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={() => setShowEditDialog(false)}>Cancel</Button>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              disabled={loading}\n              sx={{\n                background: 'linear-gradient(45deg, #64ffda, #00bcd4)'\n              }}\n            >\n              Update Agent\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CognitiveAgentPanel;
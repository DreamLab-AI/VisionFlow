import React, { useState, useMemo, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Chip,\n  LinearProgress,\n  IconButton,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Tooltip,\n  Alert,\n  CircularProgress,\n  Divider\n} from '@mui/material';\nimport {\n  Memory,\n  Computer,\n  Speed,\n  Thermostat,\n  NetworkCheck,\n  Psychology,\n  Refresh,\n  Timeline,\n  TrendingUp,\n  TrendingDown,\n  Warning,\n  CheckCircle,\n  Error as ErrorIcon\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  RadialBarChart,\n  RadialBar\n} from 'recharts';\nimport { ResourceMetrics as ResourceMetricsType } from '../types/neural';\nimport { format } from 'date-fns';\n\ninterface ResourceMetricsProps {\n  metrics: ResourceMetricsType[];\n  isConnected: boolean;\n}\n\ninterface MetricCardProps {\n  title: string;\n  value: number;\n  unit: string;\n  icon: React.ReactNode;\n  color: string;\n  trend?: number;\n  threshold?: { warning: number; critical: number };\n}\n\nconst COLORS = ['#64ffda', '#2196f3', '#ff9800', '#f44336', '#4caf50', '#9c27b0'];\n\nconst MetricCard: React.FC<MetricCardProps> = ({\n  title,\n  value,\n  unit,\n  icon,\n  color,\n  trend,\n  threshold\n}) => {\n  const getStatus = () => {\n    if (!threshold) return 'normal';\n    if (value >= threshold.critical) return 'critical';\n    if (value >= threshold.warning) return 'warning';\n    return 'normal';\n  };\n  \n  const status = getStatus();\n  const statusColor = {\n    normal: '#4caf50',\n    warning: '#ff9800',\n    critical: '#f44336'\n  }[status];\n  \n  const statusIcon = {\n    normal: <CheckCircle />,\n    warning: <Warning />,\n    critical: <ErrorIcon />\n  }[status];\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <Card\n        sx={{\n          background: `linear-gradient(135deg, rgba(${parseInt(color.slice(1, 3), 16)}, ${parseInt(color.slice(3, 5), 16)}, ${parseInt(color.slice(5, 7), 16)}, 0.1) 0%, rgba(255,255,255,0.05) 100%)`,\n          backdropFilter: 'blur(10px)',\n          border: `1px solid ${color}`,\n          height: '100%',\n          transition: 'transform 0.2s, box-shadow 0.2s',\n          '&:hover': {\n            transform: 'translateY(-4px)',\n            boxShadow: `0 8px 32px ${color}40`\n          }\n        }}\n      >\n        <CardContent>\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <Box sx={{ color, mr: 1 }}>\n                {icon}\n              </Box>\n              <Typography variant=\"h6\" sx={{ color: 'white', fontWeight: 'bold' }}>\n                {title}\n              </Typography>\n            </Box>\n            <Tooltip title={`Status: ${status}`}>\n              <Box sx={{ color: statusColor }}>\n                {statusIcon}\n              </Box>\n            </Tooltip>\n          </Box>\n          \n          <Box sx={{ display: 'flex', alignItems: 'baseline', mb: 1 }}>\n            <Typography variant=\"h3\" sx={{ color: 'white', fontWeight: 'bold', mr: 1 }}>\n              {value.toFixed(1)}\n            </Typography>\n            <Typography variant=\"h6\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n              {unit}\n            </Typography>\n          </Box>\n          \n          {trend !== undefined && (\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              {trend > 0 ? (\n                <TrendingUp sx={{ color: '#f44336', mr: 0.5, fontSize: 16 }} />\n              ) : trend < 0 ? (\n                <TrendingDown sx={{ color: '#4caf50', mr: 0.5, fontSize: 16 }} />\n              ) : (\n                <Timeline sx={{ color: '#ff9800', mr: 0.5, fontSize: 16 }} />\n              )}\n              <Typography\n                variant=\"caption\"\n                sx={{\n                  color: trend > 0 ? '#f44336' : trend < 0 ? '#4caf50' : '#ff9800'\n                }}\n              >\n                {trend > 0 ? '+' : ''}{trend.toFixed(1)}% from last reading\n              </Typography>\n            </Box>\n          )}\n          \n          {threshold && (\n            <Box sx={{ mt: 2 }}>\n              <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)', mb: 1, display: 'block' }}>\n                Usage Level\n              </Typography>\n              <LinearProgress\n                variant=\"determinate\"\n                value={Math.min((value / threshold.critical) * 100, 100)}\n                sx={{\n                  height: 8,\n                  borderRadius: 4,\n                  bgcolor: 'rgba(255,255,255,0.1)',\n                  '& .MuiLinearProgress-bar': {\n                    bgcolor: statusColor,\n                    borderRadius: 4\n                  }\n                }}\n              />\n            </Box>\n          )}\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n};\n\nexport const ResourceMetrics: React.FC<ResourceMetricsProps> = ({\n  metrics,\n  isConnected\n}) => {\n  const [timeRange, setTimeRange] = useState<'1h' | '6h' | '24h' | '7d'>('1h');\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  \n  const latestMetrics = metrics[0];\n  \n  const filteredMetrics = useMemo(() => {\n    if (!metrics.length) return [];\n    \n    const now = new Date();\n    const ranges = {\n      '1h': 60 * 60 * 1000,\n      '6h': 6 * 60 * 60 * 1000,\n      '24h': 24 * 60 * 60 * 1000,\n      '7d': 7 * 24 * 60 * 60 * 1000\n    };\n    \n    const cutoff = new Date(now.getTime() - ranges[timeRange]);\n    return metrics\n      .filter(m => new Date(m.timestamp) >= cutoff)\n      .reverse()\n      .slice(0, 100); // Limit to last 100 points for performance\n  }, [metrics, timeRange]);\n  \n  const chartData = useMemo(() => {\n    return filteredMetrics.map(m => ({\n      timestamp: format(new Date(m.timestamp), 'HH:mm'),\n      cpu: m.cpu.usage,\n      memory: (m.memory.used / m.memory.total) * 100,\n      gpu: m.gpu?.usage || 0,\n      network: (m.network.bytesIn + m.network.bytesOut) / 1024 / 1024, // MB/s\n      swarmLoad: (m.swarm.completedTasks / Math.max(m.swarm.totalTasks, 1)) * 100\n    }));\n  }, [filteredMetrics]);\n  \n  const calculateTrend = (current: number, previous: number) => {\n    if (!previous) return 0;\n    return ((current - previous) / previous) * 100;\n  };\n  \n  const previousMetrics = metrics[1];\n  \n  const systemHealth = useMemo(() => {\n    if (!latestMetrics) return 0;\n    \n    const cpuScore = Math.max(0, 100 - latestMetrics.cpu.usage);\n    const memoryScore = Math.max(0, 100 - (latestMetrics.memory.used / latestMetrics.memory.total) * 100);\n    const gpuScore = latestMetrics.gpu ? Math.max(0, 100 - latestMetrics.gpu.usage) : 100;\n    const swarmScore = Math.max(0, 100 - latestMetrics.swarm.errorRate * 100);\n    \n    return (cpuScore + memoryScore + gpuScore + swarmScore) / 4;\n  }, [latestMetrics]);\n  \n  const memoryBreakdown = useMemo(() => {\n    if (!latestMetrics) return [];\n    \n    const total = latestMetrics.memory.total;\n    return [\n      { name: 'Used', value: latestMetrics.memory.used, color: '#f44336' },\n      { name: 'Cached', value: latestMetrics.memory.cached, color: '#ff9800' },\n      { name: 'Buffers', value: latestMetrics.memory.buffers, color: '#2196f3' },\n      { name: 'Free', value: total - latestMetrics.memory.used - latestMetrics.memory.cached - latestMetrics.memory.buffers, color: '#4caf50' }\n    ].map(item => ({\n      ...item,\n      percentage: (item.value / total) * 100\n    }));\n  }, [latestMetrics]);\n  \n  if (!latestMetrics) {\n    return (\n      <Box sx={{ p: 3, textAlign: 'center', bgcolor: '#0a0a0a' }}>\n        <CircularProgress sx={{ color: '#64ffda', mb: 2 }} />\n        <Typography variant=\"h6\" sx={{ color: 'white' }}>\n          Loading resource metrics...\n        </Typography>\n      </Box>\n    );\n  }\n  \n  return (\n    <Box sx={{ p: 3, height: '100%', overflow: 'auto', bgcolor: '#0a0a0a' }}>\n      {/* Header */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h5\" sx={{ color: 'white', fontWeight: 'bold' }}>\n          Resource Metrics\n        </Typography>\n        <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\n          <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n            <InputLabel sx={{ color: 'white' }}>Time Range</InputLabel>\n            <Select\n              value={timeRange}\n              label=\"Time Range\"\n              onChange={(e) => setTimeRange(e.target.value as any)}\n              sx={{ color: 'white' }}\n            >\n              <MenuItem value=\"1h\">Last Hour</MenuItem>\n              <MenuItem value=\"6h\">Last 6 Hours</MenuItem>\n              <MenuItem value=\"24h\">Last 24 Hours</MenuItem>\n              <MenuItem value=\"7d\">Last 7 Days</MenuItem>\n            </Select>\n          </FormControl>\n          <Chip\n            icon={isConnected ? <CheckCircle /> : <ErrorIcon />}\n            label={isConnected ? 'Live' : 'Disconnected'}\n            color={isConnected ? 'success' : 'error'}\n            variant=\"outlined\"\n          />\n        </Box>\n      </Box>\n      \n      {!isConnected && (\n        <Alert severity=\"warning\" sx={{ mb: 2 }}>\n          Neural network disconnected. Metrics may not be current.\n        </Alert>\n      )}\n      \n      {/* System Health Overview */}\n      <Card\n        sx={{\n          mb: 3,\n          background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n          border: '1px solid rgba(100, 255, 218, 0.2)'\n        }}\n      >\n        <CardContent>\n          <Typography variant=\"h6\" sx={{ color: '#64ffda', mb: 2 }}>\n            System Health Overview\n          </Typography>\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={3}>\n              <Box sx={{ textAlign: 'center' }}>\n                <CircularProgress\n                  variant=\"determinate\"\n                  value={systemHealth}\n                  size={80}\n                  thickness={4}\n                  sx={{\n                    color: systemHealth > 80 ? '#4caf50' : systemHealth > 60 ? '#ff9800' : '#f44336',\n                    mb: 1\n                  }}\n                />\n                <Typography variant=\"h4\" sx={{ color: 'white' }}>\n                  {systemHealth.toFixed(0)}%\n                </Typography>\n                <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                  Overall Health\n                </Typography>\n              </Box>\n            </Grid>\n            <Grid item xs={12} md={9}>\n              <Grid container spacing={2}>\n                <Grid item xs={6} sm={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h5\" sx={{ color: '#2196f3' }}>\n                      {latestMetrics.swarm.activeAgents}\n                    </Typography>\n                    <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                      Active Agents\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h5\" sx={{ color: '#4caf50' }}>\n                      {latestMetrics.swarm.completedTasks}\n                    </Typography>\n                    <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                      Completed Tasks\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h5\" sx={{ color: '#ff9800' }}>\n                      {latestMetrics.swarm.totalTasks}\n                    </Typography>\n                    <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                      Total Tasks\n                    </Typography>\n                  </Box>\n                </Grid>\n                <Grid item xs={6} sm={3}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h5\" sx={{ color: latestMetrics.swarm.errorRate > 0.1 ? '#f44336' : '#4caf50' }}>\n                      {(latestMetrics.swarm.errorRate * 100).toFixed(1)}%\n                    </Typography>\n                    <Typography variant=\"caption\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                      Error Rate\n                    </Typography>\n                  </Box>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n      \n      {/* Resource Cards */}\n      <Grid container spacing={3} sx={{ mb: 3 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"CPU Usage\"\n            value={latestMetrics.cpu.usage}\n            unit=\"%\"\n            icon={<Computer />}\n            color=\"#2196f3\"\n            trend={previousMetrics ? calculateTrend(latestMetrics.cpu.usage, previousMetrics.cpu.usage) : undefined}\n            threshold={{ warning: 70, critical: 90 }}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Memory Usage\"\n            value={(latestMetrics.memory.used / latestMetrics.memory.total) * 100}\n            unit=\"%\"\n            icon={<Memory />}\n            color=\"#ff9800\"\n            trend={previousMetrics ? calculateTrend(\n              (latestMetrics.memory.used / latestMetrics.memory.total) * 100,\n              (previousMetrics.memory.used / previousMetrics.memory.total) * 100\n            ) : undefined}\n            threshold={{ warning: 80, critical: 95 }}\n          />\n        </Grid>\n        {latestMetrics.gpu && (\n          <Grid item xs={12} sm={6} md={3}>\n            <MetricCard\n              title=\"GPU Usage\"\n              value={latestMetrics.gpu.usage}\n              unit=\"%\"\n              icon={<Speed />}\n              color=\"#4caf50\"\n              trend={previousMetrics?.gpu ? calculateTrend(latestMetrics.gpu.usage, previousMetrics.gpu.usage) : undefined}\n              threshold={{ warning: 80, critical: 95 }}\n            />\n          </Grid>\n        )}\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Network I/O\"\n            value={(latestMetrics.network.bytesIn + latestMetrics.network.bytesOut) / 1024 / 1024}\n            unit=\"MB/s\"\n            icon={<NetworkCheck />}\n            color=\"#9c27b0\"\n            trend={previousMetrics ? calculateTrend(\n              (latestMetrics.network.bytesIn + latestMetrics.network.bytesOut) / 1024 / 1024,\n              (previousMetrics.network.bytesIn + previousMetrics.network.bytesOut) / 1024 / 1024\n            ) : undefined}\n          />\n        </Grid>\n      </Grid>\n      \n      {/* Charts */}\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={8}>\n          <Card\n            sx={{\n              background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n              border: '1px solid rgba(100, 255, 218, 0.2)',\n              height: 400\n            }}\n          >\n            <CardContent sx={{ height: '100%' }}>\n              <Typography variant=\"h6\" sx={{ color: '#64ffda', mb: 2 }}>\n                Resource Usage Over Time\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height=\"85%\">\n                <LineChart data={chartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"rgba(255,255,255,0.1)\" />\n                  <XAxis dataKey=\"timestamp\" stroke=\"rgba(255,255,255,0.7)\" />\n                  <YAxis stroke=\"rgba(255,255,255,0.7)\" />\n                  <RechartsTooltip\n                    contentStyle={{\n                      backgroundColor: '#1a1a2e',\n                      border: '1px solid #64ffda',\n                      borderRadius: '8px'\n                    }}\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"cpu\"\n                    stroke=\"#2196f3\"\n                    strokeWidth={2}\n                    name=\"CPU %\"\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"memory\"\n                    stroke=\"#ff9800\"\n                    strokeWidth={2}\n                    name=\"Memory %\"\n                  />\n                  {latestMetrics.gpu && (\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"gpu\"\n                      stroke=\"#4caf50\"\n                      strokeWidth={2}\n                      name=\"GPU %\"\n                    />\n                  )}\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"network\"\n                    stroke=\"#9c27b0\"\n                    strokeWidth={2}\n                    name=\"Network MB/s\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} md={4}>\n          <Card\n            sx={{\n              background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n              border: '1px solid rgba(100, 255, 218, 0.2)',\n              height: 400\n            }}\n          >\n            <CardContent>\n              <Typography variant=\"h6\" sx={{ color: '#64ffda', mb: 2 }}>\n                Memory Breakdown\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={200}>\n                <PieChart>\n                  <Pie\n                    data={memoryBreakdown}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={40}\n                    outerRadius={80}\n                    dataKey=\"value\"\n                    label={({ name, percentage }) => `${name}: ${percentage.toFixed(1)}%`}\n                  >\n                    {memoryBreakdown.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <RechartsTooltip\n                    formatter={(value: any, name) => [\n                      `${(value / 1024 / 1024 / 1024).toFixed(2)} GB`,\n                      name\n                    ]}\n                    contentStyle={{\n                      backgroundColor: '#1a1a2e',\n                      border: '1px solid #64ffda',\n                      borderRadius: '8px'\n                    }}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n              \n              <Divider sx={{ my: 2, bgcolor: 'rgba(255,255,255,0.1)' }} />\n              \n              <Box>\n                <Typography variant=\"subtitle2\" sx={{ color: '#64ffda', mb: 1 }}>\n                  Detailed Breakdown\n                </Typography>\n                {memoryBreakdown.map((item, index) => (\n                  <Box key={index} sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                      <Box\n                        sx={{\n                          width: 12,\n                          height: 12,\n                          borderRadius: '50%',\n                          bgcolor: item.color,\n                          mr: 1\n                        }}\n                      />\n                      <Typography variant=\"body2\" sx={{ color: 'white' }}>\n                        {item.name}\n                      </Typography>\n                    </Box>\n                    <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                      {(item.value / 1024 / 1024 / 1024).toFixed(2)} GB\n                    </Typography>\n                  </Box>\n                ))}\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      \n      {/* Temperature and Advanced Metrics */}\n      {(latestMetrics.cpu.temperature || latestMetrics.gpu?.temperature) && (\n        <Card\n          sx={{\n            mt: 3,\n            background: 'linear-gradient(135deg, #1a1a2e 0%, #16213e 100%)',\n            border: '1px solid rgba(100, 255, 218, 0.2)'\n          }}\n        >\n          <CardContent>\n            <Typography variant=\"h6\" sx={{ color: '#64ffda', mb: 2 }}>\n              Temperature Monitoring\n            </Typography>\n            <Grid container spacing={3}>\n              {latestMetrics.cpu.temperature && (\n                <Grid item xs={12} sm={6}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h4\" sx={{ \n                      color: latestMetrics.cpu.temperature > 80 ? '#f44336' : \n                             latestMetrics.cpu.temperature > 60 ? '#ff9800' : '#4caf50' \n                    }}>\n                      {latestMetrics.cpu.temperature}°C\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                      CPU Temperature\n                    </Typography>\n                    <LinearProgress\n                      variant=\"determinate\"\n                      value={Math.min((latestMetrics.cpu.temperature / 100) * 100, 100)}\n                      sx={{\n                        mt: 1,\n                        height: 8,\n                        borderRadius: 4,\n                        bgcolor: 'rgba(255,255,255,0.1)',\n                        '& .MuiLinearProgress-bar': {\n                          bgcolor: latestMetrics.cpu.temperature > 80 ? '#f44336' : \n                                   latestMetrics.cpu.temperature > 60 ? '#ff9800' : '#4caf50',\n                          borderRadius: 4\n                        }\n                      }}\n                    />\n                  </Box>\n                </Grid>\n              )}\n              {latestMetrics.gpu?.temperature && (\n                <Grid item xs={12} sm={6}>\n                  <Box sx={{ textAlign: 'center' }}>\n                    <Typography variant=\"h4\" sx={{ \n                      color: latestMetrics.gpu.temperature > 85 ? '#f44336' : \n                             latestMetrics.gpu.temperature > 70 ? '#ff9800' : '#4caf50' \n                    }}>\n                      {latestMetrics.gpu.temperature}°C\n                    </Typography>\n                    <Typography variant=\"body2\" sx={{ color: 'rgba(255,255,255,0.7)' }}>\n                      GPU Temperature\n                    </Typography>\n                    <LinearProgress\n                      variant=\"determinate\"\n                      value={Math.min((latestMetrics.gpu.temperature / 100) * 100, 100)}\n                      sx={{\n                        mt: 1,\n                        height: 8,\n                        borderRadius: 4,\n                        bgcolor: 'rgba(255,255,255,0.1)',\n                        '& .MuiLinearProgress-bar': {\n                          bgcolor: latestMetrics.gpu.temperature > 85 ? '#f44336' : \n                                   latestMetrics.gpu.temperature > 70 ? '#ff9800' : '#4caf50',\n                          borderRadius: 4\n                        }\n                      }}\n                    />\n                  </Box>\n                </Grid>\n              )}\n            </Grid>\n          </CardContent>\n        </Card>\n      )}\n    </Box>\n  );\n};\n\nexport default ResourceMetrics;
// This file is automatically generated based on data/settings.yaml and client/src/features/settings/config/settings.ts
// Do not modify this file directly. Instead, update the YAML file or the TypeScript interfaces.

import { Settings, GraphSettings, DashboardSettings, AnalyticsSettings, PerformanceSettings, DeveloperSettings } from './settings';

// Helper function to create default graph settings
const createDefaultGraphSettings = (colorTheme: 'blue' | 'green'): GraphSettings => {
  const colors = {
    blue: {
      nodeColor: "#00e5ff",
      edgeColor: "#4fc3f7",
      labelColor: "#ffffff",
      labelOutlineColor: "#0a0e1a"
    },
    green: {
      nodeColor: "#40ff00",
      edgeColor: "#76ff03",
      labelColor: "#f0fff0",
      labelOutlineColor: "#0a1a0a"
    }
  };

  const theme = colors[colorTheme];
  
  return {
    nodes: {
      baseColor: theme.nodeColor,
      metalness: 0.85,
      opacity: 0.95,
      roughness: 0.15,
      nodeSize: 1.2,
      quality: "high",
      enableInstancing: true,
      enableHologram: true,
      enableMetadataShape: true,
      enableMetadataVisualisation: true,
    },
    edges: {
      arrowSize: 0.02,
      baseWidth: 0.5,
      color: theme.edgeColor,
      enableArrows: false,
      opacity: 0.45,
      widthRange: [0.3, 1.5],
      quality: "high",
      enableFlowEffect: true,
      flowSpeed: 2,
      flowIntensity: 0.8,
      glowStrength: 2.5,
      distanceIntensity: 1.5,
      useGradient: true,
      gradientColors: ["#ffffff", "#00ffff"],
    },
    labels: {
      desktopFontSize: 0.5,
      enableLabels: true,
      textColor: theme.labelColor,
      textOutlineColor: theme.labelOutlineColor,
      textOutlineWidth: 0.005,
      textResolution: 32,
      textPadding: 0.6,
      billboardMode: "camera",
      showMetadata: true,
      maxLabelWidth: 5,
    },
    physics: {
      enabled: true,
      
      // Core GPU-Aligned Forces (new parameter names)
      springK: 0.002,           // was springStrength
      repelK: 50.0,            // was repulsionStrength - safe GPU default
      attractionK: 0.001,      // was attractionStrength
      gravity: 0.1,
      
      // Dynamics (GPU-aligned)
      dt: 0.016,               // was timeStep
      maxVelocity: 2.0,            // reduced for stability
      damping: 0.85,
      temperature: 1.0,
      
      // Boundary & Collision
      enableBounds: true,
      boundsSize: 50.0,            // reasonable default viewport
      boundaryDamping: 0.9,
      collisionRadius: 2.0,        // safe GPU default
      maxRepulsionDist: 1000.0, // was repulsionDistance
      
      // Advanced Parameters
      iterations: 200,
      massScale: 1.5,
      updateThreshold: 0.05,
      
      // Warmup System
      warmupIterations: 100,
      coolingRate: 0.001,
      
      // Legacy compatibility (for backward compatibility)
      springStrength: 0.002,
      repulsionStrength: 50.0,     // safe GPU default
      attractionStrength: 0.001,
      timeStep: 0.016,
      repulsionDistance: 1000.0,
    },
  };
};

export const defaultSettings: Settings = {
  visualisation: {
    // Graph-specific settings with optimized themes
    graphs: {
      logseq: createDefaultGraphSettings('blue'),
      visionflow: createDefaultGraphSettings('green'),
    },
    rendering: {
      ambientLightIntensity: 1.2,
      backgroundColor: "#0a0e1a",
      directionalLightIntensity: 1.5,
      enableAmbientOcclusion: false,
      enableAntialiasing: true, // Enabled for crisp rendering
      enableShadows: true, // Enabled for depth and realism
      environmentIntensity: 0.7,
      shadowMapSize: "2048",
      shadowBias: 0.0001,
      context: "desktop",
    },
    animations: {
      enableMotionBlur: false,
      enableNodeAnimations: true, // Enable node animations
      motionBlurStrength: 0.2,
      selectionWaveEnabled: true, // Enable selection wave effects
      pulseEnabled: true, // Enable node pulsing effects
      pulseSpeed: 1.2, // Optimized pulse speed
      pulseStrength: 0.8, // Optimized pulse strength
      waveSpeed: 0.5,
    },
    bloom: {
      edgeBloomStrength: 3.5, // Edge connection glow
      enabled: true,
      environmentBloomStrength: 3.0,
      nodeBloomStrength: 3.0, // Node glow intensity
      radius: 0.85,
      strength: 2.0, // Overall bloom strength
      threshold: 0.15,
    },
    hologram: {
      ringCount: 5,
      ringColor: "#00ffff",
      ringOpacity: 0.8,
      sphereSizes: [40, 80],
      ringRotationSpeed: 12.0,
      enableBuckminster: true,
      buckminsterSize: 50,
      buckminsterOpacity: 0.3,
      enableGeodesic: true,
      geodesicSize: 60,
      geodesicOpacity: 0.25,
      enableTriangleSphere: true,
      triangleSphereSize: 70,
      triangleSphereOpacity: 0.4,
      globalRotationSpeed: 0.5,
    },
    camera: {
      fov: 75,
      near: 0.1,
      far: 2000,
      position: { x: 0, y: 10, z: 50 },
      lookAt: { x: 0, y: 0, z: 0 },
    },
    spacePilot: {
      enabled: true,
      mode: 'camera',
      sensitivity: {
        translation: 1.0,
        rotation: 1.0,
      },
      smoothing: 0.8,
      deadzone: 0.1,
      buttonFunctions: {
        1: 'resetView',
        2: 'cycleMode',
        3: 'fitToView',
        4: 'topView',
        5: 'rightView',
        6: 'frontView',
      },
    },
  },
  system: {
    websocket: {
      binaryChunkSize: 2048,
      binaryUpdateRate: 30,
      minUpdateRate: 5,
      maxUpdateRate: 60,
      motionThreshold: 0.05,
      motionDamping: 0.9,
      binaryMessageVersion: 1,
      compressionEnabled: false,
      compressionThreshold: 512,
      heartbeatInterval: 10000,
      heartbeatTimeout: 600000, // Added from JSON
      maxConnections: 100,
      maxMessageSize: 10485760, // Added from JSON
      reconnectAttempts: 5, // Added from JSON (was not present before under websocket)
      reconnectDelay: 1000, // Added from JSON (was not present before under websocket)
      updateRate: 60,
      // reconnectInterval: 2000, // Removed, does not exist in WebSocketSettings
      // maxReconnectAttempts: 10, // Removed, not in WebSocketSettings. 'reconnectAttempts' is used.
    },
    debug: {
      enabled: false,
      enableDataDebug: false,
      enableWebsocketDebug: false,
      logBinaryHeaders: false,
      logFullJson: false,
      logLevel: "info",
      logFormat: "text",
      enablePhysicsDebug: false,
      enableNodeDebug: false,
      enableShaderDebug: false,
      enableMatrixDebug: false,
      enablePerformanceDebug: false,
    },
    persistSettings: true,
    customBackendUrl: undefined as any,
  },
  xr: {
    enabled: false,
    clientSideEnableXR: false,
    displayMode: "immersive-vr",
    roomScale: 1.0,
    spaceType: "local-floor",
    quality: "medium",
    enableHandTracking: true,
    handMeshEnabled: true,
    handMeshColor: "#4287f5",
    handMeshOpacity: 0.3,
    handPointSize: 0.006,
    handRayEnabled: true,
    handRayColor: "#4287f5",
    handRayWidth: 0.003,
    gestureSmoothing: 0.7,
    enableHaptics: true,
    hapticIntensity: 0.3,
    dragThreshold: 0.08,
    pinchThreshold: 0.3,
    rotationThreshold: 0.08,
    interactionRadius: 0.15,
    movementSpeed: 1.0,
    deadZone: 0.12,
    movementAxes: {
      horizontal: 2,
      vertical: 3
    },
    enableLightEstimation: false,
    enablePlaneDetection: false,
    enableSceneUnderstanding: false,
    planeColor: "#4287f5",
    planeOpacity: 0.001,
    planeDetectionDistance: 3.0,
    showPlaneOverlay: false,
    snapToFloor: false,
    enablePassthroughPortal: false,
    passthroughOpacity: 0.8,
    passthroughBrightness: 1.1,
    passthroughContrast: 1.2,
    portalSize: 2.5,
    portalEdgeColor: "#4287f5",
    portalEdgeWidth: 0.02,
    controllerModel: "default",
    renderScale: 1.0,
    interactionDistance: 1.5,
    locomotionMethod: "teleport",
    teleportRayColor: "#ffffff",
    controllerRayColor: "#ffffff",
    
    // XR GPU optimization settings
    gpu: {
      enableOptimizedCompute: true,
      performance: {
        preset: "Balanced" as const,
      },
      physics: {
        scale: 1.0,
      },
    },
  },
  auth: {
    enabled: false,
    provider: "nostr",
    required: false,
  },
  
  // Dashboard GPU status settings
  dashboard: {
    autoRefresh: true,
    refreshInterval: 5,
    computeMode: "Basic Force-Directed" as const,
    iterationCount: 0,
    showConvergence: true,
    activeConstraints: 0,
    clusteringActive: false,
  } as DashboardSettings,
  
  // Analytics settings with GPU clustering
  analytics: {
    updateInterval: 5,
    showDegreeDistribution: true,
    showClusteringCoefficient: true,
    showCentrality: true,
    clustering: {
      algorithm: "none" as const,
      clusterCount: 5,
      resolution: 1.0,
      iterations: 50,
      exportEnabled: false,
      importEnabled: false,
    },
  } as AnalyticsSettings,
  
  // Performance settings with warmup controls
  performance: {
    enableAdaptiveQuality: true,
    warmupDuration: 2.0,
    convergenceThreshold: 0.01,
    enableAdaptiveCooling: true,
  } as PerformanceSettings,
  
  // Developer GPU debug settings
  developer: {
    gpu: {
      showForceVectors: false,
      showConstraints: false,
      showBoundaryForces: false,
      showConvergenceGraph: false,
    },
    constraints: {
      active: [
        { id: 'separation', name: 'Separation', enabled: true, description: 'Minimum distance between nodes', icon: '‚ÜîÔ∏è' },
        { id: 'collision', name: 'Collision', enabled: true, description: 'Prevent node overlap', icon: 'üí•' },
      ],
    },
  } as DeveloperSettings,
  ragflow: {
    agentId: "aa2e328812ef11f083dc0a0d6226f61b",
    timeout: 30,
    maxRetries: 3,
    chatId: "",
  },
  perplexity: {
    apiKey: "",
    model: "llama-3.1-sonar-small-128k-online",
    apiUrl: "",
    maxTokens: 4096,
    temperature: 0.5,
    topP: 0.9,
    presencePenalty: 0.0,
    frequencyPenalty: 0.0,
    timeout: 30,
    rateLimit: 100,
  },
  openai: {
    apiKey: "",
    baseUrl: "",
    timeout: 30,
    rateLimit: 100,
  },
  kokoro: {
    apiUrl: "http://pedantic_morse:8880",
    defaultVoice: "af_heart",
    defaultFormat: "mp3",
    defaultSpeed: 1.0,
    timeout: 30,
    stream: true,
    returnTimestamps: true,
    sampleRate: 24000,
  },
  
  // Whisper settings (if not already included)
  whisper: {
    apiUrl: "http://localhost:8080",
    defaultModel: "base",
    defaultLanguage: "en",
    timeout: 30,
    temperature: 0.0,
    returnTimestamps: false,
    vadFilter: true,
    wordTimestamps: false,
    initialPrompt: "",
  },
};
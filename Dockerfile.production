# syntax=docker/dockerfile:1.7

# Production Dockerfile - Multi-stage build
FROM nvidia/cuda:12.4.1-devel-ubuntu22.04 AS builder

ARG CUDA_ARCH=86
ARG REBUILD_PTX=false

ENV DEBIAN_FRONTEND=noninteractive \
    RUST_LOG=warn \
    PATH="/root/.cargo/bin:${PATH}" \
    CUDA_HOME=/usr/local/cuda \
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

# Install build dependencies
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    curl git gcc-11 g++-11 build-essential pkg-config libssl-dev

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable

# Install Node.js
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs

WORKDIR /app

# Copy all source code first
COPY Cargo.toml build.rs ./
COPY whelk-rs ./whelk-rs
COPY src ./src
COPY schema ./schema
COPY client ./client

# Download dependencies with full context
RUN --mount=type=cache,target=/root/.cargo/registry \
    --mount=type=cache,target=/root/.cargo/git \
    cargo fetch

RUN --mount=type=cache,target=/root/.npm \
    cd client && npm ci

# Build frontend
RUN --mount=type=cache,target=/root/.npm \
    cd client && npm run build

# Build backend
RUN --mount=type=cache,target=/root/.cargo/registry \
    --mount=type=cache,target=/root/.cargo/git \
    --mount=type=cache,target=/app/target \
    cargo build --release && \
    cp target/release/webxr /app/webxr

# Runtime stage
FROM nvidia/cuda:12.4.1-runtime-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive \
    RUST_LOG=${RUST_LOG:-warn} \
    PATH="/root/.cargo/bin:${PATH}" \
    NVIDIA_DRIVER_CAPABILITIES=all \
    CUDA_HOME=/usr/local/cuda \
    NODE_ENV=production

# Install runtime dependencies
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && apt-get install -y --no-install-recommends \
    curl nginx netcat-openbsd ca-certificates

# Create necessary directories
WORKDIR /app
RUN mkdir -p /app/data/markdown \
    /app/data/metadata \
    /app/data/runtime \
    /app/user_settings \
    /app/logs \
    /var/log/nginx \
    /var/run/nginx

# Copy built artifacts from builder stage
COPY --from=builder /app/webxr /app/webxr
COPY --from=builder /app/client/dist /app/client/dist
COPY --from=builder /app/src/utils/ptx /app/src/utils/ptx

# Copy configuration files
COPY data/settings.yaml /app/settings.yaml
COPY nginx.production.conf /etc/nginx/nginx.conf
COPY scripts/production-startup.sh /app/start.sh
RUN chmod +x /app/start.sh

EXPOSE 4000

ENTRYPOINT ["/app/start.sh"]
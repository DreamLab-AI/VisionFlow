FROM nvidia/cuda:12.8.1-devel-ubuntu22.04 as builder

ENV DEBIAN_FRONTEND=noninteractive \
    RUST_LOG=${RUST_LOG:-info} \
    PATH="/root/.cargo/bin:${PATH}" \
    NVIDIA_DRIVER_CAPABILITIES=all \
    CUDA_HOME=/usr/local/cuda \
    NODE_ENV=production

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    git \
    build-essential \
    gcc-11 \
    g++-11 \
    pkg-config \
    libssl-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Set gcc-11 as default compiler (needed for CUDA compilation)
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100 \
    && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100

# Install Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

# Create app directory
WORKDIR /build

# Copy Rust files for server build
COPY Cargo.toml Cargo.lock ./
COPY src ./src

# Copy client files for frontend build
COPY client ./client

# Build client (production mode)
WORKDIR /build/client
# Temporarily set NODE_ENV=development for install to ensure devDeps, then run build
RUN NODE_ENV=development npm install && \
    npm run build

# Build Rust server (release mode with GPU features)
WORKDIR /build
RUN cargo build --release --features gpu

# Handle PTX compilation
# Ensure the script and the .cu file are in expected locations relative to WORKDIR /build
COPY scripts/compile_unified_ptx.sh ./scripts/compile_unified_ptx.sh
# The unified kernel is now available at ./src/utils/visionflow_unified.cu
# Legacy kernels have been consolidated into the single unified kernel

# First try to copy existing unified PTX file from the build context (host)
# This allows using a pre-compiled PTX if available and REBUILD_PTX is false.
COPY src/utils/ptx/visionflow_unified.ptx /build/src/utils/ptx/visionflow_unified.ptx

ARG REBUILD_PTX=false
ARG CUDA_ARCH=89
RUN chmod +x ./scripts/compile_unified_ptx.sh && \
    if [ "$REBUILD_PTX" = "true" ] || [ ! -f "/build/src/utils/ptx/visionflow_unified.ptx" ]; then \
        echo "Compiling unified PTX file for sm_${CUDA_ARCH}..." && \
        # Pass CUDA_ARCH as an environment variable to the script
        CUDA_ARCH=${CUDA_ARCH} ./scripts/compile_unified_ptx.sh && \
        echo "Unified PTX compilation successful"; \
    else \
        echo "Using existing unified PTX file: /build/src/utils/ptx/visionflow_unified.ptx"; \
    fi
# Ensure the unified PTX file is in the correct final location for the COPY to runtime stage
# The compile_unified_ptx.sh script writes to "src/utils/ptx/visionflow_unified.ptx" relative to its execution dir.

# Second stage: runtime image
FROM nvidia/cuda:12.8.1-runtime-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive \
    RUST_LOG=warn \
    NODE_ENV=production \
    NVIDIA_DRIVER_CAPABILITIES=all

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    nginx \
    ca-certificates \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Create necessary directories
RUN mkdir -p /app/data/markdown \
    /app/data/metadata \
    /app/data/runtime \
    /app/user_settings \
    /app/client/dist \
    /app/src/utils \
    /app/src/utils/ptx

# Copy built artifacts from builder stage
COPY --from=builder /build/target/release/webxr /app/webxr
COPY --from=builder /build/client/dist /app/client/dist
COPY --from=builder /build/src/utils/ptx/*.ptx /app/src/utils/ptx/

# Copy settings file
COPY data/settings.yaml /app/settings.yaml

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Copy startup script
COPY scripts/start.sh /app/start.sh
RUN chmod +x /app/start.sh

# Expose port
EXPOSE 4000

# Set entrypoint
ENTRYPOINT ["/app/start.sh"]

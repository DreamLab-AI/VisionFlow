--- a/src/actors/claude_flow_actor_tcp.rs
+++ b/src/actors/claude_flow_actor_tcp.rs
@@ -738,6 +738,11 @@
     }
     
     fn poll_agent_statuses(&mut self, _ctx: &mut Context<Self>) {
+        // DISABLED: ClaudeFlowActor TCP polling is broken due to persistent connection issues
+        // The MCP server closes connections after each request, but this actor expects persistent connections
+        // BotsClient handles agent fetching correctly with fresh connections
+        return;
+        
         debug!("Polling agent statuses via TCP (100ms cycle) - {} consecutive failures", 
                self.consecutive_poll_failures);
         
--- a/src/services/bots_client.rs
+++ b/src/services/bots_client.rs
@@ -225,7 +225,18 @@
                                                             }
                                                             let mut lock = updates.write().await;
                                                             *lock = Some(update);
-                                                            continue; // Skip the rest of the parsing
+                                                            
+                                                            // CRITICAL FIX: Send agents to graph
+                                                            if let Some(graph_addr) = graph_service_addr {
+                                                                info!("ðŸ“¨ BotsClient sending {} agents to graph", update.agents.len());
+                                                                graph_addr.do_send(UpdateBotsGraph {
+                                                                    agents: update.agents.clone()
+                                                                        .into_iter()
+                                                                        .map(|a| a.into())
+                                                                        .collect()
+                                                                });
+                                                            }
+                                                            continue;
                                                         }
                                                     }
                                                 }

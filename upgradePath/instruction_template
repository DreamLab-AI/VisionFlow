# Instruction Template for Patch-to-Instruction Conversion

## Template Structure

Use this template to convert git patches or change requests into structured, actionable instructions that follow the established task.md format.

---

### **File: [filename_with_path]**

*   [ ] **Task [X.Y]: [Brief descriptive name]**
    *   **Goal:** [What this change achieves - clear, concise objective]
    *   **Status**: [TODO/IN PROGRESS/COMPLETE] 
    *   **Actions:**
        1. **[Component/Function/Section Name]**
           - [Action verb: Replace/Add/Remove/Refactor/Implement/Delete] [specific details]
           - [Reason: Why this change is needed]
           - [Implementation details if complex]
        2. **[Next Component/Function]**
           - [Action verb] [specific details]  
           - [Additional context or constraints]
        3. **[Additional changes as needed]**
           - [Be specific about file paths, function names, variable names]
           - [Include type signatures, interface changes, etc.]

---

## Style Guidelines

### Action Verbs to Use:
- **Replace**: Swap existing code/functionality
- **Add**: Introduce new functionality 
- **Remove/Delete**: Eliminate obsolete code
- **Refactor**: Restructure without changing functionality
- **Implement**: Create new feature from scratch
- **Modify**: Change existing behavior
- **Update**: Upgrade or modernize existing code
- **Introduce**: Add new concepts/patterns

### Structure Rules:
1. **Hierarchical Nesting**: Use bullet points with consistent indentation
2. **Clear Goals**: Each task must have a specific, measurable goal
3. **Actionable Items**: Every action should be implementable by a developer
4. **File Specificity**: Include exact file paths
5. **Technical Detail**: Include function names, interfaces, types when relevant

### Dependencies and Testing:
Always include at the end of each task:
- **Dependencies**: List related files that need changes
- **Testing**: How to verify the changes work

---

## Example Implementation

### **File: client/src/api/settingsApi.ts**

*   [ ] **Task 1.1: Overhaul the Settings API**
    *   **Goal:** Replace the inefficient full-object API with granular, path-based endpoints for optimal network usage.
    *   **Status**: TODO
    *   **Actions:**
        1. **Delete Existing Methods**
           - Remove `fetchSettings`, `updateSettings`, `saveSettings`, `resetSettings`, `exportSettings`, and `importSettings`
           - Clean up any unused imports after deletion
        2. **Define New Interfaces**
           - Add `PathValuePair` interface: `{ path: string; value: any }`
           - Add `SettingsByPathsResponse` interface for API responses
        3. **Implement Granular Fetching**
           - Create `getSettingsByPaths(paths: string[]): Promise<SettingsByPathsResponse>`
           - Construct `GET` request to `/api/settings/get` with comma-separated `paths` query
        4. **Implement Granular Updates**  
           - Create `updateSettingsByPath(updates: PathValuePair[]): Promise<any>`
           - Send `POST` request to `/api/settings/set` with updates array
           - Add robust error logging with request payload details
        5. **Create Convenience Wrappers**
           - `getSetting(path: string): Promise<any>` calling `getSettingsByPaths`
           - `setSetting(path: string, value: any): Promise<any>` calling `updateSettingsByPath`

**Dependencies**: client/src/store/settingsStore.ts, client/src/hooks/useSelectiveSettingsStore.ts
**Testing**: Verify API calls work with network tab, test error handling with invalid paths

---

## Conversion Checklist

When converting patches to instructions:

- [ ] Extract file path and create proper heading
- [ ] Identify the main goal/objective of changes
- [ ] Break down changes into logical, ordered steps
- [ ] Use specific action verbs for each step
- [ ] Include technical details (function names, types, etc.)
- [ ] Add dependencies and testing requirements
- [ ] Ensure each action is independently implementable
- [ ] Group related changes under logical component headings
- [ ] Maintain consistent formatting with bullet points and indentation

## Notes for Team Consistency

- Always use the checkbox format: `*   [ ] **Task X.Y: Name**`
- Maintain the three-level hierarchy: Task → Actions → Details
- Keep goals concise but specific
- Use present tense for actions ("Remove the method", not "Will remove")
- Include file paths in backticks when mentioned in text
- Number actions sequentially within each task
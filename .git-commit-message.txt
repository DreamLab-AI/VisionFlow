Remove legacy file-based configuration system

This commit removes ALL legacy YAML/TOML file I/O for configuration,
transitioning to a database-first architecture using SQLite.

## Changes

### Code Modifications

**src/config/mod.rs:**
- Removed `use serde_yaml` import (config files only)
- Removed `from_yaml_file()` method
- Modified `new()` to return defaults with database migration warnings
- Modified `save()` to be a no-op with informational logging
- File I/O completely removed for configuration

**src/actors/graph_actor.rs:**
- Removed YAML file reading from `/app/settings.yaml` and `data/settings.yaml`
- Removed `serde_yaml::from_str` deserialization
- Changed to use `SimulationParams::default()`
- Settings now loaded via `UpdateSimulationParams` message from database

### New Files

**scripts/migrate_legacy_configs.rs:**
- One-time migration script to transfer configs to SQLite
- Reads YAML/TOML → inserts into settings.db table
- Generates detailed migration report with statistics
- Handles errors gracefully with comprehensive logging

**docs/legacy-config-removal-report.md:**
- Complete technical documentation of changes
- Migration procedures and verification steps
- Rollback instructions
- Architecture comparison (before/after)

**docs/LEGACY_FILES_FOR_DELETION.md:**
- Deletion checklist with safety procedures
- Verification steps before deletion
- Post-deletion cleanup tasks

**docs/SUMMARY_LEGACY_REMOVAL.txt:**
- Quick reference summary
- Status and next steps

## Architecture Change

**BEFORE (Legacy):**
```
YAML Files → AppFullSettings::new() → In-Memory Settings
```

**AFTER (Database-First):**
```
SQLite → DatabaseService → SettingsService → AppState
```

## Files Ready for Deletion

After running migration and verifying database:
- data/settings.yaml (498 lines)
- data/settings_ontology_extension.yaml (142 lines)
- data/dev_config.toml (169 lines)

## Important Notes

- ✅ `graph_service_supervisor.rs` is CURRENT (not legacy) - NOT deleted
- ✅ `serde_yaml` dependency kept for OWL ontology parsing
- ✅ No compilation errors introduced
- ⚠️  Legacy files NOT deleted yet - requires migration verification

## Next Steps

1. Run: `cargo run --bin migrate_legacy_configs`
2. Verify: Database contains all settings
3. Test: Application starts without YAML errors
4. Delete: Legacy config files via separate commit

## Testing

- ✅ Code compiles without errors
- ✅ Migration script created and documented
- ⏸️  Migration execution pending
- ⏸️  Legacy file deletion pending verification

## Benefits

- Eliminates file I/O overhead
- Atomic database transactions
- Multi-tier settings support
- Change tracking with timestamps
- Direct UI-to-database connection
- Type-safe validation before persistence

---

Generated by: Legacy Code Removal Specialist
Date: 2025-10-22
Branch: better-db-migration

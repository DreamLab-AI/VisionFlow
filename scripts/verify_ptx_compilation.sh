#!/bin/bash
# PTX Compilation Verification Script
# Tests NVIDIA CUDA compilation and build system integration

set -e

echo "============================================="
echo "VisionFlow PTX Compilation Verification"
echo "============================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

ERRORS=0
WARNINGS=0

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
    ((ERRORS++))
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
    ((WARNINGS++))
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_info() {
    echo "[INFO] $1"
}

# 1. Check NVIDIA CUDA Toolkit availability
echo "1. Checking CUDA Toolkit..."
if ! command -v nvcc &> /dev/null; then
    log_error "NVCC not found in PATH"
    exit 1
fi

NVCC_VERSION=$(nvcc --version | grep "release" | sed -n 's/.*release \([0-9.]*\).*/\1/p')
log_success "NVCC found - version $NVCC_VERSION"

# 2. Verify CUDA source file exists
echo "2. Checking CUDA source files..."
CUDA_SOURCE="src/utils/visionflow_unified.cu"
if [ ! -f "$CUDA_SOURCE" ]; then
    log_error "CUDA source file not found: $CUDA_SOURCE"
    exit 1
fi
log_success "CUDA source file found: $CUDA_SOURCE"

FILE_SIZE=$(stat -c%s "$CUDA_SOURCE")
log_info "Source file size: $FILE_SIZE bytes"

# 3. Test direct PTX compilation
echo "3. Testing direct PTX compilation..."
TEST_PTX="/tmp/visionflow_test.ptx"
CUDA_ARCH="${CUDA_ARCH:-75}"

if nvcc -ptx -arch "sm_$CUDA_ARCH" -o "$TEST_PTX" "$CUDA_SOURCE" --use_fast_math -O3 2>/tmp/nvcc_error.log; then
    log_success "Direct PTX compilation successful"
    PTX_SIZE=$(stat -c%s "$TEST_PTX")
    log_info "Generated PTX size: $PTX_SIZE bytes"
else
    log_error "Direct PTX compilation failed"
    log_info "NVCC Error Output:"
    cat /tmp/nvcc_error.log
    ((ERRORS++))
fi

# 4. Verify PTX file contains expected kernels
echo "4. Verifying kernel definitions in PTX..."
EXPECTED_KERNELS=(
    "build_grid_kernel"
    "force_pass_kernel"
    "integration_kernel"
    "relaxation_step_kernel"
    "compute_cell_bounds_kernel"
)

if [ -f "$TEST_PTX" ]; then
    for kernel in "${EXPECTED_KERNELS[@]}"; do
        if grep -q "$kernel" "$TEST_PTX"; then
            log_success "Found kernel: $kernel"
        else
            log_warning "Kernel not found in PTX: $kernel"
        fi
    done
else
    log_error "No PTX file available for kernel verification"
fi

# 5. Test Cargo build system integration
echo "5. Testing Cargo build integration..."
if command -v cargo &> /dev/null; then
    log_info "Found cargo, testing build system integration..."
    
    # Set environment for build
    export CUDA_ARCH="$CUDA_ARCH"
    
    if timeout 60s cargo check 2>/tmp/cargo_error.log; then
        log_success "Cargo check passed"
    else
        log_error "Cargo build failed"
        log_info "Cargo Error Output:"
        tail -20 /tmp/cargo_error.log
    fi
    
    # Check for existing PTX files in target directory
    echo "6. Checking build artifacts..."
    PTX_FILES=$(find target -name "visionflow_unified.ptx" 2>/dev/null || true)
    if [ -n "$PTX_FILES" ]; then
        log_success "Found build artifacts:"
        echo "$PTX_FILES" | while read ptx_file; do
            if [ -f "$ptx_file" ]; then
                size=$(stat -c%s "$ptx_file")
                log_info "  - $ptx_file ($size bytes)"
            fi
        done
    else
        log_warning "No PTX files found in target directory"
    fi
else
    log_warning "Cargo not available - skipping build system test"
fi

# 7. Check environment variable export
echo "7. Checking PTX path environment export..."
if [ -n "$VISIONFLOW_PTX_PATH" ]; then
    log_success "VISIONFLOW_PTX_PATH is set: $VISIONFLOW_PTX_PATH"
    if [ -f "$VISIONFLOW_PTX_PATH" ]; then
        log_success "PTX file exists at exported path"
    else
        log_error "PTX file does not exist at exported path"
    fi
else
    log_warning "VISIONFLOW_PTX_PATH environment variable not set"
fi

# 8. Runtime loading simulation test
echo "8. Testing runtime PTX loading simulation..."
if [ -f "$TEST_PTX" ]; then
    # Check PTX header format
    HEADER=$(head -10 "$TEST_PTX")
    if echo "$HEADER" | grep -q "Generated by NVIDIA NVVM Compiler"; then
        log_success "PTX file has valid header"
    else
        log_warning "PTX file header format unexpected"
    fi
    
    # Check target architecture in PTX
    if grep -q "\.target sm_$CUDA_ARCH" "$TEST_PTX"; then
        log_success "PTX compiled for correct architecture: sm_$CUDA_ARCH"
    else
        log_warning "PTX architecture mismatch or not found"
    fi
else
    log_error "No PTX file available for runtime loading test"
fi

# 9. Performance and diagnostic checks
echo "9. Build diagnostics..."
BUILD_LOG="/tmp/build_diagnostics.log"
{
    echo "=== CUDA Environment ==="
    echo "CUDA_PATH: ${CUDA_PATH:-/usr/local/cuda}"
    echo "CUDA_ARCH: $CUDA_ARCH"
    echo "NVCC Version: $NVCC_VERSION"
    echo ""
    
    echo "=== System GPU Information ==="
    if command -v nvidia-smi &> /dev/null; then
        nvidia-smi --query-gpu=name,compute_cap --format=csv,noheader || echo "GPU query failed"
    else
        echo "nvidia-smi not available"
    fi
    echo ""
    
    echo "=== Build File Information ==="
    if [ -f "$TEST_PTX" ]; then
        echo "PTX File: $TEST_PTX"
        echo "PTX Size: $(stat -c%s "$TEST_PTX") bytes"
        echo "PTX Lines: $(wc -l < "$TEST_PTX")"
    fi
    echo ""
    
    echo "=== Environment Variables ==="
    env | grep -E "(CUDA|VISIONFLOW)" | sort || echo "No relevant environment variables"
    
} > "$BUILD_LOG"

log_info "Build diagnostics saved to: $BUILD_LOG"

# 10. Summary and recommendations
echo "============================================="
echo "Verification Summary"
echo "============================================="

if [ $ERRORS -eq 0 ]; then
    log_success "PTX compilation verification PASSED"
    echo -e "${GREEN}✓ No critical errors found${NC}"
else
    log_error "PTX compilation verification FAILED"
    echo -e "${RED}✗ $ERRORS critical error(s) found${NC}"
fi

if [ $WARNINGS -gt 0 ]; then
    echo -e "${YELLOW}⚠ $WARNINGS warning(s) found${NC}"
fi

echo ""
echo "Recommendations:"
echo "1. Ensure VISIONFLOW_PTX_PATH is properly exported by build.rs"
echo "2. Verify PTX files are accessible at runtime"
echo "3. Test GPU kernel launching with actual CUDA runtime"
echo "4. Add diagnostic logging for PTX loading failures"
echo ""

# Clean up
rm -f /tmp/nvcc_error.log /tmp/cargo_error.log

exit $ERRORS
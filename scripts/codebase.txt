
## Project Structure Tree

```
Root files:
Cargo.lock
Cargo.toml
config.yml
docker-compose.yml
Dockerfile
nginx.conf
package.json
pnpm-lock.yaml
README.md
settings.yaml
tsconfig.json
tsconfig.node.json
vite.config.ts

Directories:
../client
├── audio
│   └── AudioPlayer.ts
├── components
│   └── settings
│       └── ValidationErrorDisplay.ts
├── config
│   └── featureFlags.ts
├── core
│   ├── api.ts
│   ├── constants.ts
│   ├── debugState.ts
│   ├── logger.ts
│   ├── physicsConstants.ts
│   ├── resourceMonitor.ts
│   ├── types.ts
│   └── utils.ts
├── diagnostics
│   ├── nodeIdBindingDiagnostics.ts
│   └── systemDiagnostics.ts
├── diagnostics.ts
├── index.html
├── index.ts
├── material-switcher.js
├── monitoring
│   └── NodeManagerMetrics.ts
├── platform
│   └── platformManager.ts
├── public
│   └── fonts
│       ├── helvetiker_regular.typeface.json
│       └── Roboto-Regular.woff2
├── rendering
│   ├── EdgeManager.ts
│   ├── factories
│   │   ├── GeometryFactory.ts
│   │   └── MaterialFactory.ts
│   ├── materials
│   │   ├── EdgeShaderMaterial.ts
│   │   └── HologramShaderMaterial.ts
│   ├── MetadataVisualizer.ts
│   ├── node
│   │   ├── geometry
│   │   │   └── NodeGeometryManager.ts
│   │   ├── instance
│   │   │   └── NodeInstanceManager.ts
│   │   ├── interaction
│   │   │   └── NodeInteractionManager.ts
│   │   ├── metadata
│   │   │   └── NodeMetadataManager.ts
│   │   ├── NodeManagerFacade.ts
│   │   ├── NodeManagerFactory.ts
│   │   └── NodeManagerInterface.ts
│   ├── renderManager.ts
│   ├── scene.ts
│   ├── SDFFontAtlasGenerator.ts
│   ├── textRenderer.ts
│   ├── UnifiedTextRenderer.ts
│   └── VisualizationController.ts
├── services
│   ├── NostrAuthService.ts
│   ├── SettingsEventEmitter.ts
│   ├── SettingsLayoutManager.ts
│   ├── SettingsPersistenceService.ts
│   └── SettingsPreviewManager.ts
├── settings
│   └── index.ts
├── shader-test.html
├── shader-test.js
├── src
│   └── managers
│       └── NodeInstanceManager.ts
├── state
│   ├── defaultSettings.ts
│   ├── graphData.ts
│   ├── SettingsObserver.ts
│   ├── SettingsStore.ts
│   └── settings.ts
├── tsconfig.json
├── types
│   ├── env.d.ts
│   ├── gestures.ts
│   ├── metadata.ts
│   ├── nostr.d.ts
│   ├── pako.d.ts
│   ├── settings
│   │   ├── base.ts
│   │   ├── utils.ts
│   │   ├── validation.ts
│   │   └── xr.ts
│   ├── settings.ts
│   ├── three.d.ts
│   ├── three-examples.d.ts
│   ├── three-ext.d.ts
│   ├── websocket.ts
│   ├── webxr.d.ts
│   └── xr.ts
├── ui
│   ├── controlPanelConfig.ts
│   ├── index.ts
│   ├── ModularControlPanel.css
│   ├── ModularControlPanel.ts
│   └── styles.css
├── utils
│   ├── eventEmitter.ts
│   └── vectorUtils.ts
├── visualization
│   ├── HologramManager.ts
│   └── MetadataVisualizer.ts
├── webgl-diagnostics.js
├── websocket
│   └── websocketService.ts
├── websocket-diagnostics-browser.js
├── websocket-diagnostics.ts
├── websocket-test.ts
└── xr
    ├── handInteraction.ts
    ├── xrInitializer.ts
    ├── xrInteraction.ts
    ├── xrSessionManager.ts
    └── xrTypes.ts
../src
├── app_state.rs
├── config
│   ├── feature_access.rs
│   ├── feature_access_test.rs
│   └── mod.rs
├── handlers
│   ├── api_handler
│   │   ├── files
│   │   │   └── mod.rs
│   │   ├── graph
│   │   │   └── mod.rs
│   │   ├── mod.rs
│   │   └── visualization
│   │       └── mod.rs
│   ├── file_handler.rs
│   ├── graph_handler.rs
│   ├── health_handler.rs
│   ├── mod.rs
│   ├── nostr_handler.rs
│   ├── pages_handler.rs
│   ├── perplexity_handler.rs
│   ├── ragflow_handler.rs
│   ├── settings_handler.rs
│   ├── socket_flow_handler.rs
│   └── visualization_handler.rs
├── lib.rs
├── main.rs
├── models
│   ├── edge.rs
│   ├── graph.rs
│   ├── metadata.rs
│   ├── mod.rs
│   ├── node.rs
│   ├── pagination.rs
│   ├── protected_settings.rs
│   ├── simulation_params.rs
│   ├── ui_settings.rs
│   └── user_settings.rs
├── services
│   ├── file_service.rs
│   ├── github
│   │   ├── api.rs
│   │   ├── config.rs
│   │   ├── content.rs
│   │   ├── mod.rs
│   │   ├── pr.rs
│   │   └── types.rs
│   ├── graph_service.rs
│   ├── mod.rs
│   ├── nostr_service.rs
│   ├── perplexity_service.rs
│   ├── ragflow_service.rs
│   └── speech_service.rs
├── state.rs
├── types
│   ├── mod.rs
│   ├── speech.rs
│   └── vec3.rs
└── utils
    ├── audio_processor.rs
    ├── auth.rs
    ├── binary_protocol.rs
    ├── case_conversion.rs
    ├── compute_forces.cu
    ├── compute_forces.ptx
    ├── edge_data.rs
    ├── gpu_compute.rs
    ├── logging.rs
    ├── mod.rs
    ├── socket_flow_constants.rs
    ├── socket_flow_messages.rs
    └── tests
        └── socket_flow_tests.rs
../docs
├── api
│   ├── index.md
│   ├── rest.md
│   └── websocket.md
├── contributing
│   └── guidelines.md
├── deployment
│   └── docker.md
├── development
│   ├── debugging.md
│   └── setup.md
├── overview
│   ├── architecture.md
│   └── introduction.md
├── README-bloom-effect.md
├── README-diagnostics.md
├── README-shader-fix.md
├── README-websocket-diagnostics.md
├── STRUCTURE.md
└── technical
    ├── binary-protocol.md
    ├── class-diagrams.md
    ├── components
    │   ├── node-manager.md
    │   └── visualization.md
    ├── debug-enhancement-plan.md
    ├── debug-system.md
    ├── diagnostic-tools.md
    ├── dynamic-update-rate-optimization.md
    ├── edge-handling-optimization.md
    ├── edge-rendering-fix-plan.md
    ├── github-settings-migration.md
    ├── graph-node-stacking-fix.md
    ├── hologram-edge-rendering.md
    ├── kokoros-tts-integration.md
    ├── kokoros-tts-progress.md
    ├── metadata-text-visibility-fix.md
    ├── node-id-binding.md
    ├── node-manager-migration.md
    ├── performance.md
    ├── protocols
    │   └── websocket-protocol.md
    ├── README.md
    ├── scale-factors-architecture.md
    ├── scale-factors-review.md
    ├── settings-initialization.md
    ├── vec3-alignment.md
    └── websockets.md

8 directories, 40 files
```

# Project Codebase

Generated: Sun  9 Mar 09:36:36 GMT 2025

## Project Structure

- Server: Rust (src directory)
- Client: TypeScript (client directory)


## README.md

# LogseqXR: Immersive WebXR Visualization for Logseq Knowledge Graphs

![image](https://github.com/user-attachments/assets/269a678d-88a5-42de-9d67-d73b64f4e520)

**Inspired by the innovative work of Prof. Rob Aspin:** [https://github.com/trebornipsa](https://github.com/trebornipsa)

![P1080785_1728030359430_0](https://github.com/user-attachments/assets/3ecac4a3-95d7-4c75-a3b2-e93deee565d6)

## About LogseqXR

LogseqXR transforms your Logseq knowledge base into an immersive 3D visualization that you can explore in VR/AR. Experience your ideas as tangible objects in space, discover new connections, and interact with your knowledge in ways never before possible.

## Quick Links

- [Project Overview](docs/overview/introduction.md)
- [Technical Architecture](docs/overview/architecture.md)
- [Development Setup](docs/development/setup.md)
- [API Documentation](docs/api/index.md)
- [Contributing Guidelines](docs/contributing/guidelines.md)

## Documentation Structure

### Overview
- [Introduction & Features](docs/overview/introduction.md)
- [System Architecture](docs/overview/architecture.md)

### Technical Documentation
- [WebSocket Communication](docs/technical/websockets.md)
- [Binary Protocol](docs/technical/binary-protocol.md)
- [Performance Optimizations](docs/technical/performance.md)
- [Class Diagrams](docs/technical/class-diagrams.md)

### Development
- [Setup Guide](docs/development/setup.md)
- [Debugging Guide](docs/development/debugging.md)

### API Documentation
- [API Overview](docs/api/index.md)
- [REST API](docs/api/rest.md)
- [WebSocket API](docs/api/websocket.md)

### Deployment
- [Docker Deployment](docs/deployment/docker.md)

### Contributing
- [Contributing Guidelines](docs/contributing/guidelines.md)

### Diagrams

```mermaid
graph TB
    %% Frontend Components
    subgraph Frontend
        UI[User Interface Layer]
        VR[WebXR Controller]
        WS[WebSocket Client]
        GPU[GPU Compute Layer]
        ThreeJS[Three.js Renderer]
        ChatUI[Chat Interface]
        GraphUI[Graph Interface]
        ControlPanel["Modular Control Panel (with Nostr Auth)"]
        VRControls[VR Control System]
        WSService[WebSocket Service]
        DataManager[Graph Data Manager]
        LayoutEngine[Layout Engine]
        SpaceMouse[SpaceMouse Controller]
        PlatformManager[Platform Manager]
        XRSession[XR Session Manager]
        XRInit[XR Initializer]
        SceneManager[Scene Manager]
        NodeManager[Enhanced Node Manager]
        EdgeManager[Edge Manager]
        HologramManager[Hologram Manager]
        TextRenderer[Text Renderer]
        SettingsStore[Settings Store]
    end

    %% Backend Components
    subgraph Backend
        Server[Actix Web Server]
        FileH[File Handler]
        GraphH[Graph Handler]
        WSH[WebSocket Handler]
        PerplexityH[Perplexity Handler]
        RagFlowH[RagFlow Handler]
        VisualizationH[Visualization Handler]
        NostrH[Nostr Handler]
        HealthH[Health Handler]
        PagesH[Pages Handler]
        SettingsH[Settings Handler]
        FileS[File Service]
        GraphS[Graph Service]
        GPUS[GPU Compute Service]
        PerplexityS[Perplexity Service]
        RagFlowS[RagFlow Service]
        SpeechS[Speech Service]
        NostrS[Nostr Service]
        WSManager[WebSocket Manager]
        GPUCompute[GPU Compute]
        Compression[Compression Utils]
        AudioProc[Audio Processor]
        MetadataStore[Metadata Store]
        ProtectedSettings[Protected Settings]
    end

    %% External Components
    subgraph External
        GitHub[GitHub API]
        Perplexity[Perplexity AI]
        RagFlow[RagFlow API]
        OpenAI[OpenAI API]
        NostrAPI[Nostr API]
    end

    %% Connections between Frontend Components
    UI --> ChatUI
    UI --> GraphUI
    UI --> ControlPanel
    UI --> VRControls

    VR --> ThreeJS
    WS --> WSService
    WSService --> Server

    %% Connections between Backend Components
    Server --> FileH
    Server --> GraphH
    Server --> WSH
    Server --> PerplexityH
    Server --> RagFlowH
    Server --> VisualizationH
    Server --> NostrH
    Server --> HealthH
    Server --> PagesH
    Server --> SettingsH

    FileH --> FileS
    GraphH --> GraphS
    WSH --> WSManager
    PerplexityH --> PerplexityS
    RagFlowH --> RagFlowS
    NostrH --> NostrS

    %% Connections to External Components
    FileS --> GitHub
    PerplexityS --> Perplexity
    RagFlowS --> RagFlow
    SpeechS --> OpenAI
    NostrS --> NostrAPI

    %% Styling for clarity
    style Frontend fill:#f9f,stroke:#333,stroke-width:2px
    style Backend fill:#bbf,stroke:#333,stroke-width:2px
    style External fill:#bfb,stroke:#333,stroke-width:2px
```

### Class Diagram

```mermaid
classDiagram
    class App {
        +sceneManager: SceneManager
        +nodeManager: EnhancedNodeManager
        +edgeManager: EdgeManager
        +hologramManager: HologramManager
        +textRenderer: TextRenderer
        +websocketService: WebSocketService
        +settingsStore: SettingsStore
        +platformManager: PlatformManager
        +xrSessionManager: XRSessionManager
        +start()
        +initializeEventListeners()
        +handleSettingsUpdate(settings: Settings)
        +dispose()
    }

    class SceneManager {
        -static instance: SceneManager
        +scene: Scene
        +camera: Camera
        +renderer: Renderer
        +controls: Controls
        +composer: Composer
        +getInstance(canvas: HTMLCanvasElement): SceneManager
        +getScene(): Scene
        +getRenderer(): Renderer
        +getCamera(): Camera
        +start()
        +handleSettingsUpdate(settings: Settings)
        +cleanup()
    }

    class WebsocketService {
        -static instance: WebsocketService
        +socket: WebSocket
        +listeners: Object
        +reconnectAttempts: number
        +maxReconnectAttempts: number
        +reconnectInterval: number
        +getInstance(): WebsocketService
        +connect()
        +onBinaryMessage(callback: function)
        +onSettingsUpdate(callback: function)
        +onConnectionStatusChange(callback: function)
        +sendMessage(data: object)
        +close()
    }

    class AppState {
        +graph_service: GraphService
        +gpu_compute: Option<Arc<RwLock<GPUCompute>>>
        +settings: Arc<RwLock<Settings>>
        +protected_settings: Arc<RwLock<ProtectedSettings>>
        +metadata: Arc<RwLock<MetadataStore>>
        +github_client: Arc<GitHubClient>
        +content_api: Arc<ContentAPI>
        +perplexity_service: Option<Arc<PerplexityService>>
        +ragflow_service: Option<Arc<RAGFlowService>>
        +nostr_service: Option<web::Data<NostrService>>
        +ragflow_conversation_id: String
        +active_connections: Arc<AtomicUsize>
        +new()
        +increment_connections(): usize
        +decrement_connections(): usize
        +get_api_keys(pubkey: str): ApiKeys
        +get_nostr_user(pubkey: str): Option<NostrUser>
        +validate_nostr_session(pubkey: str, token: str): bool
        +update_nostr_user_api_keys(pubkey: str, api_keys: ApiKeys): Result<NostrUser>
    }

    class GraphService {
        +build_graph(app_state: AppState): Result<GraphData>
        +calculate_layout(gpu_compute: GPUCompute, graph: GraphData, params: SimulationParams): Result<void>
        +initialize_random_positions(graph: GraphData)
    }

    class EnhancedNodeManager {
        +scene: Scene
        +settings: Settings
        +nodeMeshes: Map<string, Mesh>
        +updateNodes(nodes: Node[])
        +updateNodePositions(nodes: NodeData[])
        +handleSettingsUpdate(settings: Settings)
        +dispose()
    }

    class SpeechService {
        +websocketManager: WebSocketManager
        +settings: Settings
        +start(receiver: Receiver<SpeechCommand>)
        +initialize(): Result<void>
        +send_message(message: string): Result<void>
        +close(): Result<void>
        +set_tts_provider(use_openai: boolean): Result<void>
    }

    class NostrService {
        +settings: Settings
        +validate_session(pubkey: str, token: str): bool
        +get_user(pubkey: str): Option<NostrUser>
        +update_user_api_keys(pubkey: str, api_keys: ApiKeys): Result<NostrUser>
    }

    App --> SceneManager
    App --> WebsocketService
    App --> EnhancedNodeManager
    SceneManager --> WebXRVisualization
    WebsocketService --> GraphDataManager
    AppState --> GraphService
    AppState --> NostrService
    AppState --> SpeechService
```

### Sequence Diagram

```mermaid
sequenceDiagram
    participant Client as Client (Browser)
    participant Platform as PlatformManager
    participant XR as XRSessionManager
    participant Scene as SceneManager
    participant Node as EnhancedNodeManager
    participant Edge as EdgeManager
    participant Hologram as HologramManager
    participant Text as TextRenderer
    participant WS as WebSocketService
    participant Settings as SettingsStore
    participant Server as Actix Server
    participant AppState as AppState
    participant FileH as FileHandler
    participant GraphH as GraphHandler
    participant WSH as WebSocketHandler
    participant PerplexityH as PerplexityHandler
    participant RagFlowH as RagFlowHandler
    participant NostrH as NostrHandler
    participant SettingsH as SettingsHandler
    participant FileS as FileService
    participant GraphS as GraphService
    participant GPUS as GPUService
    participant PerplexityS as PerplexityService
    participant RagFlowS as RagFlowService
    participant NostrS as NostrService
    participant SpeechS as SpeechService
    participant WSM as WebSocketManager
    participant GitHub as GitHub API
    participant Perplexity as Perplexity AI
    participant RagFlow as RagFlow API
    participant OpenAI as OpenAI API
    participant Nostr as Nostr API

    %% Server initialization and AppState setup
    activate Server
    Server->>Server: Load settings.yaml & env vars (config.rs)
    alt Settings Load Error
        Server-->>Client: Error Response (500)
    else Settings Loaded Successfully
        Server->>AppState: new() (app_state.rs)
        activate AppState
            AppState->>GPUS: initialize_gpu_compute()
            activate GPUS
                GPUS->>GPUS: setup_compute_pipeline()
                GPUS->>GPUS: load_wgsl_shaders()
                GPUS-->>AppState: GPU Compute Instance
            deactivate GPUS
            
            AppState->>WSM: initialize()
            activate WSM
                WSM->>WSM: setup_binary_protocol()
                WSM-->>AppState: WebSocket Manager
            deactivate WSM
            
            AppState->>SpeechS: start()
            activate SpeechS
                SpeechS->>SpeechS: initialize_tts()
                SpeechS-->>AppState: Speech Service
            deactivate SpeechS
            
            AppState->>NostrS: initialize()
            activate NostrS
                NostrS->>NostrS: setup_nostr_client()
                NostrS-->>AppState: Nostr Service
            deactivate NostrS
            
            AppState-->>Server: Initialized AppState
        deactivate AppState

        Server->>FileS: fetch_and_process_files()
        activate FileS
            FileS->>GitHub: fetch_files()
            activate GitHub
                GitHub-->>FileS: Files or Error
            deactivate GitHub
            
            loop For Each File
                FileS->>FileS: should_process_file()
                alt File Needs Processing
                    FileS->>PerplexityS: process_file()
                    activate PerplexityS
                        PerplexityS->>Perplexity: analyze_content()
                        Perplexity-->>PerplexityS: Analysis Results
                        PerplexityS-->>FileS: Processed Content
                    deactivate PerplexityS
                    FileS->>FileS: save_metadata()
                end
            end
            FileS-->>Server: Processed Files
        deactivate FileS

        Server->>GraphS: build_graph()
        activate GraphS
            GraphS->>GraphS: create_nodes_and_edges()
            GraphS->>GPUS: calculate_layout()
            activate GPUS
                GPUS->>GPUS: bind_gpu_buffers()
                GPUS->>GPUS: dispatch_compute_shader()
                GPUS->>GPUS: read_buffer_results()
                GPUS-->>GraphS: Updated Positions
            deactivate GPUS
            GraphS-->>Server: Graph Data
        deactivate GraphS
    end

    %% Client and Platform initialization
    Client->>Platform: initialize()
    activate Platform
        Platform->>Platform: detect_capabilities()
        Platform->>Settings: load_settings()
        activate Settings
            Settings->>Settings: validate_settings()
            Settings-->>Platform: Settings Object
        deactivate Settings
        
        Platform->>WS: connect()
        activate WS
            WS->>Server: ws_connect
            Server->>WSH: handle_connection()
            WSH->>WSM: register_client()
            WSM-->>WS: connection_established
            
            WS->>WS: setup_binary_handlers()
            WS->>WS: initialize_reconnection_logic()
            
            WSM-->>WS: initial_graph_data (Binary)
            WS->>WS: decode_binary_message()
        deactivate WS
        
        Platform->>XR: initialize()
        activate XR
            XR->>XR: check_xr_support()
            XR->>Scene: create()
            activate Scene
                Scene->>Scene: setup_three_js()
                Scene->>Scene: setup_render_pipeline()
                Scene->>Node: initialize()
                activate Node
                    Node->>Node: create_geometries()
                    Node->>Node: setup_materials()
                deactivate Node
                Scene->>Edge: initialize()
                activate Edge
                    Edge->>Edge: create_line_geometries()
                    Edge->>Edge: setup_line_materials()
                deactivate Edge
                Scene->>Hologram: initialize()
                activate Hologram
                    Hologram->>Hologram: setup_hologram_shader()
                    Hologram->>Hologram: create_hologram_geometry()
                deactivate Hologram
                Scene->>Text: initialize()
                activate Text
                    Text->>Text: load_fonts()
                    Text->>Text: setup_text_renderer()
                deactivate Text
            deactivate Scene
        deactivate XR
    deactivate Platform

    Note over Client, Nostr: User Interaction Flows

    %% User drags a node
    alt User Drags Node
        Client->>Node: handle_node_drag()
        Node->>WS: send_position_update()
        WS->>Server: binary_position_update
        Server->>GraphS: update_layout()
        GraphS->>GPUS: recalculate_forces()
        GPUS-->>Server: new_positions
        Server->>WSM: broadcast()
        WSM-->>WS: binary_update
        WS->>Node: update_positions()
        Node-->>Client: render_update
    end

    %% User asks a question
    alt User Asks Question
        Client->>RagFlowH: send_query()
        RagFlowH->>RagFlowS: process_query()
        activate RagFlowS
            RagFlowS->>RagFlow: get_context()
            RagFlow-->>RagFlowS: relevant_context
            RagFlowS->>OpenAI: generate_response()
            OpenAI-->>RagFlowS: ai_response
            RagFlowS-->>Client: streaming_response
        deactivate RagFlowS
        alt Speech Enabled
            Client->>SpeechS: synthesize_speech()
            activate SpeechS
                SpeechS->>OpenAI: text_to_speech()
                OpenAI-->>SpeechS: audio_stream
                SpeechS-->>Client: audio_data
            deactivate SpeechS
        end
    end

    %% User updates the graph
    alt User Updates Graph
        Client->>FileH: update_file()
        FileH->>FileS: process_update()
        FileS->>GitHub: create_pull_request()
        GitHub-->>FileS: pr_created
        FileS-->>Client: success_response
    end

    %% WebSocket reconnection flow
    alt WebSocket Reconnection
        WS->>WS: connection_lost()
        loop Until Max Attempts
            WS->>WS: attempt_reconnect()
            WS->>Server: ws_connect
            alt Connection Successful
                Server-->>WS: connection_established
                WSM-->>WS: resend_graph_data
                WS->>Node: restore_state()
            else Connection Failed
                Note right of WS: Continue reconnect attempts
            end
        end
    end

    %% Settings update flow
    alt Settings Update
        Client->>SettingsH: update_settings()
        SettingsH->>AppState: apply_settings()
        AppState->>WSM: broadcast_settings()
        WSM-->>WS: settings_update
        WS->>Settings: update_settings()
        Settings->>Platform: apply_platform_settings()
        Platform->>Scene: update_rendering()
        Scene->>Node: update_visuals()
        Scene->>Edge: update_visuals()
        Scene->>Hologram: update_effects()
    end

    %% Nostr authentication flow
    alt Nostr Authentication
        Client->>NostrH: authenticate()
        NostrH->>NostrS: validate_session()
        NostrS->>Nostr: verify_credentials()
        Nostr-->>NostrS: auth_result
        NostrS-->>Client: session_token
    end

    deactivate Server
```

### AR Features Implementation Status

#### Hand Tracking (Meta Quest 3)
- Implementation in `client/xr/xrSessionManager.ts`
- Currently addressing:
  - Performance optimization for AR passthrough mode
  - Virtual desktop cleanup during AR activation
  - Type compatibility between `XRHand` and custom `XRHandWithHaptics`
  - Joint position extraction methods

##### Current Challenges
- Type mismatches between standard `XRHand` and custom `XRHandWithHaptics`
- Joint position extraction from `XRJointSpace`
- Performance optimization in AR passthrough mode

##### Next Steps
- Implement adapter for `XRHand` to `XRHandWithHaptics` conversion
- Refactor VisualizationController for native XRHand compatibility
- Optimize AR mode transitions
- Enhance Meta Quest 3 performance

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

## Acknowledgements

- Prof Rob Aspin: For inspiring the project's vision and providing valuable resources.
- OpenAI: For their advanced AI models powering the question-answering features.
- Perplexity AI and RAGFlow: For their AI services enhancing content processing and interaction.
- Three.js: For the robust 3D rendering capabilities utilized in the frontend.
- Actix: For the high-performance web framework powering the backend server.

### Authentication and Settings Inheritance

#### Unauthenticated Users
- Use browser's localStorage for settings persistence
- Settings are stored locally and not synced
- Default to basic settings visibility
- Limited to local visualization features

#### Authenticated Users (Nostr)
- Inherit settings from server's settings.yaml
- Settings are synced across all authenticated users
- Access to advanced settings based on role

#### Power Users
- Full access to all settings
- Can modify server's settings.yaml
- Access to advanced API features:
  - Perplexity API for AI assistance
  - RagFlow for document processing
  - GitHub integration for PR management
  - OpenAI voice synthesis
- Settings modifications are persisted to settings.yaml

### Settings Inheritance Flow

```mermaid
graph TD
    A[Start] --> B{Authenticated?}
    B -->|No| C[Load Local Settings]
    B -->|Yes| D[Load Server Settings]
    D --> E{Is Power User?}
    E -->|No| F[Apply Read-Only]
    E -->|Yes| G[Enable Full Access]
```

### Settings Sync Flow

```mermaid
graph TD
    A[Setting Changed] --> B{Authenticated?}
    B -->|No| C[Save Locally]
    B -->|Yes| D{Is Power User?}
    D -->|No| E[Preview Only]
    D -->|Yes| F[Update Server]
    F --> G[Sync to All Users]
```

### Modular Control Panel Architecture

The control panel is built with a modular architecture that supports:
- Detachable sections
- Real-time preview integration
- Drag and drop functionality
- Dynamic tooltips
- Performance optimizations

#### Component Structure

```typescript
interface ModularControlPanelProps {
  sections: ControlSection[];
  layout: LayoutConfig;
  onLayoutChange: (newLayout: LayoutConfig) => void;
}

interface ControlSection {
  id: string;
  title: string;
  settings: Setting[];
  isDetached: boolean;
  position?: { x: number, y: number };
  size?: { width: number, height: number };
}

interface Setting {
  id: string;
  type: 'slider' | 'toggle' | 'color' | 'select';
  value: any;
  metadata: SettingMetadata;
}
```

#### Layout Management

```typescript
interface LayoutConfig {
  sections: {
    [sectionId: string]: {
      position: { x: number, y: number };
      size: { width: number, height: number };
      isDetached: boolean;
      isCollapsed: boolean;
    };
  };
  userPreferences: {
    showAdvanced: boolean;
    activeFilters: string[];
    customOrder: string[];
  };
}
```

#### Performance Optimizations

- ResizeObserver for efficient size tracking
- Virtual scrolling for large setting lists
- Debounced real-time preview updates
- CSS transforms for smooth animations
- Lazy loading for visual aids
- Efficient memory management with WeakMap
- Real-time preview integration with ~60fps target

## Docker Configuration


### docker-compose.yml

name: logseq-xr

services:
  webxr:
    build: .
    image: logseq-xr-image:latest
    container_name: logseq-xr-webxr
    read_only: false
    networks:
      ragflow:
        aliases:
          - logseq-xr-webxr
          - webxr-client
    deploy:
      resources:
        limits:
          cpus: '16.0'
          memory: 64G
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']  # Explicitly use GPU 0
              capabilities: [gpu]
    expose:
      - "4000"
    ports:
      - "4000:4000"  # Map container nginx port 4000 to host port 4000
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - BIND_ADDRESS=0.0.0.0
      - PORT=3001  # Explicitly set Rust backend to use port 3001
      - NGINX_PORT=4000  # Set nginx to use port 4000
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_GPU_UUID:-0}  # Use GPU UUID from launch script
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - NODE_ENV=production
      - GIT_HASH=${GIT_HASH:-development}  # Pass GIT_HASH from build environment
      - DEBUG_MODE=${DEBUG_MODE:-false}  # Control whether to start webxr or not
    env_file:
      - .env
    volumes:
      - ./data/markdown:/app/data/markdown
      - ./data/metadata:/app/data/metadata  # Added metadata volume mount
      - ./data/user_settings:/app/user_settings  # Added user settings volume mount
      - type: bind
        source: ${PWD}/settings.yaml
        target: /app/settings.yaml
        read_only: false
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 4G
    user: "${UID:-1000}:${GID:-1000}"  # Use host user's UID/GID or default to 1000
    restart: unless-stopped
    stop_grace_period: 30s
    command: sh -c '[ "$DEBUG_MODE" = "true" ] && exec /app/start.sh --no-webxr || exec /app/start.sh'  # Only pass --no-webxr if DEBUG_MODE=true
    init: true
    logging:
      driver: "json-file"
      options:
        max-size: "1g"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-tunnel
    networks:
      ragflow:
        aliases:
          - cloudflared
    volumes:
      - ./config.yml:/etc/cloudflared/config.yml:ro
    command: tunnel --loglevel info --config /etc/cloudflared/config.yml run
    restart: unless-stopped
    stop_grace_period: 10s
    init: true
    depends_on: []  # Remove dependency on webxr
    environment:
      - TUNNEL_TOKEN=$TUNNEL_TOKEN
      - TUNNEL_METRICS=0.0.0.0:2000
      - TUNNEL_DNS_UPSTREAM=https://1.1.1.1/dns-query,https://1.0.0.1/dns-query
      - TUNNEL_TRANSPORT_PROTOCOL=http2
      - TUNNEL_ORIGIN_SERVER=http://logseq-xr-webxr:4000  # Use container name to ensure proper DNS resolution
      - TUNNEL_WEBSOCKET_ENABLE=true
      - TUNNEL_WEBSOCKET_HEARTBEAT_INTERVAL=30s  # Match our heartbeat interval
      - TUNNEL_WEBSOCKET_TIMEOUT=3600s  # Match our max timeout
      - TUNNEL_RETRIES=5
      - TUNNEL_GRACE_PERIOD=30s
    env_file:
      - .env
networks:
  ragflow:
    external: true
    name: docker_ragflow  # RAGFlow's network name from docker network ls

### Dockerfile

# Stage 1: Frontend Build
FROM node:20-slim AS frontend-builder

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@9.14.2

# Copy package files and configuration
COPY package.json pnpm-lock.yaml ./
COPY tsconfig.json tsconfig.node.json vite.config.ts ./
COPY client ./client

# Create data/public directory for build output
RUN mkdir -p data/public

# Install dependencies and build
RUN pnpm install --frozen-lockfile && \
    pnpm run build

# Stage 2: Rust Dependencies Cache
FROM nvidia/cuda:12.2.0-devel-ubuntu22.04 AS rust-deps-builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    libssl-dev \
    pkg-config \
    libegl1-mesa-dev \
    libasound2-dev \
    ca-certificates \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Install Rust with better error handling
RUN curl --retry 5 --retry-delay 2 --retry-connrefused https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.82.0
ENV PATH="/root/.cargo/bin:${PATH}"

# Configure cargo for better network resilience
RUN mkdir -p ~/.cargo && \
    echo '[source.crates-io]' >> ~/.cargo/config.toml && \
    echo 'registry = "https://github.com/rust-lang/crates.io-index"' >> ~/.cargo/config.toml && \
    echo 'replace-with = "ustc"' >> ~/.cargo/config.toml && \
    echo '[source.ustc]' >> ~/.cargo/config.toml && \
    echo 'registry = "sparse+https://mirrors.ustc.edu.cn/crates.io-index/"' >> ~/.cargo/config.toml && \
    echo '[net]' >> ~/.cargo/config.toml && \
    echo 'retry = 10' >> ~/.cargo/config.toml && \
    echo 'timeout = 120' >> ~/.cargo/config.toml && \
    echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml

WORKDIR /usr/src/app

# Copy Cargo files first for better layer caching
COPY Cargo.toml Cargo.lock ./

# Install git and set GIT_HASH
RUN apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/*

# Create dummy src directory and build dependencies
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs && \
    GIT_HASH=$(git rev-parse HEAD || echo "development") \
    CARGO_NET_GIT_FETCH_WITH_CLI=true \
    CARGO_HTTP_TIMEOUT=120 \
    CARGO_HTTP_CHECK_REVOKE=false \
    cargo build --release --features gpu --jobs $(nproc) || \
    (sleep 2 && GIT_HASH=$(git rev-parse HEAD || echo "development") CARGO_HTTP_MULTIPLEXING=false cargo build --release --jobs $(nproc)) || \
    (sleep 5 && GIT_HASH=$(git rev-parse HEAD || echo "development") CARGO_HTTP_MULTIPLEXING=false cargo build --release --jobs 1)

# Now copy the real source code and build
COPY src ./src

RUN GIT_HASH=$(git rev-parse HEAD || echo "development") \
    cargo build --release --features gpu --jobs $(nproc) || \
    (sleep 2 && GIT_HASH=$(git rev-parse HEAD || echo "development") cargo build --release --jobs $(nproc)) || \
    (sleep 5 && GIT_HASH=$(git rev-parse HEAD || echo "development") cargo build --release --jobs 1)

# Stage 3: Final Runtime Image
FROM nvidia/cuda:12.2.0-devel-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PATH="/app/venv/bin:${PATH}" \
    NVIDIA_DRIVER_CAPABILITIES=all \
    RUST_LOG=info \
    RUST_BACKTRACE=0 \
    PORT=4000 \
    BIND_ADDRESS=0.0.0.0 \
    NODE_ENV=production \
    DOMAIN=localhost

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    libssl3 \
    nginx \
    libegl1-mesa \
    libasound2 \
    ca-certificates \
    mesa-utils \
    libgl1-mesa-dri \
    libgl1-mesa-glx \
    netcat-openbsd \
    gettext-base \
    net-tools \
    iproute2 \
    procps \
    lsof \
    jq \
    wget \
    && wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq \
    && chmod +x /usr/bin/yq \
    && wget https://github.com/vi/websocat/releases/latest/download/websocat.x86_64-unknown-linux-musl -O /usr/bin/websocat \
    && chmod +x /usr/bin/websocat \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /usr/share/doc/* \
    && rm -rf /usr/share/man/*

# Create a non-root user for running the application
RUN groupadd -g 1000 webxr && \
    useradd -u 1000 -g webxr -d /app webxr

# Set up nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf.template
RUN envsubst '${DOMAIN}' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && \
    rm /etc/nginx/nginx.conf.template && \
    chown -R webxr:webxr /etc/nginx/nginx.conf && \
    chmod 644 /etc/nginx/nginx.conf

# Set up nginx directories and permissions
RUN mkdir -p /var/lib/nginx/client_temp \
             /var/lib/nginx/proxy_temp \
             /var/lib/nginx/fastcgi_temp \
             /var/lib/nginx/uwsgi_temp \
             /var/lib/nginx/scgi_temp \
             /var/log/nginx \
             /var/run/nginx \
             /var/cache/nginx && \
    chown -R webxr:webxr /var/lib/nginx \
                         /var/log/nginx \
                         /var/run/nginx \
                         /var/cache/nginx \
                         /etc/nginx && \
    chmod -R 755 /var/lib/nginx \
                 /var/log/nginx \
                 /var/run/nginx \
                 /var/cache/nginx \
                 /etc/nginx && \
    touch /var/log/nginx/error.log \
          /var/log/nginx/access.log \
          /var/run/nginx/nginx.pid && \
    chmod 666 /var/log/nginx/*.log \
              /var/run/nginx/nginx.pid

# Set up directory structure and permissions
WORKDIR /app

# Create required directories with proper permissions
RUN mkdir -p /app/data/public/dist \
             /app/data/markdown \
             /app/data/runtime \
             /app/compute_forces \
             /app/data/piper \
             /tmp/runtime && \
    chown -R webxr:webxr /app /tmp/runtime && \
    chmod -R 755 /app /tmp/runtime && \
    # Ensure data/markdown is writable by webxr user
    chmod 777 /app/data/markdown

# Create necessary directories and set permissions
RUN mkdir -p /app/data/markdown /app/data/metadata /app/user_settings && \
    chmod -R 777 /app/data && \
    chmod 777 /app/user_settings

# Copy built artifacts
COPY --from=rust-deps-builder /usr/src/app/target/release/webxr /app/
COPY src/utils/compute_forces.ptx /app/src/utils/compute_forces.ptx
RUN chmod 644 /app/src/utils/compute_forces.ptx
COPY --from=frontend-builder /app/data/public/dist /app/data/public/dist

# Copy start script
COPY scripts/start.sh /app/start.sh

# Set proper permissions for copied files
RUN chown -R webxr:webxr /app && \
    chmod 755 /app/start.sh && \
    chmod -R g+w /app
RUN touch /app/settings.yaml && \
    chown webxr:webxr /app/settings.yaml && \
    chmod 666 /app/settings.yaml

# Switch to non-root user
USER webxr

# Add security labels
LABEL org.opencontainers.image.source="https://github.com/yourusername/logseq-xr" \
      org.opencontainers.image.description="LogseqXR WebXR Graph Visualization" \
      org.opencontainers.image.licenses="MIT" \
      security.capabilities="cap_net_bind_service" \
      security.privileged="false" \
      security.allow-privilege-escalation="false"

# Expose port
EXPOSE 4000

# Start application
ENTRYPOINT ["/app/start.sh"]
### nginx.conf

pid /var/run/nginx/nginx.pid;
error_log /var/log/nginx/error.log debug;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    charset utf-8;

    # Override TypeScript MIME type (overriding video/mp2t from mime.types)
    types {
        application/typescript ts;
    }

    # Logging
    log_format debug_format '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"'
                          ' ws_status="$upstream_http_upgrade"';  # Added WebSocket status logging

    access_log /var/log/nginx/access.log debug_format;

    # Optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 120;  # Increased to match cloudflared keepAliveTimeout
    keepalive_requests 100;

    # Gzip settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # WebSocket configuration
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Upstream backend definition for the Rust server
    upstream backend {
        server 127.0.0.1:3001;  # Use localhost since both services are in same container
        keepalive 32;  # Keep connections alive
    }

    # Main server configuration
    server {
        listen 4000 default_server;  # Listen on port 4000 for external connections
        server_name _;  # Accept any server name
        root /app/data/public/dist;  # Set root to built files directory

        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "same-origin" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'; connect-src 'self' ws: wss: http: https: *.visionflow.info; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://getalby.com; frame-src 'self' https://getalby.com" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # WebSocket endpoint
        location /wss {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            
            # Pass through Cloudflare headers
            proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
            proxy_set_header CF-Ray $http_cf_ray;
            proxy_set_header CF-Visitor $http_cf_visitor;
            
            # Standard proxy headers
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            
            # WebSocket timeouts
            proxy_read_timeout 600m;  # Increased from 3600s to 600m (10 hours) to match websocketIdleTimeout
            proxy_send_timeout 3600s;
            proxy_connect_timeout 75s;
            proxy_buffering off;
            proxy_cache off;
            
            # Debug logging
            access_log /var/log/nginx/websocket.log debug_format;
            error_log /var/log/nginx/websocket-error.log debug;
        }

        # API endpoints
        location /api {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API specific settings
            proxy_read_timeout 120s;  # Increased for larger graph data
            proxy_send_timeout 120s;  # Increased for larger graph data
            proxy_connect_timeout 60s;
            proxy_buffering on;       # Enable buffering for API responses
            proxy_buffer_size 256k;   # Increased for larger responses
            proxy_buffers 8 256k;     # Increased number of buffers
            proxy_busy_buffers_size 512k;  # Increased for larger responses
            proxy_max_temp_file_size 2048m;  # Allow larger temporary files
            add_header Cache-Control "no-store" always;  # Prevent caching of dynamic data
        }

        # Static files
        location / {
            try_files $uri $uri/ /index.html =404;
            expires 1h;
            add_header Cache-Control "public, no-transform";
            error_page 404 = @backend;  # Fallback to backend if file not found
        }

        # Static files with proper MIME types
        location /assets/ {
            expires 7d;
            add_header Cache-Control "public, no-transform" always;
            try_files $uri =404;
            access_log off;
        }

        # Fallback location for static files
        location @backend {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}

### settings.yaml

visualization:
  nodes:
    base_color: '#df90c2'
    metalness: 0.2
    opacity: 1.0
    roughness: 0.7
    size_range:
    - 0.5
    - 2.0
    quality: medium
    enable_instancing: true
    enable_hologram: true
    enable_metadata_shape: false
    enable_metadata_visualization: true
  edges:
    arrow_size: 0.02
    base_width: 0.005
    color: '#0c2140'
    enable_arrows: true
    opacity: 0.5
    width_range:
    - 0.005
    - 0.01
    quality: high
  physics:
    attraction_strength: 0.1      # Further increased for better cohesion
    bounds_size: 10.0             # Reduced to match MAX_DISTANCE in socket_flow_constants
    collision_radius: 0.25        # Increased to prevent nodes from getting too close
    damping: 0.97                 # Higher damping to reduce oscillation and improve stability
    enable_bounds: true
    enabled: true
    iterations: 100
    max_velocity: 0.02            # Further reduced to match MAX_VELOCITY in compute shader
    repulsion_strength: 0.04      # Slightly reduced relative to attraction for better cohesion
    spring_strength: 0.12         # Increased to improve node cohesion
    repulsion_distance: 1.25      # Reduced to limit repulsion effects
    mass_scale: 1.0
    boundary_damping: 0.95        # Further increased for better containment
  rendering:
    ambient_light_intensity: 0.41
    background_color: '#1a1a2e'
    directional_light_intensity: 0.7
    enable_ambient_occlusion: true
    enable_antialiasing: true
    enable_shadows: false
    environment_intensity: 0.7
  animations:
    enable_motion_blur: true
    enable_node_animations: true
    motion_blur_strength: 0.2
    selection_wave_enabled: false
    pulse_enabled: false
    pulse_speed: 0.8
    pulse_strength: 0.6
    wave_speed: 0.5
  labels:
    desktop_font_size: 14
    enable_labels: true
    text_color: '#000000'
    text_outline_color: '#ffffff'
    text_outline_width: 0.1
    text_resolution: 16
    text_padding: 2
    billboard_mode: camera
  bloom:
    edge_bloom_strength: 0.4
    enabled: true
    environment_bloom_strength: 2.0
    node_bloom_strength: 3.0
    radius: 2.0
    strength: 3.0
  hologram:
    ring_count: 2
    ring_color: '#c2a200'
    ring_opacity: 0.001
    sphere_sizes:
    - 0.8
    - 1.6
    ring_rotation_speed: 10.0
    enable_buckminster: false
    buckminster_size: 0.0
    buckminster_opacity: 0.0
    enable_geodesic: false
    geodesic_size: 0.0
    geodesic_opacity: 0.0
    enable_triangle_sphere: true
    triangle_sphere_size: 1.6
    triangle_sphere_opacity: 0.15
    global_rotation_speed: 0.03
system:
  network:
    bind_address: 0.0.0.0
    domain: visionflow.info
    enable_http2: false
    enable_rate_limiting: false
    enable_tls: false
    max_request_size: 10485760
    min_tls_version: ''
    port: 3001
    rate_limit_requests: 1000
    rate_limit_window: 60
    tunnel_id: dummy
    api_client_timeout: 30
    enable_metrics: true
    max_concurrent_requests: 5
    max_retries: 3
    metrics_port: 9090
    retry_delay: 5
  websocket:
    binary_chunk_size: 2048
    binary_update_rate: 30
    # Dynamic update rate parameters
    min_update_rate: 5      # Minimum updates per second when graph is stable
    max_update_rate: 60     # Maximum updates per second during high motion
    motion_threshold: 0.05  # Consider graph in motion if at least 5% of nodes are moving
    motion_damping: 0.9     # Damping factor for rate changes (higher = smoother transitions)
    binary_message_version: 1
    compression_enabled: false
    compression_threshold: 512
    heartbeat_interval: 10000
    heartbeat_timeout: 600000
    max_connections: 100
    max_message_size: 10485760
    reconnect_attempts: 5
    reconnect_delay: 1000
    update_rate: 60
  security:
    allowed_origins:
    - https://www.visionflow.info
    - https://visionflow.info
    audit_log_path: /app/logs/audit.log
    cookie_httponly: true
    cookie_samesite: Strict
    cookie_secure: true
    csrf_token_timeout: 3600
    enable_audit_logging: true
    enable_request_validation: true
    session_timeout: 3600
  debug:
    enabled: true
    enable_data_debug: true
    enable_websocket_debug: true
    log_binary_headers: true
    log_full_json: true
    log_level: debug
    log_format: json
xr:
  mode: inline
  room_scale: 1.0
  space_type: local-floor
  quality: medium
  enable_hand_tracking: true
  hand_mesh_enabled: true
  hand_mesh_color: '#4287f5'
  hand_mesh_opacity: 0.3
  hand_point_size: 0.006
  hand_ray_enabled: true
  hand_ray_color: '#4287f5'
  hand_ray_width: 0.003
  gesture_smoothing: 0.7
  enable_haptics: true
  haptic_intensity: 0.3
  drag_threshold: 0.08
  pinch_threshold: 0.3
  rotation_threshold: 0.08
  interaction_radius: 0.15
  movement_speed: 0.08
  dead_zone: 0.12
  movement_axes:
    horizontal: 2
    vertical: 3
  enable_light_estimation: false
  enable_plane_detection: false
  enable_scene_understanding: false
  plane_color: '#4287f5'
  plane_opacity: 0.2
  plane_detection_distance: 3.0
  show_plane_overlay: false
  snap_to_floor: false
  enable_passthrough_portal: false
  passthrough_opacity: 0.8
  passthrough_brightness: 1.1
  passthrough_contrast: 1.2
  portal_size: 2.5
  portal_edge_color: '#4287f5'
  portal_edge_width: 0.02
ragflow:
  api_key: ''
  api_base_url: ''
  timeout: 30
  max_retries: 3
  chat_id: ''
perplexity:
  api_key: ''
  model: llama-3.1-sonar-small-128k-online
  api_url: ''
  max_tokens: 4096
  temperature: 0.5
  top_p: 0.9
  presence_penalty: 0.0
  frequency_penalty: 0.0
  timeout: 30
  rate_limit: 100
openai:
  api_key: ''
  base_url: ''
  timeout: 30
  rate_limit: 100

### .dockerignore

# Git
.git
.gitignore
.pmpm-store

# Rust
target/

# Node.js
node_modules/
npm-debug.log

# IDEs and editors
.vscode/
.idea/
*.swp
*.swo

# OS generated files
.DS_Store
Thumbs.db

# Test files
tests/

# Environment variables
.env

# Cloudflared
config.yml

## Configuration Files


### Cargo.toml

[package]
name = "webxr"
version = "0.1.0"
edition = "2021"
description = "A WebXR graph visualization server with GPU-accelerated physics"
authors = ["Your Name <your.email@example.com>"]

[dependencies]
# Web framework and WebSocket
actix-web = { version = "=4.5.1", features = ["compress-gzip"] }
actix-cors = "=0.7.0"
actix-files = "=0.6.5"
actix = "=0.13.1"
actix-web-actors = "=4.3.0"
tungstenite = "0.21"
tokio-tungstenite = { version = "0.21" }

# Async runtime
tokio = { version = "1.43", features = ["full"] }
futures = "0.3"
async-trait = "0.1"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"

# Configuration
config = { version = "0.13", features = ["toml"] }
dotenvy = "0.15"
toml = "0.8"

# Logging
log = "0.4"
simplelog = "0.12"

# Error handling
thiserror = "1.0"
anyhow = "1.0"

# GPU/Compute
bytemuck = { version = "1.21", features = ["derive"] }
pollster = "0.3"
cudarc = { version = "0.11", features = ["driver", "cuda-12040"] }

# HTTP client and API
reqwest = { version = "0.11", features = ["json", "stream"] }
async-openai = "0.14"
backoff = { version = "0.4", features = ["tokio"] }
nostr-sdk = "0.25"

# Utilities
uuid = { version = "1.12", features = ["v4", "serde"] }
chrono = { version = "0.4", features = ["serde"] }
base64 = "0.21"
rand = "0.8"
regex = "1.11"
lazy_static = "1.5"
once_cell = "1.19"
sha1 = "0.10"
url = "2.5"
flate2 = "1.0"
byteorder = "1.5"
urlencoding = "2.1"

# Math/Linear Algebra (needed for GPU compute)
nalgebra = "0.32"

# Added from the code block
glam = "0.24"

[dev-dependencies]
tokio-test = "0.4"
mockall = "0.11"
pretty_assertions = "1.4"

[features]
default = ["gpu"]
gpu = ["cudarc/driver"]  # Enable GPU support with CUDA driver
cpu = []  # CPU-only mode

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
opt-level = 1

[package.metadata.rust-version]
min = "1.70.0"

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

### package.json - MISSING


### vite.config.ts

import { defineConfig } from 'vite';
import { resolve } from 'path';

// https://vitejs.dev/config/
export default defineConfig(({ mode, command }) => {
  const isProd = mode === 'production';
  const isQuest = process.env.npm_config_platform === 'quest';

  return {
    root: 'client',
    base: './',
    
    build: {
      outDir: resolve(__dirname, 'data/public/dist'),
      emptyOutDir: true,
      chunkSizeWarningLimit: 600,
      sourcemap: !isProd,
      minify: false, // Disable minification to debug shader issues
      target: 'esnext',
      terserOptions: {
        compress: {
          passes: 2,
          pure_funcs: ['console.log', 'console.info', 'console.debug'],
          drop_console: isProd,
          drop_debugger: isProd,
          unsafe_math: true,
          unsafe_methods: true,
          unsafe_proto: true,
          keep_infinity: true,
          ecma: 2020,
          module: true
        },
        mangle: isProd
      },
      rollupOptions: {
        input: {
          main: resolve(__dirname, 'client/index.html')
        },
        output: {
          assetFileNames: (assetInfo) => {
            if (!assetInfo.name) return 'assets/[name][extname]';
            
            if (/\.(woff2?|eot|ttf|otf)$/i.test(assetInfo.name)) {
              return `assets/fonts/[name][extname]`;
            }
            if (/\.(css)$/i.test(assetInfo.name)) {
              return `assets/css/[name][extname]`;
            }
            if (/\.(png|jpe?g|gif|svg|ico)$/i.test(assetInfo.name)) {
              return `assets/images/[name][extname]`;
            }
            return `assets/[name][extname]`;
          },
          chunkFileNames: 'assets/js/[name]-[hash].js',
          entryFileNames: 'assets/js/[name]-[hash].js',
          manualChunks: {
            three: ['three'],
            'three-extras': [
              'three/examples/jsm/controls/OrbitControls',
              'three/examples/jsm/loaders/GLTFLoader'
            ],
            visualization: ['./client/visualization/HologramManager.ts', './client/rendering/node/geometry/NodeGeometryManager.ts'],
            core: ['./client/core/types.ts', './client/core/constants.ts', './client/core/utils.ts']
          }
        }
      }
    },

    resolve: {
      alias: {
        '@': resolve(__dirname, './client')
      }
    },

    server: {
      port: 3001,
      host: true,
      proxy: {
        '/wss': {  // Updated from /ws to /wss to match nginx
          target: 'ws://localhost:4000',
          ws: true
        },
        '/api': {
          target: 'http://localhost:4000',
          changeOrigin: true
        }
      }
    },

    optimizeDeps: {
      include: [
        'three',
        'three/examples/jsm/controls/OrbitControls',
        'three/examples/jsm/loaders/GLTFLoader'
      ],
      exclude: []
    },

    define: {
      __QUEST__: isQuest,
      __DEV__: !isProd
    }
  };
});

### .env.template - MISSING


### tsconfig.json

{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable",
      "WebWorker",
      "WebWorker.ImportScripts",
      "Webworker.Iterable"
    ],
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noImplicitReturns": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["client/*"],
      "three/examples/jsm/*": ["node_modules/three/examples/jsm/*"]
    },
    "types": ["vite/client", "node", "three"]
  },
  "include": ["client/**/*.ts", "client/**/*.d.ts", "node_modules/three/examples/jsm/**/*.d.ts"],
  "exclude": ["node_modules", "dist"]
}

### .eslintrc - MISSING


### .gitignore

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*
debug_log.txt

# Dependencies
node_modules
.pnpm-store/
.npm
.yarn
/featureclient/

# Build output
dist
dist-ssr
*.local
build
out
/codebase.txt

# Data directories
data/markdown/
data/runtime/
data/public/dist/
data/metadata/metadata.json

# Documentation and assets
docs/*.gif
docs/*.png
*.mp4
*.webm
*.mov
*.wav
*.mp3
*.glb
*.gltf
*.hdr
*.exr

# Editor directories and files
.vscode/*
!.vscode/extensions.json
!.vscode/settings.json
.idea
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.DS_Store
*.pem

# Environment and configuration
.env
.env.*
!.env.example
!.env_template
settings.local.toml
certs

# TypeScript
*.tsbuildinfo
auto-imports.d.ts
components.d.ts

# Testing and coverage
coverage
.nyc_output

# Cache and temporary
.cache
.temp
.eslintcache
.stylelintcache
*.tmp
*.temp
.tmp
.temp

# Rust/Cargo
target/
**/*.rs.bk
Cargo.lock

# Platform and deployment
.vercel
.netlify
.cloudflare

# Debug and profiling
chrome-profiler-events*.json
speed-measure-plugin*.json

# Generated files
generated
optimized-output.gif

# Docker
.docker/
docker-compose.override.yml

# AI and tools
.aider*
.hypothesis/
__pycache__/
*.pyc

# Project specific
scripts/local/
client/visualization/effects/custom/

### tsconfig.json

{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": [
      "es2020",
      "dom",
      "dom.iterable",
      "webworker",
      "webworker.importscripts",
      "webworker.iterable"
    ],
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noImplicitReturns": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["**/*.ts", "**/*.d.ts"],
  "exclude": ["node_modules"]
}

### launch-docker.sh

#!/usr/bin/env bash

###############################################################################
# SAFETY SETTINGS
###############################################################################
# -e  Exit on any command returning a non-zero status
# -u  Treat unset variables as errors
# -o pipefail  Return error if any part of a pipeline fails
set -euo pipefail

###############################################################################
# DETECT SCRIPT & PROJECT ROOT
###############################################################################
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"

###############################################################################
# COLOR CONSTANTS
###############################################################################
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'  # No color

###############################################################################
# DATA PATHS
###############################################################################
MARKDOWN_DIR="$PROJECT_ROOT/data/markdown"
METADATA_DIR="$PROJECT_ROOT/data/metadata"
METADATA_FILE="$METADATA_DIR/metadata.json"

###############################################################################
# LOGGING & EXIT HANDLING
###############################################################################
log() {
    # Logs a message with a timestamp
    echo -e "[$(date "+%Y-%m-%d %H:%M:%S")] $1"
}

handle_exit() {
    # Called when the script receives a signal (Ctrl+C, kill, etc.)
    log "\n${YELLOW}Exiting to shell. Containers will continue running.${NC}"
    exit 0
}

# Trap Ctrl+C, kill, etc. so we can exit gracefully
trap handle_exit INT TERM

###############################################################################
# CHECKS & VALIDATIONS
###############################################################################

check_environment() {
    # Validate required env vars and GitHub token
    log "${YELLOW}Checking environment variables...${NC}"

    local required_vars=(
        "GITHUB_TOKEN"
        "GITHUB_OWNER"
        "GITHUB_REPO"
        "GITHUB_BASE_PATH"
    )

    for var in "${required_vars[@]}"; do
        if [ -z "${!var:-}" ]; then
            log "${RED}Error: $var is not set in .env file${NC}"
            return 1
        fi
    done

    # Check GitHub token access
    if ! curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO" >/dev/null; then
        log "${RED}Error: Invalid GitHub token or repository access${NC}"
        return 1
    fi

    log "${GREEN}Environment check passed${NC}"
    return 0
}

check_pnpm_security() {
    log "${YELLOW}Running pnpm security audit...${NC}"

    # Run and capture the audit output
    local audit_output
    audit_output=$(pnpm audit 2>&1 || true)
    local audit_exit=$?

    # Extract critical vulnerabilities count
    local critical_count
    critical_count=$(echo "$audit_output" | grep -i "critical" \
                                    | grep -o '[0-9]\+ vulnerabilities' \
                                    | awk '{print $1}')
    critical_count=${critical_count:-0}

    # Display the audit output
    echo "$audit_output"

    if [ "$critical_count" -gt 0 ]; then
        log "${RED}Found $critical_count critical vulnerabilities!${NC}"
        return 1
    elif [ "$audit_exit" -ne 0 ]; then
        log "${YELLOW}Found non-critical vulnerabilities${NC}"
    else
        log "${GREEN}No critical vulnerabilities found${NC}"
    fi

    return 0
}

check_typescript() {
    log "${YELLOW}Running TypeScript type check...${NC}"
    if ! pnpm run type-check; then
        log "${RED}TypeScript check failed${NC}"
        log "${YELLOW}Containers will be left running for debugging${NC}"
        return 1
    fi
    log "${GREEN}TypeScript check passed${NC}"
    return 0
}

check_rust_security() {
    log "${YELLOW}Running cargo audit...${NC}"

    local audit_output
    audit_output=$(cargo audit 2>&1 || true)
    local audit_exit=$?

    local critical_count
    critical_count=$(echo "$audit_output" | grep -i "critical" | wc -l)
    critical_count=${critical_count:-0}

    echo "$audit_output"

    if [ "$critical_count" -gt 0 ]; then
        log "${RED}Found $critical_count critical vulnerabilities!${NC}"
        return 1
    elif [ "$audit_exit" -ne 0 ]; then
        log "${YELLOW}Found non-critical vulnerabilities${NC}"
    else
        log "${GREEN}No critical vulnerabilities found${NC}"
    fi

    return 0
}

read_settings() {
    # Read domain & port from settings.yaml using yq
    local settings_file="$PROJECT_ROOT/settings.yaml"

    if [ ! -f "$settings_file" ]; then
        log "${RED}Error: settings.yaml not found${NC}"
        return 1
    fi

    # Check if yq is installed
    if ! command -v yq &>/dev/null; then
        log "${RED}Error: yq is not installed. Please install yq to parse YAML files.${NC}"
        return 1
    fi

    # Extract domain and port using yq
    DOMAIN=$(yq eval '.system.network.domain' "$settings_file")
    export DOMAIN

    PORT=$(yq eval '.system.network.port' "$settings_file")
    export PORT

    if [ -z "${DOMAIN:-}" ] || [ -z "${PORT:-}" ] || [ "$DOMAIN" = "null" ] || [ "$PORT" = "null" ]; then
        log "${RED}Error: DOMAIN or PORT not set in settings.yaml. Check your configuration.${NC}"
        return 1
    fi
}

check_system_resources() {
    log "${YELLOW}Checking GPU availability...${NC}"
    if ! command -v nvidia-smi &>/dev/null; then
        log "${RED}Error: nvidia-smi not found${NC}"
        return 1
    fi

    local gpu_info
    gpu_info=$(nvidia-smi --query-gpu=memory.used,memory.total --format=csv,noheader)
    echo "$gpu_info"

    local has_enough_memory=false
    while IFS=, read -r used total; do
        used=$(echo "$used" | tr -d ' MiB')
        total=$(echo "$total" | tr -d ' MiB')
        local free=$((total - used))
        if [ "$free" -gt 4096 ]; then
            has_enough_memory=true
            break
        fi
    done <<< "$gpu_info"

    if [ "$has_enough_memory" = false ]; then
        log "${RED}Error: No GPU with at least 4GB free memory${NC}"
        return 1
    fi
}

check_dependencies() {
    # Check Docker
    if ! command -v docker &>/dev/null; then
        log "${RED}Error: Docker is not installed${NC}"
        return 1
    fi

    # Try Docker Compose v2 first, fallback to v1
    if docker compose version &>/dev/null; then
        DOCKER_COMPOSE="docker compose"
    elif docker-compose version &>/dev/null; then
        DOCKER_COMPOSE="docker-compose"
    else
        log "${RED}Error: Docker Compose not found${NC}"
        return 1
    fi

    # Check yq
    if ! command -v yq &>/dev/null; then
        log "${RED}Error: yq is not installed${NC}"
        log "${YELLOW}Please install yq to parse YAML files:${NC}"
        log "${YELLOW}On Ubuntu/Debian: sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq${NC}"
        log "${YELLOW}On macOS: brew install yq${NC}"
        log "${YELLOW}On other systems, visit: https://github.com/mikefarah/yq#install${NC}"
        return 1
    fi
}

verify_client_structure() {
    log "${YELLOW}Verifying client directory structure...${NC}"

    local required_files=(
        "$PROJECT_ROOT/client/index.html"
        "$PROJECT_ROOT/client/index.ts"
        "$PROJECT_ROOT/client/core/types.ts"
        "$PROJECT_ROOT/client/core/constants.ts"
        "$PROJECT_ROOT/client/core/utils.ts"
        "$PROJECT_ROOT/client/core/logger.ts"
        "$PROJECT_ROOT/client/websocket/websocketService.ts"
        "$PROJECT_ROOT/client/rendering/scene.ts"
        "$PROJECT_ROOT/client/rendering/node/geometry/NodeGeometryManager.ts"
        "$PROJECT_ROOT/client/rendering/textRenderer.ts"
        "$PROJECT_ROOT/client/state/settings.ts"
        "$PROJECT_ROOT/client/state/graphData.ts"
        "$PROJECT_ROOT/client/state/defaultSettings.ts"
        "$PROJECT_ROOT/client/xr/xrSessionManager.ts"
        "$PROJECT_ROOT/client/xr/xrInteraction.ts"
        "$PROJECT_ROOT/client/xr/xrTypes.ts"
        "$PROJECT_ROOT/client/platform/platformManager.ts"
        "$PROJECT_ROOT/client/tsconfig.json"
    )

    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            log "${RED}Error: Required file $file not found${NC}"
            return 1
        fi
    done

    log "${GREEN}Client directory structure verified${NC}"
    return 0
}

check_ragflow_network() {
    log "${YELLOW}Checking RAGFlow network availability...${NC}"
    if ! docker network ls | grep -q "docker_ragflow"; then
        log "${RED}Error: RAGFlow network (docker_ragflow) not found${NC}"
        log "${YELLOW}Please ensure RAGFlow is running in ../ragflow/docker${NC}"
        log "${YELLOW}You can check the network with: docker network ls${NC}"
        return 1
    fi
    log "${GREEN}RAGFlow network is available${NC}"
    return 0
}

check_kokoros() {
    log "${YELLOW}Checking Kokoros TTS service...${NC}"
    if ! docker ps --format '{{.Names}}' | grep -q "^kokoros$"; then
        log "${YELLOW}Kokoros container not running, starting it...${NC}"
        if ! docker run -d -p 4001:4001 --network docker_ragflow --name kokoros kokoros openai; then
            log "${RED}Failed to start Kokoros container${NC}"
            return 1
        fi
        log "${GREEN}Kokoros container started successfully${NC}"
    else
        log "${GREEN}Kokoros container is already running${NC}"
    fi
    return 0
}

check_application_readiness() {
    local max_attempts=60
    local attempt=1
    local wait_secs=2

    log "${YELLOW}Checking application readiness...${NC}"

    while [ "$attempt" -le "$max_attempts" ]; do
        local ready=true
        local status_msg=""

        # Simple container running check instead of health check
        if ! docker ps --format '{{.Names}}' | grep -q "^logseq-xr-webxr$"; then
            ready=false
            status_msg="Container not running"
        fi

        # Basic HTTP check
        if [ "$ready" = true ] && ! timeout 5 curl -s http://localhost:4000/ >/dev/null; then
            ready=false
            status_msg="HTTP endpoint not ready"
        fi

        # Process check inside container (more reliable than health check)
        if [ "$ready" = true ]; then
            if ! docker exec logseq-xr-webxr pgrep -f "node" >/dev/null; then
                ready=false
                status_msg="Node process not running in container"
            fi
        fi

        if [ "$ready" = true ]; then
            log "${GREEN}All services are ready${NC}"
            return 0
        fi

        log "${YELLOW}Attempt $attempt/$max_attempts: $status_msg${NC}"

        if [ "$attempt" -eq $((max_attempts / 2)) ]; then
            log "${YELLOW}Still waiting for services. Recent logs:${NC}"
            $DOCKER_COMPOSE logs --tail=20
        fi

        sleep "$wait_secs"
        attempt=$((attempt + 1))
    done

    log "${RED}Application failed to start properly${NC}"
    $DOCKER_COMPOSE logs
    return 1
}
###############################################################################
# COMMAND LINE ARGUMENTS
###############################################################################
REBUILD_TEST=false
DEBUG_MODE=false

# Parse command line arguments
for arg in "$@"; do
    case $arg in
        rebuild-test)
            REBUILD_TEST=true
            shift # Remove from processing
            ;;
        --debug)
            DEBUG_MODE=true
            shift # Remove from processing
            ;;
    esac
done

###############################################################################
# MAIN EXECUTION
###############################################################################
cd "$PROJECT_ROOT"


# 1. Ensure .env exists
if [ ! -f .env ]; then
    log "${RED}Error: .env file not found in $PROJECT_ROOT${NC}"
    exit 1
fi

# 2. Source environment variables
set -a
source .env
set +a

# 3. Read settings from TOML (non-fatal if it fails, to allow debugging)
read_settings || {
    log "${YELLOW}Settings read failed - continuing for debugging${NC}"
}

# 4. Check dependencies (Docker and yq)
check_dependencies || {
    log "${RED}Dependency check failed${NC}"
    exit 1
}

# 5. GPU resources (non-fatal if it fails)
check_system_resources || {
    log "${YELLOW}System resources check failed - continuing for debugging${NC}"
}

# 6. Verify client directory structure (non-fatal if it fails)
if ! verify_client_structure; then
    log "${RED}Client structure verification failed${NC}"
    log "${YELLOW}Continuing for debugging${NC}"
fi

# 7. Security checks
log "\n${YELLOW}Running security checks...${NC}"
check_pnpm_security || true
check_typescript || {
    log "${YELLOW}TypeScript check failed - continuing for debugging${NC}"
}
check_rust_security || true

# 10. Environment & GitHub token check (non-fatal)
if ! check_environment; then
    log "${YELLOW}Environment check failed - continuing for debugging${NC}"
fi

# 10. Build & start containers
log "${YELLOW}Building and starting services...${NC}"

# Clean up existing containers
log "${YELLOW}Cleaning up existing containers...${NC}"

# Get container IDs for our specific containers
cloudflared_id=$(docker ps -aq --filter "name=cloudflared-tunnel")
webxr_id=$(docker ps -aq --filter "name=logseq-xr-webxr")

# Stop and remove cloudflared container if it exists
if [ -n "$cloudflared_id" ]; then
    log "${YELLOW}Stopping cloudflared container $cloudflared_id...${NC}"
    docker stop "$cloudflared_id"
    docker rm "$cloudflared_id"
fi

# Stop and remove webxr container if it exists
if [ -n "$webxr_id" ]; then
    log "${YELLOW}Stopping webxr container $webxr_id...${NC}"
    docker stop "$webxr_id"
    docker rm "$webxr_id"
fi

# If in rebuild-test mode, do additional cleanup
if [ "$REBUILD_TEST" = true ]; then
    log "${YELLOW}Rebuild-test mode: Performing additional cleanup...${NC}"
    docker system prune -f
fi

# Get current git hash or use "development" if not in a git repo
GIT_HASH=$(git rev-parse HEAD 2>/dev/null || echo "development")
export GIT_HASH

# Compile CUDA to PTX
log "${YELLOW}Compiling CUDA to PTX...${NC}"
if ! command -v nvcc &>/dev/null; then
    log "${RED}Error: NVIDIA CUDA Compiler (nvcc) not found${NC}"
    log "${YELLOW}Please install CUDA toolkit to compile PTX files${NC}"
    exit 1
fi

# Use CUDA_ARCH from .env or default to 89 (Ada)
CUDA_ARCH=${CUDA_ARCH:-89}
log "${YELLOW}Compiling CUDA to PTX for sm_${CUDA_ARCH}...${NC}"

if ! nvcc \
    -arch=sm_${CUDA_ARCH} \
    -O3 \
    --use_fast_math \
    -ptx \
    -rdc=true \
    --compiler-options -fPIC \
    src/utils/compute_forces.cu \
    -o src/utils/compute_forces.ptx \
    --compiler-bindir=/usr/bin/gcc-11; then
    log "${RED}Failed to compile CUDA to PTX${NC}"
    true
else
    log "${YELLOW}Setting PTX file permissions...${NC}"
    chmod 644 src/utils/compute_forces.ptx
fi
log "${YELLOW}Building client code...${NC}"
pnpm build || { log "${RED}Client build failed${NC}"; exit 1; }
log "${GREEN}Client build successful${NC}"

# Build with GIT_HASH environment variable
DEBUG_MODE=$DEBUG_MODE GIT_HASH=$GIT_HASH $DOCKER_COMPOSE build --pull --no-cache
$DOCKER_COMPOSE up -d

# 11. Check readiness (fatal if fails)
if ! check_application_readiness; then
    log "${RED}Application failed to start properly${NC}"
    log "${YELLOW}Containers left running for debugging. Use these commands:${NC}"
    log "  $DOCKER_COMPOSE logs -f"
    log "  docker logs logseq-xr-webxr"
    log "  docker logs cloudflared-tunnel"
    exit 1
fi

# 12. Final status
log "\n${GREEN}🚀 Services are running!${NC}"

log "\nResource Usage:"
docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"

log "\nEndpoints:"
echo "HTTP:      http://localhost:4000"
echo "WebSocket: ws://localhost:4000/wss"

log "\nCommands:"
echo "logs:    $DOCKER_COMPOSE logs -f"
echo "stop:    $DOCKER_COMPOSE down"
echo "restart: $DOCKER_COMPOSE restart"

# 13. Show logs in background, wait for them
log "\n${YELLOW}Showing logs (Ctrl+C to exit)...${NC}"
$DOCKER_COMPOSE logs -f &

wait

### start.sh

#!/bin/bash
set -euo pipefail

# Function to log messages with timestamps
log() {
    echo "[$(date "+%Y-%m-%d %H:%M:%S")] $1"
}

# Parse command line arguments
START_WEBXR=true
if [ $# -gt 0 ] && [ "$1" = "--no-webxr" ]; then
    START_WEBXR=false
fi

# Verify settings file permissions
log "Verifying settings.yaml permissions..."
if [ ! -f "/app/settings.yaml" ]; then
    log "Error: settings.yaml not found"
    exit 1
fi
chmod 666 /app/settings.yaml
log "settings.yaml permissions verified"

# Set up runtime environment
# Start nginx
log "Starting nginx..."
nginx -t && nginx
log "nginx started successfully"

# Execute the webxr binary only if not in debug mode
if [ "$START_WEBXR" = true ]; then
    log "Executing webxr..."
    exec /app/webxr
else
    log "Skipping webxr execution (debug mode)"
    # Keep the container running
    tail -f /dev/null
fi

=== Docker Network Configuration ===


--- docker network inspect docker_ragflow ---

[
    {
        "Name": "docker_ragflow",
        "Id": "a7bc515a66f9014dfe7b39dc55eb933f4620c1536e5ff801fa5f92c8c36060b3",
        "Created": "2024-12-06T11:41:33.959442093Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.19.0.0/16",
                    "Gateway": "172.19.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "02729e216f9d731265c221373319a9c86123287df95b6d83c8566898a46618e0": {
                "Name": "kokoros",
                "EndpointID": "66bbf80235f21a2be6f225d5ac07f23c4e21047d2ce068c66a4adeb00d5f876e",
                "MacAddress": "02:42:ac:13:00:06",
                "IPv4Address": "172.19.0.6/16",
                "IPv6Address": ""
            },
            "37236cd15a632531557445eceb52798043a3c05aeac3e621a1b44a97b325abb4": {
                "Name": "ragflow-server",
                "EndpointID": "14559c2ca7a236a11494c18af4efc366169efd9c6bc96cc0e7205027efe55529",
                "MacAddress": "02:42:ac:13:00:07",
                "IPv4Address": "172.19.0.7/16",
                "IPv6Address": ""
            },
            "3be454562b9e9cb29c8baaa366180266040b65ee6e4f49b2a2d574823ed1ce6c": {
                "Name": "ragflow-es-01",
                "EndpointID": "44331406abf654f7d884dc6ec1ba928a57ebc0409eec86bda26985ab128b39d7",
                "MacAddress": "02:42:ac:13:00:02",
                "IPv4Address": "172.19.0.2/16",
                "IPv6Address": ""
            },
            "6f29e52e755469407f276c8296b30e93e939cd4fb971c861a6391f9f7c3b6e16": {
                "Name": "ragflow-mysql",
                "EndpointID": "654c07ea7d9d5fc00918d71bcf5d0df1a029fefc2587e036ffca8f4660f95961",
                "MacAddress": "02:42:ac:13:00:05",
                "IPv4Address": "172.19.0.5/16",
                "IPv6Address": ""
            },
            "7199f15d4c9c7a97de71e3f85145c48b707b45bb8f88c6a1d47470c8a2991423": {
                "Name": "cloudflared-tunnel",
                "EndpointID": "02c1aa5824e67b87a9ab9297c45a69ef3209f240aa77c002ec2bcc6317f15a73",
                "MacAddress": "02:42:ac:13:00:0b",
                "IPv4Address": "172.19.0.11/16",
                "IPv6Address": ""
            },
            "8b7cea10b14ce843b477c50ab0f47c3c606494e101acaaf074d75481d9c65f80": {
                "Name": "ragflow-redis",
                "EndpointID": "cafc82a072427660b2c728e66765dab0ab1847d0c837e9f9f65dd23a0d7018f7",
                "MacAddress": "02:42:ac:13:00:03",
                "IPv4Address": "172.19.0.3/16",
                "IPv6Address": ""
            },
            "927938944e0afdc54d3767040449c418ac58b2af3d0a7e56dc7218ced2556c4f": {
                "Name": "ragflow-minio",
                "EndpointID": "35640543fb737ef890a31a2025695c25b5abff9e9d9e36f8ffccccb77a6bbdb1",
                "MacAddress": "02:42:ac:13:00:04",
                "IPv4Address": "172.19.0.4/16",
                "IPv6Address": ""
            },
            "9929432e294e0fa4e74baba29820e23ef6a5d760b83f9cbc6c504ce355fbff6a": {
                "Name": "open-webui",
                "EndpointID": "0fe7fd732fa5537d674d2edf44d4eba69ec0a27ea2c5a134dbc30ca939626ea0",
                "MacAddress": "02:42:ac:13:00:0a",
                "IPv4Address": "172.19.0.10/16",
                "IPv6Address": ""
            },
            "c3abd5ae74f8fd86644e08cf8ed3c291004cacd82ec1321dc91082699327c6bf": {
                "Name": "logseq-xr-webxr",
                "EndpointID": "0f5d664a212f25cf29a67602ec976cf6a35ec65eccbe16669e624ef6a0f0a115",
                "MacAddress": "02:42:ac:13:00:0c",
                "IPv4Address": "172.19.0.12/16",
                "IPv6Address": ""
            },
            "c5b92a96025baeae548518eaafe88ef76e70e6d90e5951a8750d01c56b6c8d4a": {
                "Name": "xinference",
                "EndpointID": "44cee519c20433e6f98f813ce2d313f091996b2779ce3e3be8b6d4ac9c0888e5",
                "MacAddress": "02:42:ac:13:00:09",
                "IPv4Address": "172.19.0.9/16",
                "IPv6Address": ""
            },
            "ccdb4682ac44873fc6d3903e1931a25e9300d3b1f28a5dfe52091087289ac495": {
                "Name": "ollama",
                "EndpointID": "9ef7557ae8cb9b03a1e62d9cf76356e0873475b0962ac963e4f30607754d242f",
                "MacAddress": "02:42:ac:13:00:08",
                "IPv4Address": "172.19.0.8/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {
            "com.docker.compose.network": "ragflow",
            "com.docker.compose.project": "docker",
            "com.docker.compose.version": "2.29.7"
        }
    }
]


## Server Code (Rust)

The following text represents a project with code. The structure of the text consists of sections beginning with ----, followed by a single line containing the file path and file name, and then a variable number of lines containing the file contents. The text representing the project ends when the symbols --END-- are encountered. Any further text beyond --END-- is meant to be interpreted as instructions using the aforementioned project as context.
----
state.rs
use std::sync::Arc;
use tokio::sync::RwLock;
use crate::config::Settings;

#[derive(Debug)]  // Only Debug derive, remove Clone
pub struct AppState {
    pub settings: Arc<RwLock<Settings>>,
}

impl AppState {
    pub fn new(settings: Settings) -> Self {
        Self {
            settings: Arc::new(RwLock::new(settings)),
        }
    }

    pub fn clone_settings(&self) -> Arc<RwLock<Settings>> {
        self.settings.clone()
    }
} 
----
lib.rs
pub mod app_state;
pub mod config;
pub mod handlers;
pub mod models;
pub mod services;
pub mod types;
pub mod utils;

pub use app_state::AppState;
pub use models::metadata::MetadataStore;
pub use models::protected_settings::ProtectedSettings;
pub use models::simulation_params::SimulationParams;
pub use models::ui_settings::UISettings;
pub use models::user_settings::UserSettings;

----
app_state.rs
use std::sync::{Arc, atomic::{AtomicUsize, Ordering}};
use tokio::sync::RwLock;
use actix_web::web;

use crate::config::Settings;
use crate::config::feature_access::FeatureAccess;
use crate::models::metadata::MetadataStore;
use crate::models::protected_settings::{ProtectedSettings, ApiKeys, NostrUser};
use crate::services::graph_service::GraphService;
use crate::services::github::{GitHubClient, ContentAPI};
use crate::services::perplexity_service::PerplexityService;
use crate::services::ragflow_service::RAGFlowService;
use crate::services::nostr_service::NostrService;
use crate::utils::gpu_compute::GPUCompute;

#[derive(Clone)]
pub struct AppState {
    pub graph_service: GraphService,
    pub gpu_compute: Option<Arc<RwLock<GPUCompute>>>,
    pub settings: Arc<RwLock<Settings>>,
    pub protected_settings: Arc<RwLock<ProtectedSettings>>,
    pub metadata: Arc<RwLock<MetadataStore>>,
    pub github_client: Arc<GitHubClient>,
    pub content_api: Arc<ContentAPI>,
    pub perplexity_service: Option<Arc<PerplexityService>>,
    pub ragflow_service: Option<Arc<RAGFlowService>>,
    pub nostr_service: Option<web::Data<NostrService>>,
    pub feature_access: web::Data<FeatureAccess>,
    pub ragflow_conversation_id: String,
    pub active_connections: Arc<AtomicUsize>,
}

impl AppState {
    pub async fn new(
        settings: Arc<RwLock<Settings>>,
        github_client: Arc<GitHubClient>,
        content_api: Arc<ContentAPI>,
        perplexity_service: Option<Arc<PerplexityService>>,
        ragflow_service: Option<Arc<RAGFlowService>>,
        gpu_compute: Option<Arc<RwLock<GPUCompute>>>,
        ragflow_conversation_id: String,
    ) -> Result<Self, Box<dyn std::error::Error + Send + Sync>> {
        // Initialize GraphService with settings
        let graph_service = GraphService::new(settings.clone(), gpu_compute.clone()).await;
        
        Ok(Self {
            graph_service,
            gpu_compute,
            settings,
            protected_settings: Arc::new(RwLock::new(ProtectedSettings::default())),
            metadata: Arc::new(RwLock::new(MetadataStore::new())),
            github_client,
            content_api,
            perplexity_service,
            ragflow_service,
            nostr_service: None,
            feature_access: web::Data::new(FeatureAccess::from_env()),
            ragflow_conversation_id,
            active_connections: Arc::new(AtomicUsize::new(0)),
        })
    }

    pub fn increment_connections(&self) -> usize {
        self.active_connections.fetch_add(1, Ordering::SeqCst)
    }

    pub fn decrement_connections(&self) -> usize {
        self.active_connections.fetch_sub(1, Ordering::SeqCst)
    }

    pub async fn get_api_keys(&self, pubkey: &str) -> ApiKeys {
        let protected_settings = self.protected_settings.read().await;
        protected_settings.get_api_keys(pubkey)
    }

    pub async fn get_nostr_user(&self, pubkey: &str) -> Option<NostrUser> {
        if let Some(nostr_service) = &self.nostr_service {
            nostr_service.get_user(pubkey).await
        } else {
            None
        }
    }

    pub async fn validate_nostr_session(&self, pubkey: &str, token: &str) -> bool {
        if let Some(nostr_service) = &self.nostr_service {
            nostr_service.validate_session(pubkey, token).await
        } else {
            false
        }
    }

    pub async fn update_nostr_user_api_keys(&self, pubkey: &str, api_keys: ApiKeys) -> Result<NostrUser, String> {
        if let Some(nostr_service) = &self.nostr_service {
            nostr_service.update_user_api_keys(pubkey, api_keys)
                .await
                .map_err(|e| e.to_string())
        } else {
            Err("Nostr service not initialized".to_string())
        }
    }

    pub fn set_nostr_service(&mut self, service: NostrService) {
        self.nostr_service = Some(web::Data::new(service));
    }

    // Feature access helper methods
    pub fn is_power_user(&self, pubkey: &str) -> bool {
        self.feature_access.is_power_user(pubkey)
    }

    pub fn can_sync_settings(&self, pubkey: &str) -> bool {
        self.feature_access.can_sync_settings(pubkey)
    }

    pub fn has_feature_access(&self, pubkey: &str, feature: &str) -> bool {
        self.feature_access.has_feature_access(pubkey, feature)
    }

    pub fn get_available_features(&self, pubkey: &str) -> Vec<String> {
        self.feature_access.get_available_features(pubkey)
    }
}

----
main.rs
use webxr::{
    AppState,
    config::Settings,
    handlers::{
        api_handler,
        health_handler,
        pages_handler,
        socket_flow_handler::socket_flow_handler,
        nostr_handler,
    },
    services::{
        file_service::FileService,
        graph_service::GraphService,
        github::{GitHubClient, ContentAPI, GitHubConfig},
    }
};

use actix_web::{web, App, HttpServer, middleware};
use actix_cors::Cors;
use actix_files::Files;
use std::sync::Arc;
use tokio::sync::RwLock;
use tokio::time::Duration;
use dotenvy::dotenv;
use log::{error, info, debug};
use webxr::utils::logging::{init_logging_with_config, LogConfig};

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    // Make dotenv optional since env vars can come from Docker
    dotenv().ok();

    // Load settings first to get the log level
    let settings = match Settings::new() {
        Ok(s) => {
            info!("Settings loaded successfully from: {}", 
                std::env::var("SETTINGS_FILE_PATH").unwrap_or_default());
            Arc::new(RwLock::new(s))
        },
        Err(e) => {
            error!("Failed to load settings: {:?}", e);
            return Err(std::io::Error::new(std::io::ErrorKind::Other, format!("Failed to initialize settings: {:?}", e)));
        }
    };

    // Initialize logging with settings-based configuration
    let log_config = {
        let settings_read = settings.read().await;
        // Only use debug level if debug is enabled, otherwise use configured level
        let log_level = &settings_read.system.debug.log_level;
        
        LogConfig::new(
            log_level,
            log_level,
        )
    };

    init_logging_with_config(log_config)?;

    debug!("Successfully loaded settings");

    info!("Starting WebXR application...");
    
    // Create web::Data instances first
    let settings_data = web::Data::new(settings.clone());

    // Initialize services
    let github_config = match GitHubConfig::from_env() {
        Ok(config) => config,
        Err(e) => return Err(std::io::Error::new(std::io::ErrorKind::Other, format!("Failed to load GitHub config: {}", e)))
    };

    let github_client = match GitHubClient::new(github_config, settings.clone()).await {
        Ok(client) => Arc::new(client),
        Err(e) => return Err(std::io::Error::new(std::io::ErrorKind::Other, format!("Failed to initialize GitHub client: {}", e)))
    };

    let content_api = Arc::new(ContentAPI::new(github_client.clone()));

    // Initialize app state asynchronously
    let mut app_state = match AppState::new(
            settings.clone(),
            github_client.clone(),
            content_api.clone(),
            None,
            None,
            None,
            "default_conversation".to_string(),
        ).await {
            Ok(state) => state,
            Err(e) => return Err(std::io::Error::new(std::io::ErrorKind::Other, format!("Failed to initialize app state: {}", e)))
        };

    // Initialize Nostr service
    nostr_handler::init_nostr_service(&mut app_state);

    // Initialize local storage and fetch initial data
    info!("Initializing local storage and fetching initial data");
    if let Err(e) = FileService::initialize_local_storage(settings.clone()).await {
        error!("Failed to initialize local storage: {}", e);
        return Err(std::io::Error::new(std::io::ErrorKind::Other, e.to_string()));
    }

    // Load metadata and build initial graph
    info!("Building initial graph from metadata");
    let metadata_store = FileService::load_or_create_metadata()
        .map_err(|e| {
            error!("Failed to load metadata: {}", e);
            std::io::Error::new(std::io::ErrorKind::Other, e.to_string())
        })?;

    info!("Loaded {} items from metadata store", metadata_store.len());

    // Update metadata in app state
    {
        let mut app_metadata = app_state.metadata.write().await;
        *app_metadata = metadata_store.clone();
        info!("Loaded metadata into app state");
    }

    // Build initial graph from metadata
    match GraphService::build_graph_from_metadata(&metadata_store).await {
        Ok(graph_data) => {            
            // Initialize GPU compute with actual graph data
            if let Err(e) = app_state.graph_service.initialize_gpu(settings.clone(), &graph_data).await {
                error!("Failed to initialize GPU compute: {}", e);
                return Err(std::io::Error::new(std::io::ErrorKind::Other, 
                    format!("GPU initialization failed: {}", e)));
            }

            // Update graph data after GPU is initialized
            let mut graph = app_state.graph_service.get_graph_data_mut().await;
            let mut node_map = app_state.graph_service.get_node_map_mut().await;
            *graph = graph_data;
            
            // Update node_map with new graph nodes
            node_map.clear();
            for node in &graph.nodes {
                node_map.insert(node.id.clone(), node.clone());
            }
            
            drop(graph);
            drop(node_map);

            info!("Built initial graph from metadata");
            
        },
        Err(e) => {
            error!("Failed to build initial graph: {}", e);
            return Err(std::io::Error::new(std::io::ErrorKind::Other, format!("Failed to build initial graph: {}", e)));
        }
    }

    // Add a delay to allow GPU computation to run before accepting client connections
    info!("Waiting for initial GPU layout calculation...");
    tokio::time::sleep(Duration::from_millis(500)).await;
    info!("Initial delay complete. Starting HTTP server...");

    // Create web::Data after all initialization is complete
    let app_state_data = web::Data::new(app_state);

    // Start the server
    let bind_address = {
        let settings_read = settings.read().await;
        format!("{}:{}", settings_read.system.network.bind_address, settings_read.system.network.port)
    };

    info!("Starting HTTP server on {}", bind_address);

    HttpServer::new(move || {
        // Configure CORS
        let cors = Cors::default()
            .allow_any_origin()
            .allow_any_method()
            .allow_any_header()
            .max_age(3600)
            .supports_credentials();

        App::new()
            .wrap(middleware::Logger::default())
            .wrap(cors)
            .wrap(middleware::Compress::default())
            .app_data(settings_data.clone())
            .app_data(web::Data::new(github_client.clone()))
            .app_data(web::Data::new(content_api.clone()))
            .app_data(app_state_data.clone())  // Add the complete AppState
            .app_data(app_state_data.nostr_service.clone().unwrap())
            .app_data(app_state_data.feature_access.clone())
            .route("/wss", web::get().to(socket_flow_handler))
            .service(
                web::scope("")
                    .configure(api_handler::config)
                    .service(web::scope("/health").configure(health_handler::config))
                    .service(web::scope("/pages").configure(pages_handler::config))
            )
            .service(Files::new("/", "/app/data/public/dist").index_file("index.html"))
    })
    .bind(&bind_address)?
    .run()
    .await?;

    info!("HTTP server stopped");
    Ok(())
}

----
handlers/health_handler.rs
use actix_web::{web, HttpResponse, Result};
use crate::AppState;

pub async fn health_check(app_state: web::Data<AppState>) -> Result<HttpResponse> {
    let metadata = app_state.metadata.read().await;
    let graph = app_state.graph_service.get_graph_data_mut().await;
    
    Ok(HttpResponse::Ok().json(serde_json::json!({
        "status": "healthy",
        "metadata_count": metadata.len(),
        "nodes_count": graph.nodes.len(),
        "edges_count": graph.edges.len()
    })))
}

pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(
        web::resource("")
            .route(web::get().to(health_check))
    );
} 
----
handlers/pages_handler.rs
use actix_web::{web, HttpResponse, Result};
use crate::AppState;
use serde::Serialize;
use futures::future::join_all;
use crate::models::metadata::Metadata;
use crate::services::github::GitHubFileMetadata;

#[derive(Serialize)]
pub struct PageInfo {
    id: String,
    title: String,
    path: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    parent: Option<String>,
    modified: i64,
}

pub async fn get_pages(app_state: web::Data<AppState>) -> Result<HttpResponse> {
    let settings = app_state.settings.read().await;
    let debug_enabled = settings.system.debug.enabled;
    drop(settings);

    if debug_enabled {
        log::debug!("Starting pages retrieval");
    }

    let metadata = app_state.metadata.read().await;
    if debug_enabled {
        log::debug!("Found {} metadata entries to process", metadata.len());
    }

    let futures: Vec<_> = metadata.iter()
        .map(|(id, meta)| {
            let content_api = app_state.content_api.clone();
            let file_name = meta.file_name.clone();
            let id = id.clone();
            let meta = meta.clone();
            let debug_enabled = debug_enabled;

            async move {
                if debug_enabled {
                    log::debug!("Processing file: {} (ID: {})", file_name, id);
                }

                let github_meta = content_api
                    .list_markdown_files("")  // Empty string since base path is already configured
                    .await;

                match github_meta {
                    Ok(files) => {
                        if debug_enabled {
                            log::debug!("Found {} GitHub files for {}", files.len(), file_name);
                        }

                        let matching_file = files.into_iter()
                            .find(|f| f.name == file_name);

                        if debug_enabled {
                            if let Some(ref file) = matching_file {
                                log::debug!("Found matching GitHub file for {}: {:?}", file_name, file);
                            } else {
                                log::debug!("No matching GitHub file found for {}", file_name);
                            }
                        }

                        Ok((id, meta, matching_file))
                    },
                    Err(e) => {
                        log::error!("Failed to fetch GitHub metadata for {}: {}", file_name, e);
                        Ok((id, meta, None))
                    }
                }
            }
        })
        .collect();
    
    if debug_enabled {
        log::debug!("Created {} futures for parallel processing", futures.len());
    }

    let results = join_all(futures).await;
    
    let pages: Vec<PageInfo> = results.into_iter()
        .filter_map(|result: Result<(String, Metadata, Option<GitHubFileMetadata>), actix_web::Error>| {
            match result {
                Ok((id, meta, github_meta)) => {
                    if debug_enabled {
                        log::debug!("Building page info for {} (ID: {})", meta.file_name, id);
                    }

                    let modified = github_meta
                        .and_then(|gm| gm.last_modified)
                        .map(|dt| dt.timestamp())
                        .unwrap_or_else(|| {
                            if debug_enabled {
                                log::debug!("No modification time found for {}, using 0", meta.file_name);
                            }
                            0
                        });

                    Some(PageInfo {
                        id,
                        title: meta.file_name.clone(),
                        path: format!("/app/data/markdown/{}", meta.file_name),
                        parent: None,
                        modified,
                    })
                },
                Err(e) => {
                    log::error!("Failed to process page: {}", e);
                    None
                }
            }
        })
        .collect();

    if debug_enabled {
        log::debug!("Returning {} processed pages", pages.len());
    }

    Ok(HttpResponse::Ok().json(pages))
}

pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(
        web::resource("")
            .route(web::get().to(get_pages))
    );
} 
----
handlers/mod.rs
pub mod api_handler;
pub mod health_handler;
pub mod pages_handler;
pub mod perplexity_handler;
pub mod ragflow_handler;
pub mod settings_handler;
pub mod socket_flow_handler;
pub mod nostr_handler;

----
handlers/perplexity_handler.rs
use crate::AppState;
use actix_web::{post, web, HttpResponse, Responder};
use serde::{Deserialize, Serialize};
use serde_json::json;
use log::{error, info};

#[derive(Debug, Deserialize)]
pub struct PerplexityRequest {
    pub query: String,
    pub conversation_id: Option<String>,
}

#[derive(Debug, Serialize)]
pub struct PerplexityResponse {
    pub answer: String,
    pub conversation_id: String,
}

#[post("")]
pub async fn handle_perplexity(
    state: web::Data<AppState>,
    request: web::Json<PerplexityRequest>,
) -> impl Responder {
    info!("Received perplexity request: {:?}", request);

    let perplexity_service = match &state.perplexity_service {
        Some(service) => service,
        None => return HttpResponse::ServiceUnavailable().json(json!({
            "error": "Perplexity service is not available"
        }))
    };

    let conversation_id = state.ragflow_conversation_id.clone();
    match perplexity_service.query(&request.query, &conversation_id).await {
        Ok(answer) => {
            let response = PerplexityResponse {
                answer,
                conversation_id,
            };
            HttpResponse::Ok().json(response)
        }
        Err(e) => {
            error!("Error processing perplexity request: {}", e);
            HttpResponse::InternalServerError().json(format!("Error: {}", e))
        }
    }
}

----
handlers/ragflow_handler.rs
use actix_web::{web, HttpResponse, ResponseError, Responder};
use crate::AppState;
use serde::{Serialize, Deserialize};
use log::error;
use serde_json::json;
use futures::StreamExt;
use actix_web::web::Bytes;
use crate::services::ragflow_service::RAGFlowError;

#[derive(Debug, Deserialize)]
pub struct InitChatRequest {
    pub user_id: String,
}

#[derive(Debug, Serialize)]
pub struct InitChatResponse {
    pub success: bool,
    pub conversation_id: String,
    pub message: Option<String>,
}

#[derive(Serialize, Deserialize)]
pub struct SendMessageRequest {
    pub message: String,
    pub quote: Option<bool>,
    pub doc_ids: Option<Vec<String>>,
    pub stream: Option<bool>,
}

// Implement ResponseError for RAGFlowError
impl ResponseError for RAGFlowError {
    fn error_response(&self) -> HttpResponse {
        HttpResponse::InternalServerError()
            .json(json!({"error": self.to_string()}))
    }
}

/// Handler for sending a message to the RAGFlow service.
pub async fn send_message(
    state: web::Data<AppState>,
    request: web::Json<SendMessageRequest>,
) -> impl Responder {
    let ragflow_service = match &state.ragflow_service {
        Some(service) => service,
        None => return HttpResponse::ServiceUnavailable().json(json!({
            "error": "RAGFlow service is not available"
        }))
    };

    let conversation_id = state.ragflow_conversation_id.clone();
    match ragflow_service.send_message(
        conversation_id,
        request.message.clone(),
        request.quote.unwrap_or(false),
        request.doc_ids.clone(),
        request.stream.unwrap_or(false),
    ).await {
        Ok(response_stream) => {
            let mapped_stream = response_stream.map(|result| {
                result.map(|answer| {
                    let json_response = json!({
                        "answer": answer,
                        "success": true
                    });
                    Bytes::from(json_response.to_string())
                })
                .map_err(|e| actix_web::error::ErrorInternalServerError(e))
            });
            HttpResponse::Ok().streaming(mapped_stream)
        },
        Err(e) => {
            error!("Error sending message: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "error": format!("Failed to send message: {}", e)
            }))
        }
    }
}

/// Handler for initiating a new chat conversation.
pub async fn init_chat(
    state: web::Data<AppState>,
    request: web::Json<InitChatRequest>,
) -> impl Responder {
    let user_id = request.user_id.clone();
    let ragflow_service = match &state.ragflow_service {
        Some(service) => service,
        None => return HttpResponse::ServiceUnavailable().json(json!({
            "error": "RAGFlow service is not available"
        }))
    };

    match ragflow_service.create_conversation(user_id.clone()).await {
        Ok(conversation_id) => HttpResponse::Ok().json(InitChatResponse {
            success: true,
            conversation_id,
            message: None,
        }),
        Err(e) => {
            error!("Failed to initialize chat: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "error": format!("Failed to initialize chat: {}", e)
            }))
        }
    }
}

/// Handler for retrieving chat history.
pub async fn get_chat_history(
    _state: web::Data<AppState>,
    _conversation_id: web::Path<String>,
) -> impl Responder {
    HttpResponse::NotImplemented().json(json!({
        "message": "Chat history retrieval is not implemented"
    }))
}

----
handlers/visualization_handler.rs
use crate::config::Settings;
use crate::utils::case_conversion::to_snake_case;
use crate::AppState;
use actix_web::{web, HttpResponse};
use log::{debug, error, info};
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;
use std::fs;
use std::path::PathBuf;
use std::sync::Arc;
use tokio::sync::RwLock;

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SettingResponse {
    pub category: String,
    pub setting: String,
    pub value: Value,
    pub success: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CategorySettingsResponse {
    pub category: String,
    pub settings: HashMap<String, Value>,
    pub success: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct SettingValue {
    pub value: Value,
}

fn get_setting_value(settings: &Settings, category: &str, setting: &str) -> Result<Value, String> {
    debug!(
        "Attempting to get setting value for category: {}, setting: {}",
        category, setting
    );

    // Convert kebab-case URL parameters to snake_case
    let category_snake = to_snake_case(category);
    let setting_snake = to_snake_case(setting);
    debug!(
        "Converted category '{}' to snake_case: '{}'",
        category, category_snake
    );
    debug!(
        "Converted setting '{}' to snake_case: '{}'",
        setting, setting_snake
    );

    // Convert settings to Value for easier access
    let settings_value = match serde_json::to_value(&settings) {
        Ok(v) => {
            debug!("Successfully serialized settings to JSON");
            v
        }
        Err(e) => {
            error!("Failed to serialize settings to JSON: {}", e);
            return Err(format!("Failed to serialize settings: {}", e));
        }
    };

    debug!("Settings JSON structure: {}", settings_value);

    // Handle nested categories
    let parts: Vec<&str> = category_snake.split('.').collect();
    let mut current_value = &settings_value;

    for part in parts {
        current_value = match current_value.get(part) {
            Some(v) => {
                debug!("Found category part '{}' in settings", part);
                v
            }
            None => {
                error!("Category part '{}' not found in settings", part);
                return Err(format!("Category '{}' not found", category));
            }
        };
    }

    // Get setting value using snake_case for internal lookup
    let setting_value = match current_value.get(&setting_snake) {
        Some(v) => {
            debug!(
                "Found setting '{}' in category '{}'",
                setting_snake, category_snake
            );
            v
        }
        None => {
            error!(
                "Setting '{}' not found in category '{}'",
                setting_snake, category_snake
            );
            return Err(format!(
                "Setting '{}' not found in category '{}'",
                setting, category
            ));
        }
    };

    debug!("Found setting value: {:?}", setting_value);
    Ok(setting_value.clone())
}

fn update_setting_value(
    settings: &mut Settings,
    category: &str,
    setting: &str,
    value: &Value,
) -> Result<(), String> {
    debug!(
        "Attempting to update setting value for category: {}, setting: {}",
        category, setting
    );

    // Convert kebab-case URL parameters to snake_case
    let category_snake = to_snake_case(category);
    let setting_snake = to_snake_case(setting);
    debug!(
        "Converted category '{}' to snake_case: '{}'",
        category, category_snake
    );
    debug!(
        "Converted setting '{}' to snake_case: '{}'",
        setting, setting_snake
    );

    // Convert settings to Value for manipulation
    let mut settings_value = match serde_json::to_value(&*settings) {
        Ok(v) => {
            debug!("Successfully serialized settings to JSON");
            v
        }
        Err(e) => {
            error!("Failed to serialize settings to JSON: {}", e);
            return Err(format!("Failed to serialize settings: {}", e));
        }
    };

    debug!("Settings JSON structure: {}", settings_value);

    // Handle nested categories
    let parts: Vec<&str> = category_snake.split('.').collect();
    let mut current_value = &mut settings_value;

    for part in parts {
        current_value = match current_value.get_mut(part) {
            Some(v) => {
                debug!("Found category part '{}' in settings", part);
                v
            }
            None => {
                error!("Category part '{}' not found in settings", part);
                return Err(format!("Category '{}' not found", category));
            }
        };
    }

    // Update setting value
    if let Some(obj) = current_value.as_object_mut() {
        obj.insert(setting_snake.to_string(), value.clone());
        debug!("Updated setting value successfully");

        // Convert back to Settings
        match serde_json::from_value(settings_value) {
            Ok(new_settings) => {
                debug!("Successfully converted updated JSON back to Settings");
                *settings = new_settings;
                Ok(())
            }
            Err(e) => {
                error!("Failed to convert JSON back to Settings: {}", e);
                Err(format!("Failed to deserialize settings: {}", e))
            }
        }
    } else {
        error!("Category '{}' is not an object", category_snake);
        Err(format!("Category '{}' is not an object", category))
    }
}

fn get_category_settings_value(settings: &Settings, category: &str) -> Result<Value, String> {
    debug!("Getting settings for category: {}", category);
    let value = match category {
        "visualization.nodes" => serde_json::to_value(&settings.visualization.nodes)
            .map_err(|e| format!("Failed to serialize node settings: {}", e))?,
        "visualization.edges" => serde_json::to_value(&settings.visualization.edges)
            .map_err(|e| format!("Failed to serialize edge settings: {}", e))?,
        "visualization.rendering" => serde_json::to_value(&settings.visualization.rendering)
            .map_err(|e| format!("Failed to serialize rendering settings: {}", e))?,
        "visualization.labels" => serde_json::to_value(&settings.visualization.labels)
            .map_err(|e| format!("Failed to serialize labels settings: {}", e))?,
        "visualization.bloom" => serde_json::to_value(&settings.visualization.bloom)
            .map_err(|e| format!("Failed to serialize bloom settings: {}", e))?,
        "visualization.animations" => serde_json::to_value(&settings.visualization.animations)
            .map_err(|e| format!("Failed to serialize animations settings: {}", e))?,
        "visualization.physics" => serde_json::to_value(&settings.visualization.physics)
            .map_err(|e| format!("Failed to serialize physics settings: {}", e))?,
        "visualization.hologram" => serde_json::to_value(&settings.visualization.hologram)
            .map_err(|e| format!("Failed to serialize hologram settings: {}", e))?,
        "system.network" => serde_json::to_value(&settings.system.network)
            .map_err(|e| format!("Failed to serialize network settings: {}", e))?,
        "system.websocket" => serde_json::to_value(&settings.system.websocket)
            .map_err(|e| format!("Failed to serialize websocket settings: {}", e))?,
        "system.security" => serde_json::to_value(&settings.system.security)
            .map_err(|e| format!("Failed to serialize security settings: {}", e))?,
        "system.debug" => serde_json::to_value(&settings.system.debug)
            .map_err(|e| format!("Failed to serialize debug settings: {}", e))?,
        "xr" => serde_json::to_value(&settings.xr)
            .map_err(|e| format!("Failed to serialize xr settings: {}", e))?,
        "github" => serde_json::to_value(&settings.github)
            .map_err(|e| format!("Failed to serialize github settings: {}", e))?,
        "ragflow" => serde_json::to_value(&settings.ragflow)
            .map_err(|e| format!("Failed to serialize ragflow settings: {}", e))?,
        "perplexity" => serde_json::to_value(&settings.perplexity)
            .map_err(|e| format!("Failed to serialize perplexity settings: {}", e))?,
        "openai" => serde_json::to_value(&settings.openai)
            .map_err(|e| format!("Failed to serialize openai settings: {}", e))?,
        _ => return Err(format!("Invalid category: {}", category)),
    };
    debug!("Successfully retrieved settings for category: {}", category);
    Ok(value)
}

pub async fn get_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<(String, String)>,
) -> HttpResponse {
    let (category, setting) = path.into_inner();
    info!(
        "Getting setting for category: {}, setting: {}",
        category, setting
    );

    let settings_guard = match settings.read().await {
        guard => {
            debug!("Successfully acquired settings read lock");
            guard
        }
    };

    match get_setting_value(&*settings_guard, &category, &setting) {
        Ok(value) => {
            debug!("Successfully retrieved setting value: {:?}", value);
            HttpResponse::Ok().json(SettingResponse {
                category,
                setting,
                value,
                success: true,
                error: None,
            })
        }
        Err(e) => {
            error!("Failed to get setting value: {}", e);
            HttpResponse::BadRequest().json(SettingResponse {
                category,
                setting,
                value: Value::Null,
                success: false,
                error: Some(e),
            })
        }
    }
}

pub async fn update_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<(String, String)>,
    value: web::Json<Value>,
) -> HttpResponse {
    let (category, setting) = path.into_inner();
    info!(
        "Updating setting for category: {}, setting: {}",
        category, setting
    );

    let mut settings_guard = match settings.write().await {
        guard => {
            debug!("Successfully acquired settings write lock");
            guard
        }
    };

    match update_setting_value(&mut *settings_guard, &category, &setting, &value) {
        Ok(_) => {
            if let Err(e) = save_settings_to_file(&*settings_guard) {
                error!("Failed to save settings to file: {}", e);
                return HttpResponse::InternalServerError().json(SettingResponse {
                    category,
                    setting,
                    value: value.into_inner(),
                    success: false,
                    error: Some("Failed to persist settings".to_string()),
                });
            }
            HttpResponse::Ok().json(SettingResponse {
                category,
                setting,
                value: value.into_inner(),
                success: true,
                error: None,
            })
        }
        Err(e) => {
            error!("Failed to update setting value: {}", e);
            HttpResponse::BadRequest().json(SettingResponse {
                category,
                setting,
                value: value.into_inner(),
                success: false,
                error: Some(e),
            })
        }
    }
}

pub async fn get_category_settings(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<String>,
) -> HttpResponse {
    let settings_read = settings.read().await;
    let debug_enabled = settings_read.system.debug.enabled;
    let log_json = debug_enabled && settings_read.system.debug.log_full_json;

    let category = path.into_inner();
    match get_category_settings_value(&settings_read, &category) {
        Ok(value) => {
            if log_json {
                debug!(
                    "Category '{}' settings: {}",
                    category,
                    serde_json::to_string_pretty(&value).unwrap_or_default()
                );
            }
            let settings_map: HashMap<String, Value> = value
                .as_object()
                .map(|m| m.iter().map(|(k, v)| (k.clone(), v.clone())).collect())
                .unwrap_or_default();

            HttpResponse::Ok().json(CategorySettingsResponse {
                category: category.clone(),
                settings: settings_map,
                success: true,
                error: None,
            })
        }
        Err(e) => {
            error!("Failed to get category settings for '{}': {}", category, e);
            HttpResponse::NotFound().json(CategorySettingsResponse {
                category: category.clone(),
                settings: HashMap::new(),
                success: false,
                error: Some(e),
            })
        }
    }
}

pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.route("/settings/{category}/{setting}", web::get().to(get_setting))
        .route(
            "/settings/{category}/{setting}",
            web::put().to(update_setting),
        )
        .route("/settings/{category}", web::get().to(get_category_settings));
}

fn save_settings_to_file(settings: &Settings) -> std::io::Result<()> {
    debug!("Attempting to save settings to file");

    let settings_path = std::env::var("SETTINGS_FILE_PATH")
        .map(PathBuf::from)
        .unwrap_or_else(|_| PathBuf::from("/app/settings.yaml"));

    info!("Attempting to save settings to: {:?}", settings_path);

    if let Some(parent) = settings_path.parent() {
        match fs::create_dir_all(parent) {
            Ok(_) => debug!("Created parent directories: {:?}", parent),
            Err(e) => {
                error!("Failed to create parent directories: {}", e);
                return Err(e);
            }
        }
    }

    if settings_path.exists() {
        match fs::metadata(&settings_path) {
            Ok(metadata) => {
                if metadata.permissions().readonly() {
                    error!("Settings file is read-only: {:?}", settings_path);
                    return Err(std::io::Error::new(
                        std::io::ErrorKind::PermissionDenied,
                        "Settings file is read-only",
                    ));
                }
            }
            Err(e) => {
                error!("Failed to check settings file permissions: {}", e);
                return Err(e);
            }
        }
    }

    let yaml_string = match serde_yaml::to_string(&settings) {
        Ok(s) => s,
        Err(e) => {
            error!("Failed to serialize settings to YAML: {}", e);
            return Err(std::io::Error::new(std::io::ErrorKind::Other, e));
        }
    };

    match fs::write(&settings_path, yaml_string) {
        Ok(_) => {
            info!("Settings saved successfully to: {:?}", settings_path);
            Ok(())
        }
        Err(e) => {
            error!("Failed to write settings file: {}", e);
            Err(e)
        }
    }
}

pub async fn get_visualization_settings(
    app_state: web::Data<AppState>,
    category: web::Path<String>,
) -> Result<HttpResponse, actix_web::Error> {
    debug!("Getting settings for category: {}", category);

    if category.as_str() == "clientDebug" {
        debug!("Checking UI container status for debugging");
    }

    let settings = app_state.settings.read().await;
    Ok(HttpResponse::Ok().json(&*settings))
}

----
handlers/nostr_handler.rs
use crate::app_state::AppState;
use crate::models::protected_settings::{NostrUser, ApiKeys};
use crate::services::nostr_service::{NostrService, AuthEvent, NostrError};
use crate::config::feature_access::FeatureAccess;
use actix_web::{web, Error, HttpRequest, HttpResponse};
use serde::{Deserialize, Serialize};
use serde_json::json;

#[derive(Debug, Serialize)]
pub struct AuthResponse {
    pub user: NostrUser,
    pub token: String,
    pub expires_at: i64,
    pub features: Vec<String>,
}

#[derive(Debug, Serialize)]
pub struct VerifyResponse {
    pub valid: bool,
    pub user: Option<NostrUser>,
    pub features: Vec<String>,
}

#[derive(Debug, Deserialize)]
pub struct ApiKeysRequest {
    pub perplexity: Option<String>,
    pub openai: Option<String>,
    pub ragflow: Option<String>,
}

#[derive(Debug, Deserialize)]
pub struct ValidateRequest {
    pub pubkey: String,
    pub token: String,
}

pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(
        web::scope("/auth/nostr")  // Now mounted under /api/auth/nostr due to API handler configuration
            .route("", web::post().to(login))
            .route("", web::delete().to(logout))
            .route("/verify", web::post().to(verify))
            .route("/refresh", web::post().to(refresh))
            .route("/api-keys", web::post().to(update_api_keys))
            .route("/api-keys", web::get().to(get_api_keys))
            .route("/power-user-status", web::get().to(check_power_user_status))
            .route("/features", web::get().to(get_available_features))
            .route("/features/{feature}", web::get().to(check_feature_access))
    );
}

async fn check_power_user_status(
    req: HttpRequest,
    feature_access: web::Data<FeatureAccess>,
) -> Result<HttpResponse, Error> {
    let pubkey = req.headers()
        .get("X-Nostr-Pubkey")
        .and_then(|h| h.to_str().ok())
        .unwrap_or("");

    if pubkey.is_empty() {
        return Ok(HttpResponse::BadRequest().json(json!({
            "error": "Missing Nostr pubkey"
        })));
    }

    Ok(HttpResponse::Ok().json(json!({
        "is_power_user": feature_access.is_power_user(pubkey)
    })))
}

async fn get_available_features(
    req: HttpRequest,
    feature_access: web::Data<FeatureAccess>,
) -> Result<HttpResponse, Error> {
    let pubkey = req.headers()
        .get("X-Nostr-Pubkey")
        .and_then(|h| h.to_str().ok())
        .unwrap_or("");

    if pubkey.is_empty() {
        return Ok(HttpResponse::BadRequest().json(json!({
            "error": "Missing Nostr pubkey"
        })));
    }

    let features = feature_access.get_available_features(pubkey);
    Ok(HttpResponse::Ok().json(json!({
        "features": features
    })))
}

async fn check_feature_access(
    req: HttpRequest,
    feature_access: web::Data<FeatureAccess>,
    feature: web::Path<String>,
) -> Result<HttpResponse, Error> {
    let pubkey = req.headers()
        .get("X-Nostr-Pubkey")
        .and_then(|h| h.to_str().ok())
        .unwrap_or("");

    if pubkey.is_empty() {
        return Ok(HttpResponse::BadRequest().json(json!({
            "error": "Missing Nostr pubkey"
        })));
    }

    Ok(HttpResponse::Ok().json(json!({
        "has_access": feature_access.has_feature_access(pubkey, &feature)
    })))
}

async fn login(
    event: web::Json<AuthEvent>,
    nostr_service: web::Data<NostrService>,
    feature_access: web::Data<FeatureAccess>,
) -> Result<HttpResponse, Error> {
    match nostr_service.verify_auth_event(event.into_inner()).await {
        Ok(user) => {
            let token = user.session_token.clone().unwrap_or_default();
            let expires_at = user.last_seen + std::env::var("AUTH_TOKEN_EXPIRY")
                .unwrap_or_else(|_| "3600".to_string())
                .parse::<i64>()
                .unwrap_or(3600);

            // Get available features for the user
            let features = feature_access.get_available_features(&user.pubkey);

            Ok(HttpResponse::Ok().json(AuthResponse {
                user,
                token,
                expires_at,
                features,
            }))
        }
        Err(NostrError::InvalidSignature) => {
            Ok(HttpResponse::Unauthorized().json(json!({
                "error": "Invalid signature"
            })))
        }
        Err(e) => {
            Ok(HttpResponse::InternalServerError().json(json!({
                "error": format!("Authentication error: {}", e)
            })))
        }
    }
}

async fn logout(
    req: web::Json<ValidateRequest>,
    nostr_service: web::Data<NostrService>,
) -> Result<HttpResponse, Error> {
    // Validate session before logout
    if !nostr_service.validate_session(&req.pubkey, &req.token).await {
        return Ok(HttpResponse::Unauthorized().json(json!({
            "error": "Invalid session"
        })));
    }

    match nostr_service.logout(&req.pubkey).await {
        Ok(_) => Ok(HttpResponse::Ok().json(json!({
            "message": "Logged out successfully"
        }))),
        Err(e) => Ok(HttpResponse::InternalServerError().json(json!({
            "error": format!("Logout error: {}", e)
        }))),
    }
}

async fn verify(
    req: web::Json<ValidateRequest>,
    nostr_service: web::Data<NostrService>,
    feature_access: web::Data<FeatureAccess>,
) -> Result<HttpResponse, Error> {
    let is_valid = nostr_service.validate_session(&req.pubkey, &req.token).await;
    let user = if is_valid {
        nostr_service.get_user(&req.pubkey).await
    } else {
        None
    };

    // Get available features if session is valid
    let features = if is_valid {
        feature_access.get_available_features(&req.pubkey)
    } else {
        Vec::new()
    };

    Ok(HttpResponse::Ok().json(VerifyResponse {
        valid: is_valid,
        user,
        features,
    }))
}

async fn refresh(
    req: web::Json<ValidateRequest>,
    nostr_service: web::Data<NostrService>,
    feature_access: web::Data<FeatureAccess>,
) -> Result<HttpResponse, Error> {
    // First validate the current session
    if !nostr_service.validate_session(&req.pubkey, &req.token).await {
        return Ok(HttpResponse::Unauthorized().json(json!({
            "error": "Invalid session"
        })));
    }

    match nostr_service.refresh_session(&req.pubkey).await {
        Ok(new_token) => {
            if let Some(user) = nostr_service.get_user(&req.pubkey).await {
                let expires_at = user.last_seen + std::env::var("AUTH_TOKEN_EXPIRY")
                    .unwrap_or_else(|_| "3600".to_string())
                    .parse::<i64>()
                    .unwrap_or(3600);
// Get available features for the refreshed session
let features = feature_access.get_available_features(&req.pubkey);

Ok(HttpResponse::Ok().json(AuthResponse {
    user,
    token: new_token,
    expires_at,
    features,
}))
} else {
                Ok(HttpResponse::InternalServerError().json(json!({
                    "error": "User not found after refresh"
                })))
            }
        }
        Err(e) => Ok(HttpResponse::InternalServerError().json(json!({
            "error": format!("Session refresh error: {}", e)
        }))),
    }
}

async fn update_api_keys(
    req: web::Json<ApiKeysRequest>,
    nostr_service: web::Data<NostrService>,
    pubkey: web::Path<String>,
) -> Result<HttpResponse, Error> {
    let api_keys = ApiKeys {
        perplexity: req.perplexity.clone(),
        openai: req.openai.clone(),
        ragflow: req.ragflow.clone(),
    };

    match nostr_service.update_user_api_keys(&pubkey, api_keys).await {
        Ok(user) => Ok(HttpResponse::Ok().json(user)),
        Err(NostrError::UserNotFound) => {
            Ok(HttpResponse::NotFound().json(json!({
                "error": "User not found"
            })))
        }
        Err(NostrError::PowerUserOperation) => {
            Ok(HttpResponse::Forbidden().json(json!({
                "error": "Cannot update API keys for power users"
            })))
        }
        Err(e) => {
            Ok(HttpResponse::InternalServerError().json(json!({
                "error": format!("Failed to update API keys: {}", e)
            })))
        }
    }
}

async fn get_api_keys(
    state: web::Data<AppState>,
    pubkey: web::Path<String>,
) -> Result<HttpResponse, Error> {
    let protected_settings = state.protected_settings.read().await;
    let api_keys = protected_settings.get_api_keys(&pubkey);
    
    Ok(HttpResponse::Ok().json(api_keys))
}

// Add the handler to app_state initialization
pub fn init_nostr_service(app_state: &mut AppState) {
    let nostr_service = NostrService::new();
    
    // Start session cleanup task
    let service_clone = nostr_service.clone();
    tokio::spawn(async move {
        let mut interval = tokio::time::interval(tokio::time::Duration::from_secs(3600)); // Every hour
        loop {
            interval.tick().await;
            service_clone.cleanup_sessions(24).await; // Clean up sessions older than 24 hours
        }
    });

    app_state.nostr_service = Some(web::Data::new(nostr_service));
}
----
handlers/settings_handler.rs
use crate::app_state::AppState;
use crate::models::{UISettings, UserSettings};
use actix_web::{web, Error, HttpResponse, HttpRequest};
use chrono::Utc;
use serde_json::Value;
use crate::config::feature_access::FeatureAccess;
use log::{info, error, warn, debug};
use std::time::Instant;

// Add a new endpoint to clear the settings cache for a user
async fn clear_user_settings_cache(
    req: HttpRequest,
    feature_access: web::Data<FeatureAccess>
) -> Result<HttpResponse, Error> {
    // Get pubkey from header
    let pubkey = match req.headers().get("X-Nostr-Pubkey") {
        Some(value) => value.to_str().unwrap_or("").to_string(),
        None => {
            warn!("Missing Nostr pubkey in request headers");
            return Ok(HttpResponse::BadRequest().body("Missing Nostr pubkey"));
        }
    };
    
    // Check if user has permission
    if !feature_access.can_sync_settings(&pubkey) {
        warn!("User {} attempted to clear settings cache without permission", pubkey);
        return Ok(HttpResponse::Forbidden().body("Settings sync not enabled for this user"));
    }
    
    UserSettings::clear_cache(&pubkey);
    info!("Cleared settings cache for user {}", pubkey);
    
    Ok(HttpResponse::Ok().json(serde_json::json!({
        "status": "success",
        "message": "Settings cache cleared"
    })))
}

// Add a new endpoint for admin to clear all settings caches
async fn clear_all_settings_cache(
    req: HttpRequest,
    feature_access: web::Data<FeatureAccess>
) -> Result<HttpResponse, Error> {
    // Get pubkey from header
    let pubkey = match req.headers().get("X-Nostr-Pubkey") {
        Some(value) => value.to_str().unwrap_or("").to_string(),
        None => {
            warn!("Missing Nostr pubkey in request headers");
            return Ok(HttpResponse::BadRequest().body("Missing Nostr pubkey"));
        }
    };
    
    // Only power users can clear all caches
    if !feature_access.is_power_user(&pubkey) {
        warn!("Non-power user {} attempted to clear all settings caches", pubkey);
        return Ok(HttpResponse::Forbidden().body("Only power users can clear all settings caches"));
    }
    
    UserSettings::clear_all_cache();
    info!("Power user {} cleared all settings caches", pubkey);
    
    Ok(HttpResponse::Ok().json(serde_json::json!({
        "status": "success",
        "message": "All settings caches cleared"
    })))
}

pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(
        web::resource("/user-settings")
            .route(web::get().to(get_public_settings))
            .route(web::post().to(update_settings))
    ).service(
        web::resource("/user-settings/sync")
            .route(web::get().to(get_user_settings))
            .route(web::post().to(update_user_settings))
    ).service(
        web::resource("/user-settings/clear-cache")
            .route(web::post().to(clear_user_settings_cache))
    ).service(
        web::resource("/admin/settings/clear-all-cache")
            .route(web::post().to(clear_all_settings_cache))
    );
}

pub async fn get_public_settings(state: web::Data<AppState>) -> Result<HttpResponse, Error> {
    let settings_guard = state.settings.read().await;
    
    // Convert to UI settings
    let ui_settings = UISettings::from(&*settings_guard);
    
    Ok(HttpResponse::Ok().json(&ui_settings))
}

async fn get_user_settings(
    req: HttpRequest,
    state: web::Data<AppState>,
    feature_access: web::Data<FeatureAccess>
) -> Result<HttpResponse, Error> {
    let start_time = Instant::now();
    
    // Get pubkey from header
    let pubkey = match req.headers().get("X-Nostr-Pubkey") {
        Some(value) => value.to_str().unwrap_or("").to_string(),
        None => {
            warn!("Missing Nostr pubkey in request headers");
            return Ok(HttpResponse::BadRequest().body("Missing Nostr pubkey"));
        }
    };
    
    debug!("Processing settings request for user: {}", pubkey);
    
    // Check if user has permission using FeatureAccess
    if !feature_access.can_sync_settings(&pubkey) {
        warn!("User {} attempted to sync settings without permission", pubkey);
        return Ok(HttpResponse::Forbidden().body("Settings sync not enabled for this user"));
    }

    let is_power_user = feature_access.is_power_user(&pubkey);
    let result;

    if is_power_user {
        // Power users get settings from the global settings file
        let settings_guard = state.settings.read().await;
        let ui_settings = UISettings::from(&*settings_guard);
        debug!("Returning global settings for power user {}", pubkey);
        result = Ok(HttpResponse::Ok().json(ui_settings));
    } else {
        // Regular users get their personal settings or defaults
        // This will use the cache if available due to our UserSettings::load implementation
        let user_settings = UserSettings::load(&pubkey).unwrap_or_else(|| {
            debug!("Creating new user settings for {} with default settings", pubkey);
            UserSettings::new(&pubkey, UISettings::default())
        });
        result = Ok(HttpResponse::Ok().json(&user_settings.settings));
    }
    
    // Log the time taken to process this request
    let elapsed = start_time.elapsed();
    debug!("Settings request for {} processed in {:?}", pubkey, elapsed);
    
    result
}

async fn update_user_settings(
    req: HttpRequest,
    state: web::Data<AppState>,
    feature_access: web::Data<FeatureAccess>,
    payload: web::Json<Value>,
) -> Result<HttpResponse, Error> {
    let start_time = Instant::now();
    
    // Get pubkey from header
    let pubkey = match req.headers().get("X-Nostr-Pubkey") {
        Some(value) => value.to_str().unwrap_or("").to_string(),
        None => {
            debug!("No Nostr pubkey in headers, returning default settings");
            let settings_guard = state.settings.read().await;
            let ui_settings = UISettings::from(&*settings_guard);
            return Ok(HttpResponse::Ok().json(ui_settings));
        }
    };
    
    debug!("Processing settings update for user: {}", pubkey);

    // Check if user has permission to sync settings
    if !feature_access.can_sync_settings(&pubkey) {
        warn!("User {} attempted to sync settings without permission", pubkey);
        return Ok(HttpResponse::Forbidden().body("Settings sync not enabled for this user"));
    }

    // Parse and validate settings
    let ui_settings: UISettings = match serde_json::from_value(payload.into_inner()) {
        Ok(settings) => settings,
        Err(e) => return Ok(HttpResponse::BadRequest().body(format!("Invalid settings format: {}", e)))
    };

    // Check if user is a power user
    let is_power_user = feature_access.is_power_user(&pubkey);
    let result;

    if is_power_user {
        // Power users update the global settings file
        let mut settings_guard = state.settings.write().await;
        ui_settings.merge_into_settings(&mut settings_guard);
        
        if let Err(e) = settings_guard.save() {
            error!("Failed to save global settings: {}", e);
            return Ok(HttpResponse::InternalServerError().body(format!("Failed to save settings: {}", e)));
        }
        
        info!("Power user {} updated global settings", pubkey);
        let updated_ui_settings = UISettings::from(&*settings_guard);
        result = Ok(HttpResponse::Ok().json(updated_ui_settings));
    } else {
        // Regular users update their personal settings file
        // This will use the cache if available due to our UserSettings::load implementation
        let mut user_settings = UserSettings::load(&pubkey).unwrap_or_else(|| {
            debug!("Creating new user settings for {}", pubkey);
            UserSettings::new(&pubkey, UISettings::default())
        });
        user_settings.settings = ui_settings;
        user_settings.last_modified = Utc::now().timestamp();
        
        // This will update the cache immediately and save to disk in the background
        if let Err(e) = user_settings.save() {
            error!("Failed to save user settings for {}: {}", pubkey, e);
            return Ok(HttpResponse::InternalServerError().body(format!("Failed to save user settings: {}", e)));
        }
        
        debug!("User {} updated their settings", pubkey);
        result = Ok(HttpResponse::Ok().json(&user_settings.settings));
    }
    
    // Log the time taken to process this request
    let elapsed = start_time.elapsed();
    debug!("Settings update for {} processed in {:?}", pubkey, elapsed);
    
    result
}

async fn update_settings(
    req: HttpRequest,
    state: web::Data<AppState>,
    feature_access: web::Data<FeatureAccess>,
    payload: web::Json<Value>,
) -> Result<HttpResponse, Error> {
    // Get pubkey from header
    let pubkey = match req.headers().get("X-Nostr-Pubkey") {
        Some(value) => value.to_str().unwrap_or("").to_string(),
        None => {
            warn!("Attempt to update settings without authentication");
            // For updates, we do require authentication
            // This prevents unauthenticated users from modifying settings
            // They can still read public settings via get endpoints
            return Ok(HttpResponse::BadRequest().body("Missing Nostr pubkey"));
        }
    };

    // Check if user is a power user
    let is_power_user = feature_access.is_power_user(&pubkey);

    if !is_power_user {
        warn!("Non-power user {} attempted to modify global settings", pubkey);
        return Ok(HttpResponse::Forbidden().body("Only power users can modify global settings"));
    }

    // Parse and validate settings
    let ui_settings: UISettings = match serde_json::from_value(payload.into_inner()) {
        Ok(settings) => settings,
        Err(e) => return Ok(HttpResponse::BadRequest().body(format!("Invalid settings format: {}", e)))
    };

    let mut settings_guard = state.settings.write().await;
    ui_settings.merge_into_settings(&mut settings_guard);
    
    if let Err(e) = settings_guard.save() {
        error!("Failed to save global settings: {}", e);
        return Ok(HttpResponse::InternalServerError().body(format!("Failed to save settings: {}", e)));
    }
    
    info!("Power user {} updated global settings", pubkey);
    let updated_ui_settings = UISettings::from(&*settings_guard);
    Ok(HttpResponse::Ok().json(updated_ui_settings))
}

pub async fn get_graph_settings(app_state: web::Data<AppState>) -> Result<HttpResponse, Error> {
    let settings = app_state.settings.read().await;
    let ui_settings = UISettings::from(&*settings);
    Ok(HttpResponse::Ok().json(&ui_settings.visualization))
}

----
handlers/file_handler.rs
use actix_web::{web, Error as ActixError, HttpResponse};
use serde_json::json;
use log::{info, debug, error};

use crate::AppState;
use crate::services::file_service::{FileService, MARKDOWN_DIR};
use crate::services::graph_service::GraphService;

pub async fn fetch_and_process_files(state: web::Data<AppState>) -> HttpResponse {
    info!("Initiating optimized file fetch and processing");

    // Load or create metadata
    let mut metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load or create metadata: {}", e);
            return HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to initialize metadata: {}", e)
            }));
        }
    };
    
    // Create FileService instance
    let file_service = FileService::new(state.settings.clone());
    
    // Process files with optimized approach
    match file_service.fetch_and_process_files(&state.content_api, state.settings.clone(), &mut metadata_store).await {
        Ok(processed_files) => {
            let file_names: Vec<String> = processed_files.iter()
                .map(|pf| pf.file_name.clone())
                .collect();

            info!("Successfully processed {} public markdown files", processed_files.len());

            // Update metadata store
            {
                let mut metadata = state.metadata.write().await;
                for processed_file in &processed_files {
                    metadata_store.insert(processed_file.file_name.clone(), processed_file.metadata.clone());
                    debug!("Updated metadata for: {}", processed_file.file_name);
                }
                *metadata = metadata_store.clone();
            }

            // Save the updated metadata
            if let Err(e) = FileService::save_metadata(&metadata_store) {
                error!("Failed to save metadata: {}", e);
                return HttpResponse::InternalServerError().json(json!({
                    "status": "error",
                    "message": format!("Failed to save metadata: {}", e)
                }));
            }

            // Update graph with processed files
            match GraphService::build_graph(&state).await {
                Ok(graph_data) => {
                    let mut graph = state.graph_service.graph_data.write().await;
                    *graph = graph_data.clone();
                    info!("Graph data structure updated successfully");

                    // Send binary position update to clients
                    if let Some(gpu) = &state.gpu_compute {
                        if let Ok(_nodes) = gpu.read().await.get_node_data() {
                            debug!("GPU node positions updated successfully");
                        } else {
                            error!("Failed to get node positions from GPU");
                        }
                    }

                    HttpResponse::Ok().json(json!({
                        "status": "success",
                        "processed_files": file_names
                    }))
                },
                Err(e) => {
                    error!("Failed to build graph data: {}", e);
                    HttpResponse::InternalServerError().json(json!({
                        "status": "error",
                        "message": format!("Failed to build graph data: {}", e)
                    }))
                }
            }
        },
        Err(e) => {
            error!("Error processing files: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Error processing files: {}", e)
            }))
        }
    }
}

pub async fn get_file_content(_state: web::Data<AppState>, file_name: web::Path<String>) -> HttpResponse {
    // Read file directly from disk
    let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
    match std::fs::read_to_string(&file_path) {
        Ok(content) => HttpResponse::Ok().body(content),
        Err(e) => {
            error!("Failed to read file {}: {}", file_name, e);
            HttpResponse::NotFound().json(json!({
                "status": "error",
                "message": format!("File not found or unreadable: {}", file_name)
            }))
        }
    }
}

pub async fn refresh_graph(state: web::Data<AppState>) -> HttpResponse {
    info!("Manually triggering graph refresh");

    // Load metadata from file
    let metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to load metadata: {}", e)
            }));
        }
    };

    // Build graph directly from metadata
    match GraphService::build_graph_from_metadata(&metadata_store).await {
        Ok(graph_data) => {
            let mut graph = state.graph_service.graph_data.write().await;
            *graph = graph_data.clone();
            info!("Graph data structure refreshed successfully");

            // Send binary position update to clients
            if let Some(gpu) = &state.gpu_compute {
                if let Ok(_nodes) = gpu.read().await.get_node_data() {
                    // Note: Socket-flow server will handle broadcasting
                    debug!("GPU node positions updated successfully");
                } else {
                    error!("Failed to get node positions from GPU");
                }
            }

            HttpResponse::Ok().json(json!({
                "status": "success",
                "message": "Graph refreshed successfully"
            }))
        },
        Err(e) => {
            error!("Failed to refresh graph data: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to refresh graph data: {}", e)
            }))
        }
    }
}

pub async fn update_graph(state: web::Data<AppState>) -> Result<HttpResponse, ActixError> {
    // Load metadata from file
    let metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return Ok(HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to load metadata: {}", e)
            })));
        }
    };

    // Build graph directly from metadata
    match GraphService::build_graph_from_metadata(&metadata_store).await {
        Ok(graph) => {
            // Update graph data
            *state.graph_service.graph_data.write().await = graph.clone();
            
            // Send binary position update to clients
            if let Some(gpu) = &state.gpu_compute {
                if let Ok(_nodes) = gpu.read().await.get_node_data() {
                    // Note: Socket-flow server will handle broadcasting
                    debug!("GPU node positions updated successfully");
                } else {
                    error!("Failed to get node positions from GPU");
                }
            }
            
            Ok(HttpResponse::Ok().json(json!({
                "status": "success",
                "message": "Graph updated successfully"
            })))
        },
        Err(e) => {
            error!("Failed to build graph: {}", e);
            Ok(HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to build graph: {}", e)
            })))
        }
    }
}

----
handlers/graph_handler.rs
use actix_web::{web, HttpResponse, Responder};
use crate::AppState;
use serde::{Serialize, Deserialize};
use log::{info, debug, error, warn};
use std::collections::HashMap;
use std::sync::Arc;
use crate::models::metadata::Metadata;
use crate::utils::socket_flow_messages::Node;
use crate::services::file_service::FileService;
use crate::services::graph_service::GraphService;

#[derive(Serialize)]
#[serde(rename_all = "camelCase")]
pub struct GraphResponse {
    pub nodes: Vec<Node>,
    pub edges: Vec<crate::models::edge::Edge>,
    pub metadata: HashMap<String, Metadata>,
}

#[derive(Serialize)]
#[serde(rename_all = "camelCase")]
pub struct PaginatedGraphResponse {
    pub nodes: Vec<Node>,
    pub edges: Vec<crate::models::edge::Edge>,
    pub metadata: HashMap<String, Metadata>,
    pub total_pages: usize,
    pub current_page: usize,
    pub total_items: usize,
    pub page_size: usize,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GraphQuery {
    pub query: Option<String>,
    pub page: Option<usize>,
    #[serde(rename = "pageSize")]
    pub page_size: Option<usize>,
    pub sort: Option<String>,
    pub filter: Option<String>,
}

pub async fn get_graph_data(state: web::Data<AppState>) -> impl Responder {
    info!("Received request for graph data");
    
    // Make sure the GPU layout is calculated before sending data
    if let Some(gpu_compute) = &state.graph_service.get_gpu_compute().await {
        let mut graph = state.graph_service.get_graph_data_mut().await;
        let mut node_map = state.graph_service.get_node_map_mut().await;
        
        // Get physics settings
        let settings = state.settings.read().await;
        let physics_settings = settings.visualization.physics.clone();
        
        // Create simulation parameters
        let params = crate::models::simulation_params::SimulationParams {
            iterations: physics_settings.iterations,
            spring_strength: physics_settings.spring_strength,
            repulsion: physics_settings.repulsion_strength,
            damping: physics_settings.damping,
            max_repulsion_distance: physics_settings.repulsion_distance,
            viewport_bounds: physics_settings.bounds_size,
            mass_scale: physics_settings.mass_scale,
            boundary_damping: physics_settings.boundary_damping,
            enable_bounds: physics_settings.enable_bounds,
            time_step: 0.016,
            phase: crate::models::simulation_params::SimulationPhase::Dynamic,
            mode: crate::models::simulation_params::SimulationMode::Remote,
        };
        
        // Calculate graph layout using GPU
        info!("Processing graph layout with GPU before sending to client");
        if let Err(e) = crate::services::graph_service::GraphService::calculate_layout(
            gpu_compute, &mut graph, &mut node_map, &params
        ).await {
            warn!("Error calculating graph layout: {}", e);
        }
        
        // Drop locks
        drop(graph);
        drop(node_map);
    } else {
        info!("GPU compute not available, sending graph without GPU processing");
    }
    
    let graph = state.graph_service.get_graph_data_mut().await;
    
    // Log position data to debug zero positions
    if !graph.nodes.is_empty() {
        // Log a few nodes for debugging
        for (i, node) in graph.nodes.iter().take(5).enumerate() {
            debug!("Node {}: id={}, label={}, pos=[{:.3},{:.3},{:.3}]", 
                i, node.id, node.label, node.data.position[0], node.data.position[1], node.data.position[2]);
        }
    }
    
    // Log edge data
    if !graph.edges.is_empty() {
        for (i, edge) in graph.edges.iter().take(5).enumerate() {
            debug!("Edge {}: source={}, target={}, weight={:.3}", 
                i, edge.source, edge.target, edge.weight);
        }
    }
    
    info!("Preparing graph response with {} nodes and {} edges",
        graph.nodes.len(),
        graph.edges.len()
    );

    let response = GraphResponse {
        nodes: graph.nodes.clone(),
        edges: graph.edges.clone(),
        metadata: graph.metadata.clone(),
    };

    HttpResponse::Ok().json(response)
}

pub async fn get_paginated_graph_data(
    state: web::Data<AppState>,
    query: web::Query<GraphQuery>,
) -> impl Responder {
    info!("Received request for paginated graph data with params: {:?}", query);
    
    // Ensure GPU layout is calculated before sending first page of data
    if query.page.unwrap_or(1) == 1 {
        if let Some(gpu_compute) = &state.graph_service.get_gpu_compute().await {
            let mut graph = state.graph_service.get_graph_data_mut().await;
            let mut node_map = state.graph_service.get_node_map_mut().await;
            
            // Get physics settings
            let settings = state.settings.read().await;
            let physics_settings = settings.visualization.physics.clone();
            
            // Create simulation parameters
            let params = crate::models::simulation_params::SimulationParams {
                iterations: physics_settings.iterations,
                spring_strength: physics_settings.spring_strength,
                repulsion: physics_settings.repulsion_strength,
                damping: physics_settings.damping,
                max_repulsion_distance: physics_settings.repulsion_distance,
                viewport_bounds: physics_settings.bounds_size,
                mass_scale: physics_settings.mass_scale,
                boundary_damping: physics_settings.boundary_damping,
                enable_bounds: physics_settings.enable_bounds,
                time_step: 0.016,
                phase: crate::models::simulation_params::SimulationPhase::Dynamic,
                mode: crate::models::simulation_params::SimulationMode::Remote,
            };
            
            // Calculate graph layout using GPU
            info!("Processing paginated graph layout with GPU before sending to client");
            if let Err(e) = crate::services::graph_service::GraphService::calculate_layout(
                gpu_compute, &mut graph, &mut node_map, &params
            ).await {
                warn!("Error calculating graph layout for paginated data: {}", e);
            }
            
            // Drop locks
            drop(graph);
            drop(node_map);
        } else {
            info!("GPU compute not available, sending paginated graph without GPU processing");
        }
    }

    // Convert to 0-based indexing internally
    let page = query.page.map(|p| p.saturating_sub(1)).unwrap_or(0);
    let page_size = query.page_size.unwrap_or(100);

    if page_size == 0 {
        error!("Invalid page size: {}", page_size);
        return HttpResponse::BadRequest().json(serde_json::json!({
            "error": "Page size must be greater than 0"
        }));
    }

    let graph = state.graph_service.get_graph_data_mut().await;
    let total_items = graph.nodes.len();
    
    if total_items == 0 {
        debug!("Graph is empty");
        return HttpResponse::Ok().json(PaginatedGraphResponse {
            nodes: Vec::new(),
            edges: Vec::new(),
            metadata: HashMap::new(),
            total_pages: 0,
            current_page: 1, // Return 1-based page number
            total_items: 0,
            page_size,
        });
    }

    let total_pages = (total_items + page_size - 1) / page_size;

    if page >= total_pages {
        warn!("Requested page {} exceeds total pages {}", page + 1, total_pages);
        return HttpResponse::BadRequest().json(serde_json::json!({
            "error": format!("Page {} exceeds total available pages {}", page + 1, total_pages)
        }));
    }

    let start = page * page_size;
    let end = std::cmp::min(start + page_size, total_items);

    debug!("Calculating slice from {} to {} out of {} total items", start, end, total_items);

    let page_nodes = graph.nodes[start..end].to_vec();

    // Get edges where either source or target is in the current page
    let node_ids: std::collections::HashSet<_> = page_nodes.iter()
        .map(|node| node.id.clone())
        .collect();

    let relevant_edges: Vec<_> = graph.edges.iter()
        .filter(|edge| {
            // Include edges where either the source or target is in our page
            node_ids.contains(&edge.source) || node_ids.contains(&edge.target)
        })
        .cloned()
        .collect();

    debug!("Found {} relevant edges for {} nodes", relevant_edges.len(), page_nodes.len());

    let response = PaginatedGraphResponse {
        nodes: page_nodes,
        edges: relevant_edges,
        metadata: graph.metadata.clone(),
        total_pages,
        current_page: page + 1, // Convert back to 1-based indexing for response
        total_items,
        page_size,
    };

    HttpResponse::Ok().json(response)
}

// Rebuild graph from existing metadata
pub async fn refresh_graph(state: web::Data<AppState>) -> impl Responder {
    info!("Received request to refresh graph");
    
    let metadata = state.metadata.read().await.clone();
    debug!("Building graph from {} metadata entries", metadata.len());
    
    match GraphService::build_graph_from_metadata(&metadata).await {
        Ok(mut new_graph) => {
            let mut graph = state.graph_service.get_graph_data_mut().await;
            let mut node_map = state.graph_service.get_node_map_mut().await;
            
            // Preserve existing node positions
            // Use metadata_id (filename) to match nodes between old and new graphs
            let old_positions: HashMap<String, (f32, f32, f32)> = graph.nodes.iter() 
                .map(|node| (node.metadata_id.clone(), (node.x(), node.y(), node.z())))
                .collect();
            
            debug!("Preserved positions for {} existing nodes by metadata_id", old_positions.len());
            
            // Update positions in new graph
            for node in &mut new_graph.nodes {
                // Look up by metadata_id (filename) instead of numeric ID
                if let Some(&(x, y, z)) = old_positions.get(&node.metadata_id) {
                    node.set_x(x);
                    node.set_y(y);
                    node.set_z(z);
                }
            }
            
            *graph = new_graph;
            
            // Update node_map with new graph nodes
            node_map.clear();
            for node in &graph.nodes {
                node_map.insert(node.id.clone(), node.clone());
            }
            
            info!("Graph refreshed successfully with {} nodes and {} edges", 
                graph.nodes.len(), 
                graph.edges.len()
            );
            
            HttpResponse::Ok().json(serde_json::json!({
                "success": true,
                "message": "Graph refreshed successfully"
            }))
        },
        Err(e) => {
            error!("Failed to refresh graph: {}", e);
            HttpResponse::InternalServerError().json(serde_json::json!({
                "success": false,
                "error": format!("Failed to refresh graph: {}", e)
            }))
        }
    }
}

// Fetch new metadata and rebuild graph
pub async fn update_graph(state: web::Data<AppState>) -> impl Responder {
    info!("Received request to update graph");
    
    // Load current metadata
    let mut metadata = match FileService::load_or_create_metadata() {
        Ok(m) => m,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return HttpResponse::InternalServerError().json(serde_json::json!({
                "success": false,
                "error": format!("Failed to load metadata: {}", e)
            }));
        }
    };
    
    // Fetch and process new files
    let file_service = FileService::new(Arc::clone(&state.settings));
    match file_service.fetch_and_process_files(&state.content_api, Arc::clone(&state.settings), &mut metadata).await {
        Ok(processed_files) => {
            if processed_files.is_empty() {
                debug!("No new files to process");
                return HttpResponse::Ok().json(serde_json::json!({
                    "success": true,
                    "message": "No updates needed"
                }));
            }
            
            debug!("Processing {} new files", processed_files.len());
            
            // Update metadata in app state
            {
                let mut app_metadata = state.metadata.write().await;
                *app_metadata = metadata.clone();
            }
            
            // Build new graph
            match GraphService::build_graph_from_metadata(&metadata).await {
                Ok(mut new_graph) => {
                    let mut graph = state.graph_service.get_graph_data_mut().await;
                    let mut node_map = state.graph_service.get_node_map_mut().await;
                    
                    // Preserve existing node positions
                    // Use metadata_id (filename) to match nodes between old and new graphs
                    let old_positions: HashMap<String, (f32, f32, f32)> = graph.nodes.iter() 
                        .map(|node| (node.metadata_id.clone(), (node.x(), node.y(), node.z())))
                        .collect();
                    
                    debug!("Preserved positions for {} existing nodes by metadata_id", old_positions.len());
                    
                    // Update positions in new graph
                    for node in &mut new_graph.nodes {
                        // Look up by metadata_id (filename) instead of numeric ID
                        if let Some(&(x, y, z)) = old_positions.get(&node.metadata_id) {
                            node.set_x(x);
                            node.set_y(y);
                            node.set_z(z);
                        }
                    }
                    
                    *graph = new_graph;
                    
                    // Update node_map with new graph nodes
                    node_map.clear();
                    for node in &graph.nodes {
                        node_map.insert(node.id.clone(), node.clone());
                    }
                    
                    debug!("Graph updated successfully");
                    
                    HttpResponse::Ok().json(serde_json::json!({
                        "success": true,
                        "message": format!("Graph updated with {} new files", processed_files.len())
                    }))
                },
                Err(e) => {
                    error!("Failed to build new graph: {}", e);
                    HttpResponse::InternalServerError().json(serde_json::json!({
                        "success": false,
                        "error": format!("Failed to build new graph: {}", e)
                    }))
                }
            }
        },
        Err(e) => {
            error!("Failed to fetch and process files: {}", e);
            HttpResponse::InternalServerError().json(serde_json::json!({
                "success": false,
                "error": format!("Failed to fetch and process files: {}", e)
            }))
        }
    }
}

----
handlers/socket_flow_handler.rs
use actix::prelude::*;
use actix_web::{web, Error, HttpRequest, HttpResponse};
use actix_web_actors::ws;
use flate2::{write::ZlibEncoder, Compression};
use log::{debug, error, info, warn};
use std::io::Write;
use std::sync::Arc;
use std::collections::HashMap;
use tokio::sync::RwLock;
use std::time::Instant;

use crate::app_state::AppState;
use crate::utils::binary_protocol;
use crate::types::vec3::Vec3Data;
use crate::utils::socket_flow_messages::{BinaryNodeData, PingMessage, PongMessage};

// Constants for throttling debug logs
const DEBUG_LOG_SAMPLE_RATE: usize = 10; // Only log 1 in 10 updates

// Constants for data optimization
const COMPRESSION_LEVEL: Compression = Compression::best(); // Use best compression
// Default values for deadbands if not provided in settings
const DEFAULT_POSITION_DEADBAND: f32 = 0.01; // 1cm deadband 
const DEFAULT_VELOCITY_DEADBAND: f32 = 0.005; // 5mm/s deadband
// Default values for dynamic update rate
const DEFAULT_MIN_UPDATE_RATE: u32 = 5;   // Min 5 updates per second when stable
const DEFAULT_MAX_UPDATE_RATE: u32 = 60;  // Max 60 updates per second when active
const DEFAULT_MOTION_THRESHOLD: f32 = 0.05;  // 5% of nodes need to be moving
const DEFAULT_MOTION_DAMPING: f32 = 0.9;  // Smooth transitions in rate

// Maximum value for u16 node IDs
const MAX_U16_VALUE: u32 = 65535;

pub struct SocketFlowServer {
    app_state: Arc<AppState>,
    settings: Arc<RwLock<crate::config::Settings>>,
    last_ping: Option<u64>,
    update_counter: usize, // Counter for throttling debug logs
    last_activity: std::time::Instant, // Track last activity time
    heartbeat_timer_set: bool, // Flag to track if heartbeat timer is set
    // Fields for batched updates and deadband filtering
    node_position_cache: HashMap<String, BinaryNodeData>,
    last_sent_positions: HashMap<String, Vec3Data>,
    last_sent_velocities: HashMap<String, Vec3Data>,
    position_deadband: f32, // Minimum position change to trigger an update
    velocity_deadband: f32, // Minimum velocity change to trigger an update
    // Performance metrics
    last_transfer_size: usize,
    last_transfer_time: Instant,
    total_bytes_sent: usize,
    update_count: usize,
    nodes_sent_count: usize,
    
    // Dynamic update rate fields
    current_update_rate: u32,  // Current rate in updates per second
    min_update_rate: u32,      // Minimum rate from settings
    max_update_rate: u32,      // Maximum rate from settings
    motion_threshold: f32,     // % of nodes that need to be moving to consider "in motion"
    motion_damping: f32,       // Smoothing factor for rate changes
    nodes_in_motion: usize,    // Counter for nodes currently in motion
    total_node_count: usize,   // Total node count for percentage calculation
    last_motion_check: Instant, // Last time we checked motion percentage
}

impl SocketFlowServer {
    pub fn new(app_state: Arc<AppState>, settings: Arc<RwLock<crate::config::Settings>>) -> Self {
        // Get dynamic rate settings from config
        let min_update_rate = settings
            .try_read()
            .map(|s| s.system.websocket.min_update_rate)
            .unwrap_or(DEFAULT_MIN_UPDATE_RATE);

        let max_update_rate = settings
            .try_read()
            .map(|s| s.system.websocket.max_update_rate)
            .unwrap_or(DEFAULT_MAX_UPDATE_RATE);

        let motion_threshold = settings
            .try_read()
            .map(|s| s.system.websocket.motion_threshold)
            .unwrap_or(DEFAULT_MOTION_THRESHOLD);

        let motion_damping = settings
            .try_read()
            .map(|s| s.system.websocket.motion_damping)
            .unwrap_or(DEFAULT_MOTION_DAMPING);

        // Use position and velocity deadbands from constants
        let position_deadband = DEFAULT_POSITION_DEADBAND;
        let velocity_deadband = DEFAULT_VELOCITY_DEADBAND;

        // Start at max update rate and adjust dynamically based on motion
        let current_update_rate = max_update_rate;

        Self {
            app_state,
            settings,
            last_ping: None,
            update_counter: 0,
            last_activity: std::time::Instant::now(),
            heartbeat_timer_set: false,
            node_position_cache: HashMap::new(),
            last_sent_positions: HashMap::new(),
            last_sent_velocities: HashMap::new(),
            position_deadband,
            velocity_deadband,
            last_transfer_size: 0,
            last_transfer_time: Instant::now(),
            total_bytes_sent: 0,
            update_count: 0,
            nodes_sent_count: 0,
            current_update_rate,
            min_update_rate,
            max_update_rate,
            motion_threshold,
            motion_damping,
            nodes_in_motion: 0,
            total_node_count: 0,
            last_motion_check: Instant::now(),
        }
    }

    fn handle_ping(&mut self, msg: PingMessage) -> PongMessage {
        self.last_ping = Some(msg.timestamp);
        PongMessage {
            type_: "pong".to_string(),
            timestamp: msg.timestamp,
        }
    }

    fn maybe_compress(&mut self, data: Vec<u8>) -> Vec<u8> {
        // Always compress data to reduce transfer size
        if data.len() > 100 { // Only compress if data is larger than 100 bytes
            let mut encoder = ZlibEncoder::new(Vec::new(), COMPRESSION_LEVEL);
            if encoder.write_all(&data).is_ok() {
                if let Ok(compressed) = encoder.finish() {
                    if compressed.len() < data.len() {
                        if self.should_log_update() {
                            debug!("Compressed binary message: {} -> {} bytes ({}% reduction)", 
                                data.len(), compressed.len(), 
                                ((data.len() - compressed.len()) * 100) / data.len());
                        }
                        return compressed;
                    }
                }
            }
        }
        data
    }
    
    // Helper method to determine if we should log this update (for throttling)
    fn should_log_update(&mut self) -> bool {
        self.update_counter = (self.update_counter + 1) % DEBUG_LOG_SAMPLE_RATE;
        self.update_counter == 0
    }
    
    // Check if a node's position or velocity has changed enough to warrant an update
    fn has_node_changed_significantly(&mut self, node_id: &str, new_position: Vec3Data, new_velocity: Vec3Data) -> bool {
        let position_changed = if let Some(last_position) = self.last_sent_positions.get(node_id) {
            // Calculate Euclidean distance between last sent position and new position
            let dx = new_position.x - last_position.x;
            let dy = new_position.y - last_position.y;
            let dz = new_position.z - last_position.z;
            let distance_squared = dx*dx + dy*dy + dz*dz;
            
            // Check if position has changed by more than the deadband
            distance_squared > self.position_deadband * self.position_deadband
        } else {
            // First time seeing this node, always consider it changed
            true
        };
        
        let velocity_changed = if let Some(last_velocity) = self.last_sent_velocities.get(node_id) {
            // Calculate velocity change magnitude
            let dvx = new_velocity.x - last_velocity.x;
            let dvy = new_velocity.y - last_velocity.y;
            let dvz = new_velocity.z - last_velocity.z;
            let velocity_change_squared = dvx*dvx + dvy*dvy + dvz*dvz;
            
            // Check if velocity has changed by more than the deadband
            velocity_change_squared > self.velocity_deadband * self.velocity_deadband
        } else {
            // First time seeing this node's velocity, always consider it changed
            true
        };
        
        // Update stored values if changed
        if position_changed || velocity_changed {
            self.last_sent_positions.insert(node_id.to_string(), new_position);
            self.last_sent_velocities.insert(node_id.to_string(), new_velocity);
            return true;
        }
        
        false
    }

    // Calculate the current update interval based on the dynamic rate
    fn get_current_update_interval(&self) -> std::time::Duration {
        let millis = (1000.0 / self.current_update_rate as f64) as u64;
        std::time::Duration::from_millis(millis)
    }
    
    // Calculate the percentage of nodes in motion
    fn calculate_motion_percentage(&self) -> f32 {
        if self.total_node_count == 0 {
            return 0.0;
        }
        
        (self.nodes_in_motion as f32) / (self.total_node_count as f32)
    }
    
    // Update the dynamic rate based on current motion
    fn update_dynamic_rate(&mut self) {
        // Only recalculate periodically to avoid rapid changes
        let now = Instant::now();
        if now.duration_since(self.last_batch_time);
        let batch_window = std::time::Duration::from_millis(BATCH_UPDATE_WINDOW_MS);
        
        // If we've waited at least the batch window time, or this is the first update
        elapsed >= batch_window
    }

    // New method to mark a batch as sent
    fn mark_batch_sent(&mut self) { self.last_batch_time = Instant::now(); }
    
    // New method to collect nodes that have changed position
    fn collect_changed_nodes(&mut self) -> Vec<(u16, BinaryNodeData)> {
        let mut changed_nodes = Vec::new();
        
        for (node_id, node_data) in self.node_position_cache.drain() {
            if let Ok(node_id_u16) = node_id.parse::<u16>() {
                changed_nodes.push((node_id_u16, node_data));
            }
        }
        
        changed_nodes
    }
}

impl Actor for SocketFlowServer {
    type Context = ws::WebsocketContext<Self>;

    fn started(&mut self, ctx: &mut Self::Context) {
        info!("[WebSocket] Client connected successfully");
        self.last_activity = std::time::Instant::now();
        
        // Set up server-side heartbeat ping to keep connection alive
        if !self.heartbeat_timer_set {
            ctx.run_interval(std::time::Duration::from_secs(5), |act, ctx| {
                // Send a heartbeat ping every 5 seconds
                debug!("[WebSocket] Sending server heartbeat ping");
                ctx.ping(b"");
                
                // Update last activity timestamp to prevent client-side timeout
                act.last_activity = std::time::Instant::now();
            });
        }

        // Send simple connection established message
        let response = serde_json::json!({
            "type": "connection_established",
            "timestamp": chrono::Utc::now().timestamp_millis()
        });

        if let Ok(msg_str) = serde_json::to_string(&response) {
            ctx.text(msg_str);
            self.last_activity = std::time::Instant::now();
        }

        // Send a "loading" message to indicate the client should display a loading indicator
        let loading_msg = serde_json::json!({
            "type": "loading",
            "message": "Calculating initial layout..."
        });
        ctx.text(serde_json::to_string(&loading_msg).unwrap_or_default());
        self.last_activity = std::time::Instant::now();
    }

    fn stopped(&mut self, _: &mut Self::Context) {
        info!("[WebSocket] Client disconnected");
    }
}

impl StreamHandler<Result<ws::Message, ws::ProtocolError>> for SocketFlowServer {
    fn handle(&mut self, msg: Result<ws::Message, ws::ProtocolError>, ctx: &mut Self::Context) {
        match msg {
            Ok(ws::Message::Ping(msg)) => {
                debug!("[WebSocket] Received ping");
                ctx.pong(&msg);
                self.last_activity = std::time::Instant::now();
            }
            Ok(ws::Message::Pong(_)) => {
                // Logging every pong creates too much noise, only log in detailed debug mode
                if self.settings.try_read().map(|s| s.system.debug.enable_websocket_debug).unwrap_or(false) {
                    debug!("[WebSocket] Received pong");
                }
                self.last_activity = std::time::Instant::now();
            }
            Ok(ws::Message::Text(text)) => {
                info!("Received text message: {}", text);
                self.last_activity = std::time::Instant::now();
                match serde_json::from_str::<serde_json::Value>(&text) {
                    Ok(msg) => {
                        match msg.get("type").and_then(|t| t.as_str()) {
                            Some("ping") => {
                                if let Ok(ping_msg) =
                                    serde_json::from_value::<PingMessage>(msg.clone())
                                {
                                    let pong = self.handle_ping(ping_msg);
                                    self.last_activity = std::time::Instant::now();
                                    if let Ok(response) = serde_json::to_string(&pong) {
                                        ctx.text(response);
                                    }
                                }
                            }
                            Some("requestInitialData") => {
                                info!("Received request for position updates");

                                // Use a smaller initial interval to start updates quickly
                                let initial_interval = std::time::Duration::from_millis(10);
                                let app_state = self.app_state.clone();
                                
                                ctx.run_later(initial_interval, move |act: &mut SocketFlowServer, ctx| {
                                    let settings_clone = act.settings.clone();
                                    
                                    // First check if we should log this update (before spawning the future)
                                    let should_log = act.should_log_update();

                                    // Create the future without moving act
                                    let fut = async move {
                                        let raw_nodes = app_state
                                            .graph_service 
                                            .get_node_positions()
                                            .await;

                                        let node_count = raw_nodes.len();
                                        if node_count == 0 {
                                            debug!("[WebSocket] No nodes to send! Empty graph data."); return None;
                                        }

                                        // Check if detailed debugging should be enabled
                                        let detailed_debug = if let Ok(settings) = settings_clone.try_read() {
                                            settings.system.debug.enabled && 
                                            settings.system.debug.enable_websocket_debug
                                        } else {
                                            false
                                        };

                                        if detailed_debug {
                                            debug!("Raw nodes count: {}, showing first 5 nodes IDs:", raw_nodes.len());
                                            for (i, node) in raw_nodes.iter().take(5).enumerate() {
                                                debug!("  Node {}: id={} (numeric), metadata_id={} (filename)", 
                                                    i, node.id, node.metadata_id);
                                            }
                                        }

                                        let mut nodes = Vec::with_capacity(raw_nodes.len());
                                        for node in raw_nodes {
                                            // First try to parse as u16
                                            let node_id_result = match node.id.parse::<u16>() {
                                                Ok(id) => Ok(id),
                                                Err(_) => {
                                                    // If parsing as u16 fails, try parsing as u32 and check if it's within u16 range
                                                    match node.id.parse::<u32>() {
                                                        Ok(id) if id <= MAX_U16_VALUE => Ok(id as u16),
                                                        _ => Err(())
                                                    }
                                                }
                                            };
                                            if let Ok(node_id) = node_id_result {
                                                let node_data = BinaryNodeData {
                                                    position: node.data.position,
                                                    velocity: node.data.velocity,
                                                    mass: node.data.mass,
                                                    flags: node.data.flags,
                                                    padding: node.data.padding,
                                                };
                                                nodes.push((node_id, node_data));
                                            } else {
                                                // Log more detailed information about the node ID
                                                if let Ok(id) = node.id.parse::<u32>() {
                                                    warn!("[WebSocket] Node ID too large for u16: '{}' ({}), metadata_id: '{}'", 
                                                        node.id, id, node.metadata_id);
                                                } else {
                                                    warn!("[WebSocket] Failed to parse node ID as u16: '{}', metadata_id: '{}'", 
                                                        node.id, node.metadata_id);
                                                }
                                            }
                                        }

                                        // Only generate binary data if we have nodes to send
                                        // Only generate binary data if we have changed nodes to send
                                        if nodes.is_empty() {
                                            // Send a keepalive message every ~5 seconds if no nodes have changed
                                            // Just return an empty vector - activity timing is handled in the actor
                                            if false {
                                                return Some((Vec::new(), detailed_debug, Vec::new()));
                                            }
                                            return None;
                                        }
                                        
                                        // Filter nodes to only include those that have changed significantly
                                        // This reduces the amount of data we need to send
                                        let mut filtered_nodes = Vec::new();
                                        for (node_id, node_data) in nodes {
                                            let node_id_str = node_id.to_string();
                                            let position = node_data.position.clone();
                                            let velocity = node_data.velocity.clone();
                                            
                                            // Apply filtering before adding to filtered nodes
                                            // Check if this node has changed enough to warrant an update
                                            if act.has_node_changed_significantly(
                                                &node_id_str,
                                                position.clone(),
                                                velocity.clone()
                                            ) {
                                                filtered_nodes.push((node_id, node_data));
                                            }
                                            
                                            if detailed_debug && filtered_nodes.len() <= 5 {
                                                debug!("Including node {} in update", node_id_str);
                                            }
                                        }
                                        
                                        // If no nodes have changed significantly, don't send an update
                                        if filtered_nodes.is_empty() {
                                            return None;
                                        }
                                       
                                        // Encode only the nodes that have changed significantly
                                        let data = binary_protocol::encode_node_data(&filtered_nodes);
                                        
                                        // Use filtered nodes for the rest of the processing
                                        nodes = filtered_nodes;
                                        
                                        // Return detailed debug info along with the data
                                        Some((data, detailed_debug, nodes))
                                    };
                                    
                                    // Convert future to actor future without ownership issues
                                    // This avoids the need to move 'act' into the future
                                    let fut = actix::fut::wrap_future::<_, Self>(fut);

                                    ctx.spawn(fut.map(move |result, act, ctx| {
                                        if let Some((binary_data, detailed_debug, nodes)) = result {
                                            // Update motion metrics for dynamic rate adjustment
                                            act.total_node_count = nodes.len();
                                            
                                            // Count nodes in motion (with non-zero velocity)
                                            let moving_nodes = nodes.iter()
                                                .filter(|(node_id, node_data)| {
                                                    let vel = &node_data.velocity;
                                                    vel.x.abs() > 0.001 || vel.y.abs() > 0.001 || vel.z.abs() > 0.001
                                                })
                                                .count();
                                            
                                            act.nodes_in_motion = moving_nodes;
                                            
                                            // Update the dynamic rate based on current motion
                                            act.update_dynamic_rate();
                                            
                                            // Get the current update interval for the next update
                                            let update_interval = act.get_current_update_interval();
                                            
                                            if detailed_debug && should_log {
                                                debug!("[WebSocket] Motion: {}/{} nodes, Rate: {} updates/sec, Interval: {:?}",
                                                    moving_nodes, nodes.len(), act.current_update_rate, update_interval);
                                            }
                                            
                                            // If no nodes to update, don't send anything
                                            if nodes.is_empty() {
                                                if detailed_debug && should_log {
                                                    debug!("[WebSocket] No nodes to update, skipping");
                                                }
                                                return;
                                            }
                                            
                                            // Encode the filtered nodes we already prepared
                                            let binary_data = binary_protocol::encode_node_data(&nodes);
                                            if detailed_debug && should_log && !binary_data.is_empty() {
                                                debug!("[WebSocket] Encoded binary data: {} bytes for {} nodes", binary_data.len(), nodes.len());
                                                
                                                // Log details about a sample node to track position changes
                                                if !nodes.is_empty() {
                                                    let node = &nodes[0];
                                                    debug!(
                                                        "Sample node: id={}, pos=[{:.2},{:.2},{:.2}], vel=[{:.2},{:.2},{:.2}]",
                                                        node.0, 
                                                        node.1.position.x, node.1.position.y, node.1.position.z,
                                                        node.1.velocity.x, node.1.velocity.y, node.1.velocity.z
                                                   );
                                                }
                                            }

                                            // Only send data if we have nodes to update
                                            if !nodes.is_empty() {
                                                let final_data = act.maybe_compress(binary_data);
                                                
                                                // Update performance metrics
                                                act.last_transfer_size = final_data.len();
                                                act.total_bytes_sent += final_data.len();
                                                act.update_count += 1;
                                                act.nodes_sent_count += nodes.len();
                                                let now = Instant::now();
                                                let elapsed = now.duration_since(act.last_transfer_time);
                                                act.last_transfer_time = now;
                                                
                                                // Schedule the next update using the dynamic rate
                                                let next_interval = act.get_current_update_interval();
                                                ctx.run_later(next_interval, move |act, ctx| {
                                                    // Re-run the update process after the dynamic interval
                                                    let settings_clone = act.settings.clone();
                                                    let should_log = act.should_log_update();
                                                    ctx.run_later(std::time::Duration::from_millis(0), move |act, ctx| {});
                                                });
                                                
                                                // Log performance metrics periodically
                                                if detailed_debug && should_log {
                                                    let avg_bytes_per_update = if act.update_count > 0 {
                                                        act.total_bytes_sent / act.update_count
                                                    } else { 0 };
                                                    
                                                    debug!("[WebSocket] Transfer: {} bytes, {} nodes, {:?} since last, avg {} bytes/update",
                                                        final_data.len(), nodes.len(), elapsed, avg_bytes_per_update);
                                                }
                                                
                                                ctx.binary(final_data);
                                            } else if detailed_debug && should_log {
                                                // Log keepalive
                                                debug!("[WebSocket] Sending keepalive (no position changes)");
                                            }
                                        }
                                    }));
                                });

                                let response = serde_json::json!({
                                    "type": "updatesStarted",
                                    "timestamp": chrono::Utc::now().timestamp_millis()
                                });
                                if let Ok(msg_str) = serde_json::to_string(&response) {
                                    self.last_activity = std::time::Instant::now();
                                    ctx.text(msg_str);
                                }
                            }
                            Some("enableRandomization") => {
                                if let Ok(enable_msg) = serde_json::from_value::<serde_json::Value>(msg.clone()) {
                                    let enabled = enable_msg.get("enabled").and_then(|e| e.as_bool()).unwrap_or(false);
                                    info!("Client requested to {} node position randomization (server-side randomization removed)", 
                                         if enabled { "enable" } else { "disable" });
                                    
                                    // Server-side randomization has been removed, but we still acknowledge the client's request
                                    // to maintain backward compatibility with existing clients
                                    actix::spawn(async move {
                                        // Log that we received the request but server-side randomization is no longer supported
                                        info!("Node position randomization request acknowledged, but server-side randomization is no longer supported");
                                        info!("Client-side randomization is now used instead");
                                    });
                                }
                            }
                            _ => {
                                warn!("[WebSocket] Unknown message type: {:?}", msg);
                            }
                        }
                    }
                    Err(e) => {
                        warn!("[WebSocket] Failed to parse text message: {}", e);
                        let error_msg = serde_json::json!({
                            "type": "error",
                            "message": format!("Failed to parse text message: {}", e)
                        });
                        if let Ok(msg_str) = serde_json::to_string(&error_msg) {
                            ctx.text(msg_str);
                        }
                    }
                }
            }
            Ok(ws::Message::Binary(data)) => {
                info!("Received binary message, length: {}", data.len());
                self.last_activity = std::time::Instant::now();
                
                // Enhanced logging for binary messages (26 bytes per node now)
                if data.len() % 26 != 0 {
                    warn!(
                        "Binary message size mismatch: {} bytes (not a multiple of 26, remainder: {})",
                        data.len(),
                        data.len() % 26
                    );
                }
                
                match binary_protocol::decode_node_data(&data) {
                    Ok(nodes) => {
                        if nodes.len() <= 2 {
                            let app_state = self.app_state.clone();
                            let nodes_vec: Vec<_> = nodes.into_iter().collect();

                            let fut = async move {
                                let mut graph = app_state.graph_service.get_graph_data_mut().await;
                                let mut node_map = app_state.graph_service.get_node_map_mut().await;

                                for (node_id, node_data) in nodes_vec {
                                    // Convert node_id to string for lookup
                                    let node_id_str = node_id.to_string();
                                    
                                    // Debug logging for node ID tracking
                                    if node_id < 5 {
                                        debug!(
                                            "Processing binary update for node ID: {} with position [{:.3}, {:.3}, {:.3}]",
                                            node_id, node_data.position.x, node_data.position.y, node_data.position.z
                                        );
                                    }
                                    
                                    if let Some(node) = node_map.get_mut(&node_id_str) {
                                        // Node exists with this numeric ID
                                        // Explicitly preserve existing mass and flags
                                        let original_mass = node.data.mass;
                                        let original_flags = node.data.flags;
                                        
                                        node.data.position = node_data.position;
                                        node.data.velocity = node_data.velocity;
                                        // Explicitly restore mass and flags after updating position/velocity
                                        node.data.mass = original_mass;
                                        node.data.flags = original_flags; // Restore flags needed for GPU code
                                    // Mass, flags, and padding are not overwritten as they're only 
                                    // present on the server side and not transmitted over the wire
                                    } else {
                                        debug!("Received update for unknown node ID: {}", node_id_str);
                                    }
                                }
                                
                                // Add more detailed debug information for mass maintenance
                                debug!("Updated node positions from binary data (preserving server-side properties)");

                                // Update graph nodes with new positions/velocities from the map, preserving other properties
                                for node in &mut graph.nodes {
                                    if let Some(updated_node) = node_map.get(&node.id) {
                                        // Explicitly preserve mass and flags before updating
                                        let original_mass = node.data.mass;
                                        let original_flags = node.data.flags;
                                        node.data.position = updated_node.data.position;
                                        node.data.velocity = updated_node.data.velocity;
                                        node.data.mass = original_mass; // Restore mass after updating
                                        node.data.flags = original_flags; // Restore flags after updating
                                    }
                                }
                            };

                            let fut = fut.into_actor(self);
                            ctx.spawn(fut.map(|_, _, _| ()));
                        } else {
                            warn!("Received update for too many nodes: {}", nodes.len());
                            let error_msg = serde_json::json!({
                                "type": "error",
                                "message": format!("Too many nodes in update: {}", nodes.len())
                            });
                            if let Ok(msg_str) = serde_json::to_string(&error_msg) {
                                ctx.text(msg_str);
                            }
                        }
                    }
                    Err(e) => {
                        error!("Failed to decode binary message: {}", e);
                        let error_msg = serde_json::json!({
                            "type": "error",
                            "message": format!("Failed to decode binary message: {}", e)
                        });
                        if let Ok(msg_str) = serde_json::to_string(&error_msg) {
                            ctx.text(msg_str);
                        }
                    }
                }
            }
            Ok(ws::Message::Close(reason)) => {
                info!("[WebSocket] Client initiated close: {:?}", reason);
                ctx.close(reason); // Use client's reason for closing
                ctx.stop();
            }
            Ok(ws::Message::Continuation(_)) => {
                warn!("[WebSocket] Received unexpected continuation frame");
            }
            Ok(ws::Message::Nop) => {
                debug!("[WebSocket] Received Nop");
            }
            Err(e) => {
                error!("[WebSocket] Error in WebSocket connection: {}", e);
                // Close with protocol error status code before stopping
                ctx.close(Some(ws::CloseReason::from(ws::CloseCode::Protocol)));
            }
        }
    }
}

pub async fn socket_flow_handler(
    req: HttpRequest,
    stream: web::Payload,
    app_state: web::Data<AppState>,
    settings: web::Data<Arc<RwLock<crate::config::Settings>>>,
) -> Result<HttpResponse, Error> {
    let should_debug = settings.try_read().map(|s| {
        s.system.debug.enabled && s.system.debug.enable_websocket_debug
    }).unwrap_or(false);

    if should_debug {
        debug!("WebSocket connection attempt from {:?}", req.peer_addr());
    }

    // Check for WebSocket upgrade
    if !req.headers().contains_key("Upgrade") {
        return Ok(HttpResponse::BadRequest().body("WebSocket upgrade required"));
    }

    let ws = SocketFlowServer::new(app_state.into_inner(), settings.get_ref().clone());

    match ws::start(ws, &req, stream) {
        Ok(response) => {
            info!("[WebSocket] Client connected successfully");
            Ok(response)
        }
        Err(e) => {
            error!("[WebSocket] Failed to start WebSocket: {}", e);
            Err(e)
        }
    }
}

----
handlers/api_handler/mod.rs
pub mod files;
pub mod graph;
pub mod visualization;

// Re-export specific types and functions
// Re-export specific types and functions
pub use files::{
    fetch_and_process_files,
    get_file_content,
};

pub use graph::{
    get_graph_data,
    get_paginated_graph_data,
    refresh_graph,
    update_graph,
};

pub use visualization::get_visualization_settings;

use actix_web::web;

// Configure all API routes
pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(
        web::scope("/api")
            .configure(files::config)
            .configure(graph::config)
            .configure(visualization::config)
            .configure(crate::handlers::nostr_handler::config)
            .configure(crate::handlers::settings_handler::config)
    );
}

----
handlers/api_handler/files/mod.rs
use actix_web::{web, Error as ActixError, HttpResponse};
use serde_json::json;
use log::{info, debug, error};

use crate::AppState;
use crate::services::file_service::{FileService, MARKDOWN_DIR};
use crate::services::graph_service::GraphService;

pub async fn fetch_and_process_files(state: web::Data<AppState>) -> HttpResponse {
    info!("Initiating optimized file fetch and processing");

    let mut metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load or create metadata: {}", e);
            return HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to initialize metadata: {}", e)
            }));
        }
    };
    
    let file_service = FileService::new(state.settings.clone());
    
    match file_service.fetch_and_process_files(state.content_api.clone(), state.settings.clone(), &mut metadata_store).await {
        Ok(processed_files) => {
            let file_names: Vec<String> = processed_files.iter()
                .map(|pf| pf.file_name.clone())
                .collect();

            info!("Successfully processed {} public markdown files", processed_files.len());

            {
                let mut metadata = state.metadata.write().await;
                for processed_file in &processed_files {
                    metadata_store.insert(processed_file.file_name.clone(), processed_file.metadata.clone());
                    debug!("Updated metadata for: {}", processed_file.file_name);
                }
                *metadata = metadata_store.clone();
            }

            if let Err(e) = FileService::save_metadata(&metadata_store) {
                error!("Failed to save metadata: {}", e);
                return HttpResponse::InternalServerError().json(json!({
                    "status": "error",
                    "message": format!("Failed to save metadata: {}", e)
                }));
            }

            match GraphService::build_graph(&state).await {
                Ok(graph_data) => {
                    let mut graph = state.graph_service.get_graph_data_mut().await;
                    let mut node_map = state.graph_service.get_node_map_mut().await;
                    *graph = graph_data.clone();
                    
                    // Update node_map with new graph nodes
                    node_map.clear();
                    for node in &graph.nodes {
                        node_map.insert(node.id.clone(), node.clone());
                    }
                    
                    info!("Graph data structure updated successfully");

                    if let Some(gpu) = &state.gpu_compute {
                        if let Ok(_nodes) = gpu.read().await.get_node_data() {
                            debug!("GPU node positions updated successfully");
                        } else {
                            error!("Failed to get node positions from GPU");
                        }
                    }

                    HttpResponse::Ok().json(json!({
                        "status": "success",
                        "processed_files": file_names
                    }))
                },
                Err(e) => {
                    error!("Failed to build graph data: {}", e);
                    HttpResponse::InternalServerError().json(json!({
                        "status": "error",
                        "message": format!("Failed to build graph data: {}", e)
                    }))
                }
            }
        },
        Err(e) => {
            error!("Error processing files: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Error processing files: {}", e)
            }))
        }
    }
}

pub async fn get_file_content(_state: web::Data<AppState>, file_name: web::Path<String>) -> HttpResponse {
    let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
    match std::fs::read_to_string(&file_path) {
        Ok(content) => HttpResponse::Ok().body(content),
        Err(e) => {
            error!("Failed to read file {}: {}", file_name, e);
            HttpResponse::NotFound().json(json!({
                "status": "error",
                "message": format!("File not found or unreadable: {}", file_name)
            }))
        }
    }
}

pub async fn refresh_graph(state: web::Data<AppState>) -> HttpResponse {
    info!("Manually triggering graph refresh");

    let metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to load metadata: {}", e)
            }));
        }
    };

    match GraphService::build_graph_from_metadata(&metadata_store).await {
        Ok(graph_data) => {
            let mut graph = state.graph_service.get_graph_data_mut().await;
            let mut node_map = state.graph_service.get_node_map_mut().await;
            *graph = graph_data.clone();
            
            // Update node_map with new graph nodes
            node_map.clear();
            for node in &graph.nodes {
                node_map.insert(node.id.clone(), node.clone());
            }
            
            info!("Graph data structure refreshed successfully");

            if let Some(gpu) = &state.gpu_compute {
                if let Ok(_nodes) = gpu.read().await.get_node_data() {
                    debug!("GPU node positions updated successfully");
                } else {
                    error!("Failed to get node positions from GPU");
                }
            }

            HttpResponse::Ok().json(json!({
                "status": "success",
                "message": "Graph refreshed successfully"
            }))
        },
        Err(e) => {
            error!("Failed to refresh graph data: {}", e);
            HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to refresh graph data: {}", e)
            }))
        }
    }
}

pub async fn update_graph(state: web::Data<AppState>) -> Result<HttpResponse, ActixError> {
    let metadata_store = match FileService::load_or_create_metadata() {
        Ok(store) => store,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return Ok(HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to load metadata: {}", e)
            })));
        }
    };

    match GraphService::build_graph_from_metadata(&metadata_store).await {
        Ok(graph) => {
            let mut graph_data = state.graph_service.get_graph_data_mut().await;
            let mut node_map = state.graph_service.get_node_map_mut().await;
            *graph_data = graph.clone();
            
            // Update node_map with new graph nodes
            node_map.clear();
            for node in &graph_data.nodes {
                node_map.insert(node.id.clone(), node.clone());
            }
            
            if let Some(gpu) = &state.gpu_compute {
                if let Ok(_nodes) = gpu.read().await.get_node_data() {
                    debug!("GPU node positions updated successfully");
                } else {
                    error!("Failed to get node positions from GPU");
                }
            }
            
            Ok(HttpResponse::Ok().json(json!({
                "status": "success",
                "message": "Graph updated successfully"
            })))
        },
        Err(e) => {
            error!("Failed to build graph: {}", e);
            Ok(HttpResponse::InternalServerError().json(json!({
                "status": "error",
                "message": format!("Failed to build graph: {}", e)
            })))
        }
    }
}

// Configure routes using snake_case
pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(
        web::scope("/files")
            .route("/process", web::post().to(fetch_and_process_files))
            .route("/get_content/{filename}", web::get().to(get_file_content))
            .route("/refresh_graph", web::post().to(refresh_graph))
            .route("/update_graph", web::post().to(update_graph))
    );
}

----
handlers/api_handler/graph/mod.rs
use actix_web::{web, HttpResponse, Responder};
use crate::AppState;
use serde::{Serialize, Deserialize};
use log::{info, debug, error, warn};
use std::collections::HashMap;
use std::sync::Arc;
use crate::models::metadata::Metadata;
use crate::utils::socket_flow_messages::Node;
use crate::services::file_service::FileService;
use crate::services::graph_service::GraphService;

#[derive(Serialize)]
#[serde(rename_all = "camelCase")]
pub struct GraphResponse {
    pub nodes: Vec<Node>,
    pub edges: Vec<crate::models::edge::Edge>,
    pub metadata: HashMap<String, Metadata>,
}

#[derive(Serialize)]
#[serde(rename_all = "camelCase")]
pub struct PaginatedGraphResponse {
    pub nodes: Vec<Node>,
    pub edges: Vec<crate::models::edge::Edge>,
    pub metadata: HashMap<String, Metadata>,
    pub total_pages: usize,
    pub current_page: usize,
    pub total_items: usize,
    pub page_size: usize,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GraphQuery {
    pub query: Option<String>,
    pub page: Option<usize>,
    pub page_size: Option<usize>,
    pub sort: Option<String>,
    pub filter: Option<String>,
}

pub async fn get_graph_data(state: web::Data<AppState>) -> impl Responder {
    info!("Received request for graph data");
    let graph = state.graph_service.get_graph_data_mut().await;
    
    debug!("Preparing graph response with {} nodes and {} edges",
        graph.nodes.len(),
        graph.edges.len()
    );

    let response = GraphResponse {
        nodes: graph.nodes.clone(),
        edges: graph.edges.clone(),
        metadata: graph.metadata.clone(),
    };

    HttpResponse::Ok().json(response)
}

pub async fn get_paginated_graph_data(
    state: web::Data<AppState>,
    query: web::Query<GraphQuery>,
) -> impl Responder {
    info!("Received request for paginated graph data with params: {:?}", query);

    let page = query.page.map(|p| p.saturating_sub(1)).unwrap_or(0);
    let page_size = query.page_size.unwrap_or(100);

    if page_size == 0 {
        error!("Invalid page size: {}", page_size);
        return HttpResponse::BadRequest().json(serde_json::json!({
            "error": "Page size must be greater than 0"
        }));
    }

    let graph = state.graph_service.get_graph_data_mut().await;
    let total_items = graph.nodes.len();
    
    if total_items == 0 {
        debug!("Graph is empty");
        return HttpResponse::Ok().json(PaginatedGraphResponse {
            nodes: Vec::new(),
            edges: Vec::new(),
            metadata: HashMap::new(),
            total_pages: 0,
            current_page: 1,
            total_items: 0,
            page_size,
        });
    }

    let total_pages = (total_items + page_size - 1) / page_size;

    if page >= total_pages {
        warn!("Requested page {} exceeds total pages {}", page + 1, total_pages);
        return HttpResponse::BadRequest().json(serde_json::json!({
            "error": format!("Page {} exceeds total available pages {}", page + 1, total_pages)
        }));
    }

    let start = page * page_size;
    let end = std::cmp::min(start + page_size, total_items);

    debug!("Calculating slice from {} to {} out of {} total items", start, end, total_items);

    let page_nodes = graph.nodes[start..end].to_vec();

    let node_ids: std::collections::HashSet<_> = page_nodes.iter()
        .map(|node| node.id.clone())
        .collect();

    let relevant_edges: Vec<_> = graph.edges.iter()
        .filter(|edge| {
            node_ids.contains(&edge.source) || node_ids.contains(&edge.target)
        })
        .cloned()
        .collect();

    debug!("Found {} relevant edges for {} nodes", relevant_edges.len(), page_nodes.len());

    let response = PaginatedGraphResponse {
        nodes: page_nodes,
        edges: relevant_edges,
        metadata: graph.metadata.clone(),
        total_pages,
        current_page: page + 1,
        total_items,
        page_size,
    };

    HttpResponse::Ok().json(response)
}

pub async fn refresh_graph(state: web::Data<AppState>) -> impl Responder {
    info!("Received request to refresh graph");
    
    let metadata = state.metadata.read().await.clone();
    debug!("Building graph from {} metadata entries", metadata.len());
    
    match GraphService::build_graph_from_metadata(&metadata).await {
        Ok(mut new_graph) => {
            let mut graph = state.graph_service.get_graph_data_mut().await;
            let mut node_map = state.graph_service.get_node_map_mut().await;
            
            let old_positions: HashMap<String, (f32, f32, f32)> = graph.nodes.iter()
                .map(|node| (node.id.clone(), (node.x(), node.y(), node.z())))
                .collect();
            
            debug!("Preserved positions for {} existing nodes", old_positions.len());
            
            for node in &mut new_graph.nodes {
                if let Some(&(x, y, z)) = old_positions.get(&node.id) {
                    node.set_x(x);
                    node.set_y(y);
                    node.set_z(z);
                }
            }
            
            *graph = new_graph;
            
            // Update node_map with new graph nodes
            node_map.clear();
            for node in &graph.nodes {
                node_map.insert(node.id.clone(), node.clone());
            }
            
            info!("Graph refreshed successfully with {} nodes and {} edges", 
                graph.nodes.len(), 
                graph.edges.len()
            );
            
            HttpResponse::Ok().json(serde_json::json!({
                "success": true,
                "message": "Graph refreshed successfully"
            }))
        },
        Err(e) => {
            error!("Failed to refresh graph: {}", e);
            HttpResponse::InternalServerError().json(serde_json::json!({
                "success": false,
                "error": format!("Failed to refresh graph: {}", e)
            }))
        }
    }
}

pub async fn update_graph(state: web::Data<AppState>) -> impl Responder {
    info!("Received request to update graph");
    
    let mut metadata = match FileService::load_or_create_metadata() {
        Ok(m) => m,
        Err(e) => {
            error!("Failed to load metadata: {}", e);
            return HttpResponse::InternalServerError().json(serde_json::json!({
                "success": false,
                "error": format!("Failed to load metadata: {}", e)
            }));
        }
    };
    
    let file_service = FileService::new(Arc::clone(&state.settings));
    match file_service.fetch_and_process_files(state.content_api.clone(), Arc::clone(&state.settings), &mut metadata).await {
        Ok(processed_files) => {
            if processed_files.is_empty() {
                debug!("No new files to process");
                return HttpResponse::Ok().json(serde_json::json!({
                    "success": true,
                    "message": "No updates needed"
                }));
            }
            
            debug!("Processing {} new files", processed_files.len());
            
            {
                let mut app_metadata = state.metadata.write().await;
                *app_metadata = metadata.clone();
            }
            
            match GraphService::build_graph_from_metadata(&metadata).await {
                Ok(mut new_graph) => {
                    let mut graph = state.graph_service.get_graph_data_mut().await;
                    let mut node_map = state.graph_service.get_node_map_mut().await;
                    
                    let old_positions: HashMap<String, (f32, f32, f32)> = graph.nodes.iter()
                        .map(|node| (node.id.clone(), (node.x(), node.y(), node.z())))
                        .collect();
                    
                    for node in &mut new_graph.nodes {
                        if let Some(&(x, y, z)) = old_positions.get(&node.id) {
                            node.set_x(x);
                            node.set_y(y);
                            node.set_z(z);
                        }
                    }
                    
                    *graph = new_graph;
                    
                    // Update node_map with new graph nodes
                    node_map.clear();
                    for node in &graph.nodes {
                        node_map.insert(node.id.clone(), node.clone());
                    }
                    
                    debug!("Graph updated successfully");
                    
                    HttpResponse::Ok().json(serde_json::json!({
                        "success": true,
                        "message": format!("Graph updated with {} new files", processed_files.len())
                    }))
                },
                Err(e) => {
                    error!("Failed to build new graph: {}", e);
                    HttpResponse::InternalServerError().json(serde_json::json!({
                        "success": false,
                        "error": format!("Failed to build new graph: {}", e)
                    }))
                }
            }
        },
        Err(e) => {
            error!("Failed to fetch and process files: {}", e);
            HttpResponse::InternalServerError().json(serde_json::json!({
                "success": false,
                "error": format!("Failed to fetch and process files: {}", e)
            }))
        }
    }
}

// Configure routes using snake_case
pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(
        web::scope("/graph")
            // Match client's endpoint pattern exactly
            .route("/data", web::get().to(get_graph_data))
            .route("/data/paginated", web::get().to(get_paginated_graph_data))
            .route("/update", web::post().to(update_graph))
            // Keep refresh endpoint for admin/maintenance
            .route("/refresh", web::post().to(refresh_graph))
    );
}

----
handlers/api_handler/visualization/mod.rs
use crate::config::Settings;
use crate::utils::case_conversion::to_snake_case;
use crate::AppState;
use actix_web::{error::ErrorInternalServerError, web, Error, HttpResponse, Result};
use log::{debug, error, info};
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;
use std::fs;
use std::path::PathBuf;
use std::sync::Arc;
use tokio::sync::RwLock;

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub struct SettingResponse {
    pub category: String,
    pub setting: String,
    pub value: Value,
    pub success: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub struct CategorySettingsResponse {
    pub category: String,
    pub settings: HashMap<String, Value>,
    pub success: bool,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub struct SettingValue {
    pub value: Value,
}

fn get_setting_value(settings: &Settings, category: &str, setting: &str) -> Result<Value, String> {
    debug!(
        "Attempting to get setting value for category: {}, setting: {}",
        category, setting
    );

    let category_snake = to_snake_case(category);
    let setting_snake = to_snake_case(setting);
    debug!(
        "Converted category '{}' to snake_case: '{}'",
        category, category_snake
    );
    debug!(
        "Converted setting '{}' to snake_case: '{}'",
        setting, setting_snake
    );

    let settings_value = match serde_json::to_value(&settings) {
        Ok(v) => {
            debug!("Successfully serialized settings to JSON");
            v
        }
        Err(e) => {
            error!("Failed to serialize settings to JSON: {}", e);
            return Err(format!("Failed to serialize settings: {}", e));
        }
    };

    debug!("Settings JSON structure: {}", settings_value);

    // Handle nested categories
    let parts: Vec<&str> = category_snake.split('.').collect();
    let mut current_value = &settings_value;

    for part in parts {
        current_value = match current_value.get(part) {
            Some(v) => {
                debug!("Found category part '{}' in settings", part);
                v
            }
            None => {
                error!("Category part '{}' not found in settings", part);
                return Err(format!("Category '{}' not found", category));
            }
        };
    }

    let setting_value = match current_value.get(&setting_snake) {
        Some(v) => {
            debug!(
                "Found setting '{}' in category '{}'",
                setting_snake, category_snake
            );
            v
        }
        None => {
            error!(
                "Setting '{}' not found in category '{}'",
                setting_snake, category_snake
            );
            return Err(format!(
                "Setting '{}' not found in category '{}'",
                setting, category
            ));
        }
    };

    debug!("Found setting value: {:?}", setting_value);
    Ok(setting_value.clone())
}

fn update_setting_value(
    settings: &mut Settings,
    category: &str,
    setting: &str,
    value: &Value,
) -> Result<(), String> {
    debug!(
        "Attempting to update setting value for category: {}, setting: {}",
        category, setting
    );

    let category_snake = to_snake_case(category);
    let setting_snake = to_snake_case(setting);
    debug!(
        "Converted category '{}' to snake_case: '{}'",
        category, category_snake
    );
    debug!(
        "Converted setting '{}' to snake_case: '{}'",
        setting, setting_snake
    );

    let mut settings_value = match serde_json::to_value(&*settings) {
        Ok(v) => {
            debug!("Successfully serialized settings to JSON");
            v
        }
        Err(e) => {
            error!("Failed to serialize settings to JSON: {}", e);
            return Err(format!("Failed to serialize settings: {}", e));
        }
    };

    debug!("Settings JSON structure: {}", settings_value);

    // Handle nested categories
    let parts: Vec<&str> = category_snake.split('.').collect();
    let mut current_value = &mut settings_value;

    for part in parts {
        current_value = match current_value.get_mut(part) {
            Some(v) => {
                debug!("Found category part '{}' in settings", part);
                v
            }
            None => {
                error!("Category part '{}' not found in settings", part);
                return Err(format!("Category '{}' not found", category));
            }
        };
    }

    if let Some(obj) = current_value.as_object_mut() {
        obj.insert(setting_snake.to_string(), value.clone());
        debug!("Updated setting value successfully");

        match serde_json::from_value(settings_value) {
            Ok(new_settings) => {
                debug!("Successfully converted updated JSON back to Settings");
                *settings = new_settings;
                Ok(())
            }
            Err(e) => {
                error!("Failed to convert JSON back to Settings: {}", e);
                Err(format!("Failed to deserialize settings: {}", e))
            }
        }
    } else {
        error!("Category '{}' is not an object", category_snake);
        Err(format!("Category '{}' is not an object", category))
    }
}

fn get_category_settings_value(settings: &Settings, category: &str) -> Result<Value, String> {
    debug!("Getting settings for category: {}", category);
    let settings_value = serde_json::to_value(&settings)
        .map_err(|e| format!("Failed to serialize settings: {}", e))?;

    // Handle nested categories
    let parts: Vec<&str> = category.split('.').collect();
    let mut current_value = &settings_value;

    for part in parts {
        current_value = match current_value.get(part) {
            Some(v) => {
                debug!("Found category part '{}' in settings", part);
                v
            }
            None => {
                error!("Category part '{}' not found in settings", part);
                return Err(format!("Category '{}' not found", category));
            }
        };
    }

    debug!("Successfully retrieved settings for category: {}", category);
    Ok(current_value.clone())
}

pub async fn get_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<(String, String)>,
) -> HttpResponse {
    let (category, setting) = path.into_inner();
    info!(
        "Getting setting for category: {}, setting: {}",
        category, setting
    );

    let settings_guard = match settings.read().await {
        guard => {
            debug!("Successfully acquired settings read lock");
            guard
        }
    };

    match get_setting_value(&*settings_guard, &category, &setting) {
        Ok(value) => {
            debug!("Successfully retrieved setting value: {:?}", value);
            HttpResponse::Ok().json(SettingResponse {
                category,
                setting,
                value,
                success: true,
                error: None,
            })
        }
        Err(e) => {
            error!("Failed to get setting value: {}", e);
            HttpResponse::BadRequest().json(SettingResponse {
                category,
                setting,
                value: Value::Null,
                success: false,
                error: Some(e),
            })
        }
    }
}

pub async fn update_setting(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<(String, String)>,
    value: web::Json<Value>,
) -> HttpResponse {
    let (category, setting) = path.into_inner();
    info!(
        "Updating setting for category: {}, setting: {}",
        category, setting
    );

    let mut settings_guard = match settings.write().await {
        guard => {
            debug!("Successfully acquired settings write lock");
            guard
        }
    };

    match update_setting_value(&mut *settings_guard, &category, &setting, &value) {
        Ok(_) => {
            if let Err(e) = save_settings_to_file(&*settings_guard) {
                error!("Failed to save settings to file: {}", e);
                return HttpResponse::InternalServerError().json(SettingResponse {
                    category,
                    setting,
                    value: value.into_inner(),
                    success: false,
                    error: Some("Failed to persist settings".to_string()),
                });
            }
            HttpResponse::Ok().json(SettingResponse {
                category,
                setting,
                value: value.into_inner(),
                success: true,
                error: None,
            })
        }
        Err(e) => {
            error!("Failed to update setting value: {}", e);
            HttpResponse::BadRequest().json(SettingResponse {
                category,
                setting,
                value: value.into_inner(),
                success: false,
                error: Some(e),
            })
        }
    }
}

pub async fn get_category_settings(
    settings: web::Data<Arc<RwLock<Settings>>>,
    path: web::Path<String>,
) -> HttpResponse {
    let settings_read = settings.read().await;
    let settings_value = serde_json::to_value(&*settings_read)
        .map_err(|e| format!("Failed to serialize settings: {}", e))
        .unwrap_or_default();

    let debug_enabled = settings_value
        .get("system")
        .and_then(|s| s.get("debug"))
        .and_then(|d| d.get("enabled"))
        .and_then(|e| e.as_bool())
        .unwrap_or(false);

    let log_json = debug_enabled
        && settings_value
            .get("system")
            .and_then(|s| s.get("debug"))
            .and_then(|d| d.get("log_full_json"))
            .and_then(|l| l.as_bool())
            .unwrap_or(false);

    let category = path.into_inner();
    match get_category_settings_value(&settings_read, &category) {
        Ok(value) => {
            if log_json {
                debug!(
                    "Category '{}' settings: {}",
                    category,
                    serde_json::to_string_pretty(&value).unwrap_or_default()
                );
            }
            let settings_map: HashMap<String, Value> = value
                .as_object()
                .map(|m| m.iter().map(|(k, v)| (k.clone(), v.clone())).collect())
                .unwrap_or_default();

            HttpResponse::Ok().json(CategorySettingsResponse {
                category: category.clone(),
                settings: settings_map,
                success: true,
                error: None,
            })
        }
        Err(e) => {
            error!("Failed to get category settings for '{}': {}", category, e);
            HttpResponse::NotFound().json(CategorySettingsResponse {
                category: category.clone(),
                settings: HashMap::new(),
                success: false,
                error: Some(e),
            })
        }
    }
}

pub async fn get_visualization_settings(
    app_state: web::Data<AppState>,
    category: web::Path<String>,
) -> Result<HttpResponse, actix_web::Error> {
    debug!("Getting settings for category: {}", category);

    if category.as_str() == "client_debug" {
        debug!("Checking UI container status for debugging");
    }

    let settings = app_state.settings.read().await;
    Ok(HttpResponse::Ok().json(&*settings))
}

pub async fn get_settings_category(
    category: web::Path<String>,
    app_state: web::Data<AppState>,
) -> Result<HttpResponse, Error> {
    let settings = app_state.settings.read().await;
    let settings_value = serde_json::to_value(&*settings).map_err(ErrorInternalServerError)?;

    let value = match category.as_str() {
        cat if cat.starts_with("visualization.") || cat.starts_with("system.") || cat == "xr" => {
            let parts: Vec<&str> = cat.split('.').collect();
            let mut current_value = &settings_value;

            for part in parts {
                current_value = match current_value.get(part) {
                    Some(v) => v,
                    None => return Ok(HttpResponse::NotFound().finish()),
                };
            }
            current_value.clone()
        }
        _ => return Ok(HttpResponse::NotFound().finish()),
    };

    Ok(HttpResponse::Ok().json(value))
}

fn save_settings_to_file(settings: &Settings) -> std::io::Result<()> {
    debug!("Attempting to save settings to file");

    let settings_path = std::env::var("SETTINGS_FILE_PATH")
        .map(PathBuf::from)
        .unwrap_or_else(|_| PathBuf::from("/app/settings.yaml"));

    info!("Attempting to save settings to: {:?}", settings_path);

    if let Some(parent) = settings_path.parent() {
        match fs::create_dir_all(parent) {
            Ok(_) => debug!("Created parent directories: {:?}", parent),
            Err(e) => {
                error!("Failed to create parent directories: {}", e);
                return Err(e);
            }
        }
    }

    if settings_path.exists() {
        match fs::metadata(&settings_path) {
            Ok(metadata) => {
                if metadata.permissions().readonly() {
                    error!("Settings file is read-only: {:?}", settings_path);
                    return Err(std::io::Error::new(
                        std::io::ErrorKind::PermissionDenied,
                        "Settings file is read-only",
                    ));
                }
            }
            Err(e) => {
                error!("Failed to check settings file permissions: {}", e);
                return Err(e);
            }
        }
    }

    let yaml_string = match serde_yaml::to_string(&settings) {
        Ok(s) => s,
        Err(e) => {
            error!("Failed to serialize settings to YAML: {}", e);
            return Err(std::io::Error::new(std::io::ErrorKind::Other, e));
        }
    };

    match fs::write(&settings_path, yaml_string) {
        Ok(_) => {
            info!("Settings saved successfully to: {:?}", settings_path);
            Ok(())
        }
        Err(e) => {
            error!("Failed to write settings file: {}", e);
            Err(e)
        }
    }
}

pub fn config(cfg: &mut web::ServiceConfig) {
    cfg.service(
        web::scope("/visualization")
            .route("/settings/{category}/{setting}", web::get().to(get_setting))
            .route(
                "/settings/{category}/{setting}",
                web::put().to(update_setting),
            )
            .route("/settings/{category}", web::get().to(get_category_settings))
            .route(
                "/get_settings/{category}",
                web::get().to(get_visualization_settings),
            ),
    );
}

----
models/pagination.rs
use serde::{Deserialize, Serialize};
use crate::models::edge::Edge;
use crate::utils::socket_flow_messages::Node;

#[derive(Debug, Deserialize)]
pub struct PaginationParams {
    pub page: Option<u32>,
    pub page_size: Option<u32>,
}

#[derive(Debug, Serialize)]
pub struct PaginatedGraphData {
    pub nodes: Vec<Node>,
    pub edges: Vec<Edge>,
    pub total_pages: u32,
    pub current_page: u32,
    pub total_nodes: usize,
    pub total_edges: usize,
    pub metadata: serde_json::Value,
}

----
models/protected_settings.rs
use serde::{Deserialize, Serialize};
use chrono::Utc;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ApiKeys {
    pub perplexity: Option<String>,
    pub openai: Option<String>,
    pub ragflow: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NostrUser {
    pub pubkey: String,
    pub npub: String,
    pub is_power_user: bool,
    pub api_keys: ApiKeys,
    pub last_seen: i64,
    pub session_token: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ProtectedSettings {
    pub network: NetworkSettings,
    pub security: SecuritySettings,
    pub websocket_server: WebSocketServerSettings,
    pub users: std::collections::HashMap<String, NostrUser>,
    pub default_api_keys: ApiKeys,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NetworkSettings {
    pub bind_address: String,
    pub domain: String,
    pub port: u16,
    pub enable_http2: bool,
    pub enable_tls: bool,
    pub min_tls_version: String,
    pub max_request_size: usize,
    pub enable_rate_limiting: bool,
    pub rate_limit_requests: u32,
    pub rate_limit_window: u32,
    pub tunnel_id: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SecuritySettings {
    pub allowed_origins: Vec<String>,
    pub audit_log_path: String,
    pub cookie_httponly: bool,
    pub cookie_samesite: String,
    pub cookie_secure: bool,
    pub csrf_token_timeout: u32,
    pub enable_audit_logging: bool,
    pub enable_request_validation: bool,
    pub session_timeout: u32,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct WebSocketServerSettings {
    pub max_connections: usize,
    pub max_message_size: usize,
    pub url: String,
}

impl Default for ApiKeys {
    fn default() -> Self {
        Self {
            perplexity: None,
            openai: None,
            ragflow: None,
        }
    }
}

impl Default for ProtectedSettings {
    fn default() -> Self {
        Self {
            network: NetworkSettings {
                bind_address: "127.0.0.1".to_string(),
                domain: "localhost".to_string(),
                port: 3000,
                enable_http2: true,
                enable_tls: false,
                min_tls_version: "TLS1.2".to_string(),
                max_request_size: 10 * 1024 * 1024, // 10MB
                enable_rate_limiting: true,
                rate_limit_requests: 100,
                rate_limit_window: 60,
                tunnel_id: String::new(),
            },
            security: SecuritySettings {
                allowed_origins: vec!["http://localhost:3000".to_string()],
                audit_log_path: "./audit.log".to_string(),
                cookie_httponly: true,
                cookie_samesite: "Lax".to_string(),
                cookie_secure: false,
                csrf_token_timeout: 3600,
                enable_audit_logging: true,
                enable_request_validation: true,
                session_timeout: 86400,
            },
            websocket_server: WebSocketServerSettings {
                max_connections: 100,
                max_message_size: 32 * 1024 * 1024, // 32MB
                url: String::new(),
            },
            users: std::collections::HashMap::new(),
            default_api_keys: ApiKeys::default(),
        }
    }
}

impl ProtectedSettings {
    pub fn merge(&mut self, other: serde_json::Value) -> Result<(), String> {
        if let Some(network) = other.get("network") {
            if let Ok(network_settings) = serde_json::from_value(network.clone()) {
                self.network = network_settings;
            }
        }

        if let Some(security) = other.get("security") {
            if let Ok(security_settings) = serde_json::from_value(security.clone()) {
                self.security = security_settings;
            }
        }

        if let Some(websocket) = other.get("websocketServer") {
            if let Ok(websocket_settings) = serde_json::from_value(websocket.clone()) {
                self.websocket_server = websocket_settings;
            }
        }

        if let Some(users) = other.get("users") {
            if let Ok(user_settings) = serde_json::from_value(users.clone()) {
                self.users = user_settings;
            }
        }

        if let Some(api_keys) = other.get("defaultApiKeys") {
            if let Ok(keys) = serde_json::from_value(api_keys.clone()) {
                self.default_api_keys = keys;
            }
        }

        Ok(())
    }

    pub fn get_api_keys(&self, pubkey: &str) -> ApiKeys {
        if let Some(user) = self.users.get(pubkey) {
            if user.is_power_user {
                // Power users get environment-based keys
                ApiKeys {
                    perplexity: std::env::var("PERPLEXITY_API_KEY").ok(),
                    openai: std::env::var("OPENAI_API_KEY").ok(),
                    ragflow: std::env::var("RAGFLOW_API_KEY").ok(),
                }
            } else {
                // Normal users get their stored keys
                user.api_keys.clone()
            }
        } else {
            // Default keys for unauthenticated users
            self.default_api_keys.clone()
        }
    }

    pub fn validate_client_token(&self, pubkey: &str, token: &str) -> bool {
        if let Some(user) = self.users.get(pubkey) {
            if let Some(session_token) = &user.session_token {
                return session_token == token;
            }
        }
        false
    }

    pub fn store_client_token(&mut self, pubkey: String, token: String) {
        if let Some(user) = self.users.get_mut(&pubkey) {
            user.session_token = Some(token);
            user.last_seen = Utc::now().timestamp();
        }
    }

    pub fn cleanup_expired_tokens(&mut self, max_age_hours: i64) {
        let now = Utc::now().timestamp();
        let max_age_secs = max_age_hours * 3600;
        
        self.users.retain(|_, user| {
            now - user.last_seen < max_age_secs
        });
    }

    pub fn update_user_api_keys(&mut self, pubkey: &str, api_keys: ApiKeys) -> Result<NostrUser, String> {
        if let Some(user) = self.users.get_mut(pubkey) {
            if !user.is_power_user {
                user.api_keys = api_keys;
                user.last_seen = Utc::now().timestamp();
                Ok(user.clone())
            } else {
                Err("Cannot update API keys for power users".to_string())
            }
        } else {
            Err("User not found".to_string())
        }
    }

    pub fn load(path: &str) -> Result<Self, String> {
        let content = std::fs::read_to_string(path)
            .map_err(|e| format!("Failed to read protected settings: {}", e))?;
        
        serde_json::from_str(&content)
            .map_err(|e| format!("Failed to parse protected settings: {}", e))
    }

    pub fn save(&self, path: &str) -> Result<(), String> {
        let content = serde_json::to_string_pretty(self)
            .map_err(|e| format!("Failed to serialize protected settings: {}", e))?;
        
        std::fs::write(path, content)
            .map_err(|e| format!("Failed to write protected settings: {}", e))
    }
}
----
models/mod.rs
pub mod edge;
pub mod graph;
pub mod metadata;
pub mod node;
pub mod pagination;
pub mod protected_settings;
pub mod simulation_params;
pub mod ui_settings;
pub mod user_settings;

pub use metadata::MetadataStore;
pub use pagination::PaginationParams;
pub use protected_settings::ProtectedSettings;
pub use simulation_params::SimulationParams;
pub use ui_settings::UISettings;
pub use user_settings::UserSettings;

----
models/ui_settings.rs
use serde::{Deserialize, Serialize};
use crate::config::{
    DebugSettings, Settings, VisualizationSettings, XRSettings,
};

#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct UISettings {
    pub visualization: VisualizationSettings,
    pub system: UISystemSettings,
    pub xr: XRSettings,
}

#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct UISystemSettings {
    pub websocket: WebSocketClientSettings,
    pub debug: DebugSettings,
}

#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct WebSocketClientSettings {
    pub reconnect_attempts: u32,
    pub reconnect_delay: u64,
    pub binary_chunk_size: usize,
    pub compression_enabled: bool,
    pub compression_threshold: usize,
    pub update_rate: u32,
}

impl From<&Settings> for UISettings {
    fn from(settings: &Settings) -> Self {
        Self {
            visualization: settings.visualization.clone(),
            system: UISystemSettings {
                websocket: WebSocketClientSettings {
                    reconnect_attempts: settings.system.websocket.reconnect_attempts,
                    reconnect_delay: settings.system.websocket.reconnect_delay,
                    binary_chunk_size: settings.system.websocket.binary_chunk_size,
                    compression_enabled: settings.system.websocket.compression_enabled,
                    compression_threshold: settings.system.websocket.compression_threshold,
                    update_rate: settings.system.websocket.update_rate,
                },
                debug: settings.system.debug.clone(),
            },
            xr: settings.xr.clone(),
        }
    }
}

impl UISettings {
    pub fn merge_into_settings(&self, settings: &mut Settings) {
        settings.visualization = self.visualization.clone();
        settings.system.websocket.reconnect_attempts = self.system.websocket.reconnect_attempts;
        settings.system.websocket.reconnect_delay = self.system.websocket.reconnect_delay;
        settings.system.websocket.binary_chunk_size = self.system.websocket.binary_chunk_size;
        settings.system.websocket.compression_enabled = self.system.websocket.compression_enabled;
        settings.system.websocket.compression_threshold = self.system.websocket.compression_threshold;
        settings.system.websocket.update_rate = self.system.websocket.update_rate;
        settings.system.debug = self.system.debug.clone();
        settings.xr = self.xr.clone();
    }
}
----
models/graph.rs
use crate::utils::socket_flow_messages::Node;
use super::edge::Edge;
use super::metadata::MetadataStore;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Represents the graph data structure containing nodes, edges, and metadata.
/// All fields use camelCase serialization for client compatibility.
#[derive(Default, Serialize, Deserialize, Clone, Debug)]
#[serde(rename_all = "camelCase")]
pub struct GraphData {
    /// List of nodes in the graph.
    pub nodes: Vec<Node>,
    /// List of edges connecting the nodes.
    pub edges: Vec<Edge>,
    /// Metadata associated with the graph, using camelCase keys.
    pub metadata: MetadataStore,
    /// Mapping from numeric ID to metadata ID (filename) for lookup
    #[serde(skip)]
    pub id_to_metadata: HashMap<String, String>,
}

impl GraphData {
    pub fn new() -> Self {
        Self {
            nodes: Vec::new(),
            edges: Vec::new(),
            metadata: MetadataStore::new(),
            id_to_metadata: HashMap::new(),
        }
    }
}

----
models/edge.rs
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Edge structure representing connections between nodes
#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Edge {
    pub source: String,
    pub target: String,
    pub weight: f32,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub edge_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,
}

impl Edge {
    pub fn new(source: String, target: String, weight: f32) -> Self {
        Self {
            source,
            target,
            weight,
            edge_type: None,
            metadata: None,
        }
    }
}

----
models/metadata.rs
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

/// Stores metadata about a processed file.
/// All fields use camelCase serialization for client compatibility.
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
#[serde(rename_all = "camelCase")]
pub struct Metadata {
    #[serde(default)]
    pub file_name: String,
    #[serde(default)]
    pub file_size: usize,
    #[serde(default)]
    pub node_size: f64,
    #[serde(default)]
    pub hyperlink_count: usize,
    #[serde(default)]
    pub sha1: String,
    #[serde(default = "default_node_id")]
    pub node_id: String,
    #[serde(default = "Utc::now")]
    pub last_modified: DateTime<Utc>,
    #[serde(default)]
    pub perplexity_link: String,
    #[serde(default)]
    pub last_perplexity_process: Option<DateTime<Utc>>,
    #[serde(default)]
    pub topic_counts: HashMap<String, usize>,
}

// Default function for node_id to ensure backward compatibility
fn default_node_id() -> String {
    // Will be replaced with actual ID during processing
    "0".to_string()
}

/// Type alias for metadata storage with camelCase keys
pub type MetadataStore = HashMap<String, Metadata>;

// Implement helper methods directly on HashMap<String, Metadata>
pub trait MetadataOps {
    fn validate_files(&self, markdown_dir: &str) -> bool;
    fn get_max_node_id(&self) -> u32;
}

impl MetadataOps for MetadataStore {
    fn get_max_node_id(&self) -> u32 {
        // Find the maximum node_id in the metadata store
        self.values()
            .map(|m| m.node_id.parse::<u32>().unwrap_or(0))
            .max()
            .unwrap_or(0)
    }
    
    fn validate_files(&self, markdown_dir: &str) -> bool {
        if self.is_empty() {
            return false;
        }

        // Check if the markdown files referenced in metadata actually exist
        for filename in self.keys() {
            let file_path = format!("{}/{}", markdown_dir, filename);
            if !std::path::Path::new(&file_path).exists() {
                return false;
            }
        }
        
        true
    }
}

----
models/node.rs
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::sync::atomic::{AtomicU32, Ordering};
use crate::utils::socket_flow_messages::BinaryNodeData;
use crate::types::vec3::Vec3Data;

// Static counter for generating unique numeric IDs
static NEXT_NODE_ID: AtomicU32 = AtomicU32::new(1);  // Start from 1 (0 could be reserved)

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Node {
    // Core data
    pub id: String,
    pub metadata_id: String,  // Store the original filename for lookup
    pub label: String,
    pub data: BinaryNodeData,

    // Metadata
    #[serde(skip_serializing_if = "HashMap::is_empty")]
    pub metadata: HashMap<String, String>,
    #[serde(skip)]
    pub file_size: u64,

    // Rendering properties
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub node_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<f32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub weight: Option<f32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user_data: Option<HashMap<String, String>>,
}

impl Node {
    pub fn new(metadata_id: String) -> Self {
        Self::new_with_id(metadata_id, None)
    }
    
    pub fn new_with_id(metadata_id: String, provided_id: Option<String>) -> Self {
        // Use provided ID if available, otherwise generate a new one
        let id = match provided_id {
            Some(id) if !id.is_empty() && id != "0" => {
                // Use the provided ID from metadata
                id
            },
            _ => {
                NEXT_NODE_ID.fetch_add(1, Ordering::SeqCst).to_string()
            }
        };
        
        Self {
            id,
            metadata_id: metadata_id.clone(),
            label: metadata_id,
            data: BinaryNodeData {
                position: Vec3Data::zero(),
                velocity: Vec3Data::zero(),
                mass: 0,
                flags: 1, // Active by default
                padding: [0, 0],
            },
            metadata: HashMap::new(),
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        }
    }

    pub fn set_file_size(&mut self, size: u64) {
        self.file_size = size;
        // Calculate mass using log scale to prevent extremely large masses
        let base_mass = ((size + 1) as f32).log10() / 4.0;
        // Scale to 0-255 range for u8
        self.data.mass = ((base_mass.max(0.1).min(10.0) * 25.5) as u8).max(1);
    }

    pub fn with_position(mut self, x: f32, y: f32, z: f32) -> Self {
        self.data.position = Vec3Data::new(x, y, z);
        self
    }

    pub fn with_velocity(mut self, vx: f32, vy: f32, vz: f32) -> Self {
        self.data.velocity = Vec3Data::new(vx, vy, vz);
        self
    }

    pub fn with_label(mut self, label: String) -> Self {
        self.label = label;
        self
    }

    pub fn with_metadata(mut self, key: String, value: String) -> Self {
        self.metadata.insert(key, value);
        self
    }

    pub fn with_type(mut self, node_type: String) -> Self {
        self.node_type = Some(node_type);
        self
    }

    pub fn with_size(mut self, size: f32) -> Self {
        self.size = Some(size);
        self
    }

    pub fn with_color(mut self, color: String) -> Self {
        self.color = Some(color);
        self
    }

    pub fn with_weight(mut self, weight: f32) -> Self {
        self.weight = Some(weight);
        self
    }

    pub fn with_group(mut self, group: String) -> Self {
        self.group = Some(group);
        self
    }

    // Convenience getters/setters for position and velocity
    pub fn x(&self) -> f32 { self.data.position.x }
    pub fn y(&self) -> f32 { self.data.position.y }
    pub fn z(&self) -> f32 { self.data.position.z }
    pub fn vx(&self) -> f32 { self.data.velocity.x }
    pub fn vy(&self) -> f32 { self.data.velocity.y }
    pub fn vz(&self) -> f32 { self.data.velocity.z }
    
    pub fn set_x(&mut self, val: f32) { self.data.position.x = val; }
    pub fn set_y(&mut self, val: f32) { self.data.position.y = val; }
    pub fn set_z(&mut self, val: f32) { self.data.position.z = val; }
    pub fn set_vx(&mut self, val: f32) { self.data.velocity.x = val; }
    pub fn set_vy(&mut self, val: f32) { self.data.velocity.y = val; }
    pub fn set_vz(&mut self, val: f32) { self.data.velocity.z = val; }
}

#[cfg(test)]
mod tests {
    use std::sync::atomic::Ordering;
    use super::*;

    #[test]
    fn test_numeric_id_generation() {
        // Read the current value of the counter (it might have been incremented elsewhere)
        let start_value = NEXT_NODE_ID.load(Ordering::SeqCst);
        
        // Create two nodes with different metadata IDs
        let node1 = Node::new("test-file-1.md".to_string());
        let node2 = Node::new("test-file-2.md".to_string());
        
        // Verify each node has a unique numeric ID
        assert_ne!(node1.id, node2.id);
        
        // Verify metadata_id is stored correctly
        assert_eq!(node1.metadata_id, "test-file-1.md");
        assert_eq!(node2.metadata_id, "test-file-2.md");
        
        // Verify IDs are consecutive numbers (as strings)
        let id1: u32 = node1.id.parse().unwrap();
        let id2: u32 = node2.id.parse().unwrap();
        assert_eq!(id1 + 1, id2);
        
        // Verify final counter value
        let end_value = NEXT_NODE_ID.load(Ordering::SeqCst);
        assert_eq!(end_value, start_value + 2);
    }

    #[test]
    fn test_node_creation() {
        let node = Node::new("test".to_string())
            .with_label("Test Node".to_string())
            .with_position(1.0, 2.0, 3.0)
            .with_velocity(0.1, 0.2, 0.3)
            .with_type("test_type".to_string())
            .with_size(1.5)
            .with_color("#FF0000".to_string())
            .with_weight(2.0)
            .with_group("group1".to_string());

        // ID should be a numeric string now, not "test"
        assert!(node.id.parse::<u32>().is_ok(), "ID should be numeric, got: {}", node.id);
        assert_eq!(node.metadata_id, "test");
        assert_eq!(node.label, "Test Node");
        assert_eq!(node.data.position.x, 1.0);
        assert_eq!(node.data.position.y, 2.0);
        assert_eq!(node.data.position.z, 3.0);
        assert_eq!(node.data.velocity.x, 0.1);
        assert_eq!(node.data.velocity.y, 0.2);
        assert_eq!(node.data.velocity.z, 0.3);
        assert_eq!(node.node_type, Some("test_type".to_string()));
        assert_eq!(node.size, Some(1.5));
        assert_eq!(node.color, Some("#FF0000".to_string()));
        assert_eq!(node.weight, Some(2.0));
        assert_eq!(node.group, Some("group1".to_string()));
    }

    #[test]
    fn test_position_velocity_getters_setters() {
        let mut node = Node::new("test".to_string());
        
        node.set_x(1.0);
        node.set_y(2.0);
        node.set_z(3.0);
        node.set_vx(0.1);
        node.set_vy(0.2);
        node.set_vz(0.3);

        assert_eq!(node.x(), 1.0);
        assert_eq!(node.y(), 2.0);
        assert_eq!(node.z(), 3.0);
        assert_eq!(node.vx(), 0.1);
        assert_eq!(node.vy(), 0.2);
        assert_eq!(node.vz(), 0.3);
    }

    #[test]
    fn test_mass_calculation() {
        let mut node = Node::new("test".to_string());
        
        // Test small file
        node.set_file_size(100);  // 100 bytes
        assert!(node.data.mass > 0 && node.data.mass < 128);

        // Test large file
        node.set_file_size(1_000_000);  // 1MB
        assert!(node.data.mass > 128 && node.data.mass < 255);
    }
}

----
models/simulation_params.rs
use serde::{Deserialize, Serialize};
use bytemuck::{Pod, Zeroable};

#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq)]
#[serde(rename_all = "camelCase")]
pub enum SimulationMode {
    Remote,  // GPU-accelerated remote computation (default)
    GPU,     // Local GPU computation (deprecated)
    Local,   // CPU-based computation (disabled)
}

impl Default for SimulationMode {
    fn default() -> Self {
        SimulationMode::Remote
    }
}

#[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq)]
#[serde(rename_all = "camelCase")]
pub enum SimulationPhase {
    Initial,    // Heavy computation for initial layout
    Dynamic,    // Lighter computation for dynamic updates
    Finalize,   // Final positioning and cleanup
}

impl Default for SimulationPhase {
    fn default() -> Self {
        SimulationPhase::Initial
    }
}

// GPU-compatible simulation parameters
#[repr(C)]
#[derive(Default, Clone, Copy, Pod, Zeroable, Debug)]
pub struct GPUSimulationParams {
    pub iterations: u32,
    pub spring_strength: f32,
    pub repulsion: f32,
    pub damping: f32,
    pub max_repulsion_distance: f32,
    pub viewport_bounds: f32,
    pub mass_scale: f32,
    pub boundary_damping: f32,
}

#[derive(Default, Serialize, Deserialize, Clone, Debug)]
#[serde(rename_all = "camelCase")]
pub struct SimulationParams {
    // Core iteration parameters
    pub iterations: u32,           // Range: 1-500, Default: varies by phase
    pub time_step: f32,           // Range: 0.01-1, Default: 0.2 (5fps)
    
    // Force parameters
    pub spring_strength: f32,      // Range: 0.1-10, Default: 0.5
    pub repulsion: f32,           // Range: 1-2000, Default: 100
    pub max_repulsion_distance: f32, // Range: 100-2000, Default: 500
    
    // Mass and damping
    pub mass_scale: f32,          // Range: 0.1-5, Default: 1.0, Affects force scaling
    pub damping: f32,             // Range: 0-1, Default: 0.5
    pub boundary_damping: f32,    // Range: 0.5-1, Default: 0.9
    
    // Boundary control
    pub viewport_bounds: f32,     // Range: 100-5000, Default: 1000
    pub enable_bounds: bool,      // Default: true
    
    // Simulation state
    pub phase: SimulationPhase,   // Current simulation phase
    pub mode: SimulationMode,     // Computation mode
}

impl SimulationParams {
    pub fn new() -> Self {
        Self {
            iterations: 100,
            time_step: 0.2,
            spring_strength: 0.5,
            repulsion: 100.0,
            max_repulsion_distance: 500.0,
            mass_scale: 1.0,
            damping: 0.5,
            boundary_damping: 0.9,
            viewport_bounds: 1000.0,
            enable_bounds: true,
            phase: SimulationPhase::Initial,
            mode: SimulationMode::Remote,
        }
    }

    pub fn with_phase(phase: SimulationPhase) -> Self {
        match phase {
            SimulationPhase::Initial => Self {
                iterations: 300,
                time_step: 0.2,
                spring_strength: 0.3,      // Reduced for initial spread
                repulsion: 200.0,          // Increased for better separation
                max_repulsion_distance: 800.0, // Larger range for initial layout
                mass_scale: 1.2,           // Slightly higher mass influence
                damping: 0.95,             // High damping for stability
                boundary_damping: 0.95,
                viewport_bounds: 1000.0,
                enable_bounds: true,
                phase,
                mode: SimulationMode::Remote,
            },
            SimulationPhase::Dynamic => Self {
                iterations: 50,
                time_step: 0.2,
                spring_strength: 0.5,
                repulsion: 100.0,
                max_repulsion_distance: 500.0,
                mass_scale: 1.0,
                damping: 0.5,
                boundary_damping: 0.9,
                viewport_bounds: 1000.0,
                enable_bounds: true,
                phase,
                mode: SimulationMode::Remote,
            },
            SimulationPhase::Finalize => Self {
                iterations: 200,
                time_step: 0.2,
                spring_strength: 0.1,      // Minimal spring forces
                repulsion: 50.0,           // Reduced repulsion
                max_repulsion_distance: 300.0, // Tighter packing
                mass_scale: 0.8,           // Reduced mass influence
                damping: 0.95,             // High damping for stability
                boundary_damping: 0.95,
                viewport_bounds: 1000.0,
                enable_bounds: true,
                phase,
                mode: SimulationMode::Remote,
            },
        }
    }

    // Convert to GPU-compatible parameters
    pub fn to_gpu_params(&self) -> GPUSimulationParams {
        GPUSimulationParams {
            iterations: self.iterations,
            spring_strength: self.spring_strength,
            repulsion: self.repulsion,
            damping: self.damping,
            max_repulsion_distance: self.max_repulsion_distance,
            viewport_bounds: if self.enable_bounds { self.viewport_bounds } else { 0.0 },
            mass_scale: self.mass_scale,
            boundary_damping: self.boundary_damping,
        }
    }
}

----
models/user_settings.rs
use serde::{Deserialize, Serialize};
use std::fs;
use std::path::PathBuf;
use std::sync::{Arc, RwLock};
use std::collections::HashMap;
use std::time::{Duration, Instant};
use log::{info, error, debug, warn};
use once_cell::sync::Lazy;

use crate::models::UISettings;

// Global cache for user settings
static USER_SETTINGS_CACHE: Lazy<Arc<RwLock<HashMap<String, CachedUserSettings>>>> = 
    Lazy::new(|| Arc::new(RwLock::new(HashMap::new())));

// Cache expiration time (10 minutes)
const CACHE_EXPIRATION: Duration = Duration::from_secs(10 * 60);

// Cache entry with timestamp
struct CachedUserSettings {
    settings: UserSettings,
    timestamp: Instant,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct UserSettings {
    pub pubkey: String,
    pub settings: UISettings,
    pub last_modified: i64,
}

impl UserSettings {
    pub fn new(pubkey: &str, settings: UISettings) -> Self {
        Self {
            pubkey: pubkey.to_string(),
            settings,
            last_modified: chrono::Utc::now().timestamp(),
        }
    }

    pub fn load(pubkey: &str) -> Option<Self> {
        // First check the cache
        {
            let cache = USER_SETTINGS_CACHE.read().unwrap();
            if let Some(cached) = cache.get(pubkey) {
                // Check if cache is still valid
                if cached.timestamp.elapsed() < CACHE_EXPIRATION {
                    debug!("Using cached settings for user {}", pubkey);
                    return Some(cached.settings.clone());
                }
                // Cache expired, will reload from disk
                debug!("Cache expired for user {}, reloading from disk", pubkey);
            }
        }
        
        // Not in cache or expired, load from disk
        let path = Self::get_settings_path(pubkey);
        match fs::read_to_string(&path) {
            Ok(content) => {
                match serde_yaml::from_str::<UserSettings>(&content) {
                    Ok(settings) => {
                        // Add to cache
                        let settings_clone = settings.clone();
                        {
                            let mut cache = USER_SETTINGS_CACHE.write().unwrap();
                            cache.insert(pubkey.to_string(), CachedUserSettings {
                                settings: settings_clone,
                                timestamp: Instant::now(),
                            });
                        }
                        info!("Loaded settings for user {} and added to cache", pubkey);
                        Some(settings)
                    }
                    Err(e) => {
                        error!("Failed to parse settings for user {}: {}", pubkey, e);
                        None
                    }
                }
            }
            Err(e) => {
                debug!("No settings file found for user {}: {}", pubkey, e);
                None
            },
        }
    }

    pub fn save(&self) -> Result<(), String> {
        let path = Self::get_settings_path(&self.pubkey);
        
        // Update cache first (this is fast and ensures immediate availability)
        {
            let mut cache = USER_SETTINGS_CACHE.write().unwrap();
            cache.insert(self.pubkey.clone(), CachedUserSettings {
                settings: self.clone(),
                timestamp: Instant::now(),
            });
            debug!("Updated cache for user {}", self.pubkey);
        }
        
        // Ensure directory exists
        if let Some(parent) = path.parent() {
            if let Err(e) = fs::create_dir_all(parent) {
                warn!("Failed to create settings directory: {}", e);
                return Err(format!("Failed to create settings directory: {}", e));
            }
        }

        // Save settings to disk asynchronously to avoid blocking
        // For now we'll use a simple thread, but this could be improved with a proper async task
        let pubkey = self.pubkey.clone();
        let settings_clone = self.clone();
        
        std::thread::spawn(move || {
            debug!("Background thread saving settings for user {}", pubkey);
            match serde_yaml::to_string(&settings_clone) {
                Ok(yaml) => {
                    match fs::write(&path, yaml) {
                        Ok(_) => info!("Saved settings for user {} to disk", pubkey),
                        Err(e) => error!("Failed to write settings file for {}: {}", pubkey, e)
                    }
                }
                Err(e) => error!("Failed to serialize settings for {}: {}", pubkey, e),
            }
        });
        
        // Return success immediately since we've updated the cache
        Ok(())
    }

    fn get_settings_path(pubkey: &str) -> PathBuf {
        PathBuf::from("/app/user_settings").join(format!("{}.yaml", pubkey))
    }
    
    // Clear the cache entry for a specific user
    pub fn clear_cache(pubkey: &str) {
        let mut cache = USER_SETTINGS_CACHE.write().unwrap();
        if cache.remove(pubkey).is_some() {
            debug!("Cleared cache for user {}", pubkey);
        }
    }
    
    // Clear all cached settings
    pub fn clear_all_cache() {
        let mut cache = USER_SETTINGS_CACHE.write().unwrap();
        let count = cache.len();
        cache.clear();
        debug!("Cleared all cached settings ({} entries)", count);
    }
}
----
services/file_service.rs
use crate::models::metadata::{Metadata, MetadataStore, MetadataOps};
use crate::models::graph::GraphData;
use crate::config::Settings;
use serde::{Deserialize, Serialize};
use log::{info, debug, error};
use std::sync::atomic::{AtomicU32, Ordering};
use regex::Regex;
use std::fs;
use std::path::Path;
use chrono::Utc;
use std::sync::Arc;
use tokio::sync::RwLock;
use std::error::Error as StdError;
use std::time::Duration;
use tokio::time::sleep;
use actix_web::web;
use std::collections::HashMap;
use std::fs::File;
use std::io::Error;
use super::github::{GitHubClient, ContentAPI, GitHubConfig};

// Constants
const METADATA_PATH: &str = "/app/data/metadata/metadata.json";
pub const MARKDOWN_DIR: &str = "/app/data/markdown";
const GITHUB_API_DELAY: Duration = Duration::from_millis(500);

#[derive(Serialize, Deserialize, Clone)]
pub struct ProcessedFile {
    pub file_name: String,
    pub content: String,
    pub is_public: bool,
    pub metadata: Metadata,
}

pub struct FileService {
    settings: Arc<RwLock<Settings>>,
    // Counter for assigning node IDs, initialized based on existing metadata
    node_id_counter: AtomicU32,
}

impl FileService {
    pub fn new(settings: Arc<RwLock<Settings>>) -> Self {
        // Initialize with a default counter
        let service = Self { 
            settings,
            node_id_counter: AtomicU32::new(1),
        };
        
        // Try to initialize the counter based on existing metadata
        if let Ok(metadata) = Self::load_or_create_metadata() {
            let max_id = metadata.get_max_node_id();
            if max_id > 0 {
                // Start from the next ID after the maximum
                service.node_id_counter.store(max_id + 1, Ordering::SeqCst);
                info!("Initialized node ID counter to {} based on existing metadata", max_id + 1);
            }
        }
        
        service
    }
    
    /// Get the next unique node ID
    fn get_next_node_id(&self) -> u32 {
        self.node_id_counter.fetch_add(1, Ordering::SeqCst)
    }
    
    /// Update node IDs for processed files
    fn update_node_ids(&self, processed_files: &mut Vec<ProcessedFile>) {
        for processed_file in processed_files {
            if processed_file.metadata.node_id == "0" {
                processed_file.metadata.node_id = self.get_next_node_id().to_string();
            }
        }
    }

    /// Process uploaded file and return graph data
    pub async fn process_file_upload(&self, payload: web::Bytes) -> Result<GraphData, Error> {
        let content = String::from_utf8(payload.to_vec())
            .map_err(|e| Error::new(std::io::ErrorKind::InvalidData, e.to_string()))?;
        let metadata = Self::load_or_create_metadata()
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e))?;
        let mut graph_data = GraphData::new();
        
        // Create a temporary file to process
        let temp_filename = format!("temp_{}.md", Utc::now().timestamp());
        let temp_path = format!("{}/{}", MARKDOWN_DIR, temp_filename);
        if let Err(e) = fs::write(&temp_path, &content) {
            return Err(Error::new(std::io::ErrorKind::Other, e.to_string()));
        }

        // Extract references and create metadata
        let valid_nodes: Vec<String> = metadata.keys()
            .map(|name| name.trim_end_matches(".md").to_string())
            .collect();

        let references = Self::extract_references(&content, &valid_nodes);
        let topic_counts = Self::convert_references_to_topic_counts(references);

        // Create metadata for the uploaded file
        let file_size = content.len();
        let node_size = Self::calculate_node_size(file_size);
        let file_metadata = Metadata {
            file_name: temp_filename.clone(),
            file_size,
            node_size,
            node_id: "0".to_string(),
            hyperlink_count: Self::count_hyperlinks(&content),
            sha1: Self::calculate_sha1(&content),
            last_modified: Utc::now(),
            perplexity_link: String::new(),
            last_perplexity_process: None,
            topic_counts,
        };

        // Assign a unique node ID
        let mut file_metadata = file_metadata;
        file_metadata.node_id = self.get_next_node_id().to_string();

        // Update graph data
        graph_data.metadata.insert(temp_filename.clone(), file_metadata);

        // Clean up temporary file
        if let Err(e) = fs::remove_file(&temp_path) {
            error!("Failed to remove temporary file: {}", e);
        }

        Ok(graph_data)
    }

    /// List available files
    pub async fn list_files(&self) -> Result<Vec<String>, Error> {
        let metadata = Self::load_or_create_metadata()
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e))?;
        Ok(metadata.keys().cloned().collect())
    }

    /// Load a specific file and return graph data
    pub async fn load_file(&self, filename: &str) -> Result<GraphData, Error> {
        let file_path = format!("{}/{}", MARKDOWN_DIR, filename);
        if !Path::new(&file_path).exists() {
            return Err(Error::new(std::io::ErrorKind::NotFound, format!("File not found: {}", filename)));
        }

        let content = fs::read_to_string(&file_path)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;
        let metadata = Self::load_or_create_metadata()
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e))?;
        let mut graph_data = GraphData::new();

        // Extract references and update metadata
        let valid_nodes: Vec<String> = metadata.keys()
            .map(|name| name.trim_end_matches(".md").to_string())
            .collect();

        let references = Self::extract_references(&content, &valid_nodes);
        let topic_counts = Self::convert_references_to_topic_counts(references);

        // Update or create metadata for the file
        let file_size = content.len();
        let node_size = Self::calculate_node_size(file_size);
        let file_metadata = Metadata {
            file_name: filename.to_string(),
            file_size,
            node_size,
            node_id: "0".to_string(),
            hyperlink_count: Self::count_hyperlinks(&content),
            sha1: Self::calculate_sha1(&content),
            last_modified: Utc::now(),
            perplexity_link: String::new(),
            last_perplexity_process: None,
            topic_counts,
        };

        // Assign a unique node ID
        let mut file_metadata = file_metadata;
        file_metadata.node_id = self.get_next_node_id().to_string();

        // Update graph data
        graph_data.metadata.insert(filename.to_string(), file_metadata);
        
        Ok(graph_data)
    }

    /// Load metadata from file or create new if not exists
    pub fn load_or_create_metadata() -> Result<MetadataStore, String> {
        // Ensure metadata directory exists
        std::fs::create_dir_all("/app/data/metadata")
            .map_err(|e| format!("Failed to create metadata directory: {}", e))?;
        
        let metadata_path = "/app/data/metadata/metadata.json";
        
        if let Ok(file) = File::open(metadata_path) {
            info!("Loading existing metadata from {}", metadata_path);
            serde_json::from_reader(file)
                .map_err(|e| format!("Failed to parse metadata: {}", e))
        } else {
            info!("Creating new metadata file at {}", metadata_path);
            let empty_store = MetadataStore::default();
            let file = File::create(metadata_path)
                .map_err(|e| format!("Failed to create metadata file: {}", e))?;
                
            serde_json::to_writer_pretty(file, &empty_store)
                .map_err(|e| format!("Failed to write metadata: {}", e))?;
                
            // Verify file was created with correct permissions
            let metadata = std::fs::metadata(metadata_path)
                .map_err(|e| format!("Failed to verify metadata file: {}", e))?;
            
            if !metadata.is_file() {
                return Err("Metadata file was not created properly".to_string());
            }
            
            Ok(empty_store)
        }
    }

    /// Calculate node size based on file size
    fn calculate_node_size(file_size: usize) -> f64 {
        const BASE_SIZE: f64 = 1000.0; // Base file size for scaling
        const MIN_SIZE: f64 = 5.0;  // Minimum node size
        const MAX_SIZE: f64 = 50.0; // Maximum node size

        let size = (file_size as f64 / BASE_SIZE).min(5.0);
        MIN_SIZE + (size * (MAX_SIZE - MIN_SIZE) / 5.0)
    }

    /// Extract references to other files based on their names (case insensitive)
    fn extract_references(content: &str, valid_nodes: &[String]) -> Vec<String> {
        let mut references = Vec::new();
        let content_lower = content.to_lowercase();
        
        for node_name in valid_nodes {
            let node_name_lower = node_name.to_lowercase();
            
            // Create a regex pattern with word boundaries
            let pattern = format!(r"\b{}\b", regex::escape(&node_name_lower));
            if let Ok(re) = Regex::new(&pattern) {
                // Count case-insensitive matches of the filename
                let count = re.find_iter(&content_lower).count();
                
                // If we found any references, add them to the map
                if count > 0 {
                    debug!("Found {} references to {} in content", count, node_name);
                    // Add the reference multiple times based on count
                    for _ in 0..count {
                        references.push(node_name.clone());
                    }
                }
            }
        }
        
        references
    }

    fn convert_references_to_topic_counts(references: Vec<String>) -> HashMap<String, usize> {
        let mut topic_counts = HashMap::new();
        for reference in references {
            *topic_counts.entry(reference).or_insert(0) += 1;
        }
        topic_counts
    }

    /// Initialize local storage with files from GitHub
    pub async fn initialize_local_storage(
        settings: Arc<RwLock<Settings>>,
    ) -> Result<(), Box<dyn StdError + Send + Sync>> {
        // Create GitHub client using environment variables
        let github_config = GitHubConfig::from_env()
            .map_err(|e| Box::new(e) as Box<dyn StdError + Send + Sync>)?;
            
        let github = GitHubClient::new(github_config, Arc::clone(&settings)).await?;
        let content_api = ContentAPI::new(Arc::new(github));

        // Check if we already have a valid local setup
        if Self::has_valid_local_setup() {
            info!("Valid local setup found, skipping initialization");
            return Ok(());
        }

        info!("Initializing local storage with files from GitHub");

        // Ensure directories exist and have proper permissions
        Self::ensure_directories()?;

        // Get all markdown files from GitHub
        let github_files = content_api.list_markdown_files("").await?;
        info!("Found {} markdown files in GitHub", github_files.len());

        let mut metadata_store = MetadataStore::new();

        // Process files in batches to prevent timeouts
        const BATCH_SIZE: usize = 5;
        for chunk in github_files.chunks(BATCH_SIZE) {
            let mut futures = Vec::new();
            
            for file_meta in chunk {
                let file_meta = file_meta.clone();
                let content_api = content_api.clone();
                
                futures.push(async move {
                    // First check if file is public
                    match content_api.check_file_public(&file_meta.download_url).await {
                        Ok(is_public) => {
                            if !is_public {
                                debug!("Skipping non-public file: {}", file_meta.name);
                                return Ok(None);
                            }

                            // Only fetch full content for public files
                            match content_api.fetch_file_content(&file_meta.download_url).await {
                                Ok(content) => {
                                    let file_path = format!("{}/{}", MARKDOWN_DIR, file_meta.name);
                                    if let Err(e) = fs::write(&file_path, &content) {
                                        error!("Failed to write file {}: {}", file_path, e);
                                        return Err(e.into());
                                    }

                                    Ok(Some((file_meta, content)))
                                }
                                Err(e) => {
                                    error!("Failed to fetch content for {}: {}", file_meta.name, e);
                                    Err(e)
                                }
                            }
                        }
                        Err(e) => {
                            error!("Failed to check public status for {}: {}", file_meta.name, e);
                            Err(e)
                        }
                    }
                });
            }

            // Wait for batch to complete
            let results = futures::future::join_all(futures).await;
            
            for result in results {
                match result {
                    Ok(Some((file_meta, content))) => {
                        let _node_name = file_meta.name.trim_end_matches(".md").to_string();
                        let file_size = content.len();
                        let node_size = Self::calculate_node_size(file_size);

                        // Create metadata entry
                        let metadata = Metadata {
                            file_name: file_meta.name.clone(),
                            file_size,
                            node_size,
                            node_id: "0".to_string(), // Will be assigned properly later
                            hyperlink_count: Self::count_hyperlinks(&content),
                            sha1: Self::calculate_sha1(&content),
                            last_modified: file_meta.last_modified.unwrap_or_else(|| Utc::now()),
                            perplexity_link: String::new(),
                            last_perplexity_process: None,
                            topic_counts: HashMap::new(), // Will be updated later
                        };

                        metadata_store.insert(file_meta.name, metadata);
                    }
                    Ok(None) => continue, // Skipped non-public file
                    Err(e) => {
                        error!("Failed to process file in batch: {}", e);
                    }
                }
            }

            sleep(GITHUB_API_DELAY).await;
        }

        // Update topic counts after all files are processed
        Self::update_topic_counts(&mut metadata_store)?;

        // Save metadata
        info!("Saving metadata for {} public files", metadata_store.len());
        Self::save_metadata(&metadata_store)?;

        info!("Initialization complete. Processed {} public files", metadata_store.len());
        Ok(())
    }

    /// Update topic counts for all files
    fn update_topic_counts(metadata_store: &mut MetadataStore) -> Result<(), Error> {
        let valid_nodes: Vec<String> = metadata_store.keys()
            .map(|name| name.trim_end_matches(".md").to_string())
            .collect();

        for file_name in metadata_store.keys().cloned().collect::<Vec<_>>() {
            let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
            if let Ok(content) = fs::read_to_string(&file_path) {
                let references = Self::extract_references(&content, &valid_nodes);
                let topic_counts = Self::convert_references_to_topic_counts(references);
                
                if let Some(metadata) = metadata_store.get_mut(&file_name) {
                    metadata.topic_counts = topic_counts;
                }
            }
        }

        Ok(())
    }

    /// Check if we have a valid local setup
    fn has_valid_local_setup() -> bool {
        if let Ok(metadata_content) = fs::read_to_string(METADATA_PATH) {
            if metadata_content.trim().is_empty() {
                return false;
            }
            
            if let Ok(metadata) = serde_json::from_str::<MetadataStore>(&metadata_content) {
                return metadata.validate_files(MARKDOWN_DIR);
            }
        }
        false
    }

    /// Ensures all required directories exist with proper permissions
    fn ensure_directories() -> Result<(), Error> {
        // Create markdown directory
        let markdown_dir = Path::new(MARKDOWN_DIR);
        if !markdown_dir.exists() {
            info!("Creating markdown directory at {:?}", markdown_dir);
            fs::create_dir_all(markdown_dir)
                .map_err(|e| Error::new(std::io::ErrorKind::Other, format!("Failed to create markdown directory: {}", e)))?;
            // Set permissions to allow writing
            #[cfg(unix)]
            {
                use std::os::unix::fs::PermissionsExt;
                fs::set_permissions(markdown_dir, fs::Permissions::from_mode(0o777))
                    .map_err(|e| Error::new(std::io::ErrorKind::Other, format!("Failed to set markdown directory permissions: {}", e)))?;
            }
        }

        // Create metadata directory if it doesn't exist
        let metadata_dir = Path::new(METADATA_PATH).parent().unwrap();
        if !metadata_dir.exists() {
            info!("Creating metadata directory at {:?}", metadata_dir);
            fs::create_dir_all(metadata_dir)
                .map_err(|e| Error::new(std::io::ErrorKind::Other, format!("Failed to create metadata directory: {}", e)))?;
            #[cfg(unix)]
            {
                use std::os::unix::fs::PermissionsExt;
                fs::set_permissions(metadata_dir, fs::Permissions::from_mode(0o777))
                    .map_err(|e| Error::new(std::io::ErrorKind::Other, format!("Failed to set metadata directory permissions: {}", e)))?;
            }
        }

        // Verify permissions by attempting to create a test file
        let test_file = format!("{}/test_permissions", MARKDOWN_DIR);
        match fs::write(&test_file, "test") {
            Ok(_) => {
                info!("Successfully wrote test file to {}", test_file);
                fs::remove_file(&test_file)
                    .map_err(|e| Error::new(std::io::ErrorKind::Other, format!("Failed to remove test file: {}", e)))?;
                info!("Successfully removed test file");
                info!("Directory permissions verified");
                Ok(())
            },
            Err(e) => {
                error!("Failed to verify directory permissions: {}", e);
                if let Ok(current_dir) = std::env::current_dir() {
                    error!("Current directory: {:?}", current_dir);
                }
                if let Ok(dir_contents) = fs::read_dir(MARKDOWN_DIR) {
                    error!("Directory contents: {:?}", dir_contents);
                }
                Err(Error::new(std::io::ErrorKind::PermissionDenied, format!("Failed to verify directory permissions: {}", e)))
            }
        }
    }

    /// Save metadata to file
    pub fn save_metadata(metadata: &MetadataStore) -> Result<(), Error> {
        let json = serde_json::to_string_pretty(metadata)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;
        fs::write(METADATA_PATH, json)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;
        Ok(())
    }

    /// Calculate SHA1 hash of content
    fn calculate_sha1(content: &str) -> String {
        use sha1::{Sha1, Digest};
        let mut hasher = Sha1::new();
        hasher.update(content.as_bytes());
        format!("{:x}", hasher.finalize())
    }

    /// Count hyperlinks in content
    fn count_hyperlinks(content: &str) -> usize {
        let re = Regex::new(r"\[([^\]]+)\]\(([^)]+)\)").unwrap();
        re.find_iter(content).count()
    }

    /// Fetch and process files from GitHub
    pub async fn fetch_and_process_files(
        &self,
        content_api: Arc<ContentAPI>,
        _settings: Arc<RwLock<Settings>>,
        metadata_store: &mut MetadataStore,
    ) -> Result<Vec<ProcessedFile>, Box<dyn StdError + Send + Sync>> {
        let mut processed_files = Vec::new();

        // Get all markdown files from GitHub
        let github_files = content_api.list_markdown_files("").await?;
        info!("Found {} markdown files in GitHub", github_files.len());

        // Process files in batches to prevent timeouts
        const BATCH_SIZE: usize = 5;
        for chunk in github_files.chunks(BATCH_SIZE) {
            let mut futures = Vec::new();
            
            for file_meta in chunk {
                let file_meta = file_meta.clone();
                let content_api = content_api.clone();
                
                futures.push(async move {
                    // First check if file is public
                    match content_api.check_file_public(&file_meta.download_url).await {
                        Ok(is_public) => {
                            if !is_public {
                                debug!("Skipping non-public file: {}", file_meta.name);
                                return Ok(None);
                            }

                            // Only fetch full content for public files
                            match content_api.fetch_file_content(&file_meta.download_url).await {
                                Ok(content) => {
                                    let file_path = format!("{}/{}", MARKDOWN_DIR, file_meta.name);
                                    if let Err(e) = fs::write(&file_path, &content) {
                                        error!("Failed to write file {}: {}", file_path, e);
                                        return Err(e.into());
                                    }

                                    let file_size = content.len();
                                    let node_size = Self::calculate_node_size(file_size);

                                    let metadata = Metadata {
                                        file_name: file_meta.name.clone(),
                                        file_size,
                                        node_size,
                                        node_id: "0".to_string(), // Will be assigned properly later
                                        hyperlink_count: Self::count_hyperlinks(&content),
                                        sha1: Self::calculate_sha1(&content),
                                        last_modified: file_meta.last_modified.unwrap_or_else(|| Utc::now()),
                                        perplexity_link: String::new(),
                                        last_perplexity_process: None,
                                        topic_counts: HashMap::new(), // Will be updated later
                                    };

                                    Ok(Some(ProcessedFile {
                                        file_name: file_meta.name.clone(),
                                        content,
                                        is_public: true,
                                        metadata,
                                    }))
                                }
                                Err(e) => {
                                    error!("Failed to fetch content for {}: {}", file_meta.name, e);
                                    Err(e)
                                }
                            }
                        }
                        Err(e) => {
                            error!("Failed to check public status for {}: {}", file_meta.name, e);
                            Err(e)
                        }
                    }
                });
            }

            // Wait for batch to complete
            let results = futures::future::join_all(futures).await;
            
            for result in results {
                match result {
                    Ok(Some(processed_file)) => {
                        processed_files.push(processed_file);
                    }
                    Ok(None) => continue, // Skipped non-public file
                    Err(e) => {
                        error!("Failed to process file in batch: {}", e);
                    }
                }
            }

            sleep(GITHUB_API_DELAY).await;
        }

        // Assign node IDs to any new files
        self.update_node_ids(&mut processed_files);

        // Update topic counts after all files are processed
        Self::update_topic_counts(metadata_store)?;

        Ok(processed_files)
    }
}
----
services/mod.rs
pub mod github;
pub mod file_service;
pub mod graph_service;
pub mod nostr_service;
pub mod perplexity_service;
pub mod ragflow_service;
pub mod speech_service;

----
services/perplexity_service.rs
use crate::config::Settings;
use crate::models::metadata::Metadata;
use crate::services::file_service::ProcessedFile;
use chrono::Utc;
use log::{error, info};
use reqwest::Client;
use serde::{Deserialize, Serialize};
use std::error::Error as StdError;
use std::fs;
use std::path::Path;
use std::sync::Arc;
use tokio::sync::RwLock;
use std::collections::HashMap;

const MARKDOWN_DIR: &str = "data/markdown";

#[derive(Debug, Serialize, Deserialize)]
struct PerplexityResponse {
    content: String,
    link: String,
}

#[derive(Debug, Serialize)]
struct QueryRequest {
    query: String,
    conversation_id: String,
    model: String,
    max_tokens: u32,
    temperature: f32,
    top_p: f32,
    presence_penalty: f32,
    frequency_penalty: f32,
}

pub struct PerplexityService {
    client: Client,
    settings: Arc<RwLock<Settings>>,
}

impl PerplexityService {
    pub async fn new(settings: Arc<RwLock<Settings>>) -> Result<Self, Box<dyn StdError + Send + Sync>> {
        let timeout = {
            let settings_read = settings.read().await;
            settings_read.perplexity.timeout
        };

        let client = Client::builder()
            .timeout(std::time::Duration::from_secs(timeout))
            .build()?;

        Ok(Self { 
            client,
            settings: Arc::clone(&settings)
        })
    }

    pub async fn query(&self, query: &str, conversation_id: &str) -> Result<String, Box<dyn StdError + Send + Sync>> {
        let settings = self.settings.read().await;
        let api_url = &settings.perplexity.api_url;
        info!("Sending query to Perplexity API: {}", api_url);

        let request = QueryRequest {
            query: query.to_string(),
            conversation_id: conversation_id.to_string(),
            model: settings.perplexity.model.clone(),
            max_tokens: settings.perplexity.max_tokens,
            temperature: settings.perplexity.temperature,
            top_p: settings.perplexity.top_p,
            presence_penalty: settings.perplexity.presence_penalty,
            frequency_penalty: settings.perplexity.frequency_penalty,
        };

        let response = self.client
            .post(api_url)
            .header("Authorization", format!("Bearer {}", settings.perplexity.api_key))
            .json(&request)
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Perplexity API error: Status: {}, Error: {}", status, error_text);
            return Err(format!("Perplexity API error: {}", error_text).into());
        }

        let perplexity_response: PerplexityResponse = response.json().await?;
        Ok(perplexity_response.content)
    }

    pub async fn process_file(&self, file_name: &str) -> Result<ProcessedFile, Box<dyn StdError + Send + Sync>> {
        let file_path = format!("{}/{}", MARKDOWN_DIR, file_name);
        if !Path::new(&file_path).exists() {
            return Err(format!("File not found: {}", file_name).into());
        }

        let content = fs::read_to_string(&file_path)?;
        let settings = self.settings.read().await;
        
        let api_url = &settings.perplexity.api_url;
        info!("Sending request to Perplexity API: {}", api_url);

        let response = self.client
            .post(api_url)
            .header("Authorization", format!("Bearer {}", settings.perplexity.api_key))
            .json(&content)
            .send()
            .await?;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Perplexity API error: Status: {}, Error: {}", status, error_text);
            return Err(format!("Perplexity API error: {}", error_text).into());
        }

        let perplexity_response: PerplexityResponse = response.json().await?;
        
        // Create metadata for processed file
        let metadata = Metadata {
            file_name: file_name.to_string(),
            file_size: perplexity_response.content.len(),
            node_id: "0".to_string(), // Will be assigned properly later
            node_size: 10.0, // Default size
            hyperlink_count: 0,
            sha1: String::new(),
            last_modified: Utc::now(),
            perplexity_link: perplexity_response.link,
            last_perplexity_process: Some(Utc::now()),
            topic_counts: HashMap::new(),
        };

        Ok(ProcessedFile {
            file_name: file_name.to_string(),
            content: perplexity_response.content,
            is_public: true,
            metadata,
        })
    }
}

----
services/ragflow_service.rs
use reqwest::{Client, StatusCode};
use log::{error, info};
use crate::config::Settings;
use std::fmt;
use futures::stream::{Stream, StreamExt};
use std::pin::Pin;
use serde_json::json;
use std::sync::Arc;
use tokio::sync::RwLock;

#[derive(Debug)]
pub enum RAGFlowError {
    ReqwestError(reqwest::Error),
    StatusError(StatusCode, String),
    ParseError(String),
    IoError(std::io::Error),
}

impl fmt::Display for RAGFlowError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            RAGFlowError::ReqwestError(e) => write!(f, "Reqwest error: {}", e),
            RAGFlowError::StatusError(status, msg) => write!(f, "Status error ({}): {}", status, msg),
            RAGFlowError::ParseError(msg) => write!(f, "Parse error: {}", msg),
            RAGFlowError::IoError(e) => write!(f, "IO error: {}", e),
        }
    }
}

impl std::error::Error for RAGFlowError {}

impl From<reqwest::Error> for RAGFlowError {
    fn from(err: reqwest::Error) -> Self {
        RAGFlowError::ReqwestError(err)
    }
}

impl From<std::io::Error> for RAGFlowError {
    fn from(err: std::io::Error) -> Self {
        RAGFlowError::IoError(err)
    }
}

pub struct RAGFlowService {
    client: Client,
    api_key: String,
    base_url: String,
}

impl RAGFlowService {
    pub async fn new(settings: Arc<RwLock<Settings>>) -> Result<Self, RAGFlowError> {
        let client = Client::new();
        let settings = settings.read().await;

        Ok(RAGFlowService {
            client,
            api_key: settings.ragflow.api_key.clone(),
            base_url: settings.ragflow.api_base_url.clone(),
        })
    }

    pub async fn create_conversation(&self, user_id: String) -> Result<String, RAGFlowError> {
        info!("Creating conversation for user: {}", user_id);
        let url = format!("{}/api/new_conversation", self.base_url.trim_end_matches('/'));
        info!("Full URL for create_conversation: {}", url);
        
        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.api_key))
            .query(&[("user_id", user_id)])
            .send()
            .await?;

        let status = response.status();
        info!("Response status: {}", status);

        if status.is_success() {
            let result: serde_json::Value = response.json().await?;
            info!("Successful response: {:?}", result);
            Ok(result["data"]["id"].as_str().unwrap_or("").to_string())
        } else {
            let error_message = response.text().await?;
            error!("Failed to create conversation. Status: {}, Error: {}", status, error_message);
            Err(RAGFlowError::StatusError(status, error_message))
        }
    }

    pub async fn send_message(
        &self,
        conversation_id: String,
        message: String,
        quote: bool,
        doc_ids: Option<Vec<String>>,
        stream: bool,
    ) -> Result<Pin<Box<dyn Stream<Item = Result<String, RAGFlowError>> + Send + 'static>>, RAGFlowError> {
        info!("Sending message to conversation: {}", conversation_id);
        let url = format!("{}/api/completion", self.base_url.trim_end_matches('/'));
        info!("Full URL for send_message: {}", url);
        
        let mut request_body = json!({
            "conversation_id": conversation_id,
            "messages": [{"role": "user", "content": message}],
            "quote": quote,
            "stream": stream
        });

        if let Some(ids) = doc_ids {
            request_body["doc_ids"] = serde_json::json!(ids.join(","));
        }

        info!("Request body: {:?}", request_body);

        let response = self.client.post(&url)
            .header("Authorization", format!("Bearer {}", self.api_key))
            .header("Content-Type", "application/json")
            .json(&request_body)
            .send()
            .await?;

        let status = response.status();
        info!("Response status: {}", status);
       
        if status.is_success() {
            let stream = response.bytes_stream().map(move |chunk_result| {
                match chunk_result {
                    Ok(chunk) => {
                        match serde_json::from_slice::<serde_json::Value>(&chunk) {
                            Ok(json_response) => {
                                // Extract text answer from the response
                                match json_response["data"]["answer"].as_str()
                                    .or_else(|| json_response["answer"].as_str()) {
                                    Some(answer) => Ok(answer.to_string()),
                                    None => Err(RAGFlowError::ParseError("No answer found in response".to_string()))
                                }
                            },
                            Err(e) => Err(RAGFlowError::ParseError(format!("Failed to parse JSON response: {}", e))),
                        }
                    },
                    Err(e) => Err(RAGFlowError::ReqwestError(e)),
                }
            });

            Ok(Box::pin(stream))
        } else {
            let error_message = response.text().await?;
            error!("Failed to send message. Status: {}, Error: {}", status, error_message);
            Err(RAGFlowError::StatusError(status, error_message))
        }
    }

    pub async fn get_conversation_history(&self, conversation_id: String) -> Result<serde_json::Value, RAGFlowError> {
        let url = format!("{}/api/conversation/{}", self.base_url.trim_end_matches('/'), conversation_id);
        let response = self.client.get(&url)
            .header("Authorization", format!("Bearer {}", self.api_key))
            .send()
            .await?;

        let status = response.status();
        if status.is_success() {
            let history: serde_json::Value = response.json().await?;
            Ok(history)
        } else {
            let error_message = response.text().await?;
            error!("Failed to get conversation history. Status: {}, Error: {}", status, error_message);
            Err(RAGFlowError::StatusError(status, error_message))
        }
    }
}

impl Clone for RAGFlowService {
    fn clone(&self) -> Self {
        RAGFlowService {
            client: self.client.clone(),
            api_key: self.api_key.clone(),
            base_url: self.base_url.clone(),
        }
    }
}

----
services/speech_service.rs
use tokio::sync::{mpsc, Mutex, RwLock};
use tokio_tungstenite::{connect_async, WebSocketStream, MaybeTlsStream};
use tungstenite::protocol::Message;
use tungstenite::http::Request;
use serde_json::json;
use std::sync::Arc;
use tokio::task;
use crate::config::Settings;
use log::{info, error, debug};
use futures::{SinkExt, StreamExt};
use std::error::Error;
use tokio::net::TcpStream;
use url::Url;
use base64::Engine as _;
use base64::engine::general_purpose::STANDARD as BASE64;
use crate::types::speech::{SpeechError, SpeechCommand, TTSProvider};

pub struct SpeechService {
    sender: Arc<Mutex<mpsc::Sender<SpeechCommand>>>,
    settings: Arc<RwLock<Settings>>,
    tts_provider: Arc<RwLock<TTSProvider>>,
}

impl SpeechService {
    pub fn new(settings: Arc<RwLock<Settings>>) -> Self {
        let (tx, rx) = mpsc::channel(100);
        let sender = Arc::new(Mutex::new(tx));

        let service = SpeechService {
            sender,
            settings,
            tts_provider: Arc::new(RwLock::new(TTSProvider::OpenAI)),
        };

        service.start(rx);
        service
    }

    fn start(&self, mut receiver: mpsc::Receiver<SpeechCommand>) {
        let settings = Arc::clone(&self.settings);

        task::spawn(async move {
            let mut ws_stream: Option<WebSocketStream<MaybeTlsStream<TcpStream>>> = None;

            while let Some(command) = receiver.recv().await {
                match command {
                    SpeechCommand::Initialize => {
                        let settings = settings.read().await;
                        
                        let url = format!(
                            "wss://api.openai.com/v1/realtime?model=gpt-4o-realtime-preview-2024-10-01"
                        );
                        let url = match Url::parse(&url) {
                            Ok(url) => url,
                            Err(e) => {
                                error!("Failed to parse OpenAI URL: {}", e);
                                continue;
                            }
                        };
                        
                        let request = match Request::builder()
                            .uri(url.as_str())
                            .header("Authorization", format!("Bearer {}", settings.openai.api_key))
                            .header("OpenAI-Beta", "realtime=v1")
                            .header("Content-Type", "application/json")
                            .header("User-Agent", "WebXR Graph")
                            .header("Sec-WebSocket-Version", "13")
                            .header("Sec-WebSocket-Key", tungstenite::handshake::client::generate_key())
                            .header("Connection", "Upgrade")
                            .header("Upgrade", "websocket")
                            .body(()) {
                                Ok(req) => req,
                                Err(e) => {
                                    error!("Failed to build request: {}", e);
                                    continue;
                                }
                            };

                        match connect_async(request).await {
                            Ok((mut stream, _)) => {
                                info!("Connected to OpenAI Realtime API");
                                
                                let init_event = json!({
                                    "type": "response.create",
                                    "response": {
                                        "modalities": ["text", "audio"],
                                        "instructions": "You are a helpful AI assistant. Respond naturally and conversationally."
                                    }
                                });
                                
                                if let Err(e) = stream.send(Message::Text(init_event.to_string())).await {
                                    error!("Failed to send initial response.create event: {}", e);
                                    continue;
                                }
                                
                                ws_stream = Some(stream);
                            },
                            Err(e) => error!("Failed to connect to OpenAI Realtime API: {}", e),
                        }
                    },
                    SpeechCommand::SendMessage(msg) => {
                        if let Some(stream) = &mut ws_stream {
                            let msg_event = json!({
                                "type": "conversation.item.create",
                                "item": {
                                    "type": "message",
                                    "role": "user",
                                    "content": [{
                                        "type": "input_text",
                                        "text": msg
                                    }]
                                }
                            });

                            if let Err(e) = stream.send(Message::Text(msg_event.to_string())).await {
                                error!("Failed to send message to OpenAI: {}", e);
                                continue;
                            }

                            let response_event = json!({
                                "type": "response.create"
                            });
                            
                            if let Err(e) = stream.send(Message::Text(response_event.to_string())).await {
                                error!("Failed to request response from OpenAI: {}", e);
                                continue;
                            }
                            
                            while let Some(message) = stream.next().await {
                                match message {
                                    Ok(Message::Text(text)) => {
                                        let event = match serde_json::from_str::<serde_json::Value>(&text) {
                                            Ok(event) => event,
                                            Err(e) => {
                                                error!("Failed to parse server event: {}", e);
                                                continue;
                                            }
                                        };
                                        
                                        match event["type"].as_str() {
                                            Some("conversation.item.created") => {
                                                if let Some(content) = event["item"]["content"].as_array() {
                                                    for item in content {
                                                        if item["type"] == "audio" {
                                                            if let Some(audio_data) = item["audio"].as_str() {
                                                                match BASE64.decode(audio_data) {
                                                                    Ok(audio_bytes) => {
                                                                        // Note: Audio data will be handled by socket-flow server
                                                                        debug!("Received audio data of size: {}", audio_bytes.len());
                                                                    },
                                                                    Err(e) => error!("Failed to decode audio data: {}", e),
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            Some("error") => {
                                                error!("OpenAI Realtime API error: {:?}", event);
                                                break;
                                            },
                                            Some("response.completed") => break,
                                            _ => {}
                                        }
                                    },
                                    Ok(Message::Close(_)) => break,
                                    Err(e) => {
                                        error!("Error receiving from OpenAI: {}", e);
                                        break;
                                    },
                                    _ => {}
                                }
                            }
                        } else {
                            error!("OpenAI WebSocket not initialized");
                        }
                    },
                    SpeechCommand::Close => {
                        if let Some(mut stream) = ws_stream.take() {
                            if let Err(e) = stream.send(Message::Close(None)).await {
                                error!("Failed to send close frame: {}", e);
                            }
                        }
                        break;
                    },
                    SpeechCommand::SetTTSProvider(_) => {
                        // OpenAI is now the only provider, so we ignore provider changes
                        info!("TTS provider is fixed to OpenAI");
                    }
                }
            }
        });
    }

    pub async fn initialize(&self) -> Result<(), Box<dyn Error>> {
        let command = SpeechCommand::Initialize;
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }

    pub async fn send_message(&self, message: String) -> Result<(), Box<dyn Error>> {
        let command = SpeechCommand::SendMessage(message);
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }

    pub async fn close(&self) -> Result<(), Box<dyn Error>> {
        let command = SpeechCommand::Close;
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }

    pub async fn set_tts_provider(&self, _use_openai: bool) -> Result<(), Box<dyn Error>> {
        // OpenAI is now the only provider, so we ignore the parameter
        let command = SpeechCommand::SetTTSProvider(TTSProvider::OpenAI);
        self.sender.lock().await.send(command).await.map_err(|e| Box::new(SpeechError::from(e)))?;
        Ok(())
    }
}

----
services/nostr_service.rs
use crate::models::protected_settings::{NostrUser, ApiKeys};
use crate::config::feature_access::FeatureAccess;
use nostr_sdk::{
    prelude::*,
    event::Error as EventError
};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::sync::Arc;
use tokio::sync::RwLock;
use chrono::Utc;
use thiserror::Error;
use log::{debug, error, info};
use uuid::Uuid;

#[derive(Debug, Error)]
pub enum NostrError {
    #[error("Invalid event: {0}")]
    InvalidEvent(String),
    #[error("Invalid signature")]
    InvalidSignature,
    #[error("User not found")]
    UserNotFound,
    #[error("Invalid token")]
    InvalidToken,
    #[error("Session expired")]
    SessionExpired,
    #[error("Power user operation not allowed")]
    PowerUserOperation,
    #[error("Nostr event error: {0}")]
    NostrError(#[from] EventError),
    #[error("JSON error: {0}")]
    JsonError(#[from] serde_json::Error),
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AuthEvent {
    pub id: String,
    pub pubkey: String,
    pub content: String,
    pub sig: String,
    pub created_at: i64,
    pub kind: i32,
    pub tags: Vec<Vec<String>>,
}

#[derive(Clone)]
pub struct NostrService {
    users: Arc<RwLock<HashMap<String, NostrUser>>>,
    power_user_pubkeys: Vec<String>,
    token_expiry: i64,
    feature_access: Arc<RwLock<FeatureAccess>>,
}

impl NostrService {
    pub fn new() -> Self {
        let power_users = std::env::var("POWER_USER_PUBKEYS")
            .unwrap_or_default()
            .split(',')
            .map(|s| s.trim().to_string())
            .collect();

        let token_expiry = std::env::var("AUTH_TOKEN_EXPIRY")
            .unwrap_or_else(|_| "3600".to_string())
            .parse()
            .unwrap_or(3600);

        let feature_access = Arc::new(RwLock::new(FeatureAccess::from_env()));
        Self {
            users: Arc::new(RwLock::new(HashMap::new())),
            power_user_pubkeys: power_users,
            feature_access,
            token_expiry,
        }
    }

    pub async fn verify_auth_event(&self, event: AuthEvent) -> Result<NostrUser, NostrError> {
        // Convert to Nostr Event for verification
        // Convert to JSON string and parse as Nostr Event
        debug!("Verifying auth event: {:?}", event);

        let json_str = match serde_json::to_string(&event) {
            Ok(s) => s,
            Err(e) => {
                error!("Failed to serialize auth event: {}", e);
                return Err(NostrError::JsonError(e));
            }
        };

        debug!("Event JSON for verification: {}", json_str);

        let nostr_event = match Event::from_json(&json_str) {
            Ok(e) => e,
            Err(e) => {
                error!("Failed to parse Nostr event: {}", e);
                return Err(NostrError::InvalidEvent(format!("Parse error: {}", e)));
            }
        };

        if let Err(e) = nostr_event.verify() {
            error!("Signature verification failed: {}", e);
            return Err(NostrError::InvalidSignature);
        }

        // Register new user if not already registered
        let mut feature_access = self.feature_access.write().await;
        if feature_access.register_new_user(&event.pubkey) {
            info!("Registered new user with basic access: {}", event.pubkey);
        }

        let now = Utc::now();
        let is_power_user = self.power_user_pubkeys.contains(&event.pubkey);

        // Generate session token
        let session_token = Uuid::new_v4().to_string();

        let user = NostrUser {
            pubkey: event.pubkey.clone(),
            npub: nostr_event.pubkey.to_bech32()
                .map_err(|_| NostrError::NostrError(EventError::InvalidId))?,
            is_power_user,
            api_keys: ApiKeys::default(),
            last_seen: now.timestamp(),
            session_token: Some(session_token),
        };

        // Store or update user
        let mut users = self.users.write().await;
        users.insert(user.pubkey.clone(), user.clone());

        Ok(user)
    }

    pub async fn get_user(&self, pubkey: &str) -> Option<NostrUser> {
        let users = self.users.read().await;
        users.get(pubkey).cloned()
    }

    pub async fn update_user_api_keys(&self, pubkey: &str, api_keys: ApiKeys) -> Result<NostrUser, NostrError> {
        let mut users = self.users.write().await;
        
        if let Some(user) = users.get_mut(pubkey) {
            if user.is_power_user {
                return Err(NostrError::PowerUserOperation);
            }
            user.api_keys = api_keys;
            user.last_seen = Utc::now().timestamp();
            Ok(user.clone())
        } else {
            Err(NostrError::UserNotFound)
        }
    }

    pub async fn validate_session(&self, pubkey: &str, token: &str) -> bool {
        if let Some(user) = self.get_user(pubkey).await {
            if let Some(session_token) = user.session_token {
                let now = Utc::now().timestamp();
                if now - user.last_seen <= self.token_expiry {
                    return session_token == token;
                }
            }
        }
        false
    }

    pub async fn refresh_session(&self, pubkey: &str) -> Result<String, NostrError> {
        let mut users = self.users.write().await;
        
        if let Some(user) = users.get_mut(pubkey) {
            let now = Utc::now().timestamp();
            let new_token = Uuid::new_v4().to_string();
            user.session_token = Some(new_token.clone());
            user.last_seen = now;
            Ok(new_token)
        } else {
            Err(NostrError::UserNotFound)
        }
    }

    pub async fn logout(&self, pubkey: &str) -> Result<(), NostrError> {
        let mut users = self.users.write().await;
        
        if let Some(user) = users.get_mut(pubkey) {
            user.session_token = None;
            user.last_seen = Utc::now().timestamp();
            Ok(())
        } else {
            Err(NostrError::UserNotFound)
        }
    }

    pub async fn cleanup_sessions(&self, max_age_hours: i64) {
        let now = Utc::now();
        let mut users = self.users.write().await;
        
        users.retain(|_, user| {
            let age = now.timestamp() - user.last_seen;
            age < (max_age_hours * 3600)
        });
    }

    pub async fn is_power_user(&self, pubkey: &str) -> bool {
        if let Some(user) = self.get_user(pubkey).await {
            user.is_power_user
        } else {
            false
        }
    }
}

impl Default for NostrService {
    fn default() -> Self {
        Self::new()
    }
}
----
services/graph_service.rs
use std::sync::Arc;
use std::sync::atomic::{AtomicBool, Ordering};
use tokio::sync::RwLock;
use std::collections::{HashMap, HashSet};
use actix_web::web;
use rand::Rng;
use std::io::{Error, ErrorKind};
use serde_json;
use std::pin::Pin;
use futures::Future;
use log::{info, warn, error};

use crate::models::graph::GraphData;
use crate::utils::socket_flow_messages::Node;
use crate::models::edge::Edge;
use crate::models::metadata::MetadataStore;
use crate::app_state::AppState;
use crate::config::Settings;
use crate::utils::gpu_compute::GPUCompute;
use crate::models::simulation_params::{SimulationParams, SimulationPhase, SimulationMode};
use crate::models::pagination::PaginatedGraphData;

// Static flag to prevent multiple simultaneous graph rebuilds
static GRAPH_REBUILD_IN_PROGRESS: AtomicBool = AtomicBool::new(false);

#[derive(Clone)]
pub struct GraphService {
    graph_data: Arc<RwLock<GraphData>>,
    node_map: Arc<RwLock<HashMap<String, Node>>>,
    gpu_compute: Option<Arc<RwLock<GPUCompute>>>,
}

impl GraphService {
    pub async fn new(settings: Arc<RwLock<Settings>>, gpu_compute: Option<Arc<RwLock<GPUCompute>>>) -> Self {
        // Get physics settings
        let physics_settings = settings.read().await.visualization.physics.clone();
        let node_map = Arc::new(RwLock::new(HashMap::new()));

        let graph_service = Self {
            graph_data: Arc::new(RwLock::new(GraphData::default())),
            node_map: node_map.clone(),
            gpu_compute,
            // Node position randomization is now handled entirely by the client side
        };
        
        // Start simulation loop
        let graph_data = Arc::clone(&graph_service.graph_data);
        let gpu_compute = graph_service.gpu_compute.clone();
        
        tokio::spawn(async move {
            let params = SimulationParams {
                iterations: physics_settings.iterations,
                spring_strength: physics_settings.spring_strength,
                repulsion: physics_settings.repulsion_strength,
                damping: physics_settings.damping,
                max_repulsion_distance: physics_settings.repulsion_distance,
                viewport_bounds: physics_settings.bounds_size,
                mass_scale: physics_settings.mass_scale,
                boundary_damping: physics_settings.boundary_damping,
                enable_bounds: physics_settings.enable_bounds,
                time_step: 0.016,  // ~60fps
                phase: SimulationPhase::Dynamic,
                mode: SimulationMode::Remote,
            };
            
            loop {
                // Update positions
                let mut graph = graph_data.write().await;
                let mut node_map = node_map.write().await;
                if physics_settings.enabled {
                    if let Some(gpu) = &gpu_compute {
                        if let Err(e) = Self::calculate_layout(gpu, &mut graph, &mut node_map, &params).await {
                            warn!("[Graph] Error updating positions: {}", e);
                        }
                    }
                }
                drop(graph); // Release locks
                drop(node_map);
                // Sleep for ~16ms (60fps)
                tokio::time::sleep(tokio::time::Duration::from_millis(16)).await;
            }
        });

        graph_service
    }

    pub async fn build_graph_from_metadata(metadata: &MetadataStore) -> Result<GraphData, Box<dyn std::error::Error + Send + Sync>> {
        // Check if a rebuild is already in progress
        if GRAPH_REBUILD_IN_PROGRESS.compare_exchange(false, true, Ordering::SeqCst, Ordering::SeqCst).is_err() {
            warn!("Graph rebuild already in progress, skipping duplicate rebuild");
            return Err("Graph rebuild already in progress".into());
        }
        
        // Create a guard struct to ensure the flag is reset when this function returns
        struct RebuildGuard;
        impl Drop for RebuildGuard {
            fn drop(&mut self) {
                GRAPH_REBUILD_IN_PROGRESS.store(false, Ordering::SeqCst);
            }
        }
        // This guard will reset the flag when it goes out of scope
        let _guard = RebuildGuard;
        
        let mut graph = GraphData::new();
        let mut edge_map = HashMap::new();
        let mut node_map = HashMap::new();

        // First pass: Create nodes from files in metadata
        let mut valid_nodes = HashSet::new();
        for file_name in metadata.keys() {
            let node_id = file_name.trim_end_matches(".md").to_string();
            valid_nodes.insert(node_id);
        }

        // Create nodes for all valid node IDs
        for node_id in &valid_nodes {
            // Get metadata for this node, including the node_id if available
            let metadata_entry = graph.metadata.get(&format!("{}.md", node_id));
            let stored_node_id = metadata_entry.map(|m| m.node_id.clone());
            
            // Create node with stored ID or generate a new one if not available
            let mut node = Node::new_with_id(node_id.clone(), stored_node_id);
            graph.id_to_metadata.insert(node.id.clone(), node_id.clone());

            // Get metadata for this node
            if let Some(metadata) = metadata.get(&format!("{}.md", node_id)) {
                // Set file size which also calculates mass
                node.set_file_size(metadata.file_size as u64);  // This will update both file_size and mass
                
                // Set visual properties from metadata
                node.size = Some(metadata.node_size as f32);
                
                // Add metadata fields to node's metadata map
                // Add all relevant metadata fields to ensure consistency
                node.metadata.insert("fileName".to_string(), metadata.file_name.clone());
                
                // Add name field (without .md extension) for client-side metadata ID mapping
                if metadata.file_name.ends_with(".md") {
                    let name = metadata.file_name[..metadata.file_name.len() - 3].to_string();
                    node.metadata.insert("name".to_string(), name.clone());
                    node.metadata.insert("metadataId".to_string(), name);
                } else {
                    node.metadata.insert("name".to_string(), metadata.file_name.clone());
                    node.metadata.insert("metadataId".to_string(), metadata.file_name.clone());
                }
                
                node.metadata.insert("fileSize".to_string(), metadata.file_size.to_string());
                node.metadata.insert("nodeSize".to_string(), metadata.node_size.to_string());
                node.metadata.insert("hyperlinkCount".to_string(), metadata.hyperlink_count.to_string());
                node.metadata.insert("sha1".to_string(), metadata.sha1.clone());
                node.metadata.insert("lastModified".to_string(), metadata.last_modified.to_string());
                
                if !metadata.perplexity_link.is_empty() {
                    node.metadata.insert("perplexityLink".to_string(), metadata.perplexity_link.clone());
                }
                
                if let Some(last_process) = metadata.last_perplexity_process {
                    node.metadata.insert("lastPerplexityProcess".to_string(), last_process.to_string());
                }
                
                // We don't add topic_counts to metadata as it would create circular references
                // and is already used to create edges
                
                // Ensure flags is set to 1 (default active state)
                node.data.flags = 1;
            }

            let node_clone = node.clone();
            graph.nodes.push(node_clone);
            // Store nodes in map by numeric ID for efficient lookups
            node_map.insert(node.id.clone(), node);
        }

        // Store metadata in graph
        graph.metadata = metadata.clone();

        // Second pass: Create edges from topic counts
        for (source_file, metadata) in metadata.iter() {
            let source_id = source_file.trim_end_matches(".md").to_string();
            // Find the node with this metadata_id to get its numeric ID
            let source_node = graph.nodes.iter().find(|n| n.metadata_id == source_id);
            if source_node.is_none() {
                continue; // Skip if node not found
            }
            let source_numeric_id = source_node.unwrap().id.clone();
            
            for (target_file, count) in &metadata.topic_counts {
                let target_id = target_file.trim_end_matches(".md").to_string();
                // Find the node with this metadata_id to get its numeric ID
                let target_node = graph.nodes.iter().find(|n| n.metadata_id == target_id);
                if target_node.is_none() {
                    continue; // Skip if node not found
                }
                let target_numeric_id = target_node.unwrap().id.clone();
                
                // Only create edge if both nodes exist and they're different
                if source_numeric_id != target_numeric_id {
                    let edge_key = if source_numeric_id < target_numeric_id {
                        (source_numeric_id.clone(), target_numeric_id.clone())
                    } else {
                        (target_numeric_id.clone(), source_numeric_id.clone())
                    };

                    edge_map.entry(edge_key)
                        .and_modify(|weight| *weight += *count as f32)
                        .or_insert(*count as f32);
                }
            }
        }

        // Convert edge map to edges
        graph.edges = edge_map.into_iter()
            .map(|((source, target), weight)| {
                Edge::new(source, target, weight)
            })
            .collect();

        // Initialize random positions
        Self::initialize_random_positions(&mut graph);

        info!("Built graph with {} nodes and {} edges", graph.nodes.len(), graph.edges.len());
        Ok(graph)
    }

    pub async fn build_graph(state: &web::Data<AppState>) -> Result<GraphData, Box<dyn std::error::Error + Send + Sync>> {
        // Check if a rebuild is already in progress
        if GRAPH_REBUILD_IN_PROGRESS.compare_exchange(false, true, Ordering::SeqCst, Ordering::SeqCst).is_err() {
            warn!("Graph rebuild already in progress, skipping duplicate rebuild");
            return Err("Graph rebuild already in progress".into());
        }
        
        // Create a guard struct to ensure the flag is reset when this function returns
        struct RebuildGuard;
        impl Drop for RebuildGuard {
            fn drop(&mut self) {
                GRAPH_REBUILD_IN_PROGRESS.store(false, Ordering::SeqCst);
            }
        }
        // This guard will reset the flag when it goes out of scope
        let _guard = RebuildGuard;
        
        let current_graph = state.graph_service.get_graph_data_mut().await;
        let mut graph = GraphData::new();
        let mut node_map = HashMap::new();

        // Copy metadata from current graph
        graph.metadata = current_graph.metadata.clone();

        let mut edge_map = HashMap::new();

        // Create nodes from metadata entries
        let mut valid_nodes = HashSet::new();
        for file_name in graph.metadata.keys() {
            let node_id = file_name.trim_end_matches(".md").to_string();
            valid_nodes.insert(node_id);
        }

        // Create nodes for all valid node IDs
        for node_id in &valid_nodes {
            // Get metadata for this node, including the node_id if available
            let metadata_entry = graph.metadata.get(&format!("{}.md", node_id));
            let stored_node_id = metadata_entry.map(|m| m.node_id.clone());
            
            // Create node with stored ID or generate a new one if not available
            let mut node = Node::new_with_id(node_id.clone(), stored_node_id);
            graph.id_to_metadata.insert(node.id.clone(), node_id.clone());

            // Get metadata for this node
            if let Some(metadata) = graph.metadata.get(&format!("{}.md", node_id)) {
                // Set file size which also calculates mass
                node.set_file_size(metadata.file_size as u64);  // This will update both file_size and mass
                
                // Set visual properties from metadata
                node.size = Some(metadata.node_size as f32);
                
                // Add metadata fields to node's metadata map
                // Add all relevant metadata fields to ensure consistency
                node.metadata.insert("fileName".to_string(), metadata.file_name.clone());
                
                // Add name field (without .md extension) for client-side metadata ID mapping
                if metadata.file_name.ends_with(".md") {
                    let name = metadata.file_name[..metadata.file_name.len() - 3].to_string();
                    node.metadata.insert("name".to_string(), name.clone());
                    node.metadata.insert("metadataId".to_string(), name);
                } else {
                    node.metadata.insert("name".to_string(), metadata.file_name.clone());
                    node.metadata.insert("metadataId".to_string(), metadata.file_name.clone());
                }
                
                node.metadata.insert("fileSize".to_string(), metadata.file_size.to_string());
                node.metadata.insert("nodeSize".to_string(), metadata.node_size.to_string());
                node.metadata.insert("hyperlinkCount".to_string(), metadata.hyperlink_count.to_string());
                node.metadata.insert("sha1".to_string(), metadata.sha1.clone());
                node.metadata.insert("lastModified".to_string(), metadata.last_modified.to_string());
                
                if !metadata.perplexity_link.is_empty() {
                    node.metadata.insert("perplexityLink".to_string(), metadata.perplexity_link.clone());
                }
                
                if let Some(last_process) = metadata.last_perplexity_process {
                    node.metadata.insert("lastPerplexityProcess".to_string(), last_process.to_string());
                }
                
                // We don't add topic_counts to metadata as it would create circular references
                // and is already used to create edges
                
                // Ensure flags is set to 1 (default active state)
                node.data.flags = 1;
            }
            
            let node_clone = node.clone();
            graph.nodes.push(node_clone);
            // Store nodes in map by numeric ID for efficient lookups
            node_map.insert(node.id.clone(), node);
        }

        // Create edges from metadata topic counts
        for (source_file, metadata) in graph.metadata.iter() {
            let source_id = source_file.trim_end_matches(".md").to_string();
            // Find the node with this metadata_id to get its numeric ID
            let source_node = graph.nodes.iter().find(|n| n.metadata_id == source_id);
            if source_node.is_none() {
                continue; // Skip if node not found
            }
            let source_numeric_id = source_node.unwrap().id.clone();
            
            // Process outbound links from this file to other topics
            for (target_file, count) in &metadata.topic_counts {
                let target_id = target_file.trim_end_matches(".md").to_string();
                // Find the node with this metadata_id to get its numeric ID
                let target_node = graph.nodes.iter().find(|n| n.metadata_id == target_id);
                if target_node.is_none() {
                    continue; // Skip if node not found
                }
                let target_numeric_id = target_node.unwrap().id.clone();
                
                // Only create edge if both nodes exist and they're different
                if source_numeric_id != target_numeric_id {
                    let edge_key = if source_numeric_id < target_numeric_id {
                        (source_numeric_id.clone(), target_numeric_id.clone())
                    } else {
                        (target_numeric_id.clone(), source_numeric_id.clone())
                    };

                    // Sum the weights for bi-directional references
                    edge_map.entry(edge_key)
                        .and_modify(|w| *w += *count as f32)
                        .or_insert(*count as f32);
                }
            }
        }

        // Convert edge map to edges
        graph.edges = edge_map.into_iter()
            .map(|((source, target), weight)| {
                Edge::new(source, target, weight)
            })
            .collect();

        // Initialize random positions for all nodes
        Self::initialize_random_positions(&mut graph);

        info!("Built graph with {} nodes and {} edges", graph.nodes.len(), graph.edges.len());
        Ok(graph)
    }

    fn initialize_random_positions(graph: &mut GraphData) {
        let mut rng = rand::thread_rng();
        let node_count = graph.nodes.len() as f32;
        let initial_radius = 3.0; // Increasing radius for better visibility
        let golden_ratio = (1.0 + 5.0_f32.sqrt()) / 2.0;
        
        // Log the initialization process
        info!("Initializing random positions for {} nodes with radius {}", 
             node_count, initial_radius);
        info!("First 5 node numeric IDs: {}", graph.nodes.iter().take(5).map(|n| n.id.clone()).collect::<Vec<_>>().join(", "));
        info!("First 5 node metadata IDs: {}", graph.nodes.iter().take(5).map(|n| n.metadata_id.clone()).collect::<Vec<_>>().join(", "));
        
        // Use Fibonacci sphere distribution for more uniform initial positions
        for (i, node) in graph.nodes.iter_mut().enumerate() {
            let i_float: f32 = i as f32;
            
            // Calculate Fibonacci sphere coordinates
            let theta = 2.0 * std::f32::consts::PI * i_float / golden_ratio;
            let phi = (1.0 - 2.0 * (i_float + 0.5) / node_count).acos();
            
            // Add slight randomness to prevent exact overlaps
            let r = initial_radius * (0.9 + rng.gen_range(0.0..0.2));
            
            node.set_x(r * phi.sin() * theta.cos());
            node.set_y(r * phi.sin() * theta.sin());
            node.set_z(r * phi.cos());
            
            // Initialize with zero velocity
            node.set_vx(0.0);
            node.set_vy(0.0);
            node.set_vz(0.0);

            // Log first 5 nodes for debugging
            if i < 5 {
                info!("Initialized node {}: id={}, pos=[{:.3},{:.3},{:.3}]", 
                     i,
                     node.id,
                     node.data.position.x, 
                     node.data.position.y, 
                     node.data.position.z);
            }
        }
    }

    pub async fn calculate_layout(
        gpu_compute: &Arc<RwLock<GPUCompute>>,
        graph: &mut GraphData,
        node_map: &mut HashMap<String, Node>,
        params: &SimulationParams,
    ) -> std::io::Result<()> {
        {
            let mut gpu_compute = gpu_compute.write().await;

            // Update data and parameters
            gpu_compute.update_graph_data(graph)?;
            gpu_compute.update_simulation_params(params)?;
            
            // Perform computation step
            gpu_compute.step()?;
            
            // Get updated positions
            let updated_nodes = gpu_compute.get_node_data()?;
            
            // Update graph with new positions
            for (i, node) in graph.nodes.iter_mut().enumerate() {
                // Update position and velocity from GPU data
                node.data = updated_nodes[i];
                // Update node_map as well
                if let Some(map_node) = node_map.get_mut(&node.id) {
                    map_node.data = updated_nodes[i];
                }
            }
            Ok(())
        }
    }

    pub async fn get_paginated_graph_data(
        &self,
        page: u32,
        page_size: u32,
    ) -> Result<PaginatedGraphData, Box<dyn std::error::Error + Send + Sync>> {
        let graph = self.graph_data.read().await;
        
        // Convert page and page_size to usize for vector operations
        let page = page as usize;
        let page_size = page_size as usize;
        let total_nodes = graph.nodes.len();
        
        let start = page * page_size;
        let end = std::cmp::min((page + 1) * page_size, total_nodes);

        let page_nodes: Vec<Node> = graph.nodes
            .iter()
            .skip(start)
            .take(end - start)
            .cloned()
            .collect();

        // Get edges that connect to these nodes
        let node_ids: HashSet<String> = page_nodes.iter()
            .map(|n| n.id.clone())
            .collect();

        let edges: Vec<Edge> = graph.edges
            .iter()
            .filter(|e| node_ids.contains(&e.source) || node_ids.contains(&e.target))
            .cloned()
            .collect();

        Ok(PaginatedGraphData {
            nodes: page_nodes,
            edges,
            metadata: serde_json::to_value(graph.metadata.clone()).unwrap_or_default(),
            total_nodes,
            total_edges: graph.edges.len(),
            total_pages: ((total_nodes as f32 / page_size as f32).ceil()) as u32,
            current_page: page as u32,
        })
    }

    pub async fn get_node_positions(&self) -> Vec<Node> {
        let graph = self.graph_data.read().await;
        
        // Only log node position data in debug level
        log::debug!("get_node_positions: returning {} nodes", graph.nodes.len());
        
        if log::log_enabled!(log::Level::Debug) {
            // Log first 5 nodes only when debug is enabled
            let sample_size = std::cmp::min(5, graph.nodes.len());
            if sample_size > 0 {
                log::debug!("Node position sample: {} samples of {} nodes", sample_size, graph.nodes.len());
            }
        }
        graph.nodes.clone()
    }

    pub async fn get_graph_data_mut(&self) -> tokio::sync::RwLockWriteGuard<'_, GraphData> {
        self.graph_data.write().await
    }

    pub async fn get_node_map_mut(&self) -> tokio::sync::RwLockWriteGuard<'_, HashMap<String, Node>> {
        self.node_map.write().await
    }
    
    // Add method to get GPU compute instance
    pub async fn get_gpu_compute(&self) -> Option<Arc<RwLock<GPUCompute>>> {
        self.gpu_compute.clone()
    }

    pub async fn update_node_positions(&self, updates: Vec<(u16, Node)>) -> Result<(), Error> {
        let mut graph = self.graph_data.write().await;
        let mut node_map = self.node_map.write().await;

        for (node_id_u16, node_data) in updates {
            let node_id = node_id_u16.to_string();
            if let Some(node) = node_map.get_mut(&node_id) {
                node.data = node_data.data.clone();
            }
        }

        // Update graph nodes with new positions from the map
        for node in &mut graph.nodes {
            if let Some(updated_node) = node_map.get(&node.id) {
                node.data = updated_node.data.clone();
            }
        }

        Ok(())
    }

    pub fn update_positions(&mut self) -> Pin<Box<dyn Future<Output = Result<(), Error>> + '_>> {
        Box::pin(async move {
            if let Some(gpu) = &self.gpu_compute {
                let mut gpu = gpu.write().await;
                gpu.compute_forces()?;
                Ok(())
            } else {
                // Initialize GPU if not already done
                if self.gpu_compute.is_none() {
                    let settings = Arc::new(RwLock::new(Settings::default()));
                    let graph_data = GraphData::default(); // Or get your actual graph data
                    self.initialize_gpu(settings, &graph_data).await?;
                    return self.update_positions().await;
                }
                Err(Error::new(ErrorKind::Other, "GPU compute not initialized"))
            }
        })
    }

    pub async fn initialize_gpu(&mut self, _settings: Arc<RwLock<Settings>>, graph_data: &GraphData) -> Result<(), Error> {
        info!("Initializing GPU compute system...");

        match GPUCompute::new(graph_data).await {
            Ok(gpu_instance) => {
                // Try a test computation before accepting the GPU
                let mut gpu = gpu_instance.write().await;
                if let Err(e) = gpu.compute_forces() {
                    error!("GPU test computation failed: {}", e);
                    return Err(Error::new(ErrorKind::Other, format!("GPU test computation failed: {}", e)));
                }
                drop(gpu);

                self.gpu_compute = Some(gpu_instance);
                Ok(())
            }
            Err(e) => {
                error!("Failed to initialize GPU compute: {}", e);
                Err(Error::new(ErrorKind::Other, format!("GPU initialization failed: {}", e)))
            }
        }
    }

    // Development test function to verify metadata transfer
    #[cfg(test)]
    pub async fn test_metadata_transfer() -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
        use chrono::Utc;
        use std::collections::HashMap;
        use crate::models::metadata::Metadata;

        // Create test metadata
        let mut metadata = crate::models::metadata::MetadataStore::new();
        let file_name = "test.md";
        
        // Create a test metadata entry
        let meta = Metadata {
            file_name: file_name.to_string(),
            file_size: 1000,
            node_size: 1.5,
            hyperlink_count: 5,
            sha1: "abc123".to_string(),
            node_id: "1".to_string(),
            last_modified: Utc::now(),
            perplexity_link: "https://example.com".to_string(),
            last_perplexity_process: Some(Utc::now()),
            topic_counts: HashMap::new(),
        };
        
        metadata.insert(file_name.to_string(), meta.clone());
        
        // Build graph from metadata
        let graph = Self::build_graph_from_metadata(&metadata).await?;
        
        // Check that the graph has one node with the correct metadata
        assert_eq!(graph.nodes.len(), 1);
        
        // Verify metadata_id
        let node = &graph.nodes[0];
        assert_eq!(node.metadata_id, "test");
        
        // Verify metadata fields
        assert!(node.metadata.contains_key("fileName"));
        assert_eq!(node.metadata.get("fileName").unwrap(), "test.md");
        
        assert!(node.metadata.contains_key("fileSize"));
        assert_eq!(node.metadata.get("fileSize").unwrap(), "1000");
        
        assert!(node.metadata.contains_key("nodeSize"));
        assert_eq!(node.metadata.get("nodeSize").unwrap(), "1.5");
        
        assert!(node.metadata.contains_key("hyperlinkCount"));
        assert_eq!(node.metadata.get("hyperlinkCount").unwrap(), "5");
        
        assert!(node.metadata.contains_key("sha1"));
        assert!(node.metadata.contains_key("lastModified"));
        
        // Check flags
        assert_eq!(node.data.flags, 1);

        println!("All metadata tests passed!");
        Ok(())
    }
}

----
services/github/api.rs
use reqwest::Client;
use std::time::Duration;
use log::debug;
use super::config::GitHubConfig;
use std::sync::Arc;
use tokio::sync::RwLock;
use std::error::Error;
use crate::config::Settings;

const GITHUB_API_DELAY: Duration = Duration::from_millis(500);
const MAX_RETRIES: u32 = 3;
const RETRY_DELAY: Duration = Duration::from_secs(2);

/// Core GitHub API client providing common functionality
pub struct GitHubClient {
    client: Client,
    token: String,
    owner: String,
    repo: String,
    base_path: String,
    settings: Arc<RwLock<Settings>>,
}

impl GitHubClient {
    /// Create a new GitHub API client
    pub async fn new(
        config: GitHubConfig,
        settings: Arc<RwLock<Settings>>,
    ) -> Result<Self, Box<dyn Error + Send + Sync>> {
        let settings_guard = settings.read().await;
        let debug_enabled = settings_guard.system.debug.enabled;
        drop(settings_guard);

        if debug_enabled {
            debug!("Initializing GitHub client - Owner: '{}', Repo: '{}', Base path: '{}'",
                config.owner, config.repo, config.base_path);
        }

        // Build HTTP client with configuration
        if debug_enabled {
            debug!("Configuring HTTP client - Timeout: 30s, User-Agent: github-api-client");
        }

        let client = Client::builder()
            .user_agent("github-api-client")
            .timeout(Duration::from_secs(30))
            .build()?;

        if debug_enabled {
            debug!("HTTP client configured successfully");
        }

        // First decode any existing encoding
        let decoded_path = urlencoding::decode(&config.base_path)
            .unwrap_or(std::borrow::Cow::Owned(config.base_path.clone()))
            .into_owned();
        
        if debug_enabled {
            debug!("Decoded base path: '{}'", decoded_path);
        }
        
        // Clean the path
        let base_path = decoded_path
            .trim_matches('/')
            .replace("//", "/")
            .replace('\\', "/");
        
        if debug_enabled {
            debug!("Cleaned base path: '{}' (original: '{}')", base_path, base_path);
            debug!("GitHub client initialization complete");
        }

        Ok(Self {
            client,
            token: config.token,
            owner: config.owner,
            repo: config.repo,
            base_path,
            settings: Arc::clone(&settings),
        })
    }

    /// Get the properly encoded API path
    pub(crate) async fn get_api_path(&self) -> String {
        let settings = self.settings.read().await;
        let debug_enabled = settings.system.debug.enabled;
        drop(settings);

        if debug_enabled {
            debug!("Getting API path from base_path: '{}'", self.base_path);
        }

        let decoded_path = urlencoding::decode(&self.base_path)
            .unwrap_or(std::borrow::Cow::Owned(self.base_path.clone()))
            .into_owned();

        if debug_enabled {
            log::debug!("Decoded base path: '{}'", decoded_path);
        }

        let trimmed_path = decoded_path.trim_matches('/');
        
        if debug_enabled {
            log::debug!("Trimmed path: '{}'", trimmed_path);
        }
        
        if trimmed_path.is_empty() {
            if debug_enabled {
                log::debug!("Path is empty, returning empty string");
            }
            String::new()
        } else {
            let encoded = url::form_urlencoded::byte_serialize(trimmed_path.as_bytes())
                .collect::<String>();
            
            if debug_enabled {
                log::debug!("Final encoded API path: '{}'", encoded);
            }
            encoded
        }
    }

    /// Get the full path for a file
    pub(crate) async fn get_full_path(&self, path: &str) -> String {
        let settings = self.settings.read().await;
        let debug_enabled = settings.system.debug.enabled;
        drop(settings);

        if debug_enabled {
            debug!("Getting full path - Base: '{}', Input path: '{}'",
                self.base_path, path);
        }

        let base = self.base_path.trim_matches('/');
        let path = path.trim_matches('/');

        if debug_enabled {
            log::debug!("Trimmed paths - Base: '{}', Path: '{}'", base, path);
        }
        
        // First decode any existing encoding to prevent double-encoding
        let decoded_path = urlencoding::decode(path)
            .unwrap_or(std::borrow::Cow::Owned(path.to_string()))
            .into_owned();
        let decoded_base = urlencoding::decode(base)
            .unwrap_or(std::borrow::Cow::Owned(base.to_string()))
            .into_owned();
        
        if debug_enabled {
            log::debug!("Decoded paths - Base: '{}', Path: '{}'",
                decoded_base, decoded_path);
        }
        
        let full_path = if !decoded_base.is_empty() {
            if decoded_path.is_empty() {
                if debug_enabled {
                    log::debug!("Using base path only: '{}'", decoded_base);
                }
                decoded_base
            } else {
                let combined = format!("{}/{}", decoded_base, decoded_path);
                if debug_enabled {
                    log::debug!("Combined path: '{}'", combined);
                }
                combined
            }
        } else {
            if debug_enabled {
                log::debug!("Using decoded path only: '{}'", decoded_path);
            }
            decoded_path
        };

        let encoded = url::form_urlencoded::byte_serialize(full_path.as_bytes())
            .collect::<String>();

        if debug_enabled {
            log::debug!("Final encoded full path: '{}'", encoded);
        }

        encoded
    }

    /// Get the base URL for contents API
    pub(crate) async fn get_contents_url(&self, path: &str) -> String {
        let settings = self.settings.read().await;
        let debug_enabled = settings.system.debug.enabled;
        drop(settings);

        if debug_enabled {
            debug!("Constructing contents URL - Owner: '{}', Repo: '{}', Path: '{}'",
                self.owner, self.repo, path);
        }

        let full_path = self.get_full_path(path).await;
        
        if debug_enabled {
            debug!("Encoded full path: '{}'", full_path);
        }

        let url = format!(
            "https://api.github.com/repos/{}/{}/contents/{}",
            self.owner,
            self.repo,
            full_path
        );

        if debug_enabled {
            debug!("Final contents URL: '{}'", url);
        }

        url
    }

    /// Get the client for making requests
    pub(crate) fn client(&self) -> &Client {
        &self.client
    }

    /// Get the authorization token
    pub(crate) fn token(&self) -> &str {
        &self.token
    }

    /// Get owner name
    pub(crate) fn owner(&self) -> &str {
        &self.owner
    }

    /// Get repository name
    pub(crate) fn repo(&self) -> &str {
        &self.repo
    }

    /// Get base path
    pub(crate) fn base_path(&self) -> &str {
        &self.base_path
    }

    /// Get settings
    pub(crate) fn settings(&self) -> &Arc<RwLock<Settings>> {
        &self.settings
    }

    /// Get constants
    pub(crate) fn constants() -> (Duration, u32, Duration) {
        (GITHUB_API_DELAY, MAX_RETRIES, RETRY_DELAY)
    }
}
----
services/github/config.rs
use std::env;
use std::error::Error;
use std::fmt;

#[derive(Debug)]
pub enum GitHubConfigError {
    MissingEnvVar(String),
    ValidationError(String),
}

impl fmt::Display for GitHubConfigError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Self::MissingEnvVar(var) => write!(f, "Missing environment variable: {}", var),
            Self::ValidationError(msg) => write!(f, "Configuration validation error: {}", msg),
        }
    }
}

impl Error for GitHubConfigError {}

#[derive(Debug, Clone)]
pub struct GitHubConfig {
    pub token: String,
    pub owner: String,
    pub repo: String,
    pub base_path: String,
    pub rate_limit: bool,
    pub version: String,
}

impl GitHubConfig {
    pub fn from_env() -> Result<Self, GitHubConfigError> {
        let token = env::var("GITHUB_TOKEN")
            .map_err(|_| GitHubConfigError::MissingEnvVar("GITHUB_TOKEN".to_string()))?;
            
        let owner = env::var("GITHUB_OWNER")
            .map_err(|_| GitHubConfigError::MissingEnvVar("GITHUB_OWNER".to_string()))?;
            
        let repo = env::var("GITHUB_REPO")
            .map_err(|_| GitHubConfigError::MissingEnvVar("GITHUB_REPO".to_string()))?;
            
        let base_path = env::var("GITHUB_BASE_PATH")
            .map_err(|_| GitHubConfigError::MissingEnvVar("GITHUB_BASE_PATH".to_string()))?;

        // Optional settings with defaults
        let rate_limit = env::var("GITHUB_RATE_LIMIT")
            .map(|v| v.parse::<bool>().unwrap_or(true))
            .unwrap_or(true);

        let version = env::var("GITHUB_API_VERSION")
            .unwrap_or_else(|_| "v3".to_string());

        let config = Self {
            token,
            owner,
            repo,
            base_path,
            rate_limit,
            version,
        };

        config.validate()?;

        Ok(config)
    }

    fn validate(&self) -> Result<(), GitHubConfigError> {
        if self.token.is_empty() {
            return Err(GitHubConfigError::ValidationError(
                "GitHub token cannot be empty".to_string(),
            ));
        }

        if self.owner.is_empty() {
            return Err(GitHubConfigError::ValidationError(
                "GitHub owner cannot be empty".to_string(),
            ));
        }

        if self.repo.is_empty() {
            return Err(GitHubConfigError::ValidationError(
                "GitHub repository cannot be empty".to_string(),
            ));
        }

        if self.base_path.is_empty() {
            return Err(GitHubConfigError::ValidationError(
                "GitHub base path cannot be empty".to_string(),
            ));
        }

        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::env;

    #[test]
    fn test_missing_required_vars() {
        env::remove_var("GITHUB_TOKEN");
        env::remove_var("GITHUB_OWNER");
        env::remove_var("GITHUB_REPO");
        env::remove_var("GITHUB_BASE_PATH");

        match GitHubConfig::from_env() {
            Err(GitHubConfigError::MissingEnvVar(var)) => {
                assert_eq!(var, "GITHUB_TOKEN");
            }
            _ => panic!("Expected MissingEnvVar error"),
        }
    }

    #[test]
    fn test_empty_values() {
        env::set_var("GITHUB_TOKEN", "");
        env::set_var("GITHUB_OWNER", "owner");
        env::set_var("GITHUB_REPO", "repo");
        env::set_var("GITHUB_BASE_PATH", "path");

        match GitHubConfig::from_env() {
            Err(GitHubConfigError::ValidationError(msg)) => {
                assert!(msg.contains("token cannot be empty"));
            }
            _ => panic!("Expected ValidationError"),
        }
    }

    #[test]
    fn test_valid_config() {
        env::set_var("GITHUB_TOKEN", "token");
        env::set_var("GITHUB_OWNER", "owner");
        env::set_var("GITHUB_REPO", "repo");
        env::set_var("GITHUB_BASE_PATH", "path");

        let config = GitHubConfig::from_env().unwrap();
        assert_eq!(config.token, "token");
        assert_eq!(config.owner, "owner");
        assert_eq!(config.repo, "repo");
        assert_eq!(config.base_path, "path");
        assert!(config.rate_limit); // Default value
        assert_eq!(config.version, "v3"); // Default value
    }

    #[test]
    fn test_optional_settings() {
        env::set_var("GITHUB_TOKEN", "token");
        env::set_var("GITHUB_OWNER", "owner");
        env::set_var("GITHUB_REPO", "repo");
        env::set_var("GITHUB_BASE_PATH", "path");
        env::set_var("GITHUB_RATE_LIMIT", "false");
        env::set_var("GITHUB_API_VERSION", "v4");

        let config = GitHubConfig::from_env().unwrap();
        assert!(!config.rate_limit);
        assert_eq!(config.version, "v4");
    }
}
----
services/github/content.rs
use super::api::GitHubClient;
use super::types::{GitHubFileMetadata, GitHubError, RateLimitInfo};
use chrono::{DateTime, Utc};
use log::{debug, error, info};
use std::error::Error;
use std::sync::Arc;
use reqwest::header::HeaderMap;
use std::collections::HashMap;
use tokio::sync::RwLock;
use std::time::Duration;
use std::pin::Pin;
use std::future::Future;

const BATCH_SIZE: usize = 5;
const BATCH_DELAY: Duration = Duration::from_millis(500);

/// Handles GitHub content API operations
#[derive(Clone)]
pub struct ContentAPI {
    client: Arc<GitHubClient>,
    rate_limits: Arc<RwLock<HashMap<String, RateLimitInfo>>>,
}

impl ContentAPI {
    /// Create a new ContentAPI instance
    pub fn new(client: Arc<GitHubClient>) -> Self {
        Self {
            client,
            rate_limits: Arc::new(RwLock::new(HashMap::new())),
        }
    }

    /// Ensure consistent URL encoding for paths
    async fn encode_path(&self, path: &str) -> String {
        let settings = self.client.settings().read().await;
        let debug_enabled = settings.system.debug.enabled;
        drop(settings);

        if debug_enabled {
            debug!("Encoding path: '{}'", path);
        }

        // First decode to prevent double-encoding
        let decoded = urlencoding::decode(path)
            .unwrap_or(std::borrow::Cow::Owned(path.to_string()))
            .into_owned();
        
        if debug_enabled {
            debug!("Decoded path: '{}'", decoded);
        }
        
        // Clean the path
        let cleaned = decoded
            .trim_matches('/')
            .replace("//", "/")
            .replace('\\', "/");

        if debug_enabled {
            debug!("Cleaned path: '{}'", cleaned);
        }

        // Encode using form URL encoding for consistent handling
        let encoded = url::form_urlencoded::byte_serialize(cleaned.as_bytes())
            .collect::<String>();

        if debug_enabled {
            debug!("Final encoded path: '{}'", encoded);
        }

        encoded
    }

    /// Extract and update rate limit information from response headers
    async fn update_rate_limits(&self, headers: &HeaderMap) {
        let settings = self.client.settings().read().await;
        let debug_enabled = settings.system.debug.enabled;
        drop(settings);

        if debug_enabled {
            debug!("Processing rate limit headers: {:?}", headers);
        }

        if let (Some(remaining), Some(limit), Some(reset)) = (
            headers.get("x-ratelimit-remaining"),
            headers.get("x-ratelimit-limit"),
            headers.get("x-ratelimit-reset")
        ) {
            let remaining = remaining.to_str().unwrap_or("0").parse().unwrap_or(0);
            let limit = limit.to_str().unwrap_or("0").parse().unwrap_or(0);
            let reset = reset.to_str().unwrap_or("0").parse().unwrap_or(0);
            
            if debug_enabled {
                debug!("Rate limit values - Remaining: {}, Limit: {}, Reset: {}",
                    remaining, limit, reset);
            }
            
            let reset_time = DateTime::from_timestamp(reset, 0)
                .unwrap_or_else(|| Utc::now());

            let info = RateLimitInfo {
                remaining,
                limit,
                reset_time,
            };

            if debug_enabled {
                debug!("Updating rate limits - New info: {:?}", info);
            }

            let mut limits = self.rate_limits.write().await;
            limits.insert("core".to_string(), info);
        } else if debug_enabled {
            debug!("No rate limit headers found in response");
        }
    }

    /// Check rate limits and handle backoff if needed
    fn check_rate_limit(&self) -> Pin<Box<dyn Future<Output = Result<(), GitHubError>> + '_>> {
        Box::pin(async move {
            let settings = self.client.settings().read().await;
            let debug_enabled = settings.system.debug.enabled;
            drop(settings);

            if debug_enabled {
                debug!("Checking rate limits...");
            }

            let limits = self.rate_limits.read().await;
            if let Some(info) = limits.get("core") {
                if debug_enabled {
                    debug!("Current rate limit info: {:?}", info);
                }

                if info.remaining == 0 {
                    let now = Utc::now();
                    if debug_enabled {
                        debug!("Rate limit exhausted. Current time: {}, Reset time: {}",
                            now, info.reset_time);
                    }

                    if now < info.reset_time {
                        let wait_time = info.reset_time - now;
                        let backoff = wait_time.num_seconds().min(30) as u64;
                        
                        if debug_enabled {
                            debug!("Rate limited. Wait time: {}s, Using backoff: {}s",
                                wait_time.num_seconds(), backoff);
                        }
                        
                        // Drop the read lock before sleeping
                        drop(limits);
                        
                        // Sleep with exponential backoff, max 30 seconds
                        tokio::time::sleep(Duration::from_secs(backoff)).await;
                        
                        if debug_enabled {
                            debug!("Backoff complete, rechecking rate limits");
                        }
                        
                        // Recursively check rate limit
                        return self.check_rate_limit().await;
                    }

                    if debug_enabled {
                        debug!("Rate limit exceeded and reset time passed");
                    }
                    return Err(GitHubError::RateLimitExceeded(info.clone()));
                }

                if debug_enabled {
                    debug!("Rate limit check passed. Remaining: {}/{}",
                        info.remaining, info.limit);
                }
            } else if debug_enabled {
                debug!("No rate limit information available");
            }
            Ok(())
        })
    }

    /// Check if a file is public by reading just the first line
    pub async fn check_file_public(&self, download_url: &str) -> Result<bool, Box<dyn Error + Send + Sync>> {
        // Check rate limits before making request
        self.check_rate_limit().await?;

        // First try a HEAD request to get content length
        let head_response = self.client.client()
            .head(download_url)
            .header("Authorization", format!("Bearer {}", self.client.token()))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        // Update rate limits from HEAD response
        self.update_rate_limits(head_response.headers()).await;

        // Get content length, default to 1024 if not available
        let content_length: u64 = head_response
            .headers()
            .get("content-length")
            .and_then(|v| v.to_str().ok())
            .and_then(|v| v.parse().ok())
            .unwrap_or(1024);

        // Calculate appropriate range based on content length
        let range = if content_length < 100 {
            format!("bytes=0-{}", content_length - 1)
        } else {
            "bytes=0-100".to_string()
        };

        debug!("Using range {} for file of size {}", range, content_length);

        let response = self.client.client()
            .get(download_url)
            .header("Authorization", format!("Bearer {}", self.client.token()))
            .header("Accept", "application/vnd.github+json")
            .header("Range", range)
            .send()
            .await?;

        // Update rate limits from response headers
        self.update_rate_limits(response.headers()).await;

        let status = response.status();
        match status.as_u16() {
            200 | 206 => { // Success or Partial Content
                let content = response.text().await?;
                debug!("First line check ({}): '{}'", download_url, content.trim());
                Ok(content.trim().starts_with("public:: true"))
            },
            404 => {
                error!("File not found: {}", download_url);
                Err(Box::new(GitHubError::NotFound(download_url.to_string())))
            },
            416 => { // Range Not Satisfiable
                debug!("File exists but is empty or too small: {}", download_url);
                Ok(false)
            },
            429 => {
                let limits = self.rate_limits.read().await;
                if let Some(info) = limits.get("core") {
                    Err(Box::new(GitHubError::RateLimitExceeded(info.clone())))
                } else {
                    Err("Rate limit exceeded without limit info".into())
                }
            },
            _ => {
                let error_text = response.text().await.unwrap_or_else(|_| "Unknown error".to_string());
                error!("Failed to check file public status. Status: {}, Error: {}", status, error_text);
                Err(Box::new(GitHubError::ApiError(format!("{} - {}", status, error_text))))
            }
        }
    }

    /// Fetch full content of a file
    pub async fn fetch_file_content(&self, download_url: &str) -> Result<String, Box<dyn Error + Send + Sync>> {
        // Check rate limits before making request
        self.check_rate_limit().await?;

        let response = self.client.client()
            .get(download_url)
            .header("Authorization", format!("Bearer {}", self.client.token()))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        // Update rate limits from response headers
        self.update_rate_limits(response.headers()).await;

        let status = response.status();
        match status.as_u16() {
            200 => {
                let content = response.text().await?;
                Ok(content)
            },
            404 => {
                error!("File not found: {}", download_url);
                Err(Box::new(GitHubError::NotFound(download_url.to_string())))
            },
            429 => {
                let limits = self.rate_limits.read().await;
                if let Some(info) = limits.get("core") {
                    Err(Box::new(GitHubError::RateLimitExceeded(info.clone())))
                } else {
                    Err("Rate limit exceeded without limit info".into())
                }
            },
            _ => {
                let error_text = response.text().await.unwrap_or_else(|_| "Unknown error".to_string());
                error!("Failed to fetch file content. Status: {}, Error: {}", status, error_text);
                Err(Box::new(GitHubError::ApiError(format!("{} - {}", status, error_text))))
            }
        }
    }

    /// Get the last modified time for a file
    pub async fn get_file_last_modified(&self, file_path: &str) -> Result<DateTime<Utc>, Box<dyn Error + Send + Sync>> {
        // Check rate limits before making request
        self.check_rate_limit().await?;

        // Use GitHubClient's path handling
        let encoded_path = self.client.get_full_path(file_path).await;
        let url = format!(
            "https://api.github.com/repos/{}/{}/commits",
            self.client.owner(), self.client.repo()
        );

        debug!("GitHub API URL: {}", url);
        debug!("Query parameters: path={}, per_page=1", encoded_path);
        debug!("Getting last modified time - Original path: {}, Encoded path: {}",
            file_path, encoded_path);

        let response = self.client.client()
            .get(&url)
            .header("Authorization", format!("Bearer {}", self.client.token()))
            .header("Accept", "application/vnd.github+json")
            .query(&[("path", encoded_path.as_str()), ("per_page", "1")])
            .send()
            .await?;

        // Update rate limits from response headers
        self.update_rate_limits(response.headers()).await;

        let status = response.status();
        if !status.is_success() {
            let error_text = response.text().await?;
            error!("Failed to get last modified time. Status: {}, Error: {}", status, error_text);
            
            return match status.as_u16() {
                404 => Err(Box::new(GitHubError::NotFound(file_path.to_string()))),
                429 => {
                    let limits = self.rate_limits.read().await;
                    if let Some(info) = limits.get("core") {
                        Err(Box::new(GitHubError::RateLimitExceeded(info.clone())))
                    } else {
                        Err(format!("Rate limit exceeded without limit info").into())
                    }
                },
                _ => Err(format!("GitHub API error: {} - {}", status, error_text).into())
            };
        }

        let response_text = response.text().await?;
        debug!("GitHub API Response for commits: {}", response_text);
        
        let commits: Vec<serde_json::Value> = serde_json::from_str(&response_text)?;
        
        if commits.is_empty() {
            error!("Empty commits array returned for path: {} (encoded: {})", file_path, encoded_path);
            return Err(Box::new(GitHubError::NotFound(format!("No commit history found for {}", file_path))));
        }
        
        if let Some(last_commit) = commits.first() {
            debug!("Found commit data: {}", serde_json::to_string_pretty(last_commit)?);
            if let Some(commit) = last_commit["commit"]["committer"]["date"].as_str() {
                if let Ok(date) = DateTime::parse_from_rfc3339(commit) {
                    return Ok(date.with_timezone(&Utc));
                } else {
                    error!("Failed to parse commit date: {}", commit);
                    return Err("Failed to parse commit date from GitHub response".into());
                }
            } else {
                error!("No committer date found in commit data");
                return Err("No committer date found in GitHub response".into());
            }
        } else {
            error!("No commits found for file: {} (encoded path: {})", file_path, encoded_path);
            return Err(format!("No commit history found for file: {} (API path: {})", file_path, encoded_path).into());
        }
    }

    /// List all markdown files in a directory
    pub async fn list_markdown_files(&self, path: &str) -> Result<Vec<GitHubFileMetadata>, Box<dyn Error + Send + Sync>> {
        // Use GitHubClient's contents URL construction
        let url = self.client.get_contents_url(path).await;
        
        info!("GitHub API Request: URL={}, Original Path={}",
            url, path);

        let response = self.client.client()
            .get(&url)
            .header("Authorization", format!("Bearer {}", self.client.token()))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        let status = response.status();
        let headers = response.headers().clone();
        
        info!("GitHub API Response: Status={}, Headers={:?}", status, headers);

        let body = response.text().await?;
        info!("GitHub API Response Body (first 1000 chars): {}", &body[..body.len().min(1000)]);

        if !status.is_success() {
            let error_msg = match serde_json::from_str::<serde_json::Value>(&body) {
                Ok(error_json) => {
                    let msg = error_json["message"].as_str().unwrap_or("Unknown error");
                    format!("GitHub API error: {} - {}", status, msg)
                },
                Err(_) => format!("GitHub API error: {} - {}", status, body)
            };
            error!("{}", error_msg);
            return Err(error_msg.into());
        }

        let contents: Vec<serde_json::Value> = serde_json::from_str(&body)?;

        let settings = self.client.settings().read().await;
        let debug_enabled = settings.system.debug.enabled;
        drop(settings);

        if debug_enabled {
            debug!("Found {} total items in directory", contents.len());
            debug!("Batch size: {}, Expected batches: {}",
                BATCH_SIZE,
                (contents.len() + BATCH_SIZE - 1) / BATCH_SIZE
            );
            
            // Log file types distribution
            let file_count = contents.iter()
                .filter(|item| item["type"].as_str().unwrap_or("") == "file")
                .count();
            let md_count = contents.iter()
                .filter(|item| {
                    item["type"].as_str().unwrap_or("") == "file" &&
                    item["name"].as_str().unwrap_or("").ends_with(".md")
                })
                .count();
            debug!("Content distribution - Total: {}, Files: {}, Markdown: {}",
                contents.len(), file_count, md_count);
        }
        
        let mut markdown_files = Vec::new();
        let mut current_idx = 0;
        
        // Process files in batches
        while current_idx < contents.len() {
            let end_idx = (current_idx + BATCH_SIZE).min(contents.len());
            let batch_number = current_idx / BATCH_SIZE + 1;
            let total_batches = (contents.len() + BATCH_SIZE - 1) / BATCH_SIZE;
            
            if debug_enabled {
                debug!("Starting batch {}/{} (items {}-{} of {})",
                    batch_number,
                    total_batches,
                    current_idx + 1,
                    end_idx,
                    contents.len()
                );
            }
            
            for item in &contents[current_idx..end_idx] {
                let item_type = item["type"].as_str().unwrap_or("");
                let item_name = item["name"].as_str().unwrap_or("");
                
                if debug_enabled {
                    debug!("Examining item: type='{}', name='{}'", item_type, item_name);
                }

                if item_type == "file" && item_name.ends_with(".md") {
                    let name = item_name.to_string();
                    
                    if debug_enabled {
                        if !name.contains("Debug Test Page") && !name.contains("debug linked node") {
                            debug!("Skipping non-debug file in debug mode: {}", name);
                            continue;
                        }
                        debug!("Processing debug markdown file: {}", name);
                    } else {
                        debug!("Processing markdown file: {}", name);
                    }
                
                // Use the file name directly since base path is already handled
                debug!("Repository path for commits query: {}", name);
                
                // Combine with base path and get last modified time
                let full_path = if path.is_empty() {
                    name.clone()
                } else {
                    format!("{}/{}", path.trim_matches('/'), name)
                };
                // Add delay between API calls within batch
                tokio::time::sleep(BATCH_DELAY).await;
                
                if debug_enabled {
                    debug!("Fetching last modified time for: {}", full_path);
                }

                let last_modified = match self.get_file_last_modified(&full_path).await {
                    Ok(time) => {
                        if debug_enabled {
                            debug!("Got last modified time for {}: {}", name, time);
                        }
                        Some(time)
                    },
                    Err(e) => {
                        error!("Failed to get last modified time for {}: {}", name, e);
                        if debug_enabled {
                            debug!("Using current time as fallback for {}", name);
                        }
                        Some(Utc::now())
                    }
                };

                let sha = item["sha"].as_str().unwrap_or("").to_string();
                let download_url = item["download_url"].as_str().unwrap_or("").to_string();
                
                if debug_enabled {
                    debug!("Collecting metadata - Name: {}, SHA: {}, URL: {}",
                        name, sha, download_url);
                }
                
                markdown_files.push(GitHubFileMetadata {
                    name,
                    sha,
                    download_url,
                    etag: None,
                    last_checked: Some(Utc::now()),
                    last_modified,
                });
                }
            }
            
            // Move to next batch
            current_idx = end_idx;
            
            let batch_number = current_idx / BATCH_SIZE;
            let total_batches = (contents.len() + BATCH_SIZE - 1) / BATCH_SIZE;
            let progress = (current_idx * 100) / contents.len();
            
            // Log batch completion with detailed stats
            info!("Completed batch {}/{} - {}% complete ({} files processed)",
                batch_number,
                total_batches,
                progress,
                markdown_files.len()
            );
            
            if debug_enabled {
                let remaining_items = contents.len() - current_idx;
                let est_remaining_batches = (remaining_items + BATCH_SIZE - 1) / BATCH_SIZE;
                let est_remaining_time = est_remaining_batches as u64 * BATCH_DELAY.as_secs();
                
                debug!("Batch performance - Remaining items: {}, Est. remaining batches: {}, Est. time: {}s",
                    remaining_items,
                    est_remaining_batches,
                    est_remaining_time
                );
            }
            
            // Add delay between batches if not the last batch
            if current_idx < contents.len() {
                if debug_enabled {
                    debug!("Adding inter-batch delay of {}ms", BATCH_DELAY.as_millis());
                }
                tokio::time::sleep(BATCH_DELAY).await;
            }
        }

        if debug_enabled {
            info!("Debug mode: Processing only debug test files");
        }

        info!("Found {} markdown files in {} batches",
            markdown_files.len(),
            (contents.len() + BATCH_SIZE - 1) / BATCH_SIZE
        );
        Ok(markdown_files)
    }
}
----
services/github/mod.rs
//! GitHub service module providing API interactions for content and pull requests
//!
//! This module is split into:
//! - Content API: Handles fetching and checking markdown files
//! - Pull Request API: Manages creation and updates of pull requests
//! - Common types and error handling
//! - Configuration: Environment-based configuration

mod api;
mod content;
mod pr;
pub mod types;
pub mod config;

pub use api::GitHubClient;
pub use content::ContentAPI;
pub use pr::PullRequestAPI;
pub use types::{GitHubError, GitHubFile, GitHubFileMetadata};
pub use config::GitHubConfig;

// Re-export commonly used types for convenience
pub use types::{ContentResponse, PullRequestResponse};
----
services/github/pr.rs
use super::api::GitHubClient;
use super::types::{CreateBranchRequest, CreatePullRequest, UpdateFileRequest, PullRequestResponse};
use base64::{Engine as _, engine::general_purpose::STANDARD as BASE64};
use log::{error, info};
use std::error::Error;
use chrono::Utc;

/// Handles GitHub Pull Request operations
use std::sync::Arc;

pub struct PullRequestAPI {
    client: Arc<GitHubClient>,
}

impl PullRequestAPI {
    /// Create a new PullRequestAPI instance
    pub fn new(client: Arc<GitHubClient>) -> Self {
        Self { client }
    }

    /// Create a pull request for a file update
    pub async fn create_pull_request(
        &self,
        file_name: &str,
        content: &str,
        original_sha: &str,
    ) -> Result<String, Box<dyn Error + Send + Sync>> {
        let timestamp = Utc::now().timestamp();
        let branch_name = format!("update-{}-{}", file_name.replace(".md", ""), timestamp);
        
        let main_sha = self.get_main_branch_sha().await?;
        self.create_branch(&branch_name, &main_sha).await?;
        
        let file_path = format!("{}/{}", self.client.base_path(), file_name);
        let new_sha = self.update_file(&file_path, content, &branch_name, original_sha).await?;
        
        let url = format!(
            "https://api.github.com/repos/{}/{}/pulls",
            self.client.owner(), self.client.repo()
        );

        let pr_body = CreatePullRequest {
            title: format!("Update: {}", file_name),
            head: branch_name,
            base: "main".to_string(),
            body: format!(
                "This PR updates content for {}.\n\nOriginal SHA: {}\nNew SHA: {}",
                file_name, original_sha, new_sha
            ),
        };

        let response = self.client.client()
            .post(&url)
            .header("Authorization", format!("Bearer {}", self.client.token()))
            .header("Accept", "application/vnd.github+json")
            .json(&pr_body)
            .send()
            .await?;

        if !response.status().is_success() {
            let error_text = response.text().await?;
            error!("Failed to create PR: {}", error_text);
            return Err(format!("GitHub API error: {}", error_text).into());
        }

        let pr_response: PullRequestResponse = response.json().await?;
        info!("Created PR: {}", pr_response.html_url);
        Ok(pr_response.html_url)
    }

    /// Get the SHA of the main branch
    async fn get_main_branch_sha(&self) -> Result<String, Box<dyn Error + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/git/ref/heads/main",
            self.client.owner(), self.client.repo()
        );

        let response = self.client.client()
            .get(&url)
            .header("Authorization", format!("Bearer {}", self.client.token()))
            .header("Accept", "application/vnd.github+json")
            .send()
            .await?;

        if !response.status().is_success() {
            let error_text = response.text().await?;
            error!("Failed to get main branch SHA: {}", error_text);
            return Err(format!("GitHub API error: {}", error_text).into());
        }

        let response_json: serde_json::Value = response.json().await?;
        Ok(response_json["object"]["sha"]
            .as_str()
            .ok_or_else(|| "SHA not found in response".to_string())?
            .to_string())
    }

    /// Create a new branch
    async fn create_branch(&self, branch_name: &str, sha: &str) -> Result<(), Box<dyn Error + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/git/refs",
            self.client.owner(), self.client.repo()
        );

        let body = CreateBranchRequest {
            ref_name: format!("refs/heads/{}", branch_name),
            sha: sha.to_string(),
        };

        let response = self.client.client()
            .post(&url)
            .header("Authorization", format!("Bearer {}", self.client.token()))
            .header("Accept", "application/vnd.github+json")
            .json(&body)
            .send()
            .await?;

        if !response.status().is_success() {
            let error_text = response.text().await?;
            error!("Failed to create branch: {}", error_text);
            return Err(format!("GitHub API error: {}", error_text).into());
        }

        Ok(())
    }

    /// Update a file in a branch
    async fn update_file(
        &self,
        file_path: &str,
        content: &str,
        branch_name: &str,
        original_sha: &str,
    ) -> Result<String, Box<dyn Error + Send + Sync>> {
        let url = format!(
            "https://api.github.com/repos/{}/{}/contents/{}",
            self.client.owner(), self.client.repo(), file_path
        );

        let encoded_content = BASE64.encode(content);
        
        let body = UpdateFileRequest {
            message: format!("Update {}", file_path),
            content: encoded_content,
            sha: original_sha.to_string(),
            branch: branch_name.to_string(),
        };

        let response = self.client.client()
            .put(&url)
            .header("Authorization", format!("Bearer {}", self.client.token()))
            .header("Accept", "application/vnd.github+json")
            .json(&body)
            .send()
            .await?;

        if !response.status().is_success() {
            let error_text = response.text().await?;
            error!("Failed to update file: {}", error_text);
            return Err(format!("GitHub API error: {}", error_text).into());
        }

        let response_json: serde_json::Value = response.json().await?;
        Ok(response_json["content"]["sha"]
            .as_str()
            .ok_or_else(|| "SHA not found in response".to_string())?
            .to_string())
    }
}
----
services/github/types.rs
use serde::{Deserialize, Serialize};
use chrono::{DateTime, Utc};
use std::error::Error;
use std::fmt;

/// Rate limit information from GitHub API
#[derive(Debug, Clone)]
pub struct RateLimitInfo {
    pub remaining: u32,
    pub limit: u32,
    pub reset_time: DateTime<Utc>,
}

/// Represents errors that can occur during GitHub API operations
#[derive(Debug)]
pub enum GitHubError {
    /// Error returned by the GitHub API itself
    ApiError(String),
    /// Network-related errors during API calls
    NetworkError(reqwest::Error),
    /// JSON serialization/deserialization errors
    SerializationError(serde_json::Error),
    /// Input validation errors
    ValidationError(String),
    /// Base64 encoding/decoding errors
    Base64Error(base64::DecodeError),
    /// Rate limit exceeded
    RateLimitExceeded(RateLimitInfo),
    /// Resource not found
    NotFound(String),
}

impl fmt::Display for GitHubError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            GitHubError::ApiError(msg) => write!(f, "GitHub API error: {}", msg),
            GitHubError::NetworkError(e) => write!(f, "Network error: {}", e),
            GitHubError::SerializationError(e) => write!(f, "Serialization error: {}", e),
            GitHubError::ValidationError(msg) => write!(f, "Validation error: {}", msg),
            GitHubError::Base64Error(e) => write!(f, "Base64 encoding error: {}", e),
            GitHubError::RateLimitExceeded(info) => {
                write!(f, "Rate limit exceeded. Remaining: {}/{}, Reset time: {}",
                    info.remaining, info.limit, info.reset_time)
            }
            GitHubError::NotFound(path) => {
                write!(f, "Resource not found: {}", path)
            }
        }
    }
}

impl Error for GitHubError {}

impl From<reqwest::Error> for GitHubError {
    fn from(err: reqwest::Error) -> Self {
        GitHubError::NetworkError(err)
    }
}

impl From<serde_json::Error> for GitHubError {
    fn from(err: serde_json::Error) -> Self {
        GitHubError::SerializationError(err)
    }
}

impl From<base64::DecodeError> for GitHubError {
    fn from(err: base64::DecodeError) -> Self {
        GitHubError::Base64Error(err)
    }
}

/// Represents a file in the GitHub repository
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct GitHubFile {
    /// Name of the file
    pub name: String,
    /// Full path to the file in the repository
    pub path: String,
    /// SHA hash of the file content
    pub sha: String,
    /// Size of the file in bytes
    pub size: usize,
    /// GitHub API URL for the file
    pub url: String,
    /// Direct download URL for the file content
    pub download_url: String,
}

/// Metadata about a file from GitHub including tracking information
#[derive(Debug, Serialize, Deserialize, Clone, Eq, PartialEq, Hash)]
pub struct GitHubFileMetadata {
    /// Name of the file
    pub name: String,
    /// SHA hash of the file content
    pub sha: String,
    /// Direct download URL for the file content
    pub download_url: String,
    /// ETag for caching
    pub etag: Option<String>,
    /// When this metadata was last checked
    #[serde(with = "chrono::serde::ts_seconds_option")]
    pub last_checked: Option<DateTime<Utc>>,
    /// When the file was last modified on GitHub
    #[serde(with = "chrono::serde::ts_seconds_option")]
    pub last_modified: Option<DateTime<Utc>>,
}

/// Response from content-related API calls
#[derive(Debug, Deserialize)]
pub struct ContentResponse {
    pub sha: String,
}

/// Response from pull request creation
#[derive(Debug, Deserialize)]
pub struct PullRequestResponse {
    pub html_url: String,
    pub number: u32,
    pub state: String,
}

/// Request to create a new branch
#[derive(Debug, Serialize)]
pub struct CreateBranchRequest {
    pub ref_name: String,
    pub sha: String,
}

/// Request to create a pull request
#[derive(Debug, Serialize)]
pub struct CreatePullRequest {
    pub title: String,
    pub head: String,
    pub base: String,
    pub body: String,
}

/// Request to update a file
#[derive(Debug, Serialize)]
pub struct UpdateFileRequest {
    pub message: String,
    pub content: String,
    pub sha: String,
    pub branch: String,
}
----
utils/case_conversion.rs
use lazy_static::lazy_static;
use regex::Regex;

lazy_static! {
    static ref CAMEL_TO_SNAKE: Regex = Regex::new(r"([a-z0-9])([A-Z])").unwrap();
    static ref SNAKE_TO_CAMEL: Regex = Regex::new(r"[_-]([a-z])").unwrap();
    static ref CAMEL_TO_KEBAB: Regex = Regex::new(r"([a-z0-9])([A-Z])").unwrap();
    static ref SNAKE_TO_KEBAB: Regex = Regex::new(r"_").unwrap();
    static ref KEBAB_TO_SNAKE: Regex = Regex::new(r"-").unwrap();
}

pub fn to_snake_case(s: &str) -> String {
    // First convert kebab-case to snake_case
    let s = KEBAB_TO_SNAKE.replace_all(s, "_");
    // Then convert camelCase to snake_case
    CAMEL_TO_SNAKE.replace_all(&s, "${1}_${2}").to_lowercase()
}

pub fn to_camel_case(s: &str) -> String {
    let mut result = String::with_capacity(s.len());
    let mut capitalize_next = false;

    for (i, c) in s.chars().enumerate() {
        if c == '_' {
            capitalize_next = true;
        } else if capitalize_next {
            result.push(c.to_ascii_uppercase());
            capitalize_next = false;
        } else if i == 0 {
            result.push(c.to_ascii_lowercase());
        } else {
            result.push(c);
        }
    }

    result
}

pub fn to_kebab_case(s: &str) -> String {
    // First convert to snake case (handles both camelCase and existing snake_case)
    let snake = to_snake_case(s);
    // Then replace underscores with hyphens
    SNAKE_TO_KEBAB.replace_all(&snake, "-").to_string()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_to_snake_case() {
        // Test camelCase to snake_case
        assert_eq!(to_snake_case("baseSize"), "base_size");
        assert_eq!(to_snake_case("enableHoverEffect"), "enable_hover_effect");
        assert_eq!(to_snake_case("backgroundColor"), "background_color");

        // Test kebab-case to snake_case
        assert_eq!(to_snake_case("base-size"), "base_size");
        assert_eq!(to_snake_case("enable-hover-effect"), "enable_hover_effect");

        // Test already snake_case
        assert_eq!(to_snake_case("base_size"), "base_size");
        assert_eq!(to_snake_case("enable_hover_effect"), "enable_hover_effect");

        // Test mixed cases
        assert_eq!(to_snake_case("base-Size"), "base_size");
        assert_eq!(to_snake_case("enable_hoverEffect"), "enable_hover_effect");
    }

    #[test]
    fn test_to_camel_case() {
        // Test snake_case to camelCase
        assert_eq!(to_camel_case("base_size"), "baseSize");
        assert_eq!(to_camel_case("enable_hover_effect"), "enableHoverEffect");

        // Test kebab-case to camelCase
        assert_eq!(to_camel_case("base-size"), "baseSize");
        assert_eq!(to_camel_case("enable-hover-effect"), "enableHoverEffect");

        // Test already camelCase
        assert_eq!(to_camel_case("baseSize"), "baseSize");
        assert_eq!(to_camel_case("enableHoverEffect"), "enableHoverEffect");

        // Test mixed cases
        assert_eq!(to_camel_case("base-Size"), "baseSize");
        assert_eq!(to_camel_case("enable_hoverEffect"), "enableHoverEffect");
    }

    #[test]
    fn test_to_kebab_case() {
        // Test camelCase to kebab-case
        assert_eq!(to_kebab_case("baseSize"), "base-size");
        assert_eq!(to_kebab_case("enableHoverEffect"), "enable-hover-effect");

        // Test snake_case to kebab-case
        assert_eq!(to_kebab_case("base_size"), "base-size");
        assert_eq!(to_kebab_case("enable_hover_effect"), "enable-hover-effect");

        // Test already kebab-case
        assert_eq!(to_kebab_case("base-size"), "base-size");
        assert_eq!(to_kebab_case("enable-hover-effect"), "enable-hover-effect");

        // Test mixed cases
        assert_eq!(to_kebab_case("base_Size"), "base-size");
        assert_eq!(to_kebab_case("enable-hoverEffect"), "enable-hover-effect");
    }
}

----
utils/logging.rs
use log::LevelFilter;
use log::info;
use simplelog::{CombinedLogger, Config, TermLogger, TerminalMode, WriteLogger};
use std::fs::File;
use std::io;

#[derive(Debug)]
pub struct LogConfig {
    file_level: LevelFilter,
    console_level: LevelFilter,
}

impl Default for LogConfig {
    fn default() -> Self {
        Self {
            file_level: LevelFilter::Debug,
            console_level: LevelFilter::Info,
        }
    }
}

impl LogConfig {
    pub fn new(file_level: &str, console_level: &str) -> Self {
        Self {
            file_level: match file_level {
                "trace" => LevelFilter::Trace,
                "debug" => LevelFilter::Debug,
                "info" => LevelFilter::Info,
                "warn" => LevelFilter::Warn,
                "error" => LevelFilter::Error,
                _ => LevelFilter::Info,
            },
            console_level: match console_level {
                "trace" => LevelFilter::Trace,
                "debug" => LevelFilter::Debug,
                "info" => LevelFilter::Info,
                "warn" => LevelFilter::Warn,
                "error" => LevelFilter::Error,
                _ => LevelFilter::Info,
            },
        }
    }
}

pub fn init_logging_with_config(config: LogConfig) -> io::Result<()> {
    let log_file = File::create("/tmp/webxr.log")?;
    
    CombinedLogger::init(vec![
        TermLogger::new(
            config.console_level,
            Config::default(),
            TerminalMode::Mixed,
            simplelog::ColorChoice::Auto,
        ),
        WriteLogger::new(
            config.file_level,
            Config::default(),
            log_file,
        ),
    ]).map_err(|e| io::Error::new(io::ErrorKind::Other, e))?;

    info!("Logging initialized with level file:{:?} console:{:?}", 
          config.file_level, config.console_level);
    Ok(())
}

pub fn init_logging() -> io::Result<()> {
    init_logging_with_config(LogConfig::default())
} 
----
utils/audio_processor.rs
use serde_json::Value;
use base64::{Engine as _, engine::general_purpose::STANDARD as BASE64};
use std::sync::Arc;
use tokio::sync::RwLock;
use crate::config::Settings;
use log::{error, info, warn};

pub struct AudioProcessor {
    settings: Arc<RwLock<Settings>>,
}

impl AudioProcessor {
    pub fn new(settings: Arc<RwLock<Settings>>) -> Self {
        Self { settings }
    }

    pub async fn process_json_response(&self, response_data: &[u8]) -> Result<(String, Vec<u8>), String> {
        let _settings = self.settings.read().await;
        
        // Parse the JSON response
        let json_response: Value = serde_json::from_slice(response_data)
            .map_err(|e| format!("Failed to parse JSON response: {}", e))?;
        
        // Log the entire JSON response if data debug is enabled
        info!("Received JSON response: {}", 
            serde_json::to_string_pretty(&json_response).unwrap_or_else(|_| "Unable to prettify JSON".to_string())
        );
        
        // Check if the response contains an error message
        if let Some(error_msg) = json_response["error"].as_str() {
            error!("Error in JSON response: {}", error_msg);
            return Err(format!("Error in JSON response: {}", error_msg));
        }

        // Extract the text answer with better error handling
        let answer = json_response["data"]["answer"]
            .as_str()
            .or_else(|| json_response["answer"].as_str())
            .ok_or_else(|| {
                error!("Text answer not found in JSON response");
                "Text answer not found in JSON response".to_string()
            })?
            .to_string();

        // Try to extract the audio data from different possible locations with detailed logging
        let audio_data = if let Some(audio) = json_response["data"]["audio"].as_str() {
            info!("Found audio data in data.audio");
            BASE64.decode(audio).map_err(|e| format!("Failed to decode base64 audio data from data.audio: {}", e))?
        } else if let Some(audio) = json_response["audio"].as_str() {
            info!("Found audio data in root.audio");
            BASE64.decode(audio).map_err(|e| format!("Failed to decode base64 audio data from root.audio: {}", e))?
        } else {
            // Log available paths in the JSON for debugging
            warn!("Audio data not found in JSON response. Available paths:");
            if let Some(obj) = json_response.as_object() {
                for (key, value) in obj {
                    warn!("- {}: {}", key, match value {
                        Value::Null => "null",
                        Value::Bool(_) => "boolean",
                        Value::Number(_) => "number",
                        Value::String(_) => "string",
                        Value::Array(_) => "array",
                        Value::Object(_) => "object",
                    });
                }
            }
            return Err("Audio data not found in JSON response".to_string());
        };
        
        info!("Successfully processed audio data: {} bytes", audio_data.len());
        
        // Validate WAV header
        if audio_data.len() >= 44 {
            info!("WAV header: {:?}", &audio_data[..44]);
            
            if &audio_data[..4] != b"RIFF" || &audio_data[8..12] != b"WAVE" {
                error!("Invalid WAV header detected");
                return Err("Invalid WAV header".to_string());
            }
            
            // Extract and log WAV format information
            let channels = u16::from_le_bytes([audio_data[22], audio_data[23]]);
            let sample_rate = u32::from_le_bytes([audio_data[24], audio_data[25], audio_data[26], audio_data[27]]);
            let bits_per_sample = u16::from_le_bytes([audio_data[34], audio_data[35]]);
            
            info!("WAV format: {} channels, {} Hz, {} bits per sample", 
                channels, sample_rate, bits_per_sample);
        } else {
            error!("Audio data too short to contain WAV header: {} bytes", audio_data.len());
            return Err("Audio data too short".to_string());
        }
        
        Ok((answer, audio_data))
    }

    pub async fn validate_wav_header(&self, audio_data: &[u8]) -> Result<(), String> {
        if audio_data.len() < 44 {
            return Err("Audio data too short for WAV header".to_string());
        }

        if &audio_data[..4] != b"RIFF" {
            return Err("Missing RIFF header".to_string());
        }

        if &audio_data[8..12] != b"WAVE" {
            return Err("Missing WAVE format".to_string());
        }

        let channels = u16::from_le_bytes([audio_data[22], audio_data[23]]);
        let sample_rate = u32::from_le_bytes([audio_data[24], audio_data[25], audio_data[26], audio_data[27]]);
        let bits_per_sample = u16::from_le_bytes([audio_data[34], audio_data[35]]);

        info!("Validated WAV format: {} channels, {} Hz, {} bits per sample",
            channels, sample_rate, bits_per_sample);

        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use serde_json::json;
    use tokio::runtime::Runtime;

    fn create_test_settings() -> Arc<RwLock<Settings>> {
        let settings = Settings {
            debug_mode: false,
            debug: crate::config::DebugSettings {
                enable_websocket_debug: false,
                enable_data_debug: false,
                log_binary_headers: false,
                log_full_json: false,
            },
            // Add other required fields with default values
            ..Default::default()
        };
        Arc::new(RwLock::new(settings))
    }

    #[test]
    fn test_process_json_response_valid() {
        let rt = Runtime::new().unwrap();
        let settings = create_test_settings();
        let processor = AudioProcessor::new(settings);

        let test_wav = vec![
            b'R', b'I', b'F', b'F', // ChunkID
            0x24, 0x00, 0x00, 0x00, // ChunkSize
            b'W', b'A', b'V', b'E', // Format
            b'f', b'm', b't', b' ', // Subchunk1ID
            0x10, 0x00, 0x00, 0x00, // Subchunk1Size
            0x01, 0x00,             // AudioFormat (PCM)
            0x01, 0x00,             // NumChannels (Mono)
            0x44, 0xAC, 0x00, 0x00, // SampleRate (44100)
            0x88, 0x58, 0x01, 0x00, // ByteRate
            0x02, 0x00,             // BlockAlign
            0x10, 0x00,             // BitsPerSample (16)
            b'd', b'a', b't', b'a', // Subchunk2ID
            0x00, 0x00, 0x00, 0x00  // Subchunk2Size
        ];

        let json_data = json!({
            "data": {
                "answer": "Test answer",
                "audio": BASE64.encode(test_wav)
            }
        });

        let result = rt.block_on(processor.process_json_response(
            serde_json::to_vec(&json_data).unwrap().as_slice()
        ));

        assert!(result.is_ok());
        let (answer, audio) = result.unwrap();
        assert_eq!(answer, "Test answer");
        assert_eq!(&audio[..4], b"RIFF");
    }

    #[test]
    fn test_process_json_response_invalid_wav() {
        let rt = Runtime::new().unwrap();
        let settings = create_test_settings();
        let processor = AudioProcessor::new(settings);

        let invalid_wav = vec![0x00; 44]; // Invalid WAV header
        let json_data = json!({
            "data": {
                "answer": "Test answer",
                "audio": BASE64.encode(invalid_wav)
            }
        });

        let result = rt.block_on(processor.process_json_response(
            serde_json::to_vec(&json_data).unwrap().as_slice()
        ));

        assert!(result.is_err());
    }
}

----
utils/gpu_compute.rs
#[cfg(feature = "gpu")]
use cudarc::driver::{CudaDevice, CudaFunction, CudaSlice, LaunchConfig, LaunchAsync};
#[cfg(feature = "gpu")]
use cudarc::nvrtc::Ptx;
use cudarc::driver::sys::CUdevice_attribute_enum;

use std::io::{Error, ErrorKind};
use std::sync::Arc;
use log::{debug, error, warn};
use crate::models::graph::GraphData;
use std::collections::HashMap;
use crate::models::simulation_params::SimulationParams;
use crate::utils::socket_flow_messages::{BinaryNodeData, vec3data_to_array, array_to_vec3data};
use tokio::sync::RwLock;

// Constants for GPU computation
#[cfg(feature = "gpu")]
const BLOCK_SIZE: u32 = 256;
#[cfg(feature = "gpu")]
const MAX_NODES: u32 = 1_000_000;
#[cfg(feature = "gpu")]
const NODE_SIZE: u32 = std::mem::size_of::<BinaryNodeData>() as u32;
#[cfg(feature = "gpu")]
const SHARED_MEM_SIZE: u32 = BLOCK_SIZE * NODE_SIZE;

// CPU-only version
#[cfg(not(feature = "gpu"))]
#[derive(Debug)]
pub struct GPUCompute;

#[cfg(not(feature = "gpu"))]
impl GPUCompute {
    pub async fn new(_graph: &GraphData) -> Result<Arc<RwLock<Self>>, Error> {
        Err(Error::new(std::io::ErrorKind::Unsupported, "GPU support is not enabled"))
    }
}

// GPU-enabled version
#[cfg(feature = "gpu")]
#[derive(Debug)]
pub struct GPUCompute {
    pub device: Arc<CudaDevice>,
    pub force_kernel: CudaFunction,
    pub node_data: CudaSlice<BinaryNodeData>,
    pub num_nodes: u32,
    pub node_indices: HashMap<String, usize>,
    pub simulation_params: SimulationParams,
    pub iteration_count: i32,
}

#[cfg(feature = "gpu")]
impl GPUCompute {
    pub fn test_gpu() -> Result<(), Error> {
        debug!("Running GPU test");
        
        // Create a simple test device
        let device = CudaDevice::new(0)
            .map_err(|e| Error::new(ErrorKind::Other, e.to_string()))?;
        
        // Try to allocate and manipulate some memory
        let test_data: Vec<f32> = vec![1.0, 2.0, 3.0, 4.0, 5.0];
        let gpu_data = device.alloc_zeros::<f32>(5)
            .map_err(|e| Error::new(ErrorKind::Other, e.to_string()))?;
        
        device.dtoh_sync_copy_into(&gpu_data, &mut test_data.clone())
            .map_err(|e| Error::new(ErrorKind::Other, e.to_string()))?;
        
        debug!("GPU test successful");
        Ok(())
    }

    pub async fn new(graph: &GraphData) -> Result<Arc<RwLock<Self>>, Error> {
        let num_nodes = graph.nodes.len() as u32;
        debug!("Initializing GPU compute with {} nodes", num_nodes);
        
        if num_nodes > MAX_NODES {
            return Err(Error::new(
                std::io::ErrorKind::Other,
                format!("Node count exceeds limit: {}", MAX_NODES),
            ));
        }

        debug!("Attempting to create CUDA device");
        let device = match CudaDevice::new(0) {
            Ok(dev) => {
                debug!("CUDA device created successfully");
                let max_threads = dev.as_ref().attribute(CUdevice_attribute_enum::CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK as _)
                    .map_err(|e| Error::new(ErrorKind::Other, e.to_string()))?;
                let compute_mode = dev.as_ref().attribute(CUdevice_attribute_enum::CU_DEVICE_ATTRIBUTE_COMPUTE_MODE as _)
                    .map_err(|e| Error::new(ErrorKind::Other, e.to_string()))?;
                let multiprocessor_count = dev.as_ref().attribute(CUdevice_attribute_enum::CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT as _)
                    .map_err(|e| Error::new(ErrorKind::Other, e.to_string()))?;
                debug!("GPU Device detected:");
                debug!("  Max threads per MP: {}", max_threads);
                debug!("  Multiprocessor count: {}", multiprocessor_count);
                debug!("  Compute mode: {}", compute_mode);
                
                if max_threads < 256 {
                    return Err(Error::new(ErrorKind::Other, 
                        format!("GPU capability too low. Device supports only {} threads per multiprocessor, minimum required is 256", 
                            max_threads)));
                }
                Arc::new(dev)
            },
            Err(e) => {
                error!("Failed to create CUDA device: {}", e);
                return Err(Error::new(ErrorKind::Other, e.to_string()));
            }
        };

        debug!("Loading force computation kernel");
        let ptx_path = "/app/src/utils/compute_forces.ptx";

        if !std::path::Path::new(ptx_path).exists() {
            warn!("PTX file does not exist at {}", ptx_path);
            return Err(Error::new(ErrorKind::NotFound, 
                format!("PTX file not found at {}", ptx_path)));
        }

        let ptx = Ptx::from_file(ptx_path);

        debug!("Successfully loaded PTX file");
            
        device.load_ptx(ptx, "compute_forces_kernel", &["compute_forces_kernel"])
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;
            
        let force_kernel = device.get_func("compute_forces_kernel", "compute_forces_kernel")
            .ok_or_else(|| Error::new(std::io::ErrorKind::Other, "Function compute_forces_kernel not found"))?;

        debug!("Allocating device memory for {} nodes", num_nodes);
        let node_data = device.alloc_zeros::<BinaryNodeData>(num_nodes as usize)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        debug!("Creating GPU compute instance");
        // Create node ID to index mapping
        let mut node_indices = HashMap::new();
        for (idx, node) in graph.nodes.iter().enumerate() {
            node_indices.insert(node.id.clone(), idx);
        }

        let mut instance = Self {
            device: Arc::clone(&device),
            force_kernel,
            node_data,
            num_nodes,
            node_indices,
            simulation_params: SimulationParams::default(),
            iteration_count: 0,
        };

        debug!("Copying initial graph data to device memory");
        instance.update_graph_data(graph)?;

        Ok(Arc::new(RwLock::new(instance)))
    }

    pub fn update_graph_data(&mut self, graph: &GraphData) -> Result<(), Error> {
        debug!("Updating graph data for {} nodes", graph.nodes.len());

        // Update node index mapping
        self.node_indices.clear();
        for (idx, node) in graph.nodes.iter().enumerate() {
            self.node_indices.insert(node.id.clone(), idx);
        }

        // Reallocate buffer if node count changed
        if graph.nodes.len() as u32 != self.num_nodes {
            debug!("Reallocating GPU buffer for {} nodes", graph.nodes.len());
            self.node_data = self.device.alloc_zeros::<BinaryNodeData>(graph.nodes.len())
                .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;
            self.num_nodes = graph.nodes.len() as u32;
            
            // Reset iteration counter when the graph data changes
            self.iteration_count = 0;
        }

        // Prepare node data
        let mut node_data = Vec::with_capacity(graph.nodes.len());
        for node in &graph.nodes {
            // For GPU computation we need to convert Vec3Data to array format
            let _position_array = vec3data_to_array(&node.data.position);
            let _velocity_array = vec3data_to_array(&node.data.velocity);
            
            // Create the node data with Vec3Data structures
            node_data.push(BinaryNodeData {
                position: node.data.position.clone(),
                velocity: node.data.velocity.clone(),
                mass: node.data.mass,
                flags: node.data.flags, 
                padding: node.data.padding,
            });
            
            // NOTE: For actual GPU kernel processing, you would use the arrays:
            // position_array and velocity_array instead of the Vec3Data structures
        }

        debug!("Copying {} nodes to GPU", graph.nodes.len());

        // Copy data to GPU
        self.device.htod_sync_copy_into(&node_data, &mut self.node_data)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        Ok(())
    }

    pub fn update_simulation_params(&mut self, params: &SimulationParams) -> Result<(), Error> {
        debug!("Updating simulation parameters: {:?}", params);
        self.simulation_params = params.clone();
        Ok(())
    }

    pub fn compute_forces(&mut self) -> Result<(), Error> {
        debug!("Starting force computation on GPU");
        
        let blocks = ((self.num_nodes + BLOCK_SIZE - 1) / BLOCK_SIZE).max(1);
        let cfg = LaunchConfig {
            grid_dim: (blocks, 1, 1),
            block_dim: (BLOCK_SIZE, 1, 1),
            shared_mem_bytes: SHARED_MEM_SIZE,
        };

        debug!("Launch config: blocks={}, threads={}, shared_mem={}",
            blocks, BLOCK_SIZE, SHARED_MEM_SIZE);

        unsafe {
            self.force_kernel.clone().launch(cfg, (
                &self.node_data,
                self.num_nodes as i32,
                self.simulation_params.spring_strength,
                self.simulation_params.damping,
                self.simulation_params.repulsion,
                self.simulation_params.time_step,
                self.simulation_params.max_repulsion_distance,
                if self.simulation_params.enable_bounds {
                    self.simulation_params.viewport_bounds
                } else {
                    f32::MAX // Effectively disable bounds
                },
                self.iteration_count,
            )).map_err(|e| {
                error!("Kernel launch failed: {}", e);
                Error::new(ErrorKind::Other, e.to_string())
            })?;
        }

        debug!("Force computation completed");
        self.iteration_count += 1;
        Ok(())
    }

    pub fn get_node_data(&self) -> Result<Vec<BinaryNodeData>, Error> {
        // Create buffer for GPU to copy into
        let mut gpu_raw_data = vec![BinaryNodeData {
            position: array_to_vec3data([0.0, 0.0, 0.0]),
            velocity: array_to_vec3data([0.0, 0.0, 0.0]),
            mass: 0,
            flags: 0,
            padding: [0, 0],
        }; self.num_nodes as usize];

        // Get the raw data from GPU
        self.device.dtoh_sync_copy_into(&self.node_data, &mut gpu_raw_data)
            .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;

        // Process the raw data into BinaryNodeData format
        let gpu_nodes = gpu_raw_data.into_iter().map(|raw_node| {
            // Convert between formats if needed for GPU processing
            BinaryNodeData {
                position: raw_node.position,
                velocity: raw_node.velocity,
                mass: raw_node.mass,
                flags: raw_node.flags,
                padding: raw_node.padding,
            }
        }).collect();

        Ok(gpu_nodes)
    }

    // For GPU kernels that need raw array access, we'll add helper methods 
    // to convert Vec3Data to arrays when needed

    pub fn step(&mut self) -> Result<(), Error> {
        self.compute_forces()?;
        debug!("Physics step complete, iteration count: {}", self.iteration_count);
        Ok(())
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[tokio::test]
    async fn test_gpu_compute_initialization() {
        let graph = GraphData::default();
        let gpu_compute = GPUCompute::new(&graph).await;
        #[cfg(feature = "gpu")]
        assert!(gpu_compute.is_ok());
        #[cfg(not(feature = "gpu"))]
        assert!(gpu_compute.is_err());
    }

    #[cfg(feature = "gpu")]
    #[tokio::test]
    async fn test_node_data_transfer() {
        let mut graph = GraphData::default();
        let gpu_compute = GPUCompute::new(&graph).await.unwrap();
        let gpu_compute = Arc::try_unwrap(gpu_compute).unwrap().into_inner();
        let node_data = gpu_compute.get_node_data().unwrap();
        assert_eq!(node_data.len(), graph.nodes.len());
    }

    #[test]
    fn test_node_data_memory_layout() {
        use std::mem::size_of;
        assert_eq!(size_of::<BinaryNodeData>(), 28); // 24 bytes for position/velocity + 4 bytes for mass/flags/padding
    }
}

----
utils/compute_forces.ptx
//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34097967
// Cuda compilation tools, release 12.4, V12.4.131
// Based on NVVM 7.0.1
//

.version 8.4
.target sm_86
.address_size 64

	// .globl	compute_forces_kernel
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 1 .b8 $str[44] = {70, 111, 114, 99, 101, 32, 99, 108, 97, 109, 112, 101, 100, 32, 102, 114, 111, 109, 32, 37, 102, 32, 116, 111, 32, 37, 102, 32, 40, 105, 116, 101, 114, 97, 116, 105, 111, 110, 32, 37, 100, 41, 10};
.global .align 1 .b8 $str$1[55] = {78, 111, 100, 101, 32, 37, 100, 58, 32, 102, 111, 114, 99, 101, 95, 109, 97, 103, 61, 37, 102, 44, 32, 112, 111, 115, 61, 40, 37, 102, 44, 37, 102, 44, 37, 102, 41, 44, 32, 118, 101, 108, 61, 40, 37, 102, 44, 37, 102, 44, 37, 102, 41, 10};
.global .align 1 .b8 $str$2[47] = {78, 111, 100, 101, 32, 37, 100, 58, 32, 105, 116, 101, 114, 97, 116, 105, 111, 110, 61, 37, 100, 44, 32, 114, 97, 109, 112, 95, 117, 112, 61, 37, 102, 44, 32, 100, 97, 109, 112, 105, 110, 103, 61, 37, 102, 10};

.visible .entry compute_forces_kernel(
	.param .u64 compute_forces_kernel_param_0,
	.param .u32 compute_forces_kernel_param_1,
	.param .f32 compute_forces_kernel_param_2,
	.param .f32 compute_forces_kernel_param_3,
	.param .f32 compute_forces_kernel_param_4,
	.param .f32 compute_forces_kernel_param_5,
	.param .f32 compute_forces_kernel_param_6,
	.param .f32 compute_forces_kernel_param_7,
	.param .u32 compute_forces_kernel_param_8
)
{
	.local .align 16 .b8 	__local_depot0[64];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<41>;
	.reg .b16 	%rs<5>;
	.reg .f32 	%f<314>;
	.reg .b32 	%r<31>;
	.reg .f64 	%fd<12>;
	.reg .b64 	%rd<21>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd6, [compute_forces_kernel_param_0];
	ld.param.u32 	%r9, [compute_forces_kernel_param_1];
	ld.param.f32 	%f120, [compute_forces_kernel_param_2];
	ld.param.f32 	%f276, [compute_forces_kernel_param_3];
	ld.param.f32 	%f122, [compute_forces_kernel_param_4];
	ld.param.f32 	%f123, [compute_forces_kernel_param_5];
	ld.param.f32 	%f124, [compute_forces_kernel_param_6];
	ld.param.f32 	%f125, [compute_forces_kernel_param_7];
	ld.param.u32 	%r10, [compute_forces_kernel_param_8];
	cvta.to.global.u64 	%rd1, %rd6;
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r1, %r12, %r11, %r13;
	setp.ge.s32 	%p1, %r1, %r9;
	@%p1 bra 	$L__BB0_45;

	setp.gt.s32 	%p2, %r10, 99;
	mov.f32 	%f275, 0f3F800000;
	@%p2 bra 	$L__BB0_3;

	cvt.rn.f32.s32 	%f127, %r10;
	mov.f32 	%f128, 0f42C80000;
	div.approx.ftz.f32 	%f129, %f127, %f128;
	fma.rn.ftz.f32 	%f275, %f129, 0f3F7D70A4, 0f3C23D70A;
	fma.rn.ftz.f32 	%f130, %f129, 0fBECCCCCD, 0f3F666666;
	max.ftz.f32 	%f276, %f276, %f130;

$L__BB0_3:
	mul.wide.s32 	%rd7, %r1, 28;
	add.s64 	%rd2, %rd1, %rd7;
	ld.global.f32 	%f5, [%rd2];
	ld.global.f32 	%f6, [%rd2+4];
	ld.global.f32 	%f7, [%rd2+8];
	ld.global.f32 	%f8, [%rd2+12];
	ld.global.f32 	%f9, [%rd2+16];
	ld.global.f32 	%f10, [%rd2+20];
	ld.global.u8 	%rs1, [%rd2+24];
	setp.eq.s16 	%p3, %rs1, 0;
	mov.f32 	%f277, 0f3F000000;
	@%p3 bra 	$L__BB0_5;

	cvt.rn.f32.u16 	%f132, %rs1;
	add.ftz.f32 	%f133, %f132, 0f3F800000;
	mov.f32 	%f134, 0f43800000;
	div.approx.ftz.f32 	%f277, %f133, %f134;

$L__BB0_5:
	setp.lt.s32 	%p4, %r9, 1;
	mov.f32 	%f282, 0f00000000;
	mov.f32 	%f283, %f282;
	mov.f32 	%f284, %f282;
	@%p4 bra 	$L__BB0_31;

	mul.ftz.f32 	%f13, %f275, %f120;
	mul.ftz.f32 	%f14, %f277, %f122;
	and.b32  	%r2, %r9, 1;
	setp.eq.s32 	%p5, %r9, 1;
	mov.f32 	%f284, 0f00000000;
	mov.u32 	%r30, 0;
	mov.f32 	%f283, %f284;
	mov.f32 	%f282, %f284;
	@%p5 bra 	$L__BB0_23;

	sub.s32 	%r29, %r9, %r2;
	mov.f32 	%f284, 0f00000000;
	mov.u32 	%r30, 0;

$L__BB0_8:
	mul.wide.s32 	%rd8, %r30, 28;
	add.s64 	%rd3, %rd1, %rd8;
	setp.eq.s32 	%p6, %r30, %r1;
	@%p6 bra 	$L__BB0_15;

	ld.global.u8 	%rs2, [%rd3+24];
	setp.eq.s16 	%p7, %rs2, 0;
	mov.f32 	%f281, 0f3F000000;
	@%p7 bra 	$L__BB0_11;

	cvt.rn.f32.u16 	%f146, %rs2;
	add.ftz.f32 	%f147, %f146, 0f3F800000;
	mov.f32 	%f148, 0f43800000;
	div.approx.ftz.f32 	%f281, %f147, %f148;

$L__BB0_11:
	ld.global.f32 	%f149, [%rd3];
	sub.ftz.f32 	%f20, %f149, %f5;
	ld.global.f32 	%f150, [%rd3+4];
	sub.ftz.f32 	%f21, %f150, %f6;
	ld.global.f32 	%f151, [%rd3+8];
	sub.ftz.f32 	%f22, %f151, %f7;
	mul.ftz.f32 	%f152, %f21, %f21;
	fma.rn.ftz.f32 	%f153, %f20, %f20, %f152;
	fma.rn.ftz.f32 	%f154, %f22, %f22, %f153;
	sqrt.approx.ftz.f32 	%f23, %f154;
	setp.leu.ftz.f32 	%p8, %f23, 0f3E19999A;
	@%p8 bra 	$L__BB0_15;

	div.approx.ftz.f32 	%f24, %f20, %f23;
	div.approx.ftz.f32 	%f25, %f21, %f23;
	div.approx.ftz.f32 	%f26, %f22, %f23;
	add.ftz.f32 	%f155, %f23, 0fC0400000;
	fma.rn.ftz.f32 	%f27, %f155, 0f3DCCCCCD, 0f3F800000;
	setp.lt.ftz.f32 	%p9, %f23, %f124;
	@%p9 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_13;

$L__BB0_14:
	mul.ftz.f32 	%f162, %f14, %f281;
	mul.ftz.f32 	%f163, %f23, %f23;
	mov.f32 	%f164, 0f3E19999A;
	max.ftz.f32 	%f165, %f163, %f164;
	div.approx.ftz.f32 	%f166, %f162, %f165;
	add.ftz.f32 	%f167, %f162, %f162;
	min.ftz.f32 	%f168, %f166, %f167;
	mul.ftz.f32 	%f169, %f24, %f168;
	sub.ftz.f32 	%f282, %f282, %f169;
	mul.ftz.f32 	%f170, %f25, %f168;
	sub.ftz.f32 	%f283, %f283, %f170;
	mul.ftz.f32 	%f171, %f26, %f168;
	sub.ftz.f32 	%f284, %f284, %f171;
	bra.uni 	$L__BB0_15;

$L__BB0_13:
	add.ftz.f32 	%f156, %f23, 0fBF800000;
	mul.ftz.f32 	%f157, %f13, %f156;
	mul.ftz.f32 	%f158, %f277, %f281;
	setp.gt.ftz.f32 	%p10, %f23, 0f40400000;
	mul.ftz.f32 	%f159, %f157, %f27;
	selp.f32 	%f160, %f159, %f157, %p10;
	mul.ftz.f32 	%f161, %f158, %f160;
	fma.rn.ftz.f32 	%f282, %f161, %f24, %f282;
	fma.rn.ftz.f32 	%f283, %f161, %f25, %f283;
	fma.rn.ftz.f32 	%f284, %f161, %f26, %f284;

$L__BB0_15:
	add.s32 	%r16, %r30, 1;
	setp.eq.s32 	%p11, %r16, %r1;
	@%p11 bra 	$L__BB0_22;

	ld.global.u8 	%rs3, [%rd3+52];
	setp.eq.s16 	%p12, %rs3, 0;
	mov.f32 	%f285, 0f3F000000;
	@%p12 bra 	$L__BB0_18;

	cvt.rn.f32.u16 	%f173, %rs3;
	add.ftz.f32 	%f174, %f173, 0f3F800000;
	mov.f32 	%f175, 0f43800000;
	div.approx.ftz.f32 	%f285, %f174, %f175;

$L__BB0_18:
	ld.global.f32 	%f176, [%rd3+28];
	sub.ftz.f32 	%f39, %f176, %f5;
	ld.global.f32 	%f177, [%rd3+32];
	sub.ftz.f32 	%f40, %f177, %f6;
	ld.global.f32 	%f178, [%rd3+36];
	sub.ftz.f32 	%f41, %f178, %f7;
	mul.ftz.f32 	%f179, %f40, %f40;
	fma.rn.ftz.f32 	%f180, %f39, %f39, %f179;
	fma.rn.ftz.f32 	%f181, %f41, %f41, %f180;
	sqrt.approx.ftz.f32 	%f42, %f181;
	setp.leu.ftz.f32 	%p13, %f42, 0f3E19999A;
	@%p13 bra 	$L__BB0_22;

	div.approx.ftz.f32 	%f43, %f39, %f42;
	div.approx.ftz.f32 	%f44, %f40, %f42;
	div.approx.ftz.f32 	%f45, %f41, %f42;
	add.ftz.f32 	%f182, %f42, 0fC0400000;
	fma.rn.ftz.f32 	%f46, %f182, 0f3DCCCCCD, 0f3F800000;
	setp.lt.ftz.f32 	%p14, %f42, %f124;
	@%p14 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_21:
	mul.ftz.f32 	%f189, %f14, %f285;
	mul.ftz.f32 	%f190, %f42, %f42;
	mov.f32 	%f191, 0f3E19999A;
	max.ftz.f32 	%f192, %f190, %f191;
	div.approx.ftz.f32 	%f193, %f189, %f192;
	add.ftz.f32 	%f194, %f189, %f189;
	min.ftz.f32 	%f195, %f193, %f194;
	mul.ftz.f32 	%f196, %f43, %f195;
	sub.ftz.f32 	%f282, %f282, %f196;
	mul.ftz.f32 	%f197, %f44, %f195;
	sub.ftz.f32 	%f283, %f283, %f197;
	mul.ftz.f32 	%f198, %f45, %f195;
	sub.ftz.f32 	%f284, %f284, %f198;
	bra.uni 	$L__BB0_22;

$L__BB0_20:
	add.ftz.f32 	%f183, %f42, 0fBF800000;
	mul.ftz.f32 	%f184, %f13, %f183;
	mul.ftz.f32 	%f185, %f277, %f285;
	setp.gt.ftz.f32 	%p15, %f42, 0f40400000;
	mul.ftz.f32 	%f186, %f184, %f46;
	selp.f32 	%f187, %f186, %f184, %p15;
	mul.ftz.f32 	%f188, %f185, %f187;
	fma.rn.ftz.f32 	%f282, %f188, %f43, %f282;
	fma.rn.ftz.f32 	%f283, %f188, %f44, %f283;
	fma.rn.ftz.f32 	%f284, %f188, %f45, %f284;

$L__BB0_22:
	add.s32 	%r30, %r30, 2;
	add.s32 	%r29, %r29, -2;
	setp.ne.s32 	%p16, %r29, 0;
	@%p16 bra 	$L__BB0_8;

$L__BB0_23:
	setp.eq.s32 	%p17, %r2, 0;
	@%p17 bra 	$L__BB0_31;

	setp.eq.s32 	%p18, %r30, %r1;
	@%p18 bra 	$L__BB0_31;

	mul.wide.s32 	%rd9, %r30, 28;
	add.s64 	%rd10, %rd1, %rd9;
	add.s64 	%rd4, %rd10, 24;
	ld.global.u8 	%rs4, [%rd10+24];
	setp.eq.s16 	%p19, %rs4, 0;
	mov.f32 	%f295, 0f3F000000;
	@%p19 bra 	$L__BB0_27;

	cvt.rn.f32.u16 	%f200, %rs4;
	add.ftz.f32 	%f201, %f200, 0f3F800000;
	mov.f32 	%f202, 0f43800000;
	div.approx.ftz.f32 	%f295, %f201, %f202;

$L__BB0_27:
	ld.global.f32 	%f203, [%rd4+-24];
	sub.ftz.f32 	%f64, %f203, %f5;
	ld.global.f32 	%f204, [%rd4+-20];
	sub.ftz.f32 	%f65, %f204, %f6;
	ld.global.f32 	%f205, [%rd4+-16];
	sub.ftz.f32 	%f66, %f205, %f7;
	mul.ftz.f32 	%f206, %f65, %f65;
	fma.rn.ftz.f32 	%f207, %f64, %f64, %f206;
	fma.rn.ftz.f32 	%f208, %f66, %f66, %f207;
	sqrt.approx.ftz.f32 	%f67, %f208;
	setp.leu.ftz.f32 	%p20, %f67, 0f3E19999A;
	@%p20 bra 	$L__BB0_31;

	div.approx.ftz.f32 	%f68, %f64, %f67;
	div.approx.ftz.f32 	%f69, %f65, %f67;
	div.approx.ftz.f32 	%f70, %f66, %f67;
	add.ftz.f32 	%f209, %f67, 0fBF800000;
	mul.ftz.f32 	%f210, %f13, %f209;
	add.ftz.f32 	%f211, %f67, 0fC0400000;
	fma.rn.ftz.f32 	%f212, %f211, 0f3DCCCCCD, 0f3F800000;
	mul.ftz.f32 	%f213, %f210, %f212;
	setp.gt.ftz.f32 	%p21, %f67, 0f40400000;
	selp.f32 	%f71, %f213, %f210, %p21;
	setp.lt.ftz.f32 	%p22, %f67, %f124;
	@%p22 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_29;

$L__BB0_30:
	mul.ftz.f32 	%f216, %f14, %f295;
	mul.ftz.f32 	%f217, %f67, %f67;
	mov.f32 	%f218, 0f3E19999A;
	max.ftz.f32 	%f219, %f217, %f218;
	div.approx.ftz.f32 	%f220, %f216, %f219;
	add.ftz.f32 	%f221, %f216, %f216;
	min.ftz.f32 	%f222, %f220, %f221;
	mul.ftz.f32 	%f223, %f68, %f222;
	sub.ftz.f32 	%f282, %f282, %f223;
	mul.ftz.f32 	%f224, %f69, %f222;
	sub.ftz.f32 	%f283, %f283, %f224;
	mul.ftz.f32 	%f225, %f70, %f222;
	sub.ftz.f32 	%f284, %f284, %f225;
	bra.uni 	$L__BB0_31;

$L__BB0_29:
	mul.ftz.f32 	%f214, %f277, %f295;
	mul.ftz.f32 	%f215, %f214, %f71;
	fma.rn.ftz.f32 	%f282, %f215, %f68, %f282;
	fma.rn.ftz.f32 	%f283, %f215, %f69, %f283;
	fma.rn.ftz.f32 	%f284, %f215, %f70, %f284;

$L__BB0_31:
	mul.ftz.f32 	%f226, %f6, %f6;
	fma.rn.ftz.f32 	%f227, %f5, %f5, %f226;
	fma.rn.ftz.f32 	%f228, %f7, %f7, %f227;
	sqrt.approx.ftz.f32 	%f81, %f228;
	setp.leu.ftz.f32 	%p23, %f81, 0f40400000;
	@%p23 bra 	$L__BB0_33;

	add.ftz.f32 	%f229, %f81, 0fC0400000;
	mul.ftz.f32 	%f230, %f277, 0f3C75C28F;
	mul.ftz.f32 	%f231, %f275, %f230;
	mul.ftz.f32 	%f232, %f231, %f229;
	div.approx.ftz.f32 	%f233, %f232, %f81;
	mul.ftz.f32 	%f234, %f5, %f233;
	sub.ftz.f32 	%f282, %f282, %f234;
	mul.ftz.f32 	%f235, %f6, %f233;
	sub.ftz.f32 	%f283, %f283, %f235;
	mul.ftz.f32 	%f236, %f7, %f233;
	sub.ftz.f32 	%f284, %f284, %f236;

$L__BB0_33:
	mul.ftz.f32 	%f237, %f283, %f283;
	fma.rn.ftz.f32 	%f238, %f282, %f282, %f237;
	fma.rn.ftz.f32 	%f239, %f284, %f284, %f238;
	sqrt.approx.ftz.f32 	%f88, %f239;
	setp.leu.ftz.f32 	%p24, %f88, 0f40400000;
	add.u64 	%rd11, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	@%p24 bra 	$L__BB0_36;

	setp.gt.s32 	%p25, %r10, 4;
	mov.f32 	%f240, 0f40400000;
	div.approx.ftz.f32 	%f241, %f240, %f88;
	mul.ftz.f32 	%f282, %f282, %f241;
	mul.ftz.f32 	%f283, %f283, %f241;
	mul.ftz.f32 	%f284, %f284, %f241;
	setp.ne.s32 	%p26, %r1, 0;
	or.pred  	%p27, %p26, %p25;
	@%p27 bra 	$L__BB0_36;

	cvt.ftz.f64.f32 	%fd1, %f88;
	mov.f64 	%fd2, 0d4008000000000000;
	st.local.v2.f64 	[%rd5], {%fd1, %fd2};
	st.local.u32 	[%rd5+16], %r10;
	mov.u64 	%rd12, $str;
	cvta.global.u64 	%rd13, %rd12;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd13;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd11;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r17, [retval0+0];
	} // callseq 0

$L__BB0_36:
	setp.lt.s32 	%p28, %r10, 5;
	mov.f32 	%f242, 0f3F800000;
	sub.ftz.f32 	%f243, %f242, %f276;
	selp.f32 	%f244, 0f00000000, %f8, %p28;
	mov.f32 	%f245, 0fC0400000;
	max.ftz.f32 	%f246, %f245, %f282;
	mov.f32 	%f247, 0f40400000;
	min.ftz.f32 	%f248, %f247, %f246;
	mul.ftz.f32 	%f249, %f248, %f123;
	fma.rn.ftz.f32 	%f308, %f243, %f244, %f249;
	selp.f32 	%f250, 0f00000000, %f9, %p28;
	max.ftz.f32 	%f251, %f245, %f283;
	min.ftz.f32 	%f252, %f247, %f251;
	mul.ftz.f32 	%f253, %f252, %f123;
	fma.rn.ftz.f32 	%f309, %f243, %f250, %f253;
	selp.f32 	%f254, 0f00000000, %f10, %p28;
	max.ftz.f32 	%f255, %f245, %f284;
	min.ftz.f32 	%f256, %f247, %f255;
	mul.ftz.f32 	%f257, %f256, %f123;
	fma.rn.ftz.f32 	%f310, %f243, %f254, %f257;
	mul.ftz.f32 	%f258, %f309, %f309;
	fma.rn.ftz.f32 	%f259, %f308, %f308, %f258;
	fma.rn.ftz.f32 	%f260, %f310, %f310, %f259;
	sqrt.approx.ftz.f32 	%f98, %f260;
	setp.leu.ftz.f32 	%p29, %f98, 0f3CA3D70A;
	@%p29 bra 	$L__BB0_38;

	mov.f32 	%f261, 0f3CA3D70A;
	div.approx.ftz.f32 	%f262, %f261, %f98;
	mul.ftz.f32 	%f308, %f308, %f262;
	mul.ftz.f32 	%f309, %f309, %f262;
	mul.ftz.f32 	%f310, %f310, %f262;

$L__BB0_38:
	fma.rn.ftz.f32 	%f311, %f308, %f123, %f5;
	fma.rn.ftz.f32 	%f312, %f309, %f123, %f6;
	fma.rn.ftz.f32 	%f313, %f310, %f123, %f7;
	setp.lt.s32 	%p30, %r10, 11;
	setp.leu.ftz.f32 	%p31, %f125, 0f00000000;
	or.pred  	%p32, %p31, %p30;
	@%p32 bra 	$L__BB0_41;

	fma.rn.ftz.f32 	%f263, %f125, 0fBE99999A, %f125;
	abs.ftz.f32 	%f264, %f311;
	setp.gt.ftz.f32 	%p33, %f264, %f263;
	mul.ftz.f32 	%f265, %f308, 0f3F59999A;
	selp.f32 	%f308, %f265, %f308, %p33;
	mul.ftz.f32 	%f266, %f311, 0f3F6B851F;
	selp.f32 	%f311, %f266, %f311, %p33;
	abs.ftz.f32 	%f267, %f312;
	setp.gt.ftz.f32 	%p34, %f267, %f263;
	mul.ftz.f32 	%f268, %f309, 0f3F59999A;
	selp.f32 	%f309, %f268, %f309, %p34;
	mul.ftz.f32 	%f269, %f312, 0f3F6B851F;
	selp.f32 	%f312, %f269, %f312, %p34;
	abs.ftz.f32 	%f270, %f313;
	setp.leu.ftz.f32 	%p35, %f270, %f263;
	@%p35 bra 	$L__BB0_41;

	mul.ftz.f32 	%f313, %f313, 0f3F6B851F;
	mul.ftz.f32 	%f310, %f310, 0f3F59999A;

$L__BB0_41:
	st.global.f32 	[%rd2], %f311;
	st.global.f32 	[%rd2+4], %f312;
	st.global.f32 	[%rd2+8], %f313;
	st.global.f32 	[%rd2+12], %f308;
	st.global.f32 	[%rd2+16], %f309;
	st.global.f32 	[%rd2+20], %f310;
	setp.ne.s32 	%p36, %r1, 0;
	@%p36 bra 	$L__BB0_45;

	setp.gt.s32 	%p37, %r10, 4;
	mul.hi.s32 	%r18, %r10, 1717986919;
	shr.u32 	%r19, %r18, 31;
	shr.s32 	%r20, %r18, 3;
	add.s32 	%r21, %r20, %r19;
	mul.lo.s32 	%r22, %r21, 20;
	sub.s32 	%r23, %r10, %r22;
	setp.ne.s32 	%p38, %r23, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_45;

	mul.ftz.f32 	%f271, %f283, %f283;
	fma.rn.ftz.f32 	%f272, %f282, %f282, %f271;
	fma.rn.ftz.f32 	%f273, %f284, %f284, %f272;
	sqrt.approx.ftz.f32 	%f274, %f273;
	cvt.ftz.f64.f32 	%fd3, %f274;
	mov.u32 	%r24, 0;
	st.local.u32 	[%rd5], %r24;
	st.local.f64 	[%rd5+8], %fd3;
	cvt.ftz.f64.f32 	%fd4, %f312;
	cvt.ftz.f64.f32 	%fd5, %f311;
	st.local.v2.f64 	[%rd5+16], {%fd5, %fd4};
	cvt.ftz.f64.f32 	%fd6, %f308;
	cvt.ftz.f64.f32 	%fd7, %f313;
	st.local.v2.f64 	[%rd5+32], {%fd7, %fd6};
	cvt.ftz.f64.f32 	%fd8, %f310;
	cvt.ftz.f64.f32 	%fd9, %f309;
	st.local.v2.f64 	[%rd5+48], {%fd9, %fd8};
	mov.u64 	%rd15, $str$1;
	cvta.global.u64 	%rd16, %rd15;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd16;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd11;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r25, [retval0+0];
	} // callseq 1
	@%p2 bra 	$L__BB0_45;

	st.local.v2.u32 	[%rd5], {%r24, %r10};
	cvt.ftz.f64.f32 	%fd10, %f275;
	st.local.f64 	[%rd5+8], %fd10;
	cvt.ftz.f64.f32 	%fd11, %f276;
	st.local.f64 	[%rd5+16], %fd11;
	mov.u64 	%rd18, $str$2;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd11;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r27, [retval0+0];
	} // callseq 2

$L__BB0_45:
	ret;

}


----
utils/mod.rs
pub mod audio_processor;
pub mod binary_protocol;
pub mod edge_data;
pub mod case_conversion;
pub mod gpu_compute;
pub mod logging;
pub mod socket_flow_constants;
pub mod socket_flow_messages;

----
utils/auth.rs
use actix_web::{HttpRequest, HttpResponse};
use log::{warn, error};
use crate::services::nostr_service::NostrService;

pub enum AccessLevel {
    Authenticated,  // Any authenticated Nostr user
    PowerUser,      // Power users only
}

pub async fn verify_access(
    req: &HttpRequest,
    nostr_service: &NostrService,
    required_level: AccessLevel,
) -> Result<String, HttpResponse> {
    // Get pubkey from header
    let pubkey = match req.headers().get("X-Nostr-Pubkey") {
        Some(value) => value.to_str().unwrap_or("").to_string(),
        None => {
            warn!("Missing Nostr pubkey in request headers");
            return Err(HttpResponse::Forbidden().body("Authentication required"));
        }
    };

    // Get token from header
    let token = match req.headers().get("X-Nostr-Token") {
        Some(value) => value.to_str().unwrap_or("").to_string(),
        None => {
            warn!("Missing Nostr token in request headers");
            return Err(HttpResponse::Forbidden().body("Authentication required"));
        }
    };

    // Validate session
    if !nostr_service.validate_session(&pubkey, &token).await {
        warn!("Invalid or expired session for user {}", pubkey);
        return Err(HttpResponse::Unauthorized().body("Invalid or expired session"));
    }

    // Check access level
    match required_level {
        AccessLevel::Authenticated => {
            // Any valid session is sufficient
            Ok(pubkey)
        }
        AccessLevel::PowerUser => {
            if nostr_service.is_power_user(&pubkey).await {
                Ok(pubkey)
            } else {
                warn!("Non-power user {} attempted restricted operation", pubkey);
                Err(HttpResponse::Forbidden().body("This operation requires power user access"))
            }
        }
    }
}

// Helper function for handlers that require power user access
pub async fn verify_power_user(
    req: &HttpRequest,
    nostr_service: &NostrService,
) -> Result<String, HttpResponse> {
    verify_access(req, nostr_service, AccessLevel::PowerUser).await
}

// Helper function for handlers that require authentication
pub async fn verify_authenticated(
    req: &HttpRequest,
    nostr_service: &NostrService,
) -> Result<String, HttpResponse> {
    verify_access(req, nostr_service, AccessLevel::Authenticated).await
}
----
utils/edge_data.rs
use bytemuck::{Pod, Zeroable};
use cudarc::driver::{DeviceRepr, ValidAsZeroBits};

#[repr(C)]
#[derive(Debug, Clone, Copy, Pod, Zeroable)]
pub struct EdgeData {
    pub source_idx: i32,
    pub target_idx: i32,
    pub weight: f32,
}

// Implement DeviceRepr for EdgeData
unsafe impl DeviceRepr for EdgeData {}

// Implement ValidAsZeroBits for EdgeData
unsafe impl ValidAsZeroBits for EdgeData {}
----
utils/compute_forces.cu
#include <cuda_runtime.h>

extern "C" {
    // This struct matches the Rust BinaryNodeData struct
    struct BinaryNodeData {
        float position[3];    // 12 bytes - matches Rust [f32; 3]
        float velocity[3];    // 12 bytes - matches Rust [f32; 3]
        // These fields are used internally but not transmitted over the wire
        // The binary_protocol.rs sets default values when decoding
        unsigned char mass;   // 1 byte - matches Rust u8
        unsigned char flags;  // 1 byte - matches Rust u8
        unsigned char padding[2]; // 2 bytes - matches Rust padding
    };

    __global__ void compute_forces_kernel(
        BinaryNodeData* nodes,
        int num_nodes,
        float spring_k,
        float damping,
        float repel_k,
        float dt,
        float max_repulsion_dist,
        float viewport_bounds,
        int iteration_count
    ) {
        int idx = blockIdx.x * blockDim.x + threadIdx.x;
        if (idx >= num_nodes) return;

        const float MAX_FORCE = 3.0f; // Reduced maximum force magnitude
        const float MAX_VELOCITY = 0.02f; // Stricter velocity cap to prevent momentum buildup
        const float MIN_DISTANCE = 0.15f; // Slightly increased minimum distance
        
        // Progressive force application parameters
        // First 100 iterations use a ramp-up factor
        const int WARMUP_ITERATIONS = 100;
        float ramp_up_factor = 1.0f;
        
        if (iteration_count < WARMUP_ITERATIONS) {
            // Gradually increase from 0.01 to 1.0 over WARMUP_ITERATIONS
            ramp_up_factor = 0.01f + (iteration_count / (float)WARMUP_ITERATIONS) * 0.99f;
            
            // Also use higher damping in initial iterations to stabilize the system
            damping = fmaxf(damping, 0.9f - 0.4f * (iteration_count / (float)WARMUP_ITERATIONS));
        }
        
        float3 total_force = make_float3(0.0f, 0.0f, 0.0f);
        float3 pos = make_float3(nodes[idx].position[0], nodes[idx].position[1], nodes[idx].position[2]);
        float3 vel = make_float3(nodes[idx].velocity[0], nodes[idx].velocity[1], nodes[idx].velocity[2]);

        // Zero out velocity in the very first iterations to prevent explosion
        if (iteration_count < 5) {
            vel = make_float3(0.0f, 0.0f, 0.0f);
        }
        
        // Convert mass from u8 to float (approximately 0-1 range)
        float mass;
        if (nodes[idx].mass == 0) {
            mass = 0.5f; // Default mid-range mass value
        } else {
            mass = (nodes[idx].mass + 1.0f) / 256.0f; // Add 1 to avoid zero mass
        }
        
        bool is_active = true; // All nodes are active by default
        
        if (!is_active) return; // Skip inactive nodes
        
        // Process all node interactions
        for (int j = 0; j < num_nodes; j++) {
            if (j == idx) continue;
            
            // All nodes are considered active by default
            // We no longer check the flags since all nodes are treated as active
            
            // Handle other node's mass the same way
            float other_mass = (nodes[j].mass == 0) ? 0.5f : (nodes[j].mass + 1.0f) / 256.0f;
            
            float3 other_pos = make_float3(
                nodes[j].position[0],
                nodes[j].position[1],
                nodes[j].position[2]
            );
            
            float3 diff = make_float3(
                other_pos.x - pos.x,
                other_pos.y - pos.y,
                other_pos.z - pos.z
            );
            
            float dist = sqrtf(diff.x * diff.x + diff.y * diff.y + diff.z * diff.z);
            // Only process if nodes are at a meaningful distance apart
            if (dist > MIN_DISTANCE) {
                float3 dir = make_float3(
                    diff.x / dist,
                    diff.y / dist,
                    diff.z / dist
                );
                
                // Apply spring forces to all nodes by default
                {
                    // Use natural length of 1.0 to match world units
                    float natural_length = 1.0f;
                    
                    // Progressive spring forces - stronger when further apart
                    // Apply the ramp_up_factor to gradually increase spring forces
                    float spring_force = spring_k * ramp_up_factor * (dist - natural_length);
                    
                    // Apply progressively stronger springs for very distant nodes
                    if (dist > natural_length * 3.0f) {
                        spring_force *= (1.0f + (dist - natural_length * 3.0f) * 0.1f);
                    }
                    
                    
                    float spring_scale = mass * other_mass;
                    float force_magnitude = spring_force * spring_scale;
                    
                    // Repulsion forces - only apply at close distances
                    if (dist < max_repulsion_dist) {
                        float repel_scale = repel_k * mass * other_mass;
                        // Apply the ramp_up_factor to gradually increase repulsion forces
                        float dist_sq = fmaxf(dist * dist, MIN_DISTANCE);
                        // Cap maximum repulsion force to prevent explosion
                        float repel_force = fminf(repel_scale / dist_sq, repel_scale * 2.0f);
                        total_force.x -= dir.x * repel_force;
                        total_force.y -= dir.y * repel_force;
                        total_force.z -= dir.z * repel_force;
                    } else {
                        // Always apply spring forces
                        total_force.x += dir.x * force_magnitude;
                        total_force.y += dir.y * force_magnitude;
                        total_force.z += dir.z * force_magnitude;
                    }
                }
            }
        }
        
        // Stronger center gravity to prevent nodes from drifting too far
        float center_strength = 0.015f * mass * ramp_up_factor; // Apply ramp_up to center gravity too
        float center_dist = sqrtf(pos.x*pos.x + pos.y*pos.y + pos.z*pos.z);
        if (center_dist > 3.0f) { // Apply at shorter distances
            float center_factor = center_strength * (center_dist - 3.0f) / center_dist;
            total_force.x -= pos.x * center_factor;
            total_force.y -= pos.y * center_factor;
            total_force.z -= pos.z * center_factor;
        }

        // Calculate total force magnitude
        float force_magnitude = sqrtf(
            total_force.x*total_force.x + 
            total_force.y*total_force.y + 
            total_force.z*total_force.z);
        
        // Scale down excessive forces to prevent explosion
        if (force_magnitude > MAX_FORCE) {
            float scale_factor = MAX_FORCE / force_magnitude;
            total_force.x *= scale_factor;
            total_force.y *= scale_factor;
            total_force.z *= scale_factor;
            
            // Additional logging to help debug extreme forces after randomization
            if (idx == 0 && iteration_count < 5)
                printf("Force clamped from %f to %f (iteration %d)\n", force_magnitude, MAX_FORCE, iteration_count);
        }

        // Apply damping and bounded forces to velocity
        vel.x = vel.x * (1.0f - damping) + fminf(MAX_FORCE, fmaxf(-MAX_FORCE, total_force.x)) * dt;
        vel.y = vel.y * (1.0f - damping) + fminf(MAX_FORCE, fmaxf(-MAX_FORCE, total_force.y)) * dt;
        vel.z = vel.z * (1.0f - damping) + fminf(MAX_FORCE, fmaxf(-MAX_FORCE, total_force.z)) * dt;
        
        // Apply STRICT velocity cap to prevent runaway momentum
        float vel_magnitude = sqrtf(vel.x*vel.x + vel.y*vel.y + vel.z*vel.z);
        if (vel_magnitude > MAX_VELOCITY) {
            float scale_factor = MAX_VELOCITY / vel_magnitude;
            vel.x *= scale_factor;
            vel.y *= scale_factor;
            vel.z *= scale_factor;
        }
        
        // Update position
        pos.x += vel.x * dt;
        pos.y += vel.y * dt;
        pos.z += vel.z * dt;

        // Progressive boundary approach - stronger the further you go
        if (viewport_bounds > 0.0f && iteration_count > 10) { // Only apply boundary after initial stabilization
            float soft_margin = 0.3f * viewport_bounds; // 30% soft boundary
            float bound_with_margin = viewport_bounds - soft_margin;

            // Apply progressively stronger boundary forces
            if (fabsf(pos.x) > bound_with_margin) {
                pos.x *= 0.92f; // Pull back by 8%
                // Also add dampening to velocity in this direction
                vel.x *= 0.85f;
            }
            if (fabsf(pos.y) > bound_with_margin) {
                pos.y *= 0.92f; // Pull back by 8%
                vel.y *= 0.85f;
            }
            if (fabsf(pos.z) > bound_with_margin) {
                pos.z *= 0.92f; // Pull back by 8%
                vel.z *= 0.85f;
            }
        }

        // Store results back
        nodes[idx].position[0] = pos.x;
        nodes[idx].position[1] = pos.y;
        nodes[idx].position[2] = pos.z;
        nodes[idx].velocity[0] = vel.x;
        nodes[idx].velocity[1] = vel.y;
        nodes[idx].velocity[2] = vel.z;

        // Debug output for first node
        if (idx == 0 && (iteration_count < 5 || iteration_count % 20 == 0)) {
            float force_mag = sqrtf(
                total_force.x * total_force.x +
                total_force.y * total_force.y +
                total_force.z * total_force.z
            );
            printf("Node %d: force_mag=%f, pos=(%f,%f,%f), vel=(%f,%f,%f)\n",
                idx, force_mag, 
                pos.x, pos.y, pos.z,
                vel.x, vel.y, vel.z);
                
            // More detailed logging during initialization
            if (iteration_count < WARMUP_ITERATIONS)
                printf("Node %d: iteration=%d, ramp_up=%f, damping=%f\n", idx, iteration_count, ramp_up_factor, damping);
        }
    }
}

----
utils/socket_flow_constants.rs
// Node and graph constants
pub const NODE_SIZE: f32 = 1.0;  // Base node size in world units
pub const EDGE_WIDTH: f32 = 0.1; // Base edge width
pub const MIN_DISTANCE: f32 = 0.75; // Minimum distance between nodes - reduced to prevent overcrowding
pub const MAX_DISTANCE: f32 = 10.0; // Maximum distance - reduced to keep nodes closer to center

// WebSocket constants - matching nginx configuration
pub const HEARTBEAT_INTERVAL: u64 = 30; // seconds - matches nginx proxy_connect_timeout
pub const CLIENT_TIMEOUT: u64 = 60; // seconds - double heartbeat interval for safety
pub const MAX_CLIENT_TIMEOUT: u64 = 3600; // seconds - matches nginx proxy_read_timeout
pub const MAX_MESSAGE_SIZE: usize = 100 * 1024 * 1024; // 100MB
pub const BINARY_CHUNK_SIZE: usize = 64 * 1024; // 64KB

// Update rate constants
pub const POSITION_UPDATE_RATE: u32 = 5; // Hz (matching client's MAX_UPDATES_PER_SECOND)
pub const METADATA_UPDATE_RATE: u32 = 1; // Hz

// Binary message constants
pub const NODE_POSITION_SIZE: usize = 24; // 6 f32s (x,y,z,vx,vy,vz) * 4 bytes
pub const BINARY_HEADER_SIZE: usize = 4; // 1 f32 for header

// Compression constants
pub const COMPRESSION_THRESHOLD: usize = 1024; // 1KB
pub const ENABLE_COMPRESSION: bool = true;

----
utils/binary_protocol.rs
use byteorder::{LittleEndian, WriteBytesExt, ReadBytesExt};
use std::io::Cursor;
use crate::utils::socket_flow_messages::BinaryNodeData;
use log::{info, warn, debug};

// Binary format (simplified):
// - For each node (26 bytes total):
//   - Node Index: 2 bytes (u16)
//   - Position: 3 × 4 bytes = 12 bytes
//   - Velocity: 3 × 4 bytes = 12 bytes
// Total: 26 bytes per node

pub fn encode_node_data(nodes: &[(u16, BinaryNodeData)]) -> Vec<u8> {
    // Only log non-empty node transmissions to reduce spam
    if nodes.len() > 0 {
        debug!("Encoding {} nodes for binary transmission", nodes.len());
    }
    
    let mut buffer = Vec::new();
    
    // Log some samples of the encoded data
    let sample_size = std::cmp::min(3, nodes.len());
    if sample_size > 0 {
        debug!("Sample of nodes being encoded:");
    }
    
    for (node_id, node) in nodes {
        // Log the first few nodes for debugging
        if sample_size > 0 && *node_id < sample_size as u16 {
            debug!("Encoding node {}: pos=[{:.3},{:.3},{:.3}], vel=[{:.3},{:.3},{:.3}]", 
                node_id, 
                node.position.x, node.position.y, node.position.z,
                node.velocity.x, node.velocity.y, node.velocity.z);
        }
        // Write node ID (u16)
        buffer.write_u16::<LittleEndian>(*node_id).unwrap();
        
        // Write position Vec3Data
        buffer.write_f32::<LittleEndian>(node.position.x).unwrap();
        buffer.write_f32::<LittleEndian>(node.position.y).unwrap();
        buffer.write_f32::<LittleEndian>(node.position.z).unwrap();
        
        // Write velocity Vec3Data
        buffer.write_f32::<LittleEndian>(node.velocity.x).unwrap();
        buffer.write_f32::<LittleEndian>(node.velocity.y).unwrap();
        buffer.write_f32::<LittleEndian>(node.velocity.z).unwrap();

        // Mass, flags, and padding are no longer sent to the client
        // They are still available in the BinaryNodeData struct for server-side use
    }

    // Only log non-empty node transmissions to reduce spam
    if nodes.len() > 0 {
        debug!("Encoded binary data: {} bytes for {} nodes", buffer.len(), nodes.len());
    }
    buffer
}

pub fn decode_node_data(data: &[u8]) -> Result<Vec<(u16, BinaryNodeData)>, String> {
    let mut cursor = Cursor::new(data);
    
    // Check if data is empty
    if data.len() < 2 { // At least a node ID (2 bytes)
        return Err("Data too small to contain any nodes".into());
    }
    
    // Log header information
    debug!(
        "Decoding binary data: size={} bytes, expected nodes={}",
        data.len(), data.len() / 26
    );
    
    // Always log this for visibility
    debug!("Decoding binary data of size: {} bytes", data.len());
    
    let mut updates = Vec::new();
    
    // Set up sample logging
    let max_samples = 3;
    let mut samples_logged = 0;
    
    debug!("Starting binary data decode, expecting nodes with position and velocity data");
    
    while cursor.position() < data.len() as u64 {
        // Each node update is 26 bytes: 2 (nodeId) + 12 (position) + 12 (velocity)
        if cursor.position() + 26 > data.len() as u64 {
            return Err("Unexpected end of data while reading node update".into());
        }
        
        // Read node ID (u16)
        let node_id = cursor.read_u16::<LittleEndian>()
            .map_err(|e| format!("Failed to read node ID: {}", e))?;
        
        // Read position Vec3Data
        let pos_x = cursor.read_f32::<LittleEndian>()
            .map_err(|e| format!("Failed to read position[0]: {}", e))?;
        let pos_y = cursor.read_f32::<LittleEndian>()
            .map_err(|e| format!("Failed to read position[1]: {}", e))?;
        let pos_z = cursor.read_f32::<LittleEndian>()
            .map_err(|e| format!("Failed to read position[2]: {}", e))?;

        let position = crate::types::vec3::Vec3Data::new(pos_x, pos_y, pos_z);
        
        // Read velocity Vec3Data
        let vel_x = cursor.read_f32::<LittleEndian>()
            .map_err(|e| format!("Failed to read velocity[0]: {}", e))?;
        let vel_y = cursor.read_f32::<LittleEndian>()
            .map_err(|e| format!("Failed to read velocity[1]: {}", e))?;
        let vel_z = cursor.read_f32::<LittleEndian>()
            .map_err(|e| format!("Failed to read velocity[2]: {}", e))?;
        let velocity = crate::types::vec3::Vec3Data::new(vel_x, vel_y, vel_z);

        // Default mass value - this will be replaced with the actual mass from the node_map
        // in socket_flow_handler.rs for accurate physics calculations
        let mass = 100u8; // Default mass
        let flags = 0u8;  // Default flags
        let padding = [0u8, 0u8]; // Default padding
        
        // Log the first few decoded items as samples
        if samples_logged < max_samples {
            debug!(
                "Decoded node {}: pos=[{:.3},{:.3},{:.3}], vel=[{:.3},{:.3},{:.3}]", 
                node_id, position.x, position.y, position.z, 
                velocity.x, velocity.y, velocity.z
            );
            samples_logged += 1;
        }
        updates.push((node_id, BinaryNodeData {
            position,
            velocity,
            mass,
            flags,
            padding,
        }));
    }
    
    debug!("Successfully decoded {} nodes from binary data", updates.len());
    Ok(updates)
}

pub fn calculate_message_size(updates: &[(u16, BinaryNodeData)]) -> usize {
    // Each update: u16 (node_id) + 3*f32 (position) + 3*f32 (velocity)
    updates.len() * 26
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_encode_decode_roundtrip() {
        let nodes = vec![
            (1u16, BinaryNodeData {
                position: crate::types::vec3::Vec3Data::new(1.0, 2.0, 3.0),
                velocity: crate::types::vec3::Vec3Data::new(0.1, 0.2, 0.3),
                mass: 100,
                flags: 1,
                padding: [0, 0],
            }),
            (2u16, BinaryNodeData {
                position: crate::types::vec3::Vec3Data::new(4.0, 5.0, 6.0),
                velocity: crate::types::vec3::Vec3Data::new(0.4, 0.5, 0.6),
                mass: 200,
                flags: 1,
                padding: [0, 0],
            }),
        ];

        let encoded = encode_node_data(&nodes);
        let decoded = decode_node_data(&encoded).unwrap();

        assert_eq!(nodes.len(), decoded.len());

        for ((orig_id, orig_data), (dec_id, dec_data)) in nodes.iter().zip(decoded.iter()) {
            assert_eq!(orig_id, dec_id);
            assert_eq!(orig_data.position, dec_data.position);
            assert_eq!(orig_data.velocity, dec_data.velocity);
            // Note: mass, flags, and padding are not compared as they're not transmitted
        }
    }

    #[test]
    fn test_decode_invalid_data() {
        // Test with data that's too short
        let result = decode_node_data(&[0u8; 25]);
        assert!(result.is_err());
    }
}

----
utils/socket_flow_messages.rs
use serde::{Deserialize, Serialize};
use bytemuck::{Pod, Zeroable};
use std::collections::HashMap;
use crate::types::vec3::Vec3Data;
use std::sync::atomic::{AtomicU32, Ordering};
use cudarc::driver::{DeviceRepr, ValidAsZeroBits};
use glam::Vec3;

// Static counter for generating unique numeric IDs
static NEXT_NODE_ID: AtomicU32 = AtomicU32::new(1);  // Start from 1 (0 could be reserved)

#[repr(C)]
#[derive(Debug, Clone, Copy, Pod, Zeroable, Serialize, Deserialize)]
/// Binary node data structure for efficient transmission and GPU processing
/// 
/// Wire format (26 bytes per node):
/// - position: Vec3Data (12 bytes)
/// - velocity: Vec3Data (12 bytes)
/// - id: u16 (2 bytes)
///
/// Note: mass, flags, and padding are server-side only and not transmitted over the wire
/// to optimize bandwidth. They are still available for GPU processing and physics calculations.
pub struct BinaryNodeData {
    pub position: Vec3Data,
    pub velocity: Vec3Data,
    pub mass: u8,      // Server-side only, not transmitted
    pub flags: u8,     // Server-side only, not transmitted
    pub padding: [u8; 2], // Server-side only, not transmitted
}

// Implement DeviceRepr for BinaryNodeData
unsafe impl DeviceRepr for BinaryNodeData {}

// Implement ValidAsZeroBits for BinaryNodeData
unsafe impl ValidAsZeroBits for BinaryNodeData {}

#[derive(Debug, Serialize, Deserialize)]
pub struct PingMessage {
    #[serde(rename = "type")]
    pub type_: String,
    #[serde(default = "default_timestamp")]
    pub timestamp: u64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PongMessage {
    #[serde(rename = "type")]
    pub type_: String,
    pub timestamp: u64,
}

fn default_timestamp() -> u64 {
    chrono::Utc::now().timestamp_millis() as u64
}

#[derive(Debug, Serialize, Deserialize, Clone)]
#[serde(rename_all = "camelCase")]
pub struct Node {
    // Core data
    pub id: String,
    pub metadata_id: String,  // Store the original filename for lookup
    pub label: String,
    pub data: BinaryNodeData,

    // Metadata
    #[serde(skip_serializing_if = "HashMap::is_empty")]
    pub metadata: HashMap<String, String>,
    // We need to keep this attribute to maintain WebSocket protocol compatibility
    #[serde(skip)]
    pub file_size: u64,

    // Rendering properties
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub node_type: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<f32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub weight: Option<f32>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user_data: Option<HashMap<String, String>>,
}

impl Node {
    pub fn new(metadata_id: String) -> Self {
        // Generate a unique numeric ID for binary protocol compatibility
        let id = NEXT_NODE_ID.fetch_add(1, Ordering::SeqCst).to_string();
        
        Self {
            id,
            metadata_id: metadata_id.clone(),
            label: metadata_id,
            data: BinaryNodeData {
                position: Vec3Data::zero(),
                velocity: Vec3Data::zero(),
                mass: 0, // default mass, will be updated based on file size
                flags: 1, // Set to 1 by default (active state)
                padding: [0, 0],
            },
            metadata: HashMap::new(),
            // file_size is set to 0 initially, will be updated later with set_file_size
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        }
    }

    pub fn calculate_mass(file_size: u64) -> u8 {
        // Use log scale to prevent extremely large masses
        // Add 1 to file_size to handle empty files (log(0) is undefined)
        // Scale down by 10000 to keep masses in a reasonable range
        let base_mass = ((file_size + 1) as f32).log10() / 4.0;
        // Ensure minimum mass of 0.1 and maximum of 10.0
        let mass = base_mass.max(0.1).min(10.0);
        (mass * 255.0 / 10.0) as u8
    }

    pub fn set_file_size(&mut self, size: u64) {
        self.file_size = size;
        // Update mass based on new file size
        self.data.mass = Self::calculate_mass(size);
        
        // Add the file_size to the metadata HashMap so it gets serialized to the client
        // This is our workaround since we can't directly serialize the file_size field
        if size > 0 {
            self.metadata.insert("fileSize".to_string(), size.to_string());
        }
    }

    // Convenience getters/setters for x, y, z coordinates
    pub fn x(&self) -> f32 { self.data.position.x }
    pub fn y(&self) -> f32 { self.data.position.y }
    pub fn z(&self) -> f32 { self.data.position.z }
    pub fn vx(&self) -> f32 { self.data.velocity.x }
    pub fn vy(&self) -> f32 { self.data.velocity.y }
    pub fn vz(&self) -> f32 { self.data.velocity.z }
    
    pub fn set_x(&mut self, val: f32) { self.data.position.x = val; }
    pub fn set_y(&mut self, val: f32) { self.data.position.y = val; }
    pub fn set_z(&mut self, val: f32) { self.data.position.z = val; }
    pub fn set_vx(&mut self, val: f32) { self.data.velocity.x = val; }
    pub fn set_vy(&mut self, val: f32) { self.data.velocity.y = val; }
    pub fn set_vz(&mut self, val: f32) { self.data.velocity.z = val; }
    
    /// Create a new node with a specific ID or use a stored ID if available
    pub fn new_with_id(metadata_id: String, stored_node_id: Option<String>) -> Self {
        // Use stored ID if available, otherwise generate a new one
        let id = match stored_node_id {
            Some(stored_id) => stored_id,
            None => NEXT_NODE_ID.fetch_add(1, Ordering::SeqCst).to_string(),
        };
        
        Self {
            id,
            metadata_id: metadata_id.clone(),
            label: metadata_id,
            data: BinaryNodeData {
                position: Vec3Data::zero(),
                velocity: Vec3Data::zero(),
                mass: 0, // default mass, will be updated based on file size
                flags: 1, // Set to 1 by default (active state)
                padding: [0, 0],
            },
            metadata: HashMap::new(),
            // file_size is set to 0 initially, will be updated later with set_file_size
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        }
    }
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(tag = "type")]
pub enum Message {
    #[serde(rename = "ping")]
    Ping { timestamp: u64 },
    
    #[serde(rename = "pong")]
    Pong { timestamp: u64 },
    
    #[serde(rename = "enableRandomization")]
    EnableRandomization { enabled: bool },
}

// Helper functions to convert between Vec3Data and [f32; 3] for GPU computations
#[inline]
pub fn vec3data_to_array(vec: &Vec3Data) -> [f32; 3] {
    [vec.x, vec.y, vec.z]
}

#[inline]
pub fn array_to_vec3data(arr: [f32; 3]) -> Vec3Data {
    Vec3Data::new(arr[0], arr[1], arr[2])
}

#[inline]
pub fn vec3data_to_glam(vec: &Vec3Data) -> Vec3 {
    Vec3::new(vec.x, vec.y, vec.z)
}

----
utils/tests/socket_flow_tests.rs
use crate::utils::socket_flow_messages::{Node, BinaryNodeData};
use crate::models::edge::Edge;
use crate::models::graph::GraphData;
use crate::utils::socket_flow_messages::{ServerMessage, ClientMessage, UpdatePositionsMessage};
use crate::AppState;

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_node_serialization() {
        // Create test node data
        let node_data = BinaryNodeData {
            position: [1.0, 2.0, 3.0],
            velocity: [0.1, 0.2, 0.3],
        };

        let node = Node {
            id: "test_node".to_string(),
            label: "Test Node".to_string(),
            data: node_data,
            metadata: Default::default(),
            file_size: 0,
            node_type: None,
            size: None,
            color: None,
            weight: None,
            group: None,
            user_data: None,
        };

        // Test serialization
        let serialized = serde_json::to_string(&node).unwrap();
        let deserialized: Node = serde_json::from_str(&serialized).unwrap();

        assert_eq!(node.id, deserialized.id);
        assert_eq!(node.data.position, deserialized.data.position);
        assert_eq!(node.data.velocity, deserialized.data.velocity);
    }

    #[test]
    fn test_binary_node_data() {
        // Create test nodes
        let node1_data = BinaryNodeData {
            position: [1.0, 2.0, 3.0],
            velocity: [0.1, 0.2, 0.3],
        };

        let node2_data = BinaryNodeData {
            position: [4.0, 5.0, 6.0],
            velocity: [0.4, 0.5, 0.6],
        };

        let nodes = vec![
            Node {
                id: "1".to_string(),
                label: "Node 1".to_string(),
                data: node1_data,
                metadata: Default::default(),
                file_size: 0,
                node_type: None,
                size: None,
                color: None,
                weight: None,
                group: None,
                user_data: None,
            },
            Node {
                id: "2".to_string(),
                label: "Node 2".to_string(),
                data: node2_data,
                metadata: Default::default(),
                file_size: 0,
                node_type: None,
                size: None,
                color: None,
                weight: None,
                group: None,
                user_data: None,
            },
        ];

        // Test binary conversion
        let binary_nodes: Vec<(u32, BinaryNodeData)> = nodes.iter()
            .map(|node| (
                node.id.parse::<u32>().unwrap(),
                node.data
            ))
            .collect();

        assert_eq!(binary_nodes.len(), 2);
        assert_eq!(binary_nodes[0].0, 1);
        assert_eq!(binary_nodes[0].1.position, [1.0, 2.0, 3.0]);
        assert_eq!(binary_nodes[0].1.velocity, [0.1, 0.2, 0.3]);
        assert_eq!(binary_nodes[1].0, 2);
        assert_eq!(binary_nodes[1].1.position, [4.0, 5.0, 6.0]);
        assert_eq!(binary_nodes[1].1.velocity, [0.4, 0.5, 0.6]);
    }
}

----
config/feature_access_test.rs
use super::FeatureAccess;
use std::env;

fn setup_test_env() {
    // Clear any existing environment variables
    env::remove_var("APPROVED_PUBKEYS");
    env::remove_var("POWER_USER_PUBKEYS");
    env::remove_var("SETTINGS_SYNC_ENABLED_PUBKEYS");
    env::remove_var("PERPLEXITY_ENABLED_PUBKEYS");
    env::remove_var("OPENAI_ENABLED_PUBKEYS");
    env::remove_var("RAGFLOW_ENABLED_PUBKEYS");
}

fn setup_test_pubkeys() {
    env::set_var("APPROVED_PUBKEYS", "pub1,pub2,pub3");
    env::set_var("POWER_USER_PUBKEYS", "pub1");
    env::set_var("SETTINGS_SYNC_ENABLED_PUBKEYS", "pub2");
    env::set_var("PERPLEXITY_ENABLED_PUBKEYS", "pub1,pub2");
    env::set_var("OPENAI_ENABLED_PUBKEYS", "pub1,pub3");
    env::set_var("RAGFLOW_ENABLED_PUBKEYS", "pub1,pub2");
}

#[test]
fn test_environment_loading() {
    setup_test_env();
    setup_test_pubkeys();
    
    let access = FeatureAccess::from_env();
    
    assert_eq!(access.approved_pubkeys.len(), 3);
    assert_eq!(access.power_users.len(), 1);
    assert_eq!(access.settings_sync_enabled.len(), 1);
    assert_eq!(access.perplexity_enabled.len(), 2);
    assert_eq!(access.openai_enabled.len(), 2);
    assert_eq!(access.ragflow_enabled.len(), 2);
}

#[test]
fn test_empty_environment() {
    setup_test_env();
    
    let access = FeatureAccess::from_env();
    
    assert!(access.approved_pubkeys.is_empty());
    assert!(access.power_users.is_empty());
    assert!(access.settings_sync_enabled.is_empty());
    assert!(access.perplexity_enabled.is_empty());
    assert!(access.openai_enabled.is_empty());
    assert!(access.ragflow_enabled.is_empty());
}

#[test]
fn test_power_user_privileges() {
    setup_test_env();
    setup_test_pubkeys();
    
    let access = FeatureAccess::from_env();
    
    // Test power user (pub1)
    assert!(access.is_power_user("pub1"));
    assert!(access.can_sync_settings("pub1")); // Power users can always sync
    
    // Test regular user with sync access (pub2)
    assert!(!access.is_power_user("pub2"));
    assert!(access.can_sync_settings("pub2")); // Explicitly granted
    
    // Test regular user without sync access (pub3)
    assert!(!access.is_power_user("pub3"));
    assert!(!access.can_sync_settings("pub3"));
}

#[test]
fn test_feature_access_combinations() {
    setup_test_env();
    setup_test_pubkeys();
    
    let access = FeatureAccess::from_env();
    
    // Test power user (pub1) - should have access to everything
    assert!(access.has_perplexity_access("pub1"));
    assert!(access.has_openai_access("pub1"));
    assert!(access.has_ragflow_access("pub1"));
    
    // Test user with some features (pub2)
    assert!(access.has_perplexity_access("pub2"));
    assert!(!access.has_openai_access("pub2"));
    assert!(access.has_ragflow_access("pub2"));
    
    // Test user with limited access (pub3)
    assert!(!access.has_perplexity_access("pub3"));
    assert!(access.has_openai_access("pub3"));
    assert!(!access.has_ragflow_access("pub3"));
}

#[test]
fn test_feature_access_helper() {
    setup_test_env();
    setup_test_pubkeys();
    
    let access = FeatureAccess::from_env();
    
    // Test power user (pub1)
    assert!(access.has_feature_access("pub1", "perplexity"));
    assert!(access.has_feature_access("pub1", "openai"));
    assert!(access.has_feature_access("pub1", "ragflow"));
    assert!(access.has_feature_access("pub1", "settings_sync"));
    
    // Test regular users
    assert!(access.has_feature_access("pub2", "perplexity"));
    assert!(!access.has_feature_access("pub2", "openai"));
    assert!(access.has_feature_access("pub3", "openai"));
    assert!(!access.has_feature_access("pub3", "perplexity"));
}

#[test]
fn test_available_features() {
    setup_test_env();
    setup_test_pubkeys();
    
    let access = FeatureAccess::from_env();
    
    // Test power user (pub1)
    let pub1_features = access.get_available_features("pub1");
    assert!(pub1_features.contains(&"power_user".to_string()));
    assert!(pub1_features.contains(&"perplexity".to_string()));
    assert!(pub1_features.contains(&"openai".to_string()));
    assert!(pub1_features.contains(&"ragflow".to_string()));
    assert!(pub1_features.contains(&"settings_sync".to_string()));
    
    // Test user with some features (pub2)
    let pub2_features = access.get_available_features("pub2");
    assert!(!pub2_features.contains(&"power_user".to_string()));
    assert!(pub2_features.contains(&"perplexity".to_string()));
    assert!(!pub2_features.contains(&"openai".to_string()));
    assert!(pub2_features.contains(&"ragflow".to_string()));
    assert!(pub2_features.contains(&"settings_sync".to_string()));
    
    // Test user with limited access (pub3)
    let pub3_features = access.get_available_features("pub3");
    assert!(!pub3_features.contains(&"power_user".to_string()));
    assert!(!pub3_features.contains(&"perplexity".to_string()));
    assert!(pub3_features.contains(&"openai".to_string()));
    assert!(!pub3_features.contains(&"settings_sync".to_string()));
}

#[test]
fn test_invalid_pubkeys() {
    setup_test_env();
    setup_test_pubkeys();
    
    let access = FeatureAccess::from_env();
    let invalid_pubkey = "invalid_pubkey";
    
    assert!(!access.has_access(invalid_pubkey));
    assert!(!access.is_power_user(invalid_pubkey));
    assert!(!access.can_sync_settings(invalid_pubkey));
    assert!(!access.has_perplexity_access(invalid_pubkey));
    assert!(!access.has_openai_access(invalid_pubkey));
    assert!(!access.has_ragflow_access(invalid_pubkey));
    
    let features = access.get_available_features(invalid_pubkey);
    assert!(features.is_empty());
}
----
config/feature_access.rs
use std::env;
use std::fs;
use std::path::PathBuf;
use log::{info, warn};

/// Represents the access control configuration for various features and user roles
pub struct FeatureAccess {
    // Base access control
    pub approved_pubkeys: Vec<String>,
    
    // Feature-specific access
    pub perplexity_enabled: Vec<String>,
    pub openai_enabled: Vec<String>,
    pub ragflow_enabled: Vec<String>,
    
    // Role-based access control
    pub power_users: Vec<String>,
    pub settings_sync_enabled: Vec<String>,
}

impl FeatureAccess {
    /// Creates a new FeatureAccess instance from environment variables
    pub fn from_env() -> Self {
        Self {
            // Base access
            approved_pubkeys: Self::load_pubkeys_from_env("APPROVED_PUBKEYS"),
            
            // Feature access
            perplexity_enabled: Self::load_pubkeys_from_env("PERPLEXITY_ENABLED_PUBKEYS"),
            openai_enabled: Self::load_pubkeys_from_env("OPENAI_ENABLED_PUBKEYS"),
            ragflow_enabled: Self::load_pubkeys_from_env("RAGFLOW_ENABLED_PUBKEYS"),
            
            // Role-based access
            power_users: Self::load_pubkeys_from_env("POWER_USER_PUBKEYS"),
            settings_sync_enabled: Self::load_pubkeys_from_env("SETTINGS_SYNC_ENABLED_PUBKEYS"),
        }
    }

    /// Helper function to load and parse pubkeys from environment variables
    fn load_pubkeys_from_env(var_name: &str) -> Vec<String> {
        env::var(var_name)
            .unwrap_or_default()
            .split(',')
            .map(|s| s.trim().to_string())
            .filter(|s| !s.is_empty())
            .collect()
    }

    /// Registers a new user with basic access and default features
    pub fn register_new_user(&mut self, pubkey: &str) -> bool {
        let pubkey = pubkey.to_string();
        
        // Don't register if already approved
        if self.approved_pubkeys.contains(&pubkey) {
            return false;
        }

        // Add to approved pubkeys
        self.approved_pubkeys.push(pubkey.clone());
        
        // Grant RAGFlow access by default
        self.ragflow_enabled.push(pubkey.clone());
        
        // Grant OpenAI (Kokoros) access by default
        self.openai_enabled.push(pubkey.clone());

        // Update the environment file
        self.save_to_env_file();

        info!("Registered new user: {}", pubkey);
        true
    }

    /// Saves the current access configuration back to the .env file
    fn save_to_env_file(&self) {
        let env_path = PathBuf::from(".env");
        if let Ok(content) = fs::read_to_string(&env_path) {
            let mut lines: Vec<String> = content
                .lines()
                .map(|line| line.to_string())
                .collect();

            // Update the relevant lines
            self.update_env_line(&mut lines, "APPROVED_PUBKEYS", &self.approved_pubkeys);
            self.update_env_line(&mut lines, "RAGFLOW_ENABLED_PUBKEYS", &self.ragflow_enabled);
            self.update_env_line(&mut lines, "OPENAI_ENABLED_PUBKEYS", &self.openai_enabled);

            if let Err(e) = fs::write(&env_path, lines.join("\n")) {
                warn!("Failed to update .env file: {}", e);
            }
        }
    }

    fn update_env_line(&self, lines: &mut Vec<String>, var_name: &str, pubkeys: &[String]) {
        let new_line = format!("{}={}", var_name, pubkeys.join(","));
        if let Some(pos) = lines.iter().position(|line| line.starts_with(var_name)) {
            lines[pos] = new_line;
        } else {
            lines.push(new_line);
        }
    }

    /// Checks if a pubkey has basic access
    pub fn has_access(&self, pubkey: &str) -> bool {
        self.approved_pubkeys.contains(&pubkey.to_string())
    }

    /// Checks if a pubkey has access to Perplexity features
    pub fn has_perplexity_access(&self, pubkey: &str) -> bool {
        self.perplexity_enabled.contains(&pubkey.to_string())
    }

    /// Checks if a pubkey has access to OpenAI features
    pub fn has_openai_access(&self, pubkey: &str) -> bool {
        self.openai_enabled.contains(&pubkey.to_string())
    }

    /// Checks if a pubkey has access to RagFlow features
    pub fn has_ragflow_access(&self, pubkey: &str) -> bool {
        self.ragflow_enabled.contains(&pubkey.to_string())
    }

    /// Checks if a pubkey has power user status
    pub fn is_power_user(&self, pubkey: &str) -> bool {
        self.power_users.contains(&pubkey.to_string())
    }

    /// Checks if a pubkey has settings sync access
    pub fn can_sync_settings(&self, pubkey: &str) -> bool {
        // Power users automatically get settings sync access
        self.is_power_user(pubkey) || self.settings_sync_enabled.contains(&pubkey.to_string())
    }

    /// Checks if a pubkey has access to a specific feature
    pub fn has_feature_access(&self, pubkey: &str, feature: &str) -> bool {
        match feature {
            "perplexity" => self.has_perplexity_access(pubkey),
            "openai" => self.has_openai_access(pubkey),
            "ragflow" => self.has_ragflow_access(pubkey),
            "settings_sync" => self.can_sync_settings(pubkey),
            _ => false,
        }
    }

    /// Gets all features available to a pubkey
    pub fn get_available_features(&self, pubkey: &str) -> Vec<String> {
        let mut features = Vec::new();
        
        if self.has_perplexity_access(pubkey) {
            features.push("perplexity".to_string());
        }
        if self.has_openai_access(pubkey) {
            features.push("openai".to_string());
        }
        if self.has_ragflow_access(pubkey) {
            features.push("ragflow".to_string());
        }
        if self.can_sync_settings(pubkey) {
            features.push("settings_sync".to_string());
        }
        if self.is_power_user(pubkey) {
            features.push("power_user".to_string());
        }
        
        features
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::env;

    fn setup_test_env() {
        env::set_var("APPROVED_PUBKEYS", "pub1,pub2");
        env::set_var("POWER_USER_PUBKEYS", "pub1");
        env::set_var("PERPLEXITY_ENABLED_PUBKEYS", "pub1,pub2");
        env::set_var("OPENAI_ENABLED_PUBKEYS", "pub1");
        env::set_var("SETTINGS_SYNC_ENABLED_PUBKEYS", "pub2");
    }

    #[test]
    fn test_basic_access() {
        setup_test_env();
        let access = FeatureAccess::from_env();
        
        assert!(access.has_access("pub1"));
        assert!(access.has_access("pub2"));
        assert!(!access.has_access("pub3"));
    }

    #[test]
    fn test_power_user_status() {
        setup_test_env();
        let access = FeatureAccess::from_env();
        
        assert!(access.is_power_user("pub1"));
        assert!(!access.is_power_user("pub2"));
    }

    #[test]
    fn test_feature_access() {
        setup_test_env();
        let access = FeatureAccess::from_env();
        
        // Test pub1 (power user)
        assert!(access.has_perplexity_access("pub1"));
        assert!(access.has_openai_access("pub1"));
        assert!(access.can_sync_settings("pub1")); // Power users can always sync
        
        // Test pub2 (regular user with some features)
        assert!(access.has_perplexity_access("pub2"));
        assert!(!access.has_openai_access("pub2"));
        assert!(access.can_sync_settings("pub2")); // Explicitly granted
    }

    #[test]
    fn test_available_features() {
        setup_test_env();
        let access = FeatureAccess::from_env();
        
        let pub1_features = access.get_available_features("pub1");
        assert!(pub1_features.contains(&"power_user".to_string()));
        assert!(pub1_features.contains(&"perplexity".to_string()));
        assert!(pub1_features.contains(&"openai".to_string()));
        assert!(pub1_features.contains(&"settings_sync".to_string()));
        
        let pub2_features = access.get_available_features("pub2");
        assert!(!pub2_features.contains(&"power_user".to_string()));
        assert!(pub2_features.contains(&"perplexity".to_string()));
        assert!(pub2_features.contains(&"settings_sync".to_string()));
    }
}
----
config/mod.rs
use config::{ConfigBuilder, ConfigError, Environment};
use log::debug;
use serde::{Deserialize, Serialize};
use serde_json::Value;
use serde_yaml;
use std::path::PathBuf;

pub mod feature_access;

// XR movement axes configuration
#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct MovementAxes {
    pub horizontal: i32,
    pub vertical: i32,
}

// Core visualization settings
#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct VisualizationSettings {
    pub nodes: NodeSettings,
    pub edges: EdgeSettings,
    pub physics: PhysicsSettings,
    pub rendering: RenderingSettings,
    pub animations: AnimationSettings,
    pub labels: LabelSettings,
    pub bloom: BloomSettings,
    pub hologram: HologramSettings,
}

// System settings
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct SystemSettings {
    pub network: NetworkSettings,
    pub websocket: WebSocketSettings,
    pub security: SecuritySettings,
    pub debug: DebugSettings,
}

// Main settings struct
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Settings {
    pub visualization: VisualizationSettings,
    pub system: SystemSettings,
    pub xr: XRSettings,
    pub ragflow: RagFlowSettings,
    pub perplexity: PerplexitySettings,
    pub openai: OpenAISettings,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct NodeSettings {
    pub base_color: String,
    pub metalness: f32,
    pub opacity: f32,
    pub roughness: f32,
    pub size_range: Vec<f32>,
    pub quality: String,
    pub enable_instancing: bool,
    pub enable_hologram: bool,
    pub enable_metadata_shape: bool,
    pub enable_metadata_visualization: bool,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct EdgeSettings {
    pub arrow_size: f32,
    pub base_width: f32,
    pub color: String,
    pub enable_arrows: bool,
    pub opacity: f32,
    pub width_range: Vec<f32>,
    pub quality: String
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct PhysicsSettings {
    pub attraction_strength: f32,
    pub bounds_size: f32,
    pub collision_radius: f32,
    pub damping: f32,
    pub enable_bounds: bool,
    pub enabled: bool,
    pub iterations: u32,
    pub max_velocity: f32,
    pub repulsion_strength: f32,
    pub spring_strength: f32,
    pub repulsion_distance: f32,
    pub mass_scale: f32,
    pub boundary_damping: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct RenderingSettings {
    pub ambient_light_intensity: f32,
    pub background_color: String,
    pub directional_light_intensity: f32,
    pub enable_ambient_occlusion: bool,
    pub enable_antialiasing: bool,
    pub enable_shadows: bool,
    pub environment_intensity: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct AnimationSettings {
    pub enable_motion_blur: bool,
    pub enable_node_animations: bool,
    pub motion_blur_strength: f32,
    pub selection_wave_enabled: bool,
    pub pulse_enabled: bool,
    pub pulse_speed: f32,
    pub pulse_strength: f32,
    pub wave_speed: f32
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct LabelSettings {
    pub desktop_font_size: u32,
    pub enable_labels: bool,
    pub text_color: String,
    pub text_outline_color: String,
    pub text_outline_width: f32,
    pub text_resolution: u32,
    pub text_padding: u32,
    pub billboard_mode: String
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct BloomSettings {
    pub edge_bloom_strength: f32,
    pub enabled: bool,
    pub environment_bloom_strength: f32,
    pub node_bloom_strength: f32,
    pub radius: f32,
    pub strength: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct HologramSettings {
    pub ring_count: u32,
    pub ring_color: String,
    pub ring_opacity: f32,
    pub sphere_sizes: Vec<f32>,  // Native world units
    pub ring_rotation_speed: f32,
    pub enable_buckminster: bool,
    pub buckminster_size: f32,  // Native world units
    pub buckminster_opacity: f32,
    pub enable_geodesic: bool,
    pub geodesic_size: f32,  // Native world units
    pub geodesic_opacity: f32,
    pub enable_triangle_sphere: bool,
    pub triangle_sphere_size: f32,  // Native world units
    pub triangle_sphere_opacity: f32,
    pub global_rotation_speed: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct NetworkSettings {
    pub bind_address: String,
    pub domain: String,
    pub enable_http2: bool,
    pub enable_rate_limiting: bool,
    pub enable_tls: bool,
    pub max_request_size: usize,
    pub min_tls_version: String,
    pub port: u16,
    pub rate_limit_requests: u32,
    pub rate_limit_window: u32,
    pub tunnel_id: String,
    pub api_client_timeout: u64,
    pub enable_metrics: bool,
    pub max_concurrent_requests: u32,
    pub max_retries: u32,
    pub metrics_port: u16,
    pub retry_delay: u32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct WebSocketSettings {
    pub binary_chunk_size: usize,
    pub binary_update_rate: u32,
    pub min_update_rate: u32,       // Minimum updates per second when graph is stable
    pub max_update_rate: u32,       // Maximum updates per second during high motion
    pub motion_threshold: f32,      // Consider graph in motion if at least X% of nodes are moving
    pub motion_damping: f32,        // Damping factor for rate changes (higher = smoother transitions)
    pub binary_message_version: u32,
    pub compression_enabled: bool,
    pub compression_threshold: usize,
    pub heartbeat_interval: u64,
    pub heartbeat_timeout: u64,
    pub max_connections: usize,
    pub max_message_size: usize,
    pub reconnect_attempts: u32,
    pub reconnect_delay: u64,
    pub update_rate: u32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct SecuritySettings {
    pub allowed_origins: Vec<String>,
    pub audit_log_path: String,
    pub cookie_httponly: bool,
    pub cookie_samesite: String,
    pub cookie_secure: bool,
    pub csrf_token_timeout: u32,
    pub enable_audit_logging: bool,
    pub enable_request_validation: bool,
    pub session_timeout: u32,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct DebugSettings {
    pub enabled: bool,
    pub enable_data_debug: bool,
    pub enable_websocket_debug: bool,
    pub log_binary_headers: bool,
    pub log_full_json: bool,
    pub log_level: String,
    pub log_format: String,
}

#[derive(Debug, Serialize, Deserialize, Clone, Default)]
pub struct XRSettings {
    pub mode: String,
    pub room_scale: f32,
    pub space_type: String,
    pub quality: String,
    pub enable_hand_tracking: bool,
    pub hand_mesh_enabled: bool,
    pub hand_mesh_color: String,
    pub hand_mesh_opacity: f32,
    pub hand_point_size: f32,
    pub hand_ray_enabled: bool,
    pub hand_ray_color: String,
    pub hand_ray_width: f32,
    pub gesture_smoothing: f32,
    pub enable_haptics: bool,
    pub haptic_intensity: f32,
    pub drag_threshold: f32,
    pub pinch_threshold: f32,
    pub rotation_threshold: f32,
    pub interaction_radius: f32,
    pub movement_speed: f32,
    pub dead_zone: f32,
    pub movement_axes: MovementAxes,
    pub enable_light_estimation: bool,
    pub enable_plane_detection: bool,
    pub enable_scene_understanding: bool,
    pub plane_color: String,
    pub plane_opacity: f32,
    pub plane_detection_distance: f32,
    pub show_plane_overlay: bool,
    pub snap_to_floor: bool,
    pub enable_passthrough_portal: bool,
    pub passthrough_opacity: f32,
    pub passthrough_brightness: f32,
    pub passthrough_contrast: f32,
    pub portal_size: f32,
    pub portal_edge_color: String,
    pub portal_edge_width: f32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct RagFlowSettings {
    pub api_key: String,
    pub api_base_url: String,
    pub timeout: u64,
    pub max_retries: u32,
    pub chat_id: String,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct PerplexitySettings {
    pub api_key: String,
    pub model: String,
    pub api_url: String,
    pub max_tokens: u32,
    pub temperature: f32,
    pub top_p: f32,
    pub presence_penalty: f32,
    pub frequency_penalty: f32,
    pub timeout: u64,
    pub rate_limit: u32,
}

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct OpenAISettings {
    pub api_key: String,
    pub base_url: String,
    pub timeout: u64,
    pub rate_limit: u32,
}

impl Settings {
    pub fn new() -> Result<Self, ConfigError> {
        debug!("Initializing settings");

        // Load .env file first
        dotenvy::dotenv().ok();

        let settings_path = std::env::var("SETTINGS_FILE_PATH")
            .map(PathBuf::from)
            .unwrap_or_else(|_| PathBuf::from("/app/settings.yaml"));

        debug!("Loading settings from: {:?}", settings_path);

        // Read and parse YAML file
        let yaml_content = std::fs::read_to_string(&settings_path)
            .map_err(|e| ConfigError::NotFound(format!("Failed to read settings file: {}", e)))?;

        debug!("Deserializing settings from YAML");
        let mut settings: Settings = serde_yaml::from_str(&yaml_content)
            .map_err(|e| ConfigError::Message(format!("Failed to parse YAML: {}", e)))?;

        // Apply environment variables on top of YAML settings
        if let Ok(env_settings) = Settings::from_env() {
            settings.merge_env(env_settings);
        }

        Ok(settings)
    }

    pub fn merge_env(&mut self, _env_settings: Settings) {
        // Environment-specific settings are now handled by their respective modules
    }

    pub fn merge(&mut self, value: Value) -> Result<(), String> {
        // Convert incoming JSON value to snake_case
        let snake_case_value = self.to_snake_case_value(value);

        // Deserialize the value into a temporary Settings
        let new_settings: Settings = serde_json::from_value(snake_case_value)
            .map_err(|e| format!("Failed to deserialize settings: {}", e))?;

        // Update only the fields that were present in the input
        // This preserves existing values for fields that weren't included in the update
        if let Ok(visualization) = serde_json::to_value(&new_settings.visualization) {
            if !visualization.is_null() {
                self.visualization = new_settings.visualization;
            }
        }
        if let Ok(system) = serde_json::to_value(&new_settings.system) {
            if !system.is_null() {
                self.system = new_settings.system;
            }
        }
        if let Ok(xr) = serde_json::to_value(&new_settings.xr) {
            if !xr.is_null() {
                self.xr = new_settings.xr;
            }
        }

        Ok(())
    }

    pub fn save(&self) -> Result<(), String> {
        let settings_path = std::env::var("SETTINGS_FILE_PATH")
            .map(PathBuf::from)
            .unwrap_or_else(|_| PathBuf::from("/app/settings.yaml"));

        // Convert to YAML
        let yaml = serde_yaml::to_string(&self)
            .map_err(|e| format!("Failed to serialize settings to YAML: {}", e))?;

        // Write to file
        std::fs::write(&settings_path, yaml)
            .map_err(|e| format!("Failed to write settings file: {}", e))?;

        Ok(())
    }

    fn to_snake_case_value(&self, value: Value) -> Value {
        match value {
            Value::Object(map) => {
                let converted: serde_json::Map<String, Value> = map
                    .into_iter()
                    .map(|(k, v)| {
                        let snake_case_key = crate::utils::case_conversion::to_snake_case(&k);
                        (snake_case_key, self.to_snake_case_value(v))
                    })
                    .collect();
                Value::Object(converted)
            }
            Value::Array(arr) => Value::Array(
                arr.into_iter()
                    .map(|v| self.to_snake_case_value(v))
                    .collect(),
            ),
            _ => value,
        }
    }

    pub fn from_env() -> Result<Self, ConfigError> {
        let builder = ConfigBuilder::<config::builder::DefaultState>::default();
        let config = builder
            .add_source(Environment::default().separator("_").try_parsing(true))
            .build()?;

        config.try_deserialize()
    }
}

impl Default for Settings {
    fn default() -> Self {
        Self {
            visualization: VisualizationSettings {
                nodes: NodeSettings {
                    base_color: "#c3ab6f".to_string(),
                    metalness: 0.3,
                    opacity: 0.4,
                    roughness: 0.35,
                    size_range: vec![40.0, 120.0],  // Native world units
                    quality: "medium".to_string(),
                    enable_instancing: false,
                    enable_hologram: false,
                    enable_metadata_shape: false,
                    enable_metadata_visualization: false,
                },
                edges: EdgeSettings {
                    arrow_size: 0.15,
                    base_width: 2.0,
                    color: "#917f18".to_string(),
                    enable_arrows: false,
                    opacity: 0.6,
                    width_range: vec![1.0, 3.0],
                    quality: "medium".to_string()
                },
                physics: PhysicsSettings {
                    attraction_strength: 0.015,
                    bounds_size: 12.0,
                    collision_radius: 0.25,
                    damping: 0.88,
                    enable_bounds: true,
                    enabled: false,
                    iterations: 500,
                    max_velocity: 2.5,
                    repulsion_strength: 1500.0,
                    spring_strength: 0.018,
                    repulsion_distance: 50.0,
                    mass_scale: 1.0,
                    boundary_damping: 0.5,
                },
                rendering: RenderingSettings {
                    ambient_light_intensity: 0.3,
                    background_color: "#000000".to_string(),
                    directional_light_intensity: 1.0,
                    enable_ambient_occlusion: false,
                    enable_antialiasing: false,
                    enable_shadows: false,
                    environment_intensity: 0.6,
                },
                animations: AnimationSettings {
                    enable_motion_blur: false,
                    enable_node_animations: false,
                    motion_blur_strength: 0.4,
                    selection_wave_enabled: false,
                    pulse_enabled: false,
                    pulse_speed: 1.0,
                    pulse_strength: 1.0,
                    wave_speed: 1.0
                },
                labels: LabelSettings {
                    desktop_font_size: 48,
                    enable_labels: true,
                    text_color: "#FFFFFF".to_string(),
                    text_outline_color: "#000000".to_string(),
                    text_outline_width: 0.1,
                    text_resolution: 32,
                    text_padding: 2,
                    billboard_mode: "camera".to_string(),
                },
                bloom: BloomSettings {
                    edge_bloom_strength: 0.3,
                    enabled: false,
                    environment_bloom_strength: 0.5,
                    node_bloom_strength: 0.2,
                    radius: 0.5,
                    strength: 1.8,
                },
                hologram: HologramSettings {
                    ring_count: 3,
                    ring_color: "#00ff00".to_string(),
                    ring_opacity: 0.5,
                    sphere_sizes: vec![40.0, 80.0, 120.0],  // Native world units
                    ring_rotation_speed: 0.001,
                    enable_buckminster: false,
                    buckminster_size: 120.0,  // Native world units
                    buckminster_opacity: 0.3,
                    enable_geodesic: false,
                    geodesic_size: 100.0,  // Native world units
                    geodesic_opacity: 0.3,
                    enable_triangle_sphere: false,
                    triangle_sphere_size: 140.0,  // Native world units
                    triangle_sphere_opacity: 0.3,
                    global_rotation_speed: 0.0005,
                },
            },
            system: SystemSettings {
                network: NetworkSettings {
                    bind_address: "0.0.0.0".to_string(),
                    domain: "localhost".to_string(),
                    enable_http2: false,
                    enable_rate_limiting: true,
                    enable_tls: false,
                    max_request_size: 10485760,
                    min_tls_version: String::new(),
                    port: 3001,
                    rate_limit_requests: 100,
                    rate_limit_window: 60,
                    tunnel_id: "dummy".to_string(),
                    api_client_timeout: 30,
                    enable_metrics: true,
                    max_concurrent_requests: 5,
                    max_retries: 3,
                    metrics_port: 9090,
                    retry_delay: 5,
                },
                websocket: WebSocketSettings {
                    binary_chunk_size: 65536,
                    binary_update_rate: 30,
                    min_update_rate: 5,
                    max_update_rate: 60,
                    motion_threshold: 0.05,
                    motion_damping: 0.9,
                    binary_message_version: 1,
                    compression_enabled: true,
                    compression_threshold: 1024,
                    heartbeat_interval: 15000,
                    heartbeat_timeout: 60000,
                    max_connections: 1000,
                    max_message_size: 100485760,
                    reconnect_attempts: 3,
                    reconnect_delay: 5000,
                    update_rate: 90,
                },
                security: SecuritySettings {
                    allowed_origins: Vec::new(),
                    audit_log_path: "/app/logs/audit.log".to_string(),
                    cookie_httponly: true,
                    cookie_samesite: "Strict".to_string(),
                    cookie_secure: true,
                    csrf_token_timeout: 3600,
                    enable_audit_logging: true,
                    enable_request_validation: true,
                    session_timeout: 3600,
                },
                debug: DebugSettings {
                    enabled: false,
                    enable_data_debug: false,
                    enable_websocket_debug: false,
                    log_binary_headers: false,
                    log_full_json: false,
                    log_level: "debug".to_string(),
                    log_format: "json".to_string(),
                },
            },
            xr: XRSettings {
                mode: "immersive-ar".to_string(),
                room_scale: 0.1,
                space_type: "local-floor".to_string(),
                quality: "medium".to_string(),
                enable_hand_tracking: true,
                hand_mesh_enabled: true,
                hand_mesh_color: "#ffffff".to_string(),
                hand_mesh_opacity: 0.5,
                hand_point_size: 5.0,
                hand_ray_enabled: true,
                hand_ray_color: "#00ff00".to_string(),
                hand_ray_width: 2.0,
                gesture_smoothing: 0.5,
                enable_haptics: true,
                haptic_intensity: 0.5,
                drag_threshold: 0.02,
                pinch_threshold: 0.7,
                rotation_threshold: 0.1,
                interaction_radius: 0.5,
                movement_speed: 0.05,
                dead_zone: 0.1,
                movement_axes: MovementAxes {
                    horizontal: 2,
                    vertical: 3,
                },
                enable_light_estimation: true,
                enable_plane_detection: true,
                enable_scene_understanding: true,
                plane_color: "#808080".to_string(),
                plane_opacity: 0.5,
                plane_detection_distance: 3.0,
                show_plane_overlay: true,
                snap_to_floor: true,
                enable_passthrough_portal: false,
                passthrough_opacity: 1.0,
                passthrough_brightness: 1.0,
                passthrough_contrast: 1.0,
                portal_size: 2.0,
                portal_edge_color: "#ffffff".to_string(),
                portal_edge_width: 2.0,
            },
            ragflow: RagFlowSettings {
                api_key: String::new(),
                api_base_url: String::new(),
                timeout: 30,
                max_retries: 3,
                chat_id: String::new(),
            },
            perplexity: PerplexitySettings {
                api_key: String::new(),
                model: String::new(),
                api_url: String::new(),
                max_tokens: 4096,
                temperature: 0.5,
                top_p: 0.9,
                presence_penalty: 0.0,
                frequency_penalty: 0.0,
                timeout: 30,
                rate_limit: 100,
            },
            openai: OpenAISettings {
                api_key: String::new(),
                base_url: String::new(),
                timeout: 30,
                rate_limit: 100,
            },
        }
    }
}

#[cfg(test)]
mod tests {
    mod feature_access_test;
}
----
types/mod.rs
pub mod speech;
pub mod vec3;

pub use vec3::Vec3Data;

----
types/speech.rs
use tokio::sync::mpsc;
use std::error::Error;
use std::fmt;

#[derive(Debug)]
pub enum SpeechError {
    WebSocketError(tungstenite::Error),
    ConnectionError(String),
    SendError(mpsc::error::SendError<SpeechCommand>),
    SerializationError(serde_json::Error),
    ProcessError(std::io::Error),
    Base64Error(base64::DecodeError),
    BroadcastError(String),
    TTSError(String),
}

impl fmt::Display for SpeechError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            SpeechError::WebSocketError(e) => write!(f, "WebSocket error: {}", e),
            SpeechError::ConnectionError(msg) => write!(f, "Connection error: {}", msg),
            SpeechError::SendError(e) => write!(f, "Send error: {}", e),
            SpeechError::SerializationError(e) => write!(f, "Serialization error: {}", e),
            SpeechError::ProcessError(e) => write!(f, "Process error: {}", e),
            SpeechError::Base64Error(e) => write!(f, "Base64 error: {}", e),
            SpeechError::BroadcastError(msg) => write!(f, "Broadcast error: {}", msg),
            SpeechError::TTSError(msg) => write!(f, "TTS error: {}", msg),
        }
    }
}

impl Error for SpeechError {}

impl From<tungstenite::Error> for SpeechError {
    fn from(err: tungstenite::Error) -> Self {
        SpeechError::WebSocketError(err)
    }
}

impl From<mpsc::error::SendError<SpeechCommand>> for SpeechError {
    fn from(err: mpsc::error::SendError<SpeechCommand>) -> Self {
        SpeechError::SendError(err)
    }
}

impl From<serde_json::Error> for SpeechError {
    fn from(err: serde_json::Error) -> Self {
        SpeechError::SerializationError(err)
    }
}

impl From<std::io::Error> for SpeechError {
    fn from(err: std::io::Error) -> Self {
        SpeechError::ProcessError(err)
    }
}

impl From<base64::DecodeError> for SpeechError {
    fn from(err: base64::DecodeError) -> Self {
        SpeechError::Base64Error(err)
    }
}

#[derive(Debug, Clone)]
pub enum TTSProvider {
    OpenAI,  // OpenAI is now the only supported provider
}

#[derive(Debug)]
pub enum SpeechCommand {
    Initialize,
    SendMessage(String),
    Close,
    SetTTSProvider(TTSProvider),
}

----
types/vec3.rs
use glam::Vec3;
use bytemuck::{Pod, Zeroable};
use serde::{Serialize, Deserialize};

/// A 3D vector type that is compatible with both CUDA and WebSocket binary protocol
#[repr(C)]
#[derive(Debug, Clone, Copy, Pod, Zeroable, Serialize, Deserialize)]
pub struct Vec3Data {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}

impl From<Vec3> for Vec3Data {
    fn from(v: Vec3) -> Self {
        Self {
            x: v.x,
            y: v.y,
            z: v.z,
        }
    }
}

impl From<Vec3Data> for Vec3 {
    fn from(v: Vec3Data) -> Self {
        Vec3::new(v.x, v.y, v.z)
    }
}

impl From<[f32; 3]> for Vec3Data {
    fn from(arr: [f32; 3]) -> Self {
        Self {
            x: arr[0],
            y: arr[1],
            z: arr[2],
        }
    }
}

impl From<Vec3Data> for [f32; 3] {
    fn from(v: Vec3Data) -> Self {
        [v.x, v.y, v.z]
    }
}

impl Vec3Data {
    pub fn new(x: f32, y: f32, z: f32) -> Self {
        Self { x, y, z }
    }

    pub fn zero() -> Self {
        Self::new(0.0, 0.0, 0.0)
    }

    pub fn as_array(&self) -> [f32; 3] {
        [self.x, self.y, self.z]
    }

    pub fn as_vec3(&self) -> Vec3 {
        Vec3::new(self.x, self.y, self.z)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_vec3_data_conversions() {
        let vec3 = Vec3::new(1.0, 2.0, 3.0);
        let vec3_data: Vec3Data = vec3.into();
        let array: [f32; 3] = vec3_data.into();
        let back_to_vec3: Vec3 = vec3_data.into();

        assert_eq!(vec3_data.x, 1.0);
        assert_eq!(vec3_data.y, 2.0);
        assert_eq!(vec3_data.z, 3.0);
        assert_eq!(array, [1.0, 2.0, 3.0]);
        assert_eq!(back_to_vec3, vec3);
    }

    #[test]
    fn test_array_conversion() {
        let array = [1.0, 2.0, 3.0];
        let vec3_data: Vec3Data = array.into();
        let back_to_array: [f32; 3] = vec3_data.into();

        assert_eq!(vec3_data.x, 1.0);
        assert_eq!(vec3_data.y, 2.0);
        assert_eq!(vec3_data.z, 3.0);
        assert_eq!(back_to_array, array);
    }

    #[test]
    fn test_zero() {
        let zero = Vec3Data::zero();
        assert_eq!(zero.x, 0.0);
        assert_eq!(zero.y, 0.0);
        assert_eq!(zero.z, 0.0);
    }
}
--END--

## Client Code (TypeScript)

The following text represents a project with code. The structure of the text consists of sections beginning with ----, followed by a single line containing the file path and file name, and then a variable number of lines containing the file contents. The text representing the project ends when the symbols --END-- are encountered. Any further text beyond --END-- is meant to be interpreted as instructions using the aforementioned project as context.
----
tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": [
      "es2020",
      "dom",
      "dom.iterable",
      "webworker",
      "webworker.importscripts",
      "webworker.iterable"
    ],
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noImplicitReturns": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["**/*.ts", "**/*.d.ts"],
  "exclude": ["node_modules"]
}

----
index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="immersive-ar" content="true">
  <meta name="oculus-hand-tracking" content="true">
  <title>LogseqXR Graph Visualization</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      font-family: Arial, sans-serif;
      background: #212121;  /* Match scene background */
      color: #ffffff;
    }

    #scene-container {
      position: absolute;
      width: 100%;
      height: 100%;
      background: transparent;
    }

    #control-panel {
      position: fixed;
      top: 0;
      right: 0;
      height: 100vh;
      background: rgba(33, 33, 33, 0.95);  /* Match scene background */
      border-left: 1px solid rgba(255, 255, 255, 0.1);
      padding: 15px;
      z-index: 1000;
      min-width: 300px;
      overflow-y: auto;
      box-shadow: -2px 0 10px rgba(0, 0, 0, 0.3);
      transition: opacity 0.3s ease;
    }

    #control-panel.hidden {
      opacity: 0;
      pointer-events: none;
    }

    #xr-button {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      padding: 12px 24px;
      background: rgba(255, 255, 255, 0.2);
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 20px;
      color: white;
      font-size: 16px;
      cursor: pointer;
      z-index: 1000;
      transition: all 0.3s ease;
    }

    #xr-button:hover {
      background: rgba(255, 255, 255, 0.3);
    }

    #xr-button.hidden {
      opacity: 0;
      pointer-events: none;
    }

    .control-panel-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .control-panel-header h3 {
      margin: 0;
      font-size: 1.2em;
      color: #ffffff;
    }

    .connection-status {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.9em;
    }

    .connection-status.connected {
      background: rgba(76, 175, 80, 0.2);
      color: #4CAF50;
    }

    .connection-status.disconnected {
      background: rgba(244, 67, 54, 0.2);
      color: #F44336;
    }

    .settings-group {
      margin-bottom: 20px;
      padding: 10px;
      border-radius: 4px;
      background: rgba(255, 255, 255, 0.05);
    }

    .settings-group h4 {
      margin: 0 0 10px 0;
      color: #ffffff;
      font-size: 1em;
    }

    .setting-item {
      margin-bottom: 10px;
    }

    .setting-item label {
      display: block;
      margin-bottom: 5px;
      color: rgba(255, 255, 255, 0.8);
    }

    .setting-item input[type="text"],
    .setting-item input[type="number"],
    .setting-item select {
      width: 100%;
      padding: 6px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 4px;
      background: rgba(255, 255, 255, 0.1);
      color: #ffffff;
    }

    .setting-item input[type="checkbox"] {
      margin-right: 8px;
    }

    .setting-item input:focus,
    .setting-item select:focus {
      outline: none;
      border-color: rgba(255, 255, 255, 0.3);
      background: rgba(255, 255, 255, 0.15);
    }
  </style>
</head>
<body>
  <div id="scene-container">
    <canvas id="main-canvas"></canvas>
  </div>
  <div id="control-panel">
    <div class="control-panel-header">
      <h3>Settings</h3>
      <div class="connection-status">
        <span class="status-indicator"></span>
        <span id="connection-status">Connecting...</span>
      </div>
    </div>
    <div class="control-panel-content">
      <!-- Settings sections will be dynamically populated by ControlPanel.ts -->
    </div>
  </div>
  <script type="module" src="/index.ts"></script>
</body>
</html>

----
websocket-diagnostics.ts
/**
 * WebSocket Diagnostics Tool
 * 
 * This tool provides comprehensive diagnostics for WebSocket connections,
 * including connection status, message handling, binary protocol validation,
 * and network analysis.
 * 
 * Usage:
 * 1. Import this file in your application or load it via the browser console
 * 2. Call `runDiagnostics()` to start the diagnostics process
 * 3. Check the console for detailed logs and diagnostics information
 * 
 * Features:
 * - Connection status monitoring
 * - Binary protocol validation
 * - Network latency measurement
 * - Message size analysis
 * - Reconnection testing
 */

import { buildWsUrl } from './core/api';
import pako from 'pako';
import { debugState } from './core/debugState';
import { logger } from './core/logger';

// Configuration
const CONFIG = {
  // Timeouts and intervals (in milliseconds)
  connectionTimeout: 10000,
  pingInterval: 2000,
  reconnectDelay: 3000,
  testDuration: 30000,
  
  // Test parameters
  connectionAttempts: 3,
  binaryValidationSamples: 5,
  
  // Expected binary protocol values
  expectedBytesPerNode: 28,
  expectedHeaderSize: 8,
  
  // Logging
  verbose: true,
  logTimestamps: true
};

// Diagnostic state
const state = {
  connectionAttempts: 0,
  messagesReceived: 0,
  binaryMessagesReceived: 0,
  textMessagesReceived: 0,
  reconnections: 0,
  errors: 0,
  binarySizes: [] as number[],
  latencies: [] as number[],
  pingTimestamps: new Map<string, number>(),
  testStartTime: 0,
  socket: null as WebSocket | null,
  testRunning: false
};

// Utility functions
const utils = {
  timestamp(): string {
    return CONFIG.logTimestamps 
      ? `[${new Date().toISOString()}] `
      : '';
  },
  
  log(message: string, type: 'info' | 'error' | 'warning' | 'success' = 'info'): void {
    const prefix = utils.timestamp();
    
    switch (type) {
      case 'error':
        console.error(`${prefix}❌ ${message}`);
        break;
      case 'warning':
        console.warn(`${prefix}⚠️ ${message}`);
        break;
      case 'success':
        console.log(`${prefix}✅ ${message}`);
        break;
      default:
        console.log(`${prefix}ℹ️ ${message}`);
    }
  },
  
  formatBytes(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  },
  
  calculateAverage(arr: number[]): number {
    if (arr.length === 0) return 0;
    return arr.reduce((a, b) => a + b, 0) / arr.length;
  },
  
  generateRandomId(): string {
    return Math.random().toString(36).substring(2, 15);
  },
  
  isCompressed(data: ArrayBuffer): boolean {
    // Check for zlib header (78 01, 78 9C, or 78 DA)
    const header = new Uint8Array(data, 0, 2);
    return header[0] === 0x78 && (header[1] === 0x01 || header[1] === 0x9C || header[1] === 0xDA);
  }
};

// Network diagnostics
const network = {
  async testApiConnectivity(): Promise<boolean> {
    try {
      utils.log('Testing API connectivity...');
      const response = await fetch('/api/user-settings', { method: 'HEAD' });
      if (response.ok) {
        utils.log('API connectivity test passed', 'success');
        return true;
      } else {
        utils.log(`API connectivity test failed: ${response.status} ${response.statusText}`, 'error');
        return false;
      }
    } catch (error) {
      utils.log(`API connectivity test failed: ${error}`, 'error');
      return false;
    }
  },
  
  async checkDnsResolution(): Promise<boolean> {
    try {
      utils.log('Checking DNS resolution...');
      const hostname = window.location.hostname;
      const response = await fetch(`https://${hostname}/favicon.ico`, { method: 'HEAD' });
      if (response.ok) {
        utils.log(`DNS resolution successful: ${response.status}`, 'success');
      } else {
        utils.log(`DNS resolution returned status: ${response.status}`, 'warning');
      }
      return response.ok;
    } catch (error) {
      utils.log(`DNS resolution failed: ${error}`, 'error');
      return false;
    }
  }
};

// Binary protocol validation
const binaryProtocol = {
  validateMessageSize(data: ArrayBuffer): boolean {
    const size = data.byteLength;
    state.binarySizes.push(size);
    
    // Check if the message is compressed
    if (utils.isCompressed(data)) {
      utils.log(`Received compressed binary message: ${utils.formatBytes(size)}`);
      try {
        // Decompress the message
        const compressedData = new Uint8Array(data);
        const decompressedData = pako.inflate(compressedData);
        return this.validateDecompressedMessage(decompressedData.buffer);
      } catch (error) {
        utils.log(`Failed to decompress message: ${error}`, 'error');
        return false;
      }
    } else {
      return this.validateDecompressedMessage(data);
    }
  },
  
  validateDecompressedMessage(data: ArrayBuffer): boolean {
    const size = data.byteLength;
    const headerSize = CONFIG.expectedHeaderSize;
    const bytesPerNode = CONFIG.expectedBytesPerNode;
    
    // Check if the message size (minus header) is divisible by the expected bytes per node
    const dataSize = size - headerSize;
    const remainder = dataSize % bytesPerNode;
    
    if (remainder !== 0) {
      utils.log(`Binary message size validation failed: message size (${size} bytes) minus header (${headerSize} bytes) = ${dataSize} bytes, which is not divisible by ${bytesPerNode} bytes per node. Remainder: ${remainder} bytes`, 'error');
      return false;
    }
    
    const nodeCount = dataSize / bytesPerNode;
    utils.log(`Binary message contains data for ${nodeCount} nodes (${utils.formatBytes(size)})`, 'info');
    
    // Read the header to get the actual node count
    const view = new DataView(data);
    const messageType = view.getUint32(0, true);
    const reportedNodeCount = view.getUint32(4, true);
    
    utils.log(`Message type: ${messageType}, reported node count: ${reportedNodeCount}`, 'info');
    
    if (nodeCount !== reportedNodeCount) {
      utils.log(`Node count mismatch: header reports ${reportedNodeCount} nodes, but message contains data for ${nodeCount} nodes`, 'error');
      return false;
    }
    
    utils.log(`Binary message validation passed: ${reportedNodeCount} nodes, ${utils.formatBytes(size)}`, 'success');
    return true;
  },
  
  analyzeMessageFrequency(): void {
    if (state.binaryMessagesReceived === 0) {
      utils.log('No binary messages received during the test period', 'warning');
      return;
    }
    
    const avgSize = utils.calculateAverage(state.binarySizes);
    const messagesPerSecond = state.binaryMessagesReceived / (CONFIG.testDuration / 1000);
    
    utils.log(`Binary message frequency: ${messagesPerSecond.toFixed(2)} messages/second`);
    utils.log(`Average binary message size: ${utils.formatBytes(avgSize)}`);
  }
};

// WebSocket connection handling
const wsConnection = {
  connect(): Promise<WebSocket> {
    return new Promise((resolve, reject) => {
      state.connectionAttempts++;
      
      const url = buildWsUrl();
      utils.log(`Connecting to WebSocket: ${url} (Attempt ${state.connectionAttempts}/${CONFIG.connectionAttempts})`);
      
      const socket = new WebSocket(url);
      state.socket = socket;
      
      // Set up connection timeout
      const timeoutId = setTimeout(() => {
        if (socket.readyState !== WebSocket.OPEN) {
          utils.log('WebSocket connection timeout', 'error');
          socket.close();
          reject(new Error('Connection timeout'));
        }
      }, CONFIG.connectionTimeout);
      
      socket.onopen = () => {
        clearTimeout(timeoutId);
        utils.log('WebSocket connection established', 'success');
        
        // Send initial message to request data
        this.sendInitialRequest(socket);
        
        // Start ping test
        this.startPingTest(socket);
        
        resolve(socket);
      };
      
      socket.onerror = (error) => {
        clearTimeout(timeoutId);
        state.errors++;
        utils.log(`WebSocket error: ${error}`, 'error');
        reject(error);
      };
      
      socket.onclose = (event) => {
        clearTimeout(timeoutId);
        utils.log(`WebSocket connection closed: Code ${event.code}, Reason: ${event.reason || 'No reason provided'}`);
        
        if (state.testRunning && state.connectionAttempts < CONFIG.connectionAttempts) {
          utils.log(`Attempting to reconnect in ${CONFIG.reconnectDelay}ms...`);
          state.reconnections++;
          
          setTimeout(() => {
            this.connect().catch(error => {
              utils.log(`Reconnection failed: ${error}`, 'error');
            });
          }, CONFIG.reconnectDelay);
        }
      };
      
      socket.onmessage = (event) => {
        this.handleMessage(event);
      };
    });
  },
  
  sendInitialRequest(socket: WebSocket): void {
    if (socket.readyState === WebSocket.OPEN) {
      const initialRequest = JSON.stringify({ type: 'requestInitialData' });
      socket.send(initialRequest);
      utils.log('Sent initial data request');
    }
  },
  
  startPingTest(socket: WebSocket): void {
    const pingInterval = setInterval(() => {
      if (socket.readyState !== WebSocket.OPEN) {
        clearInterval(pingInterval);
        return;
      }
      
      const pingId = utils.generateRandomId();
      const pingMessage = JSON.stringify({ type: 'ping', id: pingId });
      
      state.pingTimestamps.set(pingId, Date.now());
      socket.send(pingMessage);
      
      if (CONFIG.verbose) {
        utils.log(`Sent ping: ${pingId}`);
      }
    }, CONFIG.pingInterval);
  },
  
  handleMessage(event: MessageEvent): void {
    state.messagesReceived++;
    
    if (typeof event.data === 'string') {
      state.textMessagesReceived++;
      this.handleTextMessage(event.data);
    } else if (event.data instanceof ArrayBuffer) {
      state.binaryMessagesReceived++;
      this.handleBinaryMessage(event.data);
    } else if (event.data instanceof Blob) {
      // Convert Blob to ArrayBuffer
      const reader = new FileReader();
      reader.onload = () => {
        if (reader.result instanceof ArrayBuffer) {
          state.binaryMessagesReceived++;
          this.handleBinaryMessage(reader.result);
        }
      };
      reader.readAsArrayBuffer(event.data);
    }
  },
  
  handleTextMessage(data: string): void {
    try {
      const message = JSON.parse(data);
      
      if (CONFIG.verbose) {
        utils.log(`Received text message: ${JSON.stringify(message)}`);
      }
      
      // Handle pong messages for latency calculation
      if (message.type === 'pong' && message.id) {
        const pingTime = state.pingTimestamps.get(message.id);
        if (pingTime) {
          const latency = Date.now() - pingTime;
          state.latencies.push(latency);
          state.pingTimestamps.delete(message.id);
          
          if (CONFIG.verbose) {
            utils.log(`Received pong: ${message.id}, latency: ${latency}ms`);
          }
        }
      }
    } catch (error) {
      utils.log(`Failed to parse text message: ${error}`, 'error');
    }
  },
  
  handleBinaryMessage(data: ArrayBuffer): void {
    if (CONFIG.verbose) {
      utils.log(`Received binary message: ${utils.formatBytes(data.byteLength)}`);
    }
    
    // Validate binary message format
    binaryProtocol.validateMessageSize(data);
  }
};

// Main diagnostics functions
export async function runDiagnostics(): Promise<void> {
  utils.log('Starting WebSocket diagnostics...');
  state.testStartTime = Date.now();
  state.testRunning = true;
  
  try {
    // Check network connectivity
    const apiConnectivity = await network.testApiConnectivity();
    if (!apiConnectivity) {
      utils.log('API connectivity test failed, but continuing with WebSocket tests', 'warning');
    }
    
    // Connect to WebSocket
    const socket = await wsConnection.connect();
    
    // Run the test for the configured duration
    setTimeout(() => {
      state.testRunning = false;
      if (socket.readyState === WebSocket.OPEN) {
        socket.close();
      }
      
      // Generate diagnostics report
      generateReport();
    }, CONFIG.testDuration);
  } catch (error) {
    utils.log(`Diagnostics failed: ${error}`, 'error');
    state.testRunning = false;
    generateReport();
  }
}

function generateReport(): void {
  utils.log('--- WebSocket Diagnostics Report ---');
  utils.log(`Test duration: ${(Date.now() - state.testStartTime) / 1000} seconds`);
  utils.log(`Connection attempts: ${state.connectionAttempts}`);
  utils.log(`Reconnections: ${state.reconnections}`);
  utils.log(`Errors: ${state.errors}`);
  utils.log(`Total messages received: ${state.messagesReceived}`);
  utils.log(`Text messages received: ${state.textMessagesReceived}`);
  utils.log(`Binary messages received: ${state.binaryMessagesReceived}`);
  
  if (state.latencies.length > 0) {
    const avgLatency = utils.calculateAverage(state.latencies);
    const minLatency = Math.min(...state.latencies);
    const maxLatency = Math.max(...state.latencies);
    
    utils.log(`Latency - Avg: ${avgLatency.toFixed(2)}ms, Min: ${minLatency}ms, Max: ${maxLatency}ms`);
  } else {
    utils.log('No latency measurements available', 'warning');
  }
  
  binaryProtocol.analyzeMessageFrequency();
  
  // Provide recommendations based on diagnostics
  provideRecommendations();
}

function provideRecommendations(): void {
  utils.log('--- Recommendations ---');
  
  if (state.errors > 0) {
    utils.log('⚠️ Connection errors detected. Check network stability and server availability.');
  }
  
  if (state.reconnections > 0) {
    utils.log('⚠️ Multiple reconnections detected. This may indicate network instability or server issues.');
  }
  
  if (state.binaryMessagesReceived === 0) {
    utils.log('⚠️ No binary messages received. Check if the server is sending updates or if the initial request was processed.');
  }
  
  if (state.latencies.length > 0) {
    const avgLatency = utils.calculateAverage(state.latencies);
    if (avgLatency > 200) {
      utils.log('⚠️ High average latency detected. This may affect real-time performance.');
    }
  }
  
  utils.log('✅ Diagnostics complete. Use this information to troubleshoot WebSocket issues.');
}

// Export functions for manual invocation
export const WebSocketDiagnostics = {
  runDiagnostics,
  testApiConnectivity: network.testApiConnectivity,
  checkDnsResolution: network.checkDnsResolution,
  CONFIG
};

// Auto-run diagnostics if in development mode
if (process.env.NODE_ENV === 'development') {
  if (debugState.isWebsocketDebugEnabled()) {
    logger.debug('WebSocket diagnostics tool loaded. Call WebSocketDiagnostics.runDiagnostics() to start diagnostics.');
  }
} 
----
shader-test.js
/**
 * Shader Compatibility Test
 * 
 * This script tests if the modified shaders in UnifiedTextRenderer.ts
 * will compile correctly in both WebGL1 and WebGL2 contexts.
 */

(function() {
  const logger = {
    info: (msg, data) => console.log(`[INFO] ${msg}`, data || ''),
    error: (msg, data) => console.error(`[ERROR] ${msg}`, data || ''),
    success: (msg) => console.log(`[SUCCESS] ${msg}`)
  };

  // Modified vertex shader (WebGL1 compatible)
  const vertexShader = `
    uniform vec3 cameraPosition;
    uniform mat4 modelViewMatrix;
    uniform mat4 projectionMatrix;
    
    attribute vec3 position;
    attribute vec2 uv;
    attribute vec3 instancePosition;
    attribute vec4 instanceColor;
    attribute float instanceScale;
    
    varying vec2 vUv;
    varying vec4 vColor;
    varying float vScale;
    varying float vViewDistance;
    
    void main() {
        vUv = uv;
        vColor = instanceColor;
        vScale = instanceScale;

        // Scale the position first
        vec3 scale = vec3(instanceScale);
        vec3 vertexPosition = position * scale;
        
        // Billboard calculation
        vec3 up = vec3(0.0, 1.0, 0.0);
        vec3 forward = normalize(cameraPosition - instancePosition);
        vec3 right = normalize(cross(up, forward));
        up = normalize(cross(forward, right));
        
        mat4 billboardMatrix = mat4(
            vec4(right, 0.0),
            vec4(up, 0.0),
            vec4(forward, 0.0),
            vec4(0.0, 0.0, 0.0, 1.0)
        );
        
        vertexPosition = (billboardMatrix * vec4(vertexPosition, 1.0)).xyz;
        vertexPosition += instancePosition;
        
        vec4 mvPosition = modelViewMatrix * vec4(vertexPosition, 1.0);
        vViewDistance = -mvPosition.z;  // Distance from camera
        gl_Position = projectionMatrix * mvPosition;
    }
  `;

  // Modified fragment shader (WebGL1 compatible)
  const fragmentShader = `
    precision highp float;
    
    uniform sampler2D fontAtlas;
    uniform float sdfThreshold;
    uniform float sdfSpread;
    uniform vec3 outlineColor;
    uniform float outlineWidth;
    uniform float fadeStart;
    uniform float fadeEnd;
    
    varying vec2 vUv;
    varying vec4 vColor;
    varying float vScale;
    varying float vViewDistance;
    
    float median(float r, float g, float b) {
        return max(min(r, g), min(max(r, g), b));
    }
    
    void main() {
        vec3 sample = texture2D(fontAtlas, vUv).rgb;
        float sigDist = median(sample.r, sample.g, sample.b);
        
        // Dynamic threshold based on distance
        float distanceScale = smoothstep(fadeEnd, fadeStart, vViewDistance);
        float dynamicThreshold = sdfThreshold * (1.0 + (1.0 - distanceScale) * 0.1);
        float dynamicSpread = sdfSpread * (1.0 + (1.0 - distanceScale) * 0.2);
        
        // Improved antialiasing
        float alpha = smoothstep(dynamicThreshold - dynamicSpread, 
                               dynamicThreshold + dynamicSpread, 
                               sigDist);
                               
        float outline = smoothstep(dynamicThreshold - outlineWidth - dynamicSpread,
                                 dynamicThreshold - outlineWidth + dynamicSpread,
                                 sigDist);
        
        // Apply distance-based fade
        alpha *= distanceScale;
        outline *= distanceScale;
        
        vec4 color = mix(vec4(outlineColor, outline), vColor, alpha);
        gl_FragColor = color;
    }
  `;

  function testShaderCompilation() {
    logger.info('Testing shader compilation...');
    
    // Create a canvas for testing
    const canvas = document.createElement('canvas');
    
    // Try WebGL2 first
    let gl = canvas.getContext('webgl2');
    const isWebGL2 = !!gl;
    
    // Fall back to WebGL1 if needed
    if (!gl) {
      gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      if (!gl) {
        logger.error('WebGL not supported in this browser');
        return false;
      }
      logger.info('Using WebGL1 context');
    } else {
      logger.info('Using WebGL2 context');
    }
    
    try {
      // Create vertex shader
      const vs = gl.createShader(gl.VERTEX_SHADER);
      
      // Add a note about the test environment
      logger.info('Note: In a real Three.js environment, modelViewMatrix and projectionMatrix are provided automatically');
      
      gl.shaderSource(vs, vertexShader);
      gl.compileShader(vs);
      
      if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {
        const info = gl.getShaderInfoLog(vs);
        throw new Error(`Vertex shader compilation failed: ${info}`);
      }
      logger.success('Vertex shader compiled successfully');
      
      // Create fragment shader
      const fs = gl.createShader(gl.FRAGMENT_SHADER);
      gl.shaderSource(fs, fragmentShader);
      gl.compileShader(fs);
      
      if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {
        const info = gl.getShaderInfoLog(fs);
        throw new Error(`Fragment shader compilation failed: ${info}`);
      }
      logger.success('Fragment shader compiled successfully');
      
      // Create program
      const program = gl.createProgram();
      gl.attachShader(program, vs);
      gl.attachShader(program, fs);
      gl.linkProgram(program);
      
      // Note: In a real application, we would need to set the uniform values
      // but for compilation testing, we just need to check if the program links
      
      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        const info = gl.getProgramInfoLog(program);
        throw new Error(`Program linking failed: ${info}`);
      }
      logger.success('Shader program linked successfully');
      
      // Clean up
      gl.deleteShader(vs);
      gl.deleteShader(fs);
      gl.deleteProgram(program);
      
      return true;
    } catch (error) {
      logger.error('Shader test failed', error.message);
      return false;
    }
  }
  
  // Run the test
  if (testShaderCompilation()) {
    logger.success('Modified shaders are compatible with this browser\'s WebGL implementation');
  } else {
    logger.error('Modified shaders are NOT compatible with this browser\'s WebGL implementation');
  }
  
  // Export to global scope for console access
  window.testShaders = testShaderCompilation;
  logger.info('You can run the shader test again by calling testShaders() in the console');
})();
----
shader-test.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebGL Shader Compatibility Test</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            line-height: 1.6;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
        }
        .result {
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
            background-color: #f5f5f5;
        }
        .success {
            color: green;
            font-weight: bold;
        }
        .error {
            color: red;
            font-weight: bold;
        }
        pre {
            background-color: #f0f0f0;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
        }
        button {
            padding: 10px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
        }
        button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>WebGL Shader Compatibility Test</h1>
        <p>This page tests if the modified shaders in UnifiedTextRenderer.ts will compile correctly in your browser's WebGL context.</p>
        
        <button id="runTest">Run Shader Test</button>
        
        <div id="result" class="result">
            <p>Click the button above to run the test.</p>
        </div>
        
        <h2>WebGL Information</h2>
        <div id="webglInfo"></div>
        
        <h2>Modified Shaders</h2>
        <h3>Vertex Shader</h3>
        <pre id="vertexShader"></pre>
        
        <h3>Fragment Shader</h3>
        <pre id="fragmentShader"></pre>
    </div>
    
    <script src="shader-test.js"></script>
    <script>
        document.getElementById('runTest').addEventListener('click', function() {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '<p>Running shader test...</p>';
            
            try {
                const success = window.testShaders();
                if (success) {
                    resultDiv.innerHTML = '<p class="success">✅ SUCCESS: Modified shaders are compatible with this browser\'s WebGL implementation.</p>';
                } else {
                    resultDiv.innerHTML = '<p class="error">❌ ERROR: Modified shaders are NOT compatible with this browser\'s WebGL implementation. Check the console for details.</p>';
                }
            } catch (error) {
                resultDiv.innerHTML = `<p class="error">❌ ERROR: Test failed with exception: ${error.message}</p>`;
                console.error(error);
            }
        });
        
        // Display WebGL information
        function displayWebGLInfo() {
            const infoDiv = document.getElementById('webglInfo');
            const canvas = document.createElement('canvas');
            let gl = canvas.getContext('webgl2');
            let version = 2;
            
            if (!gl) {
                gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
                version = 1;
            }
            
            if (!gl) {
                infoDiv.innerHTML = '<p class="error">WebGL is not supported in this browser.</p>';
                return;
            }
            
            const info = {
                version: version,
                vendor: gl.getParameter(gl.VENDOR),
                renderer: gl.getParameter(gl.RENDERER),
                glVersion: gl.getParameter(gl.VERSION),
                shadingLanguageVersion: gl.getParameter(gl.SHADING_LANGUAGE_VERSION)
            };
            
            let html = '<ul>';
            for (const [key, value] of Object.entries(info)) {
                html += `<li><strong>${key}:</strong> ${value}</li>`;
            }
            html += '</ul>';
            
            infoDiv.innerHTML = html;
        }
        
        // Display shader code
        function displayShaderCode() {
            // This function extracts the shader code from shader-test.js
            fetch('shader-test.js')
                .then(response => response.text())
                .then(text => {
                    const vertexMatch = text.match(/const vertexShader = `([\s\S]*?)`/);
                    const fragmentMatch = text.match(/const fragmentShader = `([\s\S]*?)`/);
                    
                    if (vertexMatch && vertexMatch[1]) {
                        document.getElementById('vertexShader').textContent = vertexMatch[1].trim();
                    }
                    
                    if (fragmentMatch && fragmentMatch[1]) {
                        document.getElementById('fragmentShader').textContent = fragmentMatch[1].trim();
                    }
                })
                .catch(error => console.error('Error loading shader code:', error));
        }
        
        // Run on page load
        displayWebGLInfo();
        displayShaderCode();
    </script>
</body>
</html>
----
diagnostics.ts
import { createLogger, createDataMetadata } from './core/logger';
import { WebSocketService } from './websocket/websocketService';
import { graphDataManager } from './state/graphData';
import { platformManager } from './platform/platformManager';
import { HologramShaderMaterial } from './rendering/materials/HologramShaderMaterial';
import { EdgeShaderMaterial } from './rendering/materials/EdgeShaderMaterial';
import { defaultSettings } from './state/defaultSettings';
import { buildWsUrl } from './core/api';

const logger = createLogger('Diagnostics');

export function runDiagnostics() {
  logger.info('Running system diagnostics...');
  
  // Check WebGL support
  checkWebGLSupport();
  
  // Check WebSocket configuration
  checkWebSocketConfig();
  
  // Check shader compatibility
  checkShaderCompatibility();
  
  // Check platform capabilities
  checkPlatformCapabilities();
}

function checkWebGLSupport() {
  logger.info('Checking WebGL support...');
  
  const canvas = document.createElement('canvas');
  const gl = canvas.getContext('webgl2');
  const gl1 = canvas.getContext('webgl');
  
  if (!gl && !gl1) {
    logger.error('WebGL not supported at all');
    return;
  }
  
  if (gl) {
    logger.info('WebGL2 is supported');
    // Check for specific extensions needed by shaders
    const extensions = gl.getSupportedExtensions();
    if (extensions) {
      logger.info('Supported WebGL2 extensions:', createDataMetadata({ extensions }));
    }
  } else {
    logger.warn('WebGL2 not supported, falling back to WebGL1');
    // This could be a problem for shaders using #version 300 es
  }
}

function checkWebSocketConfig() {
  logger.info('Checking WebSocket configuration...');
  
  // Check if WebSocket is supported
  if (!('WebSocket' in window)) {
    logger.error('WebSocket not supported in this browser');
    return;
  }
  
  // Check if WebSocketService is properly initialized
  const wsService = WebSocketService.getInstance();
  
  // Get the WebSocket URL that would be used
  const wsUrl = buildWsUrl();
  logger.info('WebSocket URL:', createDataMetadata({ url: wsUrl }));
  
  // Check connection state
  const connectionState = wsService.getConnectionStatus();
  logger.info('WebSocketService status:', createDataMetadata({ 
    state: connectionState,
    isInitialized: wsService !== null
  }));
  
  // Test WebSocket connectivity
  try {
    // Create a test WebSocket to check if the endpoint is reachable
    const testWs = new WebSocket(wsUrl);
    testWs.onopen = () => {
      logger.info('Test WebSocket connection successful');
      testWs.close();
    };
    testWs.onerror = (error) => {
      logger.error('Test WebSocket connection failed:', createDataMetadata({ error }));
    };
    
    // Set a timeout to close the test connection if it doesn't connect
    setTimeout(() => {
      if (testWs.readyState !== WebSocket.OPEN) {
        logger.warn('Test WebSocket connection timed out');
        testWs.close();
      }
    }, 5000);
  } catch (error) {
    logger.error('Failed to create test WebSocket:', createDataMetadata({ error }));
  }
  
  // Check if GraphDataManager has WebSocketService configured
  const gdm = graphDataManager;
  
  // Try to set the WebSocket service
  try {
    // Create a temporary WebSocket adapter to test connection
    const testWsAdapter = {
      send: (_data: ArrayBuffer) => {
        logger.info('Test WebSocket send called');
      }
    };
    
    gdm.setWebSocketService(testWsAdapter);
    logger.info('Successfully configured WebSocketService in GraphDataManager');
  } catch (error) {
    logger.error('Failed to configure WebSocketService:', createDataMetadata({ error }));
  }
}

function checkShaderCompatibility() {
  logger.info('Checking shader compatibility...');
  
  const canvas = document.createElement('canvas');
  const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');
  
  if (!gl) {
    logger.error('Cannot check shader compatibility - WebGL not available');
    return;
  }
  
  // Check if we're using WebGL2 (required for #version 300 es)
  const isWebGL2 = gl instanceof WebGL2RenderingContext;
  logger.info(`Using WebGL${isWebGL2 ? '2' : '1'}`);
  
  if (!isWebGL2) {
    logger.warn('WebGL2 not available - shaders using #version 300 es will fail');
    logger.info('Recommendation: Update shader code to be compatible with WebGL1');
  }
  
  // Try to create shader materials to check for compilation errors
  try {
    // Test HologramShaderMaterial creation without assigning to unused variable
    if (new HologramShaderMaterial(defaultSettings)) {
      logger.info('HologramShaderMaterial created successfully');
    }
  } catch (error) {
    logger.error('Failed to create HologramShaderMaterial:', createDataMetadata({ error }));
  }
  
  try {
    // Test EdgeShaderMaterial creation without assigning to unused variable
    if (new EdgeShaderMaterial(defaultSettings)) {
      logger.info('EdgeShaderMaterial created successfully');
    }
  } catch (error) {
    logger.error('Failed to create EdgeShaderMaterial:', createDataMetadata({ error }));
  }
}

function checkPlatformCapabilities() {
  logger.info('Checking platform capabilities...');
  
  const capabilities = platformManager.getCapabilities();
  logger.info('Platform capabilities:', createDataMetadata({ capabilities }));
  
  const platform = platformManager.getPlatform();
  logger.info('Detected platform:', createDataMetadata({ platform }));
  
  if (platformManager.isXRSupported()) {
    logger.info('XR is supported on this platform');
  } else {
    logger.warn('XR is not supported on this platform');
  }
}

// Export a function to fix common issues
export function applyFixes() {
  logger.info('Applying fixes for common issues...');
  
  // Fix 1: Configure WebSocket service
  const wsService = WebSocketService.getInstance();
  // Need to adapt the WebSocketService to match the expected interface
  const wsAdapter = {
    send: (data: ArrayBuffer) => {
      wsService.sendMessage({ type: 'binaryData', data });
    }
  };
  
  graphDataManager.setWebSocketService(wsAdapter);
  logger.info('WebSocket service configured for GraphDataManager');
  
  // Fix 2: Check if we need to modify shader version
  const canvas = document.createElement('canvas');
  const gl = canvas.getContext('webgl2');
  
  if (!gl) {
    logger.warn('WebGL2 not available - shaders need to be modified');
    logger.info('Please update shader code in EdgeShaderMaterial.ts and HologramShaderMaterial.ts');
    logger.info('Change "#version 300 es" to be compatible with WebGL1');
  }
}

// Add a function to verify shader materials are properly configured
export function verifyShaderMaterials() {
  logger.info('Verifying shader materials configuration...');
  
  // Check WebGL version
  const canvas = document.createElement('canvas');
  const gl = canvas.getContext('webgl2');
  const isWebGL2 = !!gl;
  
  logger.info(`WebGL2 support: ${isWebGL2 ? 'Yes' : 'No'}`);
  
  // Create test materials
  try {
    // Test material creation without assigning to unused variables
    if (new HologramShaderMaterial(defaultSettings) && 
        new EdgeShaderMaterial(defaultSettings)) {
      logger.info('Shader materials created successfully');
    }
    
    // Check if the renderer is properly set for both materials
    if (isWebGL2) {
      logger.info('Using WebGL2 for shader materials');
    } else {
      logger.warn('Using WebGL1 for shader materials - some advanced effects may be limited');
    }
    
    logger.info('Shader materials verification complete');
  } catch (error) {
    logger.error('Failed to verify shader materials:', createDataMetadata({ error }));
  }
}

// Add a comprehensive WebSocket diagnostic function
export function diagnoseWebSocketIssues() {
  logger.info('Running comprehensive WebSocket diagnostics...');
  
  // 1. Check WebSocket URL construction
  const wsUrl = buildWsUrl();
  logger.info('WebSocket URL:', createDataMetadata({ url: wsUrl }));
  
  // Parse the URL to check components
  try {
    const parsedUrl = new URL(wsUrl);
    logger.info('WebSocket URL components:', createDataMetadata({
      protocol: parsedUrl.protocol,
      host: parsedUrl.host,
      hostname: parsedUrl.hostname,
      port: parsedUrl.port,
      pathname: parsedUrl.pathname,
      search: parsedUrl.search
    }));
    
    // Check if using secure WebSocket
    if (parsedUrl.protocol !== 'wss:' && window.location.protocol === 'https:') {
      logger.warn('Using insecure WebSocket (ws://) with HTTPS site - browsers may block this');
    }
  } catch (error) {
    logger.error('Failed to parse WebSocket URL:', createDataMetadata({ error }));
  }
  
  // 2. Check WebSocketService state
  const wsService = WebSocketService.getInstance();
  const connectionState = wsService.getConnectionStatus();
  
  // Log detailed WebSocketService information
  logger.info('WebSocketService details:', createDataMetadata({ 
    state: connectionState,
    isInitialized: wsService !== null,
    reconnectAttempts: wsService['reconnectAttempts'] || 'unknown',
    maxReconnectAttempts: wsService['_maxReconnectAttempts'] || 'unknown'
  }));
  
  // 3. Test network connectivity
  try {
    // Try to fetch a small resource to check general network connectivity
    fetch('/api/user-settings', { method: 'HEAD' })
      .then(response => {
        logger.info('Network connectivity test successful:', createDataMetadata({ 
          status: response.status,
          ok: response.ok
        }));
      })
      .catch(error => {
        logger.error('Network connectivity test failed:', createDataMetadata({ error }));
      });
  } catch (error) {
    logger.error('Failed to initiate network test:', createDataMetadata({ error }));
  }
  
  // 4. Test WebSocket endpoint
  try {
    logger.info('Testing WebSocket endpoint...');
    const testWs = new WebSocket(wsUrl);
    
    testWs.onopen = () => {
      logger.info('WebSocket connection successful');
      // Send a ping message to test bidirectional communication
      testWs.send(JSON.stringify({ type: 'ping', timestamp: Date.now() }));
      
      // Close after 3 seconds to allow for response
      setTimeout(() => testWs.close(), 3000);
    };
    
    testWs.onmessage = (event) => {
      logger.info('Received WebSocket message:', createDataMetadata({ 
        type: typeof event.data,
        data: typeof event.data === 'string' ? event.data : 'binary data',
        size: typeof event.data === 'string' ? event.data.length : 
              (event.data instanceof ArrayBuffer ? event.data.byteLength : 'unknown')
      }));
    };
    
    testWs.onerror = (error) => {
      logger.error('WebSocket connection error:', createDataMetadata({ error }));
    };
    
    testWs.onclose = (event) => {
      logger.info('WebSocket connection closed:', createDataMetadata({ 
        code: event.code,
        reason: event.reason,
        wasClean: event.wasClean
      }));
    };
    
    // Set a timeout to close the test connection if it doesn't connect
    setTimeout(() => {
      if (testWs.readyState !== WebSocket.OPEN) {
        logger.warn('WebSocket connection timed out');
        testWs.close();
      }
    }, 5000);
  } catch (error) {
    logger.error('Failed to create test WebSocket:', createDataMetadata({ error }));
  }
  
  // 5. Check GraphDataManager configuration
  try {
    const gdm = graphDataManager;
    // Create a test message to see if it's properly configured
    // Using a comment instead of creating an unused variable
    // A typical node update is 28 bytes per node
    const testAdapter = {
      send: (data: ArrayBuffer) => {
        logger.info('GraphDataManager WebSocket send test:', createDataMetadata({ 
          byteLength: data.byteLength
        }));
        return true;
      }
    };
    
    gdm.setWebSocketService(testAdapter);
    logger.info('GraphDataManager WebSocket configuration test successful');
  } catch (error) {
    logger.error('GraphDataManager WebSocket configuration test failed:', createDataMetadata({ error }));
  }
  
  // 6. Check if WebSocketService can be used directly
  try {
    // Check if the connection state is CONNECTED
    if (connectionState === 'connected') {
      logger.info('WebSocketService is currently connected');
    } else {
      logger.warn(`WebSocketService is not connected (state: ${connectionState})`);
      
      // Try to connect if not already connecting or reconnecting
      if (connectionState === 'disconnected') {
        logger.info('Attempting to connect WebSocketService...');
        wsService.connect().catch(error => {
          logger.error('Failed to connect WebSocketService:', createDataMetadata({ error }));
        });
      }
    }
  } catch (error) {
    logger.error('Error checking WebSocketService connection:', createDataMetadata({ error }));
  }
  
  logger.info('WebSocket diagnostics complete');
} 
----
index.ts
import { Settings } from './types/settings';
import { NodeManagerFacade } from './rendering/node/NodeManagerFacade';
import { EdgeManager } from './rendering/EdgeManager';
import { HologramManager } from './visualization/HologramManager';
import { TextRenderer } from './rendering/textRenderer';
import { WebSocketService } from './websocket/websocketService';
import { SettingsStore } from './state/SettingsStore';
import { LoggerConfig, createLogger, createErrorMetadata, createDataMetadata } from './core/logger';
import { platformManager } from './platform/platformManager';

import { XRSessionManager } from './xr/xrSessionManager';
import { XRInitializer } from './xr/xrInitializer';
import { SceneManager } from './rendering/scene';
import { graphDataManager } from './state/graphData';
import { debugState } from './core/debugState';
import { ModularControlPanel } from './ui/ModularControlPanel';
import { defaultSettings } from './state/defaultSettings';
import { MaterialFactory } from './rendering/factories/MaterialFactory';
import './ui'; // Import UI initialization

import { Vector3 } from 'three';
const logger = createLogger('GraphVisualization');

export function checkWebGLSupport(): boolean {
    const canvas = document.createElement('canvas');
    const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');
    
    if (!gl) {
        logger.error('WebGL not supported');
        return false;
    }
    
    return true;
}

/**
 * Helper to validate and sanitize Vector3 positions
 * Returns true if fixed, false if already valid
 */
function validateAndFixVector3(vec: Vector3): boolean {
    if (isNaN(vec.x) || isNaN(vec.y) || isNaN(vec.z) || !isFinite(vec.x) || !isFinite(vec.y) || !isFinite(vec.z)) {
        vec.set(isNaN(vec.x) || !isFinite(vec.x) ? 0 : vec.x, isNaN(vec.y) || !isFinite(vec.y) ? 0 : vec.y, isNaN(vec.z) || !isFinite(vec.z) ? 0 : vec.z);
        return true;
    }
    return false;
}

export class GraphVisualization {
    private sceneManager: SceneManager;
    private nodeManager: NodeManagerFacade;
    private edgeManager: EdgeManager;
    private hologramManager: HologramManager;
    private textRenderer: TextRenderer;
    private websocketService!: WebSocketService;
    private initialized: boolean = false;
    private websocketInitialized: boolean = false;
    private componentsReady: boolean = false;
    private loadingTimeout: number | null = null;

    // Start a timeout to detect endless loading states
    private startLoadingTimeout(): void {
        if (this.loadingTimeout) {
            window.clearTimeout(this.loadingTimeout);
        }
        this.loadingTimeout = window.setTimeout(() => {
            logger.error('Loading timeout: Initial graph data loading took too long');
            // Try to make the app usable even with timeout
            document.getElementById('loading-message')?.remove();
        }, 30000); // 30 second timeout
    }
    
    private clearLoadingTimeout(): void {
        if (this.loadingTimeout) {
            window.clearTimeout(this.loadingTimeout);
            this.loadingTimeout = null;
        }
    }

    public async initializeWebSocket(): Promise<void> {
        if (!this.componentsReady) {
            if (debugState.isEnabled()) {
                logger.warn('Attempting to initialize WebSocket before components are ready');
            }
            return;
        }
        
        // Prevent duplicate WebSocket initialization
        if (this.websocketInitialized) {
            if (debugState.isEnabled()) {
                logger.warn('WebSocket already initialized, skipping duplicate initialization');
            }
            return;
        }

        if (debugState.isDataDebugEnabled()) {
            logger.debug('Loading initial graph data via REST');
        }
        
        // Set a timeout for the initial data loading to avoid hanging in the loading state
        const LOADING_TIMEOUT = 30000; // 30 seconds
        if (this.loadingTimeout) {
            window.clearTimeout(this.loadingTimeout);
        }
        
        this.loadingTimeout = window.setTimeout(() => {
            logger.error('Timeout while loading initial graph data. The server may be unresponsive.');
            document.getElementById('loading-message')?.setAttribute('data-error', 'true');
            const loadingEl = document.getElementById('loading-message');
            if (loadingEl) {
                loadingEl.textContent = 'Error: Timeout while loading graph data. Please refresh the page to try again.';
                loadingEl.classList.add('error');
            }
        }, LOADING_TIMEOUT);
        
        // Start loading timeout
        this.startLoadingTimeout();
        
        try {
            // First load graph data via REST
            await graphDataManager.fetchInitialData();
            const graphData = graphDataManager.getGraphData();
            
            // Clear the loading timeout since we have data
            this.clearLoadingTimeout();
            
            // Check for empty or invalid graph data
            if (!graphData || !graphData.nodes || graphData.nodes.length === 0) {
                logger.error('Initial graph data is empty or invalid', createDataMetadata({ 
                    hasGraphData: !!graphData,
                    hasNodes: !!(graphData && graphData.nodes),
                    nodeCount: graphData?.nodes?.length || 0
                }));
            }
            
            // Clear the loading timeout since data was loaded successfully
            if (this.loadingTimeout) {
                window.clearTimeout(this.loadingTimeout);
                this.loadingTimeout = null;
            }
            
            // Validate the received data
            if (!graphData || !graphData.nodes || graphData.nodes.length === 0) {
                logger.error('Initial graph data is empty or invalid', createDataMetadata(graphData));
                throw new Error('Initial graph data is empty or invalid');
            }
            
            // Update visualization with initial data
            this.nodeManager.updateNodes(graphData.nodes);
            this.edgeManager.updateEdges(graphData.edges);
            
            if (debugState.isDataDebugEnabled()) {
                logger.debug('Initial graph data loaded via REST', {
                    nodes: graphData.nodes.length,
                    edges: graphData.edges.length
                });
            }

            // Now initialize WebSocket for binary updates
            this.websocketService = WebSocketService.getInstance();
            
            // Create an adapter that implements the InternalWebSocketService interface
            // expected by GraphDataManager
            const webSocketAdapter = {
                send: (data: ArrayBuffer) => {
                    if (debugState.isDataDebugEnabled()) {
                        logger.debug('Sending binary data via WebSocket adapter');
                    }
                    // Use WebSocketService's binary message handling capability
                    // The WebSocketService handles compression internally
                    this.websocketService.sendNodeUpdates([]);
                    
                    // Send the raw binary data - this may be needed for certain types of updates
                    const success = this.websocketService.sendRawBinaryData(data);
                    if (!success) {
                        logger.error('Failed to send binary data via WebSocket adapter: WebSocket may not be connected');
                    }
                }
            };
            
            // Register the adapter with GraphDataManager
            graphDataManager.setWebSocketService(webSocketAdapter);
            
            // Set up binary message handler
            this.websocketService.onBinaryMessage((nodes) => {
                if (this.initialized && this.componentsReady) {
                    if (debugState.isDataDebugEnabled()) {
                        logger.debug('Received binary node update', { nodeCount: nodes.length });
                    }
                    
                    // Check each node for NaN values and fix if needed
                    nodes.forEach(node => {
                        if (validateAndFixVector3(node.position)) {
                            logger.warn(`Fixed invalid position for node ${node.id}`);
                        }
                        if (node.velocity && validateAndFixVector3(node.velocity)) {
                            logger.warn(`Fixed invalid velocity for node ${node.id}`);
                        }
                    });
                    this.nodeManager.updateNodePositions(nodes.map(node => ({
                        id: node.id.toString(),
                        data: {
                            position: node.position,
                            velocity: node.velocity
                        }
                    })));
                }
            });
            
            // Set up connection status handler
            this.websocketService.onConnectionStatusChange((connected) => {
                if (debugState.isEnabled()) {
                    logger.info(`WebSocket connection status changed: ${connected}`);
                }
                if (connected && this.componentsReady) {
                    // Enable binary updates in GraphDataManager
                    graphDataManager.setBinaryUpdatesEnabled(true);
                    if (debugState.isDataDebugEnabled()) {
                        logger.debug('Binary updates enabled');
                    }
                }
            });
            
            // Mark as initialized before connecting WebSocket
            this.initialized = true;
            this.websocketInitialized = true;
            
            // Finally connect WebSocket
            await this.websocketService.connect();
            
            /**
             * At this point, we need to manually notify other components that the WebSocket is ready.
             * The GraphDataManager tries to configure itself with WebSocketService but 
             * they use different interfaces, which is causing the "WebSocket service not configured" error.
             * 
             * Instead of trying to bridge them directly (which would require modifying interfaces),
             * we're enabling binary updates on GraphDataManager after the WebSocket is connected, and
             * the components will communicate through their existing API methods:
             * 
             * - GraphDataManager.setBinaryUpdatesEnabled(true) -> enables updates
             * - WebSocketService.sendNodeUpdates() -> handles outgoing node updates
             * - WebSocketService.onBinaryMessage() -> processes incoming binary data (already set up above)
             */
            try {
                // Enable binary updates now that WebSocket is connected
                logger.info('Binary updates enabled for GraphDataManager with WebSocket adapter');
            } catch (error) {
                logger.error('Error enabling binary updates:', createErrorMetadata(error));
            }
            
            if (debugState.isDataDebugEnabled()) {
                logger.debug('WebSocket connected and ready for binary updates');
            }
        } catch (error) {
            logger.error('Failed to initialize data and WebSocket:', createErrorMetadata(error));
            
            // Clear the loading timeout
            if (this.loadingTimeout) {
                window.clearTimeout(this.loadingTimeout);
                this.loadingTimeout = null;
            }
            
            // Show error to user
            this.showLoadingError('Failed to load graph data. Please check your connection and try again.');
            throw error;
        }
    }

    constructor(settings: Settings) {
        if (debugState.isDataDebugEnabled()) {
            logger.debug('Initializing GraphVisualization');
        }
        
        // Get existing canvas element
        const canvas = document.getElementById('main-canvas') as HTMLCanvasElement;
        if (!canvas) {
            throw new Error('Could not find #main-canvas element');
        }
        
        // Initialize SceneManager
        this.sceneManager = SceneManager.getInstance(canvas);
        
        // Initialize managers with SceneManager's scene and renderer
        const scene = this.sceneManager.getScene();
        const camera = this.sceneManager.getCamera();
        const renderer = this.sceneManager.getRenderer();
        const materialFactory = MaterialFactory.getInstance();
        
        this.nodeManager = NodeManagerFacade.getInstance(
            scene,
            camera,
            materialFactory.getNodeMaterial(settings)
        );
        this.edgeManager = new EdgeManager(scene, settings, this.nodeManager.getNodeInstanceManager());
        this.hologramManager = new HologramManager(scene, renderer, settings);
        this.textRenderer = new TextRenderer(camera, scene);
        
        // Apply initial settings to all components but don't connect websocket yet
        this.handleSettingsUpdate(settings);
        
        // Start rendering
        this.sceneManager.start();
        this.componentsReady = true;
        if (debugState.isDataDebugEnabled()) {
            logger.debug('GraphVisualization initialization complete');
        }
    }

    public handleSettingsUpdate(settings: Settings) {
        if (!this.componentsReady) {
            if (debugState.isEnabled()) {
                logger.warn('Attempting to update settings before components are ready');
            }
            return;
        }

        if (debugState.isDataDebugEnabled()) {
            logger.debug('Handling settings update');
        }
        this.nodeManager.handleSettingsUpdate(settings);
        this.edgeManager.handleSettingsUpdate(settings);
        this.hologramManager.updateSettings(settings);
        this.textRenderer.handleSettingsUpdate(settings.visualization.labels);
        this.sceneManager.handleSettingsUpdate(settings);
    }

    private showLoadingError(message: string): void {
        const loadingEl = document.getElementById('loading-message');
        if (loadingEl) {
            loadingEl.textContent = `Error: ${message}`;
            loadingEl.classList.add('error');
        } else {
            // Create error message if loading element doesn't exist
            logger.error('Loading error:', createDataMetadata({ message }));
        }
    }

    public dispose() {
        if (debugState.isDataDebugEnabled()) {
            logger.debug('Disposing GraphVisualization');
        }
        this.nodeManager.dispose();
        this.edgeManager.dispose();
        this.hologramManager.dispose();
        this.textRenderer.dispose();
        if (this.websocketService) {
            this.websocketService.close();
        }
        
        // Clean up XR components
        if ((window as any).xrInitializer) {
            (window as any).xrInitializer.dispose();
            delete (window as any).xrInitializer;
        }
        
        SceneManager.cleanup();
        // Clear any pending timeouts
        if (this.loadingTimeout) {
            window.clearTimeout(this.loadingTimeout);
            this.loadingTimeout = null;
        }
        this.initialized = false;
        this.componentsReady = false;
        if (debugState.isDataDebugEnabled()) {
            logger.debug('GraphVisualization disposed');
        }
    }
}

// Initialize settings and logging
async function init() {
    if (debugState.isEnabled()) {
        logger.info('Starting application initialization...');
    }
    
    try {
        // Initialize platform detection first
        await platformManager.initialize(defaultSettings);
        
        // Initialize ModularControlPanel first and wait for settings to be ready
        const controlPanel = ModularControlPanel.getInstance();
        const settingsStore = SettingsStore.getInstance();
        
        // Wait for both control panel and settings store to be ready
        await Promise.all([
            new Promise<void>((resolve) => {
                if (controlPanel.isReady()) {
                    resolve();
                } else {
                    controlPanel.on('settings:ready', () => resolve());
                }
            }),
            settingsStore.initialize()
        ]);
        
        // Get settings after everything is initialized
        const settings = settingsStore.get('') as Settings || defaultSettings;

        // Configure logging based on settings
        const debugEnabled = settingsStore.get('system.debug.enabled') as boolean;
        const logFullJson = settingsStore.get('system.debug.log_full_json') as boolean;
        LoggerConfig.setGlobalDebug(debugEnabled);
        LoggerConfig.setFullJson(logFullJson);
        
        // Subscribe to debug setting changes
        settingsStore.subscribe('system.debug.enabled', (_, value) => {
            LoggerConfig.setGlobalDebug(value as boolean);
        });
        settingsStore.subscribe('system.debug.log_full_json', (_, value) => {
            LoggerConfig.setFullJson(value as boolean);
        });

        // Create XR button if it doesn't exist
        if (!document.getElementById('xr-button')) {
            const xrButton = document.createElement('button');
            xrButton.id = 'xr-button';
            xrButton.className = 'hidden';
            document.body.appendChild(xrButton);
        }

        // Get canvas and scene manager for XR setup
        const canvas = document.getElementById('main-canvas') as HTMLCanvasElement;
        if (!canvas) {
            throw new Error('Could not find #main-canvas element');
        }
        const sceneManager = SceneManager.getInstance(canvas);

        // Initialize XR components
        const xrSessionManager = XRSessionManager.getInstance(sceneManager);
        (window as any).xrInitializer = XRInitializer.getInstance(xrSessionManager);

        // Initialize main visualization and store globally
        const viz = new GraphVisualization(settings);
        (window as any).visualization = viz;
        
        // Initialize WebSocket after visualization is created and ready
        await viz.initializeWebSocket();

        // Subscribe to all relevant visualization paths
        const visualizationPaths = [
            'visualization.nodes',
            'visualization.edges',
            'visualization.physics',
            'visualization.rendering',
            'visualization.animations',
            'visualization.labels',
            'visualization.bloom',
            'visualization.hologram'
        ];

        // Subscribe to each path and update both visualization and scene
        let pendingUpdate = false;
        let pendingSettings: Settings | null = null;

        const handleSettingsChange = () => {
            if (!viz || !pendingSettings) return;
            
            try {
                // Use the pending settings and clear it
                const currentSettings = pendingSettings;
                pendingSettings = null;
                pendingUpdate = false;

                if (!currentSettings) {
                    return;
                }
                
                // Batch updates to avoid cascading changes
                viz.handleSettingsUpdate(currentSettings);
                sceneManager.handleSettingsUpdate(currentSettings);
                
                if (debugState.isEnabled()) {
                    logger.debug('Settings updated:', {
                        bloom: currentSettings.visualization.bloom,
                        rendering: currentSettings.visualization.rendering
                    });
                }
            } catch (error) {
                logger.error('Error handling settings update:', createErrorMetadata(error));
            }
        };

        // Use a single subscription for all visualization paths
        visualizationPaths.forEach(path => {
            settingsStore.subscribe(path, () => {
                if (!pendingUpdate) {
                    pendingUpdate = true;
                    pendingSettings = settingsStore.get('') as Settings;
                    window.requestAnimationFrame(handleSettingsChange);
                }
            }, false); // Don't trigger immediate update on subscription
        });

        // Log successful initialization
        if (debugState.isEnabled()) {
            logger.info('Application components initialized successfully', {
                platformType: platformManager.getPlatform(),
                xrSupported: platformManager.isXRSupported(),
                isQuest: platformManager.isQuest()
            });
            
            logger.info('Application initialized successfully');
        }
    } catch (error) {
        logger.error('Failed to initialize application components:', createErrorMetadata(error));
        throw error;
    }
}

// Start the application
init().catch(error => {
    console.error('Failed to initialize application:', error);
});

----
websocket-test.ts
/**
 * WebSocket Connection Test Script
 * 
 * This script can be run in the browser console to diagnose WebSocket connection issues.
 * It tests the WebSocket connection to the server and logs detailed information about
 * the connection process, including any errors that occur.
 * 
 * Usage:
 * 1. Open the browser console (F12 or Ctrl+Shift+I)
 * 2. Copy and paste this entire script into the console
 * 3. Press Enter to run the test
 * 4. Check the console for detailed logs about the WebSocket connection
 */

import { debugState } from './core/debugState';
import { logger, createDataMetadata } from './core/logger';

// Configuration
const TEST_TIMEOUT_MS = 10000; // 10 seconds
const PING_INTERVAL_MS = 2000; // 2 seconds
const CONNECTION_ATTEMPTS = 3;  // Number of connection attempts

// Utility functions
function log(message: string, data?: any) {
  if (debugState.isWebsocketDebugEnabled()) {
    if (data) {
      logger.debug(`[WebsocketTest] ${message}`, createDataMetadata(data));
    } else {
      logger.debug(`[WebsocketTest] ${message}`);
    }
  }
}

function error(message: string, err?: any) {
  // Error logs are always shown regardless of debug state
  const timestamp = new Date().toISOString();
  if (err) {
    console.error(`[${timestamp}] ${message}`, err);
  } else {
    console.error(`[${timestamp}] ${message}`);
  }
}

function warn(message: string, data?: any) {
  // Warning logs are always shown regardless of debug state
  const timestamp = new Date().toISOString();
  if (data) {
    console.warn(`[${timestamp}] ${message}`, data);
  } else {
    console.warn(`[${timestamp}] ${message}`);
  }
}

// Build WebSocket URL using the same logic as the application
function buildWsUrl(): string {
  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
  const host = window.location.hostname;
  // Check if we're in production (any visionflow.info domain)
  const isProduction = host.endsWith('visionflow.info');
  const port = isProduction ? '' : ':4000';
  const base = `${protocol}//${host}${port}`;
  const wsPath = '/wss';
  return `${base}${wsPath}`;
}

// Test network connectivity to the API
async function testApiConnectivity() {
  log('Testing API connectivity...');
  try {
    const response = await fetch('/api/user-settings', { 
      method: 'HEAD',
      cache: 'no-cache'
    });
    log('API connectivity test result:', {
      status: response.status,
      ok: response.ok,
      statusText: response.statusText
    });
    return response.ok;
  } catch (err) {
    error('API connectivity test failed', err);
    return false;
  }
}

// Test WebSocket connection
function testWebSocketConnection(url: string): Promise<boolean> {
  return new Promise((resolve) => {
    log(`Testing WebSocket connection to ${url}...`);
    
    let pingInterval: number | null = null;
    let connectionTimeout: number | null = null;
    
    const ws = new WebSocket(url);
    
    // Set binary type to arraybuffer (same as the application)
    ws.binaryType = 'arraybuffer';
    
    // Set connection timeout
    connectionTimeout = window.setTimeout(() => {
      error('WebSocket connection timed out');
      if (pingInterval) clearInterval(pingInterval);
      ws.close();
      resolve(false);
    }, TEST_TIMEOUT_MS);
    
    ws.onopen = () => {
      log('WebSocket connection established successfully');
      
      // Clear connection timeout
      if (connectionTimeout) {
        clearTimeout(connectionTimeout);
        connectionTimeout = null;
      }
      
      // Send a ping message
      const pingMessage = JSON.stringify({
        type: 'ping',
        timestamp: Date.now()
      });
      ws.send(pingMessage);
      log('Sent ping message');
      
      // Set up ping interval
      pingInterval = window.setInterval(() => {
        if (ws.readyState === WebSocket.OPEN) {
          const pingMessage = JSON.stringify({
            type: 'ping',
            timestamp: Date.now()
          });
          ws.send(pingMessage);
          log('Sent ping message');
        }
      }, PING_INTERVAL_MS);
      
      // Send requestInitialData message (same as the application)
      const requestMessage = JSON.stringify({
        type: 'requestInitialData'
      });
      ws.send(requestMessage);
      log('Sent requestInitialData message');
      
      // Resolve after 5 seconds of successful connection
      setTimeout(() => {
        if (pingInterval) clearInterval(pingInterval);
        ws.close();
        resolve(true);
      }, 5000);
    };
    
    ws.onmessage = (event) => {
      if (typeof event.data === 'string') {
        try {
          const message = JSON.parse(event.data);
          log('Received message:', message);
        } catch (err) {
          warn('Received non-JSON string message:', event.data);
        }
      } else if (event.data instanceof ArrayBuffer) {
        const buffer = event.data;
        log('Received binary message', {
          byteLength: buffer.byteLength,
          isMultipleOf28: buffer.byteLength % 28 === 0
        });
        
        // Try to decompress using pako if available
        if (window.pako) {
          try {
            const decompressed = window.pako.inflate(new Uint8Array(buffer));
            log('Decompressed binary message', {
              originalSize: buffer.byteLength,
              decompressedSize: decompressed.byteLength,
              isMultipleOf28: decompressed.byteLength % 28 === 0
            });
          } catch (err) {
            // Not compressed or invalid data
            log('Binary message is not compressed or invalid');
          }
        }
      }
    };
    
    ws.onerror = (event) => {
      error('WebSocket error occurred', event);
    };
    
    ws.onclose = (event) => {
      if (connectionTimeout) {
        clearTimeout(connectionTimeout);
        connectionTimeout = null;
      }
      
      if (pingInterval) {
        clearInterval(pingInterval);
        pingInterval = null;
      }
      
      log('WebSocket connection closed', {
        code: event.code,
        reason: event.reason,
        wasClean: event.wasClean
      });
      
      // If not already resolved
      if (connectionTimeout !== null) {
        resolve(false);
      }
    };
  });
}

// Run all tests
async function runTests() {
  log('Starting WebSocket connection tests');
  log('Browser information:', {
    userAgent: navigator.userAgent,
    platform: navigator.platform,
    vendor: navigator.vendor
  });
  
  log('Page URL:', window.location.href);
  
  // Test API connectivity first
  const apiConnectivity = await testApiConnectivity();
  if (!apiConnectivity) {
    error('API connectivity test failed. WebSocket connection is unlikely to succeed.');
  }
  
  // Build WebSocket URL
  const wsUrl = buildWsUrl();
  log('WebSocket URL:', wsUrl);
  
  // Parse URL to check components
  try {
    const parsedUrl = new URL(wsUrl);
    log('WebSocket URL components:', {
      protocol: parsedUrl.protocol,
      host: parsedUrl.host,
      hostname: parsedUrl.hostname,
      port: parsedUrl.port,
      pathname: parsedUrl.pathname,
      search: parsedUrl.search
    });
    
    // Check if using secure WebSocket
    if (parsedUrl.protocol !== 'wss:' && window.location.protocol === 'https:') {
      warn('Using insecure WebSocket (ws://) with HTTPS site - browsers may block this');
    }
  } catch (err) {
    error('Failed to parse WebSocket URL', err);
  }
  
  // Test WebSocket connection multiple times
  let successCount = 0;
  for (let i = 0; i < CONNECTION_ATTEMPTS; i++) {
    log(`Connection attempt ${i + 1} of ${CONNECTION_ATTEMPTS}`);
    const success = await testWebSocketConnection(wsUrl);
    if (success) {
      successCount++;
    }
    
    // Wait between attempts
    if (i < CONNECTION_ATTEMPTS - 1) {
      log('Waiting 2 seconds before next attempt...');
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  // Report results
  log(`WebSocket test complete. ${successCount} of ${CONNECTION_ATTEMPTS} connection attempts succeeded.`);
  
  if (successCount === 0) {
    error('All WebSocket connection attempts failed. Please check your network configuration and server status.');
  } else if (successCount < CONNECTION_ATTEMPTS) {
    warn(`${CONNECTION_ATTEMPTS - successCount} of ${CONNECTION_ATTEMPTS} connection attempts failed. Connection may be unstable.`);
  } else {
    log('All WebSocket connection attempts succeeded. Connection is stable.');
  }
}

// Start the tests
runTests().catch(err => {
  error('Unhandled error during tests', err);
});

// Export for use in console
(window as any).testWebSocket = {
  runTests,
  testApiConnectivity,
  testWebSocketConnection,
  buildWsUrl
};

// Log completion message
log('WebSocket test script loaded. Tests are running automatically.');
log('You can also run tests manually using: testWebSocket.runTests()'); 
----
websocket-diagnostics-browser.js
/**
 * WebSocket Diagnostics Tool (Browser Version)
 * 
 * This is a standalone browser version of the WebSocket diagnostics tool
 * that can be loaded directly in the browser console.
 * 
 * Usage:
 * 1. Copy this entire file
 * 2. Paste it into the browser console
 * 3. Call `WebSocketDiagnostics.runDiagnostics()` to start the diagnostics
 */

(function() {
  // Configuration
  const CONFIG = {
    // Timeouts and intervals (in milliseconds)
    connectionTimeout: 10000,
    pingInterval: 2000,
    reconnectDelay: 3000,
    testDuration: 30000,
    
    // Test parameters
    connectionAttempts: 3,
    binaryValidationSamples: 5,
    
    // Expected binary protocol values
    expectedBytesPerNode: 28,
    expectedHeaderSize: 8,
    
    // Logging
    verbose: true,
    logTimestamps: true
  };

  // Diagnostic state
  const state = {
    connectionAttempts: 0,
    messagesReceived: 0,
    binaryMessagesReceived: 0,
    textMessagesReceived: 0,
    reconnections: 0,
    errors: 0,
    binarySizes: [],
    latencies: [],
    pingTimestamps: new Map(),
    testStartTime: 0,
    socket: null,
    testRunning: false
  };

  // Utility functions
  const utils = {
    timestamp() {
      return CONFIG.logTimestamps 
        ? `[${new Date().toISOString()}] `
        : '';
    },
    
    log(message, type = 'info') {
      const prefix = utils.timestamp();
      
      switch (type) {
        case 'error':
          console.error(`${prefix}❌ ${message}`);
          break;
        case 'warning':
          console.warn(`${prefix}⚠️ ${message}`);
          break;
        case 'success':
          console.log(`${prefix}✅ ${message}`);
          break;
        default:
          console.log(`${prefix}ℹ️ ${message}`);
      }
    },
    
    formatBytes(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    },
    
    calculateAverage(arr) {
      if (arr.length === 0) return 0;
      return arr.reduce((a, b) => a + b, 0) / arr.length;
    },
    
    generateRandomId() {
      return Math.random().toString(36).substring(2, 15);
    },
    
    isCompressed(data) {
      // Check for zlib header (78 01, 78 9C, or 78 DA)
      const header = new Uint8Array(data, 0, 2);
      return header[0] === 0x78 && (header[1] === 0x01 || header[1] === 0x9C || header[1] === 0xDA);
    },
    
    buildWsUrl() {
      const location = window.location;
      const protocol = location.protocol === 'https:' ? 'wss:' : 'ws:';
      const host = location.hostname;
      const port = location.port ? `:${location.port}` : '';
      
      // In production, WebSocket is served at /wss
      // In development, it's typically at localhost:4000/wss
      const wsPath = '/wss';
      
      return `${protocol}//${host}${port}${wsPath}`;
    }
  };

  // Network diagnostics
  const network = {
    async testApiConnectivity() {
      try {
        utils.log('Testing API connectivity...');
        const response = await fetch('/api/user-settings', { method: 'HEAD' });
        if (response.ok) {
          utils.log('API connectivity test passed', 'success');
          return true;
        } else {
          utils.log(`API connectivity test failed: ${response.status} ${response.statusText}`, 'error');
          return false;
        }
      } catch (error) {
        utils.log(`API connectivity test failed: ${error}`, 'error');
        return false;
      }
    },
    
    async checkDnsResolution() {
      try {
        utils.log('Checking DNS resolution...');
        const hostname = window.location.hostname;
        const response = await fetch(`https://${hostname}/favicon.ico`, { method: 'HEAD' });
        if (response.ok) {
          utils.log(`DNS resolution successful: ${response.status}`, 'success');
        } else {
          utils.log(`DNS resolution returned status: ${response.status}`, 'warning');
        }
        return response.ok;
      } catch (error) {
        utils.log(`DNS resolution failed: ${error}`, 'error');
        return false;
      }
    }
  };

  // Binary protocol validation
  const binaryProtocol = {
    validateMessageSize(data) {
      const size = data.byteLength;
      state.binarySizes.push(size);
      
      // Check if the message is compressed
      if (utils.isCompressed(data)) {
        utils.log(`Received compressed binary message: ${utils.formatBytes(size)}`);
        try {
          // Decompress the message if pako is available
          if (window.pako) {
            const compressedData = new Uint8Array(data);
            const decompressedData = window.pako.inflate(compressedData);
            return this.validateDecompressedMessage(decompressedData.buffer);
          } else {
            utils.log('Pako library not available for decompression. Install pako or include it in your page to analyze compressed messages.', 'warning');
            return false;
          }
        } catch (error) {
          utils.log(`Failed to decompress message: ${error}`, 'error');
          return false;
        }
      } else {
        return this.validateDecompressedMessage(data);
      }
    },
    
    validateDecompressedMessage(data) {
      const size = data.byteLength;
      const headerSize = CONFIG.expectedHeaderSize;
      const bytesPerNode = CONFIG.expectedBytesPerNode;
      
      // Check if the message size (minus header) is divisible by the expected bytes per node
      const dataSize = size - headerSize;
      const remainder = dataSize % bytesPerNode;
      
      if (remainder !== 0) {
        utils.log(`Binary message size validation failed: message size (${size} bytes) minus header (${headerSize} bytes) = ${dataSize} bytes, which is not divisible by ${bytesPerNode} bytes per node. Remainder: ${remainder} bytes`, 'error');
        return false;
      }
      
      const nodeCount = dataSize / bytesPerNode;
      utils.log(`Binary message contains data for ${nodeCount} nodes (${utils.formatBytes(size)})`, 'info');
      
      // Read the header to get the actual node count
      const view = new DataView(data);
      const messageType = view.getUint32(0, true);
      const reportedNodeCount = view.getUint32(4, true);
      
      utils.log(`Message type: ${messageType}, reported node count: ${reportedNodeCount}`, 'info');
      
      if (nodeCount !== reportedNodeCount) {
        utils.log(`Node count mismatch: header reports ${reportedNodeCount} nodes, but message contains data for ${nodeCount} nodes`, 'error');
        return false;
      }
      
      utils.log(`Binary message validation passed: ${reportedNodeCount} nodes, ${utils.formatBytes(size)}`, 'success');
      return true;
    },
    
    analyzeMessageFrequency() {
      if (state.binaryMessagesReceived === 0) {
        utils.log('No binary messages received during the test period', 'warning');
        return;
      }
      
      const avgSize = utils.calculateAverage(state.binarySizes);
      const messagesPerSecond = state.binaryMessagesReceived / (CONFIG.testDuration / 1000);
      
      utils.log(`Binary message frequency: ${messagesPerSecond.toFixed(2)} messages/second`);
      utils.log(`Average binary message size: ${utils.formatBytes(avgSize)}`);
    }
  };

  // WebSocket connection handling
  const wsConnection = {
    connect() {
      return new Promise((resolve, reject) => {
        state.connectionAttempts++;
        
        const url = utils.buildWsUrl();
        utils.log(`Connecting to WebSocket: ${url} (Attempt ${state.connectionAttempts}/${CONFIG.connectionAttempts})`);
        
        const socket = new WebSocket(url);
        state.socket = socket;
        
        // Set up connection timeout
        const timeoutId = setTimeout(() => {
          if (socket.readyState !== WebSocket.OPEN) {
            utils.log('WebSocket connection timeout', 'error');
            socket.close();
            reject(new Error('Connection timeout'));
          }
        }, CONFIG.connectionTimeout);
        
        socket.onopen = () => {
          clearTimeout(timeoutId);
          utils.log('WebSocket connection established', 'success');
          
          // Send initial message to request data
          this.sendInitialRequest(socket);
          
          // Start ping test
          this.startPingTest(socket);
          
          resolve(socket);
        };
        
        socket.onerror = (error) => {
          clearTimeout(timeoutId);
          state.errors++;
          utils.log(`WebSocket error: ${error}`, 'error');
          reject(error);
        };
        
        socket.onclose = (event) => {
          clearTimeout(timeoutId);
          utils.log(`WebSocket connection closed: Code ${event.code}, Reason: ${event.reason || 'No reason provided'}`);
          
          if (state.testRunning && state.connectionAttempts < CONFIG.connectionAttempts) {
            utils.log(`Attempting to reconnect in ${CONFIG.reconnectDelay}ms...`);
            state.reconnections++;
            
            setTimeout(() => {
              this.connect().catch(error => {
                utils.log(`Reconnection failed: ${error}`, 'error');
              });
            }, CONFIG.reconnectDelay);
          }
        };
        
        socket.onmessage = (event) => {
          this.handleMessage(event);
        };
      });
    },
    
    sendInitialRequest(socket) {
      if (socket.readyState === WebSocket.OPEN) {
        const initialRequest = JSON.stringify({ type: 'requestInitialData' });
        socket.send(initialRequest);
        utils.log('Sent initial data request');
      }
    },
    
    startPingTest(socket) {
      const pingInterval = setInterval(() => {
        if (socket.readyState !== WebSocket.OPEN) {
          clearInterval(pingInterval);
          return;
        }
        
        const pingId = utils.generateRandomId();
        const pingMessage = JSON.stringify({ type: 'ping', id: pingId });
        
        state.pingTimestamps.set(pingId, Date.now());
        socket.send(pingMessage);
        
        if (CONFIG.verbose) {
          utils.log(`Sent ping: ${pingId}`);
        }
      }, CONFIG.pingInterval);
    },
    
    handleMessage(event) {
      state.messagesReceived++;
      
      if (typeof event.data === 'string') {
        state.textMessagesReceived++;
        this.handleTextMessage(event.data);
      } else if (event.data instanceof ArrayBuffer) {
        state.binaryMessagesReceived++;
        this.handleBinaryMessage(event.data);
      } else if (event.data instanceof Blob) {
        // Convert Blob to ArrayBuffer
        const reader = new FileReader();
        reader.onload = () => {
          if (reader.result instanceof ArrayBuffer) {
            state.binaryMessagesReceived++;
            this.handleBinaryMessage(reader.result);
          }
        };
        reader.readAsArrayBuffer(event.data);
      }
    },
    
    handleTextMessage(data) {
      try {
        const message = JSON.parse(data);
        
        if (CONFIG.verbose) {
          utils.log(`Received text message: ${JSON.stringify(message)}`);
        }
        
        // Handle pong messages for latency calculation
        if (message.type === 'pong' && message.id) {
          const pingTime = state.pingTimestamps.get(message.id);
          if (pingTime) {
            const latency = Date.now() - pingTime;
            state.latencies.push(latency);
            state.pingTimestamps.delete(message.id);
            
            if (CONFIG.verbose) {
              utils.log(`Received pong: ${message.id}, latency: ${latency}ms`);
            }
          }
        }
      } catch (error) {
        utils.log(`Failed to parse text message: ${error}`, 'error');
      }
    },
    
    handleBinaryMessage(data) {
      if (CONFIG.verbose) {
        utils.log(`Received binary message: ${utils.formatBytes(data.byteLength)}`);
      }
      
      // Validate binary message format
      binaryProtocol.validateMessageSize(data);
    }
  };

  // Main diagnostics functions
  async function runDiagnostics() {
    utils.log('Starting WebSocket diagnostics...');
    state.testStartTime = Date.now();
    state.testRunning = true;
    
    try {
      // Check network connectivity
      const apiConnectivity = await network.testApiConnectivity();
      if (!apiConnectivity) {
        utils.log('API connectivity test failed, but continuing with WebSocket tests', 'warning');
      }
      
      // Connect to WebSocket
      const socket = await wsConnection.connect();
      
      // Run the test for the configured duration
      setTimeout(() => {
        state.testRunning = false;
        if (socket.readyState === WebSocket.OPEN) {
          socket.close();
        }
        
        // Generate diagnostics report
        generateReport();
      }, CONFIG.testDuration);
    } catch (error) {
      utils.log(`Diagnostics failed: ${error}`, 'error');
      state.testRunning = false;
      generateReport();
    }
  }

  function generateReport() {
    utils.log('--- WebSocket Diagnostics Report ---');
    utils.log(`Test duration: ${(Date.now() - state.testStartTime) / 1000} seconds`);
    utils.log(`Connection attempts: ${state.connectionAttempts}`);
    utils.log(`Reconnections: ${state.reconnections}`);
    utils.log(`Errors: ${state.errors}`);
    utils.log(`Total messages received: ${state.messagesReceived}`);
    utils.log(`Text messages received: ${state.textMessagesReceived}`);
    utils.log(`Binary messages received: ${state.binaryMessagesReceived}`);
    
    if (state.latencies.length > 0) {
      const avgLatency = utils.calculateAverage(state.latencies);
      const minLatency = Math.min(...state.latencies);
      const maxLatency = Math.max(...state.latencies);
      
      utils.log(`Latency - Avg: ${avgLatency.toFixed(2)}ms, Min: ${minLatency}ms, Max: ${maxLatency}ms`);
    } else {
      utils.log('No latency measurements available', 'warning');
    }
    
    binaryProtocol.analyzeMessageFrequency();
    
    // Provide recommendations based on diagnostics
    provideRecommendations();
  }

  function provideRecommendations() {
    utils.log('--- Recommendations ---');
    
    if (state.errors > 0) {
      utils.log('⚠️ Connection errors detected. Check network stability and server availability.');
    }
    
    if (state.reconnections > 0) {
      utils.log('⚠️ Multiple reconnections detected. This may indicate network instability or server issues.');
    }
    
    if (state.binaryMessagesReceived === 0) {
      utils.log('⚠️ No binary messages received. Check if the server is sending updates or if the initial request was processed.');
    }
    
    if (state.latencies.length > 0) {
      const avgLatency = utils.calculateAverage(state.latencies);
      if (avgLatency > 200) {
        utils.log('⚠️ High average latency detected. This may affect real-time performance.');
      }
    }
    
    utils.log('✅ Diagnostics complete. Use this information to troubleshoot WebSocket issues.');
  }

  // Check for pako library
  if (!window.pako) {
    utils.log('Pako library not detected. Compressed binary messages will not be analyzed. Consider adding pako to your page: <script src="https://cdn.jsdelivr.net/npm/pako@2.1.0/dist/pako.min.js"></script>', 'warning');
  }

  // Export to global scope
  window.WebSocketDiagnostics = {
    runDiagnostics,
    testApiConnectivity: network.testApiConnectivity,
    checkDnsResolution: network.checkDnsResolution,
    CONFIG
  };

  utils.log('WebSocket diagnostics tool loaded. Call WebSocketDiagnostics.runDiagnostics() to start diagnostics.');
})(); 
----
webgl-diagnostics.js
/**
 * WebGL Diagnostics Tool
 * 
 * This script can be run in the browser console to diagnose WebGL issues.
 * It provides detailed information about WebGL capabilities and limitations.
 * 
 * Usage:
 * 1. Open the browser console (F12 or Ctrl+Shift+I)
 * 2. Copy and paste this entire script into the console
 * 3. Press Enter to run the diagnostics
 * 4. Check the console for detailed logs about WebGL support
 */

(function() {
  // Utility functions
  const utils = {
    log(message, data) {
      const timestamp = new Date().toISOString();
      if (data) {
        console.log(`[${timestamp}] ${message}`, data);
      } else {
        console.log(`[${timestamp}] ${message}`);
      }
    },
    
    error(message, err) {
      const timestamp = new Date().toISOString();
      if (err) {
        console.error(`[${timestamp}] ERROR: ${message}`, err);
      } else {
        console.error(`[${timestamp}] ERROR: ${message}`);
      }
    },
    
    warn(message, data) {
      const timestamp = new Date().toISOString();
      if (data) {
        console.warn(`[${timestamp}] WARNING: ${message}`, data);
      } else {
        console.warn(`[${timestamp}] WARNING: ${message}`);
      }
    },
    
    success(message, data) {
      const timestamp = new Date().toISOString();
      const style = 'color: green; font-weight: bold';
      if (data) {
        console.log(`[${timestamp}] %c${message}`, style, data);
      } else {
        console.log(`[${timestamp}] %c${message}`, style);
      }
    }
  };

  // WebGL diagnostics
  const webglDiagnostics = {
    // Check if WebGL is supported
    checkWebGLSupport() {
      utils.log('Checking WebGL support...');
      
      const canvas = document.createElement('canvas');
      const gl2 = canvas.getContext('webgl2');
      const gl1 = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      
      if (!gl1 && !gl2) {
        utils.error('WebGL not supported in this browser');
        return null;
      }
      
      if (gl2) {
        utils.success('WebGL2 is supported');
        return { version: 2, context: gl2 };
      } else {
        utils.warn('WebGL2 not supported, falling back to WebGL1');
        return { version: 1, context: gl1 };
      }
    },
    
    // Get detailed information about WebGL capabilities
    getWebGLInfo(gl) {
      if (!gl) return null;
      
      const isWebGL2 = gl instanceof WebGL2RenderingContext;
      const version = isWebGL2 ? 2 : 1;
      
      // Get basic info
      const info = {
        version,
        vendor: gl.getParameter(gl.VENDOR),
        renderer: gl.getParameter(gl.RENDERER),
        glVersion: gl.getParameter(gl.VERSION),
        shadingLanguageVersion: gl.getParameter(gl.SHADING_LANGUAGE_VERSION),
        maxTextureSize: gl.getParameter(gl.MAX_TEXTURE_SIZE),
        maxCubeMapTextureSize: gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE),
        maxViewportDims: gl.getParameter(gl.MAX_VIEWPORT_DIMS),
        maxTextureImageUnits: gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),
        maxVertexTextureImageUnits: gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS),
        maxCombinedTextureImageUnits: gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),
        maxVertexAttribs: gl.getParameter(gl.MAX_VERTEX_ATTRIBS),
        maxVaryingVectors: gl.getParameter(gl.MAX_VARYING_VECTORS),
        maxVertexUniformVectors: gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS),
        maxFragmentUniformVectors: gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS),
        extensions: gl.getSupportedExtensions()
      };
      
      // Get WebGL2-specific info if available
      if (isWebGL2) {
        info.maxVertexUniformBlocks = gl.getParameter(gl.MAX_VERTEX_UNIFORM_BLOCKS);
        info.maxFragmentUniformBlocks = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_BLOCKS);
        info.maxUniformBufferBindings = gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS);
        info.maxUniformBlockSize = gl.getParameter(gl.MAX_UNIFORM_BLOCK_SIZE);
        info.maxCombinedUniformBlocks = gl.getParameter(gl.MAX_COMBINED_UNIFORM_BLOCKS);
        info.maxCombinedVertexUniformComponents = gl.getParameter(gl.MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS);
        info.maxCombinedFragmentUniformComponents = gl.getParameter(gl.MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS);
        info.maxTransformFeedbackSeparateComponents = gl.getParameter(gl.MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS);
        info.maxTransformFeedbackInterleavedComponents = gl.getParameter(gl.MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS);
      }
      
      return info;
    },
    
    // Check if specific extensions are supported
    checkExtensions(gl) {
      if (!gl) return null;
      
      const extensions = gl.getSupportedExtensions();
      const criticalExtensions = [
        'ANGLE_instanced_arrays',
        'OES_texture_float',
        'OES_texture_half_float',
        'WEBGL_depth_texture',
        'OES_element_index_uint',
        'OES_standard_derivatives',
        'EXT_shader_texture_lod',
        'WEBGL_compressed_texture_s3tc',
        'WEBGL_debug_renderer_info'
      ];
      
      const extensionStatus = {};
      criticalExtensions.forEach(ext => {
        extensionStatus[ext] = extensions.includes(ext);
      });
      
      return extensionStatus;
    },
    
    // Test shader compilation
    testShaderCompilation(gl) {
      if (!gl) return null;
      
      const isWebGL2 = gl instanceof WebGL2RenderingContext;
      
      // Simple vertex shader
      const vertexShaderSource = isWebGL2 ?
        `#version 300 es
        in vec4 position;
        void main() {
          gl_Position = position;
        }` :
        `attribute vec4 position;
        void main() {
          gl_Position = position;
        }`;
      
      // Simple fragment shader
      const fragmentShaderSource = isWebGL2 ?
        `#version 300 es
        precision highp float;
        out vec4 fragColor;
        void main() {
          fragColor = vec4(1.0, 0.0, 0.0, 1.0);
        }` :
        `precision highp float;
        void main() {
          gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
        }`;
      
      try {
        // Create vertex shader
        const vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vertexShader, vertexShaderSource);
        gl.compileShader(vertexShader);
        
        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
          const info = gl.getShaderInfoLog(vertexShader);
          throw new Error('Vertex shader compilation failed: ' + info);
        }
        
        // Create fragment shader
        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, fragmentShaderSource);
        gl.compileShader(fragmentShader);
        
        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
          const info = gl.getShaderInfoLog(fragmentShader);
          throw new Error('Fragment shader compilation failed: ' + info);
        }
        
        // Create program
        const program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);
        
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
          const info = gl.getProgramInfoLog(program);
          throw new Error('Program linking failed: ' + info);
        }
        
        // Clean up
        gl.deleteShader(vertexShader);
        gl.deleteShader(fragmentShader);
        gl.deleteProgram(program);
        
        return { success: true };
      } catch (error) {
        return { 
          success: false, 
          error: error.message 
        };
      }
    },
    
    // Count active WebGL contexts
    countActiveContexts() {
      // Create multiple canvases and contexts to see if we hit limits
      const contexts = [];
      const maxAttempts = 32; // Try to create up to 32 contexts
      
      utils.log(`Attempting to create ${maxAttempts} WebGL contexts to test limits...`);
      
      for (let i = 0; i < maxAttempts; i++) {
        const canvas = document.createElement('canvas');
        canvas.width = 16;
        canvas.height = 16;
        
        const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');
        if (gl) {
          contexts.push(gl);
        } else {
          break;
        }
      }
      
      utils.log(`Successfully created ${contexts.length} WebGL contexts`);
      
      // Clean up
      contexts.forEach((gl, i) => {
        const loseContext = gl.getExtension('WEBGL_lose_context');
        if (loseContext) {
          loseContext.loseContext();
        }
      });
      
      return contexts.length;
    },
    
    // Check for WebGL context loss issues
    checkContextLoss() {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');
      
      if (!gl) {
        utils.error('Could not create WebGL context for context loss test');
        return { supported: false };
      }
      
      const loseContext = gl.getExtension('WEBGL_lose_context');
      if (!loseContext) {
        utils.warn('WEBGL_lose_context extension not supported, cannot test context loss recovery');
        return { supported: false };
      }
      
      return { 
        supported: true,
        extension: 'WEBGL_lose_context'
      };
    },
    
    // Run all diagnostics
    runDiagnostics() {
      utils.log('Starting WebGL diagnostics...');
      
      // Check WebGL support
      const webglSupport = this.checkWebGLSupport();
      if (!webglSupport) {
        utils.error('WebGL diagnostics failed: WebGL not supported');
        return;
      }
      
      const { version, context: gl } = webglSupport;
      
      // Get detailed WebGL info
      const webglInfo = this.getWebGLInfo(gl);
      utils.log('WebGL capabilities:', webglInfo);
      
      // Check extensions
      const extensionStatus = this.checkExtensions(gl);
      utils.log('Critical extensions status:', extensionStatus);
      
      // Test shader compilation
      const shaderTest = this.testShaderCompilation(gl);
      if (shaderTest.success) {
        utils.success('Shader compilation test passed');
      } else {
        utils.error('Shader compilation test failed:', shaderTest.error);
      }
      
      // Count active contexts
      const contextCount = this.countActiveContexts();
      utils.log(`Maximum WebGL contexts: ${contextCount}`);
      
      // Check context loss
      const contextLossCheck = this.checkContextLoss();
      if (contextLossCheck.supported) {
        utils.log('Context loss recovery is supported');
      } else {
        utils.warn('Context loss recovery may not be supported');
      }
      
      // Generate recommendations
      this.generateRecommendations(webglInfo, extensionStatus, shaderTest, contextCount);
    },
    
    // Generate recommendations based on diagnostics
    generateRecommendations(webglInfo, extensionStatus, shaderTest, contextCount) {
      utils.log('--- WebGL Recommendations ---');
      
      // WebGL version recommendations
      if (webglInfo.version === 1) {
        utils.warn('Using WebGL1 - Consider using simpler shaders without #version 300 es');
        utils.warn('Replace custom shaders with built-in Three.js materials where possible');
      }
      
      // Extension recommendations
      const missingExtensions = Object.entries(extensionStatus)
        .filter(([ext, supported]) => !supported)
        .map(([ext]) => ext);
      
      if (missingExtensions.length > 0) {
        utils.warn(`Missing critical extensions: ${missingExtensions.join(', ')}`);
        utils.warn('Some advanced rendering features may not work correctly');
      }
      
      // Shader compilation recommendations
      if (!shaderTest.success) {
        utils.error('Shader compilation failed - Use built-in Three.js materials instead of custom shaders');
      }
      
      // Context count recommendations
      if (contextCount < 16) {
        utils.warn(`Limited WebGL contexts available (${contextCount}) - Reduce the number of canvases/renderers`);
      }
      
      // Memory recommendations
      utils.log('To avoid WebGL context loss:');
      utils.log('1. Dispose unused materials, textures, and geometries');
      utils.log('2. Use shared materials and geometries where possible');
      utils.log('3. Reduce texture sizes and complexity');
      utils.log('4. Consider using a single renderer for multiple scenes');
      
      utils.success('WebGL diagnostics complete');
    }
  };

  // Run diagnostics
  webglDiagnostics.runDiagnostics();
  
  // Export to global scope
  window.WebGLDiagnostics = webglDiagnostics;
  
  utils.log('WebGL diagnostics tool loaded. You can run diagnostics again with WebGLDiagnostics.runDiagnostics()');
})(); 
----
material-switcher.js
/**
 * Material Switcher
 * 
 * This script can be run in the browser console to switch from custom shader materials
 * to simplified materials at runtime, helping to resolve WebGL context issues.
 * 
 * Usage:
 * 1. Open the browser console (F12 or Ctrl+Shift+I)
 * 2. Copy and paste this entire script into the console
 * 3. Press Enter to run the script
 * 4. The script will automatically replace problematic materials
 */

(function() {
  // Utility functions
  const utils = {
    log(message, data) {
      const timestamp = new Date().toISOString();
      if (data) {
        console.log(`[${timestamp}] ${message}`, data);
      } else {
        console.log(`[${timestamp}] ${message}`);
      }
    },
    
    error(message, err) {
      const timestamp = new Date().toISOString();
      if (err) {
        console.error(`[${timestamp}] ERROR: ${message}`, err);
      } else {
        console.error(`[${timestamp}] ERROR: ${message}`);
      }
    },
    
    success(message, data) {
      const timestamp = new Date().toISOString();
      const style = 'color: green; font-weight: bold';
      if (data) {
        console.log(`[${timestamp}] %c${message}`, style, data);
      } else {
        console.log(`[${timestamp}] %c${message}`, style);
      }
    }
  };

  // Material switcher
  const materialSwitcher = {
    // Replace custom shader materials with simplified materials
    replaceCustomShaderMaterials() {
      utils.log('Searching for custom shader materials to replace...');
      
      // Get the visualization instance
      const viz = window.visualization;
      if (!viz) {
        utils.error('Visualization not found. Make sure the application is initialized.');
        return;
      }
      
      // Get the scene manager
      const sceneManager = window.SceneManager?.getInstance();
      if (!sceneManager) {
        utils.error('SceneManager not found. Make sure the application is initialized.');
        return;
      }
      
      // Get the scene
      const scene = sceneManager.getScene();
      if (!scene) {
        utils.error('Scene not found. Make sure the application is initialized.');
        return;
      }
      
      // Count of replaced materials
      let replacedCount = 0;
      
      // Traverse the scene and replace materials
      scene.traverse(object => {
        if (!object.material) return;
        
        // Handle arrays of materials
        if (Array.isArray(object.material)) {
          for (let i = 0; i < object.material.length; i++) {
            const material = object.material[i];
            if (this.isCustomShaderMaterial(material)) {
              object.material[i] = this.createSimplifiedMaterial(material);
              replacedCount++;
            }
          }
        } 
        // Handle single material
        else if (this.isCustomShaderMaterial(object.material)) {
          object.material = this.createSimplifiedMaterial(object.material);
          replacedCount++;
        }
      });
      
      utils.success(`Replaced ${replacedCount} custom shader materials with simplified materials`);
      
      // Force a render update
      sceneManager.render();
    },
    
    // Check if a material is a custom shader material
    isCustomShaderMaterial(material) {
      // Check for our custom shader materials
      if (!material) return false;
      
      // Check for ShaderMaterial or custom material types
      return (
        material.type === 'ShaderMaterial' || 
        material.constructor.name === 'HologramShaderMaterial' ||
        material.constructor.name === 'EdgeShaderMaterial' ||
        (material.uniforms && material.vertexShader && material.fragmentShader)
      );
    },
    
    // Create a simplified material based on the original material
    createSimplifiedMaterial(material) {
      // Default values
      const color = material.color || material.uniforms?.color?.value || new THREE.Color(0x00ff00);
      const opacity = material.opacity || material.uniforms?.opacity?.value || 0.7;
      const wireframe = material.wireframe || material.uniforms?.isEdgeOnly?.value || false;
      
      // Create a basic material
      const simplifiedMaterial = new THREE.MeshBasicMaterial({
        color: color,
        transparent: true,
        opacity: opacity,
        wireframe: wireframe,
        side: THREE.DoubleSide
      });
      
      utils.log('Created simplified material', {
        originalType: material.type || material.constructor.name,
        color: color,
        opacity: opacity,
        wireframe: wireframe
      });
      
      return simplifiedMaterial;
    },
    
    // Replace all materials in the scene
    replaceAllMaterials() {
      utils.log('Replacing all materials with simplified versions...');
      
      // Get the scene manager
      const sceneManager = window.SceneManager?.getInstance();
      if (!sceneManager) {
        utils.error('SceneManager not found. Make sure the application is initialized.');
        return;
      }
      
      // Get the scene
      const scene = sceneManager.getScene();
      if (!scene) {
        utils.error('Scene not found. Make sure the application is initialized.');
        return;
      }
      
      // Count of replaced materials
      let replacedCount = 0;
      
      // Traverse the scene and replace all materials
      scene.traverse(object => {
        if (!object.material) return;
        
        // Handle arrays of materials
        if (Array.isArray(object.material)) {
          for (let i = 0; i < object.material.length; i++) {
            const material = object.material[i];
            object.material[i] = this.createSimplifiedMaterial(material);
            replacedCount++;
          }
        } 
        // Handle single material
        else {
          object.material = this.createSimplifiedMaterial(object.material);
          replacedCount++;
        }
      });
      
      utils.success(`Replaced ${replacedCount} materials with simplified materials`);
      
      // Force a render update
      sceneManager.render();
    },
    
    // Reduce WebGL context usage
    optimizeWebGLContextUsage() {
      utils.log('Optimizing WebGL context usage...');
      
      // Get the scene manager
      const sceneManager = window.SceneManager?.getInstance();
      if (!sceneManager) {
        utils.error('SceneManager not found. Make sure the application is initialized.');
        return;
      }
      
      // Get the renderer
      const renderer = sceneManager.getRenderer();
      if (!renderer) {
        utils.error('Renderer not found. Make sure the application is initialized.');
        return;
      }
      
      // Optimize renderer settings
      renderer.shadowMap.enabled = false;
      renderer.shadowMap.autoUpdate = false;
      renderer.shadowMap.needsUpdate = false;
      
      // Disable automatic clearing
      renderer.autoClear = false;
      renderer.autoClearColor = false;
      renderer.autoClearDepth = false;
      renderer.autoClearStencil = false;
      
      // Reduce precision if possible
      try {
        renderer.getContext().getShaderPrecisionFormat(
          renderer.getContext().FRAGMENT_SHADER,
          renderer.getContext().HIGH_FLOAT
        );
        utils.log('Using HIGH_FLOAT precision');
      } catch (e) {
        utils.warn('Failed to set shader precision', e);
      }
      
      utils.success('WebGL context usage optimized');
    }
  };

  // Run the material switcher
  try {
    materialSwitcher.replaceCustomShaderMaterials();
    materialSwitcher.optimizeWebGLContextUsage();
    utils.success('Material switcher completed successfully');
  } catch (error) {
    utils.error('Error running material switcher', error);
  }
  
  // Export to global scope
  window.MaterialSwitcher = materialSwitcher;
  
  utils.log('Material switcher loaded. You can run it again with MaterialSwitcher.replaceCustomShaderMaterials()');
  utils.log('To replace all materials, run MaterialSwitcher.replaceAllMaterials()');
})(); 
----
visualization/MetadataVisualizer.ts
import * as THREE from 'three';
import {
    Mesh,
    Group,
    MeshStandardMaterial,
    MeshBasicMaterial,
    Vector3,
    DoubleSide,
    BufferGeometry,
    Object3D
} from 'three';
import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';
import { FontLoader, Font } from 'three/examples/jsm/loaders/FontLoader.js';
import { NodeMetadata } from '../types/metadata';
import { Settings } from '../types/settings';
import { platformManager } from '../platform/platformManager';
import { debugState } from '../core/debugState';
import { logger, createDataMetadata, createErrorMetadata } from '../core/logger';

type GeometryWithBoundingBox = THREE.BufferGeometry & {
    boundingBox: THREE.Box3 | null;
    computeBoundingBox: () => void;
};

interface MetadataLabelGroup extends Group {
    name: string;
    userData: {
        isMetadata: boolean;
    };
}

export type MetadataLabelCallback = (group: MetadataLabelGroup) => void;

interface ExtendedTextGeometry extends TextGeometry {
    computeBoundingBox: () => void;
    boundingBox: THREE.Box3 | null;
}

export class MetadataVisualizer {
    private scene: THREE.Scene;
    private camera: THREE.PerspectiveCamera;
    private fontLoader: FontLoader;
    private font: Font | null;
    private fontPath: string;
    private labelGroup: THREE.Group;
    private settings: Settings;
    private fontLoadAttempts: number = 0;
    private metadataLabelMap: Map<string, MetadataLabelGroup> = new Map();

    // Default values for missing data
    private readonly DEFAULT_FILE_SIZE = 1000; // 1KB

    constructor(camera: THREE.PerspectiveCamera, scene: THREE.Scene, settings: Settings) {
        logger.info('MetadataVisualizer constructor called', createDataMetadata({
            timestamp: Date.now(),
            cameraPosition: camera?.position ? {x: camera.position.x, y: camera.position.y, z: camera.position.z} : 'undefined'
        }));
        
        this.scene = scene;
        this.camera = camera;
        this.fontLoader = new FontLoader();
        this.font = null;
        this.fontPath = '/fonts/helvetiker_regular.typeface.json';
        this.labelGroup = new THREE.Group();
        
        // Enable both layers by default for desktop mode
        this.labelGroup.layers.enable(0);
        this.labelGroup.layers.enable(1);
        
        this.settings = settings;
        this.scene.add(this.labelGroup);
        logger.info('MetadataVisualizer labelGroup added to scene');
        this.loadFont();
        
        // Set initial layer mode
        this.setXRMode(platformManager.isXRMode);
        
        // Listen for XR mode changes
        platformManager.on('xrmodechange', (enabled: boolean) => {
            this.setXRMode(enabled);
        });
    }

    private readonly geometries = {
        SPHERE: new THREE.SphereGeometry(1, 32, 32),
        ICOSAHEDRON: new THREE.IcosahedronGeometry(1),
        OCTAHEDRON: new THREE.OctahedronGeometry(1)
    };

    private async loadFont(): Promise<void> {
        try {
            await this.attemptFontLoad();
            logger.info('Font loaded successfully on first attempt');
        } catch (error) {
            logger.error('Initial font load failed:', createErrorMetadata(error));
            await this.retryFontLoad();
        }
    }

    private async attemptFontLoad(): Promise<void> {
        logger.info(`Attempting to load font from ${this.fontPath}`);
        this.font = await new Promise((resolve, reject) => {
            this.fontLoader.load(
                // Font path
                this.fontPath,
                resolve,
                undefined,
                reject
            );
        });
    }

    private async retryFontLoad(maxAttempts: number = 3): Promise<void> {
        while (this.fontLoadAttempts < maxAttempts && !this.font) {
            this.fontLoadAttempts++;
            await new Promise(resolve => setTimeout(resolve, 1000));
            try {
                await this.attemptFontLoad();
                if (debugState.isShaderDebugEnabled()) {
                    logger.info('Font loaded successfully after retry');
                }
                break;
            } catch (error) {
                logger.error(`Font load attempt ${this.fontLoadAttempts} failed:`, createErrorMetadata(error));
            }
        }
    }

    public createLabel(text: string, position: THREE.Vector3): void {
        if (!this.font) {
            console.warn('Font not loaded yet');
            return;
        }

        const textGeometry = new TextGeometry(text, {
            font: this.font,
            size: this.settings.visualization.labels.desktopFontSize / 10 || 0.5,
            depth: 0.01 // Fixed thin depth for better readability
        });

        const material = new THREE.MeshStandardMaterial({
            color: this.settings.visualization.labels.textColor || '#ffffff',
            metalness: 0.1,
            roughness: 0.6,
            emissive: this.settings.visualization.labels.textColor || '#ffffff',
            transparent: true,
            opacity: 1.0,
            side: THREE.DoubleSide,
            depthWrite: false, // Disable depth writing to prevent occlusion
            depthTest: false   // Disable depth testing to ensure visibility
        });

        // Create mesh with the text geometry and center it
        const geometry = textGeometry as unknown as GeometryWithBoundingBox;
        geometry.computeBoundingBox();
        const mesh = new THREE.Mesh(geometry, material);
        mesh.position.copy(position);

        if (geometry.boundingBox) {
            const width = geometry.boundingBox.max.x - geometry.boundingBox.min.x;
            mesh.position.x -= width / 2;
        }
        
        this.labelGroup.add(mesh);
    }

    public async createTextMesh(text: string): Promise<Mesh | Group | null> {
        if (!this.font) {
            logger.warn(`Cannot create text mesh: font not loaded yet (text: ${text})`);
            return null;
        }
        
        logger.debug(`Creating text mesh: "${text}"`);

        const textGeometry = new TextGeometry(text, {
            font: this.font,
            size: this.settings.visualization.labels.desktopFontSize / 10 || 0.5,
            depth: 0.1, // Using depth instead of height
            curveSegments: this.settings.visualization.labels.textResolution || 4,
            bevelEnabled: false
        }) as ExtendedTextGeometry;

        // Compute bounding box right after creation
        textGeometry.computeBoundingBox();

        const material = new MeshStandardMaterial({
            color: this.settings.visualization.labels.textColor || '#ffffff',
            metalness: 0.1,
            roughness: 0.6,
            emissive: this.settings.visualization.labels.textColor || '#ffffff',
            transparent: true,
            opacity: 1.0,
            side: DoubleSide,
            depthWrite: false,  // Changed to false to prevent occlusion by other objects
            depthTest: false    // Changed to false for consistent behavior
        });

        // Add outline for better visibility
        if (this.settings.visualization.labels.textOutlineWidth > 0) {
            const outlineMaterial = new MeshBasicMaterial({
                color: this.settings.visualization.labels.textOutlineColor || '#000000',
                side: DoubleSide,
                depthWrite: false, // Disable depth writing for outline to match main material
                depthTest: false   // Disable depth testing to ensure outline is always visible
            });
            
            const outlineWidth = this.settings.visualization.labels.textOutlineWidth;
            // Create a new geometry for the outline to avoid sharing
            const outlineGeometry = new TextGeometry(text, {
                font: this.font,
                size: this.settings.visualization.labels.desktopFontSize / 10 || 0.5,
                depth: 0.1,
                curveSegments: this.settings.visualization.labels.textResolution || 4,
                bevelEnabled: false
            }) as ExtendedTextGeometry;
            outlineGeometry.computeBoundingBox();
            
            const outlineMesh = new Mesh(outlineGeometry as unknown as BufferGeometry, outlineMaterial);
            outlineMesh.scale.multiplyScalar(1 + outlineWidth);
            
            const group = new Group();
            group.add(outlineMesh);
            outlineMesh.renderOrder = 1000; // Ensure outline renders on top
            group.add(new Mesh(textGeometry as unknown as BufferGeometry, material));
            group.renderOrder = 1000; // Ensure entire group renders on top
            
            // Center the group
            const bbox = textGeometry.boundingBox;
            if (bbox) {
                const width = bbox.max.x - bbox.min.x;
                group.position.x -= width / 2;
            }
            
            return group;
        }

        // Create mesh with the text geometry and center it
        const bbox = textGeometry.boundingBox;
        const mesh = new Mesh(textGeometry as unknown as BufferGeometry, material);
        mesh.renderOrder = 1000; // Ensure text mesh renders on top

        if (bbox) {
            const width = bbox.max.x - bbox.min.x;
            mesh.position.x -= width / 2;
        }

        return mesh;
    }

    public createNodeVisual = (metadata: NodeMetadata): THREE.Mesh => {
        const geometry = this.getGeometryFromAge(metadata.commitAge);
        const material = this.createMaterialFromHyperlinks(metadata.hyperlinkCount);
        const mesh = new THREE.Mesh(geometry, material);

        mesh.position.set(
            metadata.position.x,
            metadata.position.y,
            metadata.position.z
        );

        return mesh;
    }

    private getGeometryFromAge = (age: number): THREE.BufferGeometry => {
        if (age < 7) return this.geometries.SPHERE;
        if (age < 30) return this.geometries.ICOSAHEDRON;
        return this.geometries.OCTAHEDRON;
    }

    private createMaterialFromHyperlinks(count: number): THREE.Material {
        const hue = Math.min(count / 10, 1) * 0.3; // 0 to 0.3 range
        const color = new THREE.Color().setHSL(hue, 0.7, 0.5);

        return new THREE.MeshPhongMaterial({
            color: color,
            shininess: 30,
            transparent: true,
            opacity: 0.9
        });
    }

    /**
     * Format file size in a human-readable way
     * @param bytes File size in bytes
     * @returns Formatted string (e.g., "1.5 KB")
     */
    private formatFileSize(bytes: number): string {
        if (!bytes || isNaN(bytes)) return 'N/A';
        if (bytes < 1024) return `${bytes} B`;
        if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
        if (bytes < 1024 * 1024 * 1024) return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
        return `${(bytes / (1024 * 1024 * 1024)).toFixed(1)} GB`;
    }

    /**
     * Create a metadata label for a node
     * CRITICAL: This function now explicitly accepts a nodeLabel parameter
     * to prioritize the label from the Node object over metadata.name
     * @param metadata Metadata object containing node details
     * @param nodeLabel Optional label from Node.label property (preferred over metadata.name)
     */
    public async createMetadataLabel(metadata: NodeMetadata, nodeLabel?: string): Promise<MetadataLabelGroup> {
        const group = new Group() as MetadataLabelGroup;
        
        // Check if metadata position is zero or undefined
        if (!metadata.position || (metadata.position.x === 0 && metadata.position.y === 0 && metadata.position.z === 0)) {
            logger.warn(`[POSITION WARNING] Metadata for node ${metadata.id} has zero/undefined position`, 
                createDataMetadata({
                    position: metadata.position || 'undefined',
                    nodeLabel: nodeLabel || 'undefined',
                    metadataName: metadata.name || 'undefined'
                })
            );
        }
        
        group.name = 'metadata-label';
        group.renderOrder = 1000; // Set high render order to ensure visibility
        group.userData = { isMetadata: true };
        
        // Log the label source for debugging
        logger.info(`Creating metadata label for node ${metadata.id}`, createDataMetadata({
            labelSource: nodeLabel ? 'explicit nodeLabel' : 'metadata.name',
            displayName: nodeLabel || metadata.name,
            position: metadata.position ? 
                `x:${metadata.position.x.toFixed(2)}, y:${metadata.position.y.toFixed(2)}, z:${metadata.position.z.toFixed(2)}` : 
                'undefined',
            fileSize: metadata.fileSize || 'undefined',
            hyperlinkCount: metadata.hyperlinkCount || 'undefined'
        }));
        
        // Create text for name
        const displayName = nodeLabel || metadata.name;
        const nameMesh = await this.createTextMesh(displayName);
        if (nameMesh) {
            nameMesh.position.y = 1.2;
            // Log position and scale to verify
            logger.debug(`nameMesh created at position y=${nameMesh.position.y} with scale=${nameMesh.scale.x}`);
            nameMesh.scale.setScalar(0.8);
            group.add(nameMesh);
        }
        
        // Create text for file size
        const fileSize = metadata.fileSize || this.DEFAULT_FILE_SIZE;
        const fileSizeText = `Size: ${this.formatFileSize(fileSize)}`;
        const fileSizeMesh = await this.createTextMesh(fileSizeText);
        if (fileSizeMesh) {
            fileSizeMesh.position.y = 0.8;
            fileSizeMesh.scale.setScalar(0.7);
            logger.debug(`fileSizeMesh created at position y=${fileSizeMesh.position.y} with scale=${fileSizeMesh.scale.x}`);
            group.add(fileSizeMesh);

            if (debugState.isNodeDebugEnabled()) {
                logger.debug(`Created file size label: ${fileSizeText} for node "${displayName}" (${metadata.id})`);
            }
            
            if (debugState.isNodeDebugEnabled()) {
                logger.debug(`Creating file size label: ${fileSizeText} for node ${metadata.id}`);
            }
        }

        // Create text for hyperlink count
        // Ensure we have a valid value, defaulting to 0 if undefined or invalid
        const hyperlinkCount = Number.isFinite(metadata.hyperlinkCount) ? metadata.hyperlinkCount : 0;
        const linksText = `Links: ${hyperlinkCount}`;
        if (hyperlinkCount > 0 && debugState.isNodeDebugEnabled()) {
            logger.debug(`Creating hyperlink count label: ${linksText} for node ${metadata.id}`);
        }
        const linksMesh = await this.createTextMesh(linksText);
        if (linksMesh) {
            linksMesh.position.y = 0.4;
            linksMesh.scale.setScalar(0.7);
            logger.debug(`linksMesh created at position y=${linksMesh.position.y} with scale=${linksMesh.scale.x}`);
            group.add(linksMesh);
        }

        // Set up billboarding
        const tempVec = new Vector3();
        const billboardMode = this.settings.visualization.labels.billboardMode;

        const updateBillboard = () => {
            if (billboardMode === 'camera') {
                // Full billboard - always face camera
                group.quaternion.copy(this.camera.quaternion);
            } else {
                // Vertical billboard - only rotate around Y axis
                tempVec.copy(this.camera.position).sub(group.position);
                tempVec.y = 0;
                group.lookAt(tempVec.add(group.position));
            }
        };

        // Add to render loop
        const onBeforeRender = () => {
            updateBillboard();
        };
        group.onBeforeRender = onBeforeRender;

        // Set initial layer
        this.setGroupLayer(group, platformManager.isXRMode);

        // Add to label map for tracking
        this.metadataLabelMap.set(metadata.id, group);
        
        // Verify layer settings on the group
        logger.debug(`Label group for ${metadata.id} - Layer visibility:`, createDataMetadata({
            layerInfo: `Mask value: ${group.layers.mask.toString(2)}`,
            isOnLayer0: Boolean(group.layers.mask & (1 << 0)),
            isOnLayer1: Boolean(group.layers.mask & (1 << 1))
        }));
        
        return group;
    }

    private setGroupLayer(group: Object3D, enabled: boolean): void {
        if (enabled) {
            // In XR mode, only show on layer 1
            group.traverse(child => {
                child.layers.disable(0);
                child.layers.enable(1);
            });
            group.layers.disable(0);
            group.layers.enable(1);
        } else {
            // In desktop mode, show on both layers
            group.traverse(child => {
                child.layers.enable(0);
                child.layers.enable(1);
            });
            group.layers.enable(0);
            group.layers.enable(1);
        }
    }

    /**
     * Update the position of a metadata label
     * @param id The node ID
     * @param position The new position
     */
    public updateMetadataPosition(id: string, position: Vector3): void {
        const group = this.metadataLabelMap.get(id);
        if (!group) {
            // Only log in debug mode to avoid console spam
            if (debugState.isNodeDebugEnabled()) {
                logger.debug(`No metadata label found for node ${id} to update position`);
            }
            return;
        }
        
        // Update the position
        group.position.copy(position);
        
        // Occasionally log position updates for important nodes (using modulo to reduce spam)
        if (Math.random() < 0.01) { // Only log ~1% of updates
            logger.debug(`Updated position for node ${id} to`, createDataMetadata({
                x: position.x.toFixed(2),
                y: position.y.toFixed(2),
                z: position.z.toFixed(2)
            }));
        }
    }
    
    /**
     * Clear all metadata labels
     */
    public clearAllLabels(): void {
        logger.info(`Clearing all metadata labels (count: ${this.metadataLabelMap.size})`);
        
        // Remove all labels from the scene
        this.metadataLabelMap.forEach((group) => {
            this.labelGroup.remove(group);
        });
        
        // Clear the map
        this.metadataLabelMap.clear();
    }

    public setXRMode(enabled: boolean): void {
        logger.info(`Setting XR mode: ${enabled ? 'enabled' : 'disabled'}`);
        if (enabled) {
            // In XR mode, only show on layer 1
            this.labelGroup.traverse(child => {
                child.layers.disable(0);
                child.layers.enable(1);
            });
            this.labelGroup.layers.disable(0);
            this.labelGroup.layers.enable(1);
        } else {
            // In desktop mode, show on both layers
            this.labelGroup.traverse(child => {
                child.layers.enable(0);
                child.layers.enable(1);
            });
            this.labelGroup.layers.enable(0);
            this.labelGroup.layers.enable(1);
        }
    }

    public dispose(): void {
        // Clean up geometries
        logger.info('Disposing MetadataVisualizer resources');
        Object.values(this.geometries).forEach(geometry => geometry.dispose());
        
        // Clean up label group
        this.labelGroup.traverse(child => {
            if (child instanceof THREE.Mesh) {
                child.geometry.dispose();
                if (child.material instanceof THREE.Material) {
                    child.material.dispose();
                }
            }
        });
        
        // Clear label map
        this.metadataLabelMap.clear();
    }
}

----
visualization/HologramManager.ts
import {
    Scene,
    Group,
    Mesh,
    Vector3,
    WebGLRenderer,
    InstancedMesh,
    Matrix4
} from 'three';
import { Settings } from '../types/settings';
import { GeometryFactory } from '../rendering/factories/GeometryFactory';
import { MaterialFactory } from '../rendering/factories/MaterialFactory';
import { HologramShaderMaterial } from '../rendering/materials/HologramShaderMaterial';
import { SettingsStore } from '../state/SettingsStore';

export class HologramManager {
    private readonly group = new Group();
    private isXRMode = false;
    private readonly geometryFactory: GeometryFactory;
    private readonly ringInstances: InstancedMesh[] = [];
    private readonly sphereInstances: InstancedMesh[] = [];
    private readonly tempMatrix = new Matrix4();
    private readonly instanceCount = 3;
    private readonly materialFactory: MaterialFactory;
    private readonly settingsStore: SettingsStore;

    constructor(
        private readonly scene: Scene,
        _renderer: WebGLRenderer,  // Used by subclasses
        private settings: Settings
    ) {
        this.geometryFactory = GeometryFactory.getInstance();
        this.materialFactory = MaterialFactory.getInstance();
        this.settingsStore = SettingsStore.getInstance();
        
        // Enable bloom layer
        this.group.layers.set(0);  // First set default layer
        this.group.layers.enable(1);  // Then enable bloom layer
        this.createHolograms();
        this.scene.add(this.group);

        // Subscribe to settings changes
        this.settingsStore.subscribe('visualization.hologram', (_path: string, settings: any) => {
            if (settings && typeof settings === 'object') {
                this.settings = {
                    ...this.settings,
                    visualization: {
                        ...this.settings.visualization,
                        hologram: settings
                    }
                };
                this.updateSettings(this.settings);
            }
        });
    }

    private createHolograms() {
        while (this.group.children.length > 0) {
            const child = this.group.children[0];
            this.group.remove(child);
            if (child instanceof Mesh || child instanceof InstancedMesh) {
                child.geometry.dispose();
                child.material.dispose();
            }
        }

        const quality = this.isXRMode ? 'high' : this.settings.xr.quality;
        const baseMaterial = this.materialFactory.getHologramMaterial(this.settings);

        // Create instanced rings
        const sphereSizes = this.settings.visualization.hologram.sphereSizes;
        
        // Create one ring instance for each size
        sphereSizes.forEach(size => {
            // Get unit-sized geometry and scale it
            const ring = new InstancedMesh(
                this.geometryFactory.getHologramGeometry('ring', quality),
                baseMaterial.clone(),
                this.instanceCount
            );
            
            // Set up ring instances with different rotations and scales
            for (let j = 0; j < this.instanceCount; j++) {
                this.tempMatrix.makeRotationX(Math.PI / 3 * j);
                this.tempMatrix.multiply(new Matrix4().makeRotationY(Math.PI / 6 * j));
                // Apply size in meters from settings
                this.tempMatrix.multiply(new Matrix4().makeScale(size, size, size));
                ring.setMatrixAt(j, this.tempMatrix);
            }
            
            ring.instanceMatrix.needsUpdate = true;
            // Make sure each ring has bloom layer enabled properly
            ring.layers.set(0);  // Set default layer first
            ring.layers.enable(1);  // Then enable bloom layer
            this.ringInstances.push(ring);
            this.group.add(ring);
        });

        if (this.settings.visualization.hologram.enableTriangleSphere) {
            const baseSize = this.settings.visualization.hologram.triangleSphereSize;
            const sphereMesh = new InstancedMesh(
                this.geometryFactory.getHologramGeometry('triangleSphere', quality),
                baseMaterial.clone(),
                this.instanceCount
            );
            
            // Set up sphere instances with different scales and rotations
            for (let i = 0; i < this.instanceCount; i++) {
                // Scale each instance relative to the base size (80%, 100%, 120%)
                const scale = baseSize * (0.8 + (i * 0.2));
                this.tempMatrix.makeScale(scale, scale, scale);
                this.tempMatrix.multiply(new Matrix4().makeRotationX(Math.PI / 4 * i));
                this.tempMatrix.multiply(new Matrix4().makeRotationY(Math.PI / 3 * i));
                sphereMesh.setMatrixAt(i, this.tempMatrix);
            }
            
            sphereMesh.instanceMatrix.needsUpdate = true;
            
            // Set material properties
            const material = (sphereMesh.material as HologramShaderMaterial);
            material.uniforms.opacity.value = this.settings.visualization.hologram.triangleSphereOpacity;
            material.setEdgeOnly(true);
            
            // Make sure sphere has bloom layer enabled properly
            sphereMesh.layers.set(0);  // Set default layer first
            sphereMesh.layers.enable(1);  // Then enable bloom layer
            this.sphereInstances.push(sphereMesh);
            this.group.add(sphereMesh);
        }
    }

    setXRMode(enabled: boolean) {
        this.isXRMode = enabled;
        this.group.traverse(child => {
            if (child instanceof Mesh && child.material instanceof HologramShaderMaterial) {
                child.material = new HologramShaderMaterial(this.settings, enabled ? 'ar' : 'desktop');
            }
        });
        this.createHolograms();
    }

    handleInteraction(position: Vector3) {
        const interactionRadius = this.settings.xr.interactionRadius;
        this.group.traverse(child => {
            if (child instanceof Mesh && child.material instanceof HologramShaderMaterial) {
                const distance = position.distanceTo(child.position);
                if (distance < interactionRadius && child.material.uniforms) {
                    child.material.handleInteraction(position);
                }
            }
        });
    }

    update(deltaTime: number) {
        this.group.traverse(child => {
            if (child instanceof InstancedMesh) {
                const rotationSpeed = this.settings.visualization.hologram.globalRotationSpeed;
                
                // Update each instance's rotation
                for (let i = 0; i < child.count; i++) {
                    child.getMatrixAt(i, this.tempMatrix);
                    
                    // Apply rotation based on instance index
                    const instanceSpeed = rotationSpeed * (i + 1);
                    this.tempMatrix.multiply(new Matrix4().makeRotationY(instanceSpeed * deltaTime));
                    
                    child.setMatrixAt(i, this.tempMatrix);
                }
                
                child.instanceMatrix.needsUpdate = true;
                
                // Update shader time
                const material = child.material as HologramShaderMaterial;
                material.update(deltaTime);
            }
        });
    }

    updateSettings(newSettings: Settings) {
        this.settings = newSettings;
        this.materialFactory.updateMaterial('hologram', this.settings);
        this.createHolograms();
    }

    getGroup() {
        return this.group;
    }

    dispose() {
        // Geometries and materials are managed by the factories
        this.scene.remove(this.group);
    }
}

----
xr/xrInitializer.ts
import { platformManager } from '../platform/platformManager';
import { XRSessionManager } from './xrSessionManager';
import { createLogger, createErrorMetadata, createMessageMetadata } from '../core/logger';
import { XRSessionState } from '../types/xr';

const logger = createLogger('XRInitializer');

export class XRInitializer {
    private static instance: XRInitializer | null = null;
    private xrButton: HTMLButtonElement;
    private xrSessionManager: XRSessionManager;
    private buttonDebounceTimeout: number | null = null;

    private constructor(xrSessionManager: XRSessionManager) {
        this.xrSessionManager = xrSessionManager;
        this.xrButton = document.getElementById('xr-button') as HTMLButtonElement;
        if (!this.xrButton) {
            throw new Error('XR button not found');
        }
        this.setupEventListeners();
        this.setupSessionStateListener();
    }

    public static getInstance(xrSessionManager: XRSessionManager): XRInitializer {
        if (!XRInitializer.instance) {
            XRInitializer.instance = new XRInitializer(xrSessionManager);
        }
        return XRInitializer.instance;
    }

    private isProcessingClick = false;
    private keyboardShortcutEnabled = !platformManager.isQuest(); // Disable for Quest

    private setupSessionStateListener(): void {
        // Listen for XR session state changes
        platformManager.on('xrsessionstatechange', (state: XRSessionState) => {
            logger.info('XR session state changed:', createMessageMetadata(state));
            
            // Update button state based on session state
            if (state === 'inactive') {
                this.xrButton.classList.remove('hidden');
                this.xrButton.disabled = false;
                this.xrButton.textContent = platformManager.isQuest() ? 'Enter AR' : 'Enter VR';
            } else {
                this.xrButton.disabled = state === 'cooldown';
                this.xrButton.textContent = state === 'active' ? 'Exit AR' : 'Please wait...';
            }
        });
    }

    private setupEventListeners(): void {
        // Button click handler with debounce
        this.xrButton.addEventListener('click', async () => {
            if (this.isProcessingClick) return;
            this.isProcessingClick = true;
            
            try {
                await this.onXRButtonClick();
            } finally {
                // Reset after a short delay to prevent rapid clicks
                setTimeout(() => {
                    this.isProcessingClick = false;
                }, 1500); // Increased debounce time
                
                // Update button state
                this.xrButton.disabled = true;
                this.xrButton.textContent = 'Please wait...';
            }
        });

        // Keyboard shortcut only for non-Quest devices
        if (this.keyboardShortcutEnabled) {
            document.addEventListener('keydown', (event) => {
                if (event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'a') {
                    this.onXRButtonClick();
                }
            });
        }

        // Update button visibility based on XR session state
        this.xrSessionManager.setSessionCallbacks(
            () => this.updateButtonForActiveSession(),      // onStart
            () => this.updateButtonForInactiveSession(),    // onEnd
            () => {}                                        // onFrame
        );

        // Initial button state
        this.updateButtonState();
    }

    private updateButtonForActiveSession(): void {
        this.xrButton.classList.remove('hidden');
        this.xrButton.disabled = false;
        this.xrButton.textContent = 'Exit AR';
    }

    private updateButtonForInactiveSession(): void {
        // Clear any existing timeout
        if (this.buttonDebounceTimeout !== null) {
            clearTimeout(this.buttonDebounceTimeout);
        }
        
        // Set button to disabled with "Please wait..." text during cooldown
        this.xrButton.disabled = platformManager.xrSessionState === 'cooldown';
    }

    private async updateButtonState(): Promise<void> {
        const isQuest = platformManager.isQuest();
        const xrSupported = platformManager.isXRSupported();

        if (!xrSupported) {
            this.xrButton.style.display = 'none';
            return;
        }

        if (isQuest) {
            this.xrButton.textContent = 'Enter AR';
            this.xrButton.disabled = platformManager.xrSessionState !== 'inactive';
            this.xrButton.classList.remove('hidden');
        } else {
            this.xrButton.textContent = 'Enter VR';
            this.xrButton.disabled = platformManager.xrSessionState !== 'inactive';
            this.xrButton.classList.remove('hidden');
        }
    }

    private async onXRButtonClick(): Promise<void> {
        try {
            if (this.xrSessionManager.isXRPresenting()) {
                // If we're already in a session, end it
                logger.info('Ending XR session');
                this.xrButton.disabled = true;
                this.xrButton.textContent = 'Exiting...';
                
                // End the session
                await this.xrSessionManager.endXRSession();
            } else {
                await this.xrSessionManager.initXRSession();
            }
        } catch (error) {
            logger.error('Failed to toggle XR session:', createErrorMetadata(error));
        }
    }

    public dispose(): void {
        // Clean up timeouts
        if (this.buttonDebounceTimeout !== null) {
            clearTimeout(this.buttonDebounceTimeout);
            this.buttonDebounceTimeout = null;
        }
        
        XRInitializer.instance = null;
    }
}
----
xr/xrTypes.ts
import * as THREE from 'three';

export interface XRHandWithHaptics {
    hand: {
        joints: {
            [key: string]: THREE.Object3D;
        };
    };
    hapticActuators: any[];
    pinchStrength: number;
    gripStrength: number;
}

export interface XRControllerState {
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
    hapticActuator?: any;
}

export interface XRHandState {
    position: THREE.Vector3;
    joints: Map<string, THREE.Object3D>;
    pinchStrength: number;
    gripStrength: number;
}

----
xr/handInteraction.ts
import { Vector3 } from 'three';
import { XRHandWithHaptics } from '../types/xr';
import { NodeManagerFacade } from '../rendering/node/NodeManagerFacade';
import { NodeInteractionManager } from '../rendering/node/interaction/NodeInteractionManager';
import { createLogger } from '../core/logger';
import { SettingsStore } from '../state/SettingsStore';
import { platformManager } from '../platform/platformManager';

const logger = createLogger('HandInteraction');

export class HandInteractionManager {
    private static instance: HandInteractionManager;
    private lastPinchState: boolean = false;
    private settingsStore: SettingsStore;
    private nodeManager?: NodeManagerFacade;
    private interactionManager?: NodeInteractionManager;
    private isInitialized: boolean = false;
    private initializationTime: number = 0;
    private readonly INITIALIZATION_DELAY_MS = 3000; // 3 second delay before enabling interactions
    private sessionStateListener: ((state: string) => void) | null = null;

    private constructor() {
        this.settingsStore = SettingsStore.getInstance();
        this.initializationTime = Date.now();
        this.setupSessionStateListener();
    }

    public static getInstance(): HandInteractionManager {
        if (!HandInteractionManager.instance) {
            HandInteractionManager.instance = new HandInteractionManager();
        }
        return HandInteractionManager.instance;
    }

    private setupSessionStateListener(): void {
        // Listen for session state changes to reset interaction state
        this.sessionStateListener = (state: string) => {
            if (state === 'starting') {
                // Reset initialization time when starting a new session
                this.initializationTime = Date.now();
                this.isInitialized = false;
            }
        };
        platformManager.on('xrsessionstatechange', this.sessionStateListener);
    }

    public setNodeManager(nodeManager: NodeManagerFacade): void {
        this.nodeManager = nodeManager;
        this.interactionManager = NodeInteractionManager.getInstance(nodeManager.getInstancedMesh());
        
        // Mark as initialized but still respect the delay
        setTimeout(() => {
            this.isInitialized = true;
            logger.info(`Hand interaction enabled after ${this.INITIALIZATION_DELAY_MS}ms delay`);
        }, this.INITIALIZATION_DELAY_MS);
    }

    public processHandInput(hand: XRHandWithHaptics): void {
        // Don't process input during initialization period
        if (!this.isInitialized || !this.nodeManager || !this.interactionManager) {
            return;
        }
        
        // Check if enough time has passed since initialization
        const timeSinceInit = Date.now() - this.initializationTime;
        if (timeSinceInit < this.INITIALIZATION_DELAY_MS) {
            return;
        }

        const thumbTip = hand.hand.joints['thumb-tip'];
        const indexTip = hand.hand.joints['index-finger-tip'];

        if (!thumbTip || !indexTip) return;

        const distance = thumbTip.position.distanceTo(indexTip.position);
        const pinchStrength = Math.max(0, 1 - distance / 0.05); // 5cm max distance
        hand.pinchStrength = pinchStrength;

        // Detect pinch gesture
        const isPinching = pinchStrength > 0.9; // 90% threshold for pinch
        if (isPinching !== this.lastPinchState) {
            this.lastPinchState = isPinching;
            if (isPinching) {
                this.handlePinchGesture(indexTip.position);
            }
        }

        // Pass hand data to interaction manager
        this.interactionManager.handleHandInteraction(hand);
    }

    private handlePinchGesture(position: Vector3): void {
        if (!this.nodeManager || !this.interactionManager) return;

        // Get the instance mesh
        const instanceMesh = this.nodeManager.getInstancedMesh();
        if (!instanceMesh) return;

        // Get the intersected node index
        const intersectedNodeIndex = this.interactionManager.getIntersectedNodeIndex(position);
        if (intersectedNodeIndex === -1) return;

        // Get node ID from instance index
        const nodeId = this.nodeManager.getNodeId(intersectedNodeIndex);
        if (!nodeId) return;

        logger.debug(`Pinch gesture detected on node ${nodeId}`);
        
        // Check if we're still in the initialization phase
        if (!this.settingsStore.isInitialized()) {
            logger.warn('Ignoring node interaction - settings not fully initialized');
            return;
        }
        
        // Send node position update through the interaction manager
        this.interactionManager.sendNodeUpdates(nodeId, position);

        // Update local node position
        this.nodeManager.updateNodePositions([{
            id: nodeId,
            data: { position: position.clone(), velocity: new Vector3(0, 0, 0) }
        }]);
    }

    public dispose(): void {
        this.lastPinchState = false;
        this.nodeManager = undefined;
        this.isInitialized = false;
        this.interactionManager = undefined;
        
        // Remove session state listener
        if (this.sessionStateListener) {
            platformManager.removeAllListeners();
        }
    }
}
----
xr/xrInteraction.ts
import { XRSessionManager } from './xrSessionManager';
import { SettingsStore } from '../state/SettingsStore';
import { createLogger, createErrorMetadata } from '../core/logger';
import { WebSocketService } from '../websocket/websocketService';
import { XRSettings } from '../types/settings/xr';
import { platformManager } from '../platform/platformManager';
import * as THREE from 'three';

const logger = createLogger('XRInteraction');

export class XRInteraction {
    private static instance: XRInteraction | null = null;
    private readonly settingsStore: SettingsStore;
    private updateBatch: Map<string, THREE.Vector3> = new Map();
    private batchUpdateTimeout: number | null = null;
    private settingsUnsubscribers: Array<() => void> = [];
    private interactionEnabled: boolean = false;
    private websocketService: WebSocketService;
    private sessionStateListener: ((state: string) => void) | null = null;

    private xrManager: XRSessionManager;
    private constructor(xrManager: XRSessionManager) {
        this.xrManager = xrManager;
        this.settingsStore = SettingsStore.getInstance();
        this.websocketService = WebSocketService.getInstance();
        this.initializeSettings();
        this.setupSessionStateListener();
        
        // Only auto-enter AR if explicitly enabled
        setTimeout(() => {
            this.initializeXRSession();
        }, 1000);
    }
    
    private setupSessionStateListener(): void {
        // Listen for session state changes to reset interaction state
        this.sessionStateListener = (state: string) => {
            if (state === 'ending' || state === 'cooldown') {
                this.clearHandState();
            }
        };
        platformManager.on('xrsessionstatechange', this.sessionStateListener);
    }

    private async initializeXRSession(): Promise<void> {
        try {
            const settings = this.settingsStore.get('xr') as XRSettings;
            if (platformManager.isQuest() && settings?.autoEnterAR && platformManager.xrSessionState === 'inactive') {
                await this.xrManager.initXRSession();
            }
        } catch (error) {
            logger.error('Failed to initialize XR session:', createErrorMetadata(error));
        }
    }

    private initializeSettings(): void {
        try {
            this.setupSettingsSubscription();
        } catch (error) {
            logger.error('Failed to setup settings subscription:', createErrorMetadata(error));
        }
    }

    public static getInstance(xrManager: XRSessionManager): XRInteraction {
        if (!XRInteraction.instance) {
            XRInteraction.instance = new XRInteraction(xrManager);
        }
        return XRInteraction.instance;
    }

    private setupSettingsSubscription(): void {
        // Clear any existing subscriptions
        this.settingsUnsubscribers.forEach(unsub => unsub());
        this.settingsUnsubscribers = [];

        // Subscribe to XR interaction enabled state
        let unsubscriber: (() => void) | undefined;
        this.settingsStore.subscribe('xr.interaction.enabled', (value) => {
            this.interactionEnabled = typeof value === 'boolean' ? value : value === 'true';
            if (!this.interactionEnabled) {
                this.clearHandState();
            }
        }).then(unsub => {
            unsubscriber = unsub;
            if (unsubscriber) {
                this.settingsUnsubscribers.push(unsubscriber);
            }
        });
    }

    private clearHandState(): void {
        this.updateBatch.clear();
        if (this.batchUpdateTimeout) {
            clearTimeout(this.batchUpdateTimeout);
            this.batchUpdateTimeout = null;
        }
    }

    private scheduleFlush(): void {
        if (this.batchUpdateTimeout !== null) return;
        
        this.batchUpdateTimeout = requestAnimationFrame(() => {
            this.flushPositionUpdates();
            this.batchUpdateTimeout = null;
        });
    }

    private flushPositionUpdates(): void {
        if (this.updateBatch.size === 0) return;

        const updates = Array.from(this.updateBatch.entries()).map(([id, position]) => ({
            id,
            position: position.clone()
        }));

        this.websocketService.sendNodeUpdates(updates);
        this.updateBatch.clear();
    }

    public update(): void {
        if (!this.interactionEnabled) return;
        this.scheduleFlush();
    }

    public dispose(): void {
        // Clear subscriptions
        this.settingsUnsubscribers.forEach(unsub => unsub());
        this.settingsUnsubscribers = [];
        
        // Remove session state listener
        if (this.sessionStateListener) {
            platformManager.removeAllListeners();
        }

        // Flush any pending updates
        this.flushPositionUpdates();

        XRInteraction.instance = null;
    }
}

----
xr/xrSessionManager.ts
import {
    Group,
    GridHelper,
    PlaneGeometry,
    MeshPhongMaterial,
    Mesh,
    RingGeometry,
    MeshBasicMaterial,
    DirectionalLight,
    SphereGeometry,
    Color,
    DoubleSide
} from 'three';
import { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';
import { createLogger } from '../core/utils';
import { platformManager } from '../platform/platformManager';
import { SceneManager } from '../rendering/scene';
import { BACKGROUND_COLOR } from '../core/constants';
import { debugState } from '../core/debugState';
import { NodeManagerFacade } from '../rendering/node/NodeManagerFacade';
import { MaterialFactory } from '../rendering/factories/MaterialFactory';
import { ModularControlPanel } from '../ui/ModularControlPanel';
import { SettingsStore } from '../state/SettingsStore';
import { Settings } from '../types/settings/base';
import { XRSettings } from '../types/settings/xr';
const logger = createLogger('XRSessionManager');

export class XRSessionManager {
    private static instance: XRSessionManager | null = null;
    private readonly sceneManager: SceneManager;
    private readonly settingsStore: SettingsStore;
    private readonly nodeManager: NodeManagerFacade;
    private session: XRSession | null = null;
    /* @ts-ignore - Used in XR session lifecycle */
    private referenceSpace: XRReferenceSpace | null = null;
    private isPresenting: boolean = false;
    private isCleaningUp: boolean = false;
    private settingsUnsubscribe: (() => void) | null = null;
    private currentSettings: XRSettings;
    /* @ts-ignore - Used in XR session lifecycle */
    private hitTestSourceRequested = false;
    /* @ts-ignore - Used in XR session lifecycle */
    private xrAnimationFrameCallback: ((frame: XRFrame) => void) | null = null;

    // XR specific objects
    private cameraRig: Group;
    private arGroup: Group; // Group for AR environment elements (grid, ground plane, etc.)
    private arGraphGroup: Group; // Separate group for graph nodes in AR
    private arUIGroup: Group; // Group for UI elements in AR
    private controllers: Group[];
    private controllerGrips: Group[];
    private controllerModelFactory: XRControllerModelFactory;

    // AR specific objects
    private gridHelper: GridHelper;
    private groundPlane: Mesh;
    private hitTestMarker: Mesh;
    private arLight: DirectionalLight;
    private hitTestSource: XRHitTestSource | null = null;

    // Event handlers
    private xrSessionStartCallback: (() => void) | null = null;
    private xrSessionEndCallback: (() => void) | null = null;
    private controllerAddedCallback: ((controller: Group) => void) | null = null;
    private controllerRemovedCallback: ((controller: Group) => void) | null = null;

    private constructor(sceneManager: SceneManager) {
        this.sceneManager = sceneManager;
        this.settingsStore = SettingsStore.getInstance();
        const settings = this.settingsStore.get('') as Settings;
        const materialFactory = MaterialFactory.getInstance();
        this.nodeManager = NodeManagerFacade.getInstance(
            sceneManager.getScene(),
            sceneManager.getCamera(),
            materialFactory.getNodeMaterial(settings)
        );
        // Initialize with current settings
        this.currentSettings = this.settingsStore.get('xr') as XRSettings;
        
        // Set up settings subscription
        this.setupSettingsSubscription();
        
        // Initialize XR objects
        this.cameraRig = new Group();
        this.arGroup = new Group(); // Group for AR elements
        this.arGraphGroup = new Group(); // Group for graph nodes in AR
        this.arUIGroup = new Group(); // Group for UI elements in AR
        this.controllers = [new Group(), new Group()];
        this.controllerGrips = [new Group(), new Group()];
        this.controllerModelFactory = new XRControllerModelFactory();

        // Set up AR group hierarchy
        this.arGroup.add(this.arGraphGroup);
        this.arGroup.add(this.arUIGroup);

        // Initialize AR objects
        this.gridHelper = this.createGridHelper();
        this.groundPlane = this.createGroundPlane();
        this.hitTestMarker = this.createHitTestMarker();
        this.arLight = this.createARLight();

        // Explicitly ensure ground plane is not visible by default
        this.groundPlane.visible = false;

        this.setupXRObjects();
    }

    private async setupSettingsSubscription(): Promise<void> {
        // Subscribe to XR settings changes
        this.settingsUnsubscribe = await this.settingsStore.subscribe('xr', () => {
            this.currentSettings = this.settingsStore.get('xr') as XRSettings;
            this.applyXRSettings();
        });
    }

    private createGridHelper(): GridHelper {
        const grid = new GridHelper(0.5, 5, 0x808080, 0x808080); // 0.5 meter grid with 5x5 divisions
        grid.material.transparent = true;
        grid.material.opacity = 0.2; // Further reduced opacity
        grid.position.y = -0.01; // Slightly below ground to avoid z-fighting
        grid.visible = false; // Start hidden until AR session begins
        grid.layers.enable(0); // Enable default layer
        grid.layers.enable(1); // Enable AR layer
        return grid;
    }

    private createGroundPlane(): Mesh {
        const geometry = new PlaneGeometry(0.5, 0.5); // 0.5x0.5 meter plane
        const material = new MeshPhongMaterial({
            color: 0x808080, // Medium gray color
            transparent: true,
            opacity: 0.1, // More transparent to avoid visual interference
            side: DoubleSide,
            depthWrite: false, // Prevent depth writing to avoid z-fighting
            depthTest: false // Disable depth testing to prevent occlusion of other elements
        });
        
        const plane = new Mesh(geometry, material);
        plane.rotateX(-Math.PI / 2);
        plane.position.y = -0.015; // Slightly below grid but not too far
        plane.visible = false; // Start hidden until AR session begins
        plane.layers.enable(0); // Enable default layer
        plane.layers.enable(1); // Enable AR layer
        return plane;
    }

    private createHitTestMarker(): Mesh {
        const geometry = new RingGeometry(0.15, 0.2, 32);
        const material = new MeshBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.8,
            side: DoubleSide
        });
        const marker = new Mesh(geometry, material);
        marker.rotateX(-Math.PI / 2);
        marker.visible = false;
        marker.layers.enable(0); // Enable default layer
        marker.layers.enable(1); // Enable AR layer
        return marker;
    }

    private createARLight(): DirectionalLight {
        const light = new DirectionalLight(0xffffff, 1);
        light.position.set(1, 1, 1);
        light.layers.enable(0); // Enable default layer
        light.layers.enable(1); // Enable AR layer
        return light;
    }

    private setupXRObjects(): void {
        const scene = this.sceneManager.getScene();
        
        // Reset and verify initial scales
        this.cameraRig.scale.setScalar(1);
        this.arGroup.scale.setScalar(1);
        this.arGraphGroup.scale.setScalar(1);
        if (debugState.isEnabled() && platformManager.isQuest()) {
            logger.info('Initial scales:', { cameraRig: this.cameraRig.scale.x, arGroup: this.arGroup.scale.x, arGraphGroup: this.arGraphGroup.scale.x });
        }
        
        // Add camera rig to scene
        scene.add(this.cameraRig);

        // Add AR group to camera rig
        this.cameraRig.add(this.arGroup);

        // Add AR objects to AR group
        this.arGroup.add(this.gridHelper);
        this.arGroup.add(this.groundPlane);
        this.arGroup.add(this.hitTestMarker);
        this.arGroup.add(this.arLight);
        this.arGroup.add(this.arGraphGroup);

        // Setup controllers
        this.controllers.forEach((_controller: Group, index: number) => {
            this.setupController(index);
        });

        // Setup controller grips
        this.controllerGrips.forEach((grip: Group) => {
            this.setupControllerGrip(grip);
        });
    }

    private setupController(index: number): void {
        const controller = this.controllers[index];
        const controllerGrip = this.controllerGrips[index];

        // Store event handlers as properties for proper cleanup
        const onControllerConnected = (event: any) => {
            const inputSource = event.data;
            controller.userData.inputSource = inputSource;
            const controllerModel = this.buildController(inputSource);
            controller.add(controllerModel);
            this.notifyControllerAdded(controller);
        };

        const onControllerDisconnected = () => {
            controller.userData.inputSource = null;
            controller.remove(...controller.children);
            this.notifyControllerRemoved(controller);
        };

        // Store handlers in userData for cleanup
        controller.userData.eventHandlers = {
            connected: onControllerConnected,
            disconnected: onControllerDisconnected
        };

        controller.addEventListener('connected', onControllerConnected);
        controller.addEventListener('disconnected', onControllerDisconnected);

        this.cameraRig.add(controller);
        this.cameraRig.add(controllerGrip);
    }

    private setupControllerGrip(grip: Group): void {
        const controllerModel = this.controllerModelFactory.createControllerModel(grip);
        grip.add(controllerModel);
    }

    private buildController(_inputSource: XRInputSource): Group {
        const controller = new Group();
        const geometry = new SphereGeometry(0.1, 16, 16);
        const material = new MeshBasicMaterial({ color: 0xffffff });
        const sphere = new Mesh(geometry, material);
        controller.add(sphere);
        return controller;
    }

    public static getInstance(sceneManager: SceneManager): XRSessionManager {
        if (!XRSessionManager.instance) {
            XRSessionManager.instance = new XRSessionManager(sceneManager);
        }
        return XRSessionManager.instance;
    }

    public setSessionCallbacks(
        onStart: () => void,
        onEnd: () => void,
        onFrame: (frame: XRFrame) => void
    ): void {
        this.xrSessionStartCallback = onStart;
        this.xrSessionEndCallback = onEnd;
        this.xrAnimationFrameCallback = onFrame;
    }

    public isXRPresenting(): boolean {
        return this.isPresenting;
    }

    public async initXRSession(): Promise<void> {
        if (this.isPresenting) {
            if (debugState.isEnabled()) {
                logger.warn('XR session already active');
            }
            return;
        }
        
        if (platformManager.xrSessionState !== 'inactive') {
            if (debugState.isEnabled()) {
                logger.warn('XR session already active');
            }
            return;
        }

        if (!platformManager.getCapabilities().xrSupported || !navigator.xr) {
            throw new Error('XR not supported on this platform');
        }

        try {
            // Check if session mode is supported
            const mode = platformManager.isQuest() ? 'immersive-ar' : 'immersive-vr';
            const isSupported = await navigator.xr.isSessionSupported(mode);
            
            if (!isSupported) {
                throw new Error(`${mode} not supported on this device`);
            }
            
            // Configure features based on mode and platform
            const requiredFeatures = ['local-floor'];
            const optionalFeatures = ['hand-tracking', 'layers'];
            
            // Add mode-specific features for Quest
            if (platformManager.isQuest()) {
                requiredFeatures.push('hit-test');
                optionalFeatures.push(
                    'light-estimation',
                    'plane-detection',
                    'anchors',
                    'depth-sensing',
                    'dom-overlay'
                );
            }
            
            // Request session with configured features
            const sessionInit: XRSessionInit = {
                requiredFeatures,
                optionalFeatures,
                domOverlay: platformManager.isQuest() ? { root: document.body } : undefined
            };
            
            if (debugState.isEnabled()) {
                logger.info('Requesting XR session with config:', {
                    mode,
                    features: sessionInit
                });
            }
            
            const session = await navigator.xr.requestSession(mode, sessionInit);
            platformManager.xrSessionState = 'active';

            if (!session) {
                throw new Error('Failed to create XR session');
            }

            this.session = session;

            // Setup XR rendering
            const renderer = this.sceneManager.getRenderer();
            await renderer.xr.setSession(this.session);
            
            // Configure renderer for AR
            renderer.xr.enabled = true;
            
            // Set up scene for XR mode
            const scene = this.sceneManager.getScene();
            if (platformManager.isQuest()) {
                // Clear background for AR passthrough
                scene.background = null;
            } else {
                // Keep background for VR mode
                scene.background = new Color(BACKGROUND_COLOR);
            }
            
            // Get reference space based on platform
            const spaceType = platformManager.isQuest() ? 'local-floor' : 'bounded-floor';
            this.referenceSpace = await this.session.requestReferenceSpace(spaceType);
            
            // Setup session event handlers
            this.session.addEventListener('end', this.onXRSessionEnd);

            // Enable AR layer for camera
            const camera = this.sceneManager.getCamera();
            camera.layers.enable(1);
            
            // Apply AR scale if in AR mode
            if (platformManager.isQuest()) {
                // Use direct room scale for better AR sizing
                // Use roomScale directly for consistent AR sizing
                const arScale = this.currentSettings.roomScale;
                if (debugState.isEnabled()) {
                    logger.info('Setting initial AR scale:', { 
                        arScale, 
                        roomScale: this.currentSettings.roomScale,
                        cameraRigScale: this.cameraRig.scale.x,
                        arGroupScale: this.arGroup.scale.x,
                        arGraphGroupScale: this.arGraphGroup.scale.x,
                        currentGroupScale: this.arGroup.scale.x
                    });
                }

                this.arGroup.scale.setScalar(arScale);
                
                // Move node instances to arGroup for proper scaling
                const instanceMesh = this.nodeManager.getInstancedMesh();
                if (instanceMesh) {
                    // Enable both layers for the mesh and its children
                    instanceMesh.layers.enable(0);
                    instanceMesh.layers.enable(1);
                    instanceMesh.traverse((child: any) => {
                        if (child.layers) {
                            child.layers.enable(0);
                            child.layers.enable(1);
                        }
                    });
                    this.arGroup.add(instanceMesh);
                }
            }

            // Reset camera rig position
            this.cameraRig.position.set(0, 0, 0);
            this.cameraRig.quaternion.identity();

            // Show AR visualization elements after a short delay to ensure proper placement
            setTimeout(() => {
                this.gridHelper.visible = true;
                // Force ground plane to remain invisible to prevent occlusion of node labels
                this.groundPlane.visible = false;
                this.arLight.visible = true;
            }, 1500); // Increased delay for better stability
            
            this.isPresenting = true;
            if (debugState.isEnabled()) {
                logger.info('XR session initialized');
            }

            // Hide control panel in XR mode
            const controlPanel = ModularControlPanel.getInstance();
            if (controlPanel) {
                controlPanel.hide();
            }

            // Notify session start
            if (this.xrSessionStartCallback) {
                this.xrSessionStartCallback();
            }
        } catch (error) {
            if (debugState.isEnabled()) {
                logger.error('Failed to initialize XR session:', error);
            }
            throw error;
        }
    }

    public async endXRSession(): Promise<void> {
        if (!this.session) {
            return;
        }
        
        // Prevent multiple cleanup attempts
        if (this.isCleaningUp) {
            logger.warn('XR session cleanup already in progress');
            return;
        }
        
        this.isCleaningUp = true;
        platformManager.xrSessionState = 'ending';
        try {
            await this.session.end();
        } catch (error) {
            logger.error('Error ending XR session:', error);
        } finally {
            this.isCleaningUp = false;
        }
    }

    public getControllers(): Group[] {
        return this.controllers;
    }

    public getControllerGrips(): Group[] {
        return this.controllerGrips;
    }

    private notifyControllerAdded(controller: Group): void {
        if (this.controllerAddedCallback) {
            this.controllerAddedCallback(controller);
        }
    }

    private notifyControllerRemoved(controller: Group): void {
        if (this.controllerRemovedCallback) {
            this.controllerRemovedCallback(controller);
        }
    }

    public onXRSessionEnd = (): void => {
        // This happens when user exits XR mode
        
        // Explicitly ensure ground plane and other AR objects are hidden
        this.gridHelper.visible = false;
        this.groundPlane.visible = false;
        this.hitTestMarker.visible = false;
        this.arLight.visible = false;
        
        platformManager.xrSessionState = 'inactive';
        // Return to desktop mode
        platformManager.setXRMode(false);
        
        if (debugState.isEnabled()) {
            logger.info('XR session ended and cleaned up');
        }
        
        // Show control panel and notify session end (only once)
        ModularControlPanel.getInstance()?.show();
        
        // Use setTimeout to ensure the callback is called after the browser has had time to process the session end
        setTimeout(() => {
            this.xrSessionEndCallback?.();
        }, 100);
    }

    private applyXRSettings(): void {
        if (!this.isPresenting) return;

        // Update movement settings
        const controllers = this.getControllers();
        controllers.forEach(controller => {
            const inputSource = controller.userData.inputSource as XRInputSource;
            if (inputSource?.gamepad) {
                // Settings will be applied on next frame in onXRFrame
            }
        });

        // Update visual settings if needed
        if (this.currentSettings.handMeshEnabled !== undefined) {
            controllers.forEach(controller => {
                controller.traverse((object: { name?: string; visible: boolean }) => {
                    if (object.name === 'handMesh') {
                        object.visible = !!this.currentSettings.handMeshEnabled;
                    }
                });
            });
        }

        if (this.currentSettings.handRayEnabled !== undefined) {
            controllers.forEach(controller => {
                controller.traverse((object: { name?: string; visible: boolean }) => {
                    if (object.name === 'ray') {
                        object.visible = !!this.currentSettings.handRayEnabled;
                    }
                });
            });
        }

        // Update room scale if changed
        if (this.currentSettings.roomScale !== undefined) {
            if (platformManager.isQuest()) {
                // Use roomScale directly for consistent AR sizing
                const arScale = Number(this.currentSettings.roomScale);
                if (debugState.isEnabled()) {
                    logger.info('Updating AR scale:', { 
                        arScale, 
                        roomScale: this.currentSettings.roomScale,
                        cameraRigScale: this.cameraRig.scale.x,
                        arGroupScale: this.arGroup.scale.x,
                        arGraphGroupScale: this.arGraphGroup.scale.x,
                        currentGroupScale: this.arGroup.scale.x
                    });
                }
                this.arGroup.scale.setScalar(arScale);
            } else {
                this.cameraRig.scale.setScalar(Number(this.currentSettings.roomScale));
            }
        }
    }

    public dispose(): void {
        if (this.settingsUnsubscribe) {
            this.settingsUnsubscribe();
            this.settingsUnsubscribe = null;
        }

        if (this.session) {
            this.session.removeEventListener('end', this.onXRSessionEnd);
            this.session.end().catch(console.error);
        }

        this.controllers.forEach(controller => {
            const handlers = controller.userData.eventHandlers;
            if (handlers) {
                controller.removeEventListener('connected', handlers.connected);
                controller.removeEventListener('disconnected', handlers.disconnected);
                delete controller.userData.eventHandlers;
            }
            controller.userData.inputSource = null;
        });

        this.controllerGrips.forEach(grip => {
            grip.remove(...grip.children);
        });

        this.hitTestSource?.cancel();
        this.hitTestSource = null;
        this.hitTestSourceRequested = false;

        this.session = null;
        this.referenceSpace = null;
        this.isPresenting = false;

        this.xrSessionStartCallback = null;
        this.xrSessionEndCallback = null;
        this.xrAnimationFrameCallback = null;
        this.controllerAddedCallback = null;
        this.controllerRemovedCallback = null;

        XRSessionManager.instance = null;
    }
}

----
core/debugState.ts
import { SettingsStore } from '../state/SettingsStore';

export interface DebugState {
    enabled: boolean;
    logFullJson: boolean;
    enableDataDebug: boolean;
    enableWebsocketDebug: boolean;
    logBinaryHeaders: boolean;
    // New debug categories for enhanced monitoring
    enablePhysicsDebug: boolean;
    enableNodeDebug: boolean;
    enableShaderDebug: boolean;
    enableMatrixDebug: boolean;
    enablePerformanceDebug: boolean;
    // Binary protocol status tracking
    binaryProtocolEnabled: boolean;
    binaryProtocolStatus: 'inactive' | 'pending' | 'active' | 'error' | 'failed';
}

class DebugStateManager {
    private static instance: DebugStateManager | null = null;
    private state: DebugState = {
        enabled: false,
        logFullJson: false,
        enableDataDebug: false,
        enableWebsocketDebug: false,
        logBinaryHeaders: false,
        enablePhysicsDebug: false,
        enableNodeDebug: false,
        enableShaderDebug: false,
        enableMatrixDebug: false,
        enablePerformanceDebug: false,
        binaryProtocolEnabled: false,
        binaryProtocolStatus: 'inactive'
    };

    private constructor() {}

    public static getInstance(): DebugStateManager {
        if (!DebugStateManager.instance) {
            DebugStateManager.instance = new DebugStateManager();
        }
        return DebugStateManager.instance;
    }

    public async initialize(): Promise<void> {
        const settingsStore = SettingsStore.getInstance();
        await settingsStore.initialize();

        // Load initial debug settings
        this.state = {
            enabled: settingsStore.get('system.debug.enabled') as boolean ?? false,
            logFullJson: settingsStore.get('system.debug.log_full_json') as boolean ?? false,
            enableDataDebug: settingsStore.get('system.debug.enable_data_debug') as boolean ?? false,
            enableWebsocketDebug: settingsStore.get('system.debug.enable_websocket_debug') as boolean ?? false,
            logBinaryHeaders: settingsStore.get('system.debug.log_binary_headers') as boolean ?? false,
            enablePhysicsDebug: settingsStore.get('system.debug.enable_physics_debug') as boolean ?? false,
            enableNodeDebug: settingsStore.get('system.debug.enable_node_debug') as boolean ?? false,
            enableShaderDebug: settingsStore.get('system.debug.enable_shader_debug') as boolean ?? false,
            enableMatrixDebug: settingsStore.get('system.debug.enable_matrix_debug') as boolean ?? false,
            enablePerformanceDebug: settingsStore.get('system.debug.enable_performance_debug') as boolean ?? false,
            binaryProtocolEnabled: false,
            binaryProtocolStatus: 'inactive' as 'inactive' | 'pending' | 'active' | 'error' | 'failed'
        };

        // Subscribe to debug setting changes
        settingsStore.subscribe('system.debug.enabled', (_, value) => {
            this.state.enabled = value as boolean;
            this.updateLoggerConfig();
        });

        settingsStore.subscribe('system.debug.log_full_json', (_, value) => {
            this.state.logFullJson = value as boolean;
            this.updateLoggerConfig();
        });

        settingsStore.subscribe('system.debug.enable_data_debug', (_, value) => {
            this.state.enableDataDebug = value as boolean;
        });

        settingsStore.subscribe('system.debug.enable_websocket_debug', (_, value) => {
            this.state.enableWebsocketDebug = value as boolean;
        });

        settingsStore.subscribe('system.debug.log_binary_headers', (_, value) => {
            this.state.logBinaryHeaders = value as boolean;
        });

        settingsStore.subscribe('system.debug.enable_physics_debug', (_, value) => {
            this.state.enablePhysicsDebug = value as boolean;
        });

        settingsStore.subscribe('system.debug.enable_node_debug', (_, value) => {
            this.state.enableNodeDebug = value as boolean;
        });

        settingsStore.subscribe('system.debug.enable_shader_debug', (_, value) => {
            this.state.enableShaderDebug = value as boolean;
        });

        settingsStore.subscribe('system.debug.enable_matrix_debug', (_, value) => {
            this.state.enableMatrixDebug = value as boolean;
        });

        settingsStore.subscribe('system.debug.enable_performance_debug', (_, value) => {
            this.state.enablePerformanceDebug = value as boolean;
        });

        // Log initial debug state if enabled
        if (this.state.enabled) {
            const { logger } = require('./logger');
            logger.debug('Debug state initialized', { ...this.state });
        }

        this.updateLoggerConfig();
    }

    private updateLoggerConfig(): void {
        const { LoggerConfig } = require('./logger');
        LoggerConfig.setGlobalDebug(this.state.enabled);
        LoggerConfig.setFullJson(this.state.logFullJson);
    }

    public isEnabled(): boolean {
        return this.state.enabled;
    }

    public isWebsocketDebugEnabled(): boolean {
        return this.state.enabled && this.state.enableWebsocketDebug;
    }

    public isDataDebugEnabled(): boolean {
        return this.state.enabled && this.state.enableDataDebug;
    }

    public shouldLogBinaryHeaders(): boolean {
        return this.state.enabled && this.state.logBinaryHeaders;
    }

    public isPhysicsDebugEnabled(): boolean {
        return this.state.enabled && this.state.enablePhysicsDebug;
    }

    public isNodeDebugEnabled(): boolean {
        return this.state.enabled && this.state.enableNodeDebug;
    }

    public isShaderDebugEnabled(): boolean {
        return this.state.enabled && this.state.enableShaderDebug;
    }

    public isMatrixDebugEnabled(): boolean {
        return this.state.enabled && this.state.enableMatrixDebug;
    }

    public isPerformanceDebugEnabled(): boolean {
        return this.state.enabled && this.state.enablePerformanceDebug;
    }

    public isBinaryProtocolEnabled(): boolean {
        return this.state.binaryProtocolEnabled;
    }

    public setBinaryProtocolEnabled(enabled: boolean): void {
        this.state.binaryProtocolEnabled = enabled;
        if (!enabled) {
            this.state.binaryProtocolStatus = 'inactive';
        }
    }

    public getBinaryProtocolStatus(): string {
        return this.state.binaryProtocolStatus;
    }

    public setBinaryProtocolStatus(status: 'inactive' | 'pending' | 'active' | 'error' | 'failed'): void {
        this.state.binaryProtocolStatus = status;
        
        // If we're setting to active or error, implicitly enable the protocol
        if (status === 'active' || status === 'pending') {
            this.state.binaryProtocolEnabled = true;
        }
        
        // Log status changes if debug is enabled
        if (this.state.enabled && this.state.enableWebsocketDebug) {
            const { logger } = require('./logger');
            logger.debug(`Binary protocol status changed to: ${status}`);
        }
    }

    public getState(): DebugState {
        return { ...this.state };
    }
}

export const debugState = DebugStateManager.getInstance();
----
core/utils.ts
/**
 * Core utilities for the LogseqXR visualization system
 */

import { Vector3 } from 'three';
import { debugState } from './debugState';
import { THROTTLE_INTERVAL } from './constants';

// Debug logging utility
export interface Logger {
  log: (message: string, ...args: any[]) => void;
  error: (message: string, ...args: any[]) => void;
  warn: (message: string, ...args: any[]) => void;
  debug: (message: string, ...args: any[]) => void;
  info: (message: string, ...args: any[]) => void;
  performance: (message: string, ...args: any[]) => void;
}

export function createLogger(namespace: string): Logger {
  return {
    log: (message: string, ...args: any[]) => console.log(`[${namespace}] ${message}`, ...args),
    error: (message: string, ...args: any[]) => console.error(`[${namespace}] ${message}`, ...args),
    warn: (message: string, ...args: any[]) => console.warn(`[${namespace}] ${message}`, ...args),
    debug: (message: string, ...args: any[]) => console.debug(`[${namespace}] ${message}`, ...args),
    info: (message: string, ...args: any[]) => console.info(`[${namespace}] ${message}`, ...args),
    performance: (message: string, ...args: any[]) => console.debug(`[${namespace}][Performance] ${message}`, ...args)
  };
}

// Case conversion utilities
export const camelToSnakeCase = (str: string): string => {
  return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
};

export const snakeToCamelCase = (str: string): string => {
  return str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
};

export const convertObjectKeysToSnakeCase = (obj: any): any => {
  if (Array.isArray(obj)) {
    return obj.map(item => convertObjectKeysToSnakeCase(item));
  }
  
  if (obj !== null && typeof obj === 'object') {
    return Object.keys(obj).reduce((acc, key) => {
      const snakeKey = camelToSnakeCase(key);
      acc[snakeKey] = convertObjectKeysToSnakeCase(obj[key]);
      return acc;
    }, {} as any);
  }
  
  return obj;
};

export const convertObjectKeysToCamelCase = (obj: any): any => {
  if (Array.isArray(obj)) {
    return obj.map(item => convertObjectKeysToCamelCase(item));
  }
  
  if (obj !== null && typeof obj === 'object') {
    return Object.keys(obj).reduce((acc, key) => {
      const camelKey = snakeToCamelCase(key);
      acc[camelKey] = convertObjectKeysToCamelCase(obj[key]);
      return acc;
    }, {} as any);
  }
  
  return obj;
};

// Update throttler for performance optimization
export class UpdateThrottler {
  private lastUpdate: number = 0;
  private throttleInterval: number;
  private frameCount: number = 0;
  private totalTime: number = 0;

  constructor(throttleInterval: number = THROTTLE_INTERVAL) {
    this.throttleInterval = throttleInterval;
  }

  /**
   * Check if an update should be allowed based on the throttle interval
   */
  shouldUpdate(): boolean {
    const now = performance.now();
    const elapsed = now - this.lastUpdate;
    
    if (elapsed >= this.throttleInterval) {
      // Update metrics for adaptive throttling
      this.frameCount++;
      this.totalTime += elapsed;
      
      this.lastUpdate = now;
      return true;
    }
    return false;
  }

  /**
   * Get the time remaining until the next update is allowed
   */
  getTimeUntilNextUpdate(): number {
    const now = performance.now();
    const elapsed = now - this.lastUpdate;
    return Math.max(0, this.throttleInterval - elapsed);
  }
  
  /**
   * Get the current effective update rate in Hz
   */
  getRate(): number {
    return this.frameCount > 0 ? (1000 * this.frameCount) / this.totalTime : 0;
  }

  reset(): void {
    this.lastUpdate = 0;
    this.frameCount = 0;
    this.totalTime = 0;
  }
}

// Vector operations
export const vectorOps = {
  add: (a: Vector3, b: Vector3): Vector3 => {
    const result = new Vector3();
    return result.addVectors(a, b);
  },

  subtract: (a: Vector3, b: Vector3): Vector3 => {
    const result = new Vector3();
    return result.subVectors(a, b);
  },

  multiply: (v: Vector3, scalar: number): Vector3 => {
    const result = v.clone();
    return result.multiplyScalar(scalar);
  },

  divide: (v: Vector3, scalar: number): Vector3 => {
    const result = v.clone();
    return result.multiplyScalar(1 / scalar);
  },

  length: (v: Vector3): number => 
    v.length(),

  normalize: (v: Vector3): Vector3 => {
    const result = v.clone();
    return result.normalize().clone();
  },

  distance: (a: Vector3, b: Vector3): number => 
    a.distanceTo(b),

};

/**
 * Validates a Vector3 and fixes any invalid values (NaN, Infinity)
 * @param vec The Vector3 to validate
 * @param maxValue Maximum allowed absolute value for any component
 * @param defaultValue Default value to use if the vector is invalid
 * @returns A new Vector3 with valid values
 */
export const validateAndFixVector3 = (
    vec: Vector3, 
    maxValue: number = 1000, 
    defaultValue: Vector3 = new Vector3(0, 0, 0)
): Vector3 => {
    // Check for NaN or Infinity
    if (isNaN(vec.x) || isNaN(vec.y) || isNaN(vec.z) ||
        !isFinite(vec.x) || !isFinite(vec.y) || !isFinite(vec.z)) {
        // Return a copy of the default value
        return defaultValue.clone();
    }
    
    // Check for values exceeding maximum
    if (Math.abs(vec.x) > maxValue || Math.abs(vec.y) > maxValue || Math.abs(vec.z) > maxValue) {
        // Clamp values to the maximum
        return new Vector3(
            Math.max(-maxValue, Math.min(maxValue, vec.x)),
            Math.max(-maxValue, Math.min(maxValue, vec.y)),
            Math.max(-maxValue, Math.min(maxValue, vec.z))
        );
    }
    
    return vec.clone();
};

// Scale utilities
export const scaleOps = {
  // Normalize a value between min and max
  normalize: (value: number, min: number, max: number): number => {
    return Math.min(max, Math.max(min, value));
  },

  // Map a value from one range to another
  mapRange: (value: number, inMin: number, inMax: number, outMin: number, outMax: number): number => {
    // First normalize to 0-1
    const normalized = (value - inMin) / (inMax - inMin);
    // Then map to output range
    return outMin + normalized * (outMax - outMin);
  },

  // Scale node size from server range to visualization range
  normalizeNodeSize: (size: number, serverMin: number = 20, serverMax: number = 30, visMin: number = 0.15, visMax: number = 0.4): number => {
    return scaleOps.mapRange(size, serverMin, serverMax, visMin, visMax);
  }
};

// Data validation utilities
export const validateGraphData = (data: any): boolean => {
  if (!data || typeof data !== 'object') return false;
  if (!Array.isArray(data.nodes) || !Array.isArray(data.edges)) return false;
  
  // Validate nodes
  for (const node of data.nodes) {
    if (!node.id) return false;
    // Allow position to be either array or Vector3
    if (node.position) {
      if (Array.isArray(node.position)) {
        if (node.position.length !== 3 || 
            typeof node.position[0] !== 'number' ||
            typeof node.position[1] !== 'number' ||
            typeof node.position[2] !== 'number') {
          return false;
        }
      } else if (typeof node.position === 'object') {
        if (typeof node.position.x !== 'number' ||
            typeof node.position.y !== 'number' ||
            typeof node.position.z !== 'number') {
          return false;
        }
      } else {
        return false;
      }
    }
  }
  
  // Validate edges
  for (const edge of data.edges) {
    if (!edge.source || !edge.target) return false;
  }
  
  return true;
};

// Binary data helpers
export const binaryToFloat32Array = (buffer: ArrayBuffer): Float32Array => {
  return new Float32Array(buffer);
};

export const float32ArrayToPositions = (array: Float32Array): Vector3[] => {
  const positions: Vector3[] = [];
  for (let i = 0; i < array.length; i += 3) {
    positions.push(new Vector3(array[i], array[i + 1], array[i + 2]));
  }
  return positions;
};

// Error handling utility
export class VisualizationError extends Error {
  constructor(message: string, public code: string) {
    super(message);
    this.name = 'VisualizationError';
  }
}

// Performance monitoring
export class PerformanceMonitor {
  private logger = createLogger('Performance');
  private metrics: Map<string, number> = new Map();
  private operations: Map<string, { startTime: number, count: number, totalTime: number }> = new Map();

  public startOperation(name: string): void {
    if (debugState.getState().enablePerformanceDebug) {
      this.metrics.set(name, performance.now());
      
      // Initialize operation stats if not exists
      if (!this.operations.has(name)) {
        this.operations.set(name, { startTime: 0, count: 0, totalTime: 0 });
      }
    }
  }

  public endOperation(name: string): void {
    if (debugState.getState().enablePerformanceDebug) {
      const startTime = this.metrics.get(name);
      if (startTime) {
        const duration = performance.now() - startTime;
        this.metrics.delete(name);
        
        // Update operation stats
        const stats = this.operations.get(name);
        if (stats) {
          stats.count++;
          stats.totalTime += duration;
          
          this.logger.performance(`Operation: ${name}`, {
            duration,
            avgDuration: stats.totalTime / stats.count,
            count: stats.count,
            operation: 'measure'
          });
        }
      }
    }
  }

  public reset(): void {
    this.metrics.clear();
    this.operations.clear();
  }
}

----
core/logger.ts
import { Vector3 } from 'three';
import { debugState } from './debugState';

let debugEnabled = false;
let logFullJson = false;

export interface LogMetadata {
    position?: Vector3;
    velocity?: Vector3;
    component?: string;
    operation?: string;
    duration?: number;
    error?: Error | string | unknown;  // Allow various error types
    nodeId?: string | number;  // Allow both string and number IDs
    message?: string;  // For string messages
    status?: number;   // For HTTP status codes
    size?: number;
    data?: any;        // For arbitrary data objects
    stack?: string;    // For error stacks
    response?: any;    // For API responses
    [key: string]: any; // Allow for additional metadata
}

// Helper functions for creating metadata objects
export const createErrorMetadata = (error: unknown, additionalData?: Record<string, any>): LogMetadata => {
    const metadata: LogMetadata = {
        error,
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        ...additionalData
    };
    return metadata;
};

export const createMessageMetadata = (message: string | number, additionalData?: Record<string, any>): LogMetadata => {
    const metadata: LogMetadata = {
        message: String(message),
        ...additionalData
    };
    return metadata;
};

export const createDataMetadata = (data: any, additionalData?: Record<string, any>): LogMetadata => {
    const metadata: LogMetadata = {
        data,
        ...additionalData
    };
    return metadata;
};

export interface Logger {
    debug: (message: string, metadata?: LogMetadata) => void;
    log: (message: string, metadata?: LogMetadata) => void;
    info: (message: string, metadata?: LogMetadata) => void;
    warn: (message: string, metadata?: LogMetadata) => void;
    error: (message: string, metadata?: LogMetadata) => void;
    physics: (message: string, metadata?: LogMetadata) => void;
    matrix: (message: string, metadata?: LogMetadata) => void;
    performance: (message: string, metadata?: LogMetadata) => void;
    node: (message: string, metadata?: LogMetadata) => void;
    shader: (message: string, metadata?: LogMetadata) => void;
}

const MAX_VECTOR_PRECISION = 4;
const MAX_DURATION_PRECISION = 2;

export function setDebugEnabled(enabled: boolean, fullJson: boolean = false): void {
    debugEnabled = enabled;
    logFullJson = fullJson;
}

export function createLogger(context: string): Logger {
    const prefix = `[${context}]`;
    
    const formatMetadata = (metadata?: LogMetadata): string => {
        if (!metadata) return '';

        const formattedMetadata: Record<string, any> = {};

        // Format Vector3 values with limited precision
        if (metadata.position) {
            formattedMetadata.position = {
                x: metadata.position.x.toFixed(MAX_VECTOR_PRECISION),
                y: metadata.position.y.toFixed(MAX_VECTOR_PRECISION),
                z: metadata.position.z.toFixed(MAX_VECTOR_PRECISION)
            };
        }

        if (metadata.velocity) {
            formattedMetadata.velocity = {
                x: metadata.velocity.x.toFixed(MAX_VECTOR_PRECISION),
                y: metadata.velocity.y.toFixed(MAX_VECTOR_PRECISION),
                z: metadata.velocity.z.toFixed(MAX_VECTOR_PRECISION)
            };
        }

        // Format duration with limited precision
        if (metadata.duration !== undefined) {
            formattedMetadata.duration = `${metadata.duration.toFixed(MAX_DURATION_PRECISION)}ms`;
        }

        // Handle error objects
        if (metadata.error instanceof Error) {
            formattedMetadata.error = {
                name: metadata.error.name,
                message: metadata.error.message,
                stack: metadata.error.stack
            };
        } else if (metadata.error !== undefined) {
            // Handle non-Error error types
            formattedMetadata.error = {
                message: String(metadata.error),
                type: typeof metadata.error,
                value: metadata.error
            };
        }

        // Copy remaining metadata
        Object.entries(metadata).forEach(([key, value]) => {
            if (!formattedMetadata[key] && value !== undefined) {
                formattedMetadata[key] = value;
            }
        });

        if (logFullJson) {
            return JSON.stringify(formattedMetadata, null, 2);
        }

        // Compact format for non-full JSON mode
        const metadataStr = JSON.stringify(formattedMetadata);
        return metadataStr.length > 2 ? ` ${metadataStr}` : '';
    };

    // Add timestamp to prefix
    const getPrefix = () => {
        const now = new Date();
        const timestamp = now.toISOString().split('T')[1].slice(0, -1);
        return `${timestamp} ${prefix}`;
    };
    
    return {
        debug: (message: string, metadata?: LogMetadata): void => {
            if (debugEnabled) {
                console.debug(getPrefix(), message, formatMetadata(metadata));
            }
        },
        log: (message: string, metadata?: LogMetadata): void => {
            if (debugEnabled) {
                console.log(getPrefix(), message, formatMetadata(metadata));
            }
        },
        info: (message: string, metadata?: LogMetadata): void => {
            if (debugEnabled) {
                console.info(getPrefix(), message, formatMetadata(metadata));
            }
        },
        warn: (message: string, metadata?: LogMetadata): void => {
            console.warn(getPrefix(), message, formatMetadata(metadata));
        },
        error: (message: string, metadata?: LogMetadata): void => {
            console.error(getPrefix(), message, formatMetadata(metadata));
        },
        physics: (message: string, metadata?: LogMetadata): void => {
            if (debugEnabled && debugState.isPhysicsDebugEnabled()) {
                console.debug(`${getPrefix()}[Physics]`, message, formatMetadata(metadata));
            }
        },
        matrix: (message: string, metadata?: LogMetadata): void => {
            if (debugEnabled && debugState.isMatrixDebugEnabled()) {
                console.debug(`${getPrefix()}[Matrix]`, message, formatMetadata(metadata));
            }
        },
        performance: (message: string, metadata?: LogMetadata): void => {
            if (debugEnabled && debugState.isPerformanceDebugEnabled()) {
                console.debug(`${getPrefix()}[Performance]`, message, formatMetadata(metadata));
            }
        },
        node: (message: string, metadata?: LogMetadata): void => {
            if (debugEnabled && debugState.isNodeDebugEnabled()) {
                console.debug(`${getPrefix()}[Node]`, message, formatMetadata(metadata));
            }
        },
        shader: (message: string, metadata?: LogMetadata): void => {
            if (debugEnabled && debugState.isShaderDebugEnabled()) {
                console.debug(`${getPrefix()}[Shader]`, message, formatMetadata(metadata));
            }
        }
    };
}

// Create and export a global logger configuration
export const LoggerConfig = {
    setGlobalDebug(enabled: boolean) {
        debugEnabled = enabled;
        if (enabled) {
            console.log(`[Logger] Debug logging enabled`);
        }
    },
    setFullJson(enabled: boolean) {
        logFullJson = enabled;
    }
};

// Create core logger instance
export const logger = createLogger('core');

----
core/constants.ts
/**
 * Application constants
 */

// Environment detection
export const IS_DEVELOPMENT = process.env.NODE_ENV !== 'production';

// API configuration
export const API_BASE = '';  // Base URL is constructed in buildApiUrl

// API paths
export const API_PATHS = {
    SETTINGS: 'user-settings',
    WEBSOCKET: 'websocket',
    GRAPH: 'graph',
    FILES: 'files'
} as const;

// API endpoints
export const API_ENDPOINTS = {
    // Graph endpoints
    GRAPH_DATA: '/api/graph/data',
    GRAPH_UPDATE: '/api/graph/update',
    GRAPH_PAGINATED: '/api/graph/data/paginated',
    
    // Settings endpoints
    SETTINGS_ROOT: '/api/user-settings',
    VISUALIZATION_SETTINGS: '/api/user-settings/visualization',
    WEBSOCKET_SETTINGS: '/api/settings/websocket',
    
    // WebSocket endpoints
    WEBSOCKET_CONTROL: '/api/websocket/control',
    
    // File endpoints
    FILES: '/api/files',
    
    // Auth endpoints
    AUTH_NOSTR: '/api/auth/nostr',
    AUTH_NOSTR_VERIFY: '/api/auth/nostr/verify',
    AUTH_NOSTR_LOGOUT: '/api/auth/nostr/logout'
} as const;

export type ApiEndpoints = typeof API_ENDPOINTS[keyof typeof API_ENDPOINTS];

// Settings categories matching server's snake_case
export const SETTINGS_CATEGORIES = {
    // Visualization settings
    NODES: 'nodes',
    EDGES: 'edges',
    PHYSICS: 'physics',
    RENDERING: 'rendering',
    ANIMATIONS: 'animations',
    LABELS: 'labels',
    BLOOM: 'bloom',
    HOLOGRAM: 'hologram',
    XR: 'xr',
    
    // System settings
    NETWORK: 'network',
    WEBSOCKET: 'websocket',
    DEBUG: 'debug',
} as const;

// WebSocket configuration
export const WS_MESSAGE_QUEUE_SIZE = 1000;

// Binary protocol configuration
export const FLOATS_PER_NODE = 6;  // x, y, z, vx, vy, vz
export const VERSION_OFFSET = 0;    // No version header
export const BINARY_CHUNK_SIZE = 1000; // Number of nodes to process in one chunk
export const NODE_POSITION_SIZE = 24;  // 6 floats * 4 bytes (position + velocity)

// Performance configuration
export const THROTTLE_INTERVAL = 16; // ~60fps
export const EDGE_UPDATE_BATCH_INTERVAL = 16; // Batch edge updates at ~60fps

// Visualization constants
export const NODE_SIZE = 0.5;
export const NODE_SEGMENTS = 16;
export const EDGE_RADIUS = 0.25;
export const EDGE_SEGMENTS = 8;

// Font configuration
export const FONT_URL = '/fonts/Roboto-Regular.woff2';

// Colors
export const NODE_COLOR = 0x4CAF50;  // Material Design Green
export const NODE_HIGHLIGHT_COLOR = 0xff4444;  // Material Design Red
export const EDGE_COLOR = 0xE0E0E0;  // Material Design Grey 300
export const BACKGROUND_COLOR = 0x212121;  // Material Design Grey 900
export const LABEL_COLOR = 0xFFFFFF;  // White

// Debug configuration
export const DEBUG = {
    NETWORK_PANEL: {
        MAX_MESSAGES: 50,
        ENABLED: IS_DEVELOPMENT
    }
};

----
core/physicsConstants.ts
// Physics parameter ranges and defaults in base units (meters, m/s)
export const PHYSICS_CONSTANTS = {
    // Attraction force (supplementary cohesion)
    ATTRACTION: {
        MIN: 0.001,
        MAX: 0.05,
        DEFAULT: 0.01,  // 1cm/s² base attraction
        RECOMMENDED_RANGE: {
            MIN: 0.005,
            MAX: 0.05
        }
    },

    // Repulsion force (separation between nodes)
    REPULSION: {
        MIN: 0.1,
        MAX: 0.2,
        DEFAULT: 0.1,  // Base repulsion (with 1/d² falloff)
        RECOMMENDED_RANGE: {
            MIN: 0.05,
            MAX: 0.15
        }
    },

    // Spring force (linear with distance)
    SPRING: {
        MIN: 0.001,
        MAX: 0.1,
        DEFAULT: 0.05,  // 5cm/s² per meter of stretch
        RECOMMENDED_RANGE: {
            MIN: 0.02,
            MAX: 0.08
        }
    },

    // Damping (unitless, fraction of velocity retained)
    DAMPING: {
        MIN: 0.5,
        MAX: 0.95,
        DEFAULT: 0.95,  // 95% velocity retention
        RECOMMENDED_RANGE: {
            MIN: 0.9,
            MAX: 0.98
        }
    },

    // Simulation iterations per frame
    ITERATIONS: {
        MIN: 1,
        MAX: 200,
        DEFAULT: 100,  // Balance of stability and performance
        RECOMMENDED_RANGE: {
            MIN: 50,
            MAX: 150
        }
    },

    // Maximum velocity (meters per second)
    MAX_VELOCITY: {
        MIN: 0.01,
        MAX: 0.5,
        DEFAULT: 0.1,  // 10cm/s maximum
        RECOMMENDED_RANGE: {
            MIN: 0.05,
            MAX: 0.2
        }
    },

    // Collision radius (meters)
    COLLISION_RADIUS: {
        MIN: 0.01,
        MAX: 0.2,
        DEFAULT: 0.05,  // 5cm radius
        RECOMMENDED_RANGE: {
            MIN: 0.03,
            MAX: 0.1
        }
    },

    // Bounds size (meters, half-width of cubic bounds)
    BOUNDS_SIZE: {
        MIN: 0.5,
        MAX: 100.0,
        DEFAULT: 50.0,  // 50m bounds (100m cube)
        RECOMMENDED_RANGE: {
            MIN: 10.0,
            MAX: 75.0
        }
    }
};

// Helper types for physics parameters
export type PhysicsParameter = keyof typeof PHYSICS_CONSTANTS;
export type PhysicsRange = {
    MIN: number;
    MAX: number;
    DEFAULT: number;
    RECOMMENDED_RANGE: {
        MIN: number;
        MAX: number;
    };
};

// Helper functions for physics parameters
export const isWithinPhysicsRange = (param: PhysicsParameter, value: number): boolean => {
    const range = PHYSICS_CONSTANTS[param];
    return value >= range.MIN && value <= range.MAX;
};

export const isWithinRecommendedRange = (param: PhysicsParameter, value: number): boolean => {
    const range = PHYSICS_CONSTANTS[param].RECOMMENDED_RANGE;
    return value >= range.MIN && value <= range.MAX;
};

export const getPhysicsRange = (param: PhysicsParameter): PhysicsRange => {
    return PHYSICS_CONSTANTS[param];
};

export const getDefaultPhysicsValue = (param: PhysicsParameter): number => {
    return PHYSICS_CONSTANTS[param].DEFAULT;
};
----
core/resourceMonitor.ts
import { createLogger } from './logger';
import { WebGLRenderer, Texture, BufferGeometry, Material } from 'three';
import { debugState } from './debugState';

const logger = createLogger('ResourceMonitor');

/**
 * ResourceMonitor - Tracks WebGL resources to help identify leaks and performance issues
 */
export class ResourceMonitor {
  private static instance: ResourceMonitor;
  
  private renderers: Set<WebGLRenderer> = new Set();
  private textures: Set<Texture> = new Set();
  private geometries: Set<BufferGeometry> = new Set();
  private materials: Set<Material> = new Set();
  
  private monitoringEnabled: boolean = false;
  private monitorInterval: any = null;
  private monitorFrequency: number = 30000; // 30 seconds (increased from 10)
  
  private constructor() {
    // Private constructor for singleton
  }
  
  public static getInstance(): ResourceMonitor {
    if (!ResourceMonitor.instance) {
      ResourceMonitor.instance = new ResourceMonitor();
    }
    return ResourceMonitor.instance;
  }
  
  /**
   * Start monitoring resources
   * @param frequency Monitoring frequency in milliseconds
   */
  public startMonitoring(frequency: number = 10000): void {
    this.monitoringEnabled = true;
    this.monitorFrequency = frequency;
    
    // Clear any existing interval
    if (this.monitorInterval) {
      clearInterval(this.monitorInterval);
    }
    
    // Set up monitoring interval
    this.monitorInterval = setInterval(() => {
      this.logResourceUsage();
    }, this.monitorFrequency);
    
    logger.info('Resource monitoring started', {
      frequency: this.monitorFrequency
    });
    
    // Log initial state
    this.logResourceUsage();
  }
  
  /**
   * Stop monitoring resources
   */
  public stopMonitoring(): void {
    this.monitoringEnabled = false;
    
    if (this.monitorInterval) {
      clearInterval(this.monitorInterval);
      this.monitorInterval = null;
    }
    
    logger.info('Resource monitoring stopped');
  }
  
  /**
   * Track a WebGL renderer
   */
  public trackRenderer(renderer: WebGLRenderer): void {
    this.renderers.add(renderer);
    logger.debug('Tracking new WebGL renderer', {
      rendererId: this.getObjectId(renderer),
      totalRenderers: this.renderers.size
    });
  }
  
  /**
   * Stop tracking a WebGL renderer
   */
  public untrackRenderer(renderer: WebGLRenderer): void {
    this.renderers.delete(renderer);
    logger.debug('Untracking WebGL renderer', {
      rendererId: this.getObjectId(renderer),
      totalRenderers: this.renderers.size
    });
  }
  
  /**
   * Track a texture
   */
  public trackTexture(texture: Texture): void {
    this.textures.add(texture);
    
    if (this.monitoringEnabled && this.textures.size % 10 === 0) {
      logger.debug('Tracking new texture', {
        textureId: this.getObjectId(texture),
        totalTextures: this.textures.size
      });
    }
  }
  
  /**
   * Stop tracking a texture
   */
  public untrackTexture(texture: Texture): void {
    this.textures.delete(texture);
    
    if (this.monitoringEnabled && this.textures.size % 10 === 0) {
      logger.debug('Untracking texture', {
        textureId: this.getObjectId(texture),
        totalTextures: this.textures.size
      });
    }
  }
  
  /**
   * Track a geometry
   */
  public trackGeometry(geometry: BufferGeometry): void {
    this.geometries.add(geometry);
    
    if (this.monitoringEnabled && this.geometries.size % 10 === 0) {
      logger.debug('Tracking new geometry', {
        geometryId: this.getObjectId(geometry),
        totalGeometries: this.geometries.size
      });
    }
  }
  
  /**
   * Stop tracking a geometry
   */
  public untrackGeometry(geometry: BufferGeometry): void {
    this.geometries.delete(geometry);
    
    if (this.monitoringEnabled && this.geometries.size % 10 === 0) {
      logger.debug('Untracking geometry', {
        geometryId: this.getObjectId(geometry),
        totalGeometries: this.geometries.size
      });
    }
  }
  
  /**
   * Track a material
   */
  public trackMaterial(material: Material): void {
    this.materials.add(material);
    
    if (this.monitoringEnabled && this.materials.size % 10 === 0) {
      logger.debug('Tracking new material', {
        materialId: this.getObjectId(material),
        materialType: this.getObjectType(material),
        totalMaterials: this.materials.size
      });
    }
  }
  
  /**
   * Stop tracking a material
   */
  public untrackMaterial(material: Material): void {
    this.materials.delete(material);
    
    if (this.monitoringEnabled && this.materials.size % 10 === 0) {
      logger.debug('Untracking material', {
        materialId: this.getObjectId(material),
        materialType: this.getObjectType(material),
        totalMaterials: this.materials.size
      });
    }
  }
  
  /**
   * Get a unique identifier for an object
   */
  private getObjectId(obj: any): string {
    // Try to get uuid if available
    if (obj && typeof obj === 'object') {
      if (obj.uuid) {
        return obj.uuid;
      }
      
      // Fall back to object's toString or a random ID
      return obj.toString() || Math.random().toString(36).substring(2, 10);
    }
    
    return 'unknown';
  }
  
  /**
   * Get the type of an object
   */
  private getObjectType(obj: any): string {
    if (obj && typeof obj === 'object') {
      if (obj.type) {
        return obj.type;
      }
      
      return obj.constructor?.name || typeof obj;
    }
    
    return typeof obj;
  }
  
  /**
   * Log current resource usage
   */
  public logResourceUsage(): void {
    // Only log detailed resource usage if performance debugging is enabled
    if (debugState.isPerformanceDebugEnabled()) {
      logger.performance('WebGL resource usage', {
        renderers: this.renderers.size,
        textures: this.textures.size,
        geometries: this.geometries.size,
        materials: this.materials.size,
        memory: this.getMemoryUsage()
      });
      
      // Check for potential issues
      this.checkForIssues();
    }
  }
  
  /**
   * Get memory usage information
   */
  private getMemoryUsage(): any {
    const memory: any = {};
    
    // Get browser memory info if available
    if ((performance as any).memory) {
      memory.totalJSHeapSize = (performance as any).memory.totalJSHeapSize;
      memory.usedJSHeapSize = (performance as any).memory.usedJSHeapSize;
      memory.jsHeapSizeLimit = (performance as any).memory.jsHeapSizeLimit;
    }
    
    return memory;
  }
  
  /**
   * Check for potential resource issues
   */
  private checkForIssues(): void {
    // Check for too many renderers
    if (this.renderers.size > 1) {
      logger.warn('Multiple WebGL renderers detected', {
        count: this.renderers.size,
        recommendation: 'Consider using a shared renderer to avoid WebGL context limits'
      });
    }
    
    // Check for high texture count
    if (this.textures.size > 100) {
      logger.warn('High texture count detected', {
        count: this.textures.size,
        recommendation: 'Consider using texture atlases or disposing unused textures'
      });
    }
    
    // Check for high geometry count
    if (this.geometries.size > 1000) {
      logger.warn('High geometry count detected', {
        count: this.geometries.size,
        recommendation: 'Consider using instanced geometries or merging geometries'
      });
    }
    
    // Check for high material count
    if (this.materials.size > 100) {
      logger.warn('High material count detected', {
        count: this.materials.size,
        recommendation: 'Consider sharing materials between objects'
      });
    }
    
    // Check for memory usage
    if ((performance as any).memory && (performance as any).memory.usedJSHeapSize > 0.8 * (performance as any).memory.jsHeapSizeLimit) {
      logger.warn('High memory usage detected', {
        usedJSHeapSize: (performance as any).memory.usedJSHeapSize,
        jsHeapSizeLimit: (performance as any).memory.jsHeapSizeLimit,
        recommendation: 'Consider disposing unused resources or implementing level-of-detail'
      });
    }
  }
  
  /**
   * Dispose all tracked resources
   */
  public disposeAll(): void {
    // Dispose textures
    this.textures.forEach(texture => {
      texture.dispose();
    });
    this.textures.clear();
    
    // Dispose geometries
    this.geometries.forEach(geometry => {
      geometry.dispose();
    });
    this.geometries.clear();
    
    // Dispose materials
    this.materials.forEach(material => {
      material.dispose();
    });
    this.materials.clear();
    
    // Dispose renderers
    this.renderers.forEach(renderer => {
      renderer.dispose();
    });
    this.renderers.clear();
    
    logger.info('All tracked resources disposed');
  }
}

// Export singleton instance
export const resourceMonitor = ResourceMonitor.getInstance(); 
----
core/api.ts
import { API_ENDPOINTS } from './constants';

// Helper function to get auth headers
export function getAuthHeaders(): HeadersInit {
    const headers: HeadersInit = {
        'Content-Type': 'application/json'
    };
    
    const pubkey = localStorage.getItem('nostr_pubkey');
    const token = localStorage.getItem('nostr_token');
    if (pubkey && token) {
        headers['X-Nostr-Pubkey'] = pubkey;
        headers['Authorization'] = `Bearer ${token}`;
    }
    return headers;
}

// Helper function to build API URLs
export function buildApiUrl(path: string): string {
    const protocol = window.location.protocol;
    const host = window.location.hostname;
    // Check if we're in production (any visionflow.info domain)
    const isProduction = host.endsWith('visionflow.info');
    const base = isProduction 
        ? `${protocol}//${host}`
        : `${protocol}//${host}:4000`;
    return `${base}${path}`; // All paths are already prefixed with /api in constants.ts
}

// Helper function to build settings URL
export function buildSettingsUrl(category: string): string {
    return `${API_ENDPOINTS.SETTINGS_ROOT}/${category}`;
}

// Helper function to build graph URL
export function buildGraphUrl(type: 'data' | 'update' | 'paginated'): string {
    switch (type) {
        case 'paginated':
            return API_ENDPOINTS.GRAPH_PAGINATED;
        case 'update':
            return API_ENDPOINTS.GRAPH_UPDATE;
        default:
            return API_ENDPOINTS.GRAPH_DATA;
    }
}

// Helper function to build files URL
export function buildFilesUrl(path: string): string {
    return `${API_ENDPOINTS.FILES}/${path}`;
}

// Helper function to build WebSocket URL
export function buildWsUrl(): string {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const host = window.location.hostname;
    // Check if we're in production (any visionflow.info domain)
    const isProduction = host.endsWith('visionflow.info');
    
    if (isProduction) {
        // For production, use relative path to ensure proper proxy handling
        return `${protocol}//${host}/wss`;
    } else {
        // For development, use port 4000 as specified in the documentation
        return `${protocol}//${host}:4000/wss`;
    }
}

// Helper function to build visualization settings URL
export function buildVisualizationSettingsUrl(): string {
    return API_ENDPOINTS.VISUALIZATION_SETTINGS;
}

// Helper function to build WebSocket control URL
export function buildWebSocketControlUrl(): string {
    return API_ENDPOINTS.WEBSOCKET_CONTROL;
}

// Helper function to build WebSocket settings URL
export function buildWebSocketSettingsUrl(): string {
    return API_ENDPOINTS.WEBSOCKET_SETTINGS;
}

----
core/types.ts
// Core types for the application
import { Vector3 as ThreeVector3 } from 'three';
import { debugState } from './debugState';
import { createLogger, createDataMetadata } from './logger';

const logger = createLogger('CoreTypes');

export interface Vector3 extends ThreeVector3 {
}

export interface NodeMetadata {
  name?: string;
  lastModified?: number;
  links?: string[];
  references?: string[];
  fileSize?: number;
  hyperlinkCount?: number;
}

export interface NodeData {
  position: Vector3;
  velocity: Vector3;
  metadata?: NodeMetadata;
}

export interface Node {
  id: string;
  metadataId?: string;
  label?: string;
  data: {
    position: Vector3;
    velocity: Vector3;
    metadata?: {
      name?: string;
      lastModified?: number;
      links?: string[];
      references?: string[];
      fileSize?: number;
      hyperlinkCount?: number;
    };
  };
  color?: string;
}

export interface Position {
  x: number;
  y: number;
  z: number;
}

export interface Edge {
  source: string;
  target: string;
  id: string;
  sourcePosition?: Position;
  targetPosition?: Position;
  type?: 'default' | 'hologram';
}

export interface PaginatedGraphData extends GraphData {
  totalPages: number;
  currentPage: number;
  totalItems: number;
  pageSize: number;
}

export interface GraphData {
  nodes: Node[];
  edges: Edge[];
  metadata?: any;
}

// Platform types
export type Platform = 'desktop' | 'quest' | 'browser';

export interface PlatformCapabilities {
  xrSupported: boolean;
  webglSupported: boolean;
  websocketSupported: boolean;
  webxr: boolean;
  handTracking: boolean;
  planeDetection: boolean;
}

// Settings interfaces in camelCase
export interface AnimationSettings {
  enableMotionBlur: boolean;
  enableNodeAnimations: boolean;
  motionBlurStrength: number;
  selectionWaveEnabled: boolean;
  pulseEnabled: boolean;
  rippleEnabled: boolean;
  edgeAnimationEnabled: boolean;
  flowParticlesEnabled: boolean;
}

export interface ARSettings {
  dragThreshold: number;
  enableHandTracking: boolean;
  enableHaptics: boolean;
  enableLightEstimation: boolean;
  enablePassthroughPortal: boolean;
  enablePlaneDetection: boolean;
  enableSceneUnderstanding: boolean;
  gestureSsmoothing: number;
  handMeshColor: string;
  handMeshEnabled: boolean;
  handMeshOpacity: number;
  handPointSize: number;
  handRayColor: string;
  handRayEnabled: boolean;
  handRayWidth: number;
  hapticIntensity: number;
  passthroughBrightness: number;
  passthroughContrast: number;
  passthroughOpacity: number;
  pinchThreshold: number;
  planeColor: string;
  planeOpacity: number;
  portalEdgeColor: string;
  portalEdgeWidth: number;
  portalSize: number;
  roomScale: boolean;
  rotationThreshold: number;
  showPlaneOverlay: boolean;
  snapToFloor: boolean;
  interactionRadius: number;
}

export interface AudioSettings {
  enableAmbientSounds: boolean;
  enableInteractionSounds: boolean;
  enableSpatialAudio: boolean;
}

export interface BloomSettings {
  edgeBloomStrength: number;
  enabled: boolean;
  environmentBloomStrength: number;
  nodeBloomStrength: number;
  radius: number;
  strength: number;
}

export interface ClientDebugSettings {
  enableDataDebug: boolean;
  enableWebsocketDebug: boolean;
  enabled: boolean;
  logBinaryHeaders: boolean;
  logFullJson: boolean;
}

export interface EdgeSettings {
  arrowSize: number;
  baseWidth: number;
  color: string;
  enableArrows: boolean;
  opacity: number;
  widthRange: [number, number];
}

export interface HologramSettings {
  xrQuality: 'low' | 'medium' | 'high';
  desktopQuality: 'low' | 'medium' | 'high';
  ringCount: number;
  ringColor: string;
  ringOpacity: number;
  ringSizes: number[];
  ringRotationSpeed: number;
  enableBuckminster: boolean;
  buckminsterScale: number;
  buckminsterOpacity: number;
  enableGeodesic: boolean;
  geodesicScale: number;
  geodesicOpacity: number;
  enableTriangleSphere: boolean;
  triangleSphereScale: number;
  triangleSphereOpacity: number;
  globalRotationSpeed: number;
}

export interface LabelSettings {
  desktopFontSize: number;
  enableLabels: boolean;
  textColor: string;
  textOutlineColor: string;
  textOutlineWidth: number;
  textResolution: number;
  textPadding: number;
  billboardMode: 'camera' | 'up';
}

export interface NodeSettings {
  baseColor: string;
  baseSize: number;
  sizeRange: [number, number];
  enableMetadataShape: boolean;
  colorRangeAge: [string, string];
  colorRangeLinks: [string, string];
  metalness: number;
  roughness: number;
  opacity: number;
}

export interface NetworkSettings {
  bindAddress: string;
  domain: string;
  enableHttp2: boolean;
  enableRateLimiting: boolean;
  enableTls: boolean;
  maxRequestSize: number;
  minTlsVersion: string;
  port: number;
  rateLimitRequests: number;
  rateLimitWindow: number;
  tunnelId: string;
}

export interface DefaultSettings {
  apiClientTimeout: number;
  enableMetrics: boolean;
  enableRequestLogging: boolean;
  logFormat: string;
  logLevel: string;
  maxConcurrentRequests: number;
  maxPayloadSize: number;
  maxRetries: number;
  metricsPort: number;
  retryDelay: number;
}

export interface SecuritySettings {
  allowedOrigins: string[];
  auditLogPath: string;
  cookieHttponly: boolean;
  cookieSamesite: string;
  cookieSecure: boolean;
  csrfTokenTimeout: number;
  enableAuditLogging: boolean;
  enableRequestValidation: boolean;
  sessionTimeout: number;
}

export interface ServerDebugSettings {
  enabled: boolean;
  enableDataDebug: boolean;
  enableWebsocketDebug: boolean;
  logBinaryHeaders: boolean;
  logFullJson: boolean;
}

export interface PhysicsSettings {
  attractionStrength: number;
  boundsSize: number;
  collisionRadius: number;
  damping: number;
  enableBounds: boolean;
  enabled: boolean;
  iterations: number;
  maxVelocity: number;
  repulsionStrength: number;
  springStrength: number;
}

export interface RenderingSettings {
  ambientLightIntensity: number;
  backgroundColor: string;
  directionalLightIntensity: number;
  enableAmbientOcclusion: boolean;
  enableAntialiasing: boolean;
  enableShadows: boolean;
  environmentIntensity: number;
}

export interface WebSocketSettings {
  url: string;                   // WebSocket server URL
  heartbeatInterval: number;     // Ping interval in seconds (default: 30)
  heartbeatTimeout: number;      // Connection timeout in seconds (default: 60)
  reconnectAttempts: number;     // Max reconnection attempts (default: 3)
  reconnectDelay: number;        // Delay between reconnects in ms (default: 5000)
  binaryChunkSize: number;       // Size of binary chunks
  compressionEnabled: boolean;   // Enable/disable compression
  compressionThreshold: number;  // Compression threshold
  maxConnections: number;        // Maximum connections
  maxMessageSize: number;        // Maximum message size
  updateRate: number;           // Update rate in Hz
}

export interface Settings {
  animations: AnimationSettings;
  ar: ARSettings;
  audio: AudioSettings;
  bloom: BloomSettings;
  clientDebug: ClientDebugSettings;
  default: DefaultSettings;
  edges: EdgeSettings;
  hologram: HologramSettings;
  labels: LabelSettings;
  network: NetworkSettings;
  nodes: NodeSettings;
  physics: PhysicsSettings;
  rendering: RenderingSettings;
  security: SecuritySettings;
  serverDebug: ServerDebugSettings;
  websocket: WebSocketSettings;
}

export type SettingCategory = keyof Settings;
export type SettingKey<T extends SettingCategory> = keyof Settings[T];
export type SettingValue = string | number | boolean | number[] | string[];

// WebSocket message types
export type MessageType = 
  | 'binaryPositionUpdate'  // Real-time position/velocity data
  | 'ping'                  // Connection health check
  | 'pong'                 // Connection health response
  | 'connectionStatus'     // Connection status updates
  | 'enableBinaryUpdates'; // Enable/disable binary updates

// Base WebSocket message interface
export interface BaseWebSocketMessage {
  type: MessageType;
}

// Binary position update message (server -> client)
export interface BinaryPositionUpdateMessage extends BaseWebSocketMessage {
  type: 'binaryPositionUpdate';
  data: {
    nodes: Array<{
      data: {
        position: Vector3;
        velocity: Vector3;
      }
    }>
  };
}

// Connection health messages
export interface PingMessage extends BaseWebSocketMessage {
  type: 'ping';
  timestamp: number;
}

export interface PongMessage extends BaseWebSocketMessage {
  type: 'pong';
  timestamp: number;
}

export type WebSocketMessage =
  | BinaryPositionUpdateMessage
  | PingMessage
  | PongMessage;

// WebSocket error types
export enum WebSocketErrorType {
  CONNECTION_ERROR = 'CONNECTION_ERROR',       // Failed to establish connection
  CONNECTION_LOST = 'CONNECTION_LOST',         // Connection was lost
  TIMEOUT = 'TIMEOUT',                        // Connection timed out
  BINARY_FORMAT_ERROR = 'BINARY_FORMAT_ERROR', // Invalid binary data format
}

export interface WebSocketError {
  type: WebSocketErrorType;
  message: string;
  code?: number;
  details?: any;
}

// Logger interface
export interface Logger {
  log: (message: string, ...args: any[]) => void;
  error: (message: string, ...args: any[]) => void;
  warn: (message: string, ...args: any[]) => void;
  debug: (message: string, ...args: any[]) => void;
  info: (message: string, ...args: any[]) => void;
}

// Helper functions
interface RawNode {
  id: string;
  metadata_id?: string;  // Added to match the server's data structure
  label?: string;
  data: {
    position: Vector3;
    metadata?: NodeMetadata;
  };
  color?: string;
}

interface RawEdge {
  source: string;
  target: string;
  weight?: number;
  id?: string;
}

interface RawGraphData {
  nodes: RawNode[];
  edges: RawEdge[];
  metadata?: any;
  totalPages?: number;
  currentPage?: number;
  totalItems?: number;
  pageSize?: number;
}

export function transformGraphData(data: RawGraphData): GraphData {
  if (debugState.isNodeDebugEnabled()) {
    logger.debug(`Transforming graph data with ${data.nodes.length} nodes and ${data.edges.length} edges`);
  }
  
  const nodes = data.nodes.map((node: RawNode) => transformNodeData(node));
  
  // Create a map for faster position lookup
  const nodePositions = new Map<string, Vector3>();
  nodes.forEach(node => {
    nodePositions.set(node.id, node.data.position);
  });

  const edges = data.edges.map((edge: RawEdge, index: number) => {
    // Check if node positions exist for the source and target
    const sourcePos = nodePositions.get(edge.source);
    const targetPos = nodePositions.get(edge.target);
    
    // For debugging missing edges
    if (!sourcePos || !targetPos) {
      if (debugState.isNodeDebugEnabled()) {
        const missingPart = !sourcePos ? 'source' : 'target';
        const missingId = !sourcePos ? edge.source : edge.target;
        logger.warn(`Edge ${index}: Missing position for ${missingPart} node ID ${missingId}`, createDataMetadata({
          edge: {
            source: edge.source,
            target: edge.target,
            id: edge.id || `${edge.source}_${edge.target}`
          }
        }));
      }
    }
    
    return {
      ...edge,
      // Create temporary zero vector if position is missing to ensure edges are created
      // These will be updated later with actual node positions
      sourcePosition: sourcePos || new ThreeVector3(0, 0, 0),
      targetPosition: targetPos || new ThreeVector3(0, 0, 0),
      id: edge.id || `edge_${edge.source}_${edge.target}`
    };
  });

  return {
    nodes,
    edges,
    metadata: data.metadata
  };
}

export function transformNodeData(node: any): Node {
  // For debugging
  if (debugState.isNodeDebugEnabled()) {
    logger.debug(`Transforming node with ID: ${node.id}, metadata_id: ${node.metadata_id || 'undefined'}, label: ${node.label || 'undefined'}`,
                createDataMetadata({ 
                  hasMetadata: !!node.data?.metadata,
                  metadata_name: node.data?.metadata?.name || 'undefined',
                  fileSize: node.data?.metadata?.fileSize || 'undefined',
                  hyperlinkCount: node.data?.metadata?.hyperlinkCount || 'undefined'
                }));
  }
  
  // CRITICAL FIX: Ensure proper ID mapping
  // The node.id is the numeric ID from the server which is used to track nodes in the 
  // binary protocol. This ID must be preserved exactly as is to ensure proper
  // binding between the node's position/velocity data and its metadata.

  const nodeId = node.id;
  const metadataId = node.metadata_id || node.label || node.id;
  
  // Build metadata (additional information)
  const metadata = {
    // Use the metadata_id (filename) as the metadata name
    name: metadataId,
    lastModified: 
      typeof node.data?.metadata?.lastModified === 'string' ? 
        parseInt(node.data.metadata.lastModified) : 
        (node.data?.metadata?.lastModified || Date.now()),
    links: Array.isArray(node.data?.metadata?.links) ? node.data.metadata.links : [],
    references: Array.isArray(node.data?.metadata?.references) ? node.data.metadata.references : [],
    // Important: make sure to retain file size information specifically
    fileSize: 
      node.data?.metadata?.fileSize !== undefined ? 
        (typeof node.data.metadata.fileSize === 'string' ? 
          parseInt(node.data.metadata.fileSize) : 
          node.data.metadata.fileSize) :
      node.file_size !== undefined ? 
        (typeof node.file_size === 'string' ? parseInt(node.file_size) : node.file_size) : 
       1000, // Default file size of 1KB
    hyperlinkCount: 
      node.data?.metadata?.hyperlinkCount !== undefined ? 
        (typeof node.data.metadata.hyperlinkCount === 'string' ?parseInt(node.data.metadata.hyperlinkCount) : node.data.metadata.hyperlinkCount) : 
        0
  };
  
  // Important: Make sure to log when we have a numeric ID with a metadata name
  if (/^\d+$/.test(node.id) && (node.metadata_id || node.label)) {
    logger.info(`Node ${node.id} has metadata_id: ${node.metadata_id || 'N/A'}, label: ${node.label || 'N/A'}`,
               createDataMetadata({
                 fileSize: metadata.fileSize,
                 hyperlinkCount: metadata.hyperlinkCount
               }));
  }

  return {
    id: nodeId, // The numeric ID string, used for binary protocol
    metadataId: node.metadata_id || node.label || metadata.name, // Preserve server-provided metadata ID
    // CRITICAL: Consistent label handling - use provided label or fallback to metadataId
    // This ensures we always have a correct human-readable label for display
    label: node.label || node.metadata_id || metadata.name, 

    data: {
      // Always create new Vector3 objects to ensure proper type and consistent behavior
      position: new ThreeVector3(node.data.position?.x || 0, node.data.position?.y || 0, node.data.position?.z || 0),
      velocity: new ThreeVector3(node.data.velocity?.x || 0, node.data.velocity?.y || 0, node.data.velocity?.z || 0),
      metadata
    },
    color: node.color
  };
}

----
public/fonts/Roboto-Regular.woff2
wOF2     =     t  =                       dd^`  T	<
|{
 6$ t I3%؋8&4Z|t 8D$uNEPEAk=x9Xz`IR#F+B`}RP|EZ\W[CQBmcm?FgQ3шpL2ٽ[̮!+@U^~ޣ D?jUcUl6{ mCD]htջQ8@PLc

+ZD2K:4{g:~  v  < H^R'8?;uyVW8="FÓ*	@EĴc= Iby8$a){ԶKiIW&Ӕ~}1wM{4!{FH5#Kt5wve; 'NJ	'(%;?DMCq,<=?f _VbA(37v+uYCb
w8AF3n-'U%2؟oٟl"^bj aoF!`
Aj'މ:Zu.[݂pGW:U%Ejq	:IC	SCsJe6Dқ<UM,
&hz} y|9
DᛯjnB$T¬׵?/Q=BC_f#:Bo@]T(vF+d" RRR!~AX>!`p¢,08 9Ό/茓
rQ Qpg\koC3Yyt'd9>#|3Ƹ?֌#$i
g5z֏秲S{3ɲSpS2бw6 Ӣf]﵋F]&^fM%A}؊)ZLUX.&qOq?$nV_[3hQ詎ְ$ڥcEv0CQ4a=jwn'&Vwz'
fxdjqv:ꡔVVF7:HZl*Тtj"O~ۿGJa1F~۷--J%MZ߱}:!%cV1&9עV5hUp}
ѾtS߼w?<=VEk-xƻ1xP@F'O!#LXdÖ{pƓ	&.XX
$4xǞhסSmq&G|O_ClNX\p@Ĉ/~q6A7^SsNjQ#-vV"qwq
a#hoa|'|k/}w0ܯ2"n<0BCPAzǥ
x>CEMTqXUX+SR٘xʀJ)X	2~8A/WѬdq9G
 !4m1I7?ۗν<	o8&0y8/JYc"#>3%ahv|8C%. }pha '|Ɨsи}DK*SY\S%P8'K[J2*f
"D ^ bt6220/:1F0cƁ+ܩIHDJC
Zn;&YxP?%GFN&M<<2db	,Yaéĉg\ʕ#[`
wTxD!PB`!(DDED%
Kh41b(RF45iEMm馛[< CO'g yFb$#|_h~KOdLLW[1Pec`R^rT2Sbt "O7)Q@yAQU)@)`j"[lq11vFVc4F IDfXa9O܉gfCԜ[#9 =371G~$v:H6T>@v"A!nٝfso;}|7
߻/ڊ<H(FІZ{&n2I-	-f[37D'"r?a3m -&J
Uj+jcHD-U<p#l&c:AVvf19g-V9]p%!F$Y0Y`0lTY"_}ܵ
 EHHQ)3{{"_aLb  :c<ˢ	eʹ|
,`}A 3䱪 \@nޤRj1)6jWB$T`~t1Ըd*2SzKw]lüea[=l2t̏k]9]LU)a?OU(>Ai#mÕ'ҥ@NϡՃP㐮ks7;g'~5zoZ2F)+Bbb,.HgsXl.إꠧ ;k1{P16C2E0-@b ٧BL÷d^<Pfdbp3󢑔ܣ/&<#tXTkD9Fίث
Vz倶(<Cl3_5JH6	>U)9NIac_XQO}h	~o~༰Vɕ[JށfK.rf0
^xy0Gռ	KFߛIf <ex2hI;iҰ_D^275 >(?
҅*G78BCXL8y	cA+ESs5Z!C
>!/bx3ڔi{nx[㉭!dS P@Y<˂U{֍Ug'YjbIЙ7rA2UZM%dvxȢ&Wp6պF|J
!:	Rhz oudQʫ#XXxBXa}+l^܊SH0Y	0	fTpV7O'1My$"B5SǛ0PVŜb]$WR
PkE	Lܰ9 E!CK3X;RqtH45Ik`wiLTo7E2%{yU~nVb}8^RNY+;3SٴF|T=JHEIBw	ˡPm;7jMIڐF_sM
U[t
'\y٨叶skHȡ^][!4p̬:"O[+5h %C*1b]|e{*ȹu.ٞHʁ:!/ya]
ܤkg1g=mCл0=SgMTHXV 9?D/[|!GϦ19@od_OW,
:pax^m@MKc+CD%(U+\i!7X
\r>}
Ҷv48?)
,yk
=V|0>sjgVUeȒReT\VHJ+bӯP37L&Yp<
ٮ7ݦ~L-z2=p+q23"s~pʩ
EV8?ެCAۧ=J8M8s+x*"(D(*:)"W}`;k|SUW253ttJ!5Cgu2R˖yD[ǵʷR8'Ul}ݬdPAڇt!':@eAFZI%ϙ}V4ITz_CQNͨT۷3'G˲]PV<>f[ˍ|: Qp	|Hnb^^شm	!4 ź*quk<BI=vK,<-v)y-&S^L⮙LzR<fR]%!V6u\4]
N}&'Y䅓Γ08ko^i_K5K\#)#seC\xL2joآ!IXc'm,*3(9ĮdGsТOt<u6$U(d轢{_'
~/`eKxwGe{?ޜB隑~
GnUkY[
:6xx|O< 녭RoĆNd 
p(!1-Jڲ{'3)MWpHBmg|SwF|qSi;[܆TNa%(˅Iy\:ڝYwEhlƥQVFiyU:RG(fQ!,E 9ۦO_lJ9?d#?JmSQCw~,J$iF..;벍Dm|dqs(MʘZWѥ)^׀
&uVEoZ5F
фS$xPE-~n*+\yd^C/:Wꋕ.Xv`fH$ǉPYrQ{hӐ&y<K"ޓ6Z;kQbyw.sjI
xWg$YW//W/x

Wӈ}$4QB½@@蛄tH53E5{^\Ã=J|Ҝ<JLj'7n/.~^$gw-Ǭ, <ESd/DabLޝ(=q opGU32qrꑌpFל]g[I,'zw؟pΞFtVt<?meE؟X%3V?\8B>&m5_-d7!Ӓ#ogZ(aBh(PLBy*t6gEgbtB+flaTpL0#-du	0sp%8dA*<'41/ހhFj!Ovs+1eҚ!-f7@6aIQ-dLBEץ'~x[
.FnVg62-Y6(;GLRq{OK:1|e,PUwǚFWƳ߃W]CjFc:'Tjx .Gs<u5B\coօTOm$ϳll3oWp_~DddYf*MG
կ0zbW`[ͫ4On37@W_yYk\#Z+qsJorӝȼX|EM>>Ϟֻ\ͦ?T$`@l$ p1G7_<M
(̘	>ˎ%չ% BN9ǁPqumO9G/۬of_z?u0v2K:K̬$ce^.FbgGNVxq/qiq^!b;=NJ+ 
e'dHbBt#[1YCw@z0>Bʟ%XLi \""''.*#Ƶ~씠=\I䋹sDU9ܗk3x\rSKٕ1O~~^l[6R)%JRS":
7

k
(t˸FTKTSD<+GLODhDBpO`xY@UiߐrD}=KoHY	 +,~&8z/k4>㺭51]),rj3=ǿ#dV<zot_Fn+L릟8!ݟݏݎ&SvnڑA|侦WAhRf-nw:1 tɱ۱5/S&[NTyUJ(x:sQo1"cED:3kLv׶I1Aȥf
p/z^Ee&A
v񜝯ʲ_
.W]"6@ԵD{	l vHs3
F-BBP:Y	ɰP9~~~cLiP!(}
?
ک 1r<8qrc>pLb		ȱh|,,=6=$5	a湩Rj玪KϭW--g=O>Zٕ06c-%ꠅb[# Se!/^bϝ9ih~wvo<LCu!N-raPV8yW@DF0٬?bbmԡM\}sW-r@6to]po2=4L,FÂ`dlxDECE]&)n/@X F} wF$jojǝc_	kUj*\Q?H^m-PʉES2""8NsK`nes(H-X~8|=/_tKAƀrH#@V`z(S1ZP']f2eyP`d\1n'ơ6ۮhΞkٽtS;K` ^gXdL`vIrMZc>d\?VK;ͺr	|?4[*KmxKw
<=\7`Xwbf.&wr{7OFns _?
)	-]o#t$2SjldJy˗rvV-ŏһe[owtOrm
]sc9%OV!ۢ[my|F|+L$/qqŻ.	%rwdKrn=SUknJ@2yڕ3ǚB<r}e,x94Y"i)p=^uIoʮCTQj=-YcQǿ+ .pqr#Qs
mNL p;T}LM>Ȟ~߰JjBrS/,-`%q_%[
Y|GM[-[y͏L훏OGc^_b4 xz
Xq(mˮY7e4=E^wT"{A^vZvKka}e=ZlY_
`	zR=U.XF;i5:e
t
A1fFFB:m(gwXYF?Mwp9$5My+6{&(KްfX氺q?vbA{5`e2Qs3I~_?AHoB_di7f$᧶O>!Rbor`rOU241}twS;{݊2eC	!ݍd`ht\%Ar<:ڿX6A2֋?=ܻGAm;ayrKť6a>ځAǸO1XgObu~(Y`(^NH=nYɭK2/vI"k-
Xui,q6PCX0 _>&J-F׺FSB3+nyT53;73\Y/!g斐(STTY9G
\))ȵɤՔ*:f2f #Dވ\,3n2N567MmM\zSrJ-z-fV9r27˅g繁X L^wk4ҫ*j oy~Jk""Lls۶EiϷ$lapS,I{5nGd8{4#:7Z^K]dV׶5J}<}RbP͏'|i]lh]noH	jKHA[̰9=ibkeX3:13%8؎PM5QQ=ܖ]Y/n|
0UOdeI?dCj-5Rm5~v(ld') ..53HpgF@ZP|"RK<RVRRVB
	%
[jhZT`6RD9L,Ϥ4	}202orEG(6Ԡ |!aa6EDN03my0kԼjTXUb#ՔN225RCg=:tIXY3	؝R7S~̇i-3pg>)tgǱqp%W[wz*$JiD0[[绐m@'hHhqz/dh3lBOEFS=Yڽ{=;h1mm=>(<<waT@7mͅǝPo[ؚ$$ۘ3.pSA	a
OGCYz~Ͽdekp_
#㡗ٙ&aʈ>IO?`)뮴p!JswcKvT7--c":Z8]7<Wɹl{%L͞$Gy߻yrбJ$~tPpеp	]}(|scT|KAE)o@GP/rlY+?^BVv	GD;o75wW}Nc4j74bff*D~RQ֣_^V.<{J$ܫn9>Nt1\u{:WCC:\{/޼,t%"Fz_3/M
ԧ(
q(K
̗
NED:vdFc'.mg&\t`%C">صSP/9J"dLЩBiDKl-OoEa޽8@Idҋ?oy5LMHaGDlZ= 6ks67Iy%pJy$F<exkJWr|{r`rAu'[lk=~:gQRxQKRn?ysnJ+	1"
`@|st<(B<p\,V#"`uKo5n[VkvAx˸FDxGFbYcZKXT *䯏&_x2}"x
YiϡkCNvuuhsZldr 2yh)B2!M,$F{|2{Ln7,'|x-n>_Mn`k )P{ᱧd].N ^

Y>q긢5dE(gɢ]\8{jaisarIgAgM'hxP`
e_/-V=8X77Tv9;UbBu@k jjx	Bל3z8&Aa$BPR'`Q,oaYJ+IA2
`ƺV0V4<V2!(1ZE7+-os/+VqFIO&ҾŦ{Lc		xMl
OCZ,QM&ǧqz0
eKtK
;#Ϣy}]m~PB~^zR=-3T&A'S|j;jkY:XX{CP~q(T\G92DqVY`󽩭mٰMMb¯{^ٺpe^p5`hVVnE c>[D;¸ψ;#XűW$4C
H&໼eZozrSZi`U-[P?t1,o4 !@dc ml[AA
-q.O)tLE ml `]LWƳ`^ȇ}H,:w_v[bև]hsQx<'ټI[<q^?X.7y]7٦M>mQ-9nII6F؇`'ֹIoKiD Ban\wo{rbJ诤P`yɰ~y%d3v\\=ՃO<8v7 	"]=#b Z$YtWAE$TXihb/5pR>weO_ڿGv3Do
=&'Z w;=UOUZ*KsrJ {>}i.C)J!1:E3 Z?&=,ŅD{^%DtK(2(`gih=|w
JaȝGCTʾqIòvFG7ٴEWIh$O>罖 7`.~ 5g^h_;~)A)ĥwlSj@#`lv[EwLΜ7cڰRjJ,zdp_([bދv6LӲVڢ.A#y%?`,'@:0uNBp(VLW￳.H yx&n	FE~}Y)7nӉGhZ'	cI)ae:tEƶ|Ff5xИ&qKQlVd(%rb@$V?TUaMݮGe%
az-W+M֌q"XaƿX@éKf>ެ4t:ێTͣg;v
Mx^[\f:o/KԥCU3jY5io~aVQ4 ԤbR<fxIɔ9S>D"x*yzETa| OI,]Ԁ0\6j"y)=XCi~2=%zڌ<:XSkZcrsD#0]y-5g݀z4Nظ1-za\ݨ՞}Qt4[ha2AFOdȋřa@Gwub`pƴX݃InKaXg92cQr,g&wjkȟn0B"AA#k0s/S
挷	rdNUexLenMpv_ä=;׭<7zxkxovwi}fB8"	%IZ*+id	ҵ
T!zB`"9d7Xr)g1ۄwM6ğm1ari}x~׊z2t[0z"<Ƴul< [  WO_շ:K>/q/U]-\G]!F_{0
>W28W+JJRf}1udXʢ`/r35@AhseHGm\nXhL}4dSZȡL V`%9",<i%³yJ \vQ%DRp`FWɹCRE0;YF@wќÑP^[kJ  YJ),۱6L$4fR$%W>eGN2tJ{i틭3e&/֊]:CH|g墶5D,hrV%͕Ӧ@*	229	:x#a3[G5[u v1#濑T֚XLB~[pS:<p?no#bݙcbqN{6D#FT|Hl,+Q@ďSMkI:A۠HCuCuH'bRV	^
CM#gn8V9ʓ¿uoկNTI3*dQa˓X=#ëi8CD |D1lQ3TIo82D
%rJkFbO#N|.VFqR_X;9׾U cƛTb],E?P;ѧ=BM&kF#eg"`9abePȣ\VMnrA@+uwe޺=q3:HH1<uo
I_Svkel
SP1,K-W=7Psx +9\
M2>YAG'1JLcrKm8Pi\v;ȝfoBs7]=G`udI@Idwgs*se-nZxcdiE)tfȤ\q()@By34גIaz[EYHTTVД+w`l0tA=wrֆM/CѓSH(рT-<m[IʲӴ"}E4eRB@H2sIdflcؒ
3;W}VtIzydwjh<޼,ۥ$D3Čіiډͳ~89|̥G }>ӆ5S >Myߙ=ۓ龼[?Е/B:\9ڠvYޜ6At2ûh>V%/lX_M@xng҅ی6U#׵3wOE}Z2L0;YVBXv+sAP (xw{2PWQW=`L^Ujݚ,IɜYL:o|p\·3yo@Bu7y1bviJ12n P>-u0;(BG=aqȊXlb{ΥMs!!*]Y]Vɰb3Q%,]u"_bȶȩؐh!PRYz')O8:	+9<nSDeXii=`o/<јRmɛI-}?.[NO5(ovRƶɘC=EXRBS_-YU U ma,kJ;x]]q)4?7cɍ2(ںe>-ɟ=Gwaa/a^.7vz89K_3/8M0̪siGf41z^l
MeOުu%ĩƝ+VaeA(lVj;t2+hKmy{%4O}']MvdY9wiej/xƂY}([G)ҚD(&}|`ʬf:.Ÿ>N(&Rí/c r@g,M}<KXCAV4Ișp34/Iz"'{ZX ](Mɹp"0@
QLp%رvZn#V=1p@+]YE}Dvi3P-z
і-.4!m=đben}0>C?i{
Rg;L;}\vgɱڵOVqA;'l#٦xWepg?B+yzm'`/ό{z) վr`XNT^Ӓc;HRS:e)qE:蕞8Xe3z0S4êe<Ɗ05FNHBAqme$do^'0Z`YK&#5Z,m<[-G=1?);Cd1{To=޼L1Z
sjOdت5h*i)U}	wg#՝Xd=o]<n^tbD4^].+;e2kRʴ4^ohO%G<%r_;:
	е(jd!\hYRjx+VKKkqKs"_<.Ё
}	hzL~o{4V(?Ge֗n8,\#噦,JǇv
l/"o"t-=g@Mm#4]qAi edR1F<D訉n?H{	gÄ<W>ԠfJ#SOb$A)g!* F( 	jZdYT8H?"x#qDɀ_[1^X$F	JDNbd0EkV!l(st;
t^9"yǕc8^q6g?~jNw,g09w`?3^JBKE5X?eAY*LӶ$ܵcPhe%(]
(#1CySEdH8ITVgyd4uZס9N c-nmsƮfۡVNSoQ9êYiFu. |B)6VsFnjh5 ");ԤĊMevjq&>Z}2:dq~/--U=:'zǉpk$ON RnHOz҉[/<Tom"TǥdLdmUWX;s;e%T_[Dl_;kuLJ:4KJmN%,8⬱%~j뤍Câ:cI
 m[=R\T]Zy̹\_ZU5mY嶈|d6fiVVsڏIdń b ?<o @fX"HXS+h3PK!{"/RԆu PIzvueN=M]jv@7_YӞ4yV$ZF9"G (!`&%
р+FQF3n&+i~ih\y).U"\,YU&\NF侞r$
A٪<JV$BE$LU,K"@tS6dd:G^Y$EJ#xyKe4$
,
rj{><5`6l6%ܤ3$|d/ѺxG\o_i궫Q'氃-lڊAIQ5%ϋI!崓A!p1䲏JtZCXdE#[VB
=aEXdcR	d1+s#]|QǘERSdŏ.
)   
----
public/fonts/helvetiker_regular.typeface.json
{"glyphs":{"ο":{"x_min":0,"x_max":712,"ha":815,"o":"m 356 -25 q 96 88 192 -25 q 0 368 0 201 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 "},"S":{"x_min":0,"x_max":788,"ha":890,"o":"m 788 291 q 662 54 788 144 q 397 -26 550 -26 q 116 68 226 -26 q 0 337 0 168 l 131 337 q 200 152 131 220 q 384 85 269 85 q 557 129 479 85 q 650 270 650 183 q 490 429 650 379 q 194 513 341 470 q 33 739 33 584 q 142 964 33 881 q 388 1041 242 1041 q 644 957 543 1041 q 756 716 756 867 l 625 716 q 561 874 625 816 q 395 933 497 933 q 243 891 309 933 q 164 759 164 841 q 325 609 164 656 q 625 526 475 568 q 788 291 788 454 "},"¦":{"x_min":343,"x_max":449,"ha":792,"o":"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "},"/":{"x_min":183.25,"x_max":608.328125,"ha":792,"o":"m 608 1041 l 266 -129 l 183 -129 l 520 1041 l 608 1041 "},"Τ":{"x_min":-0.4375,"x_max":777.453125,"ha":839,"o":"m 777 893 l 458 893 l 458 0 l 319 0 l 319 892 l 0 892 l 0 1013 l 777 1013 l 777 893 "},"y":{"x_min":0,"x_max":684.78125,"ha":771,"o":"m 684 738 l 388 -83 q 311 -216 356 -167 q 173 -279 252 -279 q 97 -266 133 -279 l 97 -149 q 132 -155 109 -151 q 168 -160 155 -160 q 240 -114 213 -160 q 274 -26 248 -98 l 0 738 l 137 737 l 341 139 l 548 737 l 684 738 "},"Π":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 803 1012 l 803 0 "},"ΐ":{"x_min":-111,"x_max":339,"ha":361,"o":"m 339 800 l 229 800 l 229 925 l 339 925 l 339 800 m -1 800 l -111 800 l -111 925 l -1 925 l -1 800 m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 m 302 1040 l 113 819 l 30 819 l 165 1040 l 302 1040 "},"g":{"x_min":0,"x_max":686,"ha":838,"o":"m 686 34 q 586 -213 686 -121 q 331 -306 487 -306 q 131 -252 216 -306 q 31 -84 31 -190 l 155 -84 q 228 -174 166 -138 q 345 -207 284 -207 q 514 -109 454 -207 q 564 89 564 -27 q 461 6 521 36 q 335 -23 401 -23 q 88 100 184 -23 q 0 370 0 215 q 87 634 0 522 q 330 758 183 758 q 457 728 398 758 q 564 644 515 699 l 564 737 l 686 737 l 686 34 m 582 367 q 529 560 582 481 q 358 652 468 652 q 189 561 250 652 q 135 369 135 482 q 189 176 135 255 q 361 85 251 85 q 529 176 468 85 q 582 367 582 255 "},"²":{"x_min":0,"x_max":442,"ha":539,"o":"m 442 383 l 0 383 q 91 566 0 492 q 260 668 176 617 q 354 798 354 727 q 315 875 354 845 q 227 905 277 905 q 136 869 173 905 q 99 761 99 833 l 14 761 q 82 922 14 864 q 232 974 141 974 q 379 926 316 974 q 442 797 442 878 q 351 635 442 704 q 183 539 321 611 q 92 455 92 491 l 442 455 l 442 383 "},"–":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "},"Κ":{"x_min":0,"x_max":819.5625,"ha":893,"o":"m 819 0 l 650 0 l 294 509 l 139 356 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "},"ƒ":{"x_min":-46.265625,"x_max":392,"ha":513,"o":"m 392 651 l 259 651 l 79 -279 l -46 -278 l 134 651 l 14 651 l 14 751 l 135 751 q 151 948 135 900 q 304 1041 185 1041 q 334 1040 319 1041 q 392 1034 348 1039 l 392 922 q 337 931 360 931 q 271 883 287 931 q 260 793 260 853 l 260 751 l 392 751 l 392 651 "},"e":{"x_min":0,"x_max":714,"ha":813,"o":"m 714 326 l 140 326 q 200 157 140 227 q 359 87 260 87 q 488 130 431 87 q 561 245 545 174 l 697 245 q 577 48 670 123 q 358 -26 484 -26 q 97 85 195 -26 q 0 363 0 197 q 94 642 0 529 q 358 765 195 765 q 626 627 529 765 q 714 326 714 503 m 576 429 q 507 583 564 522 q 355 650 445 650 q 206 583 266 650 q 140 429 152 522 l 576 429 "},"ό":{"x_min":0,"x_max":712,"ha":815,"o":"m 356 -25 q 94 91 194 -25 q 0 368 0 202 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 m 576 1040 l 387 819 l 303 819 l 438 1040 l 576 1040 "},"J":{"x_min":0,"x_max":588,"ha":699,"o":"m 588 279 q 287 -26 588 -26 q 58 73 126 -26 q 0 327 0 158 l 133 327 q 160 172 133 227 q 288 96 198 96 q 426 171 391 96 q 449 336 449 219 l 449 1013 l 588 1013 l 588 279 "},"»":{"x_min":-1,"x_max":503,"ha":601,"o":"m 503 302 l 280 136 l 281 256 l 429 373 l 281 486 l 280 608 l 503 440 l 503 302 m 221 302 l 0 136 l 0 255 l 145 372 l 0 486 l -1 608 l 221 440 l 221 302 "},"©":{"x_min":-3,"x_max":1008,"ha":1106,"o":"m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 741 394 q 661 246 731 302 q 496 190 591 190 q 294 285 369 190 q 228 497 228 370 q 295 714 228 625 q 499 813 370 813 q 656 762 588 813 q 733 625 724 711 l 634 625 q 589 704 629 673 q 498 735 550 735 q 377 666 421 735 q 334 504 334 597 q 374 340 334 408 q 490 272 415 272 q 589 304 549 272 q 638 394 628 337 l 741 394 "},"ώ":{"x_min":0,"x_max":922,"ha":1030,"o":"m 687 1040 l 498 819 l 415 819 l 549 1040 l 687 1040 m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 338 0 202 q 45 551 0 444 q 161 737 84 643 l 302 737 q 175 552 219 647 q 124 336 124 446 q 155 179 124 248 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 341 797 257 q 745 555 797 450 q 619 737 705 637 l 760 737 q 874 551 835 640 q 922 339 922 444 "},"^":{"x_min":193.0625,"x_max":598.609375,"ha":792,"o":"m 598 772 l 515 772 l 395 931 l 277 772 l 193 772 l 326 1013 l 462 1013 l 598 772 "},"«":{"x_min":0,"x_max":507.203125,"ha":604,"o":"m 506 136 l 284 302 l 284 440 l 506 608 l 507 485 l 360 371 l 506 255 l 506 136 m 222 136 l 0 302 l 0 440 l 222 608 l 221 486 l 73 373 l 222 256 l 222 136 "},"D":{"x_min":0,"x_max":828,"ha":935,"o":"m 389 1013 q 714 867 593 1013 q 828 521 828 729 q 712 161 828 309 q 382 0 587 0 l 0 0 l 0 1013 l 389 1013 m 376 124 q 607 247 523 124 q 681 510 681 355 q 607 771 681 662 q 376 896 522 896 l 139 896 l 139 124 l 376 124 "},"∙":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "},"ÿ":{"x_min":0,"x_max":47,"ha":125,"o":"m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 "},"w":{"x_min":0,"x_max":1009.71875,"ha":1100,"o":"m 1009 738 l 783 0 l 658 0 l 501 567 l 345 0 l 222 0 l 0 738 l 130 738 l 284 174 l 432 737 l 576 738 l 721 173 l 881 737 l 1009 738 "},"$":{"x_min":0,"x_max":700,"ha":793,"o":"m 664 717 l 542 717 q 490 825 531 785 q 381 872 450 865 l 381 551 q 620 446 540 522 q 700 241 700 370 q 618 45 700 116 q 381 -25 536 -25 l 381 -152 l 307 -152 l 307 -25 q 81 62 162 -25 q 0 297 0 149 l 124 297 q 169 146 124 204 q 307 81 215 89 l 307 441 q 80 536 148 469 q 13 725 13 603 q 96 910 13 839 q 307 982 180 982 l 307 1077 l 381 1077 l 381 982 q 574 917 494 982 q 664 717 664 845 m 307 565 l 307 872 q 187 831 233 872 q 142 724 142 791 q 180 618 142 656 q 307 565 218 580 m 381 76 q 562 237 562 96 q 517 361 562 313 q 381 423 472 409 l 381 76 "},"\\":{"x_min":-0.015625,"x_max":425.0625,"ha":522,"o":"m 425 -129 l 337 -129 l 0 1041 l 83 1041 l 425 -129 "},"µ":{"x_min":0,"x_max":697.21875,"ha":747,"o":"m 697 -4 q 629 -14 658 -14 q 498 97 513 -14 q 422 9 470 41 q 313 -23 374 -23 q 207 4 258 -23 q 119 81 156 32 l 119 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 173 124 246 q 308 83 216 83 q 452 178 402 83 q 493 359 493 255 l 493 738 l 617 738 l 617 214 q 623 136 617 160 q 673 92 637 92 q 697 96 684 92 l 697 -4 "},"Ι":{"x_min":42,"x_max":181,"ha":297,"o":"m 181 0 l 42 0 l 42 1013 l 181 1013 l 181 0 "},"Ύ":{"x_min":0,"x_max":1144.5,"ha":1214,"o":"m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"’":{"x_min":0,"x_max":139,"ha":236,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "},"Ν":{"x_min":0,"x_max":801,"ha":915,"o":"m 801 0 l 651 0 l 131 822 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 191 l 670 1013 l 801 1013 l 801 0 "},"-":{"x_min":8.71875,"x_max":350.390625,"ha":478,"o":"m 350 317 l 8 317 l 8 428 l 350 428 l 350 317 "},"Q":{"x_min":0,"x_max":968,"ha":1072,"o":"m 954 5 l 887 -79 l 744 35 q 622 -11 687 2 q 483 -26 556 -26 q 127 130 262 -26 q 0 504 0 279 q 127 880 0 728 q 484 1041 262 1041 q 841 884 708 1041 q 968 507 968 735 q 933 293 968 398 q 832 104 899 188 l 954 5 m 723 191 q 802 330 777 248 q 828 499 828 412 q 744 790 828 673 q 483 922 650 922 q 228 791 322 922 q 142 505 142 673 q 227 221 142 337 q 487 91 323 91 q 632 123 566 91 l 520 215 l 587 301 l 723 191 "},"ς":{"x_min":1,"x_max":676.28125,"ha":740,"o":"m 676 460 l 551 460 q 498 595 542 546 q 365 651 448 651 q 199 578 263 651 q 136 401 136 505 q 266 178 136 241 q 508 106 387 142 q 640 -50 640 62 q 625 -158 640 -105 q 583 -278 611 -211 l 465 -278 q 498 -182 490 -211 q 515 -80 515 -126 q 381 12 515 -15 q 134 91 197 51 q 1 388 1 179 q 100 651 1 542 q 354 761 199 761 q 587 680 498 761 q 676 460 676 599 "},"M":{"x_min":0,"x_max":954,"ha":1067,"o":"m 954 0 l 819 0 l 819 869 l 537 0 l 405 0 l 128 866 l 128 0 l 0 0 l 0 1013 l 200 1013 l 472 160 l 757 1013 l 954 1013 l 954 0 "},"Ψ":{"x_min":0,"x_max":1006,"ha":1094,"o":"m 1006 678 q 914 319 1006 429 q 571 200 814 200 l 571 0 l 433 0 l 433 200 q 92 319 194 200 q 0 678 0 429 l 0 1013 l 139 1013 l 139 679 q 191 417 139 492 q 433 326 255 326 l 433 1013 l 571 1013 l 571 326 l 580 326 q 813 423 747 326 q 868 679 868 502 l 868 1013 l 1006 1013 l 1006 678 "},"C":{"x_min":0,"x_max":886,"ha":944,"o":"m 886 379 q 760 87 886 201 q 455 -26 634 -26 q 112 136 236 -26 q 0 509 0 283 q 118 882 0 737 q 469 1041 245 1041 q 748 955 630 1041 q 879 708 879 859 l 745 708 q 649 862 724 805 q 473 920 573 920 q 219 791 312 920 q 136 509 136 675 q 217 229 136 344 q 470 99 311 99 q 672 179 591 99 q 753 379 753 259 l 886 379 "},"!":{"x_min":0,"x_max":138,"ha":236,"o":"m 138 684 q 116 409 138 629 q 105 244 105 299 l 33 244 q 16 465 33 313 q 0 684 0 616 l 0 1013 l 138 1013 l 138 684 m 138 0 l 0 0 l 0 151 l 138 151 l 138 0 "},"{":{"x_min":0,"x_max":480.5625,"ha":578,"o":"m 480 -286 q 237 -213 303 -286 q 187 -45 187 -159 q 194 48 187 -15 q 201 141 201 112 q 164 264 201 225 q 0 314 118 314 l 0 417 q 164 471 119 417 q 201 605 201 514 q 199 665 201 644 q 193 772 193 769 q 241 941 193 887 q 480 1015 308 1015 l 480 915 q 336 866 375 915 q 306 742 306 828 q 310 662 306 717 q 314 577 314 606 q 288 452 314 500 q 176 365 256 391 q 289 275 257 337 q 314 143 314 226 q 313 84 314 107 q 310 -11 310 -5 q 339 -131 310 -94 q 480 -182 377 -182 l 480 -286 "},"X":{"x_min":-0.015625,"x_max":854.15625,"ha":940,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 "},"#":{"x_min":0,"x_max":963.890625,"ha":1061,"o":"m 963 690 l 927 590 l 719 590 l 655 410 l 876 410 l 840 310 l 618 310 l 508 -3 l 393 -2 l 506 309 l 329 310 l 215 -2 l 102 -3 l 212 310 l 0 310 l 36 410 l 248 409 l 312 590 l 86 590 l 120 690 l 347 690 l 459 1006 l 573 1006 l 462 690 l 640 690 l 751 1006 l 865 1006 l 754 690 l 963 690 m 606 590 l 425 590 l 362 410 l 543 410 l 606 590 "},"ι":{"x_min":42,"x_max":284,"ha":361,"o":"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 738 l 167 738 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 "},"Ά":{"x_min":0,"x_max":906.953125,"ha":982,"o":"m 283 1040 l 88 799 l 5 799 l 145 1040 l 283 1040 m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1012 l 529 1012 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "},")":{"x_min":0,"x_max":318,"ha":415,"o":"m 318 365 q 257 25 318 191 q 87 -290 197 -141 l 0 -290 q 140 21 93 -128 q 193 360 193 189 q 141 704 193 537 q 0 1024 97 850 l 87 1024 q 257 706 197 871 q 318 365 318 542 "},"ε":{"x_min":0,"x_max":634.71875,"ha":714,"o":"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 314 0 265 q 128 390 67 353 q 56 460 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 "},"Δ":{"x_min":0,"x_max":952.78125,"ha":1028,"o":"m 952 0 l 0 0 l 400 1013 l 551 1013 l 952 0 m 762 124 l 476 867 l 187 124 l 762 124 "},"}":{"x_min":0,"x_max":481,"ha":578,"o":"m 481 314 q 318 262 364 314 q 282 136 282 222 q 284 65 282 97 q 293 -58 293 -48 q 241 -217 293 -166 q 0 -286 174 -286 l 0 -182 q 143 -130 105 -182 q 171 -2 171 -93 q 168 81 171 22 q 165 144 165 140 q 188 275 165 229 q 306 365 220 339 q 191 455 224 391 q 165 588 165 505 q 168 681 165 624 q 171 742 171 737 q 141 865 171 827 q 0 915 102 915 l 0 1015 q 243 942 176 1015 q 293 773 293 888 q 287 675 293 741 q 282 590 282 608 q 318 466 282 505 q 481 417 364 417 l 481 314 "},"‰":{"x_min":-3,"x_max":1672,"ha":1821,"o":"m 846 0 q 664 76 732 0 q 603 244 603 145 q 662 412 603 344 q 846 489 729 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 846 0 962 0 m 845 103 q 945 143 910 103 q 981 243 981 184 q 947 340 981 301 q 845 385 910 385 q 745 342 782 385 q 709 243 709 300 q 742 147 709 186 q 845 103 781 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 m 1428 0 q 1246 76 1314 0 q 1185 244 1185 145 q 1244 412 1185 344 q 1428 489 1311 489 q 1610 412 1542 489 q 1672 244 1672 343 q 1612 76 1672 144 q 1428 0 1545 0 m 1427 103 q 1528 143 1492 103 q 1564 243 1564 184 q 1530 340 1564 301 q 1427 385 1492 385 q 1327 342 1364 385 q 1291 243 1291 300 q 1324 147 1291 186 q 1427 103 1363 103 "},"a":{"x_min":0,"x_max":698.609375,"ha":794,"o":"m 698 0 q 661 -12 679 -7 q 615 -17 643 -17 q 536 12 564 -17 q 500 96 508 41 q 384 6 456 37 q 236 -25 312 -25 q 65 31 130 -25 q 0 194 0 88 q 118 390 0 334 q 328 435 180 420 q 488 483 476 451 q 495 523 495 504 q 442 619 495 584 q 325 654 389 654 q 209 617 257 654 q 152 513 161 580 l 33 513 q 123 705 33 633 q 332 772 207 772 q 528 712 448 772 q 617 531 617 645 l 617 163 q 624 108 617 126 q 664 90 632 90 l 698 94 l 698 0 m 491 262 l 491 372 q 272 329 350 347 q 128 201 128 294 q 166 113 128 144 q 264 83 205 83 q 414 130 346 83 q 491 262 491 183 "},"—":{"x_min":0,"x_max":941.671875,"ha":1039,"o":"m 941 334 l 0 334 l 0 410 l 941 410 l 941 334 "},"=":{"x_min":8.71875,"x_max":780.953125,"ha":792,"o":"m 780 510 l 8 510 l 8 606 l 780 606 l 780 510 m 780 235 l 8 235 l 8 332 l 780 332 l 780 235 "},"N":{"x_min":0,"x_max":801,"ha":914,"o":"m 801 0 l 651 0 l 131 823 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 193 l 670 1013 l 801 1013 l 801 0 "},"ρ":{"x_min":0,"x_max":712,"ha":797,"o":"m 712 369 q 620 94 712 207 q 362 -26 521 -26 q 230 2 292 -26 q 119 83 167 30 l 119 -278 l 0 -278 l 0 362 q 91 643 0 531 q 355 764 190 764 q 617 647 517 764 q 712 369 712 536 m 583 366 q 530 559 583 480 q 359 651 469 651 q 190 562 252 651 q 135 370 135 483 q 189 176 135 257 q 359 85 250 85 q 528 175 466 85 q 583 366 583 254 "},"2":{"x_min":59,"x_max":731,"ha":792,"o":"m 731 0 l 59 0 q 197 314 59 188 q 457 487 199 315 q 598 691 598 580 q 543 819 598 772 q 411 867 488 867 q 272 811 328 867 q 209 630 209 747 l 81 630 q 182 901 81 805 q 408 986 271 986 q 629 909 536 986 q 731 694 731 826 q 613 449 731 541 q 378 316 495 383 q 201 122 235 234 l 731 122 l 731 0 "},"¯":{"x_min":0,"x_max":941.671875,"ha":938,"o":"m 941 1033 l 0 1033 l 0 1109 l 941 1109 l 941 1033 "},"Z":{"x_min":0,"x_max":779,"ha":849,"o":"m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 "},"u":{"x_min":0,"x_max":617,"ha":729,"o":"m 617 0 l 499 0 l 499 110 q 391 10 460 45 q 246 -25 322 -25 q 61 58 127 -25 q 0 258 0 136 l 0 738 l 125 738 l 125 284 q 156 148 125 202 q 273 82 197 82 q 433 165 369 82 q 493 340 493 243 l 493 738 l 617 738 l 617 0 "},"k":{"x_min":0,"x_max":612.484375,"ha":697,"o":"m 612 738 l 338 465 l 608 0 l 469 0 l 251 382 l 121 251 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 402 l 456 738 l 612 738 "},"Η":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"Α":{"x_min":0,"x_max":906.953125,"ha":985,"o":"m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "},"s":{"x_min":0,"x_max":604,"ha":697,"o":"m 604 217 q 501 36 604 104 q 292 -23 411 -23 q 86 43 166 -23 q 0 238 0 114 l 121 237 q 175 122 121 164 q 300 85 223 85 q 415 112 363 85 q 479 207 479 147 q 361 309 479 276 q 140 372 141 370 q 21 544 21 426 q 111 708 21 647 q 298 761 190 761 q 492 705 413 761 q 583 531 583 643 l 462 531 q 412 625 462 594 q 298 657 363 657 q 199 636 242 657 q 143 558 143 608 q 262 454 143 486 q 484 394 479 397 q 604 217 604 341 "},"B":{"x_min":0,"x_max":778,"ha":876,"o":"m 580 546 q 724 469 670 535 q 778 311 778 403 q 673 83 778 171 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 892 q 691 633 732 693 q 580 546 650 572 m 393 899 l 139 899 l 139 588 l 379 588 q 521 624 462 588 q 592 744 592 667 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 303 635 219 q 559 436 635 389 q 402 477 494 477 l 139 477 l 139 124 l 419 124 "},"…":{"x_min":0,"x_max":614,"ha":708,"o":"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 m 378 0 l 236 0 l 236 151 l 378 151 l 378 0 m 614 0 l 472 0 l 472 151 l 614 151 l 614 0 "},"?":{"x_min":0,"x_max":607,"ha":704,"o":"m 607 777 q 543 599 607 674 q 422 474 482 537 q 357 272 357 391 l 236 272 q 297 487 236 395 q 411 619 298 490 q 474 762 474 691 q 422 885 474 838 q 301 933 371 933 q 179 880 228 933 q 124 706 124 819 l 0 706 q 94 963 0 872 q 302 1044 177 1044 q 511 973 423 1044 q 607 777 607 895 m 370 0 l 230 0 l 230 151 l 370 151 l 370 0 "},"H":{"x_min":0,"x_max":803,"ha":915,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"ν":{"x_min":0,"x_max":675,"ha":761,"o":"m 675 738 l 404 0 l 272 0 l 0 738 l 133 738 l 340 147 l 541 738 l 675 738 "},"c":{"x_min":1,"x_max":701.390625,"ha":775,"o":"m 701 264 q 584 53 681 133 q 353 -26 487 -26 q 91 91 188 -26 q 1 370 1 201 q 92 645 1 537 q 353 761 190 761 q 572 688 479 761 q 690 493 666 615 l 556 493 q 487 606 545 562 q 356 650 428 650 q 186 563 246 650 q 134 372 134 487 q 188 179 134 258 q 359 88 250 88 q 492 136 437 88 q 566 264 548 185 l 701 264 "},"¶":{"x_min":0,"x_max":566.671875,"ha":678,"o":"m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 "},"β":{"x_min":0,"x_max":660,"ha":745,"o":"m 471 550 q 610 450 561 522 q 660 280 660 378 q 578 64 660 151 q 367 -22 497 -22 q 239 5 299 -22 q 126 82 178 32 l 126 -278 l 0 -278 l 0 593 q 54 903 0 801 q 318 1042 127 1042 q 519 964 436 1042 q 603 771 603 887 q 567 644 603 701 q 471 550 532 586 m 337 79 q 476 138 418 79 q 535 279 535 198 q 427 437 535 386 q 226 477 344 477 l 226 583 q 398 620 329 583 q 486 762 486 668 q 435 884 486 833 q 312 935 384 935 q 169 861 219 935 q 126 698 126 797 l 126 362 q 170 169 126 242 q 337 79 224 79 "},"Μ":{"x_min":0,"x_max":954,"ha":1068,"o":"m 954 0 l 819 0 l 819 868 l 537 0 l 405 0 l 128 865 l 128 0 l 0 0 l 0 1013 l 199 1013 l 472 158 l 758 1013 l 954 1013 l 954 0 "},"Ό":{"x_min":0.109375,"x_max":1120,"ha":1217,"o":"m 1120 505 q 994 132 1120 282 q 642 -29 861 -29 q 290 130 422 -29 q 167 505 167 280 q 294 883 167 730 q 650 1046 430 1046 q 999 882 868 1046 q 1120 505 1120 730 m 977 504 q 896 784 977 669 q 644 915 804 915 q 391 785 484 915 q 307 504 307 669 q 391 224 307 339 q 644 95 486 95 q 894 224 803 95 q 977 504 977 339 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"Ή":{"x_min":0,"x_max":1158,"ha":1275,"o":"m 1158 0 l 1022 0 l 1022 475 l 496 475 l 496 0 l 356 0 l 356 1012 l 496 1012 l 496 599 l 1022 599 l 1022 1012 l 1158 1012 l 1158 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"•":{"x_min":0,"x_max":663.890625,"ha":775,"o":"m 663 529 q 566 293 663 391 q 331 196 469 196 q 97 294 194 196 q 0 529 0 393 q 96 763 0 665 q 331 861 193 861 q 566 763 469 861 q 663 529 663 665 "},"¥":{"x_min":0.1875,"x_max":819.546875,"ha":886,"o":"m 563 561 l 697 561 l 696 487 l 520 487 l 482 416 l 482 380 l 697 380 l 695 308 l 482 308 l 482 0 l 342 0 l 342 308 l 125 308 l 125 380 l 342 380 l 342 417 l 303 487 l 125 487 l 125 561 l 258 561 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 l 563 561 "},"(":{"x_min":0,"x_max":318.0625,"ha":415,"o":"m 318 -290 l 230 -290 q 61 23 122 -142 q 0 365 0 190 q 62 712 0 540 q 230 1024 119 869 l 318 1024 q 175 705 219 853 q 125 360 125 542 q 176 22 125 187 q 318 -290 223 -127 "},"U":{"x_min":0,"x_max":796,"ha":904,"o":"m 796 393 q 681 93 796 212 q 386 -25 566 -25 q 101 95 208 -25 q 0 393 0 211 l 0 1013 l 138 1013 l 138 391 q 204 191 138 270 q 394 107 276 107 q 586 191 512 107 q 656 391 656 270 l 656 1013 l 796 1013 l 796 393 "},"γ":{"x_min":0.5,"x_max":744.953125,"ha":822,"o":"m 744 737 l 463 54 l 463 -278 l 338 -278 l 338 54 l 154 495 q 104 597 124 569 q 13 651 67 651 l 0 651 l 0 751 l 39 753 q 168 711 121 753 q 242 594 207 676 l 403 208 l 617 737 l 744 737 "},"α":{"x_min":0,"x_max":765.5625,"ha":809,"o":"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 728 407 760 q 563 637 524 696 l 563 739 l 685 739 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 96 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 "},"F":{"x_min":0,"x_max":683.328125,"ha":717,"o":"m 683 888 l 140 888 l 140 583 l 613 583 l 613 458 l 140 458 l 140 0 l 0 0 l 0 1013 l 683 1013 l 683 888 "},"­":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "},":":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "},"Χ":{"x_min":0,"x_max":854.171875,"ha":935,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 "},"*":{"x_min":116,"x_max":674,"ha":792,"o":"m 674 768 l 475 713 l 610 544 l 517 477 l 394 652 l 272 478 l 178 544 l 314 713 l 116 766 l 153 876 l 341 812 l 342 1013 l 446 1013 l 446 811 l 635 874 l 674 768 "},"†":{"x_min":0,"x_max":777,"ha":835,"o":"m 458 804 l 777 804 l 777 683 l 458 683 l 458 0 l 319 0 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 "},"°":{"x_min":0,"x_max":347,"ha":444,"o":"m 173 802 q 43 856 91 802 q 0 977 0 905 q 45 1101 0 1049 q 173 1153 90 1153 q 303 1098 255 1153 q 347 977 347 1049 q 303 856 347 905 q 173 802 256 802 m 173 884 q 238 910 214 884 q 262 973 262 937 q 239 1038 262 1012 q 173 1064 217 1064 q 108 1037 132 1064 q 85 973 85 1010 q 108 910 85 937 q 173 884 132 884 "},"V":{"x_min":0,"x_max":862.71875,"ha":940,"o":"m 862 1013 l 505 0 l 361 0 l 0 1013 l 143 1013 l 434 165 l 718 1012 l 862 1013 "},"Ξ":{"x_min":0,"x_max":734.71875,"ha":763,"o":"m 723 889 l 9 889 l 9 1013 l 723 1013 l 723 889 m 673 463 l 61 463 l 61 589 l 673 589 l 673 463 m 734 0 l 0 0 l 0 124 l 734 124 l 734 0 "}," ":{"x_min":0,"x_max":0,"ha":853},"Ϋ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 588 1046 l 460 1046 l 460 1189 l 588 1189 l 588 1046 m 360 1046 l 232 1046 l 232 1189 l 360 1189 l 360 1046 m 819 1012 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1012 l 140 1012 l 411 533 l 679 1012 l 819 1012 "},"0":{"x_min":73,"x_max":715,"ha":792,"o":"m 394 -29 q 153 129 242 -29 q 73 479 73 272 q 152 829 73 687 q 394 989 241 989 q 634 829 545 989 q 715 479 715 684 q 635 129 715 270 q 394 -29 546 -29 m 394 89 q 546 211 489 89 q 598 479 598 322 q 548 748 598 640 q 394 871 491 871 q 241 748 298 871 q 190 479 190 637 q 239 211 190 319 q 394 89 296 89 "},"”":{"x_min":0,"x_max":347,"ha":454,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 m 347 851 q 310 737 347 784 q 208 669 273 690 l 208 734 q 267 787 250 741 q 280 873 280 821 l 208 873 l 208 1013 l 347 1013 l 347 851 "},"@":{"x_min":0,"x_max":1260,"ha":1357,"o":"m 1098 -45 q 877 -160 1001 -117 q 633 -203 752 -203 q 155 -29 327 -203 q 0 360 0 127 q 176 802 0 616 q 687 1008 372 1008 q 1123 854 969 1008 q 1260 517 1260 718 q 1155 216 1260 341 q 868 82 1044 82 q 772 106 801 82 q 737 202 737 135 q 647 113 700 144 q 527 82 594 82 q 367 147 420 82 q 314 312 314 212 q 401 565 314 452 q 639 690 498 690 q 810 588 760 690 l 849 668 l 938 668 q 877 441 900 532 q 833 226 833 268 q 853 182 833 198 q 902 167 873 167 q 1088 272 1012 167 q 1159 512 1159 372 q 1051 793 1159 681 q 687 925 925 925 q 248 747 415 925 q 97 361 97 586 q 226 26 97 159 q 627 -122 370 -122 q 856 -87 737 -122 q 1061 8 976 -53 l 1098 -45 m 786 488 q 738 580 777 545 q 643 615 700 615 q 483 517 548 615 q 425 322 425 430 q 457 203 425 250 q 552 156 490 156 q 722 273 665 156 q 786 488 738 309 "},"Ί":{"x_min":0,"x_max":499,"ha":613,"o":"m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 m 499 0 l 360 0 l 360 1012 l 499 1012 l 499 0 "},"i":{"x_min":14,"x_max":136,"ha":275,"o":"m 136 873 l 14 873 l 14 1013 l 136 1013 l 136 873 m 136 0 l 14 0 l 14 737 l 136 737 l 136 0 "},"Β":{"x_min":0,"x_max":778,"ha":877,"o":"m 580 545 q 724 468 671 534 q 778 310 778 402 q 673 83 778 170 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 891 q 691 632 732 692 q 580 545 650 571 m 393 899 l 139 899 l 139 587 l 379 587 q 521 623 462 587 q 592 744 592 666 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 302 635 219 q 559 435 635 388 q 402 476 494 476 l 139 476 l 139 124 l 419 124 "},"υ":{"x_min":0,"x_max":617,"ha":725,"o":"m 617 352 q 540 94 617 199 q 308 -24 455 -24 q 76 94 161 -24 q 0 352 0 199 l 0 739 l 126 739 l 126 355 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 355 492 257 l 492 739 l 617 739 l 617 352 "},"]":{"x_min":0,"x_max":275,"ha":372,"o":"m 275 -281 l 0 -281 l 0 -187 l 151 -187 l 151 920 l 0 920 l 0 1013 l 275 1013 l 275 -281 "},"m":{"x_min":0,"x_max":1019,"ha":1128,"o":"m 1019 0 l 897 0 l 897 454 q 860 591 897 536 q 739 660 816 660 q 613 586 659 660 q 573 436 573 522 l 573 0 l 447 0 l 447 455 q 412 591 447 535 q 294 657 372 657 q 165 586 213 657 q 122 437 122 521 l 122 0 l 0 0 l 0 738 l 117 738 l 117 640 q 202 730 150 697 q 316 763 254 763 q 437 730 381 763 q 525 642 494 697 q 621 731 559 700 q 753 763 682 763 q 943 694 867 763 q 1019 512 1019 625 l 1019 0 "},"χ":{"x_min":8.328125,"x_max":780.5625,"ha":815,"o":"m 780 -278 q 715 -294 747 -294 q 616 -257 663 -294 q 548 -175 576 -227 l 379 133 l 143 -277 l 9 -277 l 313 254 l 163 522 q 127 586 131 580 q 36 640 91 640 q 8 637 27 640 l 8 752 l 52 757 q 162 719 113 757 q 236 627 200 690 l 383 372 l 594 737 l 726 737 l 448 250 l 625 -69 q 670 -153 647 -110 q 743 -188 695 -188 q 780 -184 759 -188 l 780 -278 "},"8":{"x_min":55,"x_max":736,"ha":792,"o":"m 571 527 q 694 424 652 491 q 736 280 736 358 q 648 71 736 158 q 395 -26 551 -26 q 142 69 238 -26 q 55 279 55 157 q 96 425 55 359 q 220 527 138 491 q 120 615 153 562 q 88 726 88 668 q 171 904 88 827 q 395 986 261 986 q 618 905 529 986 q 702 727 702 830 q 670 616 702 667 q 571 527 638 565 m 394 565 q 519 610 475 565 q 563 717 563 655 q 521 823 563 781 q 392 872 474 872 q 265 824 312 872 q 224 720 224 783 q 265 613 224 656 q 394 565 312 565 m 395 91 q 545 150 488 91 q 597 280 597 204 q 546 408 597 355 q 395 465 492 465 q 244 408 299 465 q 194 280 194 356 q 244 150 194 203 q 395 91 299 91 "},"ί":{"x_min":42,"x_max":326.71875,"ha":361,"o":"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 102 239 101 q 284 112 257 104 l 284 3 m 326 1040 l 137 819 l 54 819 l 189 1040 l 326 1040 "},"Ζ":{"x_min":0,"x_max":779.171875,"ha":850,"o":"m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 "},"R":{"x_min":0,"x_max":781.953125,"ha":907,"o":"m 781 0 l 623 0 q 587 242 590 52 q 407 433 585 433 l 138 433 l 138 0 l 0 0 l 0 1013 l 396 1013 q 636 946 539 1013 q 749 731 749 868 q 711 597 749 659 q 608 502 674 534 q 718 370 696 474 q 729 207 722 352 q 781 26 736 62 l 781 0 m 373 551 q 533 594 465 551 q 614 731 614 645 q 532 859 614 815 q 373 896 465 896 l 138 896 l 138 551 l 373 551 "},"o":{"x_min":0,"x_max":713,"ha":821,"o":"m 357 -25 q 94 91 194 -25 q 0 368 0 202 q 93 642 0 533 q 357 761 193 761 q 618 644 518 761 q 713 368 713 533 q 619 91 713 201 q 357 -25 521 -25 m 357 85 q 528 175 465 85 q 584 369 584 255 q 529 562 584 484 q 357 651 467 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 357 85 250 85 "},"5":{"x_min":54.171875,"x_max":738,"ha":792,"o":"m 738 314 q 626 60 738 153 q 382 -23 526 -23 q 155 47 248 -23 q 54 256 54 125 l 183 256 q 259 132 204 174 q 382 91 314 91 q 533 149 471 91 q 602 314 602 213 q 538 469 602 411 q 386 528 475 528 q 284 506 332 528 q 197 439 237 484 l 81 439 l 159 958 l 684 958 l 684 840 l 254 840 l 214 579 q 306 627 258 612 q 407 643 354 643 q 636 552 540 643 q 738 314 738 457 "},"7":{"x_min":58.71875,"x_max":730.953125,"ha":792,"o":"m 730 839 q 469 448 560 641 q 335 0 378 255 l 192 0 q 328 441 235 252 q 593 830 421 630 l 58 830 l 58 958 l 730 958 l 730 839 "},"K":{"x_min":0,"x_max":819.46875,"ha":906,"o":"m 819 0 l 649 0 l 294 509 l 139 355 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "},",":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 -12 q 105 -132 142 -82 q 0 -205 68 -182 l 0 -138 q 57 -82 40 -124 q 70 0 70 -51 l 0 0 l 0 151 l 142 151 l 142 -12 "},"d":{"x_min":0,"x_max":683,"ha":796,"o":"m 683 0 l 564 0 l 564 93 q 456 6 516 38 q 327 -25 395 -25 q 87 100 181 -25 q 0 365 0 215 q 90 639 0 525 q 343 763 187 763 q 564 647 486 763 l 564 1013 l 683 1013 l 683 0 m 582 373 q 529 562 582 484 q 361 653 468 653 q 190 561 253 653 q 135 365 135 479 q 189 175 135 254 q 358 85 251 85 q 529 178 468 85 q 582 373 582 258 "},"¨":{"x_min":-109,"x_max":247,"ha":232,"o":"m 247 1046 l 119 1046 l 119 1189 l 247 1189 l 247 1046 m 19 1046 l -109 1046 l -109 1189 l 19 1189 l 19 1046 "},"E":{"x_min":0,"x_max":736.109375,"ha":789,"o":"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "},"Y":{"x_min":0,"x_max":820,"ha":886,"o":"m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 "},"\"":{"x_min":0,"x_max":299,"ha":396,"o":"m 299 606 l 203 606 l 203 988 l 299 988 l 299 606 m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "},"‹":{"x_min":17.984375,"x_max":773.609375,"ha":792,"o":"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "},"„":{"x_min":0,"x_max":364,"ha":467,"o":"m 141 -12 q 104 -132 141 -82 q 0 -205 67 -182 l 0 -138 q 56 -82 40 -124 q 69 0 69 -51 l 0 0 l 0 151 l 141 151 l 141 -12 m 364 -12 q 327 -132 364 -82 q 222 -205 290 -182 l 222 -138 q 279 -82 262 -124 q 292 0 292 -51 l 222 0 l 222 151 l 364 151 l 364 -12 "},"δ":{"x_min":1,"x_max":710,"ha":810,"o":"m 710 360 q 616 87 710 196 q 356 -28 518 -28 q 99 82 197 -28 q 1 356 1 192 q 100 606 1 509 q 355 703 199 703 q 180 829 288 754 q 70 903 124 866 l 70 1012 l 643 1012 l 643 901 l 258 901 q 462 763 422 794 q 636 592 577 677 q 710 360 710 485 m 584 365 q 552 501 584 447 q 451 602 521 555 q 372 611 411 611 q 197 541 258 611 q 136 355 136 472 q 190 171 136 245 q 358 85 252 85 q 528 173 465 85 q 584 365 584 252 "},"έ":{"x_min":0,"x_max":634.71875,"ha":714,"o":"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 313 0 265 q 128 390 67 352 q 56 459 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 m 520 1040 l 331 819 l 248 819 l 383 1040 l 520 1040 "},"ω":{"x_min":0,"x_max":922,"ha":1031,"o":"m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 "},"´":{"x_min":0,"x_max":96,"ha":251,"o":"m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "},"±":{"x_min":11,"x_max":781,"ha":792,"o":"m 781 490 l 446 490 l 446 255 l 349 255 l 349 490 l 11 490 l 11 586 l 349 586 l 349 819 l 446 819 l 446 586 l 781 586 l 781 490 m 781 21 l 11 21 l 11 115 l 781 115 l 781 21 "},"|":{"x_min":343,"x_max":449,"ha":792,"o":"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "},"ϋ":{"x_min":0,"x_max":617,"ha":725,"o":"m 482 800 l 372 800 l 372 925 l 482 925 l 482 800 m 239 800 l 129 800 l 129 925 l 239 925 l 239 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 "},"§":{"x_min":0,"x_max":593,"ha":690,"o":"m 593 425 q 554 312 593 369 q 467 233 516 254 q 537 83 537 172 q 459 -74 537 -12 q 288 -133 387 -133 q 115 -69 184 -133 q 47 96 47 -6 l 166 96 q 199 7 166 40 q 288 -26 232 -26 q 371 -5 332 -26 q 420 60 420 21 q 311 201 420 139 q 108 309 210 255 q 0 490 0 383 q 33 602 0 551 q 124 687 66 654 q 75 743 93 712 q 58 812 58 773 q 133 984 58 920 q 300 1043 201 1043 q 458 987 394 1043 q 529 814 529 925 l 411 814 q 370 908 404 877 q 289 939 336 939 q 213 911 246 939 q 180 841 180 883 q 286 720 180 779 q 484 612 480 615 q 593 425 593 534 m 467 409 q 355 544 467 473 q 196 630 228 612 q 146 587 162 609 q 124 525 124 558 q 239 387 124 462 q 398 298 369 315 q 448 345 429 316 q 467 409 467 375 "},"b":{"x_min":0,"x_max":685,"ha":783,"o":"m 685 372 q 597 99 685 213 q 347 -25 501 -25 q 219 5 277 -25 q 121 93 161 36 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 634 q 214 723 157 692 q 341 754 272 754 q 591 637 493 754 q 685 372 685 526 m 554 356 q 499 550 554 470 q 328 644 437 644 q 162 556 223 644 q 108 369 108 478 q 160 176 108 256 q 330 83 221 83 q 498 169 435 83 q 554 356 554 245 "},"q":{"x_min":0,"x_max":683,"ha":876,"o":"m 683 -278 l 564 -278 l 564 97 q 474 8 533 39 q 345 -23 415 -23 q 91 93 188 -23 q 0 364 0 203 q 87 635 0 522 q 337 760 184 760 q 466 727 408 760 q 564 637 523 695 l 564 737 l 683 737 l 683 -278 m 582 375 q 527 564 582 488 q 358 652 466 652 q 190 565 253 652 q 135 377 135 488 q 189 179 135 261 q 361 84 251 84 q 530 179 469 84 q 582 375 582 260 "},"Ω":{"x_min":-0.171875,"x_max":969.5625,"ha":1068,"o":"m 969 0 l 555 0 l 555 123 q 744 308 675 194 q 814 558 814 423 q 726 812 814 709 q 484 922 633 922 q 244 820 334 922 q 154 567 154 719 q 223 316 154 433 q 412 123 292 199 l 412 0 l 0 0 l 0 124 l 217 124 q 68 327 122 210 q 15 572 15 444 q 144 911 15 781 q 484 1041 274 1041 q 822 909 691 1041 q 953 569 953 777 q 899 326 953 443 q 750 124 846 210 l 969 124 l 969 0 "},"ύ":{"x_min":0,"x_max":617,"ha":725,"o":"m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 535 1040 l 346 819 l 262 819 l 397 1040 l 535 1040 "},"z":{"x_min":-0.015625,"x_max":613.890625,"ha":697,"o":"m 613 0 l 0 0 l 0 100 l 433 630 l 20 630 l 20 738 l 594 738 l 593 636 l 163 110 l 613 110 l 613 0 "},"™":{"x_min":0,"x_max":894,"ha":1000,"o":"m 389 951 l 229 951 l 229 503 l 160 503 l 160 951 l 0 951 l 0 1011 l 389 1011 l 389 951 m 894 503 l 827 503 l 827 939 l 685 503 l 620 503 l 481 937 l 481 503 l 417 503 l 417 1011 l 517 1011 l 653 580 l 796 1010 l 894 1011 l 894 503 "},"ή":{"x_min":0.78125,"x_max":697,"ha":810,"o":"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 721 124 755 q 200 630 193 687 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 m 479 1040 l 290 819 l 207 819 l 341 1040 l 479 1040 "},"Θ":{"x_min":0,"x_max":960,"ha":1056,"o":"m 960 507 q 833 129 960 280 q 476 -32 698 -32 q 123 129 255 -32 q 0 507 0 280 q 123 883 0 732 q 476 1045 255 1045 q 832 883 696 1045 q 960 507 960 732 m 817 500 q 733 789 817 669 q 476 924 639 924 q 223 792 317 924 q 142 507 142 675 q 222 222 142 339 q 476 89 315 89 q 730 218 636 89 q 817 500 817 334 m 716 449 l 243 449 l 243 571 l 716 571 l 716 449 "},"®":{"x_min":-3,"x_max":1008,"ha":1106,"o":"m 503 532 q 614 562 566 532 q 672 658 672 598 q 614 747 672 716 q 503 772 569 772 l 338 772 l 338 532 l 503 532 m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 788 146 l 678 146 q 653 316 655 183 q 527 449 652 449 l 338 449 l 338 146 l 241 146 l 241 854 l 518 854 q 688 808 621 854 q 766 658 766 755 q 739 563 766 607 q 668 497 713 519 q 751 331 747 472 q 788 164 756 190 l 788 146 "},"~":{"x_min":0,"x_max":833,"ha":931,"o":"m 833 958 q 778 753 833 831 q 594 665 716 665 q 402 761 502 665 q 240 857 302 857 q 131 795 166 857 q 104 665 104 745 l 0 665 q 54 867 0 789 q 237 958 116 958 q 429 861 331 958 q 594 765 527 765 q 704 827 670 765 q 729 958 729 874 l 833 958 "},"Ε":{"x_min":0,"x_max":736.21875,"ha":778,"o":"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "},"³":{"x_min":0,"x_max":450,"ha":547,"o":"m 450 552 q 379 413 450 464 q 220 366 313 366 q 69 414 130 366 q 0 567 0 470 l 85 567 q 126 470 85 504 q 225 437 168 437 q 320 467 280 437 q 360 552 360 498 q 318 632 360 608 q 213 657 276 657 q 195 657 203 657 q 176 657 181 657 l 176 722 q 279 733 249 722 q 334 815 334 752 q 300 881 334 856 q 220 907 267 907 q 133 875 169 907 q 97 781 97 844 l 15 781 q 78 926 15 875 q 220 972 135 972 q 364 930 303 972 q 426 817 426 888 q 344 697 426 733 q 421 642 392 681 q 450 552 450 603 "},"[":{"x_min":0,"x_max":273.609375,"ha":371,"o":"m 273 -281 l 0 -281 l 0 1013 l 273 1013 l 273 920 l 124 920 l 124 -187 l 273 -187 l 273 -281 "},"L":{"x_min":0,"x_max":645.828125,"ha":696,"o":"m 645 0 l 0 0 l 0 1013 l 140 1013 l 140 126 l 645 126 l 645 0 "},"σ":{"x_min":0,"x_max":803.390625,"ha":894,"o":"m 803 628 l 633 628 q 713 368 713 512 q 618 93 713 204 q 357 -25 518 -25 q 94 91 194 -25 q 0 368 0 201 q 94 644 0 533 q 356 761 194 761 q 481 750 398 761 q 608 739 564 739 l 803 739 l 803 628 m 360 85 q 529 180 467 85 q 584 374 584 262 q 527 566 584 490 q 352 651 463 651 q 187 559 247 651 q 135 368 135 478 q 189 175 135 254 q 360 85 251 85 "},"ζ":{"x_min":0,"x_max":573,"ha":642,"o":"m 573 -40 q 553 -162 573 -97 q 510 -278 543 -193 l 400 -278 q 441 -187 428 -219 q 462 -90 462 -132 q 378 -14 462 -14 q 108 45 197 -14 q 0 290 0 117 q 108 631 0 462 q 353 901 194 767 l 55 901 l 55 1012 l 561 1012 l 561 924 q 261 669 382 831 q 128 301 128 489 q 243 117 128 149 q 458 98 350 108 q 573 -40 573 80 "},"θ":{"x_min":0,"x_max":674,"ha":778,"o":"m 674 496 q 601 160 674 304 q 336 -26 508 -26 q 73 153 165 -26 q 0 485 0 296 q 72 840 0 683 q 343 1045 166 1045 q 605 844 516 1045 q 674 496 674 692 m 546 579 q 498 798 546 691 q 336 935 437 935 q 178 798 237 935 q 126 579 137 701 l 546 579 m 546 475 l 126 475 q 170 233 126 348 q 338 80 230 80 q 504 233 447 80 q 546 475 546 346 "},"Ο":{"x_min":0,"x_max":958,"ha":1054,"o":"m 485 1042 q 834 883 703 1042 q 958 511 958 735 q 834 136 958 287 q 481 -26 701 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 729 q 485 1042 263 1042 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 670 q 480 913 640 913 q 226 785 321 913 q 142 504 142 671 q 226 224 142 339 q 480 98 319 98 "},"Γ":{"x_min":0,"x_max":705.28125,"ha":749,"o":"m 705 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 705 1012 l 705 886 "}," ":{"x_min":0,"x_max":0,"ha":375},"%":{"x_min":-3,"x_max":1089,"ha":1186,"o":"m 845 0 q 663 76 731 0 q 602 244 602 145 q 661 412 602 344 q 845 489 728 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 845 0 962 0 m 844 103 q 945 143 909 103 q 981 243 981 184 q 947 340 981 301 q 844 385 909 385 q 744 342 781 385 q 708 243 708 300 q 741 147 708 186 q 844 103 780 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 "},"P":{"x_min":0,"x_max":726,"ha":806,"o":"m 424 1013 q 640 931 555 1013 q 726 719 726 850 q 637 506 726 587 q 413 426 548 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 379 889 l 140 889 l 140 548 l 372 548 q 522 589 459 548 q 593 720 593 637 q 528 845 593 801 q 379 889 463 889 "},"Έ":{"x_min":0,"x_max":1078.21875,"ha":1118,"o":"m 1078 0 l 342 0 l 342 1013 l 1067 1013 l 1067 889 l 481 889 l 481 585 l 1019 585 l 1019 467 l 481 467 l 481 125 l 1078 125 l 1078 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"Ώ":{"x_min":0.125,"x_max":1136.546875,"ha":1235,"o":"m 1136 0 l 722 0 l 722 123 q 911 309 842 194 q 981 558 981 423 q 893 813 981 710 q 651 923 800 923 q 411 821 501 923 q 321 568 321 720 q 390 316 321 433 q 579 123 459 200 l 579 0 l 166 0 l 166 124 l 384 124 q 235 327 289 210 q 182 572 182 444 q 311 912 182 782 q 651 1042 441 1042 q 989 910 858 1042 q 1120 569 1120 778 q 1066 326 1120 443 q 917 124 1013 210 l 1136 124 l 1136 0 m 277 1040 l 83 800 l 0 800 l 140 1041 l 277 1040 "},"_":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 -334 l 0 -334 l 0 -234 l 705 -234 l 705 -334 "},"Ϊ":{"x_min":-110,"x_max":246,"ha":275,"o":"m 246 1046 l 118 1046 l 118 1189 l 246 1189 l 246 1046 m 18 1046 l -110 1046 l -110 1189 l 18 1189 l 18 1046 m 136 0 l 0 0 l 0 1012 l 136 1012 l 136 0 "},"+":{"x_min":23,"x_max":768,"ha":792,"o":"m 768 372 l 444 372 l 444 0 l 347 0 l 347 372 l 23 372 l 23 468 l 347 468 l 347 840 l 444 840 l 444 468 l 768 468 l 768 372 "},"½":{"x_min":0,"x_max":1050,"ha":1149,"o":"m 1050 0 l 625 0 q 712 178 625 108 q 878 277 722 187 q 967 385 967 328 q 932 456 967 429 q 850 484 897 484 q 759 450 798 484 q 721 352 721 416 l 640 352 q 706 502 640 448 q 851 551 766 551 q 987 509 931 551 q 1050 385 1050 462 q 976 251 1050 301 q 829 179 902 215 q 717 68 740 133 l 1050 68 l 1050 0 m 834 985 l 215 -28 l 130 -28 l 750 984 l 834 985 m 224 422 l 142 422 l 142 811 l 0 811 l 0 867 q 104 889 62 867 q 164 973 157 916 l 224 973 l 224 422 "},"Ρ":{"x_min":0,"x_max":720,"ha":783,"o":"m 424 1013 q 637 933 554 1013 q 720 723 720 853 q 633 508 720 591 q 413 426 546 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 378 889 l 140 889 l 140 548 l 371 548 q 521 589 458 548 q 592 720 592 637 q 527 845 592 801 q 378 889 463 889 "},"'":{"x_min":0,"x_max":139,"ha":236,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "},"ª":{"x_min":0,"x_max":350,"ha":397,"o":"m 350 625 q 307 616 328 616 q 266 631 281 616 q 247 673 251 645 q 190 628 225 644 q 116 613 156 613 q 32 641 64 613 q 0 722 0 669 q 72 826 0 800 q 247 866 159 846 l 247 887 q 220 934 247 916 q 162 953 194 953 q 104 934 129 953 q 76 882 80 915 l 16 882 q 60 976 16 941 q 166 1011 104 1011 q 266 979 224 1011 q 308 891 308 948 l 308 706 q 311 679 308 688 q 331 670 315 670 l 350 672 l 350 625 m 247 757 l 247 811 q 136 790 175 798 q 64 726 64 773 q 83 682 64 697 q 132 667 103 667 q 207 690 174 667 q 247 757 247 718 "},"΅":{"x_min":0,"x_max":450,"ha":553,"o":"m 450 800 l 340 800 l 340 925 l 450 925 l 450 800 m 406 1040 l 212 800 l 129 800 l 269 1040 l 406 1040 m 110 800 l 0 800 l 0 925 l 110 925 l 110 800 "},"T":{"x_min":0,"x_max":777,"ha":835,"o":"m 777 894 l 458 894 l 458 0 l 319 0 l 319 894 l 0 894 l 0 1013 l 777 1013 l 777 894 "},"Φ":{"x_min":0,"x_max":915,"ha":997,"o":"m 527 0 l 389 0 l 389 122 q 110 231 220 122 q 0 509 0 340 q 110 785 0 677 q 389 893 220 893 l 389 1013 l 527 1013 l 527 893 q 804 786 693 893 q 915 509 915 679 q 805 231 915 341 q 527 122 696 122 l 527 0 m 527 226 q 712 310 641 226 q 779 507 779 389 q 712 705 779 627 q 527 787 641 787 l 527 226 m 389 226 l 389 787 q 205 698 275 775 q 136 505 136 620 q 206 308 136 391 q 389 226 276 226 "},"⁋":{"x_min":0,"x_max":0,"ha":694},"j":{"x_min":-77.78125,"x_max":167,"ha":349,"o":"m 167 871 l 42 871 l 42 1013 l 167 1013 l 167 871 m 167 -80 q 121 -231 167 -184 q -26 -278 76 -278 l -77 -278 l -77 -164 l -41 -164 q 26 -143 11 -164 q 42 -65 42 -122 l 42 737 l 167 737 l 167 -80 "},"Σ":{"x_min":0,"x_max":756.953125,"ha":819,"o":"m 756 0 l 0 0 l 0 107 l 395 523 l 22 904 l 22 1013 l 745 1013 l 745 889 l 209 889 l 566 523 l 187 125 l 756 125 l 756 0 "},"1":{"x_min":215.671875,"x_max":574,"ha":792,"o":"m 574 0 l 442 0 l 442 697 l 215 697 l 215 796 q 386 833 330 796 q 475 986 447 875 l 574 986 l 574 0 "},"›":{"x_min":18.0625,"x_max":774,"ha":792,"o":"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "},"<":{"x_min":17.984375,"x_max":773.609375,"ha":792,"o":"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "},"£":{"x_min":0,"x_max":704.484375,"ha":801,"o":"m 704 41 q 623 -10 664 5 q 543 -26 583 -26 q 359 15 501 -26 q 243 36 288 36 q 158 23 197 36 q 73 -21 119 10 l 6 76 q 125 195 90 150 q 175 331 175 262 q 147 443 175 383 l 0 443 l 0 512 l 108 512 q 43 734 43 623 q 120 929 43 854 q 358 1010 204 1010 q 579 936 487 1010 q 678 729 678 857 l 678 684 l 552 684 q 504 838 552 780 q 362 896 457 896 q 216 852 263 896 q 176 747 176 815 q 199 627 176 697 q 248 512 217 574 l 468 512 l 468 443 l 279 443 q 297 356 297 398 q 230 194 297 279 q 153 107 211 170 q 227 133 190 125 q 293 142 264 142 q 410 119 339 142 q 516 96 482 96 q 579 105 550 96 q 648 142 608 115 l 704 41 "},"t":{"x_min":0,"x_max":367,"ha":458,"o":"m 367 0 q 312 -5 339 -2 q 262 -8 284 -8 q 145 28 183 -8 q 108 143 108 64 l 108 638 l 0 638 l 0 738 l 108 738 l 108 944 l 232 944 l 232 738 l 367 738 l 367 638 l 232 638 l 232 185 q 248 121 232 140 q 307 102 264 102 q 345 104 330 102 q 367 107 360 107 l 367 0 "},"¬":{"x_min":0,"x_max":706,"ha":803,"o":"m 706 411 l 706 158 l 630 158 l 630 335 l 0 335 l 0 411 l 706 411 "},"λ":{"x_min":0,"x_max":750,"ha":803,"o":"m 750 -7 q 679 -15 716 -15 q 538 59 591 -15 q 466 214 512 97 l 336 551 l 126 0 l 0 0 l 270 705 q 223 837 247 770 q 116 899 190 899 q 90 898 100 899 l 90 1004 q 152 1011 125 1011 q 298 938 244 1011 q 373 783 326 901 l 605 192 q 649 115 629 136 q 716 95 669 95 l 736 95 q 750 97 745 97 l 750 -7 "},"W":{"x_min":0,"x_max":1263.890625,"ha":1351,"o":"m 1263 1013 l 995 0 l 859 0 l 627 837 l 405 0 l 265 0 l 0 1013 l 136 1013 l 342 202 l 556 1013 l 701 1013 l 921 207 l 1133 1012 l 1263 1013 "},">":{"x_min":18.0625,"x_max":774,"ha":792,"o":"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "},"v":{"x_min":0,"x_max":675.15625,"ha":761,"o":"m 675 738 l 404 0 l 272 0 l 0 738 l 133 737 l 340 147 l 541 737 l 675 738 "},"τ":{"x_min":0.28125,"x_max":644.5,"ha":703,"o":"m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 "},"ξ":{"x_min":0,"x_max":624.9375,"ha":699,"o":"m 624 -37 q 608 -153 624 -96 q 563 -278 593 -211 l 454 -278 q 491 -183 486 -200 q 511 -83 511 -126 q 484 -23 511 -44 q 370 1 452 1 q 323 0 354 1 q 283 -1 293 -1 q 84 76 169 -1 q 0 266 0 154 q 56 431 0 358 q 197 538 108 498 q 94 613 134 562 q 54 730 54 665 q 77 823 54 780 q 143 901 101 867 l 27 901 l 27 1012 l 576 1012 l 576 901 l 380 901 q 244 863 303 901 q 178 745 178 820 q 312 600 178 636 q 532 582 380 582 l 532 479 q 276 455 361 479 q 118 281 118 410 q 165 173 118 217 q 274 120 208 133 q 494 101 384 110 q 624 -37 624 76 "},"&":{"x_min":-3,"x_max":894.25,"ha":992,"o":"m 894 0 l 725 0 l 624 123 q 471 0 553 40 q 306 -41 390 -41 q 168 -7 231 -41 q 62 92 105 26 q 14 187 31 139 q -3 276 -3 235 q 55 433 -3 358 q 248 581 114 508 q 170 689 196 640 q 137 817 137 751 q 214 985 137 922 q 384 1041 284 1041 q 548 988 483 1041 q 622 824 622 928 q 563 666 622 739 q 431 556 516 608 l 621 326 q 649 407 639 361 q 663 493 653 426 l 781 493 q 703 229 781 352 l 894 0 m 504 818 q 468 908 504 877 q 384 940 433 940 q 293 907 331 940 q 255 818 255 875 q 289 714 255 767 q 363 628 313 678 q 477 729 446 682 q 504 818 504 771 m 556 209 l 314 499 q 179 395 223 449 q 135 283 135 341 q 146 222 135 253 q 183 158 158 192 q 333 80 241 80 q 556 209 448 80 "},"Λ":{"x_min":0,"x_max":862.5,"ha":942,"o":"m 862 0 l 719 0 l 426 847 l 143 0 l 0 0 l 356 1013 l 501 1013 l 862 0 "},"I":{"x_min":41,"x_max":180,"ha":293,"o":"m 180 0 l 41 0 l 41 1013 l 180 1013 l 180 0 "},"G":{"x_min":0,"x_max":921,"ha":1011,"o":"m 921 0 l 832 0 l 801 136 q 655 15 741 58 q 470 -28 568 -28 q 126 133 259 -28 q 0 499 0 284 q 125 881 0 731 q 486 1043 259 1043 q 763 957 647 1043 q 905 709 890 864 l 772 709 q 668 866 747 807 q 486 926 589 926 q 228 795 322 926 q 142 507 142 677 q 228 224 142 342 q 483 94 323 94 q 712 195 625 94 q 796 435 796 291 l 477 435 l 477 549 l 921 549 l 921 0 "},"ΰ":{"x_min":0,"x_max":617,"ha":725,"o":"m 524 800 l 414 800 l 414 925 l 524 925 l 524 800 m 183 800 l 73 800 l 73 925 l 183 925 l 183 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 489 1040 l 300 819 l 216 819 l 351 1040 l 489 1040 "},"`":{"x_min":0,"x_max":138.890625,"ha":236,"o":"m 138 699 l 0 699 l 0 861 q 36 974 0 929 q 138 1041 72 1020 l 138 977 q 82 931 95 969 q 69 839 69 893 l 138 839 l 138 699 "},"·":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "},"Υ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 "},"r":{"x_min":0,"x_max":355.5625,"ha":432,"o":"m 355 621 l 343 621 q 179 569 236 621 q 122 411 122 518 l 122 0 l 0 0 l 0 737 l 117 737 l 117 604 q 204 719 146 686 q 355 753 262 753 l 355 621 "},"x":{"x_min":0,"x_max":675,"ha":764,"o":"m 675 0 l 525 0 l 331 286 l 144 0 l 0 0 l 256 379 l 12 738 l 157 737 l 336 473 l 516 738 l 661 738 l 412 380 l 675 0 "},"μ":{"x_min":0,"x_max":696.609375,"ha":747,"o":"m 696 -4 q 628 -14 657 -14 q 498 97 513 -14 q 422 8 470 41 q 313 -24 374 -24 q 207 3 258 -24 q 120 80 157 31 l 120 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 172 124 246 q 308 82 216 82 q 451 177 402 82 q 492 358 492 254 l 492 738 l 616 738 l 616 214 q 623 136 616 160 q 673 92 636 92 q 696 95 684 92 l 696 -4 "},"h":{"x_min":0,"x_max":615,"ha":724,"o":"m 615 472 l 615 0 l 490 0 l 490 454 q 456 590 490 535 q 338 654 416 654 q 186 588 251 654 q 122 436 122 522 l 122 0 l 0 0 l 0 1013 l 122 1013 l 122 633 q 218 727 149 694 q 362 760 287 760 q 552 676 484 760 q 615 472 615 600 "},".":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "},"φ":{"x_min":-2,"x_max":878,"ha":974,"o":"m 496 -279 l 378 -279 l 378 -17 q 101 88 204 -17 q -2 367 -2 194 q 68 626 -2 510 q 283 758 151 758 l 283 646 q 167 537 209 626 q 133 373 133 462 q 192 177 133 254 q 378 93 259 93 l 378 758 q 445 764 426 763 q 476 765 464 765 q 765 659 653 765 q 878 377 878 553 q 771 96 878 209 q 496 -17 665 -17 l 496 -279 m 496 93 l 514 93 q 687 183 623 93 q 746 380 746 265 q 691 569 746 491 q 522 658 629 658 l 496 656 l 496 93 "},";":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 -12 q 105 -132 142 -82 q 0 -206 68 -182 l 0 -138 q 58 -82 43 -123 q 68 0 68 -56 l 0 0 l 0 151 l 142 151 l 142 -12 "},"f":{"x_min":0,"x_max":378,"ha":472,"o":"m 378 638 l 246 638 l 246 0 l 121 0 l 121 638 l 0 638 l 0 738 l 121 738 q 137 935 121 887 q 290 1028 171 1028 q 320 1027 305 1028 q 378 1021 334 1026 l 378 908 q 323 918 346 918 q 257 870 273 918 q 246 780 246 840 l 246 738 l 378 738 l 378 638 "},"“":{"x_min":1,"x_max":348.21875,"ha":454,"o":"m 140 670 l 1 670 l 1 830 q 37 943 1 897 q 140 1011 74 990 l 140 947 q 82 900 97 940 q 68 810 68 861 l 140 810 l 140 670 m 348 670 l 209 670 l 209 830 q 245 943 209 897 q 348 1011 282 990 l 348 947 q 290 900 305 940 q 276 810 276 861 l 348 810 l 348 670 "},"A":{"x_min":0.03125,"x_max":906.953125,"ha":1008,"o":"m 906 0 l 756 0 l 648 303 l 251 303 l 142 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 610 421 l 452 867 l 293 421 l 610 421 "},"6":{"x_min":53,"x_max":739,"ha":792,"o":"m 739 312 q 633 62 739 162 q 400 -31 534 -31 q 162 78 257 -31 q 53 439 53 206 q 178 859 53 712 q 441 986 284 986 q 643 912 559 986 q 732 713 732 833 l 601 713 q 544 830 594 786 q 426 875 494 875 q 268 793 331 875 q 193 517 193 697 q 301 597 240 570 q 427 624 362 624 q 643 540 552 624 q 739 312 739 451 m 603 298 q 540 461 603 400 q 404 516 484 516 q 268 461 323 516 q 207 300 207 401 q 269 137 207 198 q 405 83 325 83 q 541 137 486 83 q 603 298 603 197 "},"‘":{"x_min":1,"x_max":139.890625,"ha":236,"o":"m 139 670 l 1 670 l 1 830 q 37 943 1 897 q 139 1011 74 990 l 139 947 q 82 900 97 940 q 68 810 68 861 l 139 810 l 139 670 "},"ϊ":{"x_min":-70,"x_max":283,"ha":361,"o":"m 283 800 l 173 800 l 173 925 l 283 925 l 283 800 m 40 800 l -70 800 l -70 925 l 40 925 l 40 800 m 283 3 q 232 -10 257 -5 q 181 -15 206 -15 q 84 26 118 -15 q 41 200 41 79 l 41 737 l 166 737 l 167 215 q 171 141 167 157 q 225 101 182 101 q 247 103 238 101 q 283 112 256 104 l 283 3 "},"π":{"x_min":-0.21875,"x_max":773.21875,"ha":857,"o":"m 773 -7 l 707 -11 q 575 40 607 -11 q 552 174 552 77 l 552 226 l 552 626 l 222 626 l 222 0 l 97 0 l 97 626 l 0 626 l 0 737 l 773 737 l 773 626 l 676 626 l 676 171 q 695 103 676 117 q 773 90 714 90 l 773 -7 "},"ά":{"x_min":0,"x_max":765.5625,"ha":809,"o":"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 727 407 760 q 563 637 524 695 l 563 738 l 685 738 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 95 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 m 604 1040 l 415 819 l 332 819 l 466 1040 l 604 1040 "},"O":{"x_min":0,"x_max":958,"ha":1057,"o":"m 485 1041 q 834 882 702 1041 q 958 512 958 734 q 834 136 958 287 q 481 -26 702 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 728 q 485 1041 263 1041 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 669 q 480 912 640 912 q 226 784 321 912 q 142 504 142 670 q 226 224 142 339 q 480 98 319 98 "},"n":{"x_min":0,"x_max":615,"ha":724,"o":"m 615 463 l 615 0 l 490 0 l 490 454 q 453 592 490 537 q 331 656 410 656 q 178 585 240 656 q 117 421 117 514 l 117 0 l 0 0 l 0 738 l 117 738 l 117 630 q 218 728 150 693 q 359 764 286 764 q 552 675 484 764 q 615 463 615 593 "},"3":{"x_min":54,"x_max":737,"ha":792,"o":"m 737 284 q 635 55 737 141 q 399 -25 541 -25 q 156 52 248 -25 q 54 308 54 140 l 185 308 q 245 147 185 202 q 395 96 302 96 q 539 140 484 96 q 602 280 602 190 q 510 429 602 390 q 324 454 451 454 l 324 565 q 487 584 441 565 q 565 719 565 617 q 515 835 565 791 q 395 879 466 879 q 255 824 307 879 q 203 661 203 769 l 78 661 q 166 909 78 822 q 387 992 250 992 q 603 921 513 992 q 701 723 701 844 q 669 607 701 656 q 578 524 637 558 q 696 434 655 499 q 737 284 737 369 "},"9":{"x_min":53,"x_max":739,"ha":792,"o":"m 739 524 q 619 94 739 241 q 362 -32 516 -32 q 150 47 242 -32 q 59 244 59 126 l 191 244 q 246 129 191 176 q 373 82 301 82 q 526 161 466 82 q 597 440 597 255 q 363 334 501 334 q 130 432 216 334 q 53 650 53 521 q 134 880 53 786 q 383 986 226 986 q 659 841 566 986 q 739 524 739 719 m 388 449 q 535 514 480 449 q 585 658 585 573 q 535 805 585 744 q 388 873 480 873 q 242 809 294 873 q 191 658 191 745 q 239 514 191 572 q 388 449 292 449 "},"l":{"x_min":41,"x_max":166,"ha":279,"o":"m 166 0 l 41 0 l 41 1013 l 166 1013 l 166 0 "},"¤":{"x_min":40.09375,"x_max":728.796875,"ha":825,"o":"m 728 304 l 649 224 l 512 363 q 383 331 458 331 q 256 363 310 331 l 119 224 l 40 304 l 177 441 q 150 553 150 493 q 184 673 150 621 l 40 818 l 119 898 l 267 749 q 321 766 291 759 q 384 773 351 773 q 447 766 417 773 q 501 749 477 759 l 649 898 l 728 818 l 585 675 q 612 618 604 648 q 621 553 621 587 q 591 441 621 491 l 728 304 m 384 682 q 280 643 318 682 q 243 551 243 604 q 279 461 243 499 q 383 423 316 423 q 487 461 449 423 q 525 553 525 500 q 490 641 525 605 q 384 682 451 682 "},"κ":{"x_min":0,"x_max":632.328125,"ha":679,"o":"m 632 0 l 482 0 l 225 384 l 124 288 l 124 0 l 0 0 l 0 738 l 124 738 l 124 446 l 433 738 l 596 738 l 312 466 l 632 0 "},"4":{"x_min":48,"x_max":742.453125,"ha":792,"o":"m 742 243 l 602 243 l 602 0 l 476 0 l 476 243 l 48 243 l 48 368 l 476 958 l 602 958 l 602 354 l 742 354 l 742 243 m 476 354 l 476 792 l 162 354 l 476 354 "},"p":{"x_min":0,"x_max":685,"ha":786,"o":"m 685 364 q 598 96 685 205 q 350 -23 504 -23 q 121 89 205 -23 l 121 -278 l 0 -278 l 0 738 l 121 738 l 121 633 q 220 726 159 691 q 351 761 280 761 q 598 636 504 761 q 685 364 685 522 m 557 371 q 501 560 557 481 q 330 651 437 651 q 162 559 223 651 q 108 366 108 479 q 162 177 108 254 q 333 87 224 87 q 502 178 441 87 q 557 371 557 258 "},"‡":{"x_min":0,"x_max":777,"ha":835,"o":"m 458 238 l 458 0 l 319 0 l 319 238 l 0 238 l 0 360 l 319 360 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 l 777 804 l 777 683 l 458 683 l 458 360 l 777 360 l 777 238 l 458 238 "},"ψ":{"x_min":0,"x_max":808,"ha":907,"o":"m 465 -278 l 341 -278 l 341 -15 q 87 102 180 -15 q 0 378 0 210 l 0 739 l 133 739 l 133 379 q 182 195 133 275 q 341 98 242 98 l 341 922 l 465 922 l 465 98 q 623 195 563 98 q 675 382 675 278 l 675 742 l 808 742 l 808 381 q 720 104 808 213 q 466 -13 627 -13 l 465 -278 "},"η":{"x_min":0.78125,"x_max":697,"ha":810,"o":"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 720 124 755 q 200 630 193 686 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 "}},"cssFontWeight":"normal","ascender":1189,"underlinePosition":-100,"cssFontStyle":"normal","boundingBox":{"yMin":-334,"xMin":-111,"yMax":1189,"xMax":1672},"resolution":1000,"original_font_information":{"postscript_name":"Helvetiker-Regular","version_string":"Version 1.00 2004 initial release","vendor_url":"http://www.magenta.gr/","full_font_name":"Helvetiker","font_family_name":"Helvetiker","copyright":"Copyright (c) Μagenta ltd, 2004","description":"","trademark":"","designer":"","designer_url":"","unique_font_identifier":"Μagenta ltd:Helvetiker:22-10-104","license_url":"http://www.ellak.gr/fonts/MgOpen/license.html","license_description":"Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license (\"Fonts\") and associated documentation files (the \"Font Software\"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \r\n\r\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\r\n\r\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word \"MgOpen\", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\r\n\r\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the \"MgOpen\" name.\r\n\r\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \r\n\r\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.","manufacturer_name":"Μagenta ltd","font_sub_family_name":"Regular"},"descender":-334,"familyName":"Helvetiker","lineHeight":1522,"underlineThickness":50}
----
rendering/renderManager.ts
 
----
rendering/scene.ts
/**
 * Three.js scene management with simplified setup
 */

import {
  Scene,
  PerspectiveCamera,
  WebGLRenderer,
  Color,
  GridHelper,
  Layers,
  Vector2,
  Object3D,
  Mesh,
  Material,
  AmbientLight,
  DirectionalLight
} from 'three';
import * as EffectComposerModule from 'three/examples/jsm/postprocessing/EffectComposer';
import * as RenderPassModule from 'three/examples/jsm/postprocessing/RenderPass';
import * as UnrealBloomPassModule from 'three/examples/jsm/postprocessing/UnrealBloomPass';
import * as OrbitControlsModule from 'three/examples/jsm/controls/OrbitControls';
import { VisualizationController } from './VisualizationController';
import { HologramShaderMaterial } from './materials/HologramShaderMaterial';
import { Settings } from '../types/settings/base';
import { defaultSettings } from '../state/defaultSettings';
import { debugState } from '../core/debugState';
import { logger, createErrorMetadata, createDataMetadata } from '../core/logger';
import { resourceMonitor } from '../core/resourceMonitor';

const BACKGROUND_COLOR = 0x000000;  // Material Design Grey 900
const LOW_PERF_FPS_THRESHOLD = 30;  // Lower FPS threshold for low performance mode

export class SceneManager {
  private static instance: SceneManager;
  
  // Three.js core components
  private scene: Scene;
  private camera: PerspectiveCamera;
  private renderer!: WebGLRenderer;
  private readonly canvas: HTMLCanvasElement;
  private currentRenderingSettings: Settings['visualization']['rendering'] | null = null;
  private controls!: OrbitControlsModule.OrbitControls & { dispose: () => void };
  private sceneGrid: GridHelper | null = null;
  
  // Define bloom layer
  private readonly BLOOM_LAYER = 1;
  private readonly bloomLayer = new Layers();
  
  // Post-processing
  private composer!: EffectComposerModule.EffectComposer;
  private bloomPass!: UnrealBloomPassModule.UnrealBloomPass;
  
  // Animation
  private animationFrameId: number | null = null;
  private isRunning: boolean = false;
  private visualizationController: VisualizationController | null = null;
  private lastFrameTime: number = performance.now();
  private readonly FRAME_BUDGET: number = 16; // Target 60fps (1000ms/60)
  private frameCount: number = 0;
  private lastFpsUpdate: number = 0;
  private currentFps: number = 60;
  private lastLoggedFps: number = 60; // Track last logged FPS
  private readonly FPS_LOG_THRESHOLD = 5.0; // Increased threshold to reduce log frequency

  private constructor(canvas: HTMLCanvasElement) {
    logger.log('Initializing SceneManager');
    this.canvas = canvas;
    
    // Create scene
    this.scene = new Scene();
    this.scene.background = new Color(BACKGROUND_COLOR);

    // Create camera with wider view
    this.camera = new PerspectiveCamera(
      60, // Reduced FOV for less distortion
      window.innerWidth / window.innerHeight,
      0.1,
      5000  // Increased far plane for larger visualization space
    );
    this.camera.position.set(0, 10, 50); // Position for better overview
    this.camera.lookAt(0, 0, 0);
    
    // Configure bloom layer
    this.bloomLayer.set(this.BLOOM_LAYER);
    
    // Enable both layers for desktop mode by default
    this.camera.layers.enable(0); // Desktop layer
    this.camera.layers.enable(this.BLOOM_LAYER); // Bloom/XR layer

    this.initializeRenderer();
    this.setupControls();
    this.setupLighting();

    // Setup event listeners
    window.addEventListener('resize', this.handleResize.bind(this));

    // Initialize visualization controller
    this.visualizationController = VisualizationController.getInstance();
    this.visualizationController.initializeScene(this.scene, this.camera);

    logger.log('SceneManager initialization complete');
  }

  private initializeRenderer(): void {
    try {
      // Create renderer with WebXR support
      this.renderer = new WebGLRenderer({
        canvas: this.canvas,
        antialias: true,
        alpha: true,
        preserveDrawingBuffer: true,
        powerPreference: 'high-performance'
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      HologramShaderMaterial.setRenderer(this.renderer);
      
      // Track renderer in resource monitor
      resourceMonitor.trackRenderer(this.renderer);
      
      // Remove unsupported properties
      // this.renderer.sortObjects = false;
      // this.renderer.physicallyCorrectLights = false;

      // Setup post-processing
      this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
      if (debugState.isDataDebugEnabled()) {
        logger.debug('Renderer initialized and set for shader validation');
      }
      
      this.composer = new EffectComposerModule.EffectComposer(this.renderer);
      const renderPass = new RenderPassModule.RenderPass(this.scene, this.camera);
      this.composer.addPass(renderPass);

      const bloomSettings = defaultSettings.visualization.bloom;

      // Initialize bloom
      this.bloomPass = new UnrealBloomPassModule.UnrealBloomPass(
        new Vector2(window.innerWidth, window.innerHeight),
        bloomSettings.strength || 3.0,
        bloomSettings.radius || 2.0,
        bloomSettings.threshold || 0.0
      );

      // Store custom bloom settings as properties
      (this.bloomPass as any).edgeStrength = bloomSettings.edgeBloomStrength || 2.0;
      (this.bloomPass as any).nodeStrength = bloomSettings.nodeBloomStrength || 3.0;
      (this.bloomPass as any).environmentStrength = bloomSettings.environmentBloomStrength || 3.0;
      
      this.composer.addPass(this.bloomPass);
      
    } catch (error) {
      logger.error('Failed to initialize renderer or post-processing:', createErrorMetadata(error));
      throw new Error('Failed to initialize rendering system');
    }
  }

  private setupControls(): void {
    this.controls = new OrbitControlsModule.OrbitControls(this.camera, this.canvas);
    this.controls.enableDamping = true;
    this.controls.dampingFactor = 0.1;
    this.controls.screenSpacePanning = true;
    this.controls.minDistance = 1;
    this.controls.maxDistance = 2000;
    this.controls.enableRotate = true;
    this.controls.enableZoom = true;
    this.controls.enablePan = true;
    this.controls.rotateSpeed = 1.0;
    this.controls.zoomSpeed = 1.2;
    this.controls.panSpeed = 0.8;
  }

  static getInstance(canvas: HTMLCanvasElement): SceneManager {
    if (!SceneManager.instance) {
      SceneManager.instance = new SceneManager(canvas);
    }
    return SceneManager.instance;
  }

  static cleanup(): void {
    if (SceneManager.instance) {
      SceneManager.instance.dispose();
      SceneManager.instance = null as any;
    }
    
    // Stop resource monitoring
    resourceMonitor.stopMonitoring();
  }

  private setupLighting(): void {
    const ambientLight = new AmbientLight(0xffffff, 0.6);
    this.scene.add(ambientLight);

    const directionalLight = new DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(1, 1, 1).normalize();
    this.scene.add(directionalLight);

    // Add smaller grid helper
    const gridHelper = new GridHelper(100, 100); // Increased grid size to match visualization space
    if (gridHelper.material instanceof Material) {
      gridHelper.material.transparent = true;
      gridHelper.material.opacity = 0.1;
    }
    this.scene.add(gridHelper);
    this.sceneGrid = gridHelper;
  }

  // Debounce function to limit how often a function is called
  private debounce(func: Function, wait: number): (...args: any[]) => void {
    let timeout: number | null = null;
    return (...args: any[]) => {
      const later = () => {
        timeout = null;
        func(...args);
      };
      if (timeout !== null) {
        window.clearTimeout(timeout);
      }
      timeout = window.setTimeout(later, wait);
    };
  }

  private handleResize(): void {
    // Use requestAnimationFrame to ensure resize happens in the next frame
    // This helps avoid layout thrashing and improves performance
    requestAnimationFrame(() => {
      const width = window.innerWidth;
      const height = window.innerHeight;

      this.camera.aspect = width / height;
      this.camera.updateProjectionMatrix();

      this.renderer.setSize(width, height);
      this.composer.setSize(width, height);
      
      // Update bloom resolution
      if (this.bloomPass) {
        this.bloomPass.resolution.set(width, height);
      }
    });
  }

  public start(): void {
    if (this.isRunning) return;
    this.isRunning = true;
    
    // Start resource monitoring
    resourceMonitor.startMonitoring(60000); // Increased monitoring interval to 60 seconds
    
    // Use debounced resize handler to avoid performance issues
    window.removeEventListener('resize', this.handleResize.bind(this));
    window.addEventListener('resize', this.debounce(this.handleResize.bind(this), 100));
    
    requestAnimationFrame(this.animate);
    logger.log('Scene rendering started');
  }

  // Alias for start() to maintain compatibility with new client code
  startRendering(): void {
    this.start();
  }

  stop(): void {
    this.isRunning = false;
    
    // Clean up animation loops
    if (this.renderer.xr.enabled) {
      this.renderer.setAnimationLoop(null);
    }
    if (this.animationFrameId !== null) {
      cancelAnimationFrame(this.animationFrameId);
      this.animationFrameId = null;
    }
    
    logger.log('Scene rendering stopped');
  }

  // Throttle function to limit execution frequency
  private throttleFrameUpdates(timestamp: number): boolean {
    // Skip frame if we're running too fast (trying to maintain ~60fps)
    const elapsed = timestamp - this.lastFrameTime;
    const minFrameTime = 16; // ~60fps
    
    if (elapsed < minFrameTime && this.currentFps > 60) {
      return false; // Skip this frame
    }
    return true; // Process this frame
  }

  private animate = (timestamp: number): void => {
    if (!this.isRunning) return;

    // Calculate FPS
    this.frameCount++;
    if (timestamp - this.lastFpsUpdate >= 1000) {
      const elapsed = timestamp - this.lastFpsUpdate;
      this.currentFps = elapsed > 0 ? (this.frameCount * 1000) / elapsed : 60;
      this.frameCount = 0;
      this.lastFpsUpdate = timestamp;

      // Apply performance optimizations if FPS is low
      this.checkPerformance();
    }

    const deltaTime = timestamp - this.lastFrameTime;
    this.lastFrameTime = timestamp;

    // Set up animation loop
    if (this.renderer.xr.enabled) {
      // For XR, use the built-in animation loop
      this.renderer.setAnimationLoop(this.render);
    } else {
      // For non-XR, use requestAnimationFrame
      this.render(deltaTime);
      if (this.isRunning) {
        this.animationFrameId = requestAnimationFrame(this.animate);
      }
    }
  }

  private checkPerformance(): void {
    // Apply performance optimizations if FPS is low
    if (this.currentFps < LOW_PERF_FPS_THRESHOLD) {
      this.applyLowPerformanceOptimizations();
    } else if (this.currentFps > 80) {
      // If FPS is very high, we might be wasting resources
      // Consider throttling updates to save battery/CPU
      this.throttleFrameUpdates(performance.now());
    }
  }

  private render = (deltaTime?: number): void => {
    const startTime = performance.now();

    try {
      if (!this.renderer.xr.enabled) {
        if (!deltaTime || deltaTime >= this.FRAME_BUDGET) {
          this.controls.update();
          if (this.sceneGrid) this.sceneGrid.visible = true;
        }
      } else {
        if (this.sceneGrid) this.sceneGrid.visible = false;
      }

      if (this.visualizationController) {
        this.visualizationController.update(Math.min(deltaTime || 0, 33)); // Cap deltaTime to avoid large jumps
      }

      const preRenderTime = performance.now();
      const remainingTime = this.FRAME_BUDGET - (preRenderTime - startTime);

      if (remainingTime >= 0) {
        if (!this.renderer.xr.enabled && this.bloomPass?.enabled) {
          // Always use composer with bloom when enabled, regardless of remaining time
          try {
            this.composer.render();
          } catch (error) {
            logger.error('Error rendering with bloom, falling back to standard render', createErrorMetadata(error));
            this.renderer.render(this.scene, this.camera);
          }
        } else {
          this.renderer.render(this.scene, this.camera);
        }
      } else {
        this.renderer.render(this.scene, this.camera);
      }
    } catch (error) {
      logger.error('Render error:', createErrorMetadata(error));
      if (this.bloomPass?.enabled) {
        logger.warn('Disabling bloom pass due to render error');
        this.bloomPass.enabled = false;
      }
    }
  }

  // Public getters
  getScene(): Scene {
    return this.scene;
  }

  getCamera(): PerspectiveCamera {
    return this.camera;
  }

  getRenderer(): WebGLRenderer {
    return this.renderer;
  }

  getControls(): OrbitControlsModule.OrbitControls {
    return this.controls;
  }

  // Scene management methods
  add(object: Object3D): void {
    this.scene.add(object);
  }

  remove(object: Object3D): void {
    this.scene.remove(object);
  }

  public dispose(): void {
    this.stop();
    
    // Remove event listeners
    const boundResize = this.handleResize.bind(this);
    window.removeEventListener('resize', boundResize);

    // Dispose of post-processing
    if (this.composer) {
      // Dispose of render targets
      this.composer.renderTarget1.dispose();
      this.composer.renderTarget2.dispose();
      
      // Clear passes
      this.composer.passes.length = 0;
    }

    // Dispose of bloom pass resources
    if (this.bloomPass) {
      // Dispose of any textures or materials used by the bloom pass
      if ((this.bloomPass as any).renderTargetsHorizontal) {
        (this.bloomPass as any).renderTargetsHorizontal.forEach((target: any) => {
          if (target && target.dispose) target.dispose();
        });
      }
      if ((this.bloomPass as any).renderTargetsVertical) {
        (this.bloomPass as any).renderTargetsVertical.forEach((target: any) => {
          if (target && target.dispose) target.dispose();
        });
      }
      if ((this.bloomPass as any).materialHorizontal) {
        (this.bloomPass as any).materialHorizontal.dispose();
      }
      if ((this.bloomPass as any).materialVertical) {
        (this.bloomPass as any).materialVertical.dispose();
      }
    }

    // Dispose of controls
    if (this.controls) {
      this.controls.dispose();
    }

    // Untrack renderer
    if (this.renderer) {
      resourceMonitor.untrackRenderer(this.renderer);
      this.renderer.dispose();
      this.renderer = null as any;
    }

    // Dispose of scene objects
    if (this.scene) {
      this.scene.traverse((object) => {
        if (object instanceof Mesh) {
          if (object.geometry) object.geometry.dispose();
          if (object.material) {
            if (Array.isArray(object.material)) {
              object.material.forEach(material => material.dispose());
            } else {
              object.material.dispose();
            }
          }
        }
      });
    }

    logger.log('Scene manager disposed');
  }

  public handleSettingsUpdate(settings: Settings): void {
    if (!settings.visualization?.rendering) {
      logger.warn('Received settings update without visualization.rendering section');
      return;
    }

    const { rendering: newRendering, bloom: newBloom } = settings.visualization;
    const hasRenderingChanged = JSON.stringify(this.currentRenderingSettings) !== JSON.stringify(newRendering);

    // Update bloom settings
    if (newBloom) {
      const currentBloom = {
        enabled: this.bloomPass?.enabled ?? false,
        strength: this.bloomPass?.strength ?? 0,
        radius: this.bloomPass?.radius ?? 0,
        threshold: this.bloomPass?.threshold ?? 0,
        edgeStrength: (this.bloomPass as any)?.edgeStrength ?? 0,
        nodeStrength: (this.bloomPass as any)?.nodeStrength ?? 0,
        environmentStrength: (this.bloomPass as any)?.environmentStrength ?? 0
      };

      const newBloomSettings = {
        enabled: newBloom.enabled,
        strength: newBloom.enabled ? (newBloom.strength || defaultSettings.visualization.bloom.strength) : 0,
        radius: newBloom.enabled ? (newBloom.radius || defaultSettings.visualization.bloom.radius) : 0,
        threshold: newBloom.threshold, // Use threshold from settings
        edgeStrength: newBloom.enabled ? (newBloom.edgeBloomStrength || defaultSettings.visualization.bloom.edgeBloomStrength) : 0,
        nodeStrength: newBloom.enabled ? (newBloom.nodeBloomStrength || defaultSettings.visualization.bloom.nodeBloomStrength) : 0,
        environmentStrength: newBloom.enabled ? (newBloom.environmentBloomStrength || defaultSettings.visualization.bloom.environmentBloomStrength) : 0
      };

      const hasBloomChanged = JSON.stringify(currentBloom) !== JSON.stringify(newBloomSettings);
      
      if (hasBloomChanged) {
        // Log bloom settings change
        logger.debug('Updating bloom settings', createDataMetadata({
          from: currentBloom,
          to: newBloomSettings
        }));
        
        // Apply new settings
        if (this.bloomPass) {
          // Handle the enabled state change separately to avoid flashing
          const wasEnabled = this.bloomPass.enabled;
          const shouldBeEnabled = newBloomSettings.enabled;
          
          // Update all other properties first
          this.bloomPass.strength = newBloomSettings.strength;
          this.bloomPass.radius = newBloomSettings.radius;
          this.bloomPass.threshold = newBloomSettings.threshold;
          (this.bloomPass as any).edgeStrength = newBloomSettings.edgeStrength;
          (this.bloomPass as any).nodeStrength = newBloomSettings.nodeStrength;
          (this.bloomPass as any).environmentStrength = newBloomSettings.environmentStrength;
          
          // Update enabled state last to avoid flashing
          if (wasEnabled !== shouldBeEnabled) {
            this.bloomPass.enabled = shouldBeEnabled;
          }
        }
      }
    }

    if (hasRenderingChanged) {
      this.currentRenderingSettings = newRendering;

      // Update background color
      if (newRendering.backgroundColor) {
        this.scene.background = new Color(newRendering.backgroundColor);
      }

      // Update lighting
      const lights = this.scene.children.filter(child => 
        child instanceof AmbientLight || child instanceof DirectionalLight
      );
      
      lights.forEach(light => {
        if (light instanceof AmbientLight) {
          light.intensity = newRendering.ambientLightIntensity;
        } else if (light instanceof DirectionalLight) {
          light.intensity = newRendering.directionalLightIntensity;
        }
      });

      // Update renderer settings
      if (this.renderer) {
        // Log settings changes that can't be updated at runtime
        if (newRendering.enableAntialiasing !== this.currentRenderingSettings?.enableAntialiasing) {
          logger.warn('Antialiasing setting can only be changed at renderer creation');
        }
        (this.renderer as any).shadowMap.enabled = newRendering.enableShadows || false;
      }
    }

    // Only log if something actually changed
    if (hasRenderingChanged) {
      logger.debug('Scene settings updated:', createDataMetadata({
        rendering: newRendering,
        bloom: {
          enabled: this.bloomPass.enabled,
          strength: this.bloomPass.strength
        }
      }));
    }
  }

  private applyLowPerformanceOptimizations(): void {
    // Optimize materials
    this.scene.traverse((object: Object3D) => {
      if (object instanceof Mesh) {
        const material = object.material as Material;
        if (material) {
          // Keep material features that affect visual quality
          material.needsUpdate = true;
          
          // Disable shadows
          (object as any).castShadow = (object as any).receiveShadow = false;
          
          // Force material update
          material.needsUpdate = true;
        }
      }
    });

    // Optimize renderer
    (this.renderer as any).shadowMap.enabled = false;
    
    // Only disable bloom at very low FPS
    if (this.bloomPass?.enabled && this.currentFps < 20) {
      // Instead of disabling bloom completely, reduce its intensity
      if (this.currentFps < 15) {
        // Only disable bloom at extremely low FPS
        logger.warn('Disabling bloom due to very low FPS', createDataMetadata({
          fps: this.currentFps.toFixed(1)
        }));
        this.bloomPass.enabled = false;
      } else {
        // Reduce bloom strength at moderately low FPS
        const reducedStrength = Math.max(0.5, this.bloomPass.strength * 0.7);
        if (this.bloomPass.strength !== reducedStrength) {
          this.bloomPass.strength = reducedStrength;
          logger.debug('Reducing bloom strength due to low FPS', createDataMetadata({
            fps: this.currentFps.toFixed(1),
            newStrength: this.bloomPass.strength
          }));
        }
      }
    }

    // Log optimization application only when FPS changes significantly
    const fpsDiff = Math.abs(this.currentFps - this.lastLoggedFps);
    if (fpsDiff >= this.FPS_LOG_THRESHOLD) {
      logger.info('Applied low performance optimizations', createDataMetadata({
        fps: this.currentFps.toFixed(1)
      }));
      this.lastLoggedFps = this.currentFps;
    }
  }
}

----
rendering/EdgeManager.ts
import {
    BufferGeometry,
    BufferAttribute,
    LineBasicMaterial,
    Mesh,
    Scene,
    Vector3,
    Material
} from 'three';
import { createLogger } from '../core/logger';
import { Edge } from '../core/types';
import { Settings } from '../types/settings';
import { NodeInstanceManager } from './node/instance/NodeInstanceManager';

const logger = createLogger('EdgeManager');

export class EdgeManager {
    private scene: Scene;
    private settings: Settings;
    private edges: Map<string, Mesh> = new Map(); // Store edges by ID
    private nodeInstanceManager: NodeInstanceManager; // Reference to NodeInstanceManager

    constructor(scene: Scene, settings: Settings, nodeInstanceManager: NodeInstanceManager) {
        this.scene = scene;
        this.settings = settings;
        this.nodeInstanceManager = nodeInstanceManager;
        logger.info('EdgeManager initialized');
    }

    /**
     * Validates a Vector3 to ensure it has valid, finite values
     */
    private validateVector3(vec: Vector3): boolean {
        const MAX_VALUE = 1000;
        return isFinite(vec.x) && isFinite(vec.y) && isFinite(vec.z) &&
             !isNaN(vec.x) && !isNaN(vec.y) && !isNaN(vec.z) &&
             Math.abs(vec.x) < MAX_VALUE && Math.abs(vec.y) < MAX_VALUE && Math.abs(vec.z) < MAX_VALUE;
    }

    public updateEdges(edges: Edge[]): void {
        logger.info(`Updating ${edges.length} edges`);

        const newEdges: Edge[] = [];
        const existingEdges: Edge[] = [];

        for (const edge of edges) {
            // Use numeric IDs for edge identification
            const edgeId = `${edge.source}-${edge.target}`;

            if (this.edges.has(edgeId)) {
                existingEdges.push(edge);
            } else {
                newEdges.push(edge);
            }
        }

        // Add new edges
        for (const edge of newEdges) {
            this.createEdge(edge);
        }

        // Update existing edges (positions might have changed)
        for (const edge of existingEdges) {
            this.updateEdge(edge);
        }

        // Remove old edges (not in the new set)
        const currentEdgeIds = new Set(edges.map(edge => `${edge.source}-${edge.target}`));
        for (const edgeId of this.edges.keys()) {
            if (!currentEdgeIds.has(edgeId)) {
                this.removeEdge(edgeId);
            }
        }
    }
  
    private createEdge(edge: Edge): void {
        const edgeId = `${edge.source}-${edge.target}`;

        // Get node positions from NodeInstanceManager using numeric IDs
        const sourcePos = this.nodeInstanceManager.getNodePosition(edge.source);
        const targetPos = this.nodeInstanceManager.getNodePosition(edge.target);

        if (!sourcePos || !targetPos) {
            // Handle cases where node positions might not be available yet
            logger.warn(`Skipping edge creation for ${edgeId} due to missing node positions`);
            return;
        }

        // Validate positions
        if (!this.validateVector3(sourcePos) || !this.validateVector3(targetPos)) {
            logger.warn(`Skipping edge creation for ${edgeId} due to invalid node positions`);
            return;
        }

        // Create a simple line geometry
        const geometry = new BufferGeometry();
        const positions = new Float32Array([
            sourcePos.x, sourcePos.y, sourcePos.z,
            targetPos.x, targetPos.y, targetPos.z
        ]);
        geometry.setAttribute('position', new BufferAttribute(positions, 3));
        
        const material = new LineBasicMaterial({
            color: this.settings.visualization.edges.color,
            transparent: true,
            opacity: this.settings.visualization.edges.opacity
        });

        // Create a Mesh for line rendering
        // Note: We're using Mesh but with a line-like geometry
        const line = new Mesh(geometry, material);
        line.renderOrder = 1; // Ensure lines render on top of nodes

        // Store the edge ID in userData for identification
        line.userData = { edgeId };
        
        // Enable both layers by default for desktop mode
        line.layers.enable(0);
        line.layers.enable(1);
        
        this.edges.set(edgeId, line);
        this.scene.add(line);
    }

    private updateEdge(edge: Edge): void {
        const edgeId = `${edge.source}-${edge.target}`;
        const line = this.edges.get(edgeId);
        
        if (!line) {
            this.createEdge(edge);
            return;
        }

        // Get updated node positions
        const sourcePos = this.nodeInstanceManager.getNodePosition(edge.source);
        const targetPos = this.nodeInstanceManager.getNodePosition(edge.target);

        if (!sourcePos || !targetPos) {
            return;
        }

        // Validate positions
        if (!this.validateVector3(sourcePos) || !this.validateVector3(targetPos)) {
            return;
        }

        // Update the geometry with new positions
        const positions = new Float32Array([
            sourcePos.x, sourcePos.y, sourcePos.z,
            targetPos.x, targetPos.y, targetPos.z
        ]);
        
        line.geometry.dispose();
        const geometry = new BufferGeometry();
        geometry.setAttribute('position', new BufferAttribute(positions, 3));
        line.geometry = geometry;
    }

    private removeEdge(edgeId: string): void {
        const edge = this.edges.get(edgeId);
        if (edge) {
            this.scene.remove(edge);
            edge.geometry.dispose();
            if (Array.isArray(edge.material)) {
                edge.material.forEach((m: Material) => m.dispose());
            } else {
                edge.material.dispose();
            }
            this.edges.delete(edgeId);
        }
    }

    public handleSettingsUpdate(settings: Settings): void {
        this.settings = settings;
        // Update edge appearance based on new settings
        this.edges.forEach((edge) => {
            if (edge.material instanceof LineBasicMaterial) {
                edge.material.color.set(this.settings.visualization.edges.color);
                edge.material.opacity = this.settings.visualization.edges.opacity;
                edge.material.needsUpdate = true;
            }
        });
    }

    /**
     * Set XR mode for edge rendering
     */
    public setXRMode(enabled: boolean): void {
        // Set appropriate layer visibility for all edges
        this.edges.forEach(edge => {
            if (enabled) {
                // In XR mode, only show on layer 1
                edge.layers.disable(0);
                edge.layers.enable(1);
            } else {
                // In desktop mode, show on both layers
                edge.layers.enable(0);
                edge.layers.enable(1);
            }
        });
    }

    public update(): void {
        // The edge update is now handled during updateEdges
        // This method is kept for compatibility with the rendering loop
    }

    /**
     * Clean up resources
     */
    public dispose(): void {
        // Dispose of all geometries and materials
        this.edges.forEach(edge => {
            this.scene.remove(edge);
            edge.geometry.dispose();
            if (Array.isArray(edge.material)) {
                edge.material.forEach((m: Material) => m.dispose());
            } else {
                edge.material.dispose();
            }
        });
        this.edges.clear();
    }
}

----
rendering/textRenderer.ts
import type { Settings, LabelSettings } from '../types/settings';
import { settingsManager } from '../state/settings';
import { createLogger, createErrorMetadata } from '../core/logger';
import {
    Scene,
    Camera,
    Group,
    Sprite,
    SpriteMaterial,
    Vector3,
    Matrix4,
    Texture
} from 'three';
const logger = createLogger('TextRenderer');

interface LabelState {
    text: string;
    position: Vector3;
    visible: boolean;
    sprite?: Sprite;
    texture?: Texture;
}

export class TextRenderer {
    private camera: Camera;
    private labelStates: Map<string, LabelState>;
    private unsubscribers: Array<() => void> = [];
    private projMatrix: Matrix4;
    private viewMatrix: Matrix4;
    private currentSettings: Settings;
    private settings: LabelSettings;
    private group: Group;

    constructor(camera: Camera, scene: Scene) {
        this.camera = camera;
        this.labelStates = new Map();
        this.projMatrix = new Matrix4();
        this.viewMatrix = new Matrix4();
        this.currentSettings = settingsManager.getCurrentSettings();
        this.settings = this.currentSettings.visualization.labels;
        this.group = new Group();
        scene.add(this.group); // Add the group to the scene
        this.setupSettingsSubscriptions();
    }

    private setupSettingsSubscriptions(): void {
        Object.keys(this.currentSettings.visualization.labels).forEach(setting => {
            const path = `visualization.labels.${setting}`;
            const unsubscribe = settingsManager.subscribe(path, (value) => {
                this.handleSettingChange(setting as keyof LabelSettings, value);
            });
            this.unsubscribers.push(unsubscribe);
        });
    }

    private handleSettingChange(setting: keyof LabelSettings, value: any): void {
        try {
            switch (setting) {
                case 'desktopFontSize':
                    this.updateFontSize(value as number);
                    break;
                case 'textColor':
                    this.updateTextColor(value as string);
                    break;
                case 'enableLabels':
                    this.updateLabelVisibility(value as boolean);
                    break;
                default:
                    // Other settings handled elsewhere
                    break;
            }
        } catch (error) {
            logger.error(`Error handling setting change for ${setting}:`, createErrorMetadata(error));
        }
    }

    private updateFontSize(fontSize: number): void {
        this.labelStates.forEach((state) => {
            if (state.sprite) {
                // Remove old sprite
                this.group.remove(state.sprite);
                state.sprite.material.dispose();
                state.sprite.material.map?.dispose();
                state.texture?.dispose();

                // Create new sprite with updated font size
                state.sprite = this.createTextSprite(state.text, fontSize);
                state.sprite.position.copy(state.position);
                this.group.add(state.sprite);
            }
        });
    }

    private createTextSprite(text: string, fontSize: number): Sprite {
        // Create a canvas to render the text
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        if (!context) throw new Error('Could not get 2D context');

        // Set canvas size
        const padding = this.settings.textPadding || 2;
        context.font = `${fontSize}px Arial`;
        const textMetrics = context.measureText(text);
        canvas.width = textMetrics.width + padding * 2;
        canvas.height = fontSize + padding * 2;

        // Draw text
        context.font = `${fontSize}px Arial`;
        context.textAlign = 'center';
        context.textBaseline = 'middle';
        
        // Draw text outline if enabled
        if (this.settings.textOutlineWidth > 0) {
            context.strokeStyle = this.settings.textOutlineColor;
            context.lineWidth = this.settings.textOutlineWidth;
            context.strokeText(text, canvas.width / 2, canvas.height / 2);
        }
        
        // Draw text fill
        context.fillStyle = this.settings.textColor;
        context.lineWidth = 1;
        context.fillText(text, canvas.width / 2, canvas.height / 2);

        // Create sprite material
        const texture = new Texture(canvas);
        texture.needsUpdate = true;
        const material = new SpriteMaterial({
            map: texture,
            transparent: true,
            depthTest: false // Ensure text is always visible
        });

        // Create sprite
        const sprite = new Sprite(material);
        // Disable frustum culling to ensure labels are visible regardless of position
        sprite.frustumCulled = false;
        
        // Scale based on text resolution
        const resolution = this.settings.textResolution || 16;
        const scale = resolution / fontSize;
        sprite.scale.set(
            (canvas.width / fontSize) * scale,
            (canvas.height / fontSize) * scale,
            1);

        return sprite;
    }

    private updateTextColor(newColor: string): void {
        this.settings.textColor = newColor;
        this.labelStates.forEach((state) => {
            if (state.sprite) {
                // Remove old sprite
                this.group.remove(state.sprite);
                state.sprite.material.dispose();
                state.sprite.material.map?.dispose();
                state.texture?.dispose();

                // Create new sprite with updated color
                state.sprite = this.createTextSprite(state.text, this.settings.desktopFontSize);
                state.sprite.position.copy(state.position);
                this.group.add(state.sprite);
            }
        });
    }

    private updateLabelVisibility(visible: boolean): void {
        this.group.visible = visible;
    }

    public updateLabel(id: string, text: string, position: Vector3): void {
        try {
            let state = this.labelStates.get(id);
            if (!state) {
                state = {
                    text,
                    position: position.clone(),
                    visible: true
                };
                this.labelStates.set(id, state);
            } else {
                state.text = text;
                state.position.copy(position);
            }

            // Remove old sprite if it exists
            if (state.sprite) {
                this.group.remove(state.sprite);
                state.sprite.material.dispose();
                state.sprite.material.map?.dispose();
                state.texture?.dispose();
            }

            // Create new sprite
            state.sprite = this.createTextSprite(text, this.settings.desktopFontSize);
            state.sprite.position.copy(position);
            this.group.add(state.sprite);
        } catch (error) {
            logger.error('Error updating label:', createErrorMetadata(error));
        }
    }

    public removeLabel(id: string): void {
        try {
            const state = this.labelStates.get(id);
            if (state?.sprite) {
                this.group.remove(state.sprite);
                state.sprite.material.dispose();
                state.sprite.material.map?.dispose();
                state.texture?.dispose();
            }
            this.labelStates.delete(id);
        } catch (error) {
            logger.error('Error removing label:', createErrorMetadata(error));
        }
    }

    private clearLabels(): void {
        this.labelStates.forEach((state) => {
            if (state.sprite) {
                this.group.remove(state.sprite);
                state.sprite.material.dispose();
                state.sprite.material.map?.dispose();
                state.texture?.dispose();
            }
        });
        this.labelStates.clear();
    }

    public update(): void {
        try {
            // Update projection and view matrices
            this.camera.updateMatrixWorld();
            this.projMatrix.copy(this.camera.projectionMatrix);
            this.viewMatrix.copy(this.camera.matrixWorldInverse);
            
            if (!this.settings.enableLabels) {
                this.group.visible = false;
                return;
            }
            
            this.group.visible = true;

            // Update label positions and visibility
            this.labelStates.forEach((state) => {
                if (state.sprite) {
                    state.sprite.position.copy(state.position);
                    // Make sprite face camera
                    if (this.settings.billboardMode === 'camera') {
                        // Full billboard - always face camera
                        state.sprite.quaternion.copy(this.camera.quaternion);
                        
                        // Ensure sprite is always visible regardless of camera position
                        if (!state.sprite.visible) {
                            state.sprite.visible = true;
                        }
                    } else {
                        // Vertical billboard - only rotate around Y axis
                        const tempVec = new Vector3().copy(this.camera.position).sub(state.position);
                        state.sprite.lookAt(tempVec.add(state.position));
                    }
                }
            });
        } catch (error) {
            logger.error('Error updating labels:', createErrorMetadata(error));
        }
    }

    public dispose(): void {
        try {
            this.clearLabels();
            this.unsubscribers.forEach(unsubscribe => unsubscribe());
            this.unsubscribers = [];
            if (this.group.parent) {
                this.group.parent.remove(this.group);
            }
        } catch (error) {
            logger.error('Error disposing TextRenderer:', createErrorMetadata(error));
        }
    }

    public handleSettingsUpdate(settings: LabelSettings): void {
        this.settings = settings;
        this.updateLabelVisibility(settings.enableLabels);
        this.updateFontSize(settings.desktopFontSize);
        this.updateTextColor(settings.textColor);
    }
}

----
rendering/SDFFontAtlasGenerator.ts
import { createLogger } from '../core/logger';
import { Texture, LinearFilter, ClampToEdgeWrapping } from 'three';

const logger = createLogger('SDFFontAtlasGenerator');

interface GlyphMetrics {
    width: number;
    height: number;
    advanceWidth: number;
    bearingX: number;
    bearingY: number;
}

interface GlyphInfo {
    char: string;
    metrics: GlyphMetrics;
    textureX: number;
    textureY: number;
    textureWidth: number;
    textureHeight: number;
}

export class SDFFontAtlasGenerator {
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D;
    private atlasSize: number;
    private padding: number;
    private spread: number;
    private glyphInfoMap: Map<string, GlyphInfo>;
    private readonly superSampling: number = 2; // Supersampling factor for higher quality
    
    constructor(atlasSize = 2048, padding = 8, spread = 16) {
        this.atlasSize = atlasSize;
        this.padding = padding;
        this.spread = spread;
        this.glyphInfoMap = new Map();
        
        // Create high-res canvas for supersampling
        this.canvas = document.createElement('canvas');
        this.canvas.width = atlasSize * this.superSampling;
        this.canvas.height = atlasSize * this.superSampling;
        
        const ctx = this.canvas.getContext('2d', { 
            alpha: true,
            antialias: true,
            desynchronized: true
        }) as CanvasRenderingContext2D;
        if (!ctx) {
            throw new Error('Failed to get 2D context');
        }
        this.ctx = ctx;
        
        // Enable high-quality rendering
        (this.ctx as any).textRendering = 'geometricPrecision';
        this.ctx.imageSmoothingEnabled = true;
        this.ctx.imageSmoothingQuality = 'high';
    }
    
    public async generateAtlas(
        fontFamily: string,
        fontSize: number,
        chars: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.,!?-+/():;%&`\'*#=[]" '
    ): Promise<{ texture: Texture; glyphInfoMap: Map<string, GlyphInfo> }> {
        logger.info('Generating font atlas:', {
            fontFamily,
            fontSize,
            atlasSize: this.atlasSize,
            padding: this.padding,
            spread: this.spread,
            chars: chars.length,
            superSampling: this.superSampling
        });

        // Scale font size for supersampling
        const scaledFontSize = fontSize * this.superSampling;
        this.ctx.font = `${scaledFontSize}px ${fontFamily}`;
        this.ctx.textBaseline = 'alphabetic';
        this.ctx.fillStyle = 'white';
        this.ctx.strokeStyle = 'white';
        
        // Clear canvas with transparency
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        
        // Calculate glyph positions with supersampling
        let x = this.padding * this.superSampling;
        let y = (this.padding + fontSize) * this.superSampling;
        const lineHeight = fontSize * 1.4 * this.superSampling;
        
        // Generate glyphs and compute SDF
        for (const char of chars) {
            const metrics = this.getGlyphMetrics(char, fontSize);
            
            // Check if we need to move to next line
            if (x + metrics.width + this.padding > this.canvas.width) {
                x = this.padding * this.superSampling;
                y += lineHeight;
                
                if (y + lineHeight > this.canvas.height) {
                    logger.warn('Atlas size exceeded, some characters may be missing');
                    break;
                }
            }
            
            // Draw glyph
            this.ctx.fillStyle = 'white';
            this.ctx.fillText(char, x, y);
            
            // Store glyph info
            this.glyphInfoMap.set(char, {
                char,
                metrics,
                textureX: x,
                textureY: y - fontSize,
                textureWidth: metrics.width + this.padding * 2,
                textureHeight: fontSize + this.padding * 2
            });
            
            x += metrics.width + this.padding * 2;
        }
        
        // Generate SDF
        const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
        const sdf = this.computeSDF(imageData.data);
        
        // Apply SDF to canvas
        const sdfImageData = this.ctx.createImageData(this.canvas.width, this.canvas.height);
        for (let i = 0; i < sdf.length; i++) {
            const value = Math.floor(sdf[i] * 255);
            const idx = i * 4;
            sdfImageData.data[idx] = value;
            sdfImageData.data[idx + 1] = value;
            sdfImageData.data[idx + 2] = value;
            sdfImageData.data[idx + 3] = 255;
        }
        this.ctx.putImageData(sdfImageData, 0, 0);
        
        logger.info('Font atlas generated:', {
            glyphCount: this.glyphInfoMap.size,
            sampleGlyphs: Array.from(this.glyphInfoMap.entries())
                .slice(0, 3)
                .map(([char, info]) => ({
                    char,
                    textureX: info.textureX,
                    textureY: info.textureY,
                    width: info.textureWidth,
                    height: info.textureHeight
                }))
        });

        // Create texture with better filtering
        const texture = new Texture(this.canvas);
        texture.needsUpdate = true;
        texture.minFilter = LinearFilter;
        texture.magFilter = LinearFilter;
        texture.wrapS = ClampToEdgeWrapping;
        texture.wrapT = ClampToEdgeWrapping;
        
        // Downscale canvas to final size
        const finalCanvas = document.createElement('canvas');
        finalCanvas.width = this.atlasSize;
        finalCanvas.height = this.atlasSize;
        const finalCtx = finalCanvas.getContext('2d');
        if (finalCtx) {
            finalCtx.imageSmoothingEnabled = true;
            finalCtx.imageSmoothingQuality = 'high';
            finalCtx.drawImage(this.canvas, 0, 0, this.atlasSize, this.atlasSize);
            (texture as any).image = finalCanvas;
            texture.needsUpdate = true;
        }
        
        return {
            texture,
            glyphInfoMap: this.glyphInfoMap
        };
    }
    
    private getGlyphMetrics(char: string, fontSize: number): GlyphMetrics {
        const metrics = this.ctx.measureText(char);
        return {
            width: metrics.width,
            height: fontSize,
            advanceWidth: metrics.width,
            bearingX: 0,
            bearingY: metrics.actualBoundingBoxAscent
        };
    }
    
    private computeSDF(imageData: Uint8ClampedArray): Float32Array {
        const width = this.canvas.width;
        const height = this.canvas.height;
        const sdf = new Float32Array(width * height);
        
        // Simple 8-bit SDF computation
        for (let y = 0; y < height; y++) {
            for (let x = 0; x < width; x++) {
                const idx = (y * width + x) * 4;
                const alpha = imageData[idx + 3] / 255;
                
                if (alpha > 0.5) {
                    // Inside glyph
                    sdf[y * width + x] = Math.min(1, this.computeDistance(x, y, imageData, false) / this.spread);
                } else {
                    // Outside glyph
                    sdf[y * width + x] = Math.max(0, 1 - this.computeDistance(x, y, imageData, true) / this.spread);
                }
            }
        }
        
        return sdf;
    }
    
    private computeDistance(x: number, y: number, imageData: Uint8ClampedArray, inside: boolean): number {
        let minDist = this.spread * 2;
        const width = this.canvas.width;
        
        // Search in a square around the point
        for (let dy = -this.spread; dy <= this.spread; dy++) {
            for (let dx = -this.spread; dx <= this.spread; dx++) {
                const sx = x + dx;
                const sy = y + dy;
                
                if (sx >= 0 && sx < width && sy >= 0 && sy < width) {
                    const idx = (sy * width + sx) * 4;
                    const alpha = imageData[idx + 3] / 255;
                    
                    if ((inside && alpha <= 0.5) || (!inside && alpha > 0.5)) {
                        const dist = Math.sqrt(dx * dx + dy * dy);
                        minDist = Math.min(minDist, dist);
                    }
                }
            }
        }
        
        return minDist;
    }
}
----
rendering/MetadataVisualizer.ts
import {
    Group,
    Scene,
    PerspectiveCamera,
    Vector3,
    Color,
    Object3D,
    SphereGeometry,
    MeshBasicMaterial,
    Mesh
} from 'three';
import { NodeMetadata } from '../types/metadata';
import { Settings } from '../types/settings';
import { platformManager } from '../platform/platformManager';
import { createLogger, Logger } from '../core/logger';
import { debugState } from '../core/debugState';
import { UnifiedTextRenderer } from './UnifiedTextRenderer';

interface MetadataLabelGroup extends Group {
    name: string;
    userData: {
        isMetadata: boolean;
        nodeId?: string;
    };
}

export type MetadataLabelCallback = (group: MetadataLabelGroup) => void;

export class MetadataVisualizer {
    private scene: Scene;
    private labelGroup: Group;
    private settings: Settings;
    private debugEnabled: boolean = false;
    private textRenderer: UnifiedTextRenderer;
    private metadataGroups: Map<string, MetadataLabelGroup>;
    private logger: Logger;
    private debugHelpers: Map<string, Object3D>;
    private labelUpdateCount: number = 0;
    private lastClearTime: number = 0;
    private visibilityThreshold: number = 50; // Default visibility threshold

    constructor(camera: PerspectiveCamera, scene: Scene, settings: Settings) {
        this.scene = scene;
        this.settings = settings;
        this.metadataGroups = new Map();
        this.logger = createLogger('MetadataVisualizer');
        this.debugEnabled = debugState.isEnabled();
        
        this.debugHelpers = new Map();
        this.visibilityThreshold = settings.visualization.labels.visibilityThreshold || 50;
        
        // On initialization, log our settings
        if (this.debugEnabled) {
            console.log('[MetadataVisualizer] Initialized with settings:', {
                enableLabels: settings.visualization.labels.enableLabels,
                textColor: settings.visualization.labels.textColor,
                desktopFontSize: settings.visualization.labels.desktopFontSize,
                visibilityThreshold: this.visibilityThreshold
            });
        }
        
        this.logger.info('Initializing MetadataVisualizer with settings:', {
            enableLabels: settings.visualization.labels.enableLabels,
            textColor: settings.visualization.labels.textColor,
            desktopFontSize: settings.visualization.labels.desktopFontSize,
            visibilityThreshold: this.visibilityThreshold,
            textOutlineColor: settings.visualization.labels.textOutlineColor,
            billboardMode: settings.visualization.labels.billboardMode
        });

        this.labelGroup = new Group();
        this.scene.add(this.labelGroup);
        
        // Initialize text renderer
        this.textRenderer = new UnifiedTextRenderer(camera, scene, settings.visualization.labels);
        
        // Enable both layers by default for desktop mode
        this.labelGroup.layers.enable(0);
        this.labelGroup.layers.enable(1);
        
        // Set initial layer mode
        this.setXRMode(platformManager.isXRMode);
        
        // Listen for XR mode changes
        platformManager.on('xrmodechange', (enabled: boolean) => {
            this.setXRMode(enabled);
        });
    }

    public async createMetadataLabel(metadata: NodeMetadata, nodeId: string): Promise<MetadataLabelGroup> {
        // Track how many labels we've created
        this.labelUpdateCount++;

        // CRITICAL FIX: Ensure we're using the correct nodeId parameter passed in
        // The nodeId parameter from VisualizationController is now the correct numeric ID
        // that matches the binary WebSocket protocol IDs

        // Log detailed metadata info to help debug node label issues
        if (this.debugEnabled) {
            console.log(`[MetadataVisualizer] Creating label for node ${nodeId}:`, {
                name: metadata.name,
                fileSize: metadata.fileSize,
                hyperlinkCount: metadata.hyperlinkCount
            });
        }

        const group = new Group() as MetadataLabelGroup;
        group.name = 'metadata-label';
        group.userData = { 
            isMetadata: true,
            // Ensure we're storing the correct nodeId for position updates
            nodeId
        };


        // Format file size
        const fileSizeFormatted = !metadata.fileSize ? '0B' : metadata.fileSize > 1024 * 1024 
            ? `${(metadata.fileSize / (1024 * 1024)).toFixed(1)}MB`
            : metadata.fileSize > 1024
                ? `${(metadata.fileSize / 1024).toFixed(1)}KB`
                : `${metadata.fileSize}B`;
                
        // Log actual file size for debugging
        if (this.debugEnabled) {
            console.log(`[MetadataVisualizer] File size for node ${nodeId}: ${metadata.fileSize} bytes (${fileSizeFormatted})`);
        }

        // Only log detailed metadata at trace level (effectively disabling it)
        if (debugState.isDataDebugEnabled()) {
            this.logger.debug(`Creating metadata label #${this.labelUpdateCount}:`, {
                nodeId,
                metadata: {
                    name: metadata.name,
                    fileSize: fileSizeFormatted,
                    nodeSize: metadata.nodeSize
                }
            });
        }

        // Use metadata name, ensuring we show a properly formatted name
        const displayName = metadata.name || nodeId.toString();

        // Create text labels using UnifiedTextRenderer
        // First, find the node's actual position
        let nodePosition = new Vector3(0, 0, 0);
        
        // Get the actual node position from some source in the scene
        // This solves the labels "dropping in from above" issue
        if (debugState.isDataDebugEnabled()) {
            this.logger.debug(`Searching for node position for ${nodeId}`);
        }
        
        // We'll set the group's position initially to help with initialization
        group.position.copy(nodePosition);
        
        // Enhanced label text that displays the filename prominently
        const labelTexts = [
            `${displayName}`,  // Main label (filename)
            `${fileSizeFormatted}`,  // File size
            `${metadata.hyperlinkCount || 0} links`  // Link count
        ];

        const yOffsets = [0.05, 0.03, 0.01]; // Drastically reduced Y positions to keep labels almost at node position

        labelTexts.forEach(async (text, index) => {
            const position = new Vector3(nodePosition.x, nodePosition.y + yOffsets[index], nodePosition.z);
            const labelId = `${nodeId}-label-${index}`;
            
            try {
                this.textRenderer.updateLabel(
                    labelId,
                    text,
                    position,
                    new Color(this.settings.visualization.labels.textColor)
                );
                // Only log when specific data debugging is enabled
                if (debugState.isDataDebugEnabled()) {
                    this.logger.debug(`Created label ${index+1}/3 for node ${nodeId}`, {
                        labelId
                    });
                }
            } catch (error) {
                this.logger.error(`Failed to create label ${index+1}/3 for node ${nodeId}`, {
                    error: error instanceof Error ? error.message : String(error),
                    labelId,
                    text
                });
            }
        });

        this.metadataGroups.set(nodeId, group);
        
        // Add call to update position immediately to prevent "dropping in" effect
        this.updateMetadataPosition(nodeId, nodePosition);
        
        return group;
    }

    private setGroupLayer(group: Object3D, enabled: boolean): void {
        this.logger.debug(`Setting layer mode: ${enabled ? 'XR' : 'Desktop'}`);
        
        if (enabled) {
            group.traverse(child => {
                child.layers.disable(0);
                child.layers.enable(1);
            });
            group.layers.disable(0);
            group.layers.enable(1);
        } else {
            group.traverse(child => {
                child.layers.enable(0);
                child.layers.enable(1);
            });
            group.layers.enable(0);
            group.layers.enable(1);
        }
    }

    /**
     * Update visibility threshold for labels
     */
    public setXRMode(enabled: boolean): void {
        this.logger.info(`Switching to ${enabled ? 'XR' : 'Desktop'} mode`);
        this.textRenderer.setXRMode(enabled);
        this.setGroupLayer(this.labelGroup, enabled);
        // Text renderer handles its own XR mode
    }

    public updateMetadataPosition(nodeId: string, position: Vector3): void {
        /**
         * CRITICAL NODE ID BINDING: Position Updates
         * 
         * This method is called from VisualizationController to update the position
         * of a metadata label when node positions change via the WebSocket.
         * 
         * The nodeId parameter MUST match:
         * 1. The ID used in createMetadataLabel() to create the label
         * 2. The IDs coming from the binary WebSocket protocol
         * 
         * If labels don't move with their nodes, it's likely due to a mismatch
         * between the ID used here and the ID used in the binary protocol.
         */
        const group = this.metadataGroups.get(nodeId);
        if (group) {
            group.position.copy(position);
            
            // Update text positions
            const labelPositions = [0.05, 0.03, 0.01]; // Drastically reduced offsets to match createMetadataLabel
            labelPositions.forEach((yOffset, index) => {
                const labelId = `${nodeId}-label-${index}`;
                // Create relative position to the node with y-offset
                const relativePosition = new Vector3(0, yOffset, 0);
                const labelPosition = position.clone().add(relativePosition);
                this.textRenderer.updateLabel(labelId, '', labelPosition); // Text content remains unchanged
                
                // Only log position updates when specific data debugging is enabled
                if (index === 0 && debugState.isDataDebugEnabled()) {
                    this.logger.debug(`Updating label position for ${nodeId}`, {
                        labelId });
                }
                
                // Only show debug helpers when debug is enabled
                if (debugState.isEnabled()) {
                    const debugId = `${labelId}-debug`;
                    let debugSphere = this.debugHelpers.get(debugId) as Mesh | undefined;
                    if (!debugSphere) {
                        const geometry = new SphereGeometry(0.1);
                        const material = new MeshBasicMaterial({ color: 0xff0000 });
                        debugSphere = new Mesh(geometry, material) as Mesh;
                        this.labelGroup.add(debugSphere);
                        this.debugHelpers.set(debugId, debugSphere);
                    }
                    debugSphere.position.copy(labelPosition);
                    debugSphere.visible = true;
                }
            });
        }
    }

    /**
     * Updates the visibility threshold for metadata labels
     */
    public updateVisibilityThreshold(threshold: number): void {
        this.visibilityThreshold = threshold;
        this.logger.info('Updated visibility threshold:', { 
            threshold, 
            labelsCount: this.metadataGroups.size 
        });
    }

    public removeMetadata(nodeId: string): void {
        const group = this.metadataGroups.get(nodeId);
        if (group) {
            this.labelGroup.remove(group);
            this.metadataGroups.delete(nodeId);
            
            // Remove text labels
            [0, 1, 2].forEach(index => {
                const labelId = `${nodeId}-label-${index}`;
                this.textRenderer.removeLabel(labelId);
                const debugId = `${labelId}-debug`;
                
                if (debugState.isEnabled()) {
                    // Remove debug helpers
                    const debugHelper = this.debugHelpers.get(debugId);
                    if (debugHelper) this.labelGroup.remove(debugHelper);
                }
                if (this.debugHelpers.has(debugId)) this.debugHelpers.delete(debugId);
            });
        }
    }
    
    /**
     * Update all metadata labels - called once per frame
     */
    public update(_camera: PerspectiveCamera): void {
        // Very rarely log how many labels we're tracking
        if (Math.random() < 0.0001 && this.metadataGroups.size > 0) {
            // Only log if data debugging is specifically enabled
            if (debugState.isDataDebugEnabled()) {
                this.logger.debug('Metadata update stats:', {
                    labelsCount: this.metadataGroups.size,
                    enabled: this.settings.visualization.labels.enableLabels,
                    rendererActive: this.textRenderer !== null,
                    visibilityThreshold: this.visibilityThreshold
                });
            }
        }
        // The text renderer handles label positions and visibility
    }

    public dispose(): void {
        this.metadataGroups.forEach(group => {
            if (group.userData.nodeId) {
                try {
                    this.removeMetadata(group.userData.nodeId);
                } catch (e) {
                    this.logger.error(`Error removing metadata for node ${group.userData.nodeId}`, {
                        error: e instanceof Error ? e.message : String(e)
                    });
                }
            }
        });
        this.metadataGroups.clear();
        // Don't dispose the text renderer itself, as we'll reuse it
        // this.textRenderer.dispose();
        if (this.labelGroup.parent) {
            // Clean up debug helpers
            this.debugHelpers.forEach(helper => {
                this.labelGroup.remove(helper);
            });
            this.debugHelpers.clear();
            // Don't remove the label group from the scene, just clear it
            // this.labelGroup.parent.remove(this.labelGroup);
        }
        
        this.logger.info('Cleared all metadata visualizations');
    }
    
    /**
     * Clear all label content without fully disposing
     */
    public clearAllLabels(): void {
        // Store node IDs before clearing
        const nodeIds = Array.from(this.metadataGroups.keys());
        
        // Debounce clear operations to prevent excessive clearing
        const now = performance.now();
        if (now - this.lastClearTime < 1000) {
            // If a clear was performed in the last second, just log and return
            this.logger.debug(`Skipping redundant label clear operation (too soon after last clear)`);
            return;
        }
        this.lastClearTime = now;
        
        // Remove all labels
        nodeIds.forEach(nodeId => {
            this.removeMetadata(nodeId);
        });
        
        this.metadataGroups.clear();
        this.debugHelpers.clear();
        
        this.logger.info(`Cleared ${nodeIds.length} metadata labels`);
    }
}

----
rendering/VisualizationController.ts
import {
  Scene,
  PerspectiveCamera,
  // WebGLRenderer,
  Vector3,
  // Quaternion,
  // Matrix4,
  // Group,
  // Mesh,
  // MeshBasicMaterial,
  // Color,
  // Raycaster,
  // Object3D,
  // Euler,
  // MathUtils,
} from 'three';
import { createLogger, createErrorMetadata, createDataMetadata } from '../core/logger';
import { Settings } from '../types/settings/base';
import { defaultSettings } from '../state/defaultSettings';
import { XRHandWithHaptics } from '../types/xr';
import { EdgeManager } from './EdgeManager';
import { NodeManagerFacade } from './node/NodeManagerFacade';
import { graphDataManager } from '../state/graphData';
import { MetadataVisualizer } from './MetadataVisualizer';
import { GraphData } from '../core/types';
import { WebSocketService } from '../websocket/websocketService';
import { NodeMetadata } from '../types/metadata';
import { MaterialFactory } from './factories/MaterialFactory';
// import { SettingsStore } from '../state/SettingsStore'; // Commented out as it's unused
// import { debugState } from '../core/debugState'; // Commented out as it's unused
import { GraphDataManager } from '../state/graphData';
import { Node } from '../core/types';

const logger = createLogger('VisualizationController');

type VisualizationCategory = 'visualization' | 'physics' | 'rendering';
type PendingUpdate = { category: VisualizationCategory; value: any };

export class VisualizationController {
    private static instance: VisualizationController | null = null;
    private currentSettings: Settings;
    private edgeManager: EdgeManager | null = null;
    private nodeManager: NodeManagerFacade | null = null;
    private metadataVisualizer: MetadataVisualizer | null = null;
    private isInitialized: boolean = false;
    private pendingUpdates: Map<string, PendingUpdate> = new Map();
    private lastUpdateTime: number = performance.now();
    private websocketService: WebSocketService;
    private metadataVisualizationInitialized: boolean = false; 
    private lastMetadataUpdateTime: number = 0;
    private isRandomizationInProgress: boolean = false;
    private hasReceivedBinaryUpdate: boolean = false;
    private randomizationStartTime: number = 0;
    private randomizationAcknowledged: boolean = false;
    private randomizedNodeIds: Set<string> = new Set();
    private loadingIndicator: HTMLElement | null = null;

    private constructor() {
        // Initialize with complete default settings
        this.currentSettings = defaultSettings;
        this.websocketService = WebSocketService.getInstance();
        
        // Subscribe to graph data updates
        graphDataManager.subscribe((data: GraphData) => {
            if (this.isInitialized) {
                if (this.nodeManager) {
                    this.nodeManager.updateNodes(data.nodes);
                }
                if (this.edgeManager) {
                    this.edgeManager.updateEdges(data.edges);
                }
            } else {
                // Queue updates until initialized
                if (import.meta.env.DEV) logger.debug('Queuing updates until initialization');
            }
        });

        // Subscribe to websocket binary updates
        this.websocketService.onBinaryMessage((nodes) => {            
            if (this.nodeManager && this.isInitialized) {
                /**
                 * CRITICAL NODE ID BINDING: Binary WebSocket Protocol
                 * 
                 * This is a critical section that handles the node ID binding between the server's
                 * binary protocol and the client-side metadata visualization system:
                 * 
                 * 1. The server sends binary data containing node numeric IDs (u16 values)
                 * 2. These binary IDs must be preserved as strings in our client system
                 * 3. The metadata visualization system relies on these same IDs to bind positions
                 *    with the correct metadata
                 * 
                 * The WebSocketService has already converted the numeric IDs to strings, but we must
                 * ensure these string IDs are used consistently throughout the application.
                 */
                this.hasReceivedBinaryUpdate = true;
                
                let updates = nodes.map(node => ({
                    id: node.id.toString(), // Ensure ID is a string to match metadata binding
                    data: {
                        position: node.position,
                        velocity: node.velocity
                    }
                }));
                
                // Filter out nodes that we've just randomized if randomization is in progress
                // This prevents the server from sending back old positions during randomization
                if (this.isRandomizationInProgress) {
                    const now = performance.now();
                    // Only apply this filter for a few seconds after randomization starts
                    if (now - this.randomizationStartTime < 5000) {
                        updates = updates.filter(update => !this.randomizedNodeIds.has(update.id));
                        
                        // If we're filtering out updates, it means the server has acknowledged our data
                        if (updates.length < nodes.length) {
                            this.randomizationAcknowledged = true;
                            logger.info('Randomization acknowledged by server - filtered out ' + 
                                        (nodes.length - updates.length) + ' outdated positions');
                        }
                    } else {
                        // Time's up - end randomization mode
                        this.isRandomizationInProgress = false;
                        this.randomizedNodeIds.clear();
                        logger.info('Randomization sync period ended');
                    }
                }
                
                // Check if we haven't created metadata labels yet, and have received binary data
                // This ensures we have proper positions before creating labels
                if (this.hasReceivedBinaryUpdate && !this.metadataVisualizationInitialized && this.metadataVisualizer) {
                    logger.info('Received binary position updates. Initializing metadata visualization.');
                    this.initializeMetadataVisualization();
                }
                
                this.nodeManager.updateNodePositions(updates);
            }
        });

        // Handle loading status from WebSocket
        this.websocketService.onLoadingStatusChange((isLoading, message) => {
            if (isLoading) {
                this.showLoadingIndicator(message);
            } else {
                this.hideLoadingIndicator();
            }
        });
    }

    public initializeScene(scene: Scene, camera: PerspectiveCamera): void {
        logger.info('Initializing visualization scene');

        logger.info('INITIALIZATION ORDER: Step 1 - Configuring camera layers');
        // Ensure camera can see nodes
        camera.layers.enable(0);
        logger.debug('Camera layers configured', createDataMetadata({
            layerMask: camera.layers.mask.toString(2),
            layer0Enabled: Boolean(camera.layers.mask & (1 << 0)),
            layer1Enabled: Boolean(camera.layers.mask & (1 << 1))
        }));
        
        // Enable WebSocket debugging
        this.currentSettings.system.debug.enabled = true;
        this.currentSettings.system.debug.enableWebsocketDebug = true;
        
        logger.info('INITIALIZATION ORDER: Step 2 - Connecting WebSocket');
        // Connect to websocket first
        this.websocketService.connect().then(() => {
            logger.info('WebSocket connected, enabling binary updates');
            this.metadataVisualizationInitialized = false; // Reset flag when reconnecting
            graphDataManager.enableBinaryUpdates();
            
            // Send initial request for data
            this.websocketService.sendMessage({ 
                type: 'requestInitialData',
                timestamp: Date.now()
            });

            // Show loading indicator until data arrives
            this.showLoadingIndicator("Waiting for initial graph data...");
            
            // Initially disable randomization until data loading is finished
            this.websocketService.sendMessage({
                type: 'enableRandomization',
                enabled: false
            });
        }).catch(error => {
            logger.error('Failed to connect WebSocket:', createErrorMetadata(error));
        });

        logger.info('INITIALIZATION ORDER: Step 3 - Creating managers');        
        const materialFactory = MaterialFactory.getInstance();

        logger.info('INITIALIZATION ORDER: Step 3.1 - Creating NodeManagerFacade');
        this.nodeManager = NodeManagerFacade.getInstance(
            scene,
            camera,
            materialFactory.getNodeMaterial(this.currentSettings)
        );
        
        logger.info('INITIALIZATION ORDER: Step 3.2 - Creating EdgeManager');
        this.edgeManager = new EdgeManager(scene, this.currentSettings, this.nodeManager.getNodeInstanceManager());
        
        logger.info('INITIALIZATION ORDER: Step 3.3 - Creating MetadataVisualizer');
        this.metadataVisualizer = new MetadataVisualizer(camera, scene, this.currentSettings);
        this.isInitialized = true;
        
        if (import.meta.env.DEV) logger.debug('Scene managers initialized');

        // Initialize with current graph data (if any)
        const currentData = graphDataManager.getGraphData();
        if (currentData.nodes.length > 0 && this.nodeManager) {
            this.nodeManager.updateNodes(currentData.nodes);
        }

        logger.info('INITIALIZATION ORDER: Step 4 - Starting animation loop');
        // Start animation loop
        this.animate();

        // We'll initialize metadata visualization once we receive binary position updates
        logger.info('Scene initialization complete');
    }

    public static getInstance(): VisualizationController {
        if (!VisualizationController.instance) {
            VisualizationController.instance = new VisualizationController();
        }
        return VisualizationController.instance;
    }

    public updateSetting(path: string, value: any): void {
        // Hide loading indicator when any settings are changed
        this.hideLoadingIndicator();

        const parts = path.split('.');
        const category = parts[0] as VisualizationCategory;
        
        if (!['visualization', 'physics', 'rendering'].includes(category)) {
            return;
        }

        if (!this.isInitialized) {
            logger.debug(`Queuing setting update for ${path}`);
            this.pendingUpdates.set(path, { category, value });
            return;
        }

        let current = this.currentSettings as any;
        for (let i = 0; i < parts.length - 1; i++) {
            const part = parts[i];
            if (!(part in current)) {
                current[part] = {};
            }
            current = current[part];
        }

        current[parts[parts.length - 1]] = value;
        this.applySettingUpdate(category);
    }

    /**
     * Show a loading indicator while waiting for data
     * @param message Optional message to display
     */
    private showLoadingIndicator(message?: string): void {
        // Hide any existing indicator first
        this.hideLoadingIndicator();
        
        // Create loading indicator if it doesn't exist
        this.loadingIndicator = document.createElement('div');
        this.loadingIndicator.id = 'graph-loading-indicator';
        this.loadingIndicator.style.position = 'fixed';
        this.loadingIndicator.style.top = '50%';
        this.loadingIndicator.style.left = '50%';
        this.loadingIndicator.style.transform = 'translate(-50%, -50%)';
        this.loadingIndicator.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        this.loadingIndicator.style.color = 'white';
        this.loadingIndicator.style.padding = '20px';
        this.loadingIndicator.style.borderRadius = '10px';
        this.loadingIndicator.style.zIndex = '1000';
        this.loadingIndicator.style.textAlign = 'center';
        this.loadingIndicator.style.fontFamily = 'Arial, sans-serif';
        this.loadingIndicator.style.boxShadow = '0 0 20px rgba(0, 0, 255, 0.5)';
        this.loadingIndicator.style.border = '1px solid #3a3a3a';
        
        // Add loading spinner
        const spinner = document.createElement('div');
        spinner.style.display = 'inline-block';
        spinner.style.width = '30px';
        spinner.style.height = '30px';
        spinner.style.marginBottom = '10px';
        spinner.style.border = '4px solid rgba(255, 255, 255, 0.3)';
        spinner.style.borderRadius = '50%';
        spinner.style.borderTop = '4px solid #ffffff';
        spinner.style.animation = 'spin 1s linear infinite';
        
        // Add animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;
        document.head.appendChild(style);
        
        this.loadingIndicator.appendChild(spinner);
        
        // Create a line break
        this.loadingIndicator.appendChild(document.createElement('br'));
        
        // Add message text
        const messageText = document.createElement('div');
        messageText.textContent = message || 'Loading graph data...';
        this.loadingIndicator.appendChild(messageText);
        
        // Add to DOM
        document.body.appendChild(this.loadingIndicator);
    }
    
    /**
     * Hide the loading indicator
     */
    private hideLoadingIndicator(): void {
        if (this.loadingIndicator && document.body.contains(this.loadingIndicator)) {
            document.body.removeChild(this.loadingIndicator);
        }
        this.loadingIndicator = null;
    }

    public updateSettings(category: VisualizationCategory, settings: Partial<Settings>): void {
        if (!this.isInitialized) {
            logger.debug(`Queuing bulk settings update for ${category}`);
            this.pendingUpdates.set(category, { category, value: settings });
            return;
        }

        switch (category) {
            case 'visualization':
                if (settings.visualization) {
                    this.currentSettings.visualization = {
                        ...this.currentSettings.visualization,
                        ...settings.visualization
                    };
                    this.applyVisualizationUpdates();
                }
                break;
            case 'physics':
                if (settings.visualization?.physics) {
                    this.currentSettings.visualization.physics = {
                        ...this.currentSettings.visualization.physics,
                        ...settings.visualization.physics
                    };
                    this.updatePhysicsSimulation();
                }
                break;
            case 'rendering':
                if (settings.visualization?.rendering) {
                    this.currentSettings.visualization.rendering = {
                        ...this.currentSettings.visualization.rendering,
                        ...settings.visualization.rendering
                    };
                    this.updateRenderingQuality();
                }
                break;
        }
    }

    public getSettings(category: VisualizationCategory): Partial<Settings> {
        const baseVisualization = {
            nodes: { ...this.currentSettings.visualization.nodes },
            edges: { ...this.currentSettings.visualization.edges },
            physics: { ...this.currentSettings.visualization.physics },
            rendering: { ...this.currentSettings.visualization.rendering },
            animations: { ...this.currentSettings.visualization.animations },
            labels: { ...this.currentSettings.visualization.labels },
            bloom: { ...this.currentSettings.visualization.bloom },
            hologram: { ...this.currentSettings.visualization.hologram }
        };

        switch (category) {
            case 'visualization':
                return {
                    visualization: { ...this.currentSettings.visualization }
                };
            case 'physics':
                return {
                    visualization: {
                        ...baseVisualization,
                        physics: { ...this.currentSettings.visualization.physics }
                    }
                };
            case 'rendering':
                return {
                    visualization: {
                        ...baseVisualization,
                        rendering: { ...this.currentSettings.visualization.rendering }
                    }
                };
            default:
                return {
                    visualization: baseVisualization
                };
        }
    }

    public handleHandInput(hand: XRHandWithHaptics): void {
        if (!this.isInitialized || !hand) return;

        const pinchStrength = hand.pinchStrength || 0;
        const gripStrength = hand.gripStrength || 0;

        if (pinchStrength > (this.currentSettings.xr.pinchThreshold || 0.5)) {
            logger.debug('Pinch gesture detected', { strength: pinchStrength });
        }

        if (gripStrength > (this.currentSettings.xr.dragThreshold || 0.5)) {
            logger.debug('Grip gesture detected', { strength: gripStrength });
        }

        if (hand.hand?.joints) {
            logger.debug('Processing hand joints');
        }
    }

    private applySettingUpdate(category: VisualizationCategory): void {
        if (!this.isInitialized) {
            logger.debug(`Queuing category update for ${category}`);
            return;
        }

        logger.debug(`Updating ${category} settings`);
        
        switch (category) {
            case 'visualization':
                this.applyVisualizationUpdates();
                break;
            case 'physics':
                this.updatePhysicsSimulation();
                break;
            case 'rendering':
                this.updateRenderingQuality();
                break;
        }
    }

    private applyVisualizationUpdates(): void {
        if (!this.isInitialized) return;
        this.updateNodeAppearance();
        this.updateEdgeAppearance();
        // Update metadata visualization
        if (this.metadataVisualizer && this.metadataVisualizationInitialized) {
            // Only update positions of existing metadata, don't recreate everything
            this.updateMetadataPositions();
        }
        // Intentionally not initializing metadata visualization here anymore
        // We'll wait for binary data with positions first
        
    }

    private updateNodeAppearance(): void {
        if (!this.isInitialized) return;
        logger.debug('Updating node appearance');
        if (this.nodeManager) {
            this.nodeManager.handleSettingsUpdate(this.currentSettings);
        }
    }

    private updateEdgeAppearance(): void {
        if (!this.isInitialized) {
            logger.debug('Queuing edge appearance update');
            return;
        }

        if (this.edgeManager) {
            this.edgeManager.handleSettingsUpdate(this.currentSettings);
            logger.debug('Edge appearance updated');
        } else {
            logger.warn('EdgeManager not initialized');
        }
    }

    private updatePhysicsSimulation(): void {
        if (!this.isInitialized) return;
        logger.debug('Updating physics simulation');
    }

    private updateRenderingQuality(): void {
        if (!this.isInitialized) return;
        logger.debug('Updating rendering quality');
    }

    public updateNodePositions(nodes: any[]): void {
        if (this.nodeManager) {
            this.nodeManager.updateNodePositions(nodes);
        }
    }

    /**
     * Randomly distributes all nodes in 3D space and triggers WebSocket updates
     * @param radius The radius of the sphere within which to distribute nodes
     */
    public async randomizeNodePositions(radius: number = 7): Promise<void> {
        // First, ensure WebSocket is connected
        const connectionState = this.websocketService.getConnectionStatus();
        logger.info(`Randomizing nodes. Current WebSocket state: ${connectionState}`);
        
        if (connectionState !== 'connected') {
            logger.warn(`WebSocket not connected (state: ${connectionState}), attempting to reconnect...`);
            
            try {
                // Try to reconnect
                await this.websocketService.connect();
                
                // Wait a bit to ensure connection is stable
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // Check again
                const newState = this.websocketService.getConnectionStatus();
                if (newState !== 'connected') {
                    logger.error(`Failed to establish WebSocket connection (state: ${newState})`);
                    // Proceed with local randomization only
                    logger.warn('Will perform randomization locally only without server sync');
                } else {
                    logger.info('Successfully reconnected WebSocket for randomization');
                }
            } catch (error) {
                logger.error('Error reconnecting WebSocket:', createErrorMetadata(error));
                // Proceed with local randomization only
                logger.warn('Will perform randomization locally only without server sync');
            }
        }

        // Enforce maximum radius to prevent explosion
        radius = Math.min(radius, 5); // Reduced maximum radius to prevent explosion

        if (!this.nodeManager || !this.isInitialized) {
            logger.warn('Cannot randomize node positions - Node manager not initialized');
            return;
        }

        // Don't start another randomization if one is in progress
        if (this.isRandomizationInProgress) {
            logger.warn('Randomization already in progress, please wait...');
            return;
        }
        
        // Start tracking randomization
        this.isRandomizationInProgress = true;
        this.randomizationStartTime = performance.now();
        
        // Get node data from the graph manager
        const graphData = GraphDataManager.getInstance().getGraphData();
        if (!graphData || !graphData.nodes || graphData.nodes.length === 0) {
            logger.warn('No nodes found to randomize');
            return;
        }

        logger.info('Randomizing node positions with radius:', createDataMetadata({ 
            radius,
            nodeCount: graphData.nodes.length
        }));
        this.randomizedNodeIds.clear();
        
        // Create node updates with random positions - using original node IDs
        // WebSocketService will handle converting metadata names to numeric IDs
        const updates = graphData.nodes.map((node: Node) => {
            const nodeId = node.id; // Keep original ID - WebSocketService handles mapping to numeric

            // Generate random position within a sphere
            const theta = Math.random() * Math.PI * 2; // Random angle around Y axis
            const phi = Math.acos((Math.random() * 2) - 1); // Random angle from Y axis
            // Use square root for more central clustering
            const r = radius * Math.sqrt(Math.random()); // Random distance from center
            
            // Convert spherical to Cartesian coordinates
            const x = r * Math.sin(phi) * Math.cos(theta);
            const y = r * Math.sin(phi) * Math.sin(theta);
            const z = r * Math.cos(phi);

            // Use near-zero initial velocities to prevent explosion
            // Set zero velocity for all axes - completely remove any initial bias
            const vx = 0.0;
            const vy = 0.0;
            const vz = 0.0; // Removed bias that could cause z-axis drift
            

            // Track which nodes we've randomized
            this.randomizedNodeIds.add(nodeId);
            
            return {
                id: nodeId,
                data: {
                    position: new Vector3(x, y, z),
                    velocity: new Vector3(vx, vy, vz)
                }
            };
        });
        
        // Update local node positions
        this.nodeManager.updateNodePositions(updates);
        
        // Send updates to server via WebSocket
        if (this.websocketService) {
            // First, ensure we signal server to stop any current physics simulation
            this.websocketService.sendMessage({ 
                type: 'pauseSimulation',
                enabled: true
            });
            
            // Wait for a short delay to ensure the server has processed the pause
            await new Promise(resolve => setTimeout(resolve, 300));
            
            this.randomizationAcknowledged = false;
            
            logger.info('Sending node positions to server in batch...');
            
            // Send positions in batches to avoid overwhelming the server
            const batchSize = 5;
            const connectionState = this.websocketService.getConnectionStatus();
            
            // Only send updates if websocket is connected
            if (connectionState === 'connected') {
                logger.info(`Sending ${updates.length} node updates to server in ${Math.ceil(updates.length/batchSize)} batches`);
                
                // Send updates in batches with a small delay between batches
                for (let i = 0; i < updates.length; i += batchSize) {
                    const batch = updates.slice(i, i + batchSize);
                    const wsUpdates = batch.map(update => ({ 
                        id: update.id,
                        position: update.data.position,
                        velocity: update.data.velocity
                    }));
                    
                    // Log the first batch to help with debugging
                    if (i === 0) {
                        logger.info('First batch node updates:', createDataMetadata({
                            batchSize: wsUpdates.length,
                            sampleNodeId: wsUpdates[0].id,
                            sampleNodeIdType: typeof wsUpdates[0].id,
                            samplePosition: {
                                x: wsUpdates[0].position.x,
                                y: wsUpdates[0].position.y,
                                z: wsUpdates[0].position.z
                            }
                        }));
                    }
                    
                    this.websocketService.sendNodeUpdates(wsUpdates);
                    
                    // Small delay between batches to avoid overwhelming the server
                    if (i + batchSize < updates.length) {
                        await new Promise(resolve => setTimeout(resolve, 50));
                    }
                }
                
                logger.info('Finished sending all node update batches');
            } else {
                logger.warn(`Cannot send updates - WebSocket not connected (state: ${connectionState})`);
            }
            
            // Old approach that sent one at a time - keeping as fallback
            /*
            updates.forEach((update) => {
                // Send updates to server one at a time with minimal velocity
                this.websocketService.sendNodeUpdates([{ 
                    id: update.id,
                    position: update.data.position,
                    velocity: update.data.velocity
                }]);
            });
            */
            
            // Signal server to resume physics simulation with new positions
            setTimeout(async () => {
                logger.info('Resuming physics simulation after position updates');
                
                // Only send message if connected
                if (this.websocketService.getConnectionStatus() === 'connected') {
                this.websocketService.sendMessage({ 
                    type: 'pauseSimulation',
                    enabled: false
                });

                // Also explicitly request force calculation to begin
                this.websocketService.sendMessage({
                    type: 'applyForces',
                    timestamp: Date.now()
                });
                }
                
                // Wait up to 5 seconds for acknowledgment
                const waitForAcknowledgment = async () => {
                    for (let i = 0; i < 10; i++) { // 10 * 500ms = 5 seconds
                        if (this.randomizationAcknowledged) return true;
                        await new Promise(resolve => setTimeout(resolve, 500));
                    }
                    return false;
                };
                
                const acknowledged = await waitForAcknowledgment();
                logger.info(`Randomization ${acknowledged ? 'confirmed' : 'timed out waiting for confirmation'}`);
                
                // Mark randomization as complete even if no acknowledgment received
                this.isRandomizationInProgress = false;
                
            }, 500); // Short delay to ensure all positions are processed
        } else {
            // No WebSocket service or not connected
            this.isRandomizationInProgress = false;
            this.randomizedNodeIds.clear();
            logger.warn('WebSocket service not available, node positions only updated locally');
        }
    }

    private animate = (): void => {
        if (!this.isInitialized) return;

        requestAnimationFrame(this.animate);
        const currentTime = performance.now();
        const deltaTime = (currentTime - this.lastUpdateTime) / 1000;
        this.update(deltaTime);
    }

    public update(deltaTime: number): void {
        if (this.isInitialized) {
            const currentTime = performance.now();
            if (deltaTime === 0) {
                deltaTime = (currentTime - this.lastUpdateTime) / 1000;
            }
            this.lastUpdateTime = currentTime;
            if (this.nodeManager) {
                this.nodeManager.update(deltaTime);
            }

            // Update edge animations
            if (this.edgeManager) {
                this.edgeManager.update();  // No parameter needed as the method was updated
            }
            
            // Update ONLY metadata positions - do not recreate labels every frame
            if (this.metadataVisualizer && this.nodeManager && this.metadataVisualizationInitialized) {
                this.updateMetadataPositions(); 
            }
        }
    }

    public dispose(): void {
        // Dispose of managers and cleanup websocket
        if (this.metadataVisualizer) {
            this.metadataVisualizer?.dispose();
            this.metadataVisualizer = null;
        }
        this.nodeManager?.dispose();
        this.hideLoadingIndicator();
        this.edgeManager?.dispose();
        this.websocketService.dispose();
        this.isInitialized = false;
        VisualizationController.instance = null;
    }

    /**
     * Update only the positions of metadata labels without recreating them
     * This is called every frame for efficiency
     */
    private updateMetadataPositions(): void {
        if (!this.isInitialized || !this.metadataVisualizer || !this.nodeManager) return;
        
        const currentData = graphDataManager.getGraphData();
        // Only occasionally log updates
        if (Math.random() < 0.001) {
            logger.debug('Updating metadata positions for nodes:', createDataMetadata({
                nodeCount: currentData.nodes.length
            }));
        }
        
        // Update positions for existing metadata labels
        currentData.nodes.forEach(node => {
            const position = this.nodeManager?.getNodeInstanceManager().getNodePosition(node.id);
            if (position) {
                this.metadataVisualizer?.updateMetadataPosition(node.id, position);
            }
        });
    }

    /**
     * Initialize the metadata visualization once - called only after binary updates
     * are available so positions are correct
     */
    private initializeMetadataVisualization(): void {
        // Removed unused startTime variable
        
        if (!this.isInitialized || !this.metadataVisualizer || !this.nodeManager) return;
        if (this.metadataVisualizationInitialized) {
            logger.debug('Metadata visualization already initialized, skipping initialization');
            return;
        }
        
        // Set flag first to prevent repeated initialization
        this.metadataVisualizationInitialized = true;
        this.lastMetadataUpdateTime = performance.now();
        
        logger.info('CRITICAL EVENT: Initializing metadata visualization for the first time', createDataMetadata({
            hasNodeManager: !!this.nodeManager,
            hasMetadataVisualizer: !!this.metadataVisualizer
        }));
        
        // Perform the full visualization update (create labels)
        this.updateMetadataVisualization(true);
    }

    /**
     * Update metadata visualization, optionally clearing existing labels
     * @param clearExisting Whether to clear existing labels
     */
    private updateMetadataVisualization(clearExisting: boolean = false): void {
        const startTime = performance.now();
        if (!this.isInitialized || !this.metadataVisualizer || !this.nodeManager) return;
        
        // Debounce frequently repeated calls
        const now = performance.now();
        if (now - this.lastMetadataUpdateTime < 1000) return; // Prevent updates more than once per second
        this.lastMetadataUpdateTime = now;
        
        // Only clear existing labels if specified
        if (clearExisting) {
            logger.debug('Clearing existing metadata labels before creating new ones');
            if (this.metadataVisualizer && 'clearAllLabels' in this.metadataVisualizer) {
                this.metadataVisualizer.clearAllLabels();
            } else {
                logger.warn('Cannot clear labels: clearAllLabels method not found on MetadataVisualizer', createDataMetadata({
                    availableMethods: this.metadataVisualizer ? Object.getOwnPropertyNames(Object.getPrototypeOf(this.metadataVisualizer)) : []
                }));
            }
        }
        
        
        // Store information on the nodes we'll process for logging
        const currentData = graphDataManager.getGraphData();
        logger.info('Updating metadata visualization for nodes:', createDataMetadata({
            nodeCount: currentData.nodes.length
        }));
        
        // Keep track of processed node ids to avoid duplicates
        const processedNodeIds = new Set<string>();
        const positionMap = new Map();
        
        // Create metadata for all nodes
        currentData.nodes.forEach((node, index) => {
            /**
             * CRITICAL NODE ID BINDING: Metadata Visualization
             * 
             * This is where metadata gets bound to node IDs. The critical points:
             * 
             * 1. The node.id MUST be a numeric string that matches the IDs from the binary protocol
             * 2. This ID originated from the server as a u16 value in the binary messages
             * 3. Both MetadataVisualizer and NodeInstanceManager must use the same ID values
             *    to ensure proper position updates and metadata binding
             * 4. Duplicate IDs must be skipped to prevent overwriting metadata
             */
            if (processedNodeIds.has(node.id)) {
                logger.debug(`Skipping duplicate node ID ${node.id}`);
                return;
            }
            
            // Validate ID format - we expect numeric string IDs from the binary protocol
            // Check if ID is a valid numeric string - this is critical for proper binding
            // with the binary message protocol which uses numeric IDs
            if (!/^\d+$/.test(node.id)) {
                logger.warn(`Node ${node.id} has non-numeric ID format which may cause metadata binding issues. 
                    Binary protocol requires numeric string IDs for proper binding.`);
            }
            
            // Mark as processed
            processedNodeIds.add(node.id);

            // CRITICAL: Get the proper label from the node
            // This is crucial for correct label display - using the right property chain
            let nodeLabel: string | undefined;
            
            // Check for valid position
            if (!node.data?.position || 
                (node.data.position.x === 0 && node.data.position.y === 0 && node.data.position.z === 0)) {
                logger.warn(`Node ${node.id} has zero/null position during label initialization`, createDataMetadata({
                    position: node.data?.position ? JSON.stringify(node.data.position) : 'undefined',
                    hasData: !!node.data,
                    metadataId: node.metadataId || 'undefined',
                    label: node.label || 'undefined'
                }));
            } else if (node.data?.position) {
                // Store valid positions for logging
                positionMap.set(node.id, `x:${node.data.position.x.toFixed(2)}, y:${node.data.position.y.toFixed(2)}, z:${node.data.position.z.toFixed(2)}`);
            }
            
            // Get the label from the node using the correct property path
            // First check if node has a direct label property
            if (node.label && typeof node.label === 'string') {
                nodeLabel = node.label; // Use explicit node.label if available
            } 
            // Then check if node has a metadataId (filename)
            else if (node.metadataId && typeof node.metadataId === 'string') {
                nodeLabel = node.metadataId; // Fall back to metadataId (filename)
            }
            // Finally check if the label is in node.data.metadata
            else if (node.data?.metadata?.name && typeof node.data.metadata.name === 'string') {
                nodeLabel = node.data.metadata.name;
            }
            
            // Log actual label being used
            logger.debug(`Using label for node ${node.id}: "${nodeLabel || 'undefined'}"`);
            
            // Create metadata even if node.data.metadata is missing
            // Use node ID as a fallback for the name
            const nodeMetadata = node.data?.metadata || {};
            
            // Log the actual data we're working with for debugging
            if (index < 5) {
                logger.info(`Processing node #${index}: ${node.id}`, createDataMetadata({
                    name: nodeMetadata.name || node.id,
                    label: nodeLabel || '(undefined)',
                    fileSize: nodeMetadata.fileSize,
                    position: node.data.position
                })); 
            }
                
            const metadata: NodeMetadata = {
                id: node.id,
                // Use explicit || chaining to handle all possible undefined cases
                // Ensure each node gets its own unique label
                name: nodeLabel || nodeMetadata.name || node.id || `Node ${index}`,
                commitAge: Math.floor((Date.now() - (nodeMetadata.lastModified || Date.now())) / (1000 * 60 * 60 * 24)),
                hyperlinkCount: nodeMetadata.hyperlinkCount || 0,
                fileSize: nodeMetadata.fileSize || 1024,
                nodeSize: Math.min(50, Math.max(1, Math.log10((nodeMetadata.fileSize || 1024) / 1024) * 10)), // Scale based on file size (1-50)
                importance: 1.0, // Default importance
                position: {
                    x: node.data.position.x || 0,
                    y: node.data.position.y || 0,
                    z: node.data.position.z || 0
                }
            };
                
            /**
             * CRITICAL NODE ID BINDING: Creating Metadata Labels
             * 
             * When creating metadata labels, we MUST pass the node.id (numeric string)
             * to the MetadataVisualizer rather than the display name or other identifier.
             * 
             * This ensures the correct binding between:
             * 1. Binary position updates from WebSocket (which use numeric IDs)
             * 2. Metadata visualizations (which need to track those same IDs)
             * 3. Node instance updates (which also use those IDs)
             * 
             * IMPORTANT: Passing the wrong ID here was the root cause of the metadata binding issue
             */
            this.metadataVisualizer?.createMetadataLabel(metadata, node.id);
                
            // Update position immediately to avoid the "dropping in" effect
            const position = this.nodeManager?.getNodeInstanceManager().getNodePosition(node.id);
            if (position) {
                this.metadataVisualizer?.updateMetadataPosition(node.id, position);
            }
        });

        // Log position information to help diagnose issues
        const samplePositions = Array.from(positionMap.entries()).slice(0, 5)
            .map(([id, pos]) => `${id}: ${pos}`).join(', ');

        const elapsedTime = performance.now() - startTime;

        logger.info('Metadata visualization complete', createDataMetadata({
            nodesProcessed: processedNodeIds.size,
            processingTimeMs: elapsedTime.toFixed(2),
            nodesWithPosition: positionMap.size,
            nodesWithoutPosition: processedNodeIds.size - positionMap.size,
            samplePositions: samplePositions,
            sampleLabels: currentData.nodes.slice(0, 3).map(n => n.data?.metadata?.name || n.id).join(", "),
            elapsedTimeMs: elapsedTime.toFixed(2)
        }));
    }
}

----
rendering/UnifiedTextRenderer.ts
import {
    Scene,
    Camera,
    Group,
    Texture,
    BufferGeometry,
    NearestFilter,
    ClampToEdgeWrapping,
    InstancedBufferAttribute,
    PlaneGeometry,
    Mesh,
    Vector3,
    Color,
    MeshBasicMaterial,
    BufferAttribute
} from 'three';
import { debugState } from '../core/debugState';
import { createLogger } from '../core/logger';
import { LabelSettings } from '../types/settings';
import { platformManager } from '../platform/platformManager';
import { SDFFontAtlasGenerator } from './SDFFontAtlasGenerator';
import '../types/three-ext.d';

const logger = createLogger('UnifiedTextRenderer');

// Note: Using fallback basic material approach instead of custom shaders
// to avoid WebGL shader compilation issues

interface LabelInstance {
    id: string;
    text: string;
    position: Vector3;
    scale: number;
    color: Color;
    visible: boolean;
}

export class UnifiedTextRenderer {
    private scene: Scene;
    private camera: Camera;
    private group: Group;
    private material: MeshBasicMaterial;
    private geometry: BufferGeometry;
    private mesh: Mesh;
    private fontAtlas: Texture | null;
    private labels: Map<string, LabelInstance>;
    private settings: LabelSettings;
    private maxInstances: number;
    private currentInstanceCount: number;
    private logger = createLogger('UnifiedTextRenderer');
    private fontAtlasGenerator: SDFFontAtlasGenerator;
    
    constructor(camera: Camera, scene: Scene, settings: LabelSettings) {
        this.scene = scene;
        this.camera = camera;
        this.settings = settings;
        
        // Only log detailed settings when data debugging is enabled
        if (debugState.isDataDebugEnabled()) {
            logger.info('UnifiedTextRenderer settings:', {
                enableLabels: this.settings.enableLabels,
                desktopFontSize: this.settings.desktopFontSize,
                textColor: this.settings.textColor,
                billboardMode: this.settings.billboardMode
            });
        }

        this.labels = new Map();
        this.maxInstances = 2000;
        this.currentInstanceCount = 0;
        this.fontAtlas = null;
        
        this.group = new Group();
        this.scene.add(this.group);
        
        this.fontAtlasGenerator = new SDFFontAtlasGenerator(2048, 8, 16);

        // Only log initialization details when debugging is enabled
        if (debugState.isDataDebugEnabled()) {
            this.logger.info('Initializing material with basic settings', {
                color: this.settings.textColor,
                transparent: true
            });
        }
        
        // Use basic material instead of shader material to avoid WebGL issues.
        // Disable depthTest and depthWrite so labels are always visible.
        this.material = new MeshBasicMaterial({ 
            color: new Color(this.settings.textColor),
            transparent: true,
            depthTest: false,
            depthWrite: false
        });
        
        this.geometry = this.createInstancedGeometry();
        
        // Only log geometry details when debugging is enabled
        if (debugState.isDataDebugEnabled()) {
            this.logger.info('Created instanced geometry:', {
                maxInstances: this.maxInstances,
                instancePosition: this.geometry.getAttribute('instancePosition')?.count,
                instanceColor: this.geometry.getAttribute('instanceColor')?.count,
                instanceScale: this.geometry.getAttribute('instanceScale')?.count
            });
        }
        
        this.mesh = new Mesh(this.geometry, this.material);
        // Ensure text labels render on top by assigning a very high render order
        this.mesh.renderOrder = 1000; // Increased to match NodeMetadataManager sprite renderOrder
        this.group.add(this.mesh);
        
        this.setXRMode(platformManager.isXRMode);
        platformManager.on('xrmodechange', (enabled: boolean) => {
            this.setXRMode(enabled);
        });
        
        // Initialize font atlas
        this.initializeFontAtlas();
    }
    
    private async initializeFontAtlas(): Promise<void> {
        try {
            // Only log font atlas generation details when debugging is enabled
            if (debugState.isDataDebugEnabled()) {
                this.logger.info('Starting font atlas generation with params:', {
                    fontFamily: 'Arial',
                    fontSize: 32,
                    textureSize: (this.fontAtlasGenerator as any)['atlasSize'],
                    padding: (this.fontAtlasGenerator as any)['padding'],
                    spread: (this.fontAtlasGenerator as any)['spread']
                });
            }

            const { texture } = await this.fontAtlasGenerator.generateAtlas(
                'Arial',
                32 // Base font size for SDF
            );
            
            // Configure texture parameters
            texture.minFilter = NearestFilter;
            texture.magFilter = NearestFilter;
            texture.wrapS = ClampToEdgeWrapping;
            texture.wrapT = ClampToEdgeWrapping;
            
            this.fontAtlas = texture;
            
            // Only log atlas generation completion when debugging is enabled
            if (debugState.isDataDebugEnabled()) {
                this.logger.info('Font atlas generated successfully:', {
                    textureWidth: (texture as any).image?.width,
                    textureHeight: (texture as any).image?.height,
                    format: (texture as any).format,
                    mipmaps: (texture as any).mipmaps?.length || 0
                });
            }
            
            // Update all existing labels
            this.labels.forEach((label, id) => {
                this.updateLabel(id, label.text, label.position, label.color);
            });
        } catch (error) {
            this.logger.error('Failed to initialize font atlas:', {
                error,
                message: error instanceof Error ? error.message : String(error),
                stack: error instanceof Error ? error.stack : undefined
            });
        }
    }
    
    private createInstancedGeometry(): BufferGeometry {
        const baseGeometry = new PlaneGeometry(1, 1);
        const instancedGeometry = new BufferGeometry();
        
        // Copy attributes from base geometry
        const position = baseGeometry.getAttribute('position');
        const uv = baseGeometry.getAttribute('uv');
        const normal = baseGeometry.getAttribute('normal');
        
        instancedGeometry.setAttribute('position', position);
        instancedGeometry.setAttribute('uv', uv);
        if (normal) instancedGeometry.setAttribute('normal', normal);
        
        // Set up instanced attributes with proper sizes
        const instancePositions = new Float32Array(this.maxInstances * 3); // vec3
        const instanceColors = new Float32Array(this.maxInstances * 4);    // vec4
        const instanceScales = new Float32Array(this.maxInstances);        // float
        
        // Initialize instance attributes with proper itemSize
        instancedGeometry.setAttribute(
            'instancePosition',
            new InstancedBufferAttribute(instancePositions, 3, false)
        );
        instancedGeometry.setAttribute(
            'instanceColor',
            new InstancedBufferAttribute(instanceColors, 4, false)
        );
        instancedGeometry.setAttribute(
            'instanceScale',
            new InstancedBufferAttribute(instanceScales, 1, false)
        );
        
        // Copy index if present
        const index = (baseGeometry as any).index;
        if (index instanceof BufferAttribute) {
            instancedGeometry.setIndex(index);
        }
        
        // Clean up base geometry
        baseGeometry.dispose();
                
        return instancedGeometry;
    }
    
    public updateLabel(id: string, text: string, position: Vector3, color?: Color): void {
        // Skip empty text (reduces debug spam)
        if (!text || text.trim() === '') {
            return;
        }
        

        
        // Only log when debug is enabled
        if (debugState.isDataDebugEnabled()) {
            this.logger.debug('Updating label:', {
                id,
                text,
                position,
                color: color ? [(color as any).r, (color as any).g, (color as any).b] : undefined,
                hasAtlas: !!this.fontAtlas
            });
        }
        
        let label = this.labels.get(id);
        
        if (!label) {
            if (this.currentInstanceCount >= this.maxInstances) {
                this.logger.warn(`Maximum instance count (${this.maxInstances}) reached, cannot add more labels`);
                return;
            }
            
            label = {
                id,
                text,
                position: position.clone(),
                scale: 1.0,
                color: color || new Color(this.settings.textColor),
                visible: true
            };
            
            if (debugState.isDataDebugEnabled()) {
                this.logger.debug('Created new label instance:', {
                    id,
                    instanceIndex: this.currentInstanceCount,
                    position,
                    color: color ? [(color as any).r, (color as any).g, (color as any).b] : undefined
                });
            }
            
            this.labels.set(id, label);
            this.currentInstanceCount++;
        } else {
            label.text = text;
            label.position.copy(position);
            if (color) label.color = color;
        }
        
        this.updateInstanceAttributes();
    }
    
    private updateInstanceAttributes(): void {
        const positions = (this.geometry.getAttribute('instancePosition') as InstancedBufferAttribute).array as Float32Array;
        const colors = (this.geometry.getAttribute('instanceColor') as InstancedBufferAttribute).array as Float32Array;
        const scales = (this.geometry.getAttribute('instanceScale') as InstancedBufferAttribute).array as Float32Array;

        if (debugState.isDataDebugEnabled()) {
            // Debug log instance updates
            this.logger.debug('Updating instance attributes:', {
                currentInstanceCount: this.currentInstanceCount,
                labelsCount: this.labels.size,
                positionsLength: positions.length,
                colorsLength: colors.length
            });
        }
        
        let index = 0;
        this.labels.forEach(label => {
            if (label.visible) {
                positions[index * 3] = label.position.x;
                positions[index * 3 + 1] = label.position.y;
                positions[index * 3 + 2] = label.position.z;
                
                const colorArray = label.color.toArray();
                colors.set(colorArray, index * 4);
                colors[index * 4 + 3] = 1.0;
                
                scales[index] = label.scale;
                index++;
            }
        });
        
        // Set instance count on the mesh
        (this.mesh as any).instanceCount = this.currentInstanceCount;
        
        if (debugState.isDataDebugEnabled()) {
            // Debug log final state
            this.logger.debug('Instance attributes updated:', {
                instanceCount: (this.mesh as any).instanceCount,
                visibleLabels: index
            });
        }
        
        (this.geometry.getAttribute('instancePosition') as InstancedBufferAttribute).needsUpdate = true;
        (this.geometry.getAttribute('instanceColor') as InstancedBufferAttribute).needsUpdate = true;
        (this.geometry.getAttribute('instanceScale') as InstancedBufferAttribute).needsUpdate = true;
    }
    
    public removeLabel(id: string): void {
        if (this.labels.delete(id)) {
            this.currentInstanceCount--;
            this.updateInstanceAttributes();
        }
    }
    
    public setXRMode(enabled: boolean): void {
        if (enabled) {
            this.group.layers.disable(0);
            this.group.layers.enable(1);
        } else {
            this.group.layers.enable(0);
            this.group.layers.enable(1);
        }
    }
    
    public update(): void {
        if (!this.camera || !this.material) return;
        
        // When in camera billboard mode, update all labels regardless of position
        if (this.settings.billboardMode === 'camera') {
            this.labels.forEach((label, id) => {
                this.updateLabel(id, label.text, label.position, label.color);
            });
        } else {
            // For other billboard modes, update only visible labels
            this.labels.forEach((label, id) => {
                if (this.isLabelVisible(label)) {
                    this.updateLabel(id, label.text, label.position, label.color);
                }
            });
        }
    }

    private isLabelVisible(label: LabelInstance): boolean {
        if (!label.visible) return false;
        
        // When billboard_mode is "camera", don't cull labels based on position relative to camera
        // This ensures labels are visible regardless of which side of the origin they're on
        if (this.settings.billboardMode === 'camera') {
            return true;
        }
        
        // For other billboard modes, use distance-based culling with the camera's far plane
        const distanceToCamera = label.position.distanceTo(this.camera.position);
        const margin = 5.0;  // Units in world space
        
        // Check if label is within camera's view distance (with margin)
        return distanceToCamera <= (this.camera as any).far + margin;
    }

    public dispose(): void {
        this.geometry.dispose();
        if (this.material) {
            this.material.dispose();
        }
        if (this.fontAtlas) {
            this.fontAtlas.dispose();
        }
        if (this.group && this.group.parent) {
            this.group.parent.remove(this.group);
        }
    }
}

----
rendering/factories/MaterialFactory.ts
import { HologramShaderMaterial } from '../materials/HologramShaderMaterial';
import { 
    Color, 
    Material, 
    MeshStandardMaterial, 
    LineBasicMaterial,
    DoubleSide
} from 'three';

export class MaterialFactory {
    private static instance: MaterialFactory;
    private materialCache: Map<string, Material>;

    private constructor() {
        this.materialCache = new Map();
    }

    public static getInstance(): MaterialFactory {
        if (!MaterialFactory.instance) {
            MaterialFactory.instance = new MaterialFactory();
        }
        return MaterialFactory.instance;
    }

    private hexToRgb(hex: string): Color {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        if (!result) {
            return new Color(0xffffff);
        }
        return new Color(`#${result[1]}${result[2]}${result[3]}`);
    }

    public createHologramMaterial(settings: any, context: 'ar' | 'desktop' = 'desktop'): HologramShaderMaterial {
        const cacheKey = 'hologram';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey) as HologramShaderMaterial;
        }

        const material = new HologramShaderMaterial(settings);
        
        if (settings.visualization?.hologram?.ringColor) {
            const materialColor = this.hexToRgb(settings.visualization.hologram.ringColor);
            material.uniforms.color.value = materialColor;
        }
        
        // Optimize for Quest
        if (context === 'ar') {
            material.transparent = true;
            material.depthWrite = true; // Improve depth sorting
            material.opacity = (settings.visualization?.hologram?.opacity || 0.6) * 0.8; // Reduce opacity for better performance
        }

        this.materialCache.set(cacheKey, material);
        return material;
    }

    public getHologramMaterial(settings: any, context: 'ar' | 'desktop' = 'desktop'): HologramShaderMaterial {
        return this.createHologramMaterial(settings, context);
    }

    public getSceneSphereMaterial(settings: any): Material {
        const cacheKey = 'scene-sphere';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }
        const material = new MeshStandardMaterial({
            color: settings.visualization?.hologram?.ringColor || 0xffffff,
            transparent: true,
            depthWrite: true,
            opacity: settings.visualization?.hologram?.opacity || 0.8,
            metalness: 0.1,
            roughness: 0.8,
            side: DoubleSide,
        });
        this.materialCache.set(cacheKey, material);
        return material;
    }

    public getRingMaterial(settings: any, context: 'ar' | 'desktop' = 'desktop'): Material {
        const cacheKey = `ring-${context}`;
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }
        const material = this.getHologramMaterial(settings, context);
        material.transparent = true;
        material.depthWrite = true;
        material.opacity = context === 'ar' ? (settings.visualization?.hologram?.opacity || 0.6) * 0.8 : (settings.visualization?.hologram?.opacity || 0.6);
        this.materialCache.set(cacheKey, material);
        return material;
    }

    public getNodeMaterial(settings: any, context: 'ar' | 'desktop' = 'desktop'): Material {
        const cacheKey = `node-${context}`;
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }

        const opacity = context === 'ar' ? (settings.visualization?.nodes?.opacity || 0.9) * 0.8 : (settings.visualization?.nodes?.opacity || 0.9);
        const baseColor = settings.visualization?.nodes?.baseColor || 0x4287f5;

        const material = new MeshStandardMaterial({
            color: settings.visualization?.nodes?.baseColor || 0x4287f5,
            transparent: true,
            opacity,
            metalness: settings.visualization?.nodes?.metalness || 0.2,
            roughness: settings.visualization?.nodes?.roughness || 0.7,
            side: DoubleSide,
            depthWrite: true, // Improve depth sorting
            emissive: new Color(baseColor)
        });
        
        // Set emissive intensity after creation
        (material as any).emissiveIntensity = 1.0;
        
        this.materialCache.set(cacheKey, material);
        return material;
    }

    public getMetadataMaterial(): Material {
        const cacheKey = 'metadata';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }

        const material = new MeshStandardMaterial({
            color: 0xffffff,
            transparent: true,
            depthWrite: true,
            metalness: 0.1,
            roughness: 0.8,
            side: DoubleSide, 
            opacity: 0.7 // Slightly reduced opacity for better performance
        });

        this.materialCache.set(cacheKey, material);
        return material;
    }

    public updateMaterial(type: string, settings: any): void {
        const material = this.materialCache.get(type);
        if (!material) return;

        switch (type) {
            case 'node-basic':
            case 'node-phong': {
                const nodeMaterial = material as MeshStandardMaterial;
                const baseColor = settings.visualization?.nodes?.baseColor || '#4287f5';
                nodeMaterial.color.set(baseColor);
                nodeMaterial.metalness = settings.visualization?.nodes?.metalness || 0.2;
                nodeMaterial.roughness = settings.visualization?.nodes?.roughness || 0.7;
                nodeMaterial.emissive.set(baseColor);
                nodeMaterial.opacity = type.includes('ar') ? (settings.visualization?.nodes?.opacity || 0.9) * 0.8 : (settings.visualization?.nodes?.opacity || 0.9);
                nodeMaterial.needsUpdate = true;
                break;
            }
            case 'edge':
                (material as LineBasicMaterial).color = this.hexToRgb(settings.visualization?.edges?.color || '#6e7c91');
                break;
            case 'hologram':
                if (material instanceof HologramShaderMaterial) {
                    material.uniforms.color.value = this.hexToRgb(settings.visualization?.hologram?.ringColor || '#ffffff');
                }
                break;
        }
    }

    public dispose(): void {
        this.materialCache.forEach(material => material.dispose());
        this.materialCache.clear();
    }
}

----
rendering/factories/GeometryFactory.ts
import { 
    BufferGeometry, 
    CylinderGeometry, 
    IcosahedronGeometry,
    TorusGeometry
} from 'three';

export class GeometryFactory {
    private static instance: GeometryFactory;
    private geometryCache = new Map<string, BufferGeometry>();

    private constructor() {}

    static getInstance(): GeometryFactory {
        if (!GeometryFactory.instance) {
            GeometryFactory.instance = new GeometryFactory();
        }
        return GeometryFactory.instance;
    }

    /**
     * Creates a node geometry with radius 1, which can be scaled by the NodeInstanceManager
     * to match the desired size from settings.
     */
    getNodeGeometry(quality: 'low' | 'medium' | 'high', context: 'ar' | 'desktop' = 'desktop'): BufferGeometry {
        const cacheKey = `node-${quality}-${context}`;
        if (this.geometryCache.has(cacheKey)) {
            return this.geometryCache.get(cacheKey)!;
        }

        let geometry: BufferGeometry;
        let detail: number;
        
        switch (quality) {
            case 'low':
               detail = context === 'ar' ? 1 : 2;
                 break;
            case 'medium':
                detail = context === 'ar' ? 2 : 3;
                break;
            case 'high':
                detail = context === 'ar' ? 2 : 4;
                break;
            default:
                detail = context === 'ar' ? 1 : 2;
        }
        
        // Create unit-sized geometry (radius = 1) that will be scaled by NodeInstanceManager
        geometry = new IcosahedronGeometry(1, detail);
        this.geometryCache.set(cacheKey, geometry);
        return geometry;
    }

    /**
     * Creates a hologram geometry with radius 1, which can be scaled by the HologramManager
     * to match the desired size from settings.
     */
    getHologramGeometry(type: string, quality: string): BufferGeometry {
        const cacheKey = `hologram-${type}-${quality}`;
        if (this.geometryCache.has(cacheKey)) {
            return this.geometryCache.get(cacheKey)!;
        }

        const segments = {
            low: { ring: 16, sphere: 12 },
            medium: { ring: 24, sphere: 16 },
            high: { ring: 32, sphere: 16 }
        }[quality] || { ring: 32, sphere: 16 };

        let geometry: BufferGeometry;
        switch (type) {
            case 'ring':
                // Create unit-sized torus (radius = 1) with proportional tube radius
                geometry = new TorusGeometry(1, 0.05, segments.ring, segments.ring * 2);
                break;
            case 'triangleSphere':
                // Create unit-sized icosahedron (radius = 1)
                geometry = new IcosahedronGeometry(1, 1);
                break;
            default:
                // Create unit-sized icosahedron (radius = 1)
                geometry = new IcosahedronGeometry(1, 1);
        }

        this.geometryCache.set(cacheKey, geometry);
        return geometry;
    }

    /**
     * Creates an edge geometry with radius 1 and height 1, which can be scaled by the EdgeManager
     * to match the desired width from settings.
     */
    getEdgeGeometry(context: 'ar' | 'desktop' = 'desktop', quality?: 'low' | 'medium' | 'high'): BufferGeometry {
        const cacheKey = `edge-${context}-${quality || 'medium'}`;
        if (this.geometryCache.has(cacheKey)) {
            return this.geometryCache.get(cacheKey)!;
        }

        // Adjust segments based on quality
        const segments = {
            low: context === 'ar' ? 4 : 5,
            medium: context === 'ar' ? 5 : 6,
            high: context === 'ar' ? 6 : 8
        }[quality || 'medium'];

        // Create unit-sized cylinder (radius = 1, height = 1) that will be scaled by EdgeManager
        const geometry = new CylinderGeometry(1, 1, 1, segments);
        
        // Rotate 90 degrees to align with Z-axis
        geometry.rotateX(Math.PI / 2);
        
        this.geometryCache.set(cacheKey, geometry);
        return geometry;
    }

    dispose(): void {
        this.geometryCache.forEach(geometry => geometry.dispose());
        this.geometryCache.clear();
    }
}

----
rendering/materials/EdgeShaderMaterial.ts
import { 
    Vector3, 
    WebGLRenderer, 
    MeshBasicMaterial
} from 'three';
import { createLogger } from '../../core/logger';
import { debugState } from '../../core/debugState';

const logger = createLogger('EdgeShaderMaterial');

/**
 * EdgeShaderMaterial - A material for rendering edges in the graph
 * This version uses Three.js built-in materials instead of custom shaders
 * to improve compatibility and avoid WebGL context issues
 */
export class EdgeShaderMaterial extends MeshBasicMaterial {
    private static instances: Set<EdgeShaderMaterial> = new Set();
    private fallbackMaterial: MeshBasicMaterial | null = null;
    private baseOpacity: number;
    private updateFrequency: number;
    private frameCount: number;
    
    // Store time for animation
    private time: number = 0;

    constructor(settings?: any) {
        // Extract settings
        const opacity = settings?.visualization?.edges?.opacity ?? 0.7;
        const colorValue = settings?.visualization?.edges?.color ?? 0x4080ff;
        
        // Initialize MeshBasicMaterial with proper settings
        super({
            color: colorValue,
            transparent: true,
            opacity: opacity,
            side: 2, // DoubleSide = 2
            depthWrite: false
        });
        
        if (debugState.isDataDebugEnabled()) {
            logger.debug('Creating EdgeShaderMaterial (Three.js version)', { settings });
        }
        
        // Try to set wireframe if available
        try {
            (this as any).wireframe = true;
        } catch (e) {
            logger.warn('Could not set wireframe property on MeshBasicMaterial');
        }
        
        // Store original values
        this.baseOpacity = opacity;
        
        this.updateFrequency = 1; // Update every frame
        this.frameCount = 0;

        // Add this instance to the set of instances
        EdgeShaderMaterial.instances.add(this);

        if (debugState.isDataDebugEnabled()) {
            logger.debug('EdgeShaderMaterial initialized (Three.js version)', { 
                color: colorValue,
                opacity: opacity
            });
        }
    }

    public static setRenderer(_renderer: WebGLRenderer): void {
        if (debugState.isShaderDebugEnabled()) {
            logger.shader('Renderer set for EdgeShaderMaterial');
        }
    }

    update(deltaTime: number): void {
        this.frameCount++;
        if (this.frameCount % this.updateFrequency === 0) {
            // Update time for animation
            this.time += deltaTime;
            
            // Simple pulsing effect
            const pulse = Math.sin(this.time * 1.5) * 0.1 + 0.9;
            this.opacity = this.baseOpacity * pulse;
        }
    }

    setSourceTarget(_source: Vector3, _target: Vector3): void {
        // This method is kept for API compatibility
        // In the simplified version, we don't need to do anything here
    }

    clone(): this {
        if (debugState.isDataDebugEnabled()) {
            logger.debug('Cloning EdgeShaderMaterial (Three.js version)');
        }
        
        // Create settings object from current properties
        const settings = {
            visualization: {
                edges: {
                    opacity: this.opacity,
                    color: 0x4080ff // Default color as fallback
                }
            }
        };
        
        // Try to get the color value
        try {
            // Use a simple approach to get the color value
            if (this.color) {
                const colorHex = (this.color as any).getHex ? (this.color as any).getHex() : 0x4080ff;
                settings.visualization.edges.color = colorHex;
            }
        } catch (error) {
            logger.warn('Could not get color value, using default color');
        }
        
        const material = new EdgeShaderMaterial(settings);
        
        // Copy current state
        try {
            (material as any).wireframe = (this as any).wireframe || false;
        } catch (e) {
            // Ignore errors
        }
        material.opacity = this.opacity;
        try {
            material.color.set(this.color);
        } catch (error) {
            logger.warn('Could not copy color from original material');
        }
        
        material.time = this.time;
        material.frameCount = this.frameCount;
        
        if (debugState.isDataDebugEnabled()) {
            logger.debug('Material cloned successfully');
        }
        return material as this;
    }

    dispose(): void {
        // Remove this instance from the set when disposed
        EdgeShaderMaterial.instances.delete(this);
        // Dispose of fallback material if it exists
        if (this.fallbackMaterial) {
            this.fallbackMaterial.dispose();
        }
        // Call parent dispose
        super.dispose();
    }
}
----
rendering/materials/HologramShaderMaterial.ts
import { 
    Color, 
    Vector3, 
    WebGLRenderer, 
    MeshBasicMaterial
} from 'three';
import { createLogger } from '../../core/logger';
import { debugState } from '../../core/debugState';

// Define a custom interface for our uniforms to maintain API compatibility
export interface HologramUniforms {
    [key: string]: { value: any };
    time: { value: number };
    opacity: { value: number };
    color: { value: Color };
    pulseIntensity: { value: number };
    interactionPoint: { value: Vector3 };
    interactionStrength: { value: number };
    isEdgeOnly: { value: boolean };
}

const logger = createLogger('HologramShaderMaterial');

/**
 * HologramShaderMaterial - A material that simulates a hologram effect
 * This version uses Three.js built-in materials instead of custom shaders
 * to improve compatibility and avoid WebGL context issues
 */
export class HologramShaderMaterial extends MeshBasicMaterial {
    // Store uniforms for API compatibility with the original shader material
    public uniforms: HologramUniforms;
    private static instances: Set<HologramShaderMaterial> = new Set();
    private updateFrequency: number;
    private frameCount: number;
    private fallbackMaterial: MeshBasicMaterial | null = null;
    private baseOpacity: number;
    private baseColor: Color;
    private pulseIntensity: number;
    private isEdgeOnlyMode: boolean = false;

    constructor(settings?: any, context: 'ar' | 'desktop' = 'desktop') {
        // Extract settings
        const isAR = context === 'ar';
        const opacity = settings?.visualization?.hologram?.opacity ?? 0.7;
        const colorValue = settings?.visualization?.hologram?.color ?? 0x00ff00;
        const pulseIntensity = isAR ? 0.1 : 0.2;
        
        // Initialize MeshBasicMaterial with proper settings
        super({
            color: colorValue,
            transparent: true,
            opacity: opacity,
            side: isAR ? 0 : 2, // FrontSide = 0, DoubleSide = 2
            depthWrite: false
        });
        
        if (debugState.isDataDebugEnabled()) {
            logger.debug('Creating HologramShaderMaterial (Three.js version)', { context, settings });
        }
        
        // Store original values
        this.baseOpacity = opacity;
        this.baseColor = new Color(colorValue);
        this.pulseIntensity = pulseIntensity;
        
        // Create uniforms object for API compatibility
        this.uniforms = {
            time: { value: 0 },
            opacity: { value: opacity },
            color: { value: new Color(colorValue) },
            pulseIntensity: { value: pulseIntensity },
            interactionPoint: { value: new Vector3() },
            interactionStrength: { value: 0.0 },
            isEdgeOnly: { value: false }
        };
        
        this.updateFrequency = isAR ? 2 : 1; // Update every frame in desktop, every other frame in AR
        this.frameCount = 0;
        
        // Add this instance to the set of instances
        HologramShaderMaterial.instances.add(this);
        
        if (debugState.isDataDebugEnabled()) {
            logger.debug('HologramShaderMaterial initialized (Three.js version)', { 
                updateFrequency: this.updateFrequency,
                color: colorValue,
                opacity: opacity
            });
        }
    }

    public static setRenderer(_renderer: WebGLRenderer): void {
        if (debugState.isShaderDebugEnabled()) {
            const gl = _renderer.domElement.getContext('webgl2') || _renderer.domElement.getContext('webgl');
            if (gl) {
                logger.shader('Renderer initialized', {
                    isWebGL2: gl instanceof WebGL2RenderingContext,
                    maxTextures: gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),
                    maxVaryings: gl.getParameter(gl.MAX_VARYING_VECTORS),
                    maxVertexAttribs: gl.getParameter(gl.MAX_VERTEX_ATTRIBS),
                    maxVertexUniforms: gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS),
                    maxFragmentUniforms: gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS)
                });
            }
        }
    }

    // Helper method to create a brighter or dimmer color
    private createAdjustedColor(baseColor: Color, factor: number): Color {
        // Create a new color with the same base
        const newColor = new Color();
        newColor.set(baseColor);
        
        // For simplicity, we'll just create a new color with the same hue
        // but adjusted brightness based on the factor
        if (factor !== 1.0) {
            // Create a brighter or dimmer version of the same color
            // This is a very simple approach that may not work perfectly
            // but should be compatible with most Three.js versions
            try {
                // Just create a new color with the same base but different brightness
                const colorValue = baseColor.valueOf();
                if (typeof colorValue === 'number') {
                    // If we can get a numeric value, use it to create a new color
                    newColor.set(colorValue);
                }
            } catch (error) {
                // If anything fails, just use the base color
                newColor.set(baseColor);
            }
        }
        
        return newColor;
    }

    update(deltaTime: number): void {
        this.frameCount++;
        if (this.frameCount % this.updateFrequency === 0) {
            // Update time uniform for API compatibility
            this.uniforms.time.value += deltaTime;
            
            // Apply pulse effect
            const pulse = Math.sin(this.uniforms.time.value * 2.0) * 0.5 + 0.5;
            const pulseEffect = pulse * this.pulseIntensity;
            
            // Update material properties based on pulse
            this.opacity = this.baseOpacity * (1.0 + pulseEffect * 0.3);
            
            if (this.isEdgeOnlyMode) {
                // Edge-only mode
                try {
                    (this as any).wireframe = true;
                } catch (e) {
                    // Ignore errors
                }
                
                // Simple color pulsing - just create a new color with the same base
                // but slightly brighter or dimmer based on the pulse
                try {
                    const brightenFactor = 0.5 + pulseEffect * 0.5;
                    const newColor = this.createAdjustedColor(this.baseColor, brightenFactor);
                    this.color.set(newColor);
                } catch (error) {
                    logger.warn('Could not adjust color brightness');
                }
            } else {
                // Full hologram mode
                try {
                    (this as any).wireframe = false;
                } catch (e) {
                    // Ignore errors
                }
                
                // Simple color pulsing with a different factor
                try {
                    const brightenFactor = 0.8 + pulseEffect * 0.3;
                    const newColor = this.createAdjustedColor(this.baseColor, brightenFactor);
                    this.color.set(newColor);
                } catch (error) {
                    logger.warn('Could not adjust color brightness');
                }
            }
            
            // Handle interaction effect
            if (this.uniforms.interactionStrength.value > 0.01) {
                this.uniforms.interactionStrength.value *= 0.95; // Decay interaction effect
            }
        }
    }

    handleInteraction(position: Vector3): void {
        if (this.frameCount % this.updateFrequency === 0) {
            this.uniforms.interactionPoint.value.copy(position);
            this.uniforms.interactionStrength.value = 1.0;
        }
    }

    setEdgeOnly(enabled: boolean): void {
        this.isEdgeOnlyMode = enabled;
        this.uniforms.isEdgeOnly.value = enabled;
        
        // Update material properties based on mode
        if (enabled) {
            try {
                (this as any).wireframe = true;
            } catch (e) {
                // Ignore errors
            }
            this.opacity = this.baseOpacity * 0.8;
            this.pulseIntensity = 0.15;
        } else {
            try {
                (this as any).wireframe = false;
            } catch (e) {
                // Ignore errors
            }
            this.opacity = this.baseOpacity;
            this.pulseIntensity = 0.1;
        }
        
        // Update uniform for API compatibility
        this.uniforms.pulseIntensity.value = this.pulseIntensity;
    }

    clone(): this {
        if (debugState.isDataDebugEnabled()) {
            logger.debug('Cloning HologramShaderMaterial (Three.js version)');
        }
        
        // Create settings object from current uniforms
        const settings = {
            visualization: {
                hologram: {
                    opacity: this.uniforms.opacity.value,
                    color: 0x00ff00 // Default color as fallback
                }
            }
        };
        
        // Try to get the color value
        try {
            // Use a simple approach to get the color value
            if (this.color) {
                const colorHex = (this.color as any).getHex ? (this.color as any).getHex() : 0x00ff00;
                settings.visualization.hologram.color = colorHex;
            }
        } catch (error) {
            logger.warn('Could not get color value, using default color');
        }
        
        if (debugState.isDataDebugEnabled()) {
            logger.debug('Clone settings', settings);
        }
        
        const material = new HologramShaderMaterial(
            settings, 
            this.side === 0 ? 'ar' : 'desktop'
        );
        
        // Copy current state
        try {
            (material as any).wireframe = (this as any).wireframe || false;
        } catch (e) {
            // Ignore errors
        }
        material.opacity = this.opacity;
        try {
            material.color.set(this.color);
        } catch (error) {
            logger.warn('Could not copy color from original material');
        }
        
        material.isEdgeOnlyMode = this.isEdgeOnlyMode;
        
        // Copy uniforms for API compatibility
        material.uniforms = {
            time: { value: this.uniforms.time.value },
            opacity: { value: this.uniforms.opacity.value },
            color: { value: new Color().set(this.uniforms.color.value) },
            pulseIntensity: { value: this.uniforms.pulseIntensity.value },
            interactionPoint: { value: new Vector3().copy(this.uniforms.interactionPoint.value) },
            interactionStrength: { value: this.uniforms.interactionStrength.value },
            isEdgeOnly: { value: this.uniforms.isEdgeOnly.value }
        };

        if (debugState.isDataDebugEnabled()) {
            logger.debug('Material cloned successfully');
        }
        return material as this;
    }

    dispose(): void {
        // Remove this instance from the set when disposed
        HologramShaderMaterial.instances.delete(this);
        // Dispose of fallback material if it exists
        if (this.fallbackMaterial) {
            this.fallbackMaterial.dispose();
        }
        // Call parent dispose
        super.dispose();
    }
}

----
rendering/node/NodeManagerFactory.ts
import { Scene, Camera, Material } from 'three';
import { NodeManagerInterface, NodeManagerError, NodeManagerErrorType } from './NodeManagerInterface';
import { NodeManagerFacade } from './NodeManagerFacade';
import { createLogger } from '../../core/logger';

const logger = createLogger('NodeManagerFactory');

/**
 * Factory class for creating node manager instances.
 */
export class NodeManagerFactory {
    private static instance: NodeManagerFactory;
    private currentManager: NodeManagerInterface | null = null;

    private constructor() {}

    public static getInstance(): NodeManagerFactory {
        if (!NodeManagerFactory.instance) {
            NodeManagerFactory.instance = new NodeManagerFactory();
        }
        return NodeManagerFactory.instance;
    }

    /**
     * Create a node manager instance
     */
    public createNodeManager(
        scene: Scene,
        camera: Camera,
        material: Material,
        _settings: any
    ): NodeManagerInterface {
        try {
            // Clean up existing manager if any
            if (this.currentManager) {
                this.currentManager.dispose();
                this.currentManager = null;
            }

            logger.info('Creating node manager');
            this.currentManager = NodeManagerFacade.getInstance(
                scene,
                camera,
                material
            );
            logger.debug('Node manager created successfully');

            return this.currentManager;
        } catch (error) {
            throw new NodeManagerError(
                NodeManagerErrorType.INITIALIZATION_FAILED,
                'Failed to create node manager',
                error
            );
        }
    }

    /**
     * Get current node manager instance
     */
    public getCurrentManager(): NodeManagerInterface | null {
        return this.currentManager;
    }

    /**
     * Clean up resources
     */
    public dispose(): void {
        if (this.currentManager) {
            this.currentManager.dispose();
            this.currentManager = null;
        }
        NodeManagerFactory.instance = null!;
        logger.info('NodeManagerFactory disposed');
    }
}

// Export singleton instance
export const nodeManagerFactory = NodeManagerFactory.getInstance();
----
rendering/node/NodeManagerInterface.ts
import { XRHandWithHaptics } from '../../types/xr';
import { NodeData } from '../../core/types';
import { Camera, Scene, Vector3 } from 'three';

/**
 * Common interface for node management implementations.
 * This ensures compatibility between the old EnhancedNodeManager
 * and the new NodeManagerFacade during migration.
 */
export interface NodeManagerInterface {
    /**
     * Update node positions and metadata
     * @param nodes Array of node updates containing position and metadata
     */
    updateNodes(nodes: { id: string, data: NodeData }[]): void;

    /**
     * Update node positions from binary data
     * @param nodes Array of node position updates
     */
    updateNodePositions(nodes: { 
        id: string, 
        data: { 
            position: Vector3,
            velocity?: Vector3
        } 
    }[]): void;

    /**
     * Handle XR hand interactions
     * @param hand XR hand data with haptic feedback capabilities
     */
    handleHandInteraction(hand: XRHandWithHaptics): void;

    /**
     * Update the visualization state
     * @param deltaTime Time since last update in seconds
     */
    update(deltaTime: number): void;

    /**
     * Clean up resources
     */
    dispose(): void;

    /**
     * Set XR mode state
     * @param enabled Whether XR mode is active
     */
    setXRMode(enabled: boolean): void;

    /**
     * Handle settings updates
     * @param settings Updated settings object
     */
    handleSettingsUpdate(settings: any): void;
}

/**
 * Factory interface for creating node managers
 */
export interface NodeManagerFactory {
    /**
     * Create a node manager instance
     * @param scene Three.js scene
     * @param camera Camera for visibility calculations
     * @param settings Application settings
     */
    createNodeManager(scene: Scene, camera: Camera, settings: any): NodeManagerInterface;
}

/**
 * Configuration options for node managers
 */
export interface NodeManagerConfig {
    /**
     * Maximum number of nodes to support
     */
    maxNodes?: number;

    /**
     * Distance threshold for LOD transitions
     */
    lodThresholds?: {
        high: number;
        medium: number;
        low: number;
    };

    /**
     * Performance settings
     */
    performance?: {
        batchSize?: number;
        updateInterval?: number;
        cullingDistance?: number;
    };

    /**
     * Metadata visualization settings
     */
    metadata?: {
        enabled?: boolean;
        maxDistance?: number;
        updateInterval?: number;
    };
}

/**
 * Error types specific to node management
 */
export enum NodeManagerErrorType {
    INITIALIZATION_FAILED = 'initialization_failed',
    UPDATE_FAILED = 'update_failed',
    RESOURCE_CLEANUP_FAILED = 'resource_cleanup_failed',
    INVALID_NODE_DATA = 'invalid_node_data',
    XR_MODE_SWITCH_FAILED = 'xr_mode_switch_failed'
}

/**
 * Custom error class for node management errors
 */
export class NodeManagerError extends Error {
    constructor(
        public type: NodeManagerErrorType,
        message: string,
        public details?: any
    ) {
        super(message);
        this.name = 'NodeManagerError';
    }
}
----
rendering/node/NodeManagerFacade.ts
import {
    Scene,
    Camera,
    Material,
    InstancedMesh,
    Vector3
} from 'three';
import { NodeGeometryManager } from './geometry/NodeGeometryManager';
import { NodeInstanceManager } from './instance/NodeInstanceManager'; 
import { NodeMetadataManager } from './metadata/NodeMetadataManager';
import { NodeInteractionManager } from './interaction/NodeInteractionManager'; 
import { NodeManagerInterface, NodeManagerError, NodeManagerErrorType } from './NodeManagerInterface'; 
import { NodeData } from '../../core/types';
import { XRHandWithHaptics } from '../../types/xr';
import { debugState } from '../../core/debugState';
import { createLogger, createErrorMetadata, createDataMetadata } from '../../core/logger';
import { UpdateThrottler } from '../../core/utils';

const logger = createLogger('NodeManagerFacade');

// Constants for size calculation
const DEFAULT_FILE_SIZE = 1000; // 1KB default
const MAX_FILE_SIZE = 10485760; // 10MB max for scaling
const MIN_NODE_SIZE = 0;
const MAX_NODE_SIZE = 50;

/**
 * NodeManagerFacade provides a unified interface to the node management system.
 * It coordinates between the geometry, instance, metadata, and interaction managers.
 */
export class NodeManagerFacade implements NodeManagerInterface {
    private static instance: NodeManagerFacade;
    private camera: Camera;
    private geometryManager: NodeGeometryManager;
    private instanceManager: NodeInstanceManager;
    private metadataManager: NodeMetadataManager;
    private interactionManager: NodeInteractionManager;
    private isInitialized: boolean = false;
    private frameCount: number = 0;
    private nodeIndices: Map<string, string> = new Map();
    private nodeIdToMetadataId: Map<string, string> = new Map();
    private tempVector = new Vector3();
    private metadataUpdateThrottler = new UpdateThrottler(100); // Update at most every 100ms
    private readonly MAX_POSITION = 1000.0; // Reasonable limit for safe positions

    private constructor(scene: Scene, camera: Camera, material: Material) {
        this.camera = camera;
        
        logger.info('NodeManagerFacade constructor called', createDataMetadata({
            timestamp: Date.now(),
            cameraPosition: camera?.position ? 
                {x: camera.position.x, y: camera.position.y, z: camera.position.z} : 
                'undefined'
        }));

        try {
            logger.info('INITIALIZATION ORDER: NodeManagerFacade - Step 1: Creating NodeGeometryManager');
            // Initialize managers in the correct order
            this.geometryManager = NodeGeometryManager.getInstance();
            
            logger.info('INITIALIZATION ORDER: NodeManagerFacade - Step 2: Creating NodeInstanceManager');
            this.instanceManager = NodeInstanceManager.getInstance(scene, material);
            
            logger.info('INITIALIZATION ORDER: NodeManagerFacade - Step 3: Creating NodeMetadataManager');
            this.metadataManager = NodeMetadataManager.getInstance(scene);
            
            // Initialize interaction manager with instance mesh
            logger.info('INITIALIZATION ORDER: NodeManagerFacade - Step 4: Creating NodeInteractionManager');
            const instanceMesh = this.instanceManager.getInstanceMesh();
            this.interactionManager = NodeInteractionManager.getInstance(instanceMesh);

            this.isInitialized = true;
            logger.info('NodeManagerFacade initialized');
        } catch (error) {
            throw new NodeManagerError(
                NodeManagerErrorType.INITIALIZATION_FAILED,
                'Failed to initialize NodeManagerFacade',
                error
            );
        }
    }
    
    public static getInstance(scene: Scene, camera: Camera, material: Material): NodeManagerFacade {
        if (!NodeManagerFacade.instance) {
            NodeManagerFacade.instance = new NodeManagerFacade(scene, camera, material);
        }
        return NodeManagerFacade.instance;
    }

    private calculateNodeSize(fileSize: number = DEFAULT_FILE_SIZE): number {
        // Map file size logarithmically to 0-1 range
        const normalizedSize = Math.log(Math.min(fileSize, MAX_FILE_SIZE)) / Math.log(MAX_FILE_SIZE);
        // Map to metadata node size range (0-50)
        return MIN_NODE_SIZE + normalizedSize * (MAX_NODE_SIZE - MIN_NODE_SIZE);
    }

    public setXRMode(enabled: boolean): void {
        if (!this.isInitialized) return;

        try {
            const instanceMesh = this.instanceManager.getInstanceMesh();
            if (enabled) {
                // In XR mode, only use layer 1
                instanceMesh.layers.set(1);
            } else {
                // In non-XR mode, make sure both layers are enabled for consistent visibility
                instanceMesh.layers.enable(0);
                instanceMesh.layers.enable(1);
            }
            this.metadataManager.setXRMode(enabled);
            logger.debug('XR mode status changed', createDataMetadata({ enabled }));
        } catch (error) {
            throw new NodeManagerError(
                NodeManagerErrorType.XR_MODE_SWITCH_FAILED,
                'Failed to switch XR mode',
                error
            );
        }
    }

    public handleSettingsUpdate(settings: any): void {
        if (!this.isInitialized) return;

        try {
            // Update metadata visibility threshold if needed
            if (settings.visualization?.labels?.visibilityThreshold) {
                this.metadataManager.updateVisibilityThreshold(
                    settings.visualization.labels.visibilityThreshold
                );
            }
        } catch (error) {
            logger.error('Failed to update settings:', createErrorMetadata(error));
        }
    }

    /**
     * Update node positions and states
     * @param nodes Array of node updates
     */
    public updateNodes(nodes: { id: string, data: NodeData }[]): void {
        const updateStartTime = performance.now();
        
        if (!this.isInitialized) return;

        // Set the initial count on NodeInstanceManager
        logger.info(`Updating ${nodes.length} nodes in NodeManagerFacade`, createDataMetadata({
            timestamp: Date.now(),
            nodeCount: nodes.length,
            firstNodeId: nodes.length > 0 ? nodes[0].id : 'none',
            hasInstanceManager: !!this.instanceManager,
            hasMetadataManager: !!this.metadataManager
        }));

        const shouldDebugLog = debugState.isEnabled() && debugState.isNodeDebugEnabled();
        
        // Create dedicated ID set to ensure unique handling
        // CRITICAL FIX: Initialize the node-to-metadata ID mappings FIRST
        // This ensures labels are correct from the very beginning
        const mappingNodes = nodes.map(node => ({
            id: node.id,
            metadataId: (node as any).metadataId,
            label: (node as any).label || (node as any).metadataId
        }));
        this.metadataManager.initializeMappings(mappingNodes);
        const processedIds = new Set<string>();
        
        // Track node IDs and handle metadata mapping
        nodes.forEach((node, index) => {
            if (shouldDebugLog && index < 3) {
                // Log the first few nodes to help debug
                logger.debug(`Processing node ${index}: id=${node.id}, ` +
                             `metadataId=${(node as any).metadataId || 'undefined'}, ` +
                             `label=${(node as any).label || 'undefined'}`, 
                              createDataMetadata({
                                 hasMetadata: !!node.data.metadata,
                                 metadata: node.data.metadata,
                                 fileSize: node.data.metadata?.fileSize
                              }));
            }
            
            // *** CRITICAL: Set the label correctly ***  
            // Use type assertion to safely add the label property
            const oldLabel = (node as any).label;
            // This ensures we have a consistent label for each node
            (node as any).label = (node as any).label || (node as any).metadataId || node.id;
            
            if (shouldDebugLog) {
                logger.debug(`Setting node label: ${oldLabel || 'undefined'} -> ${(node as any).label}, id=${node.id}`, createDataMetadata({
                    metadataId: (node as any).metadataId || 'undefined',
                    hasMappedId: this.nodeIdToMetadataId.has(node.id)
                }));
            }
            
            // Skip if this node ID has already been processed in this batch
            // This prevents duplicate processing which could lead to overwriting
            if (processedIds.has(node.id)) {
                logger.warn(`Skipping duplicate node ID: ${node.id}`);
                return;
            }
            processedIds.add(node.id);

            // Store the node ID in our index map
            this.nodeIndices.set(node.id, node.id);
            
            if (node.data.metadata) {
                // Extract the proper metadata name/ID from the node
                // This could be the file name without the .md extension
                let metadataId: string = node.id; // Default to node ID

                // Log position information to help diagnose issues
                if (node.data.position && 
                    (node.data.position.x === 0 && node.data.position.y === 0 && node.data.position.z === 0)) {
                    logger.warn(`Node ${node.id} has ZERO position during updateNodes`, createDataMetadata({
                        metadataId: (node as any).metadataId || 'undefined',
                        label: (node as any).label || 'undefined',
                        position: `x:0, y:0, z:0`
                    }));
                } else if (node.data.position) {
                    if (shouldDebugLog && index < 5) {
                        logger.debug(`Node ${node.id} position: x:${node.data.position.x.toFixed(2)}, ` +
                                     `y:${node.data.position.y.toFixed(2)}, z:${node.data.position.z.toFixed(2)}`);
                    }
                } else {
                    logger.warn(`Node ${node.id} has NO position during updateNodes`);
                }
                
                // First, try using any server-provided label
                if ('metadataId' in node && typeof node['metadataId'] === 'string') {
                    // Prefer explicit metadataId if available (this is the filename)
                    metadataId = node['metadataId'] as string;
                } else if ('label' in node && typeof node['label'] === 'string') {
                    metadataId = node['label'] as string;
                } else if ('metadata_id' in node && typeof node['metadata_id'] === 'string') {
                    // Next, check for a specific metadata_id property if it exists
                    metadataId = node['metadata_id'] as string;
                } else if (node.data.metadata.name) {
                    // Finally, fallback to metadata name
                    metadataId = node.data.metadata.name;
                }
                
                if (metadataId && metadataId !== node.id) {
                    this.nodeIdToMetadataId.set(node.id, metadataId);
                    this.metadataManager.mapNodeIdToMetadataId(node.id, metadataId);
                    if (shouldDebugLog) {
                        logger.debug(`Mapped node ID ${node.id} to metadata ID ${metadataId}`);
                    }
                } 
            }
            if (shouldDebugLog) {
                logger.debug('Tracking node', createDataMetadata({ nodeId: node.id }));
            }
        });

        // Update instance positions
        // Important: Use fresh map to avoid modifying the original nodes
        const nodePositionUpdates = nodes.map(node => ({
            // Extract just what's needed for position update
            id: node.id,
            metadata: node.data.metadata || {},
            position: node.data.position,
            velocity: node.data.velocity
        }));
        this.instanceManager.updateNodePositions(nodePositionUpdates);
       
        // Only update metadata if the throttler allows it
        if (this.metadataUpdateThrottler.shouldUpdate()) {
            // Update metadata for each node
            nodes.forEach(node => {
                if (node.data.metadata) {
                    // Ensure we have valid file size
                    const fileSize = node.data.metadata.fileSize && node.data.metadata.fileSize > 0 
                        ? node.data.metadata.fileSize 
                        : DEFAULT_FILE_SIZE;
                    
                    // Use the metadata ID from our mapping, or fall back to node.id
                    const metadataId = this.nodeIdToMetadataId.get(node.id) || node.id;
                    
                    if (shouldDebugLog) {
                        logger.debug('Updating node metadata', createDataMetadata({ 
                            nodeId: node.id, 
                            metadataId,
                            fileSize: node.data.metadata.fileSize,
                            hyperlinkCount: node.data.metadata.hyperlinkCount || 0
                        }));
                    }
                    
                    // Check if node has a label (from server)
                    let displayName: string = metadataId;
                    if ('metadataId' in node && typeof node['metadataId'] === 'string') {
                        // Check if label exists before trying to use it
                        displayName = ('label' in node && typeof node['label'] === 'string') ? 
                                      node['label'] as string : node['metadataId'] as string;
                    } else if ('label' in node && typeof node['label'] === 'string') {
                        displayName = node['label'] as string;
                    } else if ('metadata_id' in node && typeof node['metadata_id'] === 'string') {
                        displayName = node['metadata_id'] as string;
                    } 
                    
                    // Verify that we're using the correct metadata ID for the displayName
                    if (/^\d+$/.test(node.id) && displayName === node.id) {
                        // If displayName is still the numeric ID, try to get a better name from our mapping
                        displayName = this.metadataManager.getLabel(node.id);
                    }
                    
                    // Make sure to map the node ID to the proper metadata ID for labels
                    if (displayName && displayName !== node.id && metadataId !== displayName) {
                        this.metadataManager.mapNodeIdToMetadataId(node.id, displayName);
                    }
                    
                    this.metadataManager.updateMetadata(node.id, {
                        id: node.id,
                        name: displayName || metadataId, // Use the best name available
                        position: node.data.position,
                        // Ensure proper metadata is set with appropriate defaults
                        commitAge: node.data.metadata.lastModified !== undefined 
                            ? node.data.metadata.lastModified 
                            : 0,
                        hyperlinkCount: (node.data.metadata.hyperlinkCount !== undefined && node.data.metadata.hyperlinkCount > 0)
                            ? node.data.metadata.hyperlinkCount
                            : node.data.metadata.links?.length || 0,
                        importance: node.data.metadata.hyperlinkCount || 0,
                        fileSize: fileSize, // Use the provided fileSize
                        nodeSize: this.calculateNodeSize(fileSize),
                    });
                }
            });
        }

        const updateElapsedTime = performance.now() - updateStartTime;
        logger.info(`Node updates completed in ${updateElapsedTime.toFixed(2)}ms`, createDataMetadata({
            nodeCount: nodes.length,
            processedCount: processedIds.size,
            uniqueMetadataIdCount: this.nodeIdToMetadataId.size,
            elapsedTimeMs: updateElapsedTime.toFixed(2)
        }));
    }
 
    /**
     * Validates and fixes a Vector3 if it contains NaN or infinite values
     * Returns true if the vector was valid, false if it needed correction
     */
    private validateAndFixVector3(vec: Vector3, label: string, nodeId: string): boolean {
        const isValid = !isNaN(vec.x) && !isNaN(vec.y) && !isNaN(vec.z) &&
                       isFinite(vec.x) && isFinite(vec.y) && isFinite(vec.z);
        
        if (!isValid) {
            // Log warning with details of the invalid values
            logger.warn(`Invalid ${label} values for node ${nodeId}`, createDataMetadata({
                x: vec.x,
                y: vec.y,
                z: vec.z,
                isNaNX: isNaN(vec.x),
                isNaNY: isNaN(vec.y),
                isNaNZ: isNaN(vec.z),
                isFiniteX: isFinite(vec.x),
                isFiniteY: isFinite(vec.y),
                isFiniteZ: isFinite(vec.z)
            }));
            
            // Fix the vector - replace NaN or infinite values with 0
            vec.x = isNaN(vec.x) || !isFinite(vec.x) ? 0 : vec.x;
            vec.y = isNaN(vec.y) || !isFinite(vec.y) ? 0 : vec.y;
            vec.z = isNaN(vec.z) || !isFinite(vec.z) ? 0 : vec.z;
            
            // Also clamp to reasonable bounds
            vec.x = Math.max(-this.MAX_POSITION, Math.min(this.MAX_POSITION, vec.x));
            vec.y = Math.max(-this.MAX_POSITION, Math.min(this.MAX_POSITION, vec.y));
            vec.z = Math.max(-this.MAX_POSITION, Math.min(this.MAX_POSITION, vec.z));
        }
        return isValid;
    }

    public updateNodePositions(nodes: { 
        id: string, 
        data: { 
            position: Vector3,
            velocity?: Vector3
        } 
    }[]): void {
        const updatePosStartTime = performance.now();
        
        if (!this.isInitialized) return;
        
        logger.info(`Updating positions for ${nodes.length} nodes`, createDataMetadata({
            timestamp: Date.now(),
            nodeCount: nodes.length
        }));

        // Track zero position counts for diagnostics
        let zeroPositionCount = 0;
        let nullVelocityCount = 0;

        try {
            // Handle NaN values and validate positions before passing to instance manager
            const validatedNodes = nodes.map(node => {
                // Check for zero positions
                if (node.data.position.x === 0 && node.data.position.y === 0 && node.data.position.z === 0) {
                    zeroPositionCount++;
                    if (Math.random() < 0.05) { // Log only 5% of cases to avoid spam
                        logger.debug(`Node ${node.id} has ZERO position during updateNodePositions`);
                    }
                }
                
                // Check for null velocities
                if (!node.data.velocity) {
                    nullVelocityCount++;
                    // Create a zero velocity vector if missing
                    node.data.velocity = new Vector3(0, 0, 0);
                }
                
                const positionValid = this.validateAndFixVector3(node.data.position, 'position', node.id);
                const velocityValid = node.data.velocity ? 
                                     this.validateAndFixVector3(node.data.velocity, 'velocity', node.id) : 
                                     false;
                
                if (!positionValid || !velocityValid) {
                    logger.warn(`Fixed invalid vectors for node ${node.id}`, createDataMetadata({
                        positionValid,
                        velocityValid,
                        position: {
                            x: node.data.position.x, 
                            y: node.data.position.y, 
                            z: node.data.position.z
                        },
                        velocity: node.data.velocity ? {
                            x: node.data.velocity.x, 
                            y: node.data.velocity.y, 
                            z: node.data.velocity.z
                        } : 'undefined'
                    }));
                }
                
                return { id: node.id, position: node.data.position, velocity: node.data.velocity };
            });
            
            this.instanceManager.updateNodePositions(validatedNodes);
            
            const updatePosElapsedTime = performance.now() - updatePosStartTime;
            logger.info(`Position updates completed in ${updatePosElapsedTime.toFixed(2)}ms`, createDataMetadata({
                nodeCount: nodes.length,
                zeroPositionCount,
                nullVelocityCount,
                elapsedTimeMs: updatePosElapsedTime.toFixed(2)
            }));
        } catch (error) {
            logger.error('Position update failed:', createErrorMetadata(error));
            throw new NodeManagerError(
                NodeManagerErrorType.UPDATE_FAILED,
                'Failed to update node positions',
                error
            );
        }
    }

    /**
     * Handle XR hand interactions
     * @param hand XR hand data with haptic feedback
     */
    public handleHandInteraction(hand: XRHandWithHaptics): void {
        if (!this.isInitialized) return;
        this.interactionManager.handleHandInteraction(hand);
    }

    /**
     * Update the visualization state
     * @param deltaTime Time since last update
     */
    public update(deltaTime: number): void {
        if (!this.isInitialized) return;

        const updateFrameStartTime = performance.now();

        // Update instance visibility and LOD
        this.instanceManager.update(this.camera, deltaTime);
        
        // Log position updates only occasionally
        const shouldLogDetail = this.frameCount % 300 === 0; // Log every 300 frames
        let noPositionCount = 0;
        let zeroPositionCount = 0;

        // Update metadata positions to match instances
        try {
            // Only update positions every few frames for performance
            const nodeCount = this.nodeIndices.size;
            
            this.nodeIndices.forEach((id) => {
                const position = this.instanceManager.getNodePosition(id);
                if (!position) {
                    noPositionCount++;
                    return;
                }
                
                // Check for zero positions
                if (position.x === 0 && position.y === 0 && position.z === 0) {
                    zeroPositionCount++;
                    if (shouldLogDetail && Math.random() < 0.2) { // Only log 20% of zero positions
                        logger.warn(`Node ${id} has ZERO position during metadata position update`);
                    }
                }
                
                this.tempVector.copy(position);
                
                // Calculate dynamic offset based on node size
                // Use the node's calculated size for offset
                const nodeSize = this.calculateNodeSize();
                
                this.tempVector.y += nodeSize * 0.03; // Drastically reduced offset for much closer label positioning
                // Update individual label position
                this.metadataManager.updatePosition(id, this.tempVector.clone());
            });
            this.frameCount++;
            
            if (shouldLogDetail) {
                const updateFrameElapsedTime = performance.now() - updateFrameStartTime;
                logger.info(`Metadata position update frame ${this.frameCount}`, createDataMetadata({
                    totalNodes: nodeCount,
                    nodesWithoutPosition: noPositionCount,
                    nodesWithZeroPosition: zeroPositionCount,
                    elapsedTimeMs: updateFrameElapsedTime.toFixed(2)
                }));
            }
        } catch (error) {
            logger.error('Error updating metadata positions:', createErrorMetadata(error));
        }

        // Update metadata labels
        this.metadataManager.update(this.camera);
    }

    /**
     * Clean up resources
     */
    public dispose(): void {
        if (!this.isInitialized) return;

        try {
            this.geometryManager.dispose();
            this.instanceManager.dispose();
            this.metadataManager.dispose();
            this.interactionManager.dispose();
            this.nodeIdToMetadataId.clear();
            this.nodeIndices.clear();

            NodeManagerFacade.instance = null!;
            this.isInitialized = false;
            logger.info('NodeManagerFacade disposed');
        } catch (error) {
            throw new NodeManagerError(
                NodeManagerErrorType.RESOURCE_CLEANUP_FAILED,
                'Failed to dispose NodeManagerFacade',
                error
            );
        }
    }

    /**
     * Get the underlying InstancedMesh
     * Useful for adding to scenes or handling special cases
     */
    public getInstancedMesh(): InstancedMesh {
        return this.instanceManager.getInstanceMesh();
    }

    /**
     * Get node ID from instance index
     * @param index Instance index in the InstancedMesh
     * @returns Node ID or undefined if not found
     */
    public getNodeId(index: number): string | undefined {
        return this.instanceManager.getNodeId(index);
    }

    /**
     * Get the underlying NodeInstanceManager
     * @returns The NodeInstanceManager instance
     */
    public getNodeInstanceManager(): NodeInstanceManager {
        return this.instanceManager;
    }

    /**
     * Get the metadata ID for a given node ID
     * This is useful for retrieving the human-readable name (file name)
     * @param nodeId Node ID to look up
     * @returns Metadata ID (filename) or undefined if not found
     */
    public getMetadataId(nodeId: string): string | undefined {
        return this.nodeIdToMetadataId.get(nodeId);
    }
}
----
rendering/node/geometry/NodeGeometryManager.ts
import {
    BufferGeometry,
    IcosahedronGeometry,
    OctahedronGeometry
} from 'three';
import { GeometryFactory } from '../../factories/GeometryFactory';
import { createLogger, createDataMetadata } from '../../../core/logger';

const logger = createLogger('NodeGeometryManager');

// LOD level definitions
export enum LODLevel {
    HIGH = 0,    // < 10 meters: Full detail
    MEDIUM = 1,  // 10-50 meters: Medium detail
    LOW = 2      // > 50 meters: Low detail
} 

// Interface for LOD thresholds with hysteresis
interface LODHysteresisThresholds {
    // Thresholds for switching to a higher detail level (moving closer)
    upscale: {
        [LODLevel.HIGH]: number;   // Switch to HIGH when closer than this
        [LODLevel.MEDIUM]: number; // Switch to MEDIUM when closer than this
    };
    // Thresholds for switching to a lower detail level (moving away)
    downscale: {
        [LODLevel.MEDIUM]: number; // Switch to MEDIUM when further than this
        [LODLevel.LOW]: number;    // Switch to LOW when further than this
    };
} 

interface GeometryQuality {
    segments: number;  // Number of segments/detail level
    radius: number;    // Base size
}

export class NodeGeometryManager {
    private static instance: NodeGeometryManager;
    private geometryCache: Map<LODLevel, BufferGeometry>;
    private currentLOD: LODLevel = LODLevel.HIGH;
    private lastDistance: number = 0;
    private switchCount: number = 0;
    private _lastSwitchTime: number = 0;
    
    // Implement hysteresis with different thresholds for upscaling vs downscaling
    private readonly lodThresholds: LODHysteresisThresholds = {
        // Thresholds for increasing detail (moving closer)
        upscale: {
            [LODLevel.HIGH]: 5.0,     // Switch to HIGH when closer than 5m (reduced from 8m)
            [LODLevel.MEDIUM]: 30.0,  // Switch to MEDIUM when closer than 30m (reduced from 40m)
        },
        // Thresholds for decreasing detail (moving away)
        downscale: {
            [LODLevel.MEDIUM]: 15.0,  // Switch to MEDIUM when further than 15m (increased from 12m)
            [LODLevel.LOW]: 70.0,     // Switch to LOW when further than 70m (increased from 60m)
        }
    };

    private readonly qualitySettings: Record<LODLevel, GeometryQuality> = {
        [LODLevel.HIGH]: { segments: 1, radius: 0.12 },   // 12cm radius with 1 subdivision
        [LODLevel.MEDIUM]: { segments: 0, radius: 0.12 }, // 12cm radius basic octahedron
        [LODLevel.LOW]: { segments: 0, radius: 0.1 }      // 10cm octahedron for distance
    };

    private constructor() {
        GeometryFactory.getInstance(); // Initialize factory
        this.geometryCache = new Map();
        this.initializeGeometries();
    }

    public static getInstance(): NodeGeometryManager {
        if (!NodeGeometryManager.instance) {
            NodeGeometryManager.instance = new NodeGeometryManager();
        }
        return NodeGeometryManager.instance;
    }

    private initializeGeometries(): void {
        // Initialize geometries for each LOD level
        Object.values(LODLevel).forEach((level) => {
            if (typeof level === 'number') {
                const quality = this.qualitySettings[level];
                const geometry = this.createOptimizedGeometry(level, quality);
                this.geometryCache.set(level, geometry);
            }
        });
        logger.info('Initialized geometries for all LOD levels');
    }

    private createOptimizedGeometry(level: LODLevel, quality: GeometryQuality): BufferGeometry {
        // Create geometry based on LOD level
        let geometry: BufferGeometry;

        switch (level) {
            case LODLevel.HIGH:
                // High detail: Icosahedron with 1 subdivision
                geometry = new IcosahedronGeometry(quality.radius, 1);
                break;

            case LODLevel.MEDIUM:
                // Medium detail: Basic octahedron
                geometry = new OctahedronGeometry(quality.radius);
                break;

            case LODLevel.LOW:
                // Low detail: Smaller octahedron
                geometry = new OctahedronGeometry(quality.radius);
                break;

            default:
                logger.warn(`Unknown LOD level: ${level}, falling back to medium quality`);
                geometry = new OctahedronGeometry(quality.radius);
        }

        // Compute and adjust bounding sphere for better frustum culling
        geometry.computeBoundingSphere();
        if (geometry.boundingSphere) {
            geometry.boundingSphere.radius *= 1.2;
        }

        return geometry;
    }

    /**
     * Get the appropriate geometry for a given distance with hysteresis to prevent
     * rapid switching between LOD levels
     */
    public getGeometryForDistance(distance: number): BufferGeometry {
        // Start with current LOD level
        let targetLOD = this.currentLOD;

        // Calculate distance change since last update
        const distanceChange = Math.abs(distance - this.lastDistance);
        this.lastDistance = distance;
        
        // Skip LOD calculation if distance hasn't changed significantly (< 0.5m)
        // This prevents unnecessary LOD switches due to tiny camera movements
        if (distanceChange < 0.5) {
            return this.getGeometryForLOD(this.currentLOD);
        }
        
        // Use more conservative thresholds for AR mode
        const isAR = window.location.href.includes('ar=true') || 
                    document.querySelector('#xr-button')?.textContent?.includes('Exit AR');
        
        // Apply AR mode adjustments if needed
        let thresholds = this.lodThresholds;
        if (isAR) {
            // In AR mode, use more conservative thresholds (1.5x further)
            thresholds = {
                upscale: {
                    [LODLevel.HIGH]: this.lodThresholds.upscale[LODLevel.HIGH] * 1.5,
                    [LODLevel.MEDIUM]: this.lodThresholds.upscale[LODLevel.MEDIUM] * 1.5,
                },
                downscale: {
                    [LODLevel.MEDIUM]: this.lodThresholds.downscale[LODLevel.MEDIUM] * 1.5,
                    [LODLevel.LOW]: this.lodThresholds.downscale[LODLevel.LOW] * 1.5,
                }
            };
        }
        
        // Apply hysteresis based on current LOD level and distance
        switch (this.currentLOD) {
            case LODLevel.HIGH:
                // Currently high detail - only downgrade if we move far enough away
                if (distance > thresholds.downscale[LODLevel.MEDIUM]) {
                    targetLOD = LODLevel.MEDIUM;
                }
                break;
                
            case LODLevel.MEDIUM:
                // Currently medium detail - upgrade or downgrade based on distance
                if (distance <= thresholds.upscale[LODLevel.HIGH]) {
                    targetLOD = LODLevel.HIGH;
                } else if (distance > thresholds.downscale[LODLevel.LOW]) {
                    targetLOD = LODLevel.LOW;
                }
                break;
                
            case LODLevel.LOW:
                // Currently low detail - only upgrade if we get close enough
                if (distance <= thresholds.upscale[LODLevel.MEDIUM]) {
                    targetLOD = LODLevel.MEDIUM;
                }
                break;
        }

        // Only update if LOD level changed
        if (targetLOD !== this.currentLOD) {
            this.switchCount++;
            
            // Add a dampening mechanism to reduce switch frequency
            // Only update if we've had a significant distance change or a minimum count of frames
            const significantDistanceChange = distanceChange > 2.0; // 2 meters movement is significant
            
            // Implement a cooldown period for LOD switching (don't switch too frequently)
            const currentTime = performance.now();
            const timeSinceLastSwitch = currentTime - (this._lastSwitchTime || 0);
            const minimumSwitchInterval = 1000; // 1 second between LOD changes
            
            if (significantDistanceChange || timeSinceLastSwitch > minimumSwitchInterval) {
                // Update LOD level
                this.currentLOD = targetLOD;
                this._lastSwitchTime = currentTime;
                
                // Log at debug level to reduce console spam
                logger.info(`Switching to LOD level ${targetLOD} for distance ${distance.toFixed(2)}`, 
                    createDataMetadata({ 
                        previousLevel: this.currentLOD,
                    switchCount: this.switchCount,
                    distanceChange: distanceChange.toFixed(3)
                }));
            }
        }

        // Always ensure we return a valid geometry
        const geometry = this.geometryCache.get(targetLOD);
        if (!geometry) {
            logger.warn(`No geometry found for LOD level ${targetLOD}, falling back to MEDIUM`);
            return this.geometryCache.get(LODLevel.MEDIUM)!;
        }
        return geometry;
    }
    
    /**
     * Get geometry for a specific LOD level
     */
    private getGeometryForLOD(level: LODLevel): BufferGeometry {
        const geometry = this.geometryCache.get(level);
        if (!geometry) {
            logger.warn(`No geometry found for LOD level ${level}, falling back to MEDIUM`);
            return this.geometryCache.get(LODLevel.MEDIUM)!;
        }
        return geometry;
    }

    public getCurrentLOD(): LODLevel {
        return this.currentLOD;
    }

    /**
     * Get the upscale threshold for a specific LOD level
     */
    public getUpscaleThresholdForLOD(level: LODLevel): number | undefined {
        if (level === LODLevel.HIGH || level === LODLevel.MEDIUM) {
            return this.lodThresholds.upscale[level];
        } else if (level === LODLevel.LOW) {
            return undefined; // No upscale threshold for LOW level
        }
        return undefined;
    } 

    public dispose(): void {
        // Clean up geometries
        this.geometryCache.forEach(geometry => {
            geometry.dispose();
        });
        this.geometryCache.clear();
        logger.info('Disposed all geometries');
    }
}
----
rendering/node/instance/NodeInstanceManager.ts
import {
    Scene,
    InstancedMesh,
    Matrix4,
    Vector3,
    Quaternion,
    Color,
    Camera,
    Material
} from 'three';
import { NodeGeometryManager } from '../geometry/NodeGeometryManager';
import { createLogger, createDataMetadata } from '../../../core/logger';
import { SettingsStore } from '../../../state/SettingsStore';
import { NodeSettings } from '../../../types/settings/base';
import { scaleOps } from '../../../core/utils';
import { Node } from '../../../core/types';
import { debugState } from '../../../core/debugState';

const logger = createLogger('NodeInstanceManager');

// Constants for optimization
const MAX_INSTANCES = 10000;
const VISIBILITY_UPDATE_INTERVAL = 10; // frames
const DEFAULT_FILE_SIZE = 1000; // 1KB default
const MAX_FILE_SIZE = 10485760; // 10MB max for scaling

// Reusable objects for matrix calculations
const matrix = new Matrix4();
const position = new Vector3();
const quaternion = new Quaternion();
const velocity = new Vector3();
const scale = new Vector3();

// Visibility states (using setRGB for proper initialization)
const VISIBLE = new Color(0xffffff);
// Removed INVISIBLE constant

// Global registry for tracking instances
interface InstanceInfo {
    scene: Scene;
    material: Material;
    timestamp: number;
}

interface NodeUpdate {
    id: string;
    position: Vector3;  // Three.js Vector3
    velocity?: Vector3; // Three.js Vector3
    metadata?: {
        name?: string;
        lastModified?: number;
        links?: string[];
        references?: string[];
        fileSize?: number;
        hyperlinkCount?: number;
    };
}

export class NodeInstanceManager {
    private static instance: NodeInstanceManager | null = null;
    private static instanceInfo: InstanceInfo | null = null;
    private static instanceCount: number = 0;
    private static readonly INSTANCE_TIMEOUT_MS = 5000; // 5 seconds timeout for stale instances
    private scene: Scene;
    private nodeInstances: InstancedMesh;
    private geometryManager: NodeGeometryManager;
    private nodeIndices: Map<string, number> = new Map();
    private nodeIdToInstanceId: Map<string, number> = new Map();
    private pendingUpdates: Set<number> = new Set();
    private frameCount: number = 0;
    private velocities: Map<number, Vector3> = new Map();
    private lastUpdateTime: number = performance.now();
    private settingsStore: SettingsStore;
    private nodeSettings: NodeSettings;
    private readonly MAX_POSITION = 1000.0; // Reasonable limit for graph visualization
    private readonly MAX_VELOCITY = 0.05;   // Reduced to align with server's MAX_VELOCITY (0.02)
    private isReady: boolean = false;
    private positionUpdateCount: number = 0;
    private lastPositionLog: number = 0;
    private instanceId: number;

    private validateAndLogVector3(vec: Vector3, max: number, context: string, nodeId?: string): boolean {
        const isValid = this.validateVector3(vec, max);
        
        // Always log validation failures to catch these issues
        if (!isValid) {
            logger.node('Vector3 validation failed', createDataMetadata({
                nodeId,
                component: context,
                maxAllowed: max,
                position: { x: vec.x, y: vec.y, z: vec.z },
                invalidReason: !isFinite(vec.x) || !isFinite(vec.y) || !isFinite(vec.z) ? 
                    'Non-finite values detected' : 
                    isNaN(vec.x) || isNaN(vec.y) || isNaN(vec.z) ?
                    'NaN values detected' :
                    'Values exceed maximum bounds'
            }));
        }
        
        return isValid;
    }

    private validateVector3(vec: Vector3, max: number): boolean {
        return !isNaN(vec.x) && !isNaN(vec.y) && !isNaN(vec.z) &&
               isFinite(vec.x) && isFinite(vec.y) && isFinite(vec.z) &&
               Math.abs(vec.x) <= max && Math.abs(vec.y) <= max && Math.abs(vec.z) <= max;
    }

    private validateMatrix4(mat: Matrix4, nodeId: string): boolean {
        const elements = mat.elements;
        for (let i = 0; i < 16; i++) {
            if (!isFinite(elements[i]) || isNaN(elements[i])) {
                if (debugState.isMatrixDebugEnabled()) {
                    logger.matrix('Invalid matrix element detected', createDataMetadata({
                        nodeId,
                        elementIndex: i,
                        value: elements[i],
                        matrix: elements.join(',')
                    }));
                }
                return false;
            }
        }
        return true;
    }

    private constructor(scene: Scene, material: Material) {
        this.instanceId = ++NodeInstanceManager.instanceCount;
        logger.info(`Creating NodeInstanceManager instance #${this.instanceId}`);
        this.scene = scene;
        this.geometryManager = NodeGeometryManager.getInstance();
        this.settingsStore = SettingsStore.getInstance();
        
        // Wait for settings to be fully initialized
        if (!this.settingsStore.isInitialized()) {
            if (debugState.isEnabled()) {
                logger.warn('SettingsStore not initialized, using defaults');
            }
            this.nodeSettings = this.settingsStore.get('visualization.nodes') as NodeSettings;
        } else {
            this.nodeSettings = this.settingsStore.get('visualization.nodes') as NodeSettings;
        }

        // Initialize InstancedMesh with high-detail geometry
        const initialGeometry = this.geometryManager.getGeometryForDistance(0);
        
        // Validate initial geometry
        if (debugState.isNodeDebugEnabled()) {
            const posAttr = initialGeometry.getAttribute('position');
            const normalAttr = initialGeometry.getAttribute('normal');
            logger.node('Validating initial geometry', createDataMetadata({
                vertexCount: posAttr?.count ?? 0,
                attributes: `position:${!!posAttr},normal:${!!normalAttr}`
            }));
        }

        this.nodeInstances = new InstancedMesh(initialGeometry, material, MAX_INSTANCES);
        
        // Validate initial instance matrix
        const initialMatrix = new Matrix4();
        this.validateMatrix4(initialMatrix, 'initial');
        
        this.nodeInstances.count = 0; // Start with 0 visible instances
        this.nodeInstances.frustumCulled = true;
        this.nodeInstances.layers.enable(0); // Enable default layer

        // Add to scene
        this.scene.add(this.nodeInstances);
        if (debugState.isEnabled()) {
            logger.info(`Initialized NodeInstanceManager instance #${this.instanceId}`);
        }

        // Subscribe to settings changes
        this.settingsStore.subscribe('visualization.nodes', (_: string, settings: any) => {
            if (settings && typeof settings === 'object') {
                this.nodeSettings = settings as NodeSettings;
                this.updateAllNodeScales();
            }
        });

        // Mark as ready after initialization
        this.isReady = true;
    }
    
    /**
     * Check if the NodeInstanceManager is fully initialized
     */
    public isInitialized(): boolean {
        return this.isReady;
    }

    public static getInstance(scene: Scene, material: Material): NodeInstanceManager {
        // Check if we already have an instance
        if (NodeInstanceManager.instance && NodeInstanceManager.instance.isReady) {
            // Check if the instance is for the same scene and material
            if (NodeInstanceManager.instanceInfo && 
                NodeInstanceManager.instanceInfo.scene === scene && 
                NodeInstanceManager.instanceInfo.material === material) {
                
                // Update timestamp to indicate this instance is still in use
                if (NodeInstanceManager.instanceInfo) {
                    NodeInstanceManager.instanceInfo.timestamp = Date.now();
                }
                
                return NodeInstanceManager.instance;
            } else {
                // Different scene or material - dispose the old instance
                logger.warn('Disposing existing NodeInstanceManager for different scene/material');
                NodeInstanceManager.instance.dispose();
                NodeInstanceManager.instance = null;
                NodeInstanceManager.instanceInfo = null;
            }
        } else if (NodeInstanceManager.instance && !NodeInstanceManager.instance.isReady) {
            // Instance exists but is not ready - check if it's stale
            if (NodeInstanceManager.instanceInfo && 
                Date.now() - NodeInstanceManager.instanceInfo.timestamp > NodeInstanceManager.INSTANCE_TIMEOUT_MS) {
                
                // Stale instance - dispose and create a new one
                logger.warn('Disposing stale NodeInstanceManager instance');
                NodeInstanceManager.instance.dispose();
                NodeInstanceManager.instance = null;
                NodeInstanceManager.instanceInfo = null;
            }
        }
        
        // Create a new instance if needed
        if (!NodeInstanceManager.instance) {
            NodeInstanceManager.instance = new NodeInstanceManager(scene, material);
            NodeInstanceManager.instanceInfo = {
                scene,
                material,
                timestamp: Date.now()
            };
        }
        return NodeInstanceManager.instance;
    }

    private getNodeScale(node: Node): number {
        if (debugState.isNodeDebugEnabled()) {
            logger.node('Calculating node scale', createDataMetadata({
                nodeId: node.id,
                metadata: node.data.metadata
            }));
        }

        let normalizedSize = 0;
        const [minSize = 1, maxSize = 5] = this.nodeSettings?.sizeRange || [1, 5];

        if (!this.nodeSettings) {
            return 1.0; // Default scale if settings not available
        }

        try {
            const fileSize = node.data.metadata?.fileSize ?? DEFAULT_FILE_SIZE;
            // Clamp file size to reasonable bounds
            const clampedSize = Math.min(Math.max(fileSize, 0), MAX_FILE_SIZE);
            // Calculate normalized size (0-1)
            normalizedSize = clampedSize / MAX_FILE_SIZE;
        } catch (error) {
            if (debugState.isNodeDebugEnabled()) {
                logger.node('Error calculating normalized size', createDataMetadata({
                    nodeId: node.id,
                    error: error instanceof Error ? error.message : String(error)
                }));
            }
        }
        
        // Map the normalized size to the configured size range
        const scale = scaleOps.mapRange(normalizedSize, 0, 1, minSize, maxSize);
        
        // Ensure scale is valid
        return isFinite(scale) && !isNaN(scale) ? scale : 1.0;
    }

    private updateAllNodeScales(): void {
        if (!this.isReady) {
            if (debugState.isEnabled()) {
                logger.warn('Attempted to update scales before initialization');
            }
            return;
        }

        // Update all existing nodes with new scale based on current settings
        for (let i = 0; i < this.nodeInstances.count; i++) {
            this.nodeInstances.getMatrixAt(i, matrix);
            matrix.decompose(position, quaternion, scale);
            
            // Get the node ID for this instance
            const nodeId = this.getNodeId(i);
            if (!nodeId) continue;
            
            // Find the node data
            const node = Array.from(this.nodeIndices.entries())
                .find(([_, idx]) => idx === i)?.[0];
            if (!node) continue;

            // Calculate new scale
            const newScale = this.getNodeScale({ 
                id: nodeId, 
                data: { 
                    position: position.clone(),
                    velocity: new Vector3(0, 0, 0)
                }
            });
            scale.set(newScale, newScale, newScale);
            
            matrix.compose(position, quaternion, scale);
            this.nodeInstances.setMatrixAt(i, matrix);
            this.pendingUpdates.add(i);
        }
        
        if (this.pendingUpdates.size > 0) {
            this.nodeInstances.instanceMatrix.needsUpdate = true;
            this.pendingUpdates.clear();
        }
    }

    public updateNodePositions(updates: NodeUpdate[]): void {
        if (!this.isReady) {
            if (debugState.isEnabled()) {
                logger.warn('Attempted to update positions before initialization');
            }
            return;
        }

        this.positionUpdateCount++;
        
        // Log information about the updates being received
        const currentTime = performance.now();
        const logInterval = 1000; // Log at most every second
        
        if (currentTime - this.lastPositionLog > logInterval || updates.length <= 5) {
            this.lastPositionLog = currentTime;
            // Enhanced logging for better diagnostics
            logger.info('Node position update batch received', createDataMetadata({
                updateCount: this.positionUpdateCount,
                batchSize: updates.length,
                sample: updates.slice(0, Math.min(5, updates.length)).map(u => ({ 
                    id: u.id, 
                    pos: { 
                        x: u.position.x.toFixed(3), 
                        y: u.position.y.toFixed(3), 
                        z: u.position.z.toFixed(3) 
                    },
                    vel: u.velocity ? { 
                        x: u.velocity.x.toFixed(3), 
                        y: u.velocity.y.toFixed(3), 
                        z: u.velocity.z.toFixed(3) 
                    } : 'none'
                }))
            }));
        }

        let updatedCount = 0;
        updates.forEach(update => {
            const index = this.nodeIndices.get(update.id);
            
            // Validate and clamp position
            position.copy(update.position); // Using Three.js Vector3 copy
            
            const isValid = this.validateVector3(position, this.MAX_POSITION);
            if (!isValid) {
                logger.warn('Position validation failed, attempting recovery', createDataMetadata({
                    nodeId: update.id,
                    component: 'position',
                    maxAllowed: this.MAX_POSITION,
                    originalPosition: { x: position.x, y: position.y, z: position.z }
                }));
                
                position.x = Math.max(-this.MAX_POSITION, Math.min(this.MAX_POSITION, position.x));
                position.y = Math.max(-this.MAX_POSITION, Math.min(this.MAX_POSITION, position.y));
                position.z = Math.max(-this.MAX_POSITION, Math.min(this.MAX_POSITION, position.z));
            }

            // Validate and clamp velocity if present
            if (update.velocity) {
                velocity.copy(update.velocity); // Using Three.js Vector3 copy
                if (!this.validateAndLogVector3(velocity, this.MAX_VELOCITY, 'velocity', update.id)) {
                    if (debugState.isNodeDebugEnabled()) {
                        logger.node('Velocity validation failed, attempting recovery', createDataMetadata({
                            nodeId: update.id,
                            originalVelocity: { x: velocity.x, y: velocity.y, z: velocity.z }
                        }));
                    }
                    if (debugState.isEnabled()) {
                        logger.warn(`Invalid velocity for node ${update.id}, clamping to valid range`);
                    }
                    velocity.x = Math.max(-this.MAX_VELOCITY, Math.min(this.MAX_VELOCITY, velocity.x));
                    velocity.y = Math.max(-this.MAX_VELOCITY, Math.min(this.MAX_VELOCITY, velocity.y));
                    velocity.z = Math.max(-this.MAX_VELOCITY, Math.min(this.MAX_VELOCITY, velocity.z));
                }
                
                // Log velocity data for the first few nodes to help debug node movement
                if (index === undefined && debugState.isPhysicsDebugEnabled()) {
                    logger.physics('New node with velocity', createDataMetadata({
                        nodeId: update.id,
                        velocity: velocity ? { 
                            x: velocity.x.toFixed(3), 
                            y: velocity.y.toFixed(3), 
                            z: velocity.z.toFixed(3) 
                        } : 'none'
                    }));
                }
            }

            if (index === undefined) {
                // New node
                const newIndex = this.nodeInstances.count;
                if (newIndex < MAX_INSTANCES) {
                    this.nodeIndices.set(update.id, newIndex);
                    this.nodeIdToInstanceId.set(update.id, newIndex);
                    this.nodeInstances.count++;

                    // Calculate scale based on node properties
                    const scaleValue = this.getNodeScale({
                        id: update.id,
                        data: {
                            position: position.clone(),
                            velocity: new Vector3(0, 0, 0),
                            metadata: update.metadata
                        }
                    });
                    scale.set(scaleValue, scaleValue, scaleValue);
                    
                    if (update.velocity && this.validateVector3(update.velocity, this.MAX_VELOCITY)) {
                        const vel = update.velocity.clone(); // Using Three.js Vector3 clone
                        this.velocities.set(newIndex, vel);
                    }
                    
                    matrix.compose(position, quaternion, scale);
                    
                    // Validate matrix before setting
                    if (!this.validateMatrix4(matrix, update.id)) {
                        if (debugState.isMatrixDebugEnabled()) {
                            logger.matrix('Invalid matrix after composition', createDataMetadata({
                                nodeId: update.id,
                                position: {
                                    x: position.x,
                                    y: position.y,
                                    z: position.z
                                },
                                scale: {
                                    x: scale.x, y: scale.y, z: scale.z
                                }
                            }));
                        }
                        return;
                    }
                    
                    this.nodeInstances.setMatrixAt(newIndex, matrix);
                    this.nodeInstances.setColorAt(newIndex, VISIBLE);
                    
                    this.pendingUpdates.add(newIndex);
                    updatedCount++;
                } else {
                    if (debugState.isEnabled()) {
                        logger.warn('Maximum instance count reached, cannot add more nodes');
                    }
                }
                return;
            }

            // Update existing node
            if (update.velocity && this.validateVector3(update.velocity, this.MAX_VELOCITY)) {
                this.velocities.set(index, update.velocity.clone());
                
                // Add detailed velocity logging to debug physics
                if (debugState.isPhysicsDebugEnabled()) {
                    logger.physics('Updated velocity for node', createDataMetadata({
                        nodeId: update.id,
                        velocity: { 
                            x: update.velocity.x.toFixed(3), 
                            y: update.velocity.y.toFixed(3), 
                            z: update.velocity.z.toFixed(3) 
                        }
                    }));
                }
            }
            
            // Calculate scale based on node properties
            const scaleValue = this.getNodeScale({
                id: update.id,
                data: {
                    position: position.clone(),
                    velocity: new Vector3(0, 0, 0),
                    metadata: update.metadata
                }
            });
            scale.set(scaleValue, scaleValue, scaleValue);
            
            matrix.compose(position, quaternion, scale);
            
            // Validate matrix before setting
            if (!this.validateMatrix4(matrix, update.id)) {
                if (debugState.isMatrixDebugEnabled()) {
                    logger.matrix('Invalid matrix after composition', createDataMetadata({
                        nodeId: update.id,
                        position: {
                            x: position.x,
                            y: position.y,
                            z: position.z
                        },
                        scale: {
                            x: scale.x, y: scale.y, z: scale.z
                        }
                    }));
                }
                return;
            }
            
            this.nodeInstances.setMatrixAt(index, matrix);
            this.pendingUpdates.add(index);
            updatedCount++;
        });

        if (this.pendingUpdates.size > 0) {
            this.nodeInstances.instanceMatrix.needsUpdate = true;
            
            // Log a summary of what we updated
            if (updatedCount > 0) {
                logger.info('Node position update complete', createDataMetadata({
                    updatedCount,
                    pendingUpdates: this.pendingUpdates.size,
                    totalNodes: this.nodeInstances.count,
                    activeVelocityTracking: this.velocities.size
                }));
            }
            this.pendingUpdates.clear();
        }
    }

    public update(camera: Camera, passedDeltaTime?: number): void {
        if (!this.isReady) return;

        // Validate deltaTime
        if (passedDeltaTime !== undefined && 
            (!isFinite(passedDeltaTime) || isNaN(passedDeltaTime) || passedDeltaTime <= 0)) {
            if (debugState.isPhysicsDebugEnabled()) {
                logger.physics('Invalid deltaTime provided', createDataMetadata({ deltaTime: passedDeltaTime }));
            }
            return;
        }

        this.frameCount++;
        
        // Update positions based on velocity
        const currentTime = performance.now(); 
        
        // Calculate and cap deltaTime to prevent large jumps
        const rawDeltaTime = (currentTime - this.lastUpdateTime) / 1000; // Convert to seconds
        const deltaTime = passedDeltaTime !== undefined ? passedDeltaTime : Math.min(0.1, rawDeltaTime);
        
        // Log unusually large deltaTime values that could cause physics instability
        if (deltaTime > 0.05 && this.velocities.size > 0 && debugState.isPhysicsDebugEnabled()) {
            logger.physics('Large delta time detected', createDataMetadata({
                deltaTime: deltaTime.toFixed(3),
                velocityCount: this.velocities.size,
                timeSinceLastUpdate: rawDeltaTime.toFixed(3)
            }));
        }
        
        this.lastUpdateTime = currentTime;

        if (this.velocities.size > 0 && debugState.isPhysicsDebugEnabled()) {
            logger.physics('Physics update', createDataMetadata({
                deltaTime,
                velocityCount: this.velocities.size
            }));
        }

        // Update positions based on velocities
        this.velocities.forEach((nodeVelocity, index) => {
            if (nodeVelocity.lengthSq() > 0) {
                // Only process nodes with non-zero velocity
                this.nodeInstances.getMatrixAt(index, matrix);
                matrix.decompose(position, quaternion, scale);
                
                // Debug logging for position before velocity update
                if (index === 0 && debugState.isPhysicsDebugEnabled()) {
                    logger.physics('Position before velocity update', createDataMetadata({
                        nodeId: this.getNodeId(index) || 'unknown',
                        position: { x: position.x.toFixed(3), y: position.y.toFixed(3), z: position.z.toFixed(3) },
                        velocity: { x: nodeVelocity.x.toFixed(3), y: nodeVelocity.y.toFixed(3), z: nodeVelocity.z.toFixed(3) },
                        deltaTime: deltaTime.toFixed(3)
                    }));
                }
                
                // Apply velocity
                velocity.copy(nodeVelocity).multiplyScalar(deltaTime);
                position.add(velocity);

                // Special Z-axis stabilization to prevent depth drift
                // Apply extra damping to z-component
                if (Math.abs(position.z) > 3.0) {
                    position.z *= 0.98; // Gentle pull toward origin on z-axis
                    
                    // Also dampen z velocity to prevent oscillation
                    if (nodeVelocity.z !== 0) {
                        nodeVelocity.z *= 0.9; // Stronger damping on z velocity
                    }
                }
                
                // Debug logging for position after velocity update for first node
                if (index === 0 && debugState.isPhysicsDebugEnabled()) {
                    logger.physics('Position after velocity update', createDataMetadata({
                        nodeId: this.getNodeId(index) || 'unknown',
                        newPosition: { x: position.x.toFixed(3), y: position.y.toFixed(3), z: position.z.toFixed(3) },
                        appliedDelta: { x: velocity.x.toFixed(3), y: velocity.y.toFixed(3), z: velocity.z.toFixed(3) }
                    }));
                }

                // Validate position after velocity update
                if (!this.validateAndLogVector3(position, this.MAX_POSITION, 'physics-update')) {
                    if (debugState.isPhysicsDebugEnabled()) {
                        logger.physics('Invalid position after velocity update', createDataMetadata({
                            nodeId: this.getNodeId(index),
                            position: {
                                x: position.x,
                                y: position.y,
                                z: position.z
                            },
                            velocity: {
                                x: velocity.x, y: velocity.y, z: velocity.z
                            }
                        }));
                    }
                    // Extract position from matrix and reset
                    position.setFromMatrixPosition(matrix);
                }                
                
                // Update matrix
                matrix.compose(position, quaternion, scale);
                
                // Validate matrix before setting
                if (!this.validateMatrix4(matrix, this.getNodeId(index) || 'unknown')) {
                    return;
                }
                
                this.nodeInstances.setMatrixAt(index, matrix);
                this.pendingUpdates.add(index);
            }
        });

        // Update visibility and LOD every N frames
        if (this.frameCount % VISIBILITY_UPDATE_INTERVAL === 0) {
            this.updateVisibilityAndLOD(camera);
        }

        if (this.pendingUpdates.size > 0) {
            this.nodeInstances.instanceMatrix.needsUpdate = true;
            this.pendingUpdates.clear();
        }
    }
    
    /**
     * Diagnostic function to log current node positions
     */
    public logNodePositions(): void {
        if (!this.isReady || this.nodeIndices.size === 0) return;
        
        const sampleNodes = Array.from(this.nodeIndices.entries()).slice(0, 5);
        const positions = sampleNodes.map(([id, _]) => ({ id, position: this.getNodePosition(id) }));
        logger.info('Current node positions:', createDataMetadata({ positions }));
    }

    private updateVisibilityAndLOD(camera: Camera): void {
        if (!this.isReady) return;

        const cameraPosition = camera.position;
        
        // Check each instance
        for (let i = 0; i < this.nodeInstances.count; i++) {
            this.nodeInstances.getMatrixAt(i, matrix);
            position.setFromMatrixPosition(matrix);
            
            const distance = position.distanceTo(cameraPosition);
            
            // Update geometry based on distance
            void this.geometryManager.getGeometryForDistance(distance);

            // Always keep nodes visible regardless of distance
            // Just update the LOD level without making them invisible
            this.nodeInstances.setColorAt(i, VISIBLE);
        }

        // Ensure updates are applied
        if (this.nodeInstances.instanceColor) {
            this.nodeInstances.instanceColor.needsUpdate = true;
        }
    }

    public dispose(): void {
        if (this.nodeInstances) {
            this.nodeInstances.geometry.dispose();
            this.scene.remove(this.nodeInstances);
        }
        this.nodeIndices.clear();
        this.pendingUpdates.clear();
        this.nodeIdToInstanceId.clear();
        this.velocities.clear();
        this.isReady = false;
        
        // Only clear the static instance if it's this instance
        if (NodeInstanceManager.instance === this) {
            NodeInstanceManager.instance = null;
            NodeInstanceManager.instanceInfo = null;
        }
        
        if (debugState.isEnabled()) {
            logger.info(`Disposed NodeInstanceManager instance #${this.instanceId}`);
        }
    }

    public getInstanceMesh(): InstancedMesh {
        return this.nodeInstances;
    }

    public getNodeId(index: number): string | undefined {
        return Array.from(this.nodeIndices.entries())
            .find(([_, idx]) => idx === index)?.[0];
    }

    public getNodePosition(nodeId: string): Vector3 | undefined {
        const index = this.nodeIndices.get(nodeId);
        if (index !== undefined) {
            this.nodeInstances.getMatrixAt(index, matrix);
            const positionVec = new Vector3();
            positionVec.setFromMatrixPosition(matrix);
            return positionVec;
        }
        return undefined;
    }
    
    public getInstanceId(nodeId: string): number | undefined {
        return this.nodeIdToInstanceId.get(nodeId);
    }
}

----
rendering/node/interaction/NodeInteractionManager.ts
import {
    InstancedMesh,
    Vector3,
    Matrix4,
} from 'three';
import { XRHandWithHaptics, HapticActuator } from '../../../types/xr';
import { createLogger } from '../../../core/logger';
import { WebSocketService } from '../../../websocket/websocketService';

const logger = createLogger('NodeInteractionManager');

export class NodeInteractionManager {
    private static instance: NodeInteractionManager;
    private instanceMesh: InstancedMesh;
    private tempMatrix: Matrix4 = new Matrix4();
    private readonly interactionRadius: number = 0.1; // 10cm interaction radius
    private readonly HAPTIC_STRENGTH = 0.5; // 50% intensity
    private hapticActuators: HapticActuator[] | null = null;
    private webSocketService: WebSocketService;
    
    private constructor(instanceMesh: InstancedMesh) {
        this.instanceMesh = instanceMesh;
        this.webSocketService = WebSocketService.getInstance();
    }

    public static getInstance(instanceMesh: InstancedMesh): NodeInteractionManager {
        if (!NodeInteractionManager.instance) {
            NodeInteractionManager.instance = new NodeInteractionManager(instanceMesh);
        }
        return NodeInteractionManager.instance;
    }

    /**
     * Handle XR hand interaction
     * @param hand XR hand data with haptic feedback
     */
    public handleHandInteraction(hand: XRHandWithHaptics): void {
        if (!this.instanceMesh) return;

        // Store haptic feedback actuator for later use
        if (hand.hapticActuators && !this.hapticActuators) {
            this.hapticActuators = hand.hapticActuators;
        }

        // Get hand joint positions
        const indexTip = hand.hand.joints['index-finger-tip'];
        if (!indexTip) return;

        // Check for node intersection
        const intersectedIndex = this.getIntersectedNodeIndex(indexTip.position);
        if (intersectedIndex !== -1) {
            this.handleNodeHover(intersectedIndex);
        }
    }

    /**
     * Get the index of the node closest to the given position
     * @param position Position to check
     * @returns Instance index of the closest node, or -1 if none found
     */
    public getIntersectedNodeIndex(position: Vector3): number {
        if (!this.instanceMesh) return -1;

        let closestIndex = -1;
        let closestDistance = this.interactionRadius;

        // Check each instance
        for (let i = 0; i < this.instanceMesh.count; i++) {
            // Get instance matrix
            this.instanceMesh.getMatrixAt(i, this.tempMatrix);
            const instancePosition = new Vector3().setFromMatrixPosition(this.tempMatrix);

            // Check distance
            const distance = position.distanceTo(instancePosition);
            if (distance < closestDistance) {
                closestDistance = distance;
                closestIndex = i;
            }
        }

        return closestIndex;
    }

    /**
     * Send node position updates to the server via WebSockets
     * @param nodeId The ID of the node being updated
     * @param position The new position for the node
     */
    public sendNodeUpdates(nodeId: string, position: Vector3): void {
        if (!nodeId) {
            logger.warn('Cannot send node update: Invalid node ID');
            return;
        }

        // Send the update to the WebSocket service
        this.webSocketService.sendNodeUpdates([{
            id: nodeId,
            position: position.clone(),
            velocity: new Vector3(0, 0, 0)
        }]);
    }

    private handleNodeHover(_instanceIndex: number): void {
        // Trigger haptic feedback if available
        if (this.hapticActuators?.[0]) {
            this.hapticActuators[0].pulse(this.HAPTIC_STRENGTH, 50).catch(logger.error);
        }
    }

    public dispose(): void {
        this.hapticActuators = null;
        NodeInteractionManager.instance = null!;
        logger.info('NodeInteractionManager disposed');
    }
}
----
rendering/node/metadata/NodeMetadataManager.ts
import {
    Object3D,
    Camera,
    Scene,
    Vector3,
    Sprite,
    SpriteMaterial,
    Texture
} from 'three';
import { NodeMetadata } from '../../../types/metadata';
import { createLogger, createDataMetadata } from '../../../core/logger';
import { debugState } from '../../../core/debugState';

const logger = createLogger('NodeMetadataManager');

interface MetadataLabel {
    sprite: Sprite;
    container: Object3D;
    metadata: NodeMetadata;
    lastUpdateDistance: number;
    lastVisible: boolean;
}

export class NodeMetadataManager {
    private static instance: NodeMetadataManager;
    private labels: Map<string, MetadataLabel> = new Map();
    // Add a map to store relationships between node IDs and metadata IDs (filenames)
    private nodeIdToMetadataId: Map<string, string> = new Map();
    private metadataIdToNodeId: Map<string, string> = new Map();
    private VISIBILITY_THRESHOLD = 100;  // Increased maximum distance for label visibility
    private readonly UPDATE_INTERVAL = 2;        // More frequent updates
    private readonly LABEL_SCALE = 0.5;         // Base scale for labels
    private readonly DEFAULT_FILE_SIZE = 1000; // Default fileSize for fallback
    private frameCount = 0;
    private isInitialMappingComplete = false;

    private worldPosition = new Vector3();
    private labelCanvas: HTMLCanvasElement;
    private labelContext: CanvasRenderingContext2D;
    private scene: Scene;

    private constructor(scene: Scene) {
        // Create canvas for label textures
        this.labelCanvas = document.createElement('canvas');
        this.labelCanvas.width = 256;
        this.labelCanvas.height = 128;
        
        const context = this.labelCanvas.getContext('2d');
        if (!context) {
            throw new Error('Failed to get 2D context for label canvas');
        }
        this.labelContext = context;
        
        // Set up default text style
        this.labelContext.textAlign = 'center';
        this.labelContext.textBaseline = 'middle';
        this.labelContext.font = 'bold 24px Arial';
        
        this.scene = scene;
    }

    public static getInstance(scene?: Scene): NodeMetadataManager {
        if (!NodeMetadataManager.instance) {
            NodeMetadataManager.instance = new NodeMetadataManager(scene || new Scene());
        }
        return NodeMetadataManager.instance;
    }

    /**
     * Prioritize mapping node IDs to metadata IDs before any other operation
     * This is critical for ensuring labels are displayed correctly from the start
     * @param nodes Array of nodes to establish initial mappings
     */
    public initializeMappings(nodes: Array<{id: string, metadataId?: string, label?: string}>): void {
        if (this.isInitialMappingComplete) return;
        
        logger.info(`Initializing metadata mappings for ${nodes.length} nodes`);
        
        nodes.forEach(node => {
            const displayName = node.label || node.metadataId || node.id;
            if (displayName && displayName !== node.id) {
                this.mapNodeIdToMetadataId(node.id, displayName);
                logger.info(`Initial mapping: Node ID ${node.id} -> metadata ID "${displayName}"`);
            }
        });
        
        this.isInitialMappingComplete = true;
        logger.info(`Completed initial metadata mappings for ${this.nodeIdToMetadataId.size} nodes`);
    }

    private createLabelTexture(metadata: NodeMetadata): Texture {
        // Clear canvas
        this.labelContext.clearRect(0, 0, this.labelCanvas.width, this.labelCanvas.height);

        // CRITICAL: Prioritize metadata relationships to get the proper name/label
        let displayName = metadata.name || metadata.id || 'Unknown';
        
        // For numeric IDs, always check our ID-to-metadata mapping first
        if (/^\d+$/.test(metadata.id) || metadata.id !== displayName) {
            displayName = this.nodeIdToMetadataId.get(metadata.id) || displayName; 
            logger.info(`Label texture for node ${metadata.id}: Using mapped name "${displayName}"`);
        }
        if (debugState.isNodeDebugEnabled()) {
            logger.debug(`Creating label texture for ${metadata.id} with name: ${displayName}`, 
                createDataMetadata({ originalName: metadata.name, fileSize: metadata.fileSize }));
        }

        // Draw a slightly larger background to accommodate multiple lines
        this.labelContext.fillStyle = 'rgba(0, 0, 0, 0.5)';
        this.labelContext.fillRect(0, 0, this.labelCanvas.width, this.labelCanvas.height);

        // Draw main label (filename)
        this.labelContext.fillStyle = 'white';
        this.labelContext.font = 'bold 20px Arial';
        this.labelContext.fillText(displayName, this.labelCanvas.width / 2, 30);
        
        // Draw subtext lines
        this.labelContext.font = '14px Arial';
        this.labelContext.fillStyle = '#dddddd';
        
        // Add file size if available
        if (metadata.fileSize) {
            // Use actual fileSize or a reasonable default
            const fileSize = metadata.fileSize || this.DEFAULT_FILE_SIZE;
            const fileSizeText = this.formatFileSize(fileSize);
            this.labelContext.fillText(`Size: ${fileSizeText}`, this.labelCanvas.width / 2, 55);
        }
        
        // Add hyperlink count if available
        if (metadata.hyperlinkCount !== undefined && metadata.hyperlinkCount > 0) {
            this.labelContext.fillText(`Links: ${metadata.hyperlinkCount}`, this.labelCanvas.width / 2, 75); 
        }

        // Create texture
        const texture = new Texture(this.labelCanvas);
        texture.needsUpdate = true;
        return texture;
    }
    
    /**
     * Format file size into human-readable format
     */
    private formatFileSize(bytes: number): string {
        if (bytes < 1024) return bytes + ' B';
        if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
        if (bytes < 1024 * 1024 * 1024) return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
        return (bytes / (1024 * 1024 * 1024)).toFixed(1) + ' GB';
    }

    public async createMetadataLabel(metadata: NodeMetadata): Promise<Object3D> {
        // The problem: We were using a shared canvas instance for all node labels
        // Create a unique texture for each node with its own canvas instance
        
        // Log detailed info to track node identity
        logger.info(`Creating metadata label for node ID: ${metadata.id}, metadata name: ${metadata.name}`);
        
        // Create a dedicated canvas for this label
        const canvas = document.createElement('canvas');
        canvas.width = 256;
        canvas.height = 128;
        
        const context = canvas.getContext('2d');
        if (!context) {
            throw new Error('Failed to get 2D context for dedicated canvas');
        }
        
        // Configure the context the same way as our shared one
        context.textAlign = 'center';
        context.textBaseline = 'middle';
        context.font = 'bold 24px Arial';
        
        // CRITICAL FIX: Always check the node ID to metadata ID mapping FIRST
        // This ensures we use the human-readable filename rather than numeric ID
        let displayName: string;
        
        if (/^\d+$/.test(metadata.id)) {
            // For numeric IDs, ALWAYS use our mapping if available
            displayName = this.nodeIdToMetadataId.get(metadata.id) || 
                         (metadata.name && metadata.name !== 'undefined' ? metadata.name : metadata.id);
            logger.info(`Node ${metadata.id} - Using mapped name: "${displayName}"`);
        } else {
            displayName = (metadata.name && metadata.name !== 'undefined') ? metadata.name : metadata.id || 'Unknown';
        }
        
        if (/^\d+$/.test(metadata.id) || metadata.id !== displayName) {
            const mappedName = this.nodeIdToMetadataId.get(metadata.id);
            if (mappedName) displayName = mappedName;
            logger.info(`Using mapped name for node ${metadata.id}: "${displayName}"`);
            if (debugState.isNodeDebugEnabled()) {
                logger.debug(`Using mapped name for node ID ${metadata.id}: ${displayName}`, 
                    createDataMetadata({ fileSize: metadata.fileSize, 
                                       hyperlinkCount: metadata.hyperlinkCount }));
            }
        }
        
        // Draw background
        context.fillStyle = 'rgba(0, 0, 0, 0.5)';
        context.fillRect(0, 0, canvas.width, canvas.height);
        
        // Draw main label (filename)
        context.fillStyle = 'white';
        context.font = 'bold 20px Arial';
        // Truncate very long names
        let displayText = displayName;
        if (displayText.length > 30) {
            displayText = displayText.substring(0, 27) + '...';
        }
        context.fillText(displayText, canvas.width / 2, 30);
        
        // Draw subtext lines
        context.font = '14px Arial';
        context.fillStyle = '#dddddd';
        
        // Add file size if available
        if (metadata.fileSize !== undefined && metadata.fileSize > 0) {
            const fileSizeText = this.formatFileSize(metadata.fileSize);
            context.fillText(`Size: ${fileSizeText}`, canvas.width / 2, 55);
        } else {
            // Debug message for missing file size
            if (debugState.isNodeDebugEnabled()) {
                logger.debug(`Node ${metadata.id} (${displayName}) missing file size`, 
                    createDataMetadata({ 
                        metadataFileSize: metadata.fileSize || 'undefined'
                    }));
            }
        }
        
        // Add hyperlink count if available
        if (metadata.hyperlinkCount !== undefined && metadata.hyperlinkCount > 0) {
            context.fillText(`Links: ${metadata.hyperlinkCount}`, canvas.width / 2, 75);
        } else {
            // Debug message for missing hyperlink count only if debug is enabled
            if (debugState.isNodeDebugEnabled()) {
                logger.debug(`Node ${metadata.id} (${displayName}) missing hyperlink count`, 
                    createDataMetadata({ 
                        metadataHyperlinkCount: metadata.hyperlinkCount || 'undefined'
                    }));
            }
        }

        
        // Create a unique texture from this canvas instance
        const texture = new Texture(canvas);
        texture.needsUpdate = true;
        
        const material = new SpriteMaterial({
            map: texture,
            color: 0xffffff,
            transparent: true,
            opacity: 0.9,  // Slightly increased for better visibility
            // Ensure the renderer knows this material is unique
            depthWrite: false  // Changed to false to prevent occlusion by other objects
        });

        const sprite = new Sprite(material);
        sprite.scale.set(this.LABEL_SCALE * 2, this.LABEL_SCALE, 1);
        sprite.renderOrder = 1000; // Significantly increase render order to ensure labels are always on top

        // Add the sprite to an Object3D container for better control
        const container = new Object3D();
        container.add(sprite);
        container.renderOrder = 1000; // Ensure the entire container has high render priority
        container.position.copy(sprite.position); // Initialize container position
        
        // Enable both layers for desktop mode
        sprite.layers.enable(0);
        sprite.layers.enable(1);

        const label: MetadataLabel = {
            sprite,
            container,
            metadata,
            lastUpdateDistance: Infinity,
            lastVisible: false
        };

        // Add to scene
        this.scene.add(container);

        // If this node has a numeric ID, map it to the display name
        if (/^\d+$/.test(metadata.id) && displayName && displayName !== metadata.id) {
            // Add or update the mapping
            const existingMapping = this.nodeIdToMetadataId.get(metadata.id);
            if (!existingMapping || existingMapping !== displayName) {
                this.mapNodeIdToMetadataId(metadata.id, displayName);
                // Use displayName to ensure we're capturing the correct name
                metadata.name = displayName; 
                logger.info(`Updated mapping for node ID ${metadata.id} to "${displayName}"`);
            }
        }

        this.labels.set(metadata.id, label);
        return sprite;
    }

    public update(camera: Camera): void {
        this.frameCount++;
        if (this.frameCount % this.UPDATE_INTERVAL !== 0) return;

        const cameraPosition = camera.position;

        this.labels.forEach((label) => {
            const { sprite, container, metadata } = label;
            
            // Get actual world position from metadata
            this.worldPosition.set(
                metadata.position.x || 0,
                metadata.position.y || 0,
                metadata.position.z || 0
            );
            
            // Update sprite position
            container.position.copy(this.worldPosition);
            
            const distance = this.worldPosition.distanceTo(cameraPosition);

            // Update visibility based on distance
            const visible = distance < this.VISIBILITY_THRESHOLD;
            sprite.visible = visible;

            if (label.lastVisible !== visible) {
                label.lastVisible = visible;
            }

            if (visible) {
                // Scale based on distance
                const scale = Math.max(0.5, 1 - (distance / this.VISIBILITY_THRESHOLD));
                sprite.scale.set(
                    this.LABEL_SCALE * scale * 2,
                    this.LABEL_SCALE * scale,
                    1
                );

                // Make sprite face camera
                container.lookAt(cameraPosition);
            }

            // Update last known distance
            label.lastUpdateDistance = distance;
        });
    }

    public updateMetadata(id: string, metadata: NodeMetadata): void {
        const label = this.labels.get(id);
        if (!label) {
            this.createMetadataLabel(metadata);
            return;
        }

        // Update metadata
        const oldMetadata = { ...label.metadata };
        label.metadata = metadata;
        
        // Check if we need to update the node-to-metadata mapping
        if (metadata.name && metadata.name !== oldMetadata.name) {
            this.mapNodeIdToMetadataId(metadata.id, metadata.name);
            if (debugState.isNodeDebugEnabled()) {
                logger.debug(`Updated metadata mapping: ${metadata.id} -> ${metadata.name}`);
            } else {
                // Log at info level for important mappings to help diagnose issues
                if (/^\d+$/.test(metadata.id)) {
                    logger.info(`Updated numeric ID mapping: ${metadata.id} -> ${metadata.name}`);
                }
            }
        }
        
        // Update texture
        const texture = this.createLabelTexture(metadata); 
        
        // Dispose of old texture to avoid memory leaks
        if ((label.sprite.material as SpriteMaterial).map) {
            (label.sprite.material as SpriteMaterial).map?.dispose();
        }
        // Update material with new texture
        (label.sprite.material as SpriteMaterial).map = texture;
        (label.sprite.material as SpriteMaterial).needsUpdate = true;
    }
    
    /**
     * Map a node ID to a metadata ID (filename) for proper labeling
     * This is crucial for connecting numeric IDs with human-readable names
     */
    public mapNodeIdToMetadataId(nodeId: string, metadataId: string): void {
        // Don't map empty metadata IDs
        if (!metadataId || metadataId === 'undefined' || metadataId === 'Unknown') return;
        
        // Log previous mapping if it exists and is different
        const prevMapping = this.nodeIdToMetadataId.get(nodeId);
        if (prevMapping && prevMapping !== metadataId) {
            logger.info(`Updating node ID ${nodeId} mapping from "${prevMapping}" to "${metadataId}"`);
        }
        
        this.nodeIdToMetadataId.set(nodeId, metadataId);
        // Maintain reverse mapping for bidirectional lookup
        if (!this.metadataIdToNodeId.has(metadataId)) {
            this.metadataIdToNodeId.set(metadataId, nodeId);
        }
        logger.info(`Mapped node ID ${nodeId} to metadata ID ${metadataId}`);
    }

    public updatePosition(id: string, position: Vector3): void {
        const label = this.labels.get(id);
        if (!label) {
            // Check if this is a numeric ID with a mapped metadata ID
            if (/^\d+$/.test(id) && this.nodeIdToMetadataId.has(id)) {
                const metadataId = this.nodeIdToMetadataId.get(id);
                // Try to find the label using the metadata ID
                const metadataLabel = this.labels.get(metadataId!);
                if (metadataLabel) {
                    // Update the metadata label position
                    metadataLabel.metadata.position = { 
                        x: position.x, 
                        y: position.y, 
                        z: position.z 
                    };
                    metadataLabel.container.position.copy(position);
                    return;
                }
            }
            
            // Only log missing labels in debug mode to avoid spamming the console
            if (debugState.isNodeDebugEnabled()) {
                logger.debug(`No label found for node ${id}`);
            }
            return;
        }

        // Update metadata position
        label.metadata.position = { x: position.x, y: position.y, z: position.z };
        // Update sprite position
        label.container.position.copy(position);
    }

    public updateVisibilityThreshold(threshold: number): void {
        if (threshold > 0) {
            this.VISIBILITY_THRESHOLD = threshold;
            if (debugState.isNodeDebugEnabled()) {
                logger.debug(`Updated visibility threshold to ${threshold}`);
            }
        }
    }

    public setXRMode(enabled: boolean): void {
        this.labels.forEach((label) => {
            const sprite = label.sprite;
            if (enabled) {
                // XR mode - only layer 1
                sprite.layers.disable(0);
                sprite.layers.enable(1);
            } else {
                // Desktop mode - both layers
                sprite.layers.enable(0);
                sprite.layers.enable(1);
            }
        });
    }

    /**
     * Get the metadata ID (filename) for a given node ID
     */
    public getMetadataId(nodeId: string): string | undefined {
        return this.nodeIdToMetadataId.get(nodeId);
    }

    /**
     * Get the node ID for a given metadata ID (filename)
     */
    public getNodeId(metadataId: string): string | undefined {
        return this.metadataIdToNodeId.get(metadataId);
    }

    /**
     * Get the label for a node - uses the mapped metadata name if available
     */
    public getLabel(nodeId: string): string {
        return this.nodeIdToMetadataId.get(nodeId) || nodeId;
    }

    public removeLabel(id: string): void {
        const label = this.labels.get(id);
        if (!label) return;

        // Clean up resources
        (label.sprite.material as SpriteMaterial).map?.dispose();
        label.sprite.material.dispose();

        // Remove from scene
        this.scene.remove(label.container);
        
        // Remove from tracking
        this.labels.delete(id);
    }

    public dispose(): void {
        // Clean up all labels
        this.labels.forEach((label) => {
            (label.sprite.material as SpriteMaterial).map?.dispose();
            label.sprite.material.dispose();
            
            // Remove from scene
            this.scene.remove(label.container);
        });
        this.labels.clear();
        
        // Clear mappings
        this.nodeIdToMetadataId.clear();
        this.metadataIdToNodeId.clear();

        // Reset singleton
        NodeMetadataManager.instance = null!;
        logger.info('Disposed NodeMetadataManager');
    }
}
----
settings/index.ts
export enum SettingVisibility {
    Basic = 'basic',
    Advanced = 'advanced',
    Debug = 'debug',
    Hidden = 'hidden'
}
----
state/SettingsObserver.ts
import { SettingsStore } from './SettingsStore';
import { VisualizationController } from '../rendering/VisualizationController';
import { createLogger, createErrorMetadata } from '../core/logger';

const logger = createLogger('SettingsObserver');

type SettingsCallback = (path: string, value: any) => void;

export class SettingsObserver {
    private static instance: SettingsObserver | null = null;
    private settingsStore: SettingsStore;
    private visualizationController: VisualizationController;
    private callbacks: Map<string, Set<SettingsCallback>>;
    private updateTimeout: number | null = null;
    private readonly UPDATE_DELAY = 16; // ~60fps

    private constructor() {
        this.settingsStore = SettingsStore.getInstance();
        this.visualizationController = VisualizationController.getInstance();
        this.callbacks = new Map();
        this.initializeObserver();
    }

    public static getInstance(): SettingsObserver {
        if (!SettingsObserver.instance) {
            SettingsObserver.instance = new SettingsObserver();
        }
        return SettingsObserver.instance;
    }

    private async initializeObserver(): Promise<void> {
        try {
            await this.settingsStore.initialize();
            this.subscribeToSettings();
            logger.info('Settings observer initialized');
        } catch (error) {
            logger.error('Failed to initialize settings observer:', createErrorMetadata(error));
        }
    }

    private subscribeToSettings(): void {
        // Subscribe to all visualization settings
        this.settingsStore.subscribe('visualization', (path, value) => {
            this.handleVisualizationUpdate(path, value);
        });

        // Subscribe to physics settings
        this.settingsStore.subscribe('physics', (path, value) => {
            this.handlePhysicsUpdate(path, value);
        });

        // Subscribe to rendering settings
        this.settingsStore.subscribe('rendering', (path, value) => {
            this.handleRenderingUpdate(path, value);
        });

        // Subscribe to XR settings
        this.settingsStore.subscribe('xr', (path, value) => {
            this.handleXRUpdate(path, value);
        });
    }

    private handleVisualizationUpdate(path: string, value: any): void {
        this.debounceUpdate(() => {
            this.visualizationController.updateSetting(path, value);
            this.notifyCallbacks(path, value);
        });
    }

    private handlePhysicsUpdate(path: string, value: any): void {
        this.debounceUpdate(() => {
            this.visualizationController.updateSetting(path, value);
            this.notifyCallbacks(path, value);
        });
    }

    private handleRenderingUpdate(path: string, value: any): void {
        this.debounceUpdate(() => {
            this.visualizationController.updateSetting(path, value);
            this.notifyCallbacks(path, value);
        });
    }

    private handleXRUpdate(path: string, value: any): void {
        // XR updates should be immediate
        this.visualizationController.updateSetting(path, value);
        this.notifyCallbacks(path, value);
    }

    private debounceUpdate(callback: () => void): void {
        if (this.updateTimeout !== null) {
            window.clearTimeout(this.updateTimeout);
        }
        this.updateTimeout = window.setTimeout(() => {
            callback();
            this.updateTimeout = null;
        }, this.UPDATE_DELAY);
    }

    public subscribe(path: string, callback: SettingsCallback): () => void {
        if (!this.callbacks.has(path)) {
            this.callbacks.set(path, new Set());
        }

        const callbacks = this.callbacks.get(path)!;
        callbacks.add(callback);

        // Immediately call with current value
        const currentValue = this.settingsStore.get(path);
        if (currentValue !== undefined) {
            callback(path, currentValue);
        }

        // Return unsubscribe function
        return () => {
            const callbacks = this.callbacks.get(path);
            if (callbacks) {
                callbacks.delete(callback);
                if (callbacks.size === 0) {
                    this.callbacks.delete(path);
                }
            }
        };
    }

    private notifyCallbacks(path: string, value: any): void {
        // Notify callbacks for exact path match
        const exactCallbacks = this.callbacks.get(path);
        if (exactCallbacks) {
            exactCallbacks.forEach(callback => {
                try {
                    callback(path, value);
                } catch (error) {
                    logger.error(`Error in settings callback for ${path}:`, createErrorMetadata(error));
                }
            });
        }

        // Notify callbacks for parent paths
        const parts = path.split('.');
        while (parts.length > 1) {
            parts.pop();
            const parentPath = parts.join('.');
            const parentCallbacks = this.callbacks.get(parentPath);
            if (parentCallbacks) {
                parentCallbacks.forEach(callback => {
                    try {
                        callback(path, value);
                    } catch (error) {
                        logger.error(`Error in settings callback for ${parentPath}:`, createErrorMetadata(error));
                    }
                });
            }
        }
    }

    public dispose(): void {
        if (this.updateTimeout !== null) {
            window.clearTimeout(this.updateTimeout);
        }
        this.callbacks.clear();
        SettingsObserver.instance = null;
    }
}

----
state/settings.ts
import { Settings } from '../types/settings';
import { createLogger, createErrorMetadata } from '../core/logger';
import { SettingsStore } from './SettingsStore';
import { defaultSettings } from './defaultSettings';
import {
    SettingsCategory,
    SettingsPath,
    SettingsValue,
    getSettingValue,
    setSettingValue,
    isValidSettingPath
} from '../types/settings/utils';

const logger = createLogger('SettingsManager');

export class SettingsManager {
    private store: SettingsStore;
    private initialized: boolean = false;
    private settings: Settings = { ...defaultSettings };

    constructor() {
        this.store = SettingsStore.getInstance();
    }

    private useDefaultSettings(): void {
        // Reset to default settings
        this.settings = { ...defaultSettings };
        this.initialized = true;
    }

    public async initialize(): Promise<void> {
        if (this.initialized) return;

        try {
            await this.store.initialize();
            this.settings = this.store.get('') as Settings;
            this.initialized = true;
            logger.info('Settings initialized from server');
        } catch (error) {
            logger.error('Failed to initialize settings from server:', createErrorMetadata(error));
            this.useDefaultSettings();
        }
    }

    public getCurrentSettings(): Settings {
        // Always return settings, which will be defaults if initialization failed
        return this.settings;
    }

    public async updateSetting(path: SettingsPath, value: SettingsValue): Promise<void> {
        if (!isValidSettingPath(this.settings, path)) {
            throw new Error(`Invalid settings path: ${path}`);
        }

        try {
            setSettingValue(this.settings, path, value);
            if (this.initialized) {
                await this.store.set(path, value);
            } else {
                logger.warn(`Setting ${path} updated in memory only - store not initialized`);
            }
            logger.debug(`Updated setting ${path} to ${value}`);
        } catch (error) {
            logger.error(`Failed to update setting ${path}:`, createErrorMetadata(error));
            throw error;
        }
    }

    public get(path: SettingsPath): SettingsValue {
        if (!isValidSettingPath(this.settings, path)) {
            throw new Error(`Invalid settings path: ${path}`);
        }
        
        try {
            return getSettingValue(this.settings, path)!;
        } catch (error) {
            logger.error(`Error getting setting at path ${path}:`, createErrorMetadata(error));
            // Return default value for this path if available
            return getSettingValue(defaultSettings, path)!;
        }
    }

    public getCategory(category: SettingsCategory): Settings[typeof category] {
        if (!(category in this.settings)) {
            logger.warn(`Category ${category} not found, using defaults`);
            return defaultSettings[category];
        }
        return this.settings[category];
    }

    public subscribe(path: string, callback: (value: unknown) => void): () => void {
        const store = SettingsStore.getInstance();
        let unsubscriber: (() => void) | undefined;
        
        store.subscribe(path, (_, value) => {
            callback(value);
        }).then(unsub => {
            unsubscriber = unsub;
        });

        return () => {
            if (unsubscriber) {
                unsubscriber();
            }
        };
    }

    public onSettingChange(path: SettingsPath, callback: (value: SettingsValue) => void): () => void {
        const store = SettingsStore.getInstance();
        let unsubscriber: (() => void) | undefined;
        
        store.subscribe(path, (_, value) => {
            callback(value as SettingsValue);
        }).then(unsub => {
            unsubscriber = unsub;
        });

        return () => {
            if (unsubscriber) {
                unsubscriber();
            }
        };
    }

    public async batchUpdate(updates: Array<{ path: SettingsPath; value: SettingsValue }>): Promise<void> {
        try {
            // Validate all paths first
            for (const { path } of updates) {
                if (!isValidSettingPath(this.settings, path)) {
                    throw new Error(`Invalid settings path: ${path}`);
                }
            }

            // Apply updates to local settings first
            for (const { path, value } of updates) {
                setSettingValue(this.settings, path, value);
            }

            // Then sync with store if initialized
            if (this.initialized) {
                await Promise.all(
                    updates.map(({ path, value }) => this.store.set(path, value))
                );
            } else {
                logger.warn('Settings updated in memory only - store not initialized');
            }
        } catch (error) {
            logger.error('Failed to apply batch updates:', createErrorMetadata(error));
            throw error;
        }
    }

    public dispose(): void {
        this.store.dispose();
        this.initialized = false;
    }
}

// Export singleton instance
export const settingsManager = new SettingsManager();

----
state/SettingsStore.ts
import { Settings } from '../types/settings/base';
import { createLogger, createErrorMetadata, createMessageMetadata, createDataMetadata } from '../core/logger';
import { defaultSettings } from './defaultSettings';
import { buildApiUrl, getAuthHeaders } from '../core/api';
import { API_ENDPOINTS } from '../core/constants';
import { Logger, LoggerConfig } from '../core/logger';
import { validateSettings, validateSettingValue, ValidationError } from '../types/settings/validation';
import { convertObjectKeysToSnakeCase, convertObjectKeysToCamelCase } from '../core/utils';

const logger = createLogger('SettingsStore');

export type SettingsChangeCallback = (path: string, value: unknown) => void;
export type ValidationErrorCallback = (errors: ValidationError[]) => void;

export class SettingsStore {
    private static instance: SettingsStore | null = null;
    private settings: Settings;
    private initialized: boolean = false;
    private initializationPromise: Promise<void> | null = null;
    private subscribers: Map<string, SettingsChangeCallback[]> = new Map();
    private validationSubscribers: ValidationErrorCallback[] = [];
    private settingsInitialized: boolean = false;
    private logger: Logger;
    private retryCount: number = 0;
    private readonly MAX_RETRIES: number = 3;
    private readonly RETRY_DELAY: number = 1000;
    private settingsOrigin: 'server' | 'default' = 'default';

    private constructor() {
        this.settings = { ...defaultSettings };
        this.subscribers = new Map();
        this.logger = createLogger('SettingsStore');
    }

    public static getInstance(): SettingsStore {
        if (!SettingsStore.instance) {
            SettingsStore.instance = new SettingsStore();
        }
        return SettingsStore.instance;
    }

    public async initialize(): Promise<void> {
        if (this.initialized) {
            return Promise.resolve();
        }
        if (this.initializationPromise) {
            return this.initializationPromise;
        }

        this.initializationPromise = (async () => {
            // Start a timeout to ensure we don't wait forever for server settings
            const timeoutPromise = new Promise<void>((_, reject) => {
                setTimeout(() => {
                    if (!this.settingsInitialized) {
                        reject(new Error('Settings initialization timed out'));
                    }
                }, 5000); // 5 second timeout
            });

            try {
                // Start with default settings immediately to avoid waiting for server
                this.settings = { ...defaultSettings };
                this.settingsOrigin = 'default';
                
                // Initialize logger with default settings right away
                if (this.settings.system?.debug) {
                    LoggerConfig.setGlobalDebug(this.settings.system.debug.enabled);
                    LoggerConfig.setFullJson(this.settings.system.debug.logFullJson);
                }
                
                // Mark as initialized with defaults
                this.settingsInitialized = true;
                this.initialized = true;
                logger.info('SettingsStore initialized with defaults, will update from server asynchronously');
                
                // Create a promise for fetching server settings
                const fetchServerSettings = async () => {
                    const settingsUrl = buildApiUrl(API_ENDPOINTS.SETTINGS_ROOT);
                    logger.info('Fetching settings from:', createMessageMetadata(settingsUrl));
                    const response = await fetch(settingsUrl);
                    logger.info('Server response status:', createMessageMetadata(response.status));
                    
                    if (response.ok) {
                        const serverSettings = await response.json();
                        logger.info('Received server settings:', createDataMetadata(serverSettings));
                        
                        // Convert snake_case to camelCase
                        const camelCaseSettings = convertObjectKeysToCamelCase(serverSettings);
                        
                        // Validate server settings
                        const serverValidation = validateSettings(camelCaseSettings);
                        if (!serverValidation.isValid) {
                            throw new Error(`Invalid server settings: ${JSON.stringify(serverValidation.errors)}`);
                        }
                        
                        // Use server settings as base, filling in any missing fields with defaults
                        this.settings = this.deepMerge(this.settings, camelCaseSettings);
                        this.settingsOrigin = 'server';
                        
                        // Initialize logger configuration from settings
                        if (this.settings.system?.debug) {
                            LoggerConfig.setGlobalDebug(this.settings.system.debug.enabled);
                            LoggerConfig.setFullJson(this.settings.system.debug.logFullJson);
                        }
                        logger.info('Updated settings from server');
                    } else {
                        const errorText = await response.text();
                        logger.error('Response text:', createMessageMetadata(errorText));
                        throw new Error(`Failed to fetch server settings: ${response.statusText}. Details: ${errorText}`);
                    }
                };

                // Try to fetch settings from server in the background, but don't block initialization
                // Race the fetch against a timeout to ensure we don't wait forever
                Promise.race([fetchServerSettings(), timeoutPromise])
                    .catch(error => {
                        // If server settings fail, fall back to defaults
                        if (error instanceof Error) {
                            logger.error('Full error:', createErrorMetadata(error));
                        }
                        logger.warn('Error loading server settings, falling back to defaults:', createErrorMetadata(error));
                        // We already initialized with defaults, so just log the error
                        logger.info('Continuing with default settings');
                    });

                this.initialized = true;
                logger.info('SettingsStore initialized with origin:', createMessageMetadata(this.settingsOrigin));
            } catch (error) {
                logger.error('Critical initialization failure:', createErrorMetadata(error));
                // Last resort: use defaults without validation
                this.settings = { ...defaultSettings };
                this.settingsOrigin = 'default';
                this.initialized = true;
            }
        })();

        return this.initializationPromise;
    }

    public isInitialized(): boolean {
        return this.initialized;
    }

    public get(path: string): unknown {
        if (!this.initialized) {
            logger.warn('Attempting to access settings before initialization');
            return undefined;
        }
        
        if (!path) {
            return this.settings;
        }
        
        try {
            return path.split('.').reduce((obj: any, key) => {
                if (obj === null || obj === undefined) {
                    throw new Error(`Invalid path: ${path}`);
                }
                return obj[key];
            }, this.settings);
        } catch (error) {
            logger.error(`Error accessing setting at path ${path}:`, createErrorMetadata(error));
            return undefined;
        }
    }

    public subscribeToValidationErrors(callback: ValidationErrorCallback): () => void {
        this.validationSubscribers.push(callback);
        return () => {
            const index = this.validationSubscribers.indexOf(callback);
            if (index > -1) {
                this.validationSubscribers.splice(index, 1);
            }
        };
    }

    public async subscribe(path: string, callback: SettingsChangeCallback, immediate: boolean = false): Promise<() => void> {
        if (!this.initialized) {
            await this.initialize();
        }

        if (!this.subscribers.has(path)) {
            this.subscribers.set(path, []);
        }
        
        const subscribers = this.subscribers.get(path);
        if (subscribers) {
            subscribers.push(callback);
        }

        // Only call callback immediately if explicitly requested
        if (immediate) {
            const value = this.get(path);
            if (value !== undefined) {
                callback(path, value);
            }
        }

        return () => {
            const pathSubscribers = this.subscribers.get(path);
            if (pathSubscribers) {
                const index = pathSubscribers.indexOf(callback);
                if (index > -1) {
                    pathSubscribers.splice(index, 1);
                }
                if (pathSubscribers.length === 0) {
                    this.subscribers.delete(path);
                }
            }
        };
    }

    public async set(path: string, value: unknown): Promise<void> {
        try {
            // Validate the specific setting change
            // Update logger config if debug settings change
            if (path.startsWith('system.debug')) {
                if (path === 'system.debug.enabled') {
                    LoggerConfig.setGlobalDebug(value as boolean);
                } else if (path === 'system.debug.logFullJson') {
                    LoggerConfig.setFullJson(value as boolean);
                }
            }
            const validationErrors = validateSettingValue(path, value, this.settings);
            if (validationErrors.length > 0) {
                this.notifyValidationErrors(validationErrors);
                throw new Error(`Validation failed: ${JSON.stringify(validationErrors)}`);
            }
            
            // Create a copy of settings for rollback
            const previousSettings = JSON.parse(JSON.stringify(this.settings));
            const previousOrigin = this.settingsOrigin;
            
            // Update local state
            this.updateSettingValue(path, value);
            // Mark as modified from default since this is a user action
            this.settingsOrigin = 'default';
            
            // Validate entire settings object after update
            const fullValidation = validateSettings(this.settings);
            if (!fullValidation.isValid) {
                // Rollback and notify of validation errors
                this.settings = previousSettings;
                this.settingsOrigin = previousOrigin;
                this.notifyValidationErrors(fullValidation.errors);
                throw new Error(`Full validation failed: ${JSON.stringify(fullValidation.errors)}`);
            }
            
            // Sync with server (not an initial sync)
            try {
                await this.syncWithServer(false);
            } catch (error) {
                // Rollback on server sync failure
                this.settings = previousSettings;
                this.settingsOrigin = previousOrigin;
                this.notifySubscribers(path, this.get(path));
                throw error;
            }
            
            // Notify subscribers of successful update
            this.notifySubscribers(path, value);
            
            this.logger.debug(`Setting updated successfully: ${path}`, createDataMetadata({
                value,
                origin: this.settingsOrigin
            }));
        } catch (error) {
            this.logger.error(`Failed to update setting: ${path}`, createErrorMetadata(error));
            throw error;
        }
    }

    public isFromServer(): boolean {
        return this.settingsOrigin === 'server';
    }

    private prepareSettingsForSync(settings: Settings): any {
        // Create a copy of settings
        const preparedSettings = JSON.parse(JSON.stringify(settings));

        // Ensure required sections exist
        if (!preparedSettings.system) preparedSettings.system = {};
        if (!preparedSettings.system.debug) preparedSettings.system.debug = {};
        if (!preparedSettings.xr) preparedSettings.xr = {};

        // Always include all required debug fields
        preparedSettings.system.debug = {
            enabled: preparedSettings.system.debug.enabled ?? false,
            enableDataDebug: preparedSettings.system.debug.enableDataDebug ?? false,
            enableWebsocketDebug: preparedSettings.system.debug.enableWebsocketDebug ?? false,
            logBinaryHeaders: preparedSettings.system.debug.logBinaryHeaders ?? false,
            logFullJson: preparedSettings.system.debug.logFullJson ?? false,
            logLevel: preparedSettings.system.debug.logLevel ?? 'info',
            logFormat: preparedSettings.system.debug.logFormat ?? 'json'
        };

        // Always include required XR fields
        const defaultXR = defaultSettings.xr;
        preparedSettings.xr = {
            ...preparedSettings.xr,
            gestureSmoothing: preparedSettings.xr.gestureSmoothing ?? defaultXR.gestureSmoothing,
            mode: preparedSettings.xr.mode ?? defaultXR.mode,
            roomScale: preparedSettings.xr.roomScale ?? defaultXR.roomScale,
            spaceType: preparedSettings.xr.spaceType ?? defaultXR.spaceType,
            quality: preparedSettings.xr.quality ?? defaultXR.quality,
            enableHandTracking: preparedSettings.xr.enableHandTracking ?? defaultXR.enableHandTracking,
            handMeshEnabled: preparedSettings.xr.handMeshEnabled ?? defaultXR.handMeshEnabled,
            handMeshColor: preparedSettings.xr.handMeshColor ?? defaultXR.handMeshColor,
            handMeshOpacity: preparedSettings.xr.handMeshOpacity ?? defaultXR.handMeshOpacity,
            handPointSize: preparedSettings.xr.handPointSize ?? defaultXR.handPointSize,
            handRayEnabled: preparedSettings.xr.handRayEnabled ?? defaultXR.handRayEnabled,
            handRayColor: preparedSettings.xr.handRayColor ?? defaultXR.handRayColor,
            handRayWidth: preparedSettings.xr.handRayWidth ?? defaultXR.handRayWidth,
            movementAxes: preparedSettings.xr.movementAxes ?? defaultXR.movementAxes
        };

        // Convert to snake_case for server
        return convertObjectKeysToSnakeCase(preparedSettings);
    }

    private async syncWithServer(isInitialSync: boolean = false): Promise<void> {
        // Don't sync to server during initialization if we got settings from server
        if (isInitialSync && this.settingsOrigin === 'server') {
            this.logger.debug('Skipping initial sync as settings came from server');
            return;
        }

        try {
            // Prepare settings for server sync
            const serverSettings = this.prepareSettingsForSync(this.settings);
            
            this.logger.debug('Sending settings to server:', createDataMetadata({
                origin: this.settingsOrigin,
                isInitialSync,
                debug: serverSettings.system?.debug
            }));
            
            // Use the existing getAuthHeaders function to get headers with Nostr pubkey
            const headers = getAuthHeaders();
            this.logger.debug('Using auth headers for settings sync');
                        
            const response = await fetch(buildApiUrl(API_ENDPOINTS.SETTINGS_ROOT), {
                method: 'POST',
                headers,
                body: JSON.stringify(serverSettings)
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                this.logger.error('Server sync failed:', createDataMetadata({
                    status: response.status,
                    error: errorText,
                    sentSettings: serverSettings.system?.debug
                }));
                throw new Error(`Server returned ${response.status}: ${errorText}`);
            }
            
            // Convert server response back to camelCase
            const responseData = await response.json();
            const camelCaseSettings = convertObjectKeysToCamelCase(responseData);
            
            this.logger.debug('Received settings from server:', createDataMetadata({
                debug: camelCaseSettings.system?.debug
            }));
            
            // Validate server response
            const validationResult = validateSettings(camelCaseSettings);
            if (!validationResult.isValid) {
                this.logger.error('Settings validation failed:', createDataMetadata({
                    errors: validationResult.errors,
                    receivedSettings: camelCaseSettings.system?.debug
                }));
                throw new Error(`Invalid server response: ${JSON.stringify(validationResult.errors)}`);
            }
            
            this.settings = this.deepMerge(this.settings, camelCaseSettings);
            this.logger.debug('Settings synced successfully:', createDataMetadata({
                finalDebug: this.settings.system?.debug
            }));
        } catch (error) {
            this.logger.error('Failed to sync settings with server:', createErrorMetadata(error));
            if (this.retryCount < this.MAX_RETRIES) {
                this.retryCount++;
                this.logger.info(`Retrying sync (attempt ${this.retryCount}/${this.MAX_RETRIES})...`);
                await new Promise(resolve => setTimeout(resolve, this.RETRY_DELAY));
                return this.syncWithServer();
            }
            throw error;
        }
    }

    private notifyValidationErrors(errors: ValidationError[]): void {
        this.validationSubscribers.forEach(callback => {
            try {
                callback(errors);
            } catch (error) {
                this.logger.error('Error in validation subscriber:', createErrorMetadata(error));
            }
        });
    }

    private notifySubscribers(path: string, value: unknown): void {
        const subscribers = this.subscribers.get(path);
        if (subscribers) {
            let scheduledCallbacks = new Set<SettingsChangeCallback>();
            
            subscribers.forEach(callback => {
                try {
                    if (!scheduledCallbacks.has(callback)) {
                        scheduledCallbacks.add(callback);
                        window.requestAnimationFrame(() => {
                            if (scheduledCallbacks.has(callback)) {
                                callback(path, value);
                            }
                        });
                    }
                } catch (error) {
                    this.logger.error(`Error scheduling settings notification for ${path}:`, createErrorMetadata(error));
                }
            });
        }
    }

    private deepMerge(target: any, source: any): any {
        const result = { ...target };
        
        // Handle arrays
        if (Array.isArray(source)) {
            return [...source];
        }
        
        if (source && typeof source === 'object') {
            Object.keys(source).forEach(key => {
                if (source[key] instanceof Object && !Array.isArray(source[key])) {
                    result[key] = this.deepMerge(result[key] || {}, source[key]);
                } else {
                    result[key] = source[key];
                }
            });
        }
        
        return result;
    }

    private updateSettingValue(path: string, value: unknown): void {
        if (!path) {
            throw new Error('Setting path cannot be empty');
        }

        const parts = path.split('.');
        const section = parts[0];
        const lastKey = parts.pop()!;

        // Create a new settings object with the updated value
        this.settings = this.deepUpdate(this.settings, parts, lastKey, value);

        // If this is an XR setting, ensure all required fields are present
        if (section === 'xr') {
            const currentXR = this.settings.xr;
            const defaultXR = defaultSettings.xr;

            // Ensure all required XR fields are present with defaults
            this.settings.xr = {
                ...currentXR,
                mode: currentXR.mode ?? defaultXR.mode,
                roomScale: currentXR.roomScale ?? defaultXR.roomScale,
                spaceType: currentXR.spaceType ?? defaultXR.spaceType,
                quality: currentXR.quality ?? defaultXR.quality,
                gestureSmoothing: currentXR.gestureSmoothing ?? defaultXR.gestureSmoothing,
                enableHandTracking: currentXR.enableHandTracking ?? defaultXR.enableHandTracking,
                handMeshEnabled: currentXR.handMeshEnabled ?? defaultXR.handMeshEnabled,
                handMeshColor: currentXR.handMeshColor ?? defaultXR.handMeshColor,
                handMeshOpacity: currentXR.handMeshOpacity ?? defaultXR.handMeshOpacity,
                handPointSize: currentXR.handPointSize ?? defaultXR.handPointSize,
                handRayEnabled: currentXR.handRayEnabled ?? defaultXR.handRayEnabled,
                handRayColor: currentXR.handRayColor ?? defaultXR.handRayColor,
                handRayWidth: currentXR.handRayWidth ?? defaultXR.handRayWidth,
                movementAxes: currentXR.movementAxes ?? defaultXR.movementAxes
            };
        }
    }

    private deepUpdate(obj: any, path: string[], lastKey: string, value: unknown): any {
        if (path.length === 0) {
            return { ...obj, [lastKey]: value };
        }

        const key = path.shift()!;
        return {
            ...obj,
            [key]: this.deepUpdate(obj[key] || {}, path, lastKey, value)
        };
    }

    public dispose(): void {
        this.subscribers.clear();
        this.validationSubscribers = [];
        this.settings = { ...defaultSettings };
        SettingsStore.instance = null;
    }
}

----
state/defaultSettings.ts
import { Settings } from '../types/settings/base';

export const defaultSettings: Settings = {
    visualization: {
        nodes: {
            baseColor: '#32aeae',
            metalness: 0.8,
            opacity: 1.0,
            roughness: 0.2,
            sizeRange: [0.5, 2.0],  // Match server's node size range
            quality: 'medium',
            enableInstancing: true,
            enableHologram: true,
            enableMetadataShape: false,
            enableMetadataVisualization: true,  // Enable metadata visualization
            colorRangeAge: ['#ff0000', '#00ff00'],
            colorRangeLinks: ['#0000ff', '#ff00ff']
        },
        edges: {
            arrowSize: 0.02,         // 2cm
            baseWidth: 0.005,        // 5mm
            color: '#888888',
            enableArrows: false,
            opacity: 0.8,
            widthRange: [0.005, 0.01],  // 5mm to 10mm
            quality: 'medium',
            enableFlowEffect: true,
            flowSpeed: 1.0,
            flowIntensity: 0.6,
            glowStrength: 0.4,
            distanceIntensity: 0.3,
            useGradient: false,
            gradientColors: ['#888888', '#aaaaaa']
        },
        physics: {
            enabled: true,
            iterations: 100,              // Balanced for performance and stability
            attractionStrength: 0.08,     // Increased for better balance with repulsion
            repulsionStrength: 0.05,      // Balanced with attraction
            repulsionDistance: 1.5,       // Set to appropriate distance based on node size
            springStrength: 0.1,          // Increased to work with progressive spring implementation
            damping: 0.95,                // Increased to reduce oscillation and improve stability
            maxVelocity: 0.03,            // Reduced to prevent rapid movement
            collisionRadius: 0.2,         // Increased to prevent nodes from getting too close
            massScale: 1.0,               // Default mass scaling
            boundaryDamping: 0.9,         // Increased for better containment
            enableBounds: true,           // Enable bounds by default
            boundsSize: 15.0              // Set to align with center gravity implementation
        },
        rendering: {
            ambientLightIntensity: 0.2,
            backgroundColor: '#1a1a1a',
            directionalLightIntensity: 0.2,
            enableAmbientOcclusion: false,
            enableAntialiasing: true,
            enableShadows: false,
            environmentIntensity: 0.2,
            shadowMapSize: 2048,
            shadowBias: 0.00001,
            context: 'desktop'
        },
        animations: {
            enableMotionBlur: true,
            enableNodeAnimations: true,
            motionBlurStrength: 1.0,
            selectionWaveEnabled: false,
            pulseEnabled: false,
            pulseSpeed: 1.0,
            pulseStrength: 0.5,
            waveSpeed: 1.0
        },
        labels: {
            desktopFontSize: 14,
            enableLabels: true,
            textColor: '#ffffff',
            textOutlineColor: '#000000',
            textOutlineWidth: 0.1,
            textResolution: 16,
            textPadding: 2,
            billboardMode: 'camera'
        },
        bloom: {
            edgeBloomStrength: 2.0,
            enabled: true,
            environmentBloomStrength: 3.0,
            nodeBloomStrength: 3.0,
            radius: 2.0,
            strength: 3.0,
            threshold: 0.0
        },
        hologram: {
            ringCount: 2,
            sphereSizes: [0.08, 0.16],    // 8cm and 16cm
            ringRotationSpeed: 1.0,
            ringColor: '#00ffff',
            ringOpacity: 0.6,
            enableBuckminster: false,
            enableGeodesic: false,
            buckminsterSize: 0.0,         // Disabled by default
            buckminsterOpacity: 0,
            geodesicSize: 0.0,            // Disabled by default
            geodesicOpacity: 0,
            enableTriangleSphere: true,
            triangleSphereSize: 0.16,     // 16cm
            triangleSphereOpacity: 0.15,
            globalRotationSpeed: 0.03
        }
    },
    system: {
        websocket: {
            binaryChunkSize: 32768,
            compressionEnabled: true,
            compressionThreshold: 1024,
            reconnectAttempts: 5,
            reconnectDelay: 5000,
            updateRate: 30
        },
        debug: {
            enabled: false,
            enableDataDebug: false,
            enableWebsocketDebug: false,
            logBinaryHeaders: false,
            logFullJson: false,
            logLevel: 'info',
            logFormat: 'json'
        }
    },
    xr: {
        mode: 'immersive-vr',
        roomScale: 1.0,                   // Real-world 1:1 scale
        spaceType: 'local-floor',
        quality: 'high',
        autoEnterAR: false,
        hideControlPanel: true,
        preferredMode: 'immersive-vr',
        enableHandTracking: true,
        handMeshEnabled: true,
        handMeshColor: '#4287f5',
        handMeshOpacity: 0.3,
        handPointSize: 0.006,             // 6mm
        handRayEnabled: true,
        handRayColor: '#4287f5',
        handRayWidth: 0.003,              // 3mm
        gestureSmoothing: 0.5,
        enableHaptics: true,
        hapticIntensity: 0.5,
        dragThreshold: 0.02,              // 2cm movement required to start drag
        pinchThreshold: 0.3,              // 30% pinch required for activation
        rotationThreshold: 0.08,          // 8% rotation required for activation
        interactionRadius: 0.15,          // 15cm interaction sphere
        movementSpeed: 0.08,              // 8cm per frame at full stick deflection
        deadZone: 0.12,                   // 12% stick movement required
        movementAxes: {
            horizontal: 2,                 // Right joystick X
            vertical: 3                    // Right joystick Y
        },
        enableLightEstimation: false,
        enablePlaneDetection: true,
        enableSceneUnderstanding: true,
        planeColor: '#808080',
        planeOpacity: 0.5,
        showPlaneOverlay: false,
        snapToFloor: false,
        planeDetectionDistance: 3.0,      // 3m maximum plane detection distance
        enablePassthroughPortal: false,
        passthroughOpacity: 0.8,
        passthroughBrightness: 1.1,
        passthroughContrast: 1.0,
        portalSize: 2.5,                  // 2.5m portal size
        portalEdgeColor: '#ffffff',
        portalEdgeWidth: 0.02             // 2cm edge width
    }
};

----
state/graphData.ts
import { transformGraphData, Node, Edge, GraphData } from '../core/types';
import { createLogger } from '../core/utils';
import { Vector3 } from 'three';
import { API_ENDPOINTS } from '../core/constants';
import { debugState } from '../core/debugState';

import { WebSocketService as WebSocketServiceClass } from '../websocket/websocketService';
const logger = createLogger('GraphDataManager');

// Constants
const FLOATS_PER_NODE = 6;     // x, y, z, vx, vy, vz

// Throttling for debug logs
let lastDebugLogTime = 0;
const DEBUG_LOG_THROTTLE_MS = 2000; // Only log once every 2 seconds
const POSITION_UPDATE_THROTTLE_MS = 100; // Throttle position updates to 10 times per second
let lastPositionUpdateTime = 0;

// Helper for throttled debug logging
function throttledDebugLog(message: string, data?: any): void {
  if (!debugState.isDataDebugEnabled()) return;
  
  const now = Date.now();
  if (now - lastDebugLogTime > DEBUG_LOG_THROTTLE_MS) {
    lastDebugLogTime = now;
    logger.debug(message, data);
  }
}

// Interface for the internal WebSocket service used by this class
type InternalWebSocketService = { send(data: ArrayBuffer): void };

// Extend Edge interface to include id
interface EdgeWithId extends Edge {
  id: string;
}

// Update NodePosition type to use THREE.Vector3
type NodePosition = Vector3;

export class GraphDataManager {
  private static instance: GraphDataManager;
  private nodes: Map<string, Node>;
  private edges: Map<string, EdgeWithId>;
  private wsService!: InternalWebSocketService;  // Use definite assignment assertion
  private nodeIdToMetadataId: Map<string, string> = new Map();
  private metadata: Record<string, any>;
  private updateListeners: Set<(data: GraphData) => void>;
  private positionUpdateListeners: Set<(positions: Float32Array) => void>;
  private binaryUpdatesEnabled: boolean = false;
  private positionUpdateBuffer: Map<string, NodePosition> = new Map();
  private updateBufferTimeout: number | null = null;
  private static readonly BUFFER_FLUSH_INTERVAL = 16; // ~60fps
  private constructor() {
    this.nodes = new Map();
    this.edges = new Map();
    this.metadata = {};
    this.updateListeners = new Set();
    this.positionUpdateListeners = new Set();
    // Initialize with a no-op websocket service
    this.wsService = {
      send: () => logger.warn('WebSocket service not configured')
    };
    // Don't enable binary updates by default
    this.binaryUpdatesEnabled = false;
  }

  /**
   * Configure the WebSocket service for binary updates
   */
  public setWebSocketService(service: InternalWebSocketService): void {
    this.wsService = service;
    logger.info('WebSocket service configured');
    
    // If binary updates were enabled before the service was configured,
    // send an initial empty update now that we have a service
    if (this.binaryUpdatesEnabled) {
      try {
        this.updatePositions(new Float32Array());
        logger.info('Sent initial empty update after WebSocket service configuration');
      } catch (error) {
        logger.error('Failed to send initial update after WebSocket service configuration:', error);
      }
    }
  }

  static getInstance(): GraphDataManager {
    if (!GraphDataManager.instance) {
      GraphDataManager.instance = new GraphDataManager();
    }
    return GraphDataManager.instance;
  }

  public async fetchInitialData(): Promise<void> {
    try {
      // Start with first page
      throttledDebugLog('Fetching initial graph data page');
      const pageSize = 100; // Consistent page size
      await this.fetchPaginatedData(1, pageSize);
      
      throttledDebugLog(`Initial graph data page loaded. Current nodes: ${this.nodes.size}, edges: ${this.edges.size}`);
      
      // Force a notification to the UI after first page is loaded
      // This ensures we show something to the user quickly
      this.notifyUpdateListeners();
      
      // Get total pages from metadata
      const totalPages = this.metadata.pagination?.totalPages || 1;
      const totalItems = this.metadata.pagination?.totalItems || 0;
      
      if (totalPages > 1) {
        throttledDebugLog(`Loading remaining ${totalPages - 1} pages in background. Total items: ${totalItems}, Current items: ${this.nodes.size}`);
        // Load remaining pages in background with improved error handling
        this.loadRemainingPagesWithRetry(totalPages, 100);
      }
    } catch (error) {
      logger.error('Failed to fetch initial graph data:', error);
      throw error;
    }
  }

  /**
   * Load remaining pages with retry mechanism
   * This runs in the background and doesn't block the initial rendering
   */
  private async loadRemainingPagesWithRetry(totalPages: number, pageSize: number): Promise<void> {
    // Start from page 2 since page 1 is already loaded
    for (let page = 2; page <= totalPages; page++) {
      let retries = 0;
      const maxRetries = 3;
      let success = false;
      
      while (!success && retries < maxRetries) {
        try {
          await this.fetchPaginatedData(page, pageSize);
          success = true;
          throttledDebugLog(`Loaded page ${page}/${totalPages} successfully`);
        } catch (error) {
          retries++;
          const delay = Math.min(1000 * Math.pow(2, retries), 10000); // Exponential backoff with max 10s
          
          logger.warn(`Failed to load page ${page}/${totalPages}, attempt ${retries}/${maxRetries}. Retrying in ${delay}ms...`);
          
          // Wait before retrying
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
      
      if (!success) {
        logger.error(`Failed to load page ${page}/${totalPages} after ${maxRetries} attempts`);
      }
      
      // Notify listeners after each page, even if it failed
      this.notifyUpdateListeners();

          
      // Small delay between pages to avoid overwhelming the server
      await new Promise(resolve => setTimeout(resolve, 200));
      
      throttledDebugLog(`Page ${page} loaded. Total nodes now: ${this.nodes.size}`);
    }
    
    // All pages are now loaded, enable randomization
    try {
      const websocketService = WebSocketServiceClass.getInstance();
      logger.info(`Finished loading all ${totalPages} pages. Enabling server-side randomization.`);
      websocketService.enableRandomization(true);
    } catch (error) {
      logger.warn('Failed to enable randomization after loading all pages:', error);
    }
    logger.info(`Finished loading all ${totalPages} pages. Total nodes: ${this.nodes.size}, edges: ${this.edges.size}`);
  }

  public async fetchPaginatedData(page: number = 1, pageSize: number = 100): Promise<void> {
    try {
      throttledDebugLog(`Fetching page ${page} with size ${pageSize}. Current nodes: ${this.nodes.size}`);
      
      // Add timeout to prevent hanging requests
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout

      const url = `${API_ENDPOINTS.GRAPH_PAGINATED}?page=${page}&pageSize=${pageSize}`;
      throttledDebugLog(`Fetching paginated URL: ${url}`);
      
      const response = await fetch(
        url,
        {
          method: 'GET', 
          headers: {
            'Content-Type': 'application/json',
          },
          signal: controller.signal
        }
      );
      
      // Clear the timeout
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        throw new Error(`Failed to fetch paginated data: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      throttledDebugLog(`Received data for page ${page}:`, { nodes: data.nodes?.length, edges: data.edges?.length, totalItems: data.totalItems });
      
      this.updateGraphData(data);
      throttledDebugLog(`Paginated data loaded for page ${page}. Total nodes now: ${this.nodes.size}, edges: ${this.edges.size}`);
    } catch (error) {
      // If we got a 404, it might mean we've reached the end of the pagination
      const errorMessage = error instanceof Error ? error.message : 
                          (typeof error === 'string' ? error : 'Unknown error');
      if (errorMessage.includes('404')) {
        logger.warn(`Reached end of pagination at page ${page}, got 404. This might be expected.`);
        return;
      }
      logger.error(`Failed to fetch paginated data for page ${page}:`, error);
      throw error;
    }
  }

  async loadInitialGraphData(): Promise<void> {
    try {
      // Try both endpoints
      const endpoints = [
        API_ENDPOINTS.GRAPH_PAGINATED
      ];

      let response = null;
      for (const endpoint of endpoints) {
        try {
          response = await fetch(`${endpoint}?page=1&pageSize=100`);
          if (response.ok) break;
        } catch (e) {
          continue;
        }
      }

      if (!response || !response.ok) {
        throw new Error('Failed to fetch graph data from any endpoint');
      }

      const data = await response.json();
      const transformedData = transformGraphData(data);
      
      // Update nodes and edges
      this.nodes = new Map(transformedData.nodes.map((node: Node) => [node.id, node]));
      const edgesWithIds = transformedData.edges.map((edge: Edge) => ({
        ...edge,
        id: this.createEdgeId(edge.source, edge.target)
      }));
      this.edges = new Map(edgesWithIds.map(edge => [edge.id, edge]));
      
      // Update metadata
      this.metadata = {
        ...transformedData.metadata || {},
        pagination: {
          totalPages: data.totalPages,
          currentPage: data.currentPage,
          totalItems: data.totalItems,
          pageSize: data.pageSize
        }
      };

      // Enable WebSocket updates immediately
      // Binary updates will be enabled by GraphVisualization when the WebSocket is connected
      // this.enableBinaryUpdates();
      // this.setBinaryUpdatesEnabled(true);
      
      // Notify listeners of initial data
      this.notifyUpdateListeners();
      
      // Load remaining pages if any
      if (data.totalPages > 1) {
        await this.loadRemainingPages(data.totalPages, data.pageSize);
      }
      
      // If there's only one page, enable randomization immediately
      if (data.totalPages <= 1) {
        const websocketService = WebSocketServiceClass.getInstance();
        logger.info('Single page graph data loaded. Enabling server-side randomization.');
        websocketService.enableRandomization(true);
      }
      
      logger.info('Initial graph data loaded successfully');
    } catch (error) {
      logger.error('Failed to fetch graph data:', error);
      throw new Error('Failed to fetch graph data: ' + error);
    }
  }

  private async loadRemainingPages(totalPages: number, pageSize: number): Promise<void> {
    try {
      throttledDebugLog(`Starting to load remaining pages. Total pages: ${totalPages}, Current nodes: ${this.nodes.size}`);
      
      // Load remaining pages in parallel with a reasonable chunk size
      const chunkSize = 5;
      for (let i = 2; i <= totalPages; i += chunkSize) {
        const pagePromises = [];
        for (let j = i; j < Math.min(i + chunkSize, totalPages + 1); j++) {
          pagePromises.push(this.loadPage(j, pageSize));
        }
        await Promise.all(pagePromises);
        // Update listeners after each chunk
        throttledDebugLog(`Loaded chunk ${i}-${Math.min(i + chunkSize - 1, totalPages)}. Current nodes: ${this.nodes.size}, edges: ${this.edges.size}`);
        this.notifyUpdateListeners(); 
      }
    } catch (error) {
      logger.error('Error loading remaining pages:', error);
      throw error;
    }
  }

  private async loadPage(page: number, pageSize: number): Promise<void> {
    try {
      throttledDebugLog(`Loading page ${page}. Current nodes before load: ${this.nodes.size}`);
      
      const response = await fetch(
        `${API_ENDPOINTS.GRAPH_PAGINATED}?page=${page}&pageSize=${pageSize}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
      if (!response.ok) {
        throw new Error(`Failed to fetch page ${page}: ${response.statusText}`);
      }

      const data = await response.json();
      const transformedData = transformGraphData(data);
      
      // Add new nodes
      let newNodes = 0;
      transformedData.nodes.forEach((node: Node) => {
        if (!this.nodes.has(node.id)) {
          this.nodes.set(node.id, node);
          newNodes++;
        } 
      });
      
      // Add new edges
      let newEdges = 0;
      transformedData.edges.forEach((edge: Edge) => {
        const edgeId = this.createEdgeId(edge.source, edge.target);
        if (!this.edges.has(edgeId)) {
          // Make sure both source and target nodes exist before adding the edge
          if (this.nodes.has(edge.source) && this.nodes.has(edge.target)) {
            this.edges.set(edgeId, { ...edge, id: edgeId });
          }
          newEdges++;
        }
      });

      throttledDebugLog(`Loaded page ${page}: ${newNodes} new nodes, ${newEdges} new edges. Total now: ${this.nodes.size} nodes, ${this.edges.size} edges`);
    } catch (error) {
      logger.error(`Error loading page ${page}:`, error);
      throw error;
    }
  }

  /**
   * Enable binary position updates via WebSocket
   */
  public enableBinaryUpdates(): void {
    // Enable binary updates flag - actual WebSocket connection is handled by WebSocketService
    this.setBinaryUpdatesEnabled(true);
    logger.info('Binary updates enabled');
    
    // Explicitly check WebSocket service status
    const isDefaultService = this.wsService.send.toString().includes('WebSocket service not configured');
    if (isDefaultService) {
      logger.warn('Binary updates enabled but WebSocket service not yet configured. Starting retry mechanism...');
      debugState.setBinaryProtocolStatus('pending');
    } else {
      logger.info('WebSocket service is properly configured for binary updates');
      debugState.setBinaryProtocolStatus('active');
    }
  }

  /**
   * Enable or disable binary position updates
   */
  public setBinaryUpdatesEnabled(enabled: boolean): void {
    if (this.binaryUpdatesEnabled === enabled) return;
    
    this.binaryUpdatesEnabled = enabled;
    logger.info(`Binary updates ${enabled ? 'enabled' : 'disabled'}`);
    
    if (enabled) {
      // Check if WebSocket service is configured before sending update
      // Check if the send function is our default warning function
      const isDefaultService = this.wsService.send.toString().includes('WebSocket service not configured');
      if (!isDefaultService) {
        // Send initial empty update to start receiving binary updates
        this.updatePositions(new Float32Array());
      } else {
        logger.warn('Binary updates enabled but WebSocket service not yet configured. Will send update when service is available.');
        
        // Set up a retry mechanism to check for WebSocket service availability
        this.retryWebSocketConfiguration();
      }
    }
  }
  
  /**
   * Retry WebSocket configuration until it's available
   * This helps ensure we don't miss updates when the WebSocket service
   * is configured after binary updates are enabled
   */
  private retryWebSocketConfiguration(): void {
    // Only set up retry if not already running
    if (this._retryTimeout) {
      logger.debug('Retry mechanism already running, not starting a new one');
      return;
    }
    
    logger.info('Starting WebSocket configuration retry mechanism');
    debugState.setBinaryProtocolStatus('pending');
    
    // Define maximum retry attempts
    let retryCount = 0;
    const MAX_RETRIES = 30; // 30 seconds max
    
    const checkAndRetry = () => {
      retryCount++;
      
      // Check if WebSocket service is now configured
      const isDefaultService = this.wsService.send.toString().includes('WebSocket service not configured');
      if (!isDefaultService) {
        // WebSocket service is now configured, send initial update
        logger.info('WebSocket service now available, sending initial update');
        this.updatePositions(new Float32Array());
        this._retryTimeout = null;
        debugState.setBinaryProtocolStatus('active');
      } else {
        // Still not configured, retry after delay if under max retries
        if (retryCount < MAX_RETRIES) {
          logger.debug(`WebSocket service still not configured (attempt ${retryCount}/${MAX_RETRIES})`);
          this._retryTimeout = setTimeout(checkAndRetry, 1000) as any;
        } else {
          logger.warn(`WebSocket configuration retry failed after ${MAX_RETRIES} attempts`);
          this._retryTimeout = null;
          debugState.setBinaryProtocolStatus('failed');
        }
      }
    };
    
    // Start the retry process
    this._retryTimeout = setTimeout(checkAndRetry, 1000) as any;
  }
  
  private _retryTimeout: any = null;

  /**
   * Update node positions via binary protocol
   */
  private updatePositions(positions: Float32Array): void {
    if (!this.binaryUpdatesEnabled) {
      logger.warn('Attempted to update positions while binary updates are disabled');
      return;
    }
    
    try {
      // Check if WebSocket service is properly configured
      // Check if the send function is our default warning function
      const isDefaultService = this.wsService.send.toString().includes('WebSocket service not configured');
      if (isDefaultService) {
        logger.warn('Cannot send position update: WebSocket service not configured');
        // Set up retry mechanism if not already running
        this.retryWebSocketConfiguration();
        return;
      }
      
      // Update binary protocol status in debug state
      debugState.setBinaryProtocolStatus('active');
      
      // Log the update if debugging is enabled
      if (debugState.isDataDebugEnabled()) {
        const nodeCount = positions.length / FLOATS_PER_NODE;
        logger.debug(`Sending binary position update for ${nodeCount} nodes`);
      }
      
      this.wsService.send(positions.buffer);
    } catch (error) {
      logger.error('Failed to send position update:', error);
      // Update status to reflect error
      debugState.setBinaryProtocolStatus('error');
      // Don't disable binary updates on error - let the application decide
      // this.binaryUpdatesEnabled = false;
    }
  }

  /**
   * Initialize or update the graph data
   */
  updateGraphData(data: any): void {
    // Transform and validate incoming data
    const transformedData = transformGraphData(data);
    throttledDebugLog(`Updating graph data. Incoming: ${transformedData.nodes.length} nodes, ${transformedData.edges?.length || 0} edges. First 3 node IDs: ${transformedData.nodes.slice(0, 3).map(n => n.id).join(', ')}`);
    
    // Debug edge source/target IDs
    if (transformedData.edges && transformedData.edges.length > 0) {
      throttledDebugLog(`First 3 edge source/target IDs: ${transformedData.edges.slice(0, 3).map(e => `${e.source}->${e.target}`).join(', ')}`);
    }
    
    // Update nodes with proper position and velocity
    transformedData.nodes.forEach((node: Node) => {
      // Check if we already have this node
      const existingNode = this.nodes.get(node.id);
      
      
      if (existingNode) {
        // Update position and velocity
        existingNode.data.position.copy(node.data.position);
        if (node.data.velocity) {
          existingNode.data.velocity.copy(node.data.velocity);
        }

        // Track relationship between node ID and metadata ID (filename)
        if (node.data.metadata?.name && 
            node.data.metadata.name !== node.id && 
            node.data.metadata.name.length > 0) {
          // Store mapping from numeric ID to metadata ID (filename)
          this.nodeIdToMetadataId.set(node.id, node.data.metadata.name);

          if (debugState.isNodeDebugEnabled()) {
            throttledDebugLog(`Updated metadata mapping: ${node.id} -> ${node.data.metadata.name}`);
          }
        }
        
        // Only update metadata if the new node has valid metadata that's better than what we have
        if (node.data.metadata?.name && 
            node.data.metadata.name !== node.id && 
            node.data.metadata.name.length > 0) {
          // Update existing node with new metadata
          existingNode.data.metadata = {
            ...existingNode.data.metadata,
            ...node.data.metadata
          };
        }
      } else {
        // Store mapping from numeric ID to metadata ID (filename) for new nodes
        if (node.data.metadata?.name && 
            node.data.metadata.name !== node.id && 
            node.data.metadata.name.length > 0) {
          this.nodeIdToMetadataId.set(node.id, node.data.metadata.name);
          if (debugState.isNodeDebugEnabled()) {
            throttledDebugLog(`New metadata mapping: ${node.id} -> ${node.data.metadata.name}`);
          }
        }
        this.nodes.set(node.id, node);
      }
    });

    // Store edges in Map with generated IDs
    if (Array.isArray(transformedData.edges)) {
      transformedData.edges.forEach((edge: Edge) => {
        const edgeId = this.createEdgeId(edge.source, edge.target);
        
        // Check if source and target nodes exist
        if (!this.nodes.has(edge.source) || !this.nodes.has(edge.target)) {
          // It's possible we're seeing edges before their nodes due to pagination
          // Let's try to get node IDs from node-to-metadata mapping
          
          // We'll log this condition to help debug pagination issues
          if (this.nodes.size > 0 && debugState.isNodeDebugEnabled()) {
          }
          throttledDebugLog(`Skipping edge ${edge.source}->${edge.target} due to missing node(s)`);
          return;
        }
        
        const edgeWithId: EdgeWithId = {
          ...edge,
          id: edgeId
        };
        this.edges.set(edgeId, edgeWithId);
      });
    }

    // Update metadata, including pagination info if available
    this.metadata = {
      ...transformedData.metadata,
      pagination: data.totalPages ? {
        totalPages: data.totalPages,
        currentPage: data.currentPage,
        totalItems: data.totalItems,
        pageSize: data.pageSize
      } : undefined
    };

    // Notify listeners
    this.notifyUpdateListeners();
    throttledDebugLog(`Updated graph data: ${this.nodes.size} nodes, ${this.edges.size} edges`);
  }

  /**
   * Get the current graph data
   */
  getGraphData(): GraphData {
    return {
      nodes: Array.from(this.nodes.values()),
      edges: Array.from(this.edges.values()) as Edge[],
      metadata: this.metadata
    };
  }

  /**
   * Get a specific node by ID
   */
  getNode(id: string): Node | undefined {
    return this.nodes.get(id);
  }

  /**
   * Get the metadata ID (filename) for a node
   */
  getNodeMetadataId(id: string): string | undefined {
    return this.nodeIdToMetadataId.get(id);
  }

  /**
   * Subscribe to graph data updates
   */
  subscribe(listener: (data: GraphData) => void): () => void {
    this.updateListeners.add(listener);
    return () => {
      this.updateListeners.delete(listener);
    };
  }

  /**
   * Subscribe to position updates only
   */
  subscribeToPositionUpdates(
    listener: (positions: Float32Array) => void
  ): () => void {
    this.positionUpdateListeners.add(listener);
    return () => {
      this.positionUpdateListeners.delete(listener);
    };
  }

  /**
   * Clear all graph data
   */
  clear(): void {
    this.nodes.clear();
    this.edges.clear();
    this.metadata = {};
    this.notifyUpdateListeners();
  }

  private createEdgeId(source: string, target: string): string {
    return [source, target].sort().join('_');
  }

  private notifyUpdateListeners(): void {
    const data = this.getGraphData();
    this.updateListeners.forEach(listener => {
      try {
        listener(data);
      } catch (error) {
        logger.error('Error in graph update listener:', error);
      }
    });
  }

  private notifyPositionUpdateListeners(positions: Float32Array): void {
    this.positionUpdateListeners.forEach(listener => {
      try {
        listener(positions);
      } catch (error) {
        logger.error('Error in position update listener:', error);
      }
    });
  }

  public updateNodePositions(positions: Float32Array): void {
    if (!this.binaryUpdatesEnabled) {
      return;
    }

    // Throttle position updates to prevent overwhelming the system
    const now = Date.now();
    if (now - lastPositionUpdateTime < POSITION_UPDATE_THROTTLE_MS) {
      // Too soon for another update, just mark we have pending updates
      return;
    }
    
    lastPositionUpdateTime = now;
    
    const nodeCount = positions.length / FLOATS_PER_NODE;
    if (positions.length % FLOATS_PER_NODE !== 0) {
      logger.warn('Invalid position array length:', positions.length);
      return;
    }

    // Buffer the updates
    for (let i = 0; i < nodeCount; i++) {
      const offset = i * FLOATS_PER_NODE;
      
      try {
        // In our binary format, the node ID is just the index
        // We'll convert it to a string since our node map uses string keys
        const nodeId = i.toString();
        
        // Skip if we don't have this node
        if (!this.nodes.has(nodeId)) {
          continue;
        }

        // Create proper THREE.Vector3 object for the position
        const nodePosition = new Vector3(
          positions[offset],
          positions[offset + 1],
          positions[offset + 2]
        );

        // Only update if the position changed significantly
        const existingNode = this.nodes.get(nodeId);
        const distance = existingNode ? nodePosition.distanceTo(existingNode.data.position) : 0;
        if (existingNode && distance * distance > 0.001) { // Square the distance manually
          // Buffer this update
          this.positionUpdateBuffer.set(nodeId, nodePosition);
        }
      } catch (error) {
        logger.warn(`Error processing position for node index ${i}:`, error);
      }

    }

    // Schedule buffer flush if not already scheduled
    if (!this.updateBufferTimeout) {
      this.updateBufferTimeout = window.setTimeout(() => {
        this.flushPositionUpdates();
        this.updateBufferTimeout = null;
      }, GraphDataManager.BUFFER_FLUSH_INTERVAL);
    }
  }

  private flushPositionUpdates(): void {
    if (this.positionUpdateBuffer.size === 0) return;

    // Make sure we're working with proper THREE.Vector3 objects for data flow
    const updates = Array.from(this.positionUpdateBuffer.entries())
      .map(([id, position]) => ({
        id,
        data: { 
          position, // This is now a THREE.Vector3 object
          velocity: undefined 
        }
      }));

    // Convert node updates to Float32Array for binary protocol
    const nodesCount = updates.length;
    const positionsArray = new Float32Array(nodesCount * FLOATS_PER_NODE);
    
    updates.forEach((node, index) => {
      const baseIndex = index * FLOATS_PER_NODE;
      // Position (x, y, z)
      // Access x, y, z properties from the THREE.Vector3 object
      positionsArray[baseIndex] = node.data.position.x;
      positionsArray[baseIndex + 1] = node.data.position.y;
      positionsArray[baseIndex + 2] = node.data.position.z;
      // Velocity (set to 0 since undefined)
      positionsArray[baseIndex + 3] = positionsArray[baseIndex + 4] = positionsArray[baseIndex + 5] = 0;
    });
    this.notifyPositionUpdateListeners(positionsArray);
    this.positionUpdateBuffer.clear();
  }
}

// Export a singleton instance
export const graphDataManager = GraphDataManager.getInstance();

// Declare WebSocket on window for TypeScript
declare global {
  interface Window {
    ws: WebSocket;
  }
}

----
ui/index.ts
import { ModularControlPanel } from './ModularControlPanel';
import { createLogger, createErrorMetadata } from '../core/logger';
import './ModularControlPanel.css';

const logger = createLogger('UI');

// Initialize UI components
export async function initializeUI(): Promise<void> {
    try {
        logger.debug('Initializing UI components');
        
        // Initialize ModularControlPanel
        const controlPanel = ModularControlPanel.getInstance();
        
        // Wait for settings to be ready
        if (!controlPanel.isReady()) {
            await new Promise<void>((resolve) => {
                controlPanel.on('settings:ready', () => resolve());
            });
        }
        
        // Show panel by default
        controlPanel.show();
        
        logger.debug('ModularControlPanel initialized successfully');
    } catch (error) {
        logger.error('Failed to initialize UI:', createErrorMetadata(error));
        throw error;
    }
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        initializeUI().catch(error => {
            logger.error('Failed to initialize UI on DOMContentLoaded:', createErrorMetadata(error));
        });
    });
} else {
    initializeUI().catch(error => {
        logger.error('Failed to initialize UI:', createErrorMetadata(error));
    });
}

export { ModularControlPanel };

----
ui/styles.css
.control-panel {
    position: fixed;
    top: 20px;
    right: 20px;
    width: 300px;
    max-height: calc(100vh - 40px);
    background: rgba(28, 28, 38, 0.95);
    color: #fff;
    border-radius: 8px;
    padding: 15px;
    overflow-y: auto;
    font-family: 'Inter', system-ui, -apple-system, sans-serif;
    z-index: 1000;
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.control-section {
    margin-bottom: 20px;
}

.control-section h2 {
    font-size: 1.2em;
    margin: 0 0 15px 0;
    padding-bottom: 8px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    color: #4287f5;
}

.control-subsection {
    margin: 15px 0;
    padding: 10px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 6px;
}

.control-subsection h3 {
    font-size: 1em;
    margin: 0 0 10px 0;
    color: #6087c3;
}

.settings-content {
    font-family: 'Fira Code', monospace;
    font-size: 0.85em;
    margin: 0;
    padding: 10px;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 4px;
    white-space: pre-wrap;
    word-break: break-word;
    color: #a0a0a0;
}

.settings-content:hover {
    background: rgba(0, 0, 0, 0.3);
} 
----
ui/ModularControlPanel.css
:root {
    --primary-color: #4CAF50;
    --background-color: #212121;
    --text-color: #ffffff;
    --border-color: rgba(255, 255, 255, 0.1);
    --control-bg-color: rgba(255, 255, 255, 0.05);
    --control-hover-bg-color: rgba(255, 255, 255, 0.1);
    --control-active-bg-color: rgba(255, 255, 255, 0.15);
    --slider-track-color: #444;
    --slider-thumb-color: var(--primary-color);
    --error-color: #f44336;
    --section-header-bg: rgba(40, 40, 40, 0.95);
    --subsection-bg: rgba(0, 0, 0, 0.2);
    --tooltip-bg: rgba(0, 0, 0, 0.9);
}

/* Control Panel Container */
#control-panel {
    position: fixed;
    top: 20px;
    right: 20px;
    width: 400px;
    max-height: calc(100vh - 40px);
    background: var(--background-color);
    color: var(--text-color);
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    overflow-y: auto;
    font-family: system-ui, -apple-system, sans-serif;
    z-index: 1000;
    transition: transform 0.3s ease, opacity 0.3s ease;
}

#control-panel.hidden {
    transform: translateX(420px);
    opacity: 0;
}

/* Sections */
.settings-section {
    margin-bottom: 1rem;
    background: rgba(30, 30, 30, 0.95);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
}

.section-header {
    padding: 1rem;
    background: var(--section-header-bg);
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    user-select: none;
    transition: background-color 0.2s;
}

.section-header:hover {
    background: rgba(50, 50, 50, 0.95);
}

.section-header h4 {
    margin: 0;
    font-size: 1.1rem;
    font-weight: 500;
    color: var(--text-color);
}

/* Subsections */
.settings-subsection {
    margin: 1rem;
    padding: 1rem;
    background: var(--subsection-bg);
    border-radius: 8px;
    border: 1px solid var(--border-color);
}

.settings-subsection-header {
    margin: 0 0 1rem 0;
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--primary-color);
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

/* Setting Controls */
.setting-control {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    position: relative;
}

.setting-control label {
    flex: 1;
    font-size: 0.9rem;
    color: var(--text-color);
    margin-right: 1rem;
}

/* Sliders */
.setting-control input[type="range"] {
    -webkit-appearance: none;
    width: 140px;
    height: 4px;
    background: var(--slider-track-color);
    border-radius: 2px;
    outline: none;
}

.setting-control input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: var(--slider-thumb-color);
    cursor: pointer;
    border: 2px solid var(--background-color);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    transition: transform 0.2s;
}

.setting-control input[type="range"]::-webkit-slider-thumb:hover {
    transform: scale(1.1);
}

.setting-control input[type="range"]::-moz-range-thumb {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: var(--slider-thumb-color);
    cursor: pointer;
    border: 2px solid var(--background-color);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    transition: transform 0.2s;
}

.setting-control input[type="range"]::-moz-range-thumb:hover {
    transform: scale(1.1);
}

/* Toggle Switches */
.toggle-switch {
    position: relative;
    display: inline-block;
    width: 44px;
    height: 24px;
}

.toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.toggle-switch .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--slider-track-color);
    transition: .4s;
    border-radius: 24px;
}

.toggle-switch .slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 3px;
    bottom: 3px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

.toggle-switch input:checked + .slider {
    background-color: var(--primary-color);
}

.toggle-switch input:checked + .slider:before {
    transform: translateX(20px);
}

/* Color Picker */
.setting-control input[type="color"] {
    -webkit-appearance: none;
    width: 44px;
    height: 24px;
    border: none;
    border-radius: 4px;
    padding: 0;
    cursor: pointer;
}

.setting-control input[type="color"]::-webkit-color-swatch-wrapper {
    padding: 0;
}

.setting-control input[type="color"]::-webkit-color-swatch {
    border: 2px solid var(--border-color);
    border-radius: 4px;
}

/* Number and Text Inputs */
.setting-control input[type="number"],
.setting-control input[type="text"] {
    width: 140px;
    padding: 6px 8px;
    background: var(--control-bg-color);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    color: var(--text-color);
    font-size: 0.9rem;
    transition: border-color 0.2s;
}

.setting-control input[type="number"]:focus,
.setting-control input[type="text"]:focus {
    border-color: var(--primary-color);
    outline: none;
}

/* Select Dropdowns */
.setting-control select {
    width: 140px;
    padding: 6px 24px 6px 8px;
    background: var(--control-bg-color);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    color: var(--text-color);
    font-size: 0.9rem;
    appearance: none;
    cursor: pointer;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%23ffffff' d='M2 4l4 4 4-4'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: right 8px center;
}

.setting-control select:focus {
    border-color: var(--primary-color);
    outline: none;
}

/* Tooltips */
.setting-control[title] {
    position: relative;
}

.setting-control[title]:hover:after {
    content: attr(title);
    position: absolute;
    right: calc(100% + 10px);
    top: 50%;
    transform: translateY(-50%);
    background: var(--tooltip-bg);
    color: var(--text-color);
    padding: 6px 10px;
    border-radius: 4px;
    font-size: 0.8rem;
    white-space: nowrap;
    z-index: 1000;
    pointer-events: none;
}

/* Error States */
.setting-control.error input,
.setting-control.error select {
    border-color: var(--error-color);
}

.error-message {
    color: var(--error-color);
    font-size: 0.8rem;
    margin-top: 4px;
}

/* Responsive Design */
@media (max-width: 768px) {
    #control-panel {
        width: 100%;
        max-width: none;
        top: auto;
        bottom: 0;
        right: 0;
        border-radius: 12px 12px 0 0;
        max-height: 80vh;
    }

    .setting-control {
        flex-direction: column;
        align-items: flex-start;
    }

    .setting-control label {
        margin-bottom: 0.5rem;
    }

    .setting-control input[type="range"],
    .setting-control input[type="number"],
    .setting-control input[type="text"],
    .setting-control select {
        width: 100%;
    }
}

/* Animations */
@keyframes slideIn {
    from {
        transform: translateX(420px);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.control-panel-enter {
    animation: slideIn 0.3s ease forwards;
}

/* Action Buttons */
.action-button {
    display: block;
    width: 100%;
    padding: 10px 15px;
    margin-bottom: 10px;
    background-color: var(--accent-color);
    color: var(--text-light);
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease, transform 0.2s ease;
    text-align: center;
}

.action-button:hover {
    background-color: var(--accent-hover);
    transform: translateY(-1px);
}

.action-button:active {
    transform: translateY(1px);
}

.action-button:disabled {
    background-color: var(--accent-disabled);
    cursor: not-allowed;
    opacity: 0.7;
}

.randomize-btn {
    background-color: var(--accent-color);
}

.action-section {
    margin-bottom: 15px;
}
----
ui/ModularControlPanel.ts
import { SettingsStore } from '../state/SettingsStore';
import { formatSettingName } from '../types/settings/utils';
import { createLogger, createErrorMetadata } from '../core/logger';
import { platformManager } from '../platform/platformManager';
import { nostrAuth } from '../services/NostrAuthService';
import { EventEmitter } from '../utils/eventEmitter';
import { settingsMap, SettingControl } from './controlPanelConfig';
import { ValidationErrorDisplay } from '../components/settings/ValidationErrorDisplay';
import './ModularControlPanel.css';
import { VisualizationController } from '../rendering/VisualizationController';

const logger = createLogger('ModularControlPanel');

interface SectionConfig {
    id: string;
    title: string;
    isDetached: boolean;
    position?: { x: number; y: number };
    size?: { width: number; height: number };
    isCollapsed: boolean;
    isAdvanced: boolean;
}

export interface ModularControlPanelEvents {
    'settings:ready': null;
    'settings:updated': { path: string; value: any };
}

export class ModularControlPanel extends EventEmitter<ModularControlPanelEvents> {
    private static instance: ModularControlPanel | null = null;
    private readonly container: HTMLDivElement;
    private readonly toggleButton: HTMLButtonElement;
    private readonly settingsStore: SettingsStore;
    private readonly validationDisplay: ValidationErrorDisplay;
    private readonly unsubscribers: Array<() => void> = [];
    private readonly sections: Map<string, SectionConfig> = new Map();
    private updateTimeout: number | null = null;
    private isInitialized: boolean = false;

    private constructor(parentElement: HTMLElement) {
        super();
        this.settingsStore = SettingsStore.getInstance();
        
        // Create toggle button first
        this.toggleButton = document.createElement('button');
        this.toggleButton.className = 'panel-toggle-btn';
        this.toggleButton.innerHTML = '⚙️';
        this.toggleButton.onclick = () => this.toggle();
        parentElement.appendChild(this.toggleButton);

        // Create main container
        const existingContainer = document.getElementById('control-panel');
        if (!existingContainer) {
            throw new Error('Could not find #control-panel element');
        }
        this.container = existingContainer as HTMLDivElement;
        this.container.innerHTML = ''; // Clear existing content

        // Initialize validation error display
        this.validationDisplay = new ValidationErrorDisplay(this.container);

        // Set initial visibility based on platform
        this.updateVisibilityForPlatform();

        // Listen for platform changes
        platformManager.on('platformchange', () => {
            this.updateVisibilityForPlatform();
        });
        platformManager.on('xrmodechange', (isXRMode: boolean) => {
            isXRMode ? this.hide() : this.updateVisibilityForPlatform();
        });

        this.initializeComponents();
    }

    private async initializeComponents(): Promise<void> {
        try {
            // Initialize nostr auth if available
            if (typeof nostrAuth !== 'undefined') {
                await this.initializeNostrAuth();
            }

            // Add custom action buttons
            await this.createActionsSection();

            // Initialize settings
            await this.initializeSettings();
            await this.initializePanel();
            this.initializeDragAndDrop();
            
            this.isInitialized = true;
            this.emit('settings:ready', null);
            
            logger.info('ModularControlPanel fully initialized');
        } catch (error) {
            logger.error('Failed to initialize components:', createErrorMetadata(error));
        }
    }

    private async initializeSettings(): Promise<void> {
        try {
            await this.settingsStore.initialize();
            logger.info('Settings initialized successfully');
        } catch (error) {
            logger.error('Failed to initialize settings:', createErrorMetadata(error));
            throw error;
        }
    }

    private async initializePanel(): Promise<void> {
        try {
            // Create main categories container
            const categoriesContainer = document.createElement('div');
            categoriesContainer.className = 'settings-categories';
            
            // Create sections for each main category in settingsMap
            for (const [category, settings] of Object.entries(settingsMap)) {
                const sectionConfig: SectionConfig = {
                    id: category,
                    title: formatSettingName(category),
                    isDetached: false,
                    isCollapsed: false,
                    isAdvanced: this.isAdvancedCategory(category)
                };
                
                this.sections.set(category, sectionConfig);
                const section = await this.createSection(sectionConfig, settings);
                categoriesContainer.appendChild(section);
            }
            
            this.container.appendChild(categoriesContainer);
            logger.info('Panel UI initialized');
        } catch (error) {
            logger.error('Failed to initialize panel:', createErrorMetadata(error));
            throw error;
        }
    }

    private initializeDragAndDrop(): void {
        this.container.addEventListener('mousedown', (e: MouseEvent) => {
            const target = e.target as HTMLElement;
            const section = target.closest('.settings-section') as HTMLElement;
            
            if (!section || !target.classList.contains('section-header')) return;
            
            const sectionId = section.dataset.sectionId;
            if (!sectionId) return;

            const sectionConfig = this.sections.get(sectionId);
            if (!sectionConfig) return;

            if (sectionConfig.isDetached) {
                this.startDragging(section, e);
            }
        });
    }

    private startDragging(element: HTMLElement, e: MouseEvent): void {
        const rect = element.getBoundingClientRect();
        const offsetX = e.clientX - rect.left;
        const offsetY = e.clientY - rect.top;

        const moveHandler = (e: MouseEvent) => {
            const x = e.clientX - offsetX;
            const y = e.clientY - offsetY;
            
            element.style.left = `${x}px`;
            element.style.top = `${y}px`;
            
            const sectionId = element.dataset.sectionId;
            if (sectionId) {
                const config = this.sections.get(sectionId);
                if (config) {
                    config.position = { x, y };
                }
            }
        };

        const upHandler = () => {
            document.removeEventListener('mousemove', moveHandler);
            document.removeEventListener('mouseup', upHandler);
        };

        document.addEventListener('mousemove', moveHandler);
        document.addEventListener('mouseup', upHandler);
    }

    private async initializeNostrAuth(): Promise<void> {
        const authSection = document.createElement('div');
        authSection.className = 'settings-section auth-section';
        
        const header = document.createElement('div');
        header.className = 'section-header';
        header.innerHTML = '<h4>Authentication</h4>';
        authSection.appendChild(header);

        const content = document.createElement('div');
        content.className = 'section-content';

        const loginBtn = document.createElement('button');
        loginBtn.className = 'nostr-login-btn';
        loginBtn.textContent = 'Login with Nostr';
        
        const statusDisplay = document.createElement('div');
        statusDisplay.className = 'auth-status';
        statusDisplay.innerHTML = '<div class="not-authenticated">Not authenticated</div>';
        
        content.appendChild(loginBtn);
        content.appendChild(statusDisplay);
        authSection.appendChild(content);

        this.container.insertBefore(authSection, this.container.firstChild);

        // Set up login button click handler
        loginBtn.onclick = async () => {
            try {
                loginBtn.disabled = true;
                loginBtn.textContent = 'Connecting...';
                
                const result = await nostrAuth.login();
                if (!result.authenticated) {
                    throw new Error(result.error || 'Authentication failed');
                }
            } catch (error) {
                logger.error('Nostr login failed:', createErrorMetadata(error));
                const errorMsg = document.createElement('div');
                errorMsg.className = 'auth-error';
                
                let errorText = 'Login failed';
                if (error instanceof Error) {
                    if (error.message.includes('Alby extension not found')) {
                        errorText = 'Please install Alby extension to use Nostr login';
                    } else if (error.message.includes('Failed to get public key')) {
                        errorText = 'Please allow access to your Nostr public key';
                    } else {
                        errorText = error.message;
                    }
                }
                
                errorMsg.textContent = errorText;
                content.appendChild(errorMsg);
                setTimeout(() => errorMsg.remove(), 5000);
            } finally {
                loginBtn.disabled = false;
            }
        };

        // Subscribe to auth state changes
        this.unsubscribers.push(
            nostrAuth.onAuthStateChanged(({ authenticated, user }) => {
                if (authenticated && user) {
                    loginBtn.textContent = 'Logout';
                    loginBtn.onclick = async () => {
                        try {
                            loginBtn.disabled = true;
                            loginBtn.textContent = 'Logging out...';
                            await nostrAuth.logout();
                        } catch (error) {
                            logger.error('Logout failed:', createErrorMetadata(error));
                        }
                    };
                    statusDisplay.innerHTML = `
                        <div class="user-info">
                            <div class="pubkey">${user.pubkey.substring(0, 8)}...</div>
                            <div class="role">${user.isPowerUser ? 'Power User' : 'Basic User'}</div>
                        </div>
                    `;
                } else {
                    loginBtn.textContent = 'Login with Nostr';
                    loginBtn.onclick = () => nostrAuth.login();
                    statusDisplay.innerHTML = '<div class="not-authenticated">Not authenticated</div>';
                }
                loginBtn.disabled = false;
            })
        );

        await nostrAuth.initialize();
    }

    private async createActionsSection(): Promise<void> {
        const actionsSection = document.createElement('div');
        actionsSection.className = 'settings-section action-section';
        
        const header = document.createElement('div');
        header.className = 'section-header';
        header.innerHTML = '<h4>Actions</h4>';
        actionsSection.appendChild(header);

        const content = document.createElement('div');
        content.className = 'section-content';

        // Create randomize nodes button
        const randomizeBtn = document.createElement('button');
        randomizeBtn.className = 'action-button randomize-btn';
        randomizeBtn.textContent = 'Randomly Distribute Nodes';
        randomizeBtn.title = 'Randomly distribute all nodes in 3D space';
        
        // Add event listener
        randomizeBtn.onclick = () => {
            try {
                randomizeBtn.disabled = true;
                randomizeBtn.textContent = 'Distributing...';
                
                // Call the visualization controller to randomize nodes
                const controller = VisualizationController.getInstance();
                controller.randomizeNodePositions(10); // Use a smaller radius of 10 units to prevent explosion
                
                setTimeout(() => {
                    randomizeBtn.disabled = false;
                    randomizeBtn.textContent = 'Randomly Distribute Nodes';
                }, 1500);
            } catch (error) {
                console.error('Failed to randomize nodes:', error);
                randomizeBtn.disabled = false;
                randomizeBtn.textContent = 'Randomly Distribute Nodes';
            }
        };
        
        content.appendChild(randomizeBtn);
        actionsSection.appendChild(content);

        // Add the actions section to the container
        this.container.appendChild(actionsSection);
    }

    private isAdvancedCategory(category: string): boolean {
        const advancedCategories = ['physics', 'rendering', 'debug', 'network'];
        return advancedCategories.includes(category.toLowerCase());
    }

    private async createSection(config: SectionConfig, settings: Record<string, SettingControl | Record<string, SettingControl>>): Promise<HTMLElement> {
        const section = document.createElement('div');
        section.className = `settings-section ${config.isAdvanced ? 'advanced' : 'basic'}`;
        section.dataset.sectionId = config.id;
        
        if (config.isDetached) {
            section.classList.add('detached');
            if (config.position) {
                section.style.left = `${config.position.x}px`;
                section.style.top = `${config.position.y}px`;
            }
        }

        const header = document.createElement('div');
        header.className = 'section-header';
        
        const title = document.createElement('h4');
        title.textContent = config.title;
        header.appendChild(title);

        const controls = document.createElement('div');
        controls.className = 'section-controls';

        const detachBtn = document.createElement('button');
        detachBtn.className = 'section-control detach';
        detachBtn.innerHTML = config.isDetached ? '📌' : '📎';
        detachBtn.title = config.isDetached ? 'Dock section' : 'Detach section';
        detachBtn.onclick = (e) => {
            e.stopPropagation();
            this.toggleDetached(config.id);
        };
        controls.appendChild(detachBtn);

        const collapseBtn = document.createElement('button');
        collapseBtn.className = 'section-control collapse';
        collapseBtn.innerHTML = config.isCollapsed ? '▼' : '▲';
        collapseBtn.onclick = (e) => {
            e.stopPropagation();
            this.toggleCollapsed(config.id);
        };
        controls.appendChild(collapseBtn);

        header.appendChild(controls);
        section.appendChild(header);

        const content = document.createElement('div');
        content.className = 'section-content';
        if (config.isCollapsed) {
            content.style.display = 'none';
        }

        // Create subsections for each group of settings
        for (const [subsectionKey, subsectionSettings] of Object.entries(settings)) {
            const subsection = await this.createSubsection(subsectionKey, subsectionSettings);
            content.appendChild(subsection);
        }

        section.appendChild(content);
        return section;
    }

    private async createSubsection(title: string, settings: Record<string, SettingControl> | SettingControl): Promise<HTMLElement> {
        const subsection = document.createElement('div');
        subsection.className = 'settings-subsection';

        const header = document.createElement('h3');
        header.textContent = formatSettingName(title);
        header.className = 'settings-subsection-header';
        subsection.appendChild(header);

        if (this.isSettingControl(settings)) {
            // Single setting
            const control = await this.createSettingControl(title, settings);
            subsection.appendChild(control);
        } else {
            // Group of settings
            for (const [key, setting] of Object.entries(settings)) {
                const control = await this.createSettingControl(key, setting);
                subsection.appendChild(control);
            }
        }

        return subsection;
    }

    private isSettingControl(value: any): value is SettingControl {
        return value && typeof value === 'object' && 'type' in value;
    }

    private async createSettingControl(key: string, setting: SettingControl): Promise<HTMLElement> {
        const container = document.createElement('div');
        container.className = 'setting-control';
        container.dataset.settingPath = key;

        if (setting.tooltip) {
            container.title = setting.tooltip;
        }

        const label = document.createElement('label');
        label.textContent = setting.label;
        container.appendChild(label);

        const control = await this.createInputElement(key, setting);
        container.appendChild(control);

        return container;
    }

    private async createInputElement(path: string, setting: SettingControl): Promise<HTMLElement> {
        const currentValue = this.settingsStore.get(path);
        let input: HTMLElement;

        switch (setting.type) {
            case 'slider': {
                const slider = document.createElement('input');
                slider.type = 'range';
                slider.min = setting.min?.toString() ?? '0';
                slider.max = setting.max?.toString() ?? '1';
                slider.step = setting.step?.toString() ?? '0.1';
                slider.value = (currentValue ?? slider.min).toString();
                slider.onchange = (e) => {
                    const target = e.target as HTMLInputElement;
                    this.updateSetting(path, parseFloat(target.value));
                };
                input = slider;
                break;
            }

            case 'toggle': {
                const toggleContainer = document.createElement('div');
                toggleContainer.className = 'toggle-switch';
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.checked = Boolean(currentValue);
                checkbox.onchange = (e) => {
                    const target = e.target as HTMLInputElement;
                    this.updateSetting(path, target.checked);
                };
                
                const slider = document.createElement('span');
                slider.className = 'slider';
                
                toggleContainer.appendChild(checkbox);
                toggleContainer.appendChild(slider);
                input = toggleContainer;
                break;
            }

            case 'color': {
                const colorInput = document.createElement('input');
                colorInput.type = 'color';
                colorInput.value = (currentValue as string) ?? '#ffffff';
                colorInput.onchange = (e) => {
                    const target = e.target as HTMLInputElement;
                    this.updateSetting(path, target.value);
                };
                input = colorInput;
                break;
            }

            case 'select': {
                const select = document.createElement('select');
                setting.options?.forEach(option => {
                    const optionElement = document.createElement('option');
                    optionElement.value = option;
                    optionElement.textContent = formatSettingName(option);
                    select.appendChild(optionElement);
                });
                select.value = (currentValue as string) ?? setting.options?.[0] ?? '';
                select.onchange = (e) => {
                    const target = e.target as HTMLSelectElement;
                    this.updateSetting(path, target.value);
                };
                input = select;
                break;
            }

            case 'number': {
                const numberInput = document.createElement('input');
                numberInput.type = 'number';
                numberInput.min = setting.min?.toString() ?? '0';
                if (setting.max !== undefined) numberInput.max = setting.max.toString();
                numberInput.step = setting.step?.toString() ?? '1';
                numberInput.value = (currentValue ?? 0).toString();
                numberInput.onchange = (e) => {
                    const target = e.target as HTMLInputElement;
                    this.updateSetting(path, parseFloat(target.value));
                };
                input = numberInput;
                break;
            }

            case 'text':
            default: {
                const textInput = document.createElement('input');
                textInput.type = 'text';
                textInput.value = (currentValue ?? '').toString();
                textInput.onchange = (e) => {
                    const target = e.target as HTMLInputElement;
                    this.updateSetting(path, target.value);
                };
                input = textInput;
                break;
            }
        }

        return input;
    }

    private updateSetting(path: string, value: any): void {
        try {
            const currentValue = this.settingsStore.get(path);
            
            let processedValue = value;
            if (Array.isArray(currentValue)) {
                processedValue = value.map((v: any, i: number) => {
                    const originalValue = currentValue[i];
                    if (typeof originalValue === 'number') {
                        const parsed = parseFloat(v);
                        return isNaN(parsed) ? originalValue : parsed;
                    }
                    return v;
                });
            } else if (typeof currentValue === 'number') {
                const parsed = parseFloat(value);
                processedValue = isNaN(parsed) ? currentValue : parsed;
            }

            this.settingsStore.set(path, processedValue);
            this.emit('settings:updated', { path, value: processedValue });
        } catch (error) {
            logger.error(`Failed to update setting ${path}:`, createErrorMetadata(error));
            
            // Create an error element
            const errorElement = document.createElement('div');
            errorElement.className = 'error-message';
            errorElement.textContent = error instanceof Error ? error.message : 'Unknown error occurred';
            
            const control = this.container.querySelector(`[data-setting-path="${path}"]`);
            if (control) {
                // Add error class to the control
                control.classList.add('error');
                
                // Add error message
                control.appendChild(errorElement);
                
                // Remove error after 5 seconds
                setTimeout(() => {
                    control.classList.remove('error');
                    errorElement.remove();
                }, 5000);
                
                // Revert the input value
                const input = control.querySelector('input, select') as HTMLInputElement;
                if (input) {
                    const currentValue = this.settingsStore.get(path);
                    if (Array.isArray(currentValue)) {
                        const inputs = control.querySelectorAll('.array-item') as NodeListOf<HTMLInputElement>;
                        inputs.forEach((input, i) => {
                            input.value = currentValue[i].toString();
                        });
                    } else {
                        input.value = currentValue?.toString() || '';
                    }
                }
            }
        }
    }

    private toggleDetached(sectionId: string): void {
        const config = this.sections.get(sectionId);
        if (!config) return;

        config.isDetached = !config.isDetached;
        const section = this.container.querySelector(`[data-section-id="${sectionId}"]`);
        if (section) {
            section.classList.toggle('detached');
            if (config.isDetached) {
                const rect = section.getBoundingClientRect();
                config.position = { x: rect.left, y: rect.top };
            } else {
                (section as HTMLElement).removeAttribute('style');
            }
        }
    }

    private toggleCollapsed(sectionId: string): void {
        const config = this.sections.get(sectionId);
        if (!config) return;

        config.isCollapsed = !config.isCollapsed;
        const section = this.container.querySelector(`[data-section-id="${sectionId}"]`);
        if (section) {
            const content = section.querySelector('.section-content');
            if (content) {
                content.classList.toggle('collapsed');
                (content as HTMLElement).style.display = config.isCollapsed ? 'none' : '';
            }
            const collapseBtn = section.querySelector('.collapse') as HTMLElement;
            if (collapseBtn) {
                collapseBtn.innerHTML = config.isCollapsed ? '▼' : '▲';
            }
        }
    }

    public show(): void {
        this.container.classList.remove('hidden');
        this.toggleButton.classList.add('panel-open');
    }

    public hide(): void {
        this.container.classList.add('hidden');
        this.toggleButton.classList.remove('panel-open');
    }

    public toggle(): void {
        this.container.classList.toggle('hidden');
        this.toggleButton.classList.toggle('panel-open');
    }

    public isReady(): boolean {
        return this.isInitialized;
    }

    private updateVisibilityForPlatform(): void {
        if (platformManager.isQuest() || platformManager.isXRMode) {
            this.hide();
        } else {
            this.show();
        }
    }

    public static getInstance(): ModularControlPanel {
        if (!ModularControlPanel.instance) {
            ModularControlPanel.instance = new ModularControlPanel(document.body);
        }
        return ModularControlPanel.instance;
    }

    public dispose(): void {
        this.unsubscribers.forEach(unsubscribe => unsubscribe());
        this.validationDisplay.dispose();
        if (this.updateTimeout !== null) {
            window.clearTimeout(this.updateTimeout);
        }
        this.container.remove();
        this.toggleButton.remove();
        ModularControlPanel.instance = null;
    }
}

// Export the class as default as well to maintain compatibility
export default ModularControlPanel;
----
ui/controlPanelConfig.ts
// Interface for UI control settings
export interface SettingControl {
    label: string;
    type: 'slider' | 'toggle' | 'color' | 'select' | 'number' | 'text';
    options?: string[]; // For select controls
    min?: number;      // For sliders and number inputs
    max?: number;      // For sliders and number inputs
    step?: number;     // For sliders and number inputs
    tooltip?: string;
}

export const settingsMap: Record<string, Record<string, SettingControl | Record<string, SettingControl>>> = {
    visualization: {
        nodes: {
            baseColor: { label: 'Base Color', type: 'color', tooltip: 'The base color of the nodes.' },
            metalness: { label: 'Metalness', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The metalness of the nodes.' },
            opacity: { label: 'Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the nodes.' },
            roughness: { label: 'Roughness', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The roughness of the nodes.' },
            sizeRange: { label: 'Size Range', type: 'text', tooltip: 'Min and max size of the nodes (e.g., "200.0, 700.0").' },
            quality: { label: 'Quality', type: 'select', options: ['low', 'medium', 'high'], tooltip: 'The quality level of the node geometry.' },
            enableInstancing: { label: 'Enable Instancing', type: 'toggle', tooltip: 'Enable instanced rendering for improved performance.' },
            enableHologram: { label: 'Enable Hologram', type: 'toggle', tooltip: 'Enable the hologram effect around nodes.' },
            enableMetadataShape: { label: 'Enable Metadata Shape', type: 'toggle', tooltip: 'Enable a shape based on node metadata.' },
            enableMetadataVisualization: { label: 'Enable Metadata Visualization', type: 'toggle', tooltip: 'Enable visualization of node metadata.' },
        },
        edges: {
            arrowSize: { label: 'Arrow Size', type: 'number', min: 0, tooltip: 'The size of the arrowheads on edges.' },
            baseWidth: { label: 'Base Width', type: 'number', min: 0, tooltip: 'The base width of the edges.' },
            color: { label: 'Color', type: 'color', tooltip: 'The color of the edges.' },
            enableArrows: { label: 'Enable Arrows', type: 'toggle', tooltip: 'Enable arrowheads on edges.' },
            opacity: { label: 'Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the edges.' },
            widthRange: { label: 'Width Range', type: 'text', tooltip: 'Min and max width of the edges (e.g., "2.0, 3.0").' },
            quality: { label: 'Quality', type: 'select', options: ['low', 'medium', 'high'], tooltip: 'The quality level of the edge geometry.' },
            enableFlowEffect: { label: 'Flow Effect', type: 'toggle', tooltip: 'Enable flowing animation on edges.' },
            flowSpeed: { label: 'Flow Speed', type: 'slider', min: 0, max: 2, step: 0.1, tooltip: 'Speed of the flow animation.' },
            flowIntensity: { label: 'Flow Intensity', type: 'slider', min: 0, max: 1, step: 0.1, tooltip: 'Intensity of the flow effect.' },
            glowStrength: { label: 'Glow Strength', type: 'slider', min: 0, max: 1, step: 0.1, tooltip: 'Strength of the edge glow effect.' },
            distanceIntensity: { label: 'Distance Intensity', type: 'slider', min: 0, max: 1, step: 0.1, tooltip: 'How edge appearance changes with distance.' },
            useGradient: { label: 'Use Gradient', type: 'toggle', tooltip: 'Enable gradient coloring on edges.' },
            gradientColors: { label: 'Gradient Colors', type: 'text', tooltip: 'Start and end colors for the gradient (e.g., "#ff0000, #00ff00").' },
        },
        physics: {
            attractionStrength: { label: 'Attraction Strength', type: 'slider', min: 0, max: 0.1, step: 0.001, tooltip: 'The strength of the attraction force between connected nodes.' },
            boundsSize: { label: 'Bounds Size', type: 'number', min: 0, tooltip: 'The size of the bounding box that contains the nodes.' },
            collisionRadius: { label: 'Collision Radius', type: 'number', min: 0, tooltip: 'The radius within which nodes will collide.' },
            damping: { label: 'Damping', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The damping factor that slows down node movement.' },
            enableBounds: { label: 'Enable Bounds', type: 'toggle', tooltip: 'Enable a bounding box to contain the nodes.' },
            enabled: { label: 'Enabled', type: 'toggle', tooltip: 'Enable/disable the physics simulation.' },
            iterations: { label: 'Iterations', type: 'number', min: 1, tooltip: 'The number of physics simulation iterations per frame.' },
            maxVelocity: { label: 'Max Velocity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The maximum velocity of the nodes.' },
            repulsionStrength: { label: 'Repulsion Strength', type: 'number', min: 0, tooltip: 'The strength of the repulsion force between nodes.' },
            springStrength: { label: 'Spring Strength', type: 'slider', min: 0, max: 0.1, step: 0.001, tooltip: 'The strength of the spring force that keeps connected nodes together.' },
            repulsionDistance: { label: 'Repulsion Distance', type: 'slider', min: 0, max: 100, step: 0.1, tooltip: 'The distance at which nodes start repelling each other.' },
            massScale: { label: 'Mass Scale', type: 'slider', min: 0, max: 10, step: 0.1, tooltip: 'Scales the mass of nodes, affecting their inertia.' },
            boundaryDamping: { label: 'Boundary Damping', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'Damping factor applied when nodes hit the boundary.' },

        },
        rendering: {
            ambientLightIntensity: { label: 'Ambient Light', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The intensity of the ambient light.' },
            backgroundColor: { label: 'Background Color', type: 'color', tooltip: 'The background color of the scene.' },
            directionalLightIntensity: { label: 'Directional Light', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The intensity of the directional light.' },
            enableAmbientOcclusion: { label: 'Ambient Occlusion', type: 'toggle', tooltip: 'Enable ambient occlusion for more realistic shadows.' },
            enableAntialiasing: { label: 'Antialiasing', type: 'toggle', tooltip: 'Enable antialiasing for smoother edges.' },
            enableShadows: { label: 'Shadows', type: 'toggle', tooltip: 'Enable shadows (can be performance-intensive).' },
            environmentIntensity: { label: 'Environment Light', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The intensity of the environment lighting.' },
            shadowMapSize: { label: 'Shadow Map Size', type: 'select', options: ['1024', '2048', '4096'], tooltip: 'Resolution of shadow maps.' },
            shadowBias: { label: 'Shadow Bias', type: 'slider', min: -0.01, max: 0.01, step: 0.0001, tooltip: 'Bias value to prevent shadow acne.' },
            context: { label: 'Context', type: 'select', options: ['desktop', 'ar'], tooltip: 'Rendering context (desktop or AR).' },
        },
        animations: {
            enableMotionBlur: { label: 'Motion Blur', type: 'toggle', tooltip: 'Enable motion blur for smoother animations.' },
            enableNodeAnimations: { label: 'Node Animations', type: 'toggle', tooltip: 'Enable animations on the nodes.' },
            motionBlurStrength: { label: 'Motion Blur Strength', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The strength of the motion blur effect.' },
            selectionWaveEnabled: { label: "Selection Wave", type: "toggle", tooltip: 'Enable wave effect on node selection.' },
            pulseEnabled: { label: "Pulse", type: "toggle", tooltip: 'Enable node pulsing.' },
            pulseSpeed: { label: "Pulse Speed", type: 'slider', min: 0, max: 2, step: 0.1, tooltip: 'Speed of node pulsing.' },
            pulseStrength: { label: "Pulse Strength", type: 'slider', min: 0, max: 1, step: 0.1, tooltip: 'Strength of node pulsing.' },
            waveSpeed: { label: "Wave Speed", type: 'slider', min: 0, max: 2, step: 0.1, tooltip: 'Speed of the selection wave.' },
        },
        labels: {
            desktopFontSize: { label: 'Font Size', type: 'number', min: 1, tooltip: 'The font size for labels on desktop.' },
            enableLabels: { label: 'Enable Labels', type: 'toggle', tooltip: 'Enable/disable node labels.' },
            textColor: { label: 'Text Color', type: 'color', tooltip: 'The color of the label text.' },
            textOutlineColor: { label: 'Outline Color', type: 'color', tooltip: 'The color of the label text outline.' },
            textOutlineWidth: { label: 'Outline Width', type: 'number', min: 0, tooltip: 'The width of the label text outline.' },
            textResolution: { label: 'Resolution', type: 'number', min: 1, tooltip: 'The resolution of the label text.' },
            textPadding: { label: 'Padding', type: 'number', min: 0, tooltip: 'Padding around label text.' },
            billboardMode: { label: 'Billboard Mode', type: 'select', options: ['camera', 'vertical'], tooltip: 'Orientation of labels.' },
        },
        bloom: {
            edgeBloomStrength: { label: 'Edge Bloom', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The strength of the bloom effect on edges.' },
            enabled: { label: 'Enable Bloom', type: 'toggle', tooltip: 'Enable/disable the bloom effect.' },
            environmentBloomStrength: { label: 'Environment Bloom', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The strength of the bloom effect on the environment.' },
            nodeBloomStrength: { label: 'Node Bloom', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The strength of the bloom effect on nodes.' },
            radius: { label: 'Radius', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The radius of the bloom effect.' },
            strength: { label: 'Strength', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The overall strength of the bloom effect.' },
            threshold: { label: 'Threshold', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The brightness threshold for the bloom effect.' },
        },
        hologram: {
            ringCount: { label: 'Ring Count', type: 'number', min: 0, tooltip: 'The number of rings in the hologram effect.' },
            ringColor: { label: 'Ring Color', type: 'color', tooltip: 'The color of the hologram rings.' },
            ringOpacity: { label: 'Ring Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the hologram rings.' },
            sphereSizes: { label: 'Sphere Sizes', type: 'text', tooltip: 'Sizes of the hologram spheres (e.g., "40.0, 80.0").' },
            ringRotationSpeed: { label: 'Ring Speed', type: 'number', min: 0, tooltip: 'The rotation speed of the hologram rings.' },
            enableBuckminster: { label: 'Buckminster', type: 'toggle', tooltip: 'Enable the Buckminsterfullerene hologram effect.' },
            buckminsterSize: { label: 'Buckminster Size', type: 'number', min: 0, tooltip: 'The size of the Buckminsterfullerene hologram.' },
            buckminsterOpacity: { label: 'Buckminster Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the Buckminsterfullerene hologram.' },
            enableGeodesic: { label: 'Geodesic', type: 'toggle', tooltip: 'Enable the geodesic sphere hologram effect.' },
            geodesicSize: { label: 'Geodesic Size', type: 'number', min: 0, tooltip: 'The size of the geodesic sphere hologram.' },
            geodesicOpacity: { label: 'Geodesic Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the geodesic sphere hologram.' },
            enableTriangleSphere: { label: 'Triangle Sphere', type: 'toggle', tooltip: 'Enable the triangle sphere hologram effect.' },
            triangleSphereSize: { label: 'Triangle Size', type: 'number', min: 0, tooltip: 'The size of the triangle sphere hologram.' },
            triangleSphereOpacity: { label: 'Triangle Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the triangle sphere hologram.' },
            globalRotationSpeed: { label: 'Global Speed', type: 'number', min: 0, tooltip: 'The global rotation speed of the hologram.' },
        },
    },
    system: {
        websocket: {
            reconnectAttempts: { label: 'Reconnect Attempts', type: 'number', min: 0, tooltip: 'Number of reconnection attempts.' },
            reconnectDelay: { label: 'Reconnect Delay', type: 'number', min: 1000, tooltip: 'Delay between reconnection attempts (ms).' },
            binaryChunkSize: { label: 'Binary Chunk Size', type: 'number', min: 1, tooltip: 'Size of binary message chunks.' },
            compressionEnabled: { label: 'Enable Compression', type: 'toggle', tooltip: 'Enable WebSocket message compression.' },
            compressionThreshold: { label: 'Compression Threshold', type: 'number', min: 0, tooltip: 'Message size threshold for compression.' },
            updateRate: { label: 'Update Rate', type: 'number', min: 1, tooltip: 'Rate of WebSocket updates (Hz).' },
        },
        debug: {
            enabled: { label: 'Enable Debug', type: 'toggle', tooltip: 'Enable debug mode.' },
            enableDataDebug: { label: 'Data Debug', type: 'toggle', tooltip: 'Enable data debugging.' },
            enableWebsocketDebug: { label: 'WebSocket Debug', type: 'toggle', tooltip: 'Enable WebSocket debugging.' },
            logBinaryHeaders: { label: 'Log Binary Headers', type: 'toggle', tooltip: 'Log binary message headers.' },
            logFullJson: { label: 'Log Full JSON', type: 'toggle', tooltip: 'Log complete JSON messages.' },
            // New debug categories
            enablePhysicsDebug: { label: 'Physics Debug', type: 'toggle', tooltip: 'Enable physics/force calculations debugging.' },
            enableNodeDebug: { label: 'Node Debug', type: 'toggle', tooltip: 'Enable node position/velocity tracking.' },
            enableShaderDebug: { label: 'Shader Debug', type: 'toggle', tooltip: 'Enable shader compilation/linking debugging.' },
            enableMatrixDebug: { label: 'Matrix Debug', type: 'toggle', tooltip: 'Enable matrix transformations debugging.' },
            enablePerformanceDebug: { label: 'Performance Debug', type: 'toggle', tooltip: 'Enable performance monitoring.' },
        },
    },
};
----
websocket/websocketService.ts
import { createLogger, createErrorMetadata, createMessageMetadata, createDataMetadata } from '../core/logger';
import { buildWsUrl } from '../core/api';
import { debugState } from '../core/debugState';
import { Vector3 } from 'three';
import pako from 'pako';
import { UpdateThrottler, validateAndFixVector3 } from '../core/utils';

const logger = createLogger('WebSocketService');

// Throttle for debug logging to prevent excessive logs
let lastDebugLogTime = 0;
const DEBUG_LOG_THROTTLE_MS = 1000; // Only log once per second

// Position update deadband threshold (only update if position changes by this amount)
const POSITION_DEADBAND = 0.15; // Units in world space (0.15 = 15cm) - Increased from 0.05

// Helper for conditional debug logging
function debugLog(message: string, ...args: any[]) {
    if (debugState.isWebsocketDebugEnabled()) {
        const now = Date.now();
        if (now - lastDebugLogTime > DEBUG_LOG_THROTTLE_MS) {
            lastDebugLogTime = now;
            logger.debug(message, ...args);
        }
    }
}

// Compression settings
const COMPRESSION_THRESHOLD = 1024; // Only compress messages larger than 1KB

// Binary format constants
const BYTES_PER_NODE = 26; // 2 (ID) + 12 (position) + 12 (velocity)

// Maximum value for u16 node IDs
const MAX_U16_VALUE = 65535;

enum ConnectionState {
    DISCONNECTED = 'disconnected',
    CONNECTING = 'connecting',
    CONNECTED = 'connected',
    RECONNECTING = 'reconnecting',
    FAILED = 'failed'
}

// Interface for node updates from user interaction
interface NodeUpdate {
    id: string;          // Node ID (string in metadata, but must be converted to u16 index for binary protocol)
    position: Vector3;   // Current position (Three.js Vector3 object)
    velocity?: Vector3;  // Optional velocity (Three.js Vector3 object)
    metadata?: {
        name?: string;
        lastModified?: number;
        links?: string[];
        references?: string[];
        fileSize?: number;
        hyperlinkCount?: number;
    };
}

// Interface matching server's binary protocol format (26 bytes per node):
// - id: 2 bytes (u16)
// - position: 12 bytes (3xf32)
// - velocity: 12 bytes (3xf32)
interface BinaryNodeData {
    id: number;
    position: Vector3;   // Three.js Vector3 object
    velocity: Vector3;   // Three.js Vector3 object
}

type BinaryMessageCallback = (nodes: BinaryNodeData[]) => void;

export class WebSocketService {
    private static instance: WebSocketService | null = null;
    private ws: WebSocket | null = null;
    private binaryMessageCallback: BinaryMessageCallback | null = null;
    private reconnectTimeout: number | null = null;
    private connectionState: ConnectionState = ConnectionState.DISCONNECTED;
    private reconnectAttempts: number = 0;
    private readonly _maxReconnectAttempts: number = 5;
    // Keep track of node ID to numeric index mapping for binary protocol
    private nodeNameToIndexMap: Map<string, number> = new Map();
    private nextNodeIndex: number = 0;
    private readonly initialReconnectDelay: number = 1000; // 1 second (reduced from 5000)
    private readonly maxReconnectDelay: number = 30000; // 30 seconds (reduced from 60s)
    private url: string = buildWsUrl(); // Initialize URL immediately
    private initialDataReceived: boolean = false;
    private connectionStatusHandler: ((status: boolean) => void) | null = null;

    // Add a debounce mechanism for node updates
    private loadingStatusHandler: ((isLoading: boolean, message?: string) => void) | null = null;
    private heartbeatInterval: number | null = null;
    private isLoading: boolean = false;
    private nodeUpdateQueue: NodeUpdate[] = [];
    private nodeUpdateTimer: number | null = null;
    private readonly NODE_UPDATE_DEBOUNCE_MS = 50; // 50ms debounce for node updates
    
    // New fields for improved throttling
    private updateThrottler = new UpdateThrottler(150); // ~6-7fps (was: 50ms = ~20fps) to reduce updates
    private lastNodePositions: Map<number, Vector3> = new Map(); // Keep track of last sent positions
    private pendingNodeUpdates: BinaryNodeData[] = [];


    private constructor() {
        // Don't automatically connect - wait for explicit connect() call
        
        // Listen for reset events (when graph data is cleared)
        window.addEventListener('graph-data-reset', () => {
            this.resetNodeIndices();
        });
    }
    
    private resetNodeIndices(): void {
        this.nodeNameToIndexMap.clear();
        this.nextNodeIndex = 0;
        logger.info('Node indices reset');
    }

    public static getInstance(): WebSocketService {
        if (!WebSocketService.instance) {
            WebSocketService.instance = new WebSocketService();
        }
        return WebSocketService.instance;
    }

    public connect(): Promise<void> {
        if (this.connectionState !== ConnectionState.DISCONNECTED) {
            // Only log this at debug level instead of warn to reduce log spam
            if (this.connectionState === ConnectionState.CONNECTED) {
                logger.info('WebSocket already connected');
                return Promise.resolve();
            }
            
            logger.info(`WebSocket in ${this.connectionState} state, attempting to reconnect...`);
            
            // If in FAILED state, reset and try again
            if (this.connectionState === ConnectionState.FAILED) {
                this.connectionState = ConnectionState.DISCONNECTED;
                this.reconnectAttempts = 0;
                return this.initializeWebSocket();
            }
            
            // If already connecting, return a promise that resolves when connected
            if (this.connectionState === ConnectionState.CONNECTING) {
                return new Promise((resolve) => {
                    let timeoutCounter = 0;
                    const checkConnection = () => {
                        if (this.connectionState === ConnectionState.CONNECTED) {
                            resolve();
                        } else if (timeoutCounter++ < 100) { // Limit to 10 seconds (100 * 100ms)
                            setTimeout(checkConnection, 100);
                        } else {
                            logger.error('Timed out waiting for connection to establish');
                            resolve(); // Resolve anyway to prevent hanging
                        }
                    };
                    checkConnection();
                });
            }
            return Promise.resolve();
        }
        return this.initializeWebSocket();
    }

    private async initializeWebSocket(): Promise<void> {
        if (this.connectionState !== ConnectionState.DISCONNECTED) {
            return;
        }

        try {
            
            if (!this.url) {
                throw new Error('No WebSocket URL available');
            }

            this.connectionState = ConnectionState.CONNECTING;
            return new Promise((resolve, reject) => {
                this.ws = new WebSocket(this.url);
                this.setupWebSocketHandlers();
                
                // Add one-time open handler to resolve the promise
                this.ws!.addEventListener('open', () => resolve(), { once: true });
                // Add one-time error handler to reject the promise
                this.ws!.addEventListener('error', (e) => reject(e), { once: true });
            });
        } catch (error) {
            logger.error('Failed to initialize WebSocket:', createErrorMetadata(error));
            this.handleReconnect();
            return Promise.reject(error);
        }
    }

    private getReconnectDelay(): number {
        // Exponential backoff with max delay
        const delay = Math.min(
            this.initialReconnectDelay * Math.pow(2, this.reconnectAttempts),
            this.maxReconnectDelay
        );
        // Add some jitter
        return delay + (Math.random() * 500); // Reduced jitter from 1000ms to 500ms
    }

    private setupWebSocketHandlers(): void {
        if (!this.ws) return;
        
        this.ws.binaryType = 'arraybuffer';

        this.ws.onopen = (): void => {
            logger.info('WebSocket connected successfully to', createMessageMetadata(this.url));
            this.connectionState = ConnectionState.CONNECTED;
            this.reconnectAttempts = 0;

            if (this.connectionStatusHandler) {
                this.connectionStatusHandler(true);
                debugLog('Connection status handler notified: connected');
            }
            
            // Set up a heartbeat to keep the connection alive
            this.setupHeartbeat();
            
            // Add delay before sending first message to ensure connection is stable
            setTimeout(() => {
                logger.info('WebSocket connected successfully, requesting initial position data');

                // Send request for position updates after connection
                this.initialDataReceived = false;
                logger.info('Requesting initial data from server...');
                
                this.sendMessage({ type: 'requestInitialData' }); // Matching the server's camelCase type

                // Randomization is disabled by default until client is ready
                logger.info('WebSocket connection established. Randomization disabled by default.');
            }, 500); // 500ms delay to ensure connection is stable
        };

        this.ws.onerror = (event: Event): void => {
            logger.error('WebSocket error:', createDataMetadata(event));
            // Don't call handleReconnect here, let onclose handle it
            // This prevents duplicate reconnection attempts when both error and close events fire
            // if (this.ws?.readyState === WebSocket.CLOSED) {
            //     this.handleReconnect();
            // }
        };

        this.ws.onclose = (event: CloseEvent): void => {
            logger.warn('WebSocket closed', createDataMetadata({
                code: event.code,
                reason: event.reason || "No reason provided",
                initialDataReceived: this.initialDataReceived,
                wasConnected: this.connectionState === ConnectionState.CONNECTED,
                url: this.url
            }));
            
            // Clear heartbeat on connection close
            this.clearHeartbeat();
            
            if (this.connectionStatusHandler) {
                this.connectionStatusHandler(false);
            }
            
            this.handleReconnect();
        };

        this.ws.onmessage = (event: MessageEvent) => {
            try {
                if (event.data instanceof ArrayBuffer) {
                    
                    this.handleBinaryMessage(event.data);
                } else if (typeof event.data === 'string') {
                    try {
                        const message = JSON.parse(event.data);
                        
                        // Handle loading state messages
                        if (message.type === 'loading') {
                            this.isLoading = true;
                            logger.info('WebSocket loading state:', createDataMetadata({
                                message: message.message
                            }));
                            // Notify loading handler if registered
                            if (this.loadingStatusHandler) {
                                logger.info('Showing loading indicator: ' + message.message);
                                this.loadingStatusHandler(true, message.message);
                            }
                        } else if (message.type === 'updatesStarted') {
                            // Clear loading state when updates start
                            this.isLoading = false;
                            this.initialDataReceived = true;
                            logger.info('WebSocket updates started:', createDataMetadata({
                                timestamp: message.timestamp
                            }));
                            // Notify loading handler if registered
                            if (this.loadingStatusHandler) {
                                this.loadingStatusHandler(false);
                            }
                        } else if (message.type === 'connection_established') {
                            logger.info('WebSocket message received:', createDataMetadata({
                                type: message.type,
                                timestamp: message.timestamp || Date.now()
                            }));
                        } else if (debugState.isWebsocketDebugEnabled()) {
                            logger.debug('WebSocket message received:', message);
                        }
                    } catch (error) {
                        logger.error('Failed to parse WebSocket message:', createErrorMetadata(error));
                    }
                }
            } catch (error) {
                logger.error('Critical error in message handler:', createErrorMetadata(error));
            }
        };
    }

    // Setup a heartbeat to keep the WebSocket connection alive
    private setupHeartbeat(): void {
        this.clearHeartbeat(); // Clear any existing heartbeat
        this.heartbeatInterval = window.setInterval(() => {
            // Send a simple ping message to keep the connection alive
            if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                try {
                    this.sendMessage({ type: 'ping', timestamp: Date.now() });
                    if (debugState.isWebsocketDebugEnabled()) {
                        logger.debug('Heartbeat ping sent');
                    }
                } catch (err) {
                    logger.error('Failed to send heartbeat ping:', createErrorMetadata(err));
                }
            } else if (this.ws && this.ws.readyState === WebSocket.CLOSED) {
                // If socket is closed but heartbeat still running, attempt reconnect
                logger.warn('Heartbeat detected closed socket, attempting reconnect');
                this.handleReconnect();
            }
        }, 10000); // Send ping every 10 seconds (changed from 15s to match server)
    }
    
    // Clear heartbeat interval
    private clearHeartbeat(): void {
        if (this.heartbeatInterval !== null) {
            window.clearInterval(this.heartbeatInterval);
            this.heartbeatInterval = null;
        }
    }

    private tryDecompress(buffer: ArrayBuffer): ArrayBuffer {
        try {
            const decompressed = pako.inflate(new Uint8Array(buffer));
            if (decompressed.length < 8 || decompressed.length % 4 !== 0) {
                return buffer;
            }
            return decompressed.buffer;
        } catch (error) {
            return buffer;
        }
    }

    private compressIfNeeded(buffer: ArrayBuffer): ArrayBuffer {
        if (buffer.byteLength > COMPRESSION_THRESHOLD) {
            try {
                const compressed = pako.deflate(new Uint8Array(buffer));
                return compressed.buffer;
            } catch (error) {
                logger.warn('Compression failed, using original data:', createErrorMetadata(error));
                return buffer;
            }
        }
        return buffer;
    }

    private handleBinaryMessage(buffer: ArrayBuffer): void {
        try {
            if (buffer.byteLength === 0) {
                logger.warn('Received empty binary message, ignoring');
                return;
            }
            
            const decompressedBuffer = this.tryDecompress(buffer);
            
            // Throttled debug logging for binary messages
            debugLog('Binary data processed:', createDataMetadata({ 
                rawSize: buffer.byteLength, 
                initialDataReceived: this.initialDataReceived,
                decompressedSize: decompressedBuffer.byteLength, 
                nodeCount: Math.floor(decompressedBuffer.byteLength / BYTES_PER_NODE)
            }));
            logger.debug(`Received binary update with ${Math.floor(decompressedBuffer.byteLength / BYTES_PER_NODE)} nodes`);
            
            // Check if buffer is empty
            if (!decompressedBuffer || decompressedBuffer.byteLength === 0) {
                logger.error('Empty binary message after decompression');
                return;
            }
            
            const dataView = new DataView(decompressedBuffer);
            
            // Check if there's enough data for at least one node
            if (decompressedBuffer.byteLength < BYTES_PER_NODE) {
                logger.error('Binary message too small to contain any nodes');
                return;
            }
            
            // Calculate how many complete nodes we can read
            const nodeCount = Math.floor(decompressedBuffer.byteLength / BYTES_PER_NODE);
            
            // If there's a remainder, log it but continue processing the complete nodes
            const remainder = decompressedBuffer.byteLength % BYTES_PER_NODE;
            if (remainder > 0) {
                // Only log at debug level to reduce noise - this is expected behavior
                // The extra bytes are likely padding or alignment in the binary protocol
                if (debugState.isWebsocketDebugEnabled()) {
                    logger.debug(`Binary message has ${remainder} extra bytes that don't form a complete node. ` +
                                `Processing ${nodeCount} complete nodes.`);
                }
            }

            if (nodeCount === 0) {
                logger.warn('No nodes in binary update - empty message received');
                return;
            }
            
            // Start reading nodes from the beginning
            let offset = 0;
            const nodes: BinaryNodeData[] = [];
            
            for (let i = 0; i < nodeCount; i++) {
                // Read node ID (u16)
                const id = dataView.getUint16(offset, true);
                offset += 2;

                // Skip nodes with invalid IDs
                if (id === 0 || id === 65535) { // 0 and 65535 are often used as sentinel values
                    if (debugState.isNodeDebugEnabled()) {
                        logger.debug(`Skipping node with reserved ID: ${id}`);
                    }
                    continue;
                }
                
                // Check if this is a valid node ID
                if (id > MAX_U16_VALUE) {
                    logger.error(`Invalid node ID: ${id} exceeds maximum u16 value`);
                    continue;
                }
                
                // Create THREE.Vector3 objects directly
                const rawPosition = new Vector3(
                    dataView.getFloat32(offset, true),     // x
                    dataView.getFloat32(offset + 4, true), // y
                    dataView.getFloat32(offset + 8, true)  // z
                );
                
                // CRITICAL FIX: Ensure we're using the correct numeric ID from the server
                // This ID is directly from the binary protocol and must be preserved as-is
                // to maintain proper mapping with node metadata
                const position = validateAndFixVector3(rawPosition, 1000);

                const rawVelocity = new Vector3(
                    dataView.getFloat32(offset, true),      // x
                    dataView.getFloat32(offset + 4, true),  // y
                    dataView.getFloat32(offset + 8, true)   // z
                );
                const velocity = validateAndFixVector3(rawVelocity, 0.05);
                
                // Update offsets after reading all data
                offset += 12; // position (3 * 4 bytes)
                offset += 12; // velocity (3 * 4 bytes)

                // Convert the numeric ID to a string to match our node ID storage format
                const nodeId = id.toString();
                // Apply deadband filtering - only include if position has changed significantly
                const lastPosition = this.lastNodePositions.get(id);
                let positionChanged = true;
                
                if (lastPosition) {
                    // Calculate squared distance to avoid unnecessary sqrt
                    const dx = position.x - lastPosition.x;
                    const dy = position.y - lastPosition.y;
                    const dz = position.z - lastPosition.z;
                    const distanceSquared = dx*dx + dy*dy + dz*dz;
                    
                    // Only consider position changed if it exceeds our threshold
                    positionChanged = distanceSquared > (POSITION_DEADBAND * POSITION_DEADBAND);
                    
                    if (!positionChanged && Math.random() < 0.001) { // Log occasionally (0.1% chance)
                        if (debugState.isWebsocketDebugEnabled()) {
                            logger.debug(`Filtering node ${id} - position change too small: ${Math.sqrt(distanceSquared).toFixed(5)} < ${POSITION_DEADBAND}`);
                        }
                        continue; // Skip this position update entirely
                    }
                }
                
                // Store this position for future comparisons
                this.lastNodePositions.set(id, position.clone());
                
                // Only include the node if position changed or we don't have a previous position
                if (positionChanged) {
                    // IMPORTANT: Use the string nodeId that matches the metadata format
                    // This ensures the position updates will be correctly applied to
                    // the nodes with matching metadata
                    nodes.push({ 
                        id: parseInt(nodeId, 10), 
                        position, velocity });
                    
                    // Debug logging for node ID tracking
                    if (debugState.isNodeDebugEnabled() && Math.random() < 0.01) {
                        logger.debug(`Processing node ID ${id} from binary update`);
                    }
                }
            }

            // Enhanced logging for node ID tracking - log every 100th update
            const shouldLogExtras = debugState.isNodeDebugEnabled() && Math.random() < 0.01; // ~1% chance to log per update
                
            if (shouldLogExtras) {
                // Sample a few nodes for debugging
                const sampleNodes = nodes.slice(0, Math.min(3, nodes.length));
                if (sampleNodes.length > 0) {
                    logger.debug('Node binary update sample:', createDataMetadata({
                        sampleSize: sampleNodes.length,
                        totalNodes: nodes.length,
                        nodeInfo: sampleNodes.map(n => ({
                            id: n.id,
                            position: { 
                                x: n.position.x.toFixed(2), 
                                y: n.position.y.toFixed(2), 
                                z: n.position.z.toFixed(2) 
                            }
                        }))
                    }));
                }
            }

            // Add nodes to pending updates
            if (nodes.length > 0) {
                this.pendingNodeUpdates.push(...nodes);
                
                // Process updates with throttling
                if (this.updateThrottler.shouldUpdate()) {
                    this.processPendingNodeUpdates();
                } else {
                    // Schedule processing if not already scheduled
                    if (this.nodeUpdateTimer === null) {
                        this.nodeUpdateTimer = window.setTimeout(() => {
                            this.processPendingNodeUpdates();
                            this.nodeUpdateTimer = null;
                        }, this.updateThrottler.getTimeUntilNextUpdate());
                    }
                }
            }
        } catch (error) {
            logger.error('Failed to process binary message:', createErrorMetadata(error));
        }
    }
    
    /**
     * Process all pending node updates at the throttled rate
     */
    private processPendingNodeUpdates(): void {
        if (this.pendingNodeUpdates.length > 0 && this.binaryMessageCallback) {
            // Process all pending updates at once
            try {
                this.binaryMessageCallback(this.pendingNodeUpdates);
                
                // Log processing stats
                if (debugState.isWebsocketDebugEnabled()) {
                    logger.debug('Processed node updates:', createDataMetadata({
                        count: this.pendingNodeUpdates.length,
                        throttleRate: this.updateThrottler.getRate()
                    }));
                }
                
                // Clear pending updates
                this.pendingNodeUpdates = [];
            } catch (error: any) {
                logger.error('Error processing node updates:', createErrorMetadata(error));
            }
        }
    }

    private handleReconnect(): void {
        const wasConnected = this.connectionState === ConnectionState.CONNECTED;
        
        // Store current state for logging
        const prevState = this.connectionState;
        this.binaryMessageCallback = null;
        this.connectionState = ConnectionState.DISCONNECTED;
        
        logger.info(`WebSocket reconnect triggered (previous state: ${prevState})`);
        
        if (this.reconnectTimeout !== null) {
            window.clearTimeout(this.reconnectTimeout);
            this.reconnectTimeout = null;
        }
        
        if (this.reconnectAttempts < this._maxReconnectAttempts &&
            (wasConnected || this.reconnectAttempts === 0)) {
            
            this.reconnectAttempts++;
            const delay = this.getReconnectDelay();
            
            this.connectionState = ConnectionState.RECONNECTING;
            logger.info(`WebSocket reconnecting in ${Math.round(delay/1000)}s (attempt ${this.reconnectAttempts} of ${this._maxReconnectAttempts})`);
            
            // Use setTimeout instead of window.setTimeout for more consistent behavior
            this.reconnectTimeout = window.setTimeout(async () => {
                this.reconnectTimeout = null;
                try {
                    await this.connect();
                } catch (error) {
                    logger.error('Reconnection attempt failed:', createErrorMetadata(error));
                }
            }, delay);
        } else {
            this.handleReconnectFailure();
        }
    }

    private handleReconnectFailure(): void {
        this.connectionState = ConnectionState.FAILED;
        logger.error('WebSocket reconnection failed after maximum attempts', createDataMetadata({
            attempts: this.reconnectAttempts,
            maxAttempts: this._maxReconnectAttempts,
            url: this.url
        }));
        
        // Update binary protocol status to failed
        debugState.setBinaryProtocolStatus('failed');
        
        if (this.connectionStatusHandler) {
            this.connectionStatusHandler(false);
        }
    }

    public onBinaryMessage(callback: BinaryMessageCallback): void {
        this.binaryMessageCallback = callback;
    }

    public getConnectionStatus(): ConnectionState {
        return this.connectionState;
    }

    // Enhanced message sending with better error handling
    public sendMessage(message: any): void {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            const serializedMessage = JSON.stringify(message);
            try {
                this.ws.send(serializedMessage);
                
                // Only log ping messages in debug mode to avoid excessive logging
                if (message.type !== 'ping' || debugState.isWebsocketDebugEnabled()) {
                    debugLog(`Sent message type: ${message.type}`);
                }
            } catch (error) {
                logger.error('Error sending message:', createErrorMetadata({
                    error: error instanceof Error ? error.message : String(error),
                    messageType: message.type,
                    connectionState: this.connectionState,
                    wsReadyState: this.ws.readyState
                }));
            }
        }
    }

    /**
     * Enable or disable server-side node position randomization
     * This should only be called after the initial data loading is complete
     * @param enabled Whether randomization should be enabled
     */
    public enableRandomization(enabled: boolean): void {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            if (enabled) {
                logger.warn('WebSocket not connected, attempting to reconnect before enabling randomization');
                // Try to reconnect
                this.connect().then(() => {
                    // If connection succeeded, try again
                    if (this.ws?.readyState === WebSocket.OPEN) {
                        logger.info(`${enabled ? 'Enabling' : 'Disabling'} server-side position randomization after reconnection`);
                        this.sendMessage({ type: 'enableRandomization', enabled });
                    }
                }).catch(e => {
                    logger.error('Failed to reconnect for randomization:', createErrorMetadata(e));
                });
            } else {
                logger.warn('WebSocket not connected, cannot disable randomization');
            }
            return;
        }

        logger.info(`${enabled ? 'Enabling' : 'Disabling'} server-side position randomization`);
        this.sendMessage({ type: 'enableRandomization', enabled });
    }
    
    
    public sendNodeUpdates(updates: NodeUpdate[]): void {
        if (debugState.isWebsocketDebugEnabled()) {
            logger.debug(`Sending ${updates.length} node updates. Binary updates enabled: ${debugState.isBinaryProtocolEnabled()}`);
        }
        
        // Update binary protocol status based on connection state
        if (debugState.getBinaryProtocolStatus() === 'inactive') {
            debugState.setBinaryProtocolStatus('pending');
        }
        
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            logger.warn('WebSocket not connected, attempting to reconnect before sending updates');
            debugState.setBinaryProtocolStatus('pending');
            
            // Try to reconnect and then send updates 
            this.connect().then(() => {
                // Check if connection succeeded
                if (this.ws?.readyState === WebSocket.OPEN) {
                    logger.info('Reconnected successfully, now sending queued node updates');
                    debugState.setBinaryProtocolStatus('active');
                    this.nodeUpdateQueue.push(...updates);
                    this.processNodeUpdateQueue();
                } else {
                    logger.warn('WebSocket still not connected after reconnect attempt');
                    debugState.setBinaryProtocolStatus('failed');
                }
            }).catch(e => {
                logger.error('Failed to reconnect for node updates:', createErrorMetadata(e));
                debugState.setBinaryProtocolStatus('error');
            });
            return;
        }

        // Pre-validate node IDs before adding to queue
        const validatedUpdates = updates.filter(update => {
            const id = parseInt(update.id, 10);

            // Ensure ID is within u16 range (0-65535)
            if (id > MAX_U16_VALUE) {
                logger.warn(`Node ID ${id} exceeds maximum u16 value (${MAX_U16_VALUE}), cannot send update`);
                return false;
            }
            
            // Check for NaN or non-numeric IDs
            if (isNaN(id) || id < 0 || !Number.isInteger(id)) {
                // This is likely a metadata name being incorrectly used as a node ID
                if (debugState.isWebsocketDebugEnabled()) {
                    logger.debug('Non-numeric node ID detected, will map to numeric index:', createDataMetadata({
                        id: update.id,
                        valueType: typeof update.id,
                        length: typeof update.id === 'string' ? update.id.length : 0
                    }));
                }
                // Don't filter out non-numeric IDs - they will be mapped below
                return false;
            }
            return true;
        });
        
        if (debugState.isWebsocketDebugEnabled()) {
            logger.debug(`Validated ${validatedUpdates.length}/${updates.length} node updates as numeric IDs`);
        }

        if (validatedUpdates.length === 0 && updates.length > 0) {
            // If we have non-numeric node IDs (metadata names), convert them to numeric indices
            const indexedUpdates = updates.filter(update => {
                if (!this.nodeNameToIndexMap.has(update.id)) {
                    // Ensure we don't exceed u16 max value
                    if (this.nextNodeIndex > MAX_U16_VALUE) {
                        logger.warn(`Cannot map more node IDs, reached maximum u16 value (${MAX_U16_VALUE})`);
                        return false;
                    }
                    
                    // Generate a valid u16 index
                    const nodeIndex = this.nextNodeIndex++;
                    this.nodeNameToIndexMap.set(update.id, nodeIndex);
                    logger.info(`Mapped metadata name "${update.id}" to numeric index ${nodeIndex} for binary protocol`);
                }
                
                // Check if this is a randomization operation (large position changes)
                // If so, bypass the deadband filtering
                const nodeId = this.nodeNameToIndexMap.get(update.id)!;
                const lastPosition = this.lastNodePositions.get(nodeId);
                
                if (lastPosition) {
                    // Calculate squared distance manually
                    const dx = update.position.x - lastPosition.x;
                    const dy = update.position.y - lastPosition.y;
                    const dz = update.position.z - lastPosition.z;
                    const distanceSquared = dx*dx + dy*dy + dz*dz;
                    
                    // Check if this is a significant position change (likely from randomization)
                    const isSignificantChange = distanceSquared > 1.0; // 1.0 is a larger threshold to detect randomization
                    
                    // Only apply deadband filtering for small movements, not for randomization
                    if (!isSignificantChange && distanceSquared < (POSITION_DEADBAND * POSITION_DEADBAND)) {
                        if (debugState.isWebsocketDebugEnabled() && Math.random() < 0.01) {
                            logger.debug(`Filtered client update for node ${update.id} - position change too small`);
                        }
                        return false; // Filter out this update
                    }
                    
                    if (isSignificantChange && debugState.isWebsocketDebugEnabled()) {
                        logger.debug(`Detected significant position change for node ${update.id} - likely randomization`);
                    }
                }
                
                // Use the numeric index for the binary protocol
                // Keep this update and transform it
                return true;
            }).map(update => {
                const numericId = this.nodeNameToIndexMap.get(update.id)!;
                return { ...update, id: numericId.toString() }; 
            });
                
            // Add the indexed updates to the queue
            this.nodeUpdateQueue.push(...indexedUpdates);
        } else if (validatedUpdates.length > 0) {
            // Add already-numeric updates to the queue
            this.nodeUpdateQueue.push(...validatedUpdates);
        } else {
            return; // No updates to process
        }
        
        
        // Debounce updates to prevent flooding the server
        if (this.nodeUpdateTimer === null) {
            this.nodeUpdateTimer = window.setTimeout(() => {
                this.processNodeUpdateQueue();
                this.nodeUpdateTimer = null;
            }, this.NODE_UPDATE_DEBOUNCE_MS);
        }
    }
    
    private processNodeUpdateQueue(): void {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN || this.nodeUpdateQueue.length === 0) {
            if (this.nodeUpdateQueue.length > 0) {
                logger.warn(`Discarding ${this.nodeUpdateQueue.length} updates because WebSocket is not open`);
                debugState.setBinaryProtocolStatus('error');
            }
            this.nodeUpdateQueue = [];
            return;
        }
        
        // Update binary protocol status to active since we're about to send updates
        if (debugState.getBinaryProtocolStatus() === 'pending') {
            debugState.setBinaryProtocolStatus('active');
        }
        
        if (debugState.isWebsocketDebugEnabled()) {
            logger.debug(`Processing node update queue with ${this.nodeUpdateQueue.length} updates`);
        }
        
        // Get the most recent updates for each node ID (to avoid sending outdated positions)
        const latestUpdates = new Map<string, NodeUpdate>();
        for (const update of this.nodeUpdateQueue) {
            latestUpdates.set(update.id, update);
        }
        
        // Convert to array - allow more nodes per update for randomization operations
        let updates = Array.from(latestUpdates.values());
        const originalCount = updates.length;
        
        // For randomization, we want to send more nodes at once
        // Check if this is likely a randomization operation (many nodes at once)
        const isLikelyRandomization = updates.length > 5;
        const maxNodesPerUpdate = isLikelyRandomization ? 10 : 2;
        
        if (updates.length > maxNodesPerUpdate) {
            if (debugState.isWebsocketDebugEnabled()) {
                logger.debug(`Many nodes in update (${updates.length}), limiting to ${maxNodesPerUpdate} nodes per batch`);
            }
            updates = updates.slice(0, maxNodesPerUpdate);
        }
        
        // Clear the queue
        this.nodeUpdateQueue = [];
        
        if (debugState.isWebsocketDebugEnabled()) {
            logger.debug(`Processing ${updates.length}/${originalCount} node updates`);
        }

        // Calculate buffer size based on node count (26 bytes per node)
        const bufferSize = updates.length * BYTES_PER_NODE;
        const buffer = new ArrayBuffer(bufferSize);
        const dataView = new DataView(buffer);
        
        // Start writing node data from the beginning
        let offset = 0;

        updates.forEach(update => {
            const id = parseInt(update.id, 10); 
            if (isNaN(id)) {
                logger.warn('Invalid node ID in queue:', createDataMetadata({ 
                    nodeId: update.id,
                    type: typeof update.id,
                    length: typeof update.id === 'string' ? update.id.length : 0,
                    isPossibleMetadataName: typeof update.id === 'string' && 
                                          update.id.length > 10 && !/^\d+$/.test(update.id)
                }));
                return; // Skip this update
            }
            // Write node ID as u16 
            dataView.setUint16(offset, id, true);
            offset += 2;

            // Validate position using our new utility function
            const position = validateAndFixVector3(update.position, 1000);
            
            // Write position
            dataView.setFloat32(offset, position.x, true);
            dataView.setFloat32(offset + 4, position.y, true);
            dataView.setFloat32(offset + 8, position.z, true);
            offset += 12;

            // Validate and clamp velocity (default to zero vector if not provided)
            const rawVelocity = update.velocity ?? new Vector3(0, 0, 0);
            const velocity = validateAndFixVector3(rawVelocity, 0.05);
            
            // Write velocity
            dataView.setFloat32(offset, velocity.x, true);
            dataView.setFloat32(offset + 4, velocity.y, true);
            dataView.setFloat32(offset + 8, velocity.z, true);
            offset += 12;
        });

        const finalBuffer = this.compressIfNeeded(buffer);
        this.ws.send(finalBuffer);
    }

    public onConnectionStatusChange(handler: (status: boolean) => void): void {
        this.connectionStatusHandler = handler;
        if (this.connectionState === ConnectionState.CONNECTED && handler) {
            handler(true);
        }
    }

    /**
     * Register a handler for loading status changes
     * @param handler Callback function that receives loading state and optional message
     */
    public onLoadingStatusChange(handler: (isLoading: boolean, message?: string) => void): void {
        this.loadingStatusHandler = handler;
        
        // Immediately notify with current state if already loading
        if (this.isLoading && handler) {
            handler(true);
        }
    }

    public dispose(): void {
        if (this.reconnectTimeout !== null) {
            window.clearTimeout(this.reconnectTimeout);
            this.reconnectTimeout = null;
            logger.debug('Cleared reconnect timeout during disposal');
        }
        
        if (this.nodeUpdateTimer !== null) {
            window.clearTimeout(this.nodeUpdateTimer);
            this.nodeUpdateTimer = null;
            this.nodeUpdateQueue = [];
            logger.debug('Cleared node update timer during disposal');
        }
        
        if (this.heartbeatInterval !== null) {
            window.clearInterval(this.heartbeatInterval);
            this.heartbeatInterval = null;
            logger.debug('Cleared heartbeat interval during disposal');
        }

        // Clear position tracking data to prevent memory leaks
        this.lastNodePositions.clear();
        this.pendingNodeUpdates = [];
        if (this.ws) {
            logger.info('Closing WebSocket connection during disposal');
            this.ws.close();
            this.ws = null;
        }

        logger.info('WebSocket service disposal complete');
        
        this.binaryMessageCallback = null;
        this.connectionStatusHandler = null;
        this.connectionState = ConnectionState.DISCONNECTED;
        WebSocketService.instance = null;
    }

    public close(): void {
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
    }
    
    /**
     * Send raw binary data through the WebSocket connection
     * This method is used by the GraphDataManager adapter
     * @param data The ArrayBuffer to send
     * @returns boolean indicating if the data was sent successfully
     */
    public sendRawBinaryData(data: ArrayBuffer): boolean {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            logger.warn('WebSocket not connected, cannot send raw binary data');
            return false;
        }
        
        try {
            const finalData = this.compressIfNeeded(data);
            this.ws.send(finalData);
            return true;
        } catch (error) {
            logger.error('Error sending raw binary data:', createErrorMetadata(error));
            return false;
        }
    }
}
----
audio/AudioPlayer.ts
export interface AudioPlayerOptions {
    sampleRate?: number;
    channels?: number;
    bufferSize?: number;
}

export class AudioPlayer {
    private audioContext: AudioContext;
    private audioQueue: AudioBuffer[] = [];
    private isPlaying = false;
    private gainNode: GainNode;
    private options: Required<AudioPlayerOptions>;

    constructor(options: AudioPlayerOptions = {}) {
        this.options = {
            sampleRate: options.sampleRate || 24000, // Kokoros default sample rate
            channels: options.channels || 1,
            bufferSize: options.bufferSize || 4096,
        };

        this.audioContext = new AudioContext({
            sampleRate: this.options.sampleRate,
            latencyHint: 'interactive',
        });

        this.gainNode = this.audioContext.createGain();
        this.gainNode.connect(this.audioContext.destination);
        this.setVolume(1.0); // Default volume
    }

    public setVolume(value: number): void {
        if (value >= 0 && value <= 1) {
            this.gainNode.gain.value = value;
        }
    }

    public async handleAudioChunk(data: ArrayBuffer, isLastChunk: boolean): Promise<void> {
        try {
            const audioBuffer = await this.decodeAudioData(data);
            this.audioQueue.push(audioBuffer);
            
            if (!this.isPlaying) {
                await this.playNextChunk();
            }
            
            if (isLastChunk) {
                this.clear(); // Clear the queue after playing the last chunk
            }
        } catch (error) {
            console.error('Error handling audio chunk:', error);
        }
    }

    private async decodeAudioData(data: ArrayBuffer): Promise<AudioBuffer> {
        return new Promise((resolve, reject) => {
            this.audioContext.decodeAudioData(
                data,
                (buffer) => resolve(buffer),
                (error) => reject(error)
            );
        });
    }

    private async playNextChunk(): Promise<void> {
        if (this.audioQueue.length === 0) {
            this.isPlaying = false;
            return;
        }

        this.isPlaying = true;
        const buffer = this.audioQueue.shift()!;
        const source = this.audioContext.createBufferSource();
        
        source.buffer = buffer;
        source.connect(this.gainNode);
        
        return new Promise((resolve) => {
            source.onended = () => {
                this.playNextChunk().then(resolve);
            };
            
            source.start();
        });
    }

    public async resume(): Promise<void> {
        if (this.audioContext.state === 'suspended') {
            await this.audioContext.resume();
        }
    }

    public async pause(): Promise<void> {
        if (this.audioContext.state === 'running') {
            await this.audioContext.suspend();
        }
    }

    public stop(): void {
        this.audioQueue = [];
        this.isPlaying = false;
        this.audioContext.close();
    }

    public clear(): void {
        this.audioQueue = [];
    }

    public getState(): AudioContextState {
        return this.audioContext.state;
    }

    public getQueueLength(): number {
        return this.audioQueue.length;
    }
}

// Singleton instance for global access
let audioPlayerInstance: AudioPlayer | null = null;

export function getAudioPlayer(options?: AudioPlayerOptions): AudioPlayer {
    if (!audioPlayerInstance) {
        audioPlayerInstance = new AudioPlayer(options);
    }
    return audioPlayerInstance;
}

export function disposeAudioPlayer(): void {
    if (audioPlayerInstance) {
        audioPlayerInstance.stop();
        audioPlayerInstance = null;
    }
}

// Error handling
export class AudioPlayerError extends Error {
    constructor(message: string) {
        super(message);
        this.name = 'AudioPlayerError';
    }
}

// Types for WebSocket messages
export interface VoiceDataMessage {
    chunkId: number;
    isFinal: boolean;
    data: ArrayBuffer;
}

// Example usage:
/*
const player = getAudioPlayer();

// Handle incoming WebSocket message
ws.onmessage = async (event) => {
    if (event.data instanceof ArrayBuffer) {
        const view = new DataView(event.data);
        const messageType = view.getUint8(0);
        
        if (messageType === 1) { // VoiceData type
            const chunkId = view.getUint32(1, true);
            const isFinal = Boolean(view.getUint8(5));
            const dataSize = view.getUint32(6, true);
            const audioData = event.data.slice(10, 10 + dataSize);
            
            await player.handleAudioChunk(audioData, isFinal);
        }
    }
};
*/
----
config/featureFlags.ts
import { createLogger, createErrorMetadata, createDataMetadata } from '../core/logger';

const logger = createLogger('FeatureFlags');

/**
 * Feature flag configuration interface
 */
export interface FeatureFlags {
    enableLOD: boolean;
}

/**
 * Default feature flag values
 */
const defaultFlags: FeatureFlags = {
    enableLOD: true,  // Enable Level of Detail system
};

/**
 * Feature flag manager class
 */
export class FeatureFlagManager {
    private static instance: FeatureFlagManager;
    private flags: FeatureFlags;
    private listeners: Set<(flags: FeatureFlags) => void>;

    private constructor() {
        this.flags = { ...defaultFlags };
        this.listeners = new Set();
        
        // Load flags from localStorage if available
        if (typeof window !== 'undefined' && window.localStorage) {
            const savedFlags = localStorage.getItem('featureFlags');
            if (savedFlags) {
                try {
                    const parsed = JSON.parse(savedFlags);
                    this.flags = {
                        ...defaultFlags,
                        ...parsed
                    };
                    logger.info('Loaded feature flags from localStorage');
                } catch (error) {
                    logger.error('Failed to parse feature flags from localStorage:', createErrorMetadata(error));
                }
            }
        }
    }

    public static getInstance(): FeatureFlagManager {
        if (!FeatureFlagManager.instance) {
            FeatureFlagManager.instance = new FeatureFlagManager();
        }
        return FeatureFlagManager.instance;
    }

    /**
     * Get current state of all feature flags
     */
    public getFlags(): FeatureFlags {
        return { ...this.flags };
    }

    /**
     * Check if a specific feature is enabled
     */
    public isEnabled(feature: keyof FeatureFlags): boolean {
        return this.flags[feature];
    }

    /**
     * Update feature flags
     */
    public updateFlags(updates: Partial<FeatureFlags>): void {
        const oldFlags = { ...this.flags };
        this.flags = {
            ...this.flags,
            ...updates
        };

        // Save to localStorage if available
        if (typeof window !== 'undefined' && window.localStorage) {
            try {
                localStorage.setItem('featureFlags', JSON.stringify(this.flags));
            } catch (error) {
                logger.error('Failed to save feature flags to localStorage:', createErrorMetadata(error));
            }
        }

        // Log changes
        Object.keys(updates).forEach(key => {
            const feature = key as keyof FeatureFlags;
            if (oldFlags[feature] !== this.flags[feature]) {
                logger.info(`Feature flag "${feature}" changed:`, createDataMetadata({
                    from: oldFlags[feature],
                    to: this.flags[feature]
                }));
            }
        });

        // Notify listeners
        this.notifyListeners();
    }

    /**
     * Subscribe to feature flag changes
     */
    public subscribe(callback: (flags: FeatureFlags) => void): () => void {
        this.listeners.add(callback);
        return () => {
            this.listeners.delete(callback);
        };
    }

    /**
     * Reset all flags to default values
     */
    public reset(): void {
        this.updateFlags(defaultFlags);
        logger.info('Reset all feature flags to defaults');
    }

    private notifyListeners(): void {
        const flags = this.getFlags();
        this.listeners.forEach(listener => {
            try {
                listener(flags);
            } catch (error) {
                logger.error('Error in feature flag listener:', createErrorMetadata(error));
            }
        });
    }
}

// Export singleton instance
export const featureFlags = FeatureFlagManager.getInstance();
----
monitoring/NodeManagerMetrics.ts
import { createLogger, createErrorMetadata, createDataMetadata } from '../core/logger';

const logger = createLogger('NodeManagerMetrics');

interface PerformanceMetrics {
    fps: number;
    frameTime: number;
    updateTime: number;
    memoryUsage?: number;
    nodeCount: number;
    visibleNodes: number;
    updateCount: number;
}

interface MetricsSummary {
    avgFps: number;
    avgFrameTime: number;
    avgUpdateTime: number;
    avgMemoryUsage?: number;
    minFps: number;
    maxUpdateTime: number;
    totalUpdates: number;
    sampleCount: number;
}

/**
 * Monitoring system for tracking node manager performance
 */
export class NodeManagerMetrics {
    private static instance: NodeManagerMetrics;
    private metrics: PerformanceMetrics[] = [];
    private currentMetrics: PerformanceMetrics;
    private lastFrameTime: number = 0;
    private frameCount: number = 0;
    private readonly MAX_SAMPLES = 1000;
    private readonly ALERT_THRESHOLD_FPS = 45;
    private readonly ALERT_THRESHOLD_UPDATE_TIME = 16; // ms

    // Performance monitoring
    private performanceObserver: PerformanceObserver | null = null;

    private constructor() {
        this.currentMetrics = this.createEmptyMetrics();
        this.setupPerformanceObserver();
        
        // Report metrics periodically
        setInterval(() => this.reportMetrics(), 5000);
    }

    private createEmptyMetrics(): PerformanceMetrics {
        return {
            fps: 0,
            frameTime: 0,
            updateTime: 0,
            nodeCount: 0,
            visibleNodes: 0,
            updateCount: 0
        };
    }

    private setupPerformanceObserver(): void {
        if (typeof PerformanceObserver !== 'undefined') {
            this.performanceObserver = new PerformanceObserver((list) => {
                for (const entry of list.getEntries()) {
                    if (entry.entryType === 'measure' && entry.name === 'nodeUpdate') {
                        this.currentMetrics.updateTime = entry.duration;
                    }
                }
            });

            try {
                this.performanceObserver.observe({ entryTypes: ['measure'] });
            } catch (error) {
                logger.warn('Performance observer setup failed:', createErrorMetadata(error));
            }
        }
    }

    public static getInstance(): NodeManagerMetrics {
        if (!NodeManagerMetrics.instance) {
            NodeManagerMetrics.instance = new NodeManagerMetrics();
        }
        return NodeManagerMetrics.instance;
    }

    /**
     * Record metrics for current frame
     */
    public recordFrame(nodeCount: number, visibleNodes: number): void {
        const now = performance.now();
        
        if (this.lastFrameTime > 0) {
            const frameTime = now - this.lastFrameTime;
            this.currentMetrics.frameTime = frameTime;
            this.currentMetrics.fps = 1000 / frameTime;
        }
        
        this.lastFrameTime = now;
        this.currentMetrics.nodeCount = nodeCount;
        this.currentMetrics.visibleNodes = visibleNodes;
        
        // Add memory usage if available (Chrome-specific API)
        interface PerformanceWithMemory extends Performance {
            memory?: {
                usedJSHeapSize: number;
            };
        }
        if ((performance as PerformanceWithMemory).memory) {
            this.currentMetrics.memoryUsage = (performance as PerformanceWithMemory).memory!.usedJSHeapSize / (1024 * 1024);
        }

        // Check for performance issues
        this.checkPerformance();

        // Store metrics
        this.metrics.push({ ...this.currentMetrics });
        if (this.metrics.length > this.MAX_SAMPLES) {
            this.metrics.shift();
        }

        // Reset current metrics
        this.currentMetrics = this.createEmptyMetrics();
        this.frameCount++;
    }

    /**
     * Record start of node update
     */
    public startUpdate(): void {
        performance.mark('nodeUpdateStart');
    }

    /**
     * Record end of node update
     */
    public endUpdate(): void {
        performance.mark('nodeUpdateEnd');
        performance.measure('nodeUpdate', 'nodeUpdateStart', 'nodeUpdateEnd');
        this.currentMetrics.updateCount++;
    }

    /**
     * Get summary of collected metrics
     */
    public getMetricsSummary(): MetricsSummary {
        if (this.metrics.length === 0) {
            return {
                avgFps: 0,
                avgFrameTime: 0,
                avgUpdateTime: 0,
                minFps: 0,
                maxUpdateTime: 0,
                totalUpdates: 0,
                sampleCount: 0
            };
        }

        const summary = this.metrics.reduce((acc, metrics) => {
            acc.avgFps += metrics.fps;
            acc.avgFrameTime += metrics.frameTime;
            acc.avgUpdateTime += metrics.updateTime;
            if (metrics.memoryUsage) {
                acc.avgMemoryUsage = (acc.avgMemoryUsage || 0) + metrics.memoryUsage;
            }
            acc.minFps = Math.min(acc.minFps, metrics.fps);
            acc.maxUpdateTime = Math.max(acc.maxUpdateTime, metrics.updateTime);
            acc.totalUpdates += metrics.updateCount;
            return acc;
        }, {
            avgFps: 0,
            avgFrameTime: 0,
            avgUpdateTime: 0,
            avgMemoryUsage: undefined as number | undefined,
            minFps: Infinity,
            maxUpdateTime: 0,
            totalUpdates: 0,
            sampleCount: this.metrics.length
        });

        // Calculate averages
        summary.avgFps /= summary.sampleCount;
        summary.avgFrameTime /= summary.sampleCount;
        summary.avgUpdateTime /= summary.sampleCount;
        if (summary.avgMemoryUsage !== undefined) {
            summary.avgMemoryUsage /= summary.sampleCount;
        }

        return summary;
    }

    private checkPerformance(): void {
        const metrics = this.currentMetrics;

        // Check FPS
        if (metrics.fps < this.ALERT_THRESHOLD_FPS) {
            logger.warn('Low FPS detected:', createDataMetadata({
                fps: metrics.fps.toFixed(2),
                nodeCount: metrics.nodeCount
            }));
        }

        // Check update time
        if (metrics.updateTime > this.ALERT_THRESHOLD_UPDATE_TIME) {
            logger.warn('High update time detected:', createDataMetadata({
                updateTime: metrics.updateTime.toFixed(2),
                nodeCount: metrics.nodeCount
            }));
        }
    }

    private reportMetrics(): void {
        const summary = this.getMetricsSummary();

        logger.info('Performance Summary:', createDataMetadata({
            avgFps: summary.avgFps.toFixed(2),
            minFps: summary.minFps.toFixed(2),
            avgUpdateTime: summary.avgUpdateTime.toFixed(2),
            maxUpdateTime: summary.maxUpdateTime.toFixed(2),
            avgMemoryUsage: summary.avgMemoryUsage?.toFixed(2),
            totalUpdates: summary.totalUpdates,
            sampleCount: summary.sampleCount
        }));
    }

    public dispose(): void {
        if (this.performanceObserver) {
            this.performanceObserver.disconnect();
        }
        clearInterval(this.reportMetrics as any);
        this.metrics = [];
        NodeManagerMetrics.instance = null!;
        logger.info('NodeManagerMetrics disposed');
    }
}

// Export singleton instance
export const nodeManagerMetrics = NodeManagerMetrics.getInstance();
----
src/managers/NodeInstanceManager.ts
 
----
platform/platformManager.ts
import { Platform, PlatformCapabilities } from '../core/types';
import { createLogger } from '../core/utils';
import { Settings } from '../types/settings';
import { XRSessionMode, XRSessionState } from '../types/xr';
import { SceneManager } from '../rendering/scene';

const logger = createLogger('PlatformManager');

declare global {
  interface Navigator {
    xr?: XRSystem;
  }
}

class BrowserEventEmitter {
  private listeners: { [event: string]: Function[] } = {};

  on(event: string, listener: Function): void {
    if (!this.listeners[event]) {
      this.listeners[event] = [];
    }
    this.listeners[event].push(listener);
  }

  emit(event: string, ...args: any[]): void {
    const eventListeners = this.listeners[event];
    if (eventListeners) {
      eventListeners.forEach(listener => listener(...args));
    }
  }

  removeAllListeners(): void {
    this.listeners = {};
  }
}

export class PlatformManager extends BrowserEventEmitter {
  private static instance: PlatformManager | null = null;
  private platform: Platform;
  private capabilities: PlatformCapabilities;
  private initialized: boolean = false;
  private _isXRMode: boolean = false;
  private _xrSessionState: XRSessionState = 'inactive'; 
  private _cooldownTimer: number | null = null;
  private _sessionCount: number = 0;
  private sceneManager: SceneManager | null = null;

  private constructor() {
    super();
    this.platform = 'desktop';
    this.capabilities = {
      xrSupported: false,
      webglSupported: false,
      websocketSupported: false,
      webxr: false,
      handTracking: false,
      planeDetection: false
    };
  }

  static getInstance(): PlatformManager {
    if (!PlatformManager.instance) {
      PlatformManager.instance = new PlatformManager();
    }
    return PlatformManager.instance;
  }

  public setSceneManager(sceneManager: SceneManager): void {
    this.sceneManager = sceneManager;
  }

  async initialize(settings: Settings): Promise<void> {
    if (this.initialized) {
      return;
    }

    this.detectPlatform();
    await this.detectCapabilities();
    
    // Auto-enable XR mode for Quest devices unless explicitly disabled in settings
    if (this.isQuest()) {
      this._isXRMode = settings.xr?.mode !== 'inline';
      if (this._isXRMode) {
        this.capabilities.xrSupported = await this.checkXRSupport('immersive-ar');
      }
    }
    // For other platforms, initialize based on settings
    else if (settings.xr?.mode) {
      this._isXRMode = true;
      this.capabilities.xrSupported = await this.checkXRSupport(
        settings.xr?.mode as XRSessionMode
      );
    }
    
    this.initialized = true;
    logger.log('Platform manager initialized:', {
      platform: this.platform,
      isXRMode: this._isXRMode,
      capabilities: this.capabilities
    });
  }

  private detectPlatform(): void {
    // Try modern User-Agent Client Hints API first
    if ('userAgentData' in navigator) {
      const brands = (navigator as any).userAgentData.brands;
      const isOculusDevice = brands.some((b: any) =>
        /oculus|meta|quest/i.test(b.brand)
      );
      if (isOculusDevice) {
        this.platform = 'quest';
        logger.log('Quest platform detected via userAgentData');
        return;
      }
    }

    // Fallback to traditional user agent detection
    const userAgent = navigator.userAgent.toLowerCase();
    const isQuest = userAgent.includes('quest') ||
                    userAgent.includes('oculus') ||
                    userAgent.includes('oculusbrowser') ||
                    userAgent.includes('meta');
    
    if (isQuest) {
      this.platform = 'quest';
      logger.log('Quest platform detected via userAgent');
    } else if (userAgent.includes('chrome') || userAgent.includes('firefox') || userAgent.includes('safari')) {
      this.platform = 'browser';
    } else {
      this.platform = 'desktop';
    }
  }

  private async detectCapabilities(): Promise<void> {
    // WebXR support
    if ('xr' in navigator && navigator.xr) {
      try {
        // For Quest devices, prioritize checking immersive-ar support
        if (this.isQuest()) {
          this.capabilities.xrSupported = await navigator.xr.isSessionSupported('immersive-ar');
        } else {
          // For other platforms, check both VR and AR
          this.capabilities.xrSupported = 
            await navigator.xr.isSessionSupported('immersive-ar') ||
            await navigator.xr.isSessionSupported('immersive-vr');
        }
        
        this.capabilities.webxr = this.capabilities.xrSupported;
        this.capabilities.handTracking = this.capabilities.xrSupported;
        this.capabilities.planeDetection = this.capabilities.xrSupported;
      } catch (error) {
        logger.warn('WebXR not supported:', error);
        this.capabilities.xrSupported = false;
        this.capabilities.webxr = false;
        this.capabilities.handTracking = false;
        this.capabilities.planeDetection = false;
      }
    }

    // WebGL support
    try {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');
      this.capabilities.webglSupported = !!gl;
    } catch (error) {
      logger.warn('WebGL not supported:', error);
      this.capabilities.webglSupported = false;
    }

    // WebSocket support
    this.capabilities.websocketSupported = 'WebSocket' in window;

    logger.log('Platform capabilities detected:', this.capabilities);
  }

  getPlatform(): Platform {
    return this.platform;
  }

  getCapabilities(): PlatformCapabilities {
    return { ...this.capabilities };
  }

  isDesktop(): boolean {
    return this.platform === 'desktop';
  }

  isQuest(): boolean {
    return this.platform === 'quest';
  }

  isBrowser(): boolean {
    return this.platform === 'browser';
  }

  isXRSupported(): boolean {
    return this.capabilities.xrSupported;
  }

  isWebGLSupported(): boolean {
    return this.capabilities.webglSupported;
  }

  isWebSocketSupported(): boolean {
    return this.capabilities.websocketSupported;
  }

  get xrSessionState(): XRSessionState {
    return this._xrSessionState;
  }

  set xrSessionState(state: XRSessionState) {
    this._xrSessionState = state;
    this.emit('xrsessionstatechange', state);
  }

  async requestXRSession(mode: XRSessionMode = 'immersive-ar'): Promise<XRSession | null> {
    if (!this.capabilities.xrSupported || !('xr' in navigator) || !navigator.xr) {
      logger.warn('WebXR not supported');
      return null;
    }

    try {
      // Check if we're in cooldown period after a previous session
      if (this._cooldownTimer !== null) {
        logger.warn('AR session in cooldown period, please wait before starting a new session');
        // Show a user-friendly message
        const message = document.createElement('div');
        message.style.position = 'fixed';
        message.style.top = '50%';
        message.style.left = '50%';
        message.style.transform = 'translate(-50%, -50%)';
        message.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        message.style.color = 'white';
        message.style.padding = '20px';
        message.style.borderRadius = '10px';
        message.style.zIndex = '9999';
        message.textContent = 'Please wait a moment before starting a new AR session...';
        document.body.appendChild(message);
        
        // Remove the message after 2 seconds
        setTimeout(() => {
          document.body.removeChild(message);
        }, 2000);
        
        return null;
      }

      // Check if we're already in an active or transitioning state
      if (this._xrSessionState !== 'inactive') {
        logger.warn(`Cannot start XR session while in ${this._xrSessionState} state`);
        return null;
      }

      this.xrSessionState = 'starting';
      this._sessionCount++;
      const requiredFeatures: string[] = ['local-floor'];
      const optionalFeatures: string[] = ['hand-tracking'];

      // Add mode-specific features
      if (mode === 'immersive-ar') {
        requiredFeatures.push('hit-test');
        optionalFeatures.push('plane-detection');
      } else if (mode === 'immersive-vr') {
        optionalFeatures.push('bounded-floor', 'layers');
      }

      const features: XRSessionInit = {
        requiredFeatures,
        optionalFeatures
      };

      // Log the session request
      logger.log(`Requesting XR session with mode: ${mode}, features:`, 
        { required: requiredFeatures, optional: optionalFeatures });

      const session = await navigator.xr.requestSession(mode, features);

      // Set up session end event handler
      session.addEventListener('end', () => {
        logger.log('XR session ended, entering cooldown period');
        this.xrSessionState = 'cooldown';
        
        // Determine cooldown time based on session count and platform
        let cooldownTime = 2000; // Default 2 seconds
        
        // Increase cooldown time for Quest devices or after multiple sessions
        if (this.isQuest()) {
          cooldownTime = 3000; // 3 seconds for Quest
        }
        if (this._sessionCount > 1) {
          cooldownTime += 1000; // Add 1 second for each additional session
        }
        
        // Set a cooldown timer to allow the browser to fully release resources
        this._cooldownTimer = window.setTimeout(() => {
          logger.log('XR session cooldown complete');
          this._cooldownTimer = null;
          this.xrSessionState = 'inactive';
          
          // Force a page reload if we've had multiple sessions on Quest
          if (this.isQuest() && this._sessionCount > 2) {
            logger.log('Forcing page reload to clear resources after multiple AR sessions');
            setTimeout(() => {
              window.location.reload();
            }, 500);
          }
        }, cooldownTime) as unknown as number;
      });

      logger.log(`XR session started in ${mode} mode`);
      return session;
    } catch (error) {
      logger.error('Failed to start XR session:', error);
      return null;
      this.xrSessionState = 'inactive';
    }
  }

  async checkXRSupport(mode: XRSessionMode = 'immersive-ar'): Promise<boolean> {
    if ('xr' in navigator && navigator.xr) {
      try {
        const supported = await navigator.xr.isSessionSupported(mode);
        if (supported) {
          this.capabilities.webxr = true;
          this.capabilities.handTracking = true;
          this.capabilities.planeDetection = mode === 'immersive-ar';
          this.emit('xrdevicechange', true);
          logger.log('WebXR supported for mode:', mode);
          return true;
        }
      } catch (error) {
        logger.warn('WebXR check failed:', error);
      }
    }
    this.capabilities.webxr = false;
    this.capabilities.handTracking = false;
    this.capabilities.planeDetection = false;
    this.emit('xrdevicechange', false);
    return false;
  }

  dispose(): void {
    this.removeAllListeners();
    this.initialized = false;
    
    // Clear any pending cooldown timer
    if (this._cooldownTimer !== null) {
      clearTimeout(this._cooldownTimer);
      this._cooldownTimer = null;
    }
    this._xrSessionState = 'inactive';
    this._sessionCount = 0;
    PlatformManager.instance = null;
  }

  get isXRMode(): boolean {
    return this._isXRMode;
  }

  setXRMode(enabled: boolean): void {
    this._isXRMode = enabled;
    // Update camera layers
    const camera = this.sceneManager?.getCamera();
    if (camera) {
      if (enabled) {
        camera.layers.enable(1);  // Enable XR layer
        camera.layers.disable(0); // Disable desktop layer
      } else {
        camera.layers.enable(0);  // Enable desktop layer
        camera.layers.disable(1); // Disable XR layer
      }
    }
    this.emit('xrmodechange', enabled);
  }
}

export const platformManager = PlatformManager.getInstance();

----
types/env.d.ts
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_APP_TITLE: string;
  readonly DEV: boolean;
  readonly PROD: boolean;
  readonly MODE: string;
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

----
types/gestures.ts
export enum HandGestureType {
    None = 'none',
    Pinch = 'pinch',
    Grab = 'grab',
    Point = 'point',
    Wave = 'wave'
}

----
types/nostr.d.ts
interface NostrProvider {
    /**
     * Get the user's public key from the Nostr extension
     * @returns Promise that resolves to the public key as a hex string
     */
    getPublicKey(): Promise<string>;

    /**
     * Sign an event with the user's private key
     * @param event The event to sign
     * @returns Promise that resolves to the signed event
     */
    signEvent(event: any): Promise<any>;

    /**
     * Get the relay URLs from the extension
     * @returns Promise that resolves to an array of relay URLs
     */
    getRelays?(): Promise<string[]>;
}

declare global {
    interface Window {
        nostr?: NostrProvider;
    }
}

export {};
----
types/settings.ts
// Re-export everything from base
export * from './settings/base';

----
types/webxr.d.ts
/**
 * WebXR API type extensions
 */

declare module 'three' {
  interface Object3DEventMap {
    connected: XRControllerEvent;
    disconnected: XRControllerEvent;
  }
}

interface XRControllerEvent extends THREE.Event {
  type: 'connected' | 'disconnected';
  data: XRInputSource;
}

interface XRLightEstimate {
  primaryLightIntensity?: { value: number };
  primaryLightDirection?: { x: number; y: number; z: number };
}

// Extend existing WebXR types
declare global {
  interface XRFrame {
    // Make getLightEstimate optional
    getLightEstimate?(): XRLightEstimate | null;
    getHitTestResults(hitTestSource: XRHitTestSource): XRHitTestResult[];
    getViewerPose(referenceSpace: XRReferenceSpace): XRViewerPose | null;
    getPose(space: XRSpace, baseSpace: XRReferenceSpace): XRPose | null;
  }

  interface XRSession {
    requestReferenceSpace(type: XRReferenceSpaceType): Promise<XRReferenceSpace>;
    // Make requestHitTestSource non-optional
    requestHitTestSource(options: XRHitTestOptionsInit): Promise<XRHitTestSource>;
    end(): Promise<void>;
    addEventListener(type: string, listener: EventListener): void;
    removeEventListener(type: string, listener: EventListener): void;
  }

  interface XRHitTestOptionsInit {
    space: XRSpace;
    offsetRay?: XRRay;
  }

  interface XRHitTestSource {
    cancel(): void;
  }

  interface XRHitTestResult {
    getPose(baseSpace: XRSpace): XRPose | null;
  }

  interface XRPose {
    transform: XRRigidTransform;
  }

  interface XRViewerPose extends XRPose {
    views: XRView[];
  }

  interface XRView {
    projectionMatrix: Float32Array;
    transform: XRRigidTransform;
  }

  interface XRRigidTransform {
    matrix: Float32Array;
    position: { x: number; y: number; z: number };
    orientation: { x: number; y: number; z: number; w: number };
  }

  interface XRReferenceSpace extends XRSpace {
    getOffsetReferenceSpace(originOffset: XRRigidTransform): XRReferenceSpace;
  }

  interface XRSpace {}

  interface XRRay {
    origin: DOMPointReadOnly;
    direction: DOMPointReadOnly;
    matrix: Float32Array;
  }

  type XRReferenceSpaceType = 
    | 'viewer'
    | 'local'
    | 'local-floor'
    | 'bounded-floor'
    | 'unbounded';

  interface XRInputSource {
    handedness: 'none' | 'left' | 'right';
    targetRayMode: 'gaze' | 'tracked-pointer' | 'screen';
    targetRaySpace: XRSpace;
    gripSpace?: XRSpace;
    profiles: string[];
    gamepad?: Gamepad;
    hand?: XRHand;
  }

  interface XRHand extends Map<XRHandJoint, XRJointSpace> {
    get(joint: XRHandJoint): XRJointSpace | undefined;
  }

  export type XRHandJoint =
    | 'wrist'
    | 'thumb-metacarpal'
    | 'thumb-phalanx-proximal'
    | 'thumb-phalanx-distal'
    | 'thumb-tip'
    | 'index-finger-metacarpal'
    | 'index-finger-phalanx-proximal'
    | 'index-finger-phalanx-intermediate'
    | 'index-finger-phalanx-distal'
    | 'index-finger-tip';

  export interface XRJointSpace extends XRSpace {
    jointRadius: number | undefined;
    position: { x: number; y: number; z: number };
    matrixWorld: THREE.Matrix4;
  }

  interface Navigator {
    xr?: {
      isSessionSupported(mode: string): Promise<boolean>;
      requestSession(mode: string, options?: XRSessionInit): Promise<XRSession>;
    };
  }

  interface XRSessionInit {
    requiredFeatures?: string[];
    optionalFeatures?: string[];
  }
}

// Prevent conflicts with @types/webxr
declare module '@types/webxr' {
  export {};
}

----
types/xr.ts
import * as THREE from 'three';
import { Platform } from '../core/types';

// Core XR Types
export type XRSessionMode = 'inline' | 'immersive-vr' | 'immersive-ar';
export type XRHandedness = 'none' | 'left' | 'right';
export type XRSessionState = 'inactive' | 'starting' | 'active' | 'ending' | 'cooldown';
export type XRHand = THREE.XRHand;

export type XRHandJoint =
    | 'wrist'
    | 'thumb-metacarpal'
    | 'thumb-phalanx-proximal'
    | 'thumb-phalanx-distal'
    | 'thumb-tip'
    | 'index-finger-metacarpal'
    | 'index-finger-phalanx-proximal'
    | 'index-finger-phalanx-intermediate'
    | 'index-finger-phalanx-distal'
    | 'index-finger-tip'
    | 'middle-finger-metacarpal'
    | 'middle-finger-phalanx-proximal'
    | 'middle-finger-phalanx-intermediate'
    | 'middle-finger-phalanx-distal'
    | 'middle-finger-tip'
    | 'ring-finger-metacarpal'
    | 'ring-finger-phalanx-proximal'
    | 'ring-finger-phalanx-intermediate'
    | 'ring-finger-phalanx-distal'
    | 'ring-finger-tip'
    | 'pinky-finger-metacarpal'
    | 'pinky-finger-phalanx-proximal'
    | 'pinky-finger-phalanx-intermediate'
    | 'pinky-finger-phalanx-distal'
    | 'pinky-finger-tip';

export interface XRSessionConfig {
    mode: XRSessionMode;
    features: {
        required?: string[];
        optional?: string[];
    };
    spaceType: XRReferenceSpaceType;
}

// Input and Interaction Types
export interface HapticActuator {
    pulse: (intensity: number, duration: number) => Promise<boolean>;
}

export interface WorldObject3D extends THREE.Object3D {
    getWorldPosition(target: THREE.Vector3): THREE.Vector3;
}

export interface XRControllerState {
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
    hapticActuator?: HapticActuator;
    platform: Platform;
}

export interface XRHandJointState {
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
    radius?: number;
}

export interface XRHandState {
    position: THREE.Vector3;
    joints: Map<XRHandJoint, XRHandJointState>;
    pinchStrength: number;
    gripStrength: number;
    platform: Platform;
}

export interface XRHandWithHaptics extends THREE.Group {
    hapticActuators?: HapticActuator[];
    hand: {
        joints: {
            [key in XRHandJoint]?: WorldObject3D;
        };
    };
    pinchStrength: number;
    gripStrength: number;
    userData: {
        hapticActuator?: HapticActuator;
        platform: Platform;
    };
}

// Input Configuration
export interface XRInputConfig {
    controllers: boolean;
    hands: boolean;
    haptics: boolean;
}

// Event Types
export interface XRControllerEvent {
    controller: XRSpace;
    inputSource: XRInputSource;
    hapticActuator?: HapticActuator;
}

export interface XRHandEvent {
    hand: XRHandWithHaptics;
    inputSource: XRInputSource;
}

export interface XRInteractionState {
    pinching: boolean;
    pinchStrength: number;
    gripping: boolean;
    gripStrength: number;
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
}

// Platform-specific Types
export interface QuestHandTracking extends XRHandState {
    confidence: number;
    gestureId?: number;
}

export interface QuestControllerTracking extends XRControllerState {
    thumbstick: THREE.Vector2;
    trigger: number;
    grip: number;
}

----
types/three-examples.d.ts
declare module 'three/examples/jsm/controls/OrbitControls' {
  import { Camera, EventDispatcher } from 'three';
  export class OrbitControls extends EventDispatcher {
    constructor(camera: Camera, domElement?: HTMLElement);
    enabled: boolean;
    enableDamping: boolean;
    dampingFactor: number;
    screenSpacePanning: boolean;
    minDistance: number;
    maxDistance: number;
    enableRotate: boolean;
    enableZoom: boolean;
    enablePan: boolean;
    rotateSpeed: number;
    zoomSpeed: number;
    panSpeed: number;
    update(): void;
    dispose(): void;
  }
}

declare module 'three/examples/jsm/postprocessing/EffectComposer' {
  import { WebGLRenderer, WebGLRenderTarget } from 'three';
  export class EffectComposer {
    constructor(renderer: WebGLRenderer);
    renderTarget1: WebGLRenderTarget;
    renderTarget2: WebGLRenderTarget;
    passes: any[];
    addPass(pass: any): void;
    render(): void;
    setSize(width: number, height: number): void;
  }
}

declare module 'three/examples/jsm/postprocessing/RenderPass' {
  import { Scene, Camera } from 'three';
  export class RenderPass {
    constructor(scene: Scene, camera: Camera);
  }
}

declare module 'three/examples/jsm/postprocessing/UnrealBloomPass' {
  import { Vector2 } from 'three';
  export class UnrealBloomPass {
    constructor(resolution: Vector2, strength: number, radius: number, threshold: number);
    enabled: boolean;
    strength: number;
    radius: number;
    threshold: number;
    resolution: Vector2;
  }
}

declare module 'three/examples/jsm/geometries/TextGeometry.js' {
  import { BufferGeometry, Vector3, Box3 } from 'three';
  export class TextGeometry extends BufferGeometry {
    constructor(text: string, parameters: TextGeometryParameters);
    boundingBox: Box3 | null;
    computeBoundingBox(): void;
  }
  
  export interface TextGeometryParameters {
    font: any;
    size?: number;
    depth?: number;
    curveSegments?: number;
    bevelEnabled?: boolean;
  }
}

declare module 'three/examples/jsm/loaders/FontLoader.js' {
  import { Loader } from 'three';
  export class FontLoader extends Loader {
    constructor();
    load(url: string, onLoad?: (font: Font) => void, onProgress?: (event: ProgressEvent) => void, onError?: (event: ErrorEvent) => void): void;
  }
  export class Font {
    constructor(data: any);
  }
}

declare module 'three/examples/jsm/webxr/XRControllerModelFactory' {
  import { Group } from 'three';
  export class XRControllerModelFactory {
    constructor();
    createControllerModel(controller: Group): Group;
  }
}
----
types/three.d.ts
declare module 'three' {
  export interface Event {
    type: string;
    target: Group;
  }

  export interface XRControllerEvent extends Event {
    type: 'connected' | 'disconnected';
    target: Group;
    data: XRInputSource;
  }

  export interface Object3DEventMap {
    connected: XRControllerEvent;
    disconnected: XRControllerEvent;
  }

  export interface EventDispatcher<E extends Event = Event> {
    addEventListener<T extends E['type']>(type: T, listener: (event: E & { type: T }) => void): void;
    removeEventListener<T extends E['type']>(type: T, listener: (event: E & { type: T }) => void): void;
    dispatchEvent(event: E): void;
  }

  export class Layers {
    mask: number;
    set(layer: number): void;
    enable(layer: number): void;
    disable(layer: number): void;
    toggle(layer: number): void;
    test(layers: Layers): boolean;
  }

  export class Object3D implements EventDispatcher<Event & XRControllerEvent> {
    position: Vector3;
    quaternion: Quaternion;
    scale: Vector3;
    matrix: Matrix4;
    matrixWorld: Matrix4;
    children: Object3D[];
    parent: Object3D | null;
    userData: any;
    visible: boolean;
    renderOrder: number;
    frustumCulled: boolean;
    matrixAutoUpdate: boolean;
    layers: Layers;
    add(...objects: Object3D[]): this;
    remove(...objects: Object3D[]): this;
    rotateX(angle: number): this;
    rotateY(angle: number): this;
    rotateZ(angle: number): this;
    updateMatrix(): void;
    updateMatrixWorld(force?: boolean): void;
    traverse(callback: (object: Object3D) => void): void;
    lookAt(x: number | Vector3, y?: number, z?: number): void;
    addEventListener<K extends keyof Object3DEventMap>(
      type: K,
      listener: (event: Object3DEventMap[K]) => void
    ): void;
    addEventListener(
      type: string,
      listener: (event: Event) => void
    ): void;
    removeEventListener<K extends keyof Object3DEventMap>(
      type: K,
      listener: (event: Object3DEventMap[K]) => void
    ): void;
    removeEventListener(
      type: string,
      listener: (event: Event) => void
    ): void;
    dispatchEvent(event: Event): void;
  }

  export class Group extends Object3D {
    constructor();
  }

  export class Scene extends Object3D {
    constructor();
    fog: FogExp2 | null;
    background: Color | Texture | null;
  }

  export class Material {
    transparent: boolean;
    opacity: number;
    depthWrite: boolean;
    depthTest: boolean;
    side: Side;
    color: Color;
    dispose(): void;
  }

  export class Mesh extends Object3D {
    constructor(geometry: BufferGeometry, material: Material);
    geometry: BufferGeometry;
    material: Material;
  }

  export class GridHelper extends Object3D {
    constructor(size: number, divisions: number, color1?: ColorRepresentation, color2?: ColorRepresentation);
    material: Material;
    geometry: BufferGeometry;
  }

  export class Light extends Object3D {
    constructor(color?: ColorRepresentation, intensity?: number);
    intensity: number;
  }

  export class DirectionalLight extends Light {
    constructor(color?: ColorRepresentation, intensity?: number);
    intensity: number;
  }

  export class AmbientLight extends Light {
    constructor(color?: ColorRepresentation, intensity?: number);
  }

  export class BufferAttribute {
    array: ArrayLike<number>;
    itemSize: number;
    count: number;
    normalized: boolean;
    needsUpdate: boolean;
    constructor(array: ArrayLike<number>, itemSize: number, normalized?: boolean);
    setX(index: number, x: number): this;
    setY(index: number, y: number): this;
    setZ(index: number, z: number): this;
    setW(index: number, w: number): this;
    setXY(index: number, x: number, y: number): this;
    setXYZ(index: number, x: number, y: number, z: number): this;
    setXYZW(index: number, x: number, y: number, z: number, w: number): this;
  }

  export class InstancedBufferAttribute extends BufferAttribute {
    constructor(array: ArrayLike<number>, itemSize: number, normalized?: boolean, meshPerAttribute?: number);
    meshPerAttribute: number;
  }

  export class InstancedMesh extends Mesh {
    constructor(geometry: BufferGeometry, material: Material | Material[], count: number);
    count: number;
    instanceMatrix: InstancedBufferAttribute;
    instanceColor: InstancedBufferAttribute | null;
    frustumCulled: boolean;
    setColorAt(index: number, color: Color): void;
    setMatrixAt(index: number, matrix: Matrix4): void;
    getMatrixAt(index: number, matrix: Matrix4): void;
    getColorAt(index: number, color: Color): void;
    dispose(): void;
  }

  export class MeshBasicMaterial extends Material {
    constructor(parameters?: MeshBasicMaterialParameters);
  }

  export class LineBasicMaterial extends Material {
    constructor(parameters?: MaterialParameters);
  }

  export class MeshPhongMaterial extends Material {
    constructor(parameters?: MeshPhongMaterialParameters);
    shininess: number;
    specular: Color;
  }

  export class MeshStandardMaterial extends Material {
    constructor(parameters?: MeshStandardMaterialParameters);
    metalness: number;
    roughness: number;
    map: Texture | null;
    emissive: Color;
  }

  export class SpriteMaterial extends Material {
    constructor(parameters?: SpriteMaterialParameters);
    map: Texture | null;
    color: Color;
    sizeAttenuation: boolean;
    rotation: number;
  }

  export class BufferGeometry {
    dispose(): void;
    rotateX(angle: number): this;
    rotateY(angle: number): this;
    rotateZ(angle: number): this;
    setAttribute(name: string, attribute: BufferAttribute): this;
    setIndex(index: BufferAttribute): this;
    computeBoundingSphere(): void;
    boundingSphere: { center: Vector3; radius: number } | null;
    boundingBox: { min: Vector3; max: Vector3 } | null;
  }

  export class PlaneGeometry extends BufferGeometry {
    constructor(width?: number, height?: number, widthSegments?: number, heightSegments?: number);
  }

  export class SphereGeometry extends BufferGeometry {
    constructor(radius?: number, widthSegments?: number, heightSegments?: number);
  }

  export class CylinderGeometry extends BufferGeometry {
    constructor(
      radiusTop?: number,
      radiusBottom?: number,
      height?: number,
      radialSegments?: number
    );
  }

  export class RingGeometry extends BufferGeometry {
    constructor(
      innerRadius?: number,
      outerRadius?: number,
      thetaSegments?: number
    );
  }

  export class Vector2 {
    x: number;
    y: number;
    constructor(x?: number, y?: number);
    set(x: number, y: number): this;
  }

  export class Vector3 {
    x: number;
    y: number;
    z: number;
    constructor(x?: number, y?: number, z?: number);
    set(x: number, y: number, z: number): this;
    copy(v: Vector3): this;
    add(v: Vector3): this;
    sub(v: Vector3): this;
    multiply(v: Vector3): this;
    multiplyScalar(s: number): this;
    normalize(): this;
    dot(v: Vector3): number;
    cross(v: Vector3): this;
    length(): number;
    lengthSq(): number;
    clone(): Vector3;
    fromArray(array: number[] | ArrayLike<number>, offset?: number): this;
    subVectors(a: Vector3, b: Vector3): this;
    addVectors(a: Vector3, b: Vector3): this;
    crossVectors(a: Vector3, b: Vector3): this;
    setFromMatrixPosition(m: Matrix4): this;
    distanceTo(v: Vector3): number;
    applyMatrix4(m: Matrix4): this;
    lookAt(v: Vector3): this;
  }

  export class Matrix4 {
    elements: number[];
    constructor();
    set(...elements: number[]): this;
    identity(): this;
    copy(m: Matrix4): this;
    compose(position: Vector3, quaternion: Quaternion, scale: Vector3): this;
    decompose(position: Vector3, quaternion: Quaternion, scale: Vector3): this;
    fromArray(array: ArrayLike<number>, offset?: number): this;
    extractRotation(m: Matrix4): this;
    makeRotationX(theta: number): this;
    makeRotationY(theta: number): this;
    makeRotationZ(theta: number): this;
    makeScale(x: number, y: number, z: number): this;
    multiply(m: Matrix4): this;
    makeRotationFromQuaternion(q: Quaternion): this;
  }

  export class Quaternion {
    x: number;
    y: number;
    z: number;
    w: number;
    constructor(x?: number, y?: number, z?: number, w?: number);
    setFromAxisAngle(axis: Vector3, angle: number): this;
    identity(): this;
    multiply(q: Quaternion): this;
    setFromEuler(euler: Euler): this;
  }

  export class Euler {
    constructor(x?: number, y?: number, z?: number, order?: string);
    x: number;
    y: number;
    z: number;
    order: string;
  }

  export class Color {
    constructor(color?: ColorRepresentation);
    set(color: ColorRepresentation): this;
    setHSL(h: number, s: number, l: number): Color;
    clone(): Color;
  }

  export class Sprite extends Object3D {
    constructor(material: SpriteMaterial);
    material: SpriteMaterial;
  }

  export class Raycaster {
    constructor();
    ray: Ray;
    near: number;
    far: number;
    camera: Camera;
    params: {
      Mesh?: {},
      Line?: {},
      LOD?: {},
      Points?: { threshold: number },
      Sprite?: {}
    };
    setFromCamera(coords: Vector2, camera: Camera): void;
    intersectObject(object: Object3D, recursive?: boolean, intersects?: Intersection[]): Intersection[];
    intersectObjects(objects: Object3D[], recursive?: boolean, intersects?: Intersection[]): Intersection[];
  }

  export class Ray {
    origin: Vector3;
    direction: Vector3;
    constructor(origin?: Vector3, direction?: Vector3);
  }

  export class WebGLRenderer {
    constructor(parameters?: WebGLRendererParameters);
    domElement: HTMLCanvasElement;
    setSize(width: number, height: number, updateStyle?: boolean): void;
    setPixelRatio(value: number): void;
    render(scene: Scene, camera: Camera): void;
    dispose(): void;
    xr: WebXRManager;
    setAnimationLoop(callback: ((time: number) => void) | null): void;
  }

  export interface WebXRManager {
    enabled: boolean;
    setSession(session: XRSession): Promise<void>;
    addEventListener(type: string, listener: EventListener): void;
    removeEventListener(type: string, listener: EventListener): void;
  }

  export class Camera extends Object3D {
    matrixWorldInverse: Matrix4;
    projectionMatrix: Matrix4;
    projectionMatrixInverse: Matrix4;
    layers: Layers;
    lookAt(target: Vector3 | number, y?: number, z?: number): void;
  }

  export class PerspectiveCamera extends Camera {
    constructor(fov?: number, aspect?: number, near?: number, far?: number);
    fov: number;
    aspect: number;
    near: number;
    far: number;
    updateProjectionMatrix(): void;
    lookAt(target: Vector3 | number, y?: number, z?: number): void;
  }

  export interface MaterialParameters {
    color?: ColorRepresentation;
    transparent?: boolean;
    opacity?: number;
    side?: Side;
    depthWrite?: boolean;
    depthTest?: boolean;
    map?: Texture;
  }

  export interface MeshBasicMaterialParameters extends MaterialParameters {
    wireframe?: boolean;
  }

  export interface MeshPhongMaterialParameters extends MaterialParameters {
    shininess?: number;
    specular?: ColorRepresentation;
  }
  export interface MeshStandardMaterialParameters extends MaterialParameters {
    metalness?: number;
    roughness?: number;
    map?: Texture | null;
    emissive?: ColorRepresentation;
  }

  export interface SpriteMaterialParameters extends MaterialParameters {
    sizeAttenuation?: boolean;
    rotation?: number;
  }

  export class Texture {
    constructor(image?: HTMLImageElement | HTMLCanvasElement);
    needsUpdate: boolean;
    dispose(): void;
  }

  export class FogExp2 {
    constructor(color: ColorRepresentation, density?: number);
    color: Color;
    density: number;
  }

  export interface Intersection {
    distance: number;
    point: Vector3;
    face: { normal: Vector3 } | null;
    object: Object3D;
  }

  export class MathUtils {
    static clamp(value: number, min: number, max: number): number;
    static degToRad(degrees: number): number;
    static radToDeg(radians: number): number;
    static lerp(x: number, y: number, t: number): number;
    static smoothstep(x: number, min: number, max: number): number;
  }

  export const DoubleSide: Side;
  export type Side = 0 | 1 | 2;
  export type ColorRepresentation = Color | string | number;

  export class Clock {
    constructor(autoStart?: boolean);
    start(): void;
    stop(): void;
    getElapsedTime(): number;
    getDelta(): number;
  }

  export class TorusGeometry extends BufferGeometry {
    constructor(radius?: number, tube?: number, radialSegments?: number, tubularSegments?: number, arc?: number);
  }

  export class IcosahedronGeometry extends BufferGeometry {
    constructor(radius?: number, detail?: number);
  }

  export class OctahedronGeometry extends BufferGeometry {
    constructor(radius?: number, detail?: number);
  }

  export class ShaderMaterial extends Material {
    constructor(parameters?: ShaderMaterialParameters);
    uniforms: { [uniform: string]: { value: any } };
    defines: { [define: string]: string | number | boolean };
    needsUpdate: boolean;
  }

  export interface Material {
    clone(): Material;
    uniforms?: { [uniform: string]: { value: any } };
    defines?: { [define: string]: string | number | boolean };
    needsUpdate: boolean;
  }

  export interface Vector3 {
    setScalar(scalar: number): Vector3;
    fromBufferAttribute(attribute: BufferAttribute, index: number): Vector3;
  }

  export interface Quaternion {
    copy(quaternion: Quaternion): Quaternion;
  }

  export interface Mesh extends Object3D {
    rotation: Euler;
    material: Material;
  }

  export interface Group extends Object3D {
    onBeforeRender?: (renderer: WebGLRenderer, scene: Scene, camera: Camera) => void;
  }

  export interface Color {
    setHSL(h: number, s: number, l: number): Color;
  }

  export interface XRHand extends Map<XRHandJoint, XRJointSpace> {
    joints: { [key: string]: XRJointSpace };
  }

  export const AdditiveBlending: number;
  export const NormalBlending: number;
  export const MultiplyBlending: number;

  export class TextGeometry extends BufferGeometry {
    constructor(text: string, parameters?: {
        font: Font;
        size?: number;
        height?: number;
        curveSegments?: number;
        bevelEnabled?: boolean;
        bevelThickness?: number;
        bevelSize?: number;
        bevelOffset?: number;
        bevelSegments?: number;
    });
    computeBoundingBox(): void;
    boundingBox: Box3 | null;
    dispose(): void;
    rotateX(angle: number): this;
    rotateY(angle: number): this;
    rotateZ(angle: number): this;
    translate(x: number, y: number, z: number): this;
  }

  export class Box3 {
    min: Vector3;
    max: Vector3;
    constructor(min?: Vector3, max?: Vector3);
  }

  export interface XRJointSpace {
    position: Vector3;
    matrixWorld: Matrix4;
  }

  export interface XRHand extends Map<XRHandJoint, XRJointSpace> {
    joints: { [key: string]: XRJointSpace };
  }
}

----
types/pako.d.ts
/**
 * Type definitions for pako 2.x
 * Project: https://github.com/nodeca/pako
 */

declare module 'pako' {
  /**
   * Inflate (decompress) data with pako
   */
  export function inflate(data: Uint8Array, options?: InflateOptions): Uint8Array;
  
  /**
   * Deflate (compress) data with pako
   */
  export function deflate(data: Uint8Array, options?: DeflateOptions): Uint8Array;
  
  /**
   * Inflate (decompress) data with pako (sync, no callback)
   */
  export function inflateRaw(data: Uint8Array, options?: InflateOptions): Uint8Array;
  
  /**
   * Deflate (compress) data with pako (sync, no callback)
   */
  export function deflateRaw(data: Uint8Array, options?: DeflateOptions): Uint8Array;
  
  /**
   * Inflate (decompress) data with gzip headers
   */
  export function ungzip(data: Uint8Array, options?: InflateOptions): Uint8Array;
  
  /**
   * Deflate (compress) data with gzip headers
   */
  export function gzip(data: Uint8Array, options?: DeflateOptions): Uint8Array;
  
  export interface InflateOptions {
    windowBits?: number;
    raw?: boolean;
    to?: 'string' | 'array';
    chunkSize?: number;
  }
  
  export interface DeflateOptions {
    level?: number;
    windowBits?: number;
    memLevel?: number;
    strategy?: number;
    raw?: boolean;
    to?: 'string';
    chunkSize?: number;
  }
}

// Add global pako declaration for browser scripts
interface Window {
  pako?: {
    inflate(data: Uint8Array, options?: any): Uint8Array;
    deflate(data: Uint8Array, options?: any): Uint8Array;
  };
} 
----
types/websocket.ts
// WebSocket types for graph synchronization

export enum ConnectionState {
    DISCONNECTED = 'DISCONNECTED',
    CONNECTING = 'CONNECTING',
    CONNECTED = 'CONNECTED',
    RECONNECTING = 'RECONNECTING'
}

export enum MessageType {
    PING = 'ping',                          // Connection health check
    PONG = 'pong'                           // Connection health response
}

// Connection health messages
export interface PingMessage {
    type: MessageType.PING;
    timestamp: number;
}

export interface PongMessage {
    type: MessageType.PONG;
    timestamp: number;
}

export type WebSocketMessage = PingMessage | PongMessage;

// WebSocket settings loaded via REST API
export interface WebSocketSettings {
    url: string;                  // WebSocket URL
    reconnectAttempts: number;     // Max reconnection attempts (default: 3)
    reconnectDelay: number;        // Delay between reconnects in ms (default: 5000)
    updateRate: number;            // Update rate in Hz
}

----
types/metadata.ts
export interface NodeMetadata {
    id: string;
    name: string;
    commitAge: number;        // Age in days
    hyperlinkCount: number;   // Number of hyperlinks
    fileSize: number;         // Size in bytes
    nodeSize: number;         // Normalized node size (0-50)
    importance: number;       // Normalized importance (0-1)
    position: {
        x: number;
        y: number;
        z: number;
    };
}

export interface HologramSettings {
    enabled: boolean;
    desktopQuality: 'low' | 'medium' | 'high';
    xrQuality: 'low' | 'medium';
    ringCount: number;
    ringSizes: number[];
    ringOpacity: number;
    ringColor: string;
    ringRotationSpeed: number;
    enableBuckminster: boolean;
    buckminsterScale: number;
    buckminsterOpacity: number;
    enableGeodesic: boolean;
    geodesicScale: number;
    geodesicOpacity: number;
    enableTriangleSphere: boolean;
    triangleSphereScale: number;
    triangleSphereOpacity: number;
    globalRotationSpeed: number;
    wireframeThickness: number;
}

export interface LabelSettings {
    textRenderingMode: 'sdf' | 'bitmap';
    textResolution: number;
    textPadding: number;
    textOutlineWidth: number;
    textOutlineColor: string;
    billboardMode: 'camera' | 'vertical';
    desktopFontSize: number;
    enableLabels: boolean;
    textColor: string;
}

// Alias for backward compatibility and clarity
export type Metadata = NodeMetadata;
----
types/three-ext.d.ts
import { Texture, BufferGeometry, BufferAttribute, Camera, Scene, WebGLRenderer, Object3D, Material, Vector2 } from 'three';

declare module 'three' {
    export const NearestFilter: TextureFilter;
    export const LinearFilter: TextureFilter;
    export const ClampToEdgeWrapping: TextureWrapping;
    
    export type TextureFilter = number;
    export type TextureWrapping = number;
    
    export interface Texture {
        minFilter: TextureFilter;
        magFilter: TextureFilter;
        wrapS: TextureWrapping;
        wrapT: TextureWrapping;
    }
    
    export interface BufferGeometry {
        getAttribute(name: string): BufferAttribute;
    }
    
    export interface Color {
        toArray(array?: number[], offset?: number): number[];
    }
    
    export interface PlaneGeometry extends BufferGeometry {
        getAttribute(name: string): BufferAttribute;
    }

    // OrbitControls
    export class OrbitControls {
        constructor(camera: Camera, domElement: HTMLElement);
        enabled: boolean;
        target: Vector3;
        minDistance: number;
        maxDistance: number;
        enableDamping: boolean;
        dampingFactor: number;
        update(): void;
        dispose(): void;
    }

    // Effect Composer
    export class EffectComposer {
        constructor(renderer: WebGLRenderer);
        addPass(pass: Pass): void;
        render(deltaTime?: number): void;
        setSize(width: number, height: number): void;
        dispose(): void;
    }

    export class Pass {
        enabled: boolean;
        needsSwap: boolean;
        clear: boolean;
        renderToScreen: boolean;
    }

    export class RenderPass extends Pass {
        constructor(scene: Scene, camera: Camera);
    }

    export class UnrealBloomPass extends Pass {
        constructor(resolution: Vector2, strength: number, radius: number, threshold: number);
        strength: number;
        radius: number;
        threshold: number;
        resolution: Vector2;
    }

    // XR Controller Model Factory
    export class XRControllerModelFactory {
        constructor();
        createControllerModel(controller: Object3D): Object3D;
    }

    // Grip Space
    export interface Group {
        grip?: Object3D;
    }

    // WebXR Manager
    export interface WebGLRenderer {
        xr: {
            enabled: boolean;
            isPresenting: boolean;
            setReferenceSpaceType(type: string): void;
            setSession(session: any): Promise<void>;
            getCamera(): Camera;
        };
    }
}

// Declare modules for examples
declare module 'three/examples/jsm/controls/OrbitControls' {
    export { OrbitControls } from 'three';
}

declare module 'three/examples/jsm/postprocessing/EffectComposer' {
    export { EffectComposer } from 'three';
}

declare module 'three/examples/jsm/postprocessing/RenderPass' {
    export { RenderPass } from 'three';
}

declare module 'three/examples/jsm/postprocessing/UnrealBloomPass' {
    export { UnrealBloomPass } from 'three';
}

declare module 'three/examples/jsm/webxr/XRControllerModelFactory' {
    export { XRControllerModelFactory } from 'three';
}

----
types/settings/utils.ts
import { Settings, SettingsPath, SettingsValue } from './base';

// Settings categories
export type SettingsCategory = keyof Settings;

// Re-export base types
export type { SettingsPath, SettingsValue };

/**
 * Get all possible setting paths from a settings object
 */
export function getAllSettingPaths(settings: Partial<Settings>): string[] {
    const paths: string[] = [];

    function traverse(obj: any, path: string = '') {
        if (!obj || typeof obj !== 'object') return;

        Object.entries(obj).forEach(([key, value]) => {
            const currentPath = path ? `${path}.${key}` : key;
            paths.push(currentPath);

            if (value && typeof value === 'object' && !Array.isArray(value)) {
                traverse(value, currentPath);
            }
        });
    }

    traverse(settings);
    return paths;
}

/**
 * Format a setting path into a human-readable name
 */
export function formatSettingName(path: string): string {
    return path
        .split('.')
        .pop()!
        .split(/(?=[A-Z])|[-_]/)
        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
        .join(' ');
}

/**
 * Get the appropriate step value for a numeric setting
 */
export function getStepValue(path: SettingsPath): string {
    // Physics settings need finer control
    if (path.includes('physics.attractionStrength') || 
        path.includes('physics.repulsionStrength') ||
        path.includes('physics.springStrength')) {
        return '0.001';
    }

    // Opacity and other normalized values
    if (path.includes('opacity') || 
        path.includes('metalness') || 
        path.includes('roughness')) {
        return '0.01';
    }

    // Size related settings
    if (path.includes('Size') || path.includes('scale')) {
        return '0.1';
    }

    // Animation speeds
    if (path.includes('speed') || path.includes('strength')) {
        return '0.05';
    }

    // Default step value
    return '1';
}

/**
 * Get the appropriate min/max values for a numeric setting
 */
export function getValueRange(path: SettingsPath): [number, number] {
    // Physics settings
    if (path.includes('physics.attractionStrength') || 
        path.includes('physics.repulsionStrength') ||
        path.includes('physics.springStrength')) {
        return [0, 2];
    }

    // Normalized values
    if (path.includes('opacity') || 
        path.includes('metalness') || 
        path.includes('roughness')) {
        return [0, 1];
    }

    // Size related settings
    if (path.includes('Size') || path.includes('scale')) {
        return [0.1, 10];
    }

    // Animation speeds
    if (path.includes('speed')) {
        return [0, 5];
    }

    // Strength values
    if (path.includes('strength')) {
        return [0, 2];
    }

    // Default range
    return [0, 100];
}

/**
 * Get the appropriate input type for a setting
 */
export function getInputType(path: SettingsPath, value: SettingsValue): string {
    // Handle specific path cases
    if (path.endsWith('.mode') || 
        path.endsWith('.spaceType') || 
        path.endsWith('.quality')) {
        return 'select';
    }

    // Handle value type cases
    if (typeof value === 'boolean') {
        return 'toggle';
    }

    if (typeof value === 'number') {
        return 'slider';
    }

    if (typeof value === 'string' && value.startsWith('#')) {
        return 'color';
    }

    if (Array.isArray(value)) {
        if (value.length === 2 && value.every(v => typeof v === 'number')) {
            return 'range';
        }
        return 'array';
    }

    return 'text';
}

/**
 * Get select options for a setting
 */
export function getSelectOptions(path: SettingsPath): string[] {
    if (path.endsWith('.mode')) {
        return ['immersive-ar', 'immersive-vr'];
    }

    if (path.endsWith('.spaceType')) {
        return ['viewer', 'local', 'local-floor', 'bounded-floor', 'unbounded'];
    }

    if (path.endsWith('.quality')) {
        return ['low', 'medium', 'high'];
    }

    return [];
}

/**
 * Check if a setting should be considered advanced
 */
export function isAdvancedSetting(path: SettingsPath): boolean {
    const advancedPatterns = [
        /physics\./,
        /rendering\.(?!quality|backgroundColour)/,
        /system\./,
        /debug\./,
        /enableInstancing/,
        /enableMetadata/,
        /compression/,
        /binary/
    ];

    return advancedPatterns.some(pattern => pattern.test(path));
}

/**
 * Get a setting value by path
 */
export function getSettingValue(settings: Settings, path: SettingsPath): SettingsValue | undefined {
    const parts = path.split('.');
    let current: any = settings;

    for (const part of parts) {
        if (current === undefined || current === null) return undefined;
        current = current[part];
    }

    return current;
}

/**
 * Set a setting value by path
 */
export function setSettingValue(settings: Settings, path: SettingsPath, value: SettingsValue): void {
    const parts = path.split('.');
    let current: any = settings;

    for (let i = 0; i < parts.length - 1; i++) {
        const part = parts[i];
        if (!(part in current)) {
            current[part] = {};
        }
        current = current[part];
    }

    current[parts[parts.length - 1]] = value;
}

/**
 * Check if a setting path is valid
 */
export function isValidSettingPath(settings: Settings, path: SettingsPath): boolean {
    return getSettingValue(settings, path) !== undefined;
}

/**
 * Format a setting value for display
 */
export function formatSettingValue(value: SettingsValue): string {
    if (typeof value === 'number') {
        // Use more decimal places for small values
        return value < 1 ? value.toFixed(3) : value.toFixed(1);
    }

    if (typeof value === 'boolean') {
        return value ? 'Enabled' : 'Disabled';
    }

    if (Array.isArray(value)) {
        return value.join(', ');
    }

    return String(value);
}

----
types/settings/base.ts
// Base settings interfaces
import { XRSettings } from './xr';

export interface Settings {
    visualization: {
        nodes: NodeSettings;
        edges: EdgeSettings;
        physics: PhysicsSettings;
        rendering: RenderingSettings;
        animations: AnimationSettings;
        labels: LabelSettings;
        bloom: BloomSettings;
        hologram: HologramSettings;
    };
    system: {
        websocket: WebSocketSettings;
        debug: DebugSettings;
    };
    xr: XRSettings;
}

export interface NodeSettings {
    quality: 'low' | 'medium' | 'high';
    enableInstancing: boolean;
    enableHologram: boolean;
    enableMetadataShape: boolean;
    enableMetadataVisualization: boolean;
    sizeRange: [number, number];  // In meters (e.g., [0.05, 0.2] for 5cm to 20cm)
    baseColor: string;
    opacity: number;
    colorRangeAge: [string, string];
    colorRangeLinks: [string, string];
    metalness: number;
    roughness: number;
}

export interface EdgeSettings {
    color: string;
    opacity: number;
    arrowSize: number;  // In meters (e.g., 0.02 for 2cm)
    baseWidth: number;  // In meters (e.g., 0.005 for 5mm)
    enableArrows: boolean;
    widthRange: [number, number];  // In meters (e.g., [0.005, 0.01] for 5-10mm)
    quality: 'low' | 'medium' | 'high';
    // New shader-based edge settings
    enableFlowEffect: boolean;
    flowSpeed: number;
    flowIntensity: number;
    glowStrength: number;
    distanceIntensity: number;
    useGradient: boolean;
    gradientColors: [string, string];
}

export interface AnimationSettings {
    enableNodeAnimations: boolean;
    enableMotionBlur: boolean;
    motionBlurStrength: number;
    selectionWaveEnabled: boolean;
    pulseEnabled: boolean;
    pulseSpeed: number;
    pulseStrength: number;
    waveSpeed: number;
}

export interface LabelSettings {
    enableLabels: boolean;
    desktopFontSize: number;
    textColor: string;
    textOutlineColor: string;
    textOutlineWidth: number;
    textResolution: number;
    textPadding: number;
    billboardMode: 'camera' | 'vertical';
    visibilityThreshold?: number; // Distance threshold for labels visibility
}

export interface BloomSettings {
    enabled: boolean;
    strength: number;
    radius: number;
    threshold: number;
    edgeBloomStrength: number;
    nodeBloomStrength: number;
    environmentBloomStrength: number;
}

export interface HologramSettings {
    ringCount: number;
    sphereSizes: number[];  // In meters (e.g., [0.08, 0.16] for 8cm and 16cm)
    ringRotationSpeed: number;
    globalRotationSpeed: number;
    ringColor: string;
    ringOpacity: number;
    enableBuckminster: boolean;
    buckminsterSize: number;  // In meters (e.g., 0.16 for 16cm)
    buckminsterOpacity: number;
    enableGeodesic: boolean;
    geodesicSize: number;  // In meters (e.g., 0.16 for 16cm)
    geodesicOpacity: number;
    enableTriangleSphere: boolean;
    triangleSphereSize: number;  // In meters (e.g., 0.16 for 16cm)
    triangleSphereOpacity: number;
}

export interface PhysicsSettings {
    enabled: boolean;
    attractionStrength: number;
    repulsionStrength: number;
    springStrength: number;
    damping: number;
    iterations: number;
    maxVelocity: number;
    collisionRadius: number;  // In meters (e.g., 0.1 for 10cm)
    enableBounds: boolean;
    boundsSize: number;  // In meters (e.g., 0.33 for 33cm)
    repulsionDistance: number;  // In meters (e.g., 0.5 for 50cm)
    massScale: number;
    boundaryDamping: number;
}

export interface RenderingSettings {
    ambientLightIntensity: number;
    directionalLightIntensity: number;
    environmentIntensity: number;
    backgroundColor: string;
    enableAmbientOcclusion: boolean;
    enableAntialiasing: boolean;
    enableShadows: boolean;
    shadowMapSize: number;
    shadowBias: number;
    context: 'ar' | 'desktop';
}

export interface WebSocketSettings {
    reconnectAttempts: number;
    reconnectDelay: number;
    binaryChunkSize: number;
    compressionEnabled: boolean;
    compressionThreshold: number;
    updateRate: number;
}

export interface DebugSettings {
    enabled: boolean;
    enableDataDebug: boolean;
    enableWebsocketDebug: boolean;
    logBinaryHeaders: boolean;
    logFullJson: boolean;
    logLevel: 'error' | 'warn' | 'info' | 'debug' | 'trace';
    logFormat: string;
}

// Helper type for settings paths
export type SettingsPath = string;

// Helper type for settings values
export type SettingsValue = string | number | boolean | number[] | object;

----
types/settings/validation.ts
import { Settings } from './base';

export interface ValidationError {
    path: string;
    message: string;
    value?: any;
}

export interface ValidationResult {
    isValid: boolean;
    errors: ValidationError[];
}

interface ValidationRule {
    validate: (value: any) => boolean;
    message: string;
}

const validationRules: Record<string, Record<string, ValidationRule>> = {
    visualization: {
        'nodes.sizeRange': {
            validate: (value: [number, number]) => 
                Array.isArray(value) && 
                value.length === 2 && 
                value[0] >= 0.01 && value[0] <= 0.5 &&  // 1cm to 50cm
                value[1] >= value[0] && value[1] <= 0.5,
            message: 'Node size range must be between 0.01m and 0.5m (1cm to 50cm), with min <= max'
        },
        'nodes.opacity': {
            validate: (value: number) => value >= 0 && value <= 1,
            message: 'Opacity must be between 0 and 1'
        },
        'nodes.metalness': {
            validate: (value: number) => value >= 0 && value <= 1,
            message: 'Metalness must be between 0 and 1'
        },
        'nodes.roughness': {
            validate: (value: number) => value >= 0 && value <= 1,
            message: 'Roughness must be between 0 and 1'
        },
        'edges.baseWidth': {
            validate: (value: number) => value >= 0.001 && value <= 0.02,  // 1mm to 20mm
            message: 'Edge width must be between 0.001m and 0.02m (1mm to 20mm)'
        },
        'edges.widthRange': {
            validate: (value: [number, number]) => 
                Array.isArray(value) && 
                value.length === 2 && 
                value[0] >= 0.001 && value[0] <= 0.02 &&  // 1mm to 20mm
                value[1] >= value[0] && value[1] <= 0.02,
            message: 'Edge width range must be between 0.001m and 0.02m (1mm to 20mm), with min <= max'
        },
        'edges.arrowSize': {
            validate: (value: number) => value >= 0.005 && value <= 0.05,  // 5mm to 50mm
            message: 'Arrow size must be between 0.005m and 0.05m (5mm to 50mm)'
        },
        'physics.attractionStrength': {
            validate: (value: number) => value >= 0 && value <= 1.0,
            message: 'Attraction strength must be between 0 and 100cm/s²'
        },
        'physics.repulsionStrength': {
            validate: (value: number) => value >= 0 && value <= 0.5,
            message: 'Repulsion strength must be between 0 and 50cm/s² (before 1/d² falloff)'
        },
        'physics.springStrength': {
            validate: (value: number) => value >= 0 && value <= 1.0,
            message: 'Spring strength must be between 0 and 100cm/s² per meter'
        },
        'physics.repulsionDistance': {
            validate: (value: number) => value >= 0.2 && value <= 1.0,  // 20cm to 1m
            message: 'Repulsion distance must be between 20cm and 1m'
        },
        'physics.collisionRadius': {
            validate: (value: number) => value >= 0.01 && value <= 0.2,  // 1cm to 20cm
            message: 'Collision radius must be between 1cm and 20cm'
        },
        'physics.boundsSize': {
            validate: (value: number) => value >= 0.5 && value <= 5.0,  // 50cm to 5m
            message: 'Bounds size (half-width) must be between 50cm and 5m'
        },
        'physics.massScale': {
            validate: (value: number) => value >= 0 && value <= 10,
            message: 'Mass scale must be between 0 and 10'
        },
        'physics.boundaryDamping': {
            validate: (value: number) => value >= 0 && value <= 1,
            message: 'Boundary damping (velocity retention) must be between 0% and 100%'
        },
        'hologram.sphereSizes': {
            validate: (value: number[]) => 
                Array.isArray(value) && 
                value.every(size => size >= 0.02 && size <= 0.5) &&  // 2cm to 50cm
                value.length >= 1,
            message: 'Hologram sphere sizes must be between 0.02m and 0.5m (2cm to 50cm)'
        },
        'hologram.triangleSphereSize': {
            validate: (value: number) => value >= 0.02 && value <= 0.5,  // 2cm to 50cm
            message: 'Triangle sphere size must be between 0.02m and 0.5m (2cm to 50cm)'
        },
        'hologram.buckminsterSize': {
            validate: (value: number) => value >= 0 && value <= 0.5,  // 0 to 50cm
            message: 'Buckminster size must be between 0m and 0.5m (0 to 50cm)'
        },
        'hologram.geodesicSize': {
            validate: (value: number) => value >= 0 && value <= 0.5,  // 0 to 50cm
            message: 'Geodesic size must be between 0m and 0.5m (0 to 50cm)'
        }
    },
    xr: {
        'roomScale': {
            validate: (value: number) => value >= 0.1 && value <= 2.0,
            message: 'Room scale must be between 0.1 and 2.0 (prefer 1.0 for real-world scale)'
        },
        'handPointSize': {
            validate: (value: number) => value >= 0.001 && value <= 0.02,  // 1mm to 20mm
            message: 'Hand point size must be between 0.001m and 0.02m (1mm to 20mm)'
        },
        'handRayWidth': {
            validate: (value: number) => value >= 0.001 && value <= 0.01,  // 1mm to 10mm
            message: 'Hand ray width must be between 0.001m and 0.01m (1mm to 10mm)'
        },
        'interactionRadius': {
            validate: (value: number) => value >= 0.05 && value <= 0.5,  // 5cm to 50cm
            message: 'Interaction radius must be between 0.05m and 0.5m (5cm to 50cm)'
        },
        'portalSize': {
            validate: (value: number) => value >= 0.5 && value <= 5.0,  // 50cm to 5m
            message: 'Portal size must be between 0.5m and 5.0m'
        },
        'portalEdgeWidth': {
            validate: (value: number) => value >= 0.005 && value <= 0.05,  // 5mm to 50mm
            message: 'Portal edge width must be between 0.005m and 0.05m (5mm to 50mm)'
        }
    }
};

export function validateSettings(settings: Partial<Settings>): ValidationResult {
    const errors: ValidationError[] = [];
    
    // Recursively validate all settings
    function validateObject(obj: any, path: string = '') {
        if (!obj || typeof obj !== 'object') return;
        
        Object.entries(obj).forEach(([key, value]) => {
            const currentPath = path ? `${path}.${key}` : key;
            
            // Check if there's a validation rule for this path
            for (const [category, rules] of Object.entries(validationRules)) {
                if (currentPath.startsWith(category)) {
                    const rule = rules[currentPath];
                    if (rule && !rule.validate(value)) {
                        errors.push({
                            path: currentPath,
                            message: rule.message,
                            value
                        });
                    }
                }
            }
            
            // Recursively validate nested objects
            if (value && typeof value === 'object' && !Array.isArray(value)) {
                validateObject(value, currentPath);
            }
        });
    }
    
    validateObject(settings);
    
    return {
        isValid: errors.length === 0,
        errors
    };
}

export function validateSettingValue(path: string, value: any, currentSettings: Settings): ValidationError[] {
    const errors: ValidationError[] = [];
    
    // Find matching validation rule
    for (const [category, rules] of Object.entries(validationRules)) {
        if (path.startsWith(category)) {
            const rule = rules[path];
            if (rule && !rule.validate(value)) {
                errors.push({
                    path,
                    message: rule.message,
                    value
                });
            }
        }
    }
    
    // Special validation for interdependent settings
    if (path.includes('physics')) {
        validatePhysicsSettings(path, value, currentSettings, errors);
    } else if (path.includes('rendering')) {
        validateRenderingSettings(path, value, currentSettings, errors);
    }
    
    return errors;
}

function validatePhysicsSettings(
    path: string,
    value: any,
    settings: Settings,
    errors: ValidationError[]
): void {
    const physics = settings.visualization.physics;
    
    // Validate repulsion distance relative to collision radius
    if (path === 'visualization.physics.repulsionDistance' && physics.collisionRadius) {
        const ratio = value / physics.collisionRadius;
        if (ratio < 4 || ratio > 10) {
            errors.push({
                path,
                message: 'Repulsion distance should be 4-10x the collision radius for stable spacing',
                value
            });
        }
    }
}

function validateRenderingSettings(
    path: string,
    value: any,
    settings: Settings,
    errors: ValidationError[]
): void {
    const rendering = settings.visualization.rendering;
    
    // Example: Warn about performance impact of combined settings
    if (path === 'visualization.rendering.quality' && value === 'high') {
        if (rendering.enableShadows && rendering.enableAmbientOcclusion) {
            errors.push({
                path,
                message: 'High quality with shadows and ambient occlusion may impact performance',
                value
            });
        }
    }
}

export function getValidationTooltip(path: string): string | undefined {
    for (const [category, rules] of Object.entries(validationRules)) {
        if (path.startsWith(category)) {
            const rule = rules[path];
            if (rule) {
                return rule.message;
            }
        }
    }
    return undefined;
}
----
types/settings/xr.ts
import { XRSessionMode } from '../xr';

export interface XRSettings {
    // Session Settings
    mode: XRSessionMode;
    roomScale: number;  // Scale factor for the entire XR scene (1.0 = real-world scale)
    spaceType: 'viewer' | 'local' | 'local-floor' | 'bounded-floor' | 'unbounded';
    quality: 'low' | 'medium' | 'high';
    
    // Platform Settings
    autoEnterAR?: boolean;
    hideControlPanel?: boolean;
    preferredMode?: XRSessionMode;
    
    // Hand Tracking
    enableHandTracking: boolean;
    handMeshEnabled: boolean;
    handMeshColor: string;
    handMeshOpacity: number;
    handPointSize: number;  // In meters (e.g., 0.006 for 6mm)
    handRayEnabled: boolean;
    handRayColor: string;
    handRayWidth: number;  // In meters (e.g., 0.003 for 3mm)
    gestureSmoothing: number;
    
    // Interaction
    enableHaptics: boolean;
    hapticIntensity: number;
    dragThreshold: number;
    pinchThreshold: number;
    rotationThreshold: number;
    interactionRadius: number;  // In meters (e.g., 0.15 for 15cm)
    movementSpeed: number;
    deadZone: number;
    movementAxes: {
        horizontal: number;
        vertical: number;
    };
    
    // Scene Understanding
    enableLightEstimation: boolean;
    enablePlaneDetection: boolean;
    enableSceneUnderstanding: boolean;
    planeColor: string;
    planeOpacity: number;
    showPlaneOverlay: boolean;
    snapToFloor: boolean;
    planeDetectionDistance?: number;  // In meters (e.g., 3.0 for 3m)
    
    // Passthrough
    enablePassthroughPortal: boolean;
    passthroughOpacity: number;
    passthroughBrightness: number;
    passthroughContrast: number;
    portalSize: number;  // In meters (e.g., 2.5 for 2.5m)
    portalEdgeColor: string;
    portalEdgeWidth: number;  // In meters (e.g., 0.02 for 2cm)
}

// Platform-specific XR settings
export interface QuestXRSettings extends XRSettings {
    enableHandMeshes: boolean;
    enableControllerModel: boolean;
    controllerProfile: string;
}

export interface WebXRSettings extends XRSettings {
    fallbackToInline: boolean;
    requireFeatures: string[];
    optionalFeatures: string[];
}

// Default XR settings
export const defaultXRSettings: XRSettings = {
    // Session Settings
    mode: 'immersive-ar',
    roomScale: 1.0,  // Real-world 1:1 scale
    spaceType: 'local-floor',
    quality: 'high',
    
    // Platform Settings
    autoEnterAR: true,
    hideControlPanel: true,
    preferredMode: 'immersive-ar',
    
    // Hand Tracking
    enableHandTracking: true,
    handMeshEnabled: true,
    handMeshColor: '#ffffff',
    handMeshOpacity: 0.5,
    handPointSize: 0.006,  // 6mm
    handRayEnabled: true,
    handRayColor: '#00ff00',
    handRayWidth: 0.003,  // 3mm
    gestureSmoothing: 0.5,
    
    // Interaction
    enableHaptics: true,
    hapticIntensity: 0.5,
    dragThreshold: 0.02,  // 2cm movement required to start drag
    pinchThreshold: 0.3,  // 30% pinch required for activation
    rotationThreshold: 0.08,  // 8% rotation required for activation
    interactionRadius: 0.15,  // 15cm interaction sphere
    movementSpeed: 0.08,  // 8cm per frame at full stick deflection
    deadZone: 0.12,  // 12% stick movement required
    movementAxes: {
        horizontal: 2,  // Right joystick X
        vertical: 3    // Right joystick Y
    },
    
    // Scene Understanding
    enableLightEstimation: true,
    enablePlaneDetection: true,
    enableSceneUnderstanding: true,
    planeColor: '#808080',
    planeOpacity: 0.5,
    showPlaneOverlay: true,
    snapToFloor: true,
    planeDetectionDistance: 3.0,  // 3 meters
    
    // Passthrough
    enablePassthroughPortal: false,
    passthroughOpacity: 1.0,
    passthroughBrightness: 1.0,
    passthroughContrast: 1.0,
    portalSize: 2.5,  // 2.5 meters
    portalEdgeColor: '#ffffff',
    portalEdgeWidth: 0.02  // 2cm
};

----
components/settings/ValidationErrorDisplay.ts
import { ValidationError } from '../../types/settings/validation';
import { SettingsStore } from '../../state/SettingsStore';
import { formatSettingName } from '../../types/settings/utils';

export class ValidationErrorDisplay {
    private container: HTMLDivElement;
    private errorList: HTMLUListElement;
    private unsubscribe: (() => void) | null = null;

    constructor(parentElement: HTMLElement) {
        // Create container
        this.container = document.createElement('div');
        this.container.className = 'validation-error-container';
        this.container.style.cssText = `
            display: none;
            position: fixed;
            bottom: 20px;
            right: 20px;
            max-width: 400px;
            background-color: #fee;
            border: 1px solid #faa;
            border-radius: 4px;
            padding: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            z-index: 1000;
            font-family: Arial, sans-serif;
        `;

        // Create header
        const header = document.createElement('div');
        header.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        `;

        const title = document.createElement('h3');
        title.textContent = 'Settings Validation Errors';
        title.style.cssText = `
            margin: 0;
            color: #d32f2f;
            font-size: 16px;
        `;

        const closeButton = document.createElement('button');
        closeButton.innerHTML = '&times;';
        closeButton.style.cssText = `
            background: none;
            border: none;
            color: #666;
            font-size: 20px;
            cursor: pointer;
            padding: 0 4px;
        `;
        closeButton.onclick = () => this.hide();

        header.appendChild(title);
        header.appendChild(closeButton);
        this.container.appendChild(header);

        // Create error list
        this.errorList = document.createElement('ul');
        this.errorList.style.cssText = `
            margin: 0;
            padding-left: 20px;
            color: #d32f2f;
            font-size: 14px;
        `;
        this.container.appendChild(this.errorList);

        // Add to parent
        parentElement.appendChild(this.container);

        // Subscribe to validation errors
        this.subscribeToValidationErrors();
    }

    private subscribeToValidationErrors(): void {
        const settingsStore = SettingsStore.getInstance();
        this.unsubscribe = settingsStore.subscribeToValidationErrors((errors: ValidationError[]) => {
            if (errors.length > 0) {
                this.showErrors(errors);
            } else {
                this.hide();
            }
        });
    }

    private showErrors(errors: ValidationError[]): void {
        // Clear existing errors
        this.errorList.innerHTML = '';

        // Add new errors
        errors.forEach(error => {
            const li = document.createElement('li');
            li.style.marginBottom = '4px';
            
            // Format the error message
            const settingName = formatSettingName(error.path.split('.').pop() || '');
            const formattedPath = error.path.split('.').map(formatSettingName).join(' → ');
            
            li.innerHTML = `
                <strong>${settingName}:</strong> ${error.message}<br>
                <small style="color: #666;">Path: ${formattedPath}</small>
            `;
            
            this.errorList.appendChild(li);
        });

        // Show the container
        this.container.style.display = 'block';

        // Auto-hide after 5 seconds
        setTimeout(() => this.hide(), 5000);
    }

    private hide(): void {
        this.container.style.display = 'none';
    }

    public dispose(): void {
        if (this.unsubscribe) {
            this.unsubscribe();
            this.unsubscribe = null;
        }
        this.container.remove();
    }

    // Helper method to create an instance and attach it to the document body
    public static initialize(): ValidationErrorDisplay {
        return new ValidationErrorDisplay(document.body);
    }
}

// Add CSS to document
const style = document.createElement('style');
style.textContent = `
    .validation-error-container {
        animation: slideIn 0.3s ease-out;
    }

    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    .validation-error-container button:hover {
        color: #000;
    }

    .validation-error-container ul li {
        line-height: 1.4;
    }
`;
document.head.appendChild(style);
----
services/SettingsEventEmitter.ts
import { createLogger, createErrorMetadata, createDataMetadata } from '../core/logger';
import { Settings } from '../types/settings/base';
import { ValidationError } from '../types/settings/validation';

const logger = createLogger('SettingsEventEmitter');

export enum SettingsEventType {
    SETTINGS_LOADED = 'settings:loaded',
    SETTINGS_SAVED = 'settings:saved',
    SETTINGS_CHANGED = 'settings:changed',
    SETTINGS_ERROR = 'settings:error',
    SETTINGS_SYNCED = 'settings:synced',
    SETTINGS_VALIDATION_ERROR = 'settings:validation_error',
    SECTION_DETACHED = 'section:detached',
    SECTION_DOCKED = 'section:docked',
    SECTION_MOVED = 'section:moved',
    SECTION_RESIZED = 'section:resized',
    SECTION_COLLAPSED = 'section:collapsed',
    SECTION_EXPANDED = 'section:expanded',
    LAYOUT_CHANGED = 'layout:changed',
    LAYOUT_SAVED = 'layout:saved',
    LAYOUT_LOADED = 'layout:loaded',
    PREVIEW_UPDATED = 'preview:updated',
    PREVIEW_RESET = 'preview:reset',
    AUTH_STATE_CHANGED = 'auth:state_changed'
}

export interface EventData {
    type: SettingsEventType;
    path?: string;
    value?: any;
    error?: Error;
    validationErrors?: ValidationError[];
    sectionId?: string;
    position?: { x: number; y: number };
    size?: { width: number; height: number };
    layout?: any;
    settings?: Partial<Settings>;
    authState?: {
        isAuthenticated: boolean;
        pubkey?: string;
    };
}

export type EventCallback = (data: EventData) => void;

export class SettingsEventEmitter {
    private static instance: SettingsEventEmitter | null = null;
    private listeners: Map<SettingsEventType, Set<EventCallback>>;
    private lastEvents: Map<SettingsEventType, EventData>;

    private constructor() {
        this.listeners = new Map();
        this.lastEvents = new Map();
    }

    public static getInstance(): SettingsEventEmitter {
        if (!SettingsEventEmitter.instance) {
            SettingsEventEmitter.instance = new SettingsEventEmitter();
        }
        return SettingsEventEmitter.instance;
    }

    public on(event: SettingsEventType, callback: EventCallback): () => void {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, new Set());
        }

        const callbacks = this.listeners.get(event)!;
        callbacks.add(callback);

        // Call with last event data if available
        const lastEvent = this.lastEvents.get(event);
        if (lastEvent) {
            try {
                callback(lastEvent);
            } catch (error) {
                logger.error(`Error in event listener for ${event}:`, createErrorMetadata(error));
            }
        }

        // Return unsubscribe function
        return () => {
            const callbacks = this.listeners.get(event);
            if (callbacks) {
                callbacks.delete(callback);
                if (callbacks.size === 0) {
                    this.listeners.delete(event);
                }
            }
        };
    }

    public emit(event: SettingsEventType, data: Omit<EventData, 'type'>): void {
        const eventData: EventData = { type: event, ...data };
        
        // Store last event data
        this.lastEvents.set(event, eventData);

        const callbacks = this.listeners.get(event);
        if (callbacks) {
            callbacks.forEach(callback => {
                try {
                    callback(eventData);
                } catch (error) {
                    logger.error(`Error in event listener for ${event}:`, createErrorMetadata(error));
                }
            });
        }

        // Log significant events
        switch (event) {
            case SettingsEventType.SETTINGS_ERROR:
            case SettingsEventType.SETTINGS_VALIDATION_ERROR:
                logger.error(`${event}:`, createDataMetadata({
                    error: data.error,
                    validationErrors: data.validationErrors
                }));
                break;
            case SettingsEventType.SETTINGS_LOADED:
            case SettingsEventType.SETTINGS_SAVED:
            case SettingsEventType.SETTINGS_SYNCED:
                logger.info(`${event} completed`);
                break;
            case SettingsEventType.AUTH_STATE_CHANGED:
                logger.info('Authentication state changed:', createDataMetadata(data.authState));
                break;
        }
    }

    public getLastEvent(event: SettingsEventType): EventData | undefined {
        return this.lastEvents.get(event);
    }

    public clearLastEvent(event: SettingsEventType): void {
        this.lastEvents.delete(event);
    }

    public clearAllListeners(): void {
        this.listeners.clear();
    }

    public dispose(): void {
        this.clearAllListeners();
        this.lastEvents.clear();
        SettingsEventEmitter.instance = null;
    }
}

// Create a singleton instance for easy access
export const settingsEvents = SettingsEventEmitter.getInstance();
----
services/SettingsLayoutManager.ts
import { createLogger, createErrorMetadata } from '../core/logger';
import { settingsEvents, SettingsEventType } from './SettingsEventEmitter';
import { SettingVisibility } from '../settings';

const logger = createLogger('SettingsLayoutManager');

export interface SectionLayout {
    id: string;
    isDetached: boolean;
    isCollapsed: boolean;
    isAdvanced: boolean;
    visibility: SettingVisibility;
    position?: { x: number; y: number };
    size?: { width: number; height: number };
    order: number;
}

export interface PanelLayout {
    sections: Record<string, SectionLayout>;
    version: string;
    timestamp: number;
    pubkey?: string;
}

export class SettingsLayoutManager {
    private static instance: SettingsLayoutManager | null = null;
    private readonly LOCAL_STORAGE_KEY = 'logseq_spring_panel_layout';
    private readonly LAYOUT_VERSION = '1.0.0';
    private currentLayout: PanelLayout;
    private currentPubkey: string | null = null;

    private constructor() {
        this.currentLayout = this.createDefaultLayout();
        this.initializeLayoutManager();
    }

    public static getInstance(): SettingsLayoutManager {
        if (!SettingsLayoutManager.instance) {
            SettingsLayoutManager.instance = new SettingsLayoutManager();
        }
        return SettingsLayoutManager.instance;
    }

    private initializeLayoutManager(): void {
        // Listen for section events
        settingsEvents.on(SettingsEventType.SECTION_DETACHED, ({ sectionId, position, size }) => {
            if (sectionId) {
                this.updateSectionLayout(sectionId, { isDetached: true, position, size });
            }
        });

        settingsEvents.on(SettingsEventType.SECTION_DOCKED, ({ sectionId }) => {
            if (sectionId) {
                this.updateSectionLayout(sectionId, { isDetached: false });
            }
        });

        settingsEvents.on(SettingsEventType.SECTION_MOVED, ({ sectionId, position }) => {
            if (sectionId && position) {
                this.updateSectionLayout(sectionId, { position });
            }
        });

        settingsEvents.on(SettingsEventType.SECTION_RESIZED, ({ sectionId, size }) => {
            if (sectionId && size) {
                this.updateSectionLayout(sectionId, { size });
            }
        });

        settingsEvents.on(SettingsEventType.SECTION_COLLAPSED, ({ sectionId }) => {
            if (sectionId) {
                this.updateSectionLayout(sectionId, { isCollapsed: true });
            }
        });

        settingsEvents.on(SettingsEventType.SECTION_EXPANDED, ({ sectionId }) => {
            if (sectionId) {
                this.updateSectionLayout(sectionId, { isCollapsed: false });
            }
        });

        // Listen for auth state changes
        settingsEvents.on(SettingsEventType.AUTH_STATE_CHANGED, ({ authState }) => {
            if (authState) {
                this.setCurrentPubkey(authState.isAuthenticated ? authState.pubkey ?? null : null);
            }
        });
    }

    private createDefaultLayout(): PanelLayout {
        return {
            sections: {
                visualization: {
                    id: 'visualization',
                    isDetached: false,
                    isCollapsed: false,
                    isAdvanced: false,
                    visibility: SettingVisibility.Basic,
                    order: 0
                },
                physics: {
                    id: 'physics',
                    isDetached: false,
                    isCollapsed: true,
                    isAdvanced: true,
                    visibility: SettingVisibility.Advanced,
                    order: 1
                },
                rendering: {
                    id: 'rendering',
                    isDetached: false,
                    isCollapsed: true,
                    isAdvanced: true,
                    visibility: SettingVisibility.Advanced,
                    order: 2
                },
                system: {
                    id: 'system',
                    isDetached: false,
                    isCollapsed: true,
                    isAdvanced: true,
                    visibility: SettingVisibility.Advanced,
                    order: 3
                },
                xr: {
                    id: 'xr',
                    isDetached: false,
                    isCollapsed: true,
                    isAdvanced: false,
                    visibility: SettingVisibility.Basic,
                    order: 4
                }
            },
            version: this.LAYOUT_VERSION,
            timestamp: Date.now()
        };
    }

    public setCurrentPubkey(pubkey: string | null): void {
        this.currentPubkey = pubkey;
        this.loadLayout();
    }

    private updateSectionLayout(sectionId: string, updates: Partial<SectionLayout>): void {
        const section = this.currentLayout.sections[sectionId];
        if (section) {
            Object.assign(section, updates);
            this.saveLayout();
            settingsEvents.emit(SettingsEventType.LAYOUT_CHANGED, {
                layout: this.currentLayout
            });
        }
    }

    public getSectionLayout(sectionId: string): SectionLayout | undefined {
        return this.currentLayout.sections[sectionId];
    }

    public getAllSectionLayouts(): Record<string, SectionLayout> {
        return { ...this.currentLayout.sections };
    }

    public async saveLayout(): Promise<void> {
        try {
            this.currentLayout.timestamp = Date.now();
            if (this.currentPubkey) {
                this.currentLayout.pubkey = this.currentPubkey;
            }

            localStorage.setItem(
                this.LOCAL_STORAGE_KEY,
                JSON.stringify(this.currentLayout)
            );

            settingsEvents.emit(SettingsEventType.LAYOUT_SAVED, {
                layout: this.currentLayout
            });

            logger.info('Layout saved successfully');
        } catch (error) {
            logger.error('Failed to save layout:', createErrorMetadata(error));
            throw error;
        }
    }

    public loadLayout(): void {
        try {
            const storedJson = localStorage.getItem(this.LOCAL_STORAGE_KEY);
            if (storedJson) {
                const stored: PanelLayout = JSON.parse(storedJson);

                // Version check
                if (stored.version !== this.LAYOUT_VERSION) {
                    logger.warn('Layout version mismatch, using defaults');
                    this.currentLayout = this.createDefaultLayout();
                    return;
                }

                // Pubkey check
                if (stored.pubkey && stored.pubkey !== this.currentPubkey) {
                    logger.warn('Layout pubkey mismatch, using defaults');
                    this.currentLayout = this.createDefaultLayout();
                    return;
                }

                this.currentLayout = stored;
                settingsEvents.emit(SettingsEventType.LAYOUT_LOADED, {
                    layout: this.currentLayout
                });
                logger.info('Layout loaded successfully');
            }
        } catch (error) {
            logger.error('Failed to load layout:', createErrorMetadata(error));
            this.currentLayout = this.createDefaultLayout();
        }
    }

    public resetLayout(): void {
        this.currentLayout = this.createDefaultLayout();
        this.saveLayout();
        settingsEvents.emit(SettingsEventType.LAYOUT_LOADED, {
            layout: this.currentLayout
        });
        logger.info('Layout reset to defaults');
    }

    public dispose(): void {
        SettingsLayoutManager.instance = null;
    }
}

// Create a singleton instance for easy access
export const layoutManager = SettingsLayoutManager.getInstance();
----
services/SettingsPreviewManager.ts
import { createLogger, createErrorMetadata } from '../core/logger';
import { settingsEvents, SettingsEventType } from './SettingsEventEmitter';
import { VisualizationController } from '../rendering/VisualizationController';
import { Settings } from '../types/settings/base';

const logger = createLogger('SettingsPreviewManager');

type VisualizationCategory = 'visualization' | 'physics' | 'rendering';

export interface PreviewState {
    originalSettings: Partial<Settings>;
    previewSettings: Partial<Settings>;
    isPreviewActive: boolean;
    previewTimeout: number | null;
}

export class SettingsPreviewManager {
    private static instance: SettingsPreviewManager | null = null;
    private visualizationController: VisualizationController;
    private readonly UPDATE_DELAY = 16; // ~60fps
    private previewStates: Map<VisualizationCategory, PreviewState>;

    private constructor() {
        this.visualizationController = VisualizationController.getInstance();
        this.previewStates = new Map();
        this.initializePreviewManager();
    }

    public static getInstance(): SettingsPreviewManager {
        if (!SettingsPreviewManager.instance) {
            SettingsPreviewManager.instance = new SettingsPreviewManager();
        }
        return SettingsPreviewManager.instance;
    }

    private initializePreviewManager(): void {
        // Listen for settings changes
        settingsEvents.on(SettingsEventType.SETTINGS_CHANGED, ({ path, value }) => {
            if (path) {
                this.handleSettingChange(path, value);
            }
        });

        // Listen for preview reset events
        settingsEvents.on(SettingsEventType.PREVIEW_RESET, ({ path }) => {
            if (path) {
                const category = this.getCategoryFromPath(path);
                if (category) {
                    this.resetPreview(category);
                }
            }
        });
    }

    private getCategoryFromPath(path: string): VisualizationCategory | null {
        const category = path.split('.')[0];
        if (['visualization', 'physics', 'rendering'].includes(category)) {
            return category as VisualizationCategory;
        }
        return null;
    }

    private handleSettingChange(path: string, value: any): void {
        const category = this.getCategoryFromPath(path);
        if (!category) return;

        let previewState = this.previewStates.get(category);

        if (!previewState) {
            previewState = {
                originalSettings: {},
                previewSettings: {},
                isPreviewActive: false,
                previewTimeout: null
            };
            this.previewStates.set(category, previewState);
        }

        // Store original value if not already stored
        if (!previewState.isPreviewActive) {
            previewState.originalSettings = this.visualizationController.getSettings(category);
            previewState.isPreviewActive = true;
        }

        // Update preview settings
        this.updatePreviewSettings(previewState, path, value);

        // Debounce preview update
        if (previewState.previewTimeout !== null) {
            window.clearTimeout(previewState.previewTimeout);
        }

        previewState.previewTimeout = window.setTimeout(() => {
            this.applyPreview(category, previewState);
            previewState.previewTimeout = null;
        }, this.UPDATE_DELAY);
    }

    private updatePreviewSettings(state: PreviewState, path: string, value: any): void {
        const parts = path.split('.');
        let current = state.previewSettings as any;

        // Create nested structure
        for (let i = 0; i < parts.length - 1; i++) {
            const part = parts[i];
            if (!(part in current)) {
                current[part] = {};
            }
            current = current[part];
        }

        // Set the value
        current[parts[parts.length - 1]] = value;
    }

    private applyPreview(category: VisualizationCategory, state: PreviewState): void {
        try {
            // Apply preview settings to visualization
            this.visualizationController.updateSettings(category, state.previewSettings);

            // Emit preview updated event
            settingsEvents.emit(SettingsEventType.PREVIEW_UPDATED, {
                path: category,
                value: state.previewSettings
            });

            logger.debug(`Preview applied for ${category}`);
        } catch (error) {
            logger.error(`Failed to apply preview for ${category}:`, createErrorMetadata(error));
            this.resetPreview(category);
        }
    }

    public resetPreview(category: VisualizationCategory): void {
        const state = this.previewStates.get(category);
        if (state?.isPreviewActive) {
            try {
                // Clear any pending preview
                if (state.previewTimeout !== null) {
                    window.clearTimeout(state.previewTimeout);
                    state.previewTimeout = null;
                }

                // Restore original settings
                this.visualizationController.updateSettings(category, state.originalSettings);

                // Reset state
                state.previewSettings = {};
                state.isPreviewActive = false;

                logger.debug(`Preview reset for ${category}`);
            } catch (error) {
                logger.error(`Failed to reset preview for ${category}:`, createErrorMetadata(error));
            }
        }
    }

    public resetAllPreviews(): void {
        ['visualization', 'physics', 'rendering'].forEach(category => {
            this.resetPreview(category as VisualizationCategory);
        });
    }

    public isPreviewActive(category: VisualizationCategory): boolean {
        const state = this.previewStates.get(category);
        return state?.isPreviewActive ?? false;
    }

    public getPreviewSettings(category: VisualizationCategory): Partial<Settings> | null {
        const state = this.previewStates.get(category);
        return state?.isPreviewActive ? state.previewSettings : null;
    }

    public dispose(): void {
        this.resetAllPreviews();
        this.previewStates.clear();
        SettingsPreviewManager.instance = null;
    }
}

// Create a singleton instance for easy access
export const previewManager = SettingsPreviewManager.getInstance();
----
services/NostrAuthService.ts
import { SettingsEventEmitter, SettingsEventType } from './SettingsEventEmitter';
import { SettingsStore } from '../state/SettingsStore';
import { SettingsPersistenceService } from './SettingsPersistenceService';
import { createLogger, createErrorMetadata, createDataMetadata } from '../core/logger';
import { buildApiUrl } from '../core/api';
import { API_ENDPOINTS } from '../core/constants';

const logger = createLogger('NostrAuthService');

declare global {
    interface Window {
        nostr?: {
            getPublicKey(): Promise<string>;
            signEvent(event: any): Promise<any>;
        };
    }
}

/**
 * Represents a Nostr user with their access rights
 */
export interface NostrUser {
    pubkey: string;
    isPowerUser: boolean;
    features: string[];
}

/**
 * Result of an authentication attempt
 */
export interface AuthResult {
    authenticated: boolean;
    user?: NostrUser;
    error?: string;
}

/**
 * Server authentication response type
 */
interface AuthResponse {
    user: {
        pubkey: string;
        is_power_user: boolean;
        npub?: string;
    };
    token: string;
    features: string[];
    valid?: boolean;
    error?: string;
}

/**
 * Service for handling Nostr authentication and feature access
 */
export class NostrAuthService {
    private static instance: NostrAuthService;
    private currentUser: NostrUser | null = null;
    private eventEmitter: SettingsEventEmitter;
    private settingsPersistence: SettingsPersistenceService;
    private settingsStore: SettingsStore;

    private constructor() {
        this.eventEmitter = SettingsEventEmitter.getInstance();
        this.settingsStore = SettingsStore.getInstance();
        this.settingsPersistence = SettingsPersistenceService.getInstance();
    }

    /**
     * Get the singleton instance of NostrAuthService
     */
    public static getInstance(): NostrAuthService {
        if (!NostrAuthService.instance) {
            NostrAuthService.instance = new NostrAuthService();
        }
        return NostrAuthService.instance;
    }

    /**
     * Initialize the auth service and check for existing session
     */
    public async initialize(): Promise<void> {
        const storedPubkey = localStorage.getItem('nostr_pubkey');
        if (storedPubkey) {
            // Wait for checkAuthStatus to complete
            await this.checkAuthStatus(storedPubkey);
            
            // Emit auth state change after initialization
            this.eventEmitter.emit(SettingsEventType.AUTH_STATE_CHANGED, {
                authState: {
                    isAuthenticated: this.currentUser !== null,
                    pubkey: this.currentUser?.pubkey
                }
            });
        }
    }

    /**
     * Check if Alby extension is available
     */
    private checkAlbyAvailability(): boolean {
        return typeof window !== 'undefined' && 'nostr' in window;
    }

    /**
     * Create a Nostr event for authentication
     */
    private async createAuthEvent(pubkey: string): Promise<any> {
        const createdAt = Math.floor(Date.now() / 1000);
        const tags = [
            ['domain', window.location.hostname],
            ['challenge', Date.now().toString()]
        ];

        // Create event with required fields
        const event = {
            kind: 27235,
            created_at: createdAt,
            tags,
            content: `Authenticate with ${window.location.hostname} at ${new Date().toISOString()}`,
            pubkey,
        };

        // Log the event for debugging
        logger.debug('Creating auth event:', createDataMetadata({
            kind: event.kind,
            created_at: event.created_at,
            tags: event.tags,
            content: event.content,
            pubkey: event.pubkey
        }));

        // Sign the event using the Alby extension
        const signedEvent = await window.nostr?.signEvent(event);
        if (!signedEvent) {
            throw new Error('Failed to sign authentication event');
        }
        
        logger.debug('Signed event:', createDataMetadata(signedEvent));
        return signedEvent;
    }

    /**
     * Attempt to authenticate with Nostr using Alby
     */
    public async login(): Promise<AuthResult> {
        try {
            // Check if Alby is available
            if (!this.checkAlbyAvailability()) {
                throw new Error('Alby extension not found. Please install Alby to use Nostr login.');
            }

            // Get public key from Alby
            const pubkey = await window.nostr?.getPublicKey();
            if (!pubkey) {
                throw new Error('Failed to get public key from Alby');
            }

            // Create and sign the authentication event
            const signedEvent = await this.createAuthEvent(pubkey);
            logger.debug('Sending auth request with event:', createDataMetadata(signedEvent));

            // Send authentication request to server
            const response = await fetch(buildApiUrl(API_ENDPOINTS.AUTH_NOSTR), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(signedEvent)
            });

            if (!response.ok) {
                const errorText = await response.text();
                logger.error('Server response:', createDataMetadata({
                    status: response.status,
                    body: errorText
                }));
                throw new Error(`Authentication failed (${response.status}): ${errorText}`);
            }

            const authData = await response.json() as AuthResponse;
            
            // Validate response data
            if (!authData || !authData.user || typeof authData.user.is_power_user !== 'boolean' || !authData.token) {
                throw new Error('Invalid authentication response from server');
            }

            // Log successful auth data for debugging
            logger.debug('Auth successful:', createDataMetadata({
                pubkey: authData.user.pubkey,
                isPowerUser: authData.user.is_power_user,
                features: authData.features
            }));

            this.currentUser = {
                pubkey: authData.user.pubkey,
                isPowerUser: authData.user.is_power_user,
                features: authData.features || []
            };

            localStorage.setItem('nostr_pubkey', pubkey);
            localStorage.setItem('nostr_token', authData.token);
            
            // Update both services
            this.settingsPersistence.setCurrentUser(pubkey, authData.user.is_power_user);
            this.eventEmitter.emit(SettingsEventType.AUTH_STATE_CHANGED, {
                authState: {
                    isAuthenticated: true,
                    pubkey
                }
            });

            return {
                authenticated: true,
                user: this.currentUser
            };
        } catch (error) {
            logger.error('Login failed:', createErrorMetadata(error));
            return {
                authenticated: false,
                error: error instanceof Error ? error.message : 'Unknown error occurred'
            } as AuthResult;
        }
    }

    /**
     * Log out the current user
     */
    public async logout(): Promise<void> {
        const currentPubkey = this.currentUser?.pubkey;
        const token = localStorage.getItem('nostr_token');
        
        if (currentPubkey && token) {
            try {
                await fetch(buildApiUrl(API_ENDPOINTS.AUTH_NOSTR), {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        pubkey: currentPubkey,
                        token
                    })
                });
            } catch (error) {
                logger.error('Logout request failed:', createErrorMetadata(error));
            }
        }

        localStorage.removeItem('nostr_pubkey');
        localStorage.removeItem('nostr_token');
        this.currentUser = null;
        
        this.settingsPersistence.setCurrentUser(null, false);
        this.eventEmitter.emit(SettingsEventType.AUTH_STATE_CHANGED, {
            authState: {
                isAuthenticated: false
            }
        });

        // If user was using server settings, revert to local settings
        if (currentPubkey) {
            await this.settingsPersistence.loadSettings();
            await this.settingsStore.initialize(); // Reinitialize UI store
        }
    }

    /**
     * Get the current authenticated user
     */
    public getCurrentUser(): NostrUser | null {
        return this.currentUser;
    }

    /**
     * Check if the current user is authenticated
     */
    public isAuthenticated(): boolean {
        return this.currentUser !== null;
    }

    /**
     * Check if the current user is a power user
     */
    public isPowerUser(): boolean {
        return this.currentUser?.isPowerUser || false;
    }

    /**
     * Check if the current user has access to a specific feature
     */
    public hasFeatureAccess(feature: string): boolean {
        return this.currentUser?.features.includes(feature) || false;
    }

    /**
     * Check authentication status with the server
     */
    private async checkAuthStatus(pubkey: string): Promise<void> {
        const token = localStorage.getItem('nostr_token');
        if (!token) {
            await this.logout();
            return;
        }

        try {
            const response = await fetch(buildApiUrl(API_ENDPOINTS.AUTH_NOSTR_VERIFY), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    pubkey,
                    token
                })
            });

            if (!response.ok) {
                throw new Error('Authentication check failed');
            }

            const verifyData = await response.json() as Partial<AuthResponse>;

            // Log the verification response for debugging
            logger.debug('Auth verification response:', createDataMetadata(verifyData));
            
            // Validate verify response data
            if (!verifyData || typeof verifyData.valid !== 'boolean') {
                throw new Error('Invalid verification response from server');
            }

            if (!verifyData.valid) {
                logger.error('Invalid session from server:', createDataMetadata(verifyData));
                throw new Error('Invalid session');
            }

            logger.debug('Auth check successful:', createDataMetadata({
                pubkey,
                isPowerUser: verifyData.user?.is_power_user
            }));

            // If user data is missing, log warning and logout
            if (!verifyData.user) {
                logger.warn('Valid verification but no user data provided');
                await this.logout();
                return;
            }

            // Set currentUser before emitting event
            this.currentUser = {
                pubkey,
                isPowerUser: verifyData.user.is_power_user,
                features: verifyData.features || []
            };
            
            // Update persistence service with verified user
            this.settingsPersistence.setCurrentUser(pubkey, verifyData.user.is_power_user);
        } catch (error) {
            logger.error('Auth check failed:', createErrorMetadata(error));
            await this.logout();
        }
    }

    /**
     * Subscribe to authentication state changes
     */
    public onAuthStateChanged(callback: (state: { authenticated: boolean; user?: NostrUser }) => void): () => void {
        return this.eventEmitter.on(SettingsEventType.AUTH_STATE_CHANGED, (data) => {
            callback({
                authenticated: data.authState?.isAuthenticated || false,
                user: this.currentUser || undefined
            });
        });
    }
}

// Export singleton instance
export const nostrAuth = NostrAuthService.getInstance();
----
services/SettingsPersistenceService.ts
import { Settings } from '../types/settings/base';
import { defaultSettings } from '../state/defaultSettings';
import { createLogger, createErrorMetadata, createDataMetadata } from '../core/logger';
import { validateSettings } from '../types/settings/validation';
import { buildApiUrl, getAuthHeaders } from '../core/api';
import { API_ENDPOINTS } from '../core/constants';

const logger = createLogger('SettingsPersistenceService');

export interface StoredSettings {
    settings: Settings;
    timestamp: number;
    version: string;
    pubkey?: string;
}

export class SettingsPersistenceService {
    private static instance: SettingsPersistenceService | null = null;
    private readonly LOCAL_STORAGE_KEY = 'logseq_spring_settings';
    private readonly SETTINGS_VERSION = '1.0.0';
    private isPowerUser: boolean = false;
    private currentPubkey: string | null = null;

    private constructor() {}

    public static getInstance(): SettingsPersistenceService {
        if (!SettingsPersistenceService.instance) {
            SettingsPersistenceService.instance = new SettingsPersistenceService();
        }
        return SettingsPersistenceService.instance;
    }

    public setCurrentUser(pubkey: string | null, isPowerUser: boolean = false): void {
        this.currentPubkey = pubkey;
        this.isPowerUser = isPowerUser;
        logger.debug('User state updated:', createDataMetadata({ pubkey, isPowerUser }));
    }

    public async saveSettings(settings: Settings): Promise<void> {
        try {
            // Validate settings before saving
            const validation = validateSettings(settings);
            if (!validation.isValid) {
                throw new Error(`Invalid settings: ${JSON.stringify(validation.errors)}`);
            }

            const storedSettings: StoredSettings = {
                settings,
                timestamp: Date.now(),
                version: this.SETTINGS_VERSION,
                pubkey: this.currentPubkey ?? undefined
            };

            // Save locally
            localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(storedSettings));

            // Always sync to server, endpoint depends on auth status
            try {
                await this.syncToServer(storedSettings);
            } catch (error) {
                logger.warn('Failed to sync settings to server:', createErrorMetadata(error));
            }

            logger.info('Settings saved successfully');
        } catch (error) {
            logger.error('Failed to save settings:', createErrorMetadata(error));
            throw error;
        }
    }

    public async loadSettings(): Promise<Settings> {
        try {            
            // First, check local storage for cached settings to avoid waiting for server
            const storedJson = localStorage.getItem(this.LOCAL_STORAGE_KEY);
            let cachedSettings: Settings | null = null;
            
            if (storedJson) {
                try {
                    const stored: StoredSettings = JSON.parse(storedJson);
                    
                    // Version check
                    if (stored.version !== this.SETTINGS_VERSION) {
                        logger.warn('Settings version mismatch, will try to migrate');
                        cachedSettings = this.migrateSettings(stored.settings);
                    } 
                    // Pubkey check
                    else if (stored.pubkey && stored.pubkey !== this.currentPubkey) {
                        logger.warn('Settings pubkey mismatch:', createDataMetadata({
                            stored: stored.pubkey,
                            current: this.currentPubkey
                        }));
                        // Don't use these settings, but don't set cachedSettings to null
                    } else {
                        // Validate loaded settings
                        const validation = validateSettings(stored.settings);
                        if (validation.isValid) {
                            cachedSettings = stored.settings;
                            logger.debug('Using cached settings while fetching from server');
                        } else {
                            logger.warn('Invalid stored settings, will try server');
                        }
                    }
                } catch (parseError) {
                    logger.warn('Failed to parse stored settings:', createErrorMetadata(parseError));
                }
            }
            
            // Start server request in parallel, but don't wait for it to complete before returning cached settings
            const serverPromise = (async () => {
                try {
                    // Use public settings endpoint if not authenticated
                    if (!this.currentPubkey) {
                        logger.debug('No pubkey available, loading public settings');
                        return await this.loadPublicSettings();
                    } else {
                        const serverSettings = await this.loadFromServer();
                        if (serverSettings) {                        
                            return serverSettings;
                        }
                    }
                } catch (error) {
                    logger.warn('Failed to load settings from server:', createErrorMetadata(error));
                    throw error;
                }
                return null;
            })();
            
            // If we have cached settings, return them immediately and update in background
            if (cachedSettings) {
                // Update from server in background
                serverPromise.then(serverSettings => {
                    if (serverSettings) {
                        // Store updated settings in local storage
                        const storedSettings = { 
                            settings: serverSettings, 
                            timestamp: Date.now(), 
                            version: this.SETTINGS_VERSION, 
                            pubkey: this.currentPubkey 
                        };
                        localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(storedSettings));
                        logger.info('Updated cached settings from server in background');
                    }
                }).catch(error => {
                    logger.warn('Background settings update failed:', createErrorMetadata(error));
                });
                
                return cachedSettings;
            }
            
            // If no cached settings, wait for server response
            try {
                const serverSettings = await serverPromise;
                if (serverSettings) {
                    return serverSettings;
                }
            } catch (error) {
                logger.warn('Failed to load settings from server after cache miss:', createErrorMetadata(error));
            }

            // No cached settings and server failed, use defaults
            logger.info('Using default settings as fallback');
            return { ...defaultSettings };
        } catch (error) {
            logger.error('Failed to load settings:', createErrorMetadata(error));
            return { ...defaultSettings };
        }
    }

    private async syncToServer(storedSettings: StoredSettings): Promise<void> {
        const MAX_RETRIES = 3;
        const INITIAL_TIMEOUT = 5000; // 5 seconds
        const MAX_TIMEOUT = 30000; // 30 seconds
        let retryCount = 0;
        let timeout = INITIAL_TIMEOUT;

        while (retryCount <= MAX_RETRIES) {
            try {
                // Use different endpoint based on auth status
                // Power users use /settings to modify global settings
                // Regular users use /settings/sync for their personal settings
                const endpoint = this.isPowerUser ? 
                    API_ENDPOINTS.SETTINGS_ROOT : 
                    `${API_ENDPOINTS.SETTINGS_ROOT}/sync`;

                logger.debug(`Syncing settings to server (attempt ${retryCount + 1}/${MAX_RETRIES + 1})`);
                
                // Create an AbortController for timeout
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), timeout);
                
                const response = await fetch(buildApiUrl(endpoint), {
                    method: 'POST',
                    headers: getAuthHeaders(),
                    body: JSON.stringify(storedSettings.settings),
                    signal: controller.signal
                }).finally(() => clearTimeout(timeoutId));

                if (!response.ok) {
                    const errorText = await response.text();
                    if (response.status === 403) {
                        throw new Error(`Permission denied: ${this.isPowerUser ? 'Power user validation failed' : 'Regular user attempted to modify global settings'}`);
                    } else {
                        throw new Error(`Server returned ${response.status}: ${errorText}`);
                    }
                }

                logger.info('Settings synced to server successfully');
                return; // Success - exit the retry loop
            } catch (error) {
                retryCount++;
                
                if (error instanceof DOMException && error.name === 'AbortError') {
                    logger.warn(`Settings sync timed out after ${timeout}ms`);
                } else {
                    logger.error('Failed to sync settings to server:', createErrorMetadata(error));
                }
                
                if (retryCount <= MAX_RETRIES) {
                    // Exponential backoff with jitter
                    const jitter = Math.random() * 1000;
                    timeout = Math.min(timeout * 1.5 + jitter, MAX_TIMEOUT);
                    logger.info(`Retrying settings sync in ${Math.round(timeout/1000)}s (attempt ${retryCount + 1}/${MAX_RETRIES + 1})`);
                    await new Promise(resolve => setTimeout(resolve, timeout));
                } else {
                    logger.error(`Failed to sync settings after ${MAX_RETRIES + 1} attempts`);
                    throw error;
                }
            }
        }
    }

    private async loadPublicSettings(): Promise<Settings> {
        try {
            const response = await fetch(buildApiUrl(API_ENDPOINTS.SETTINGS_ROOT), {
                method: 'GET',
                headers: getAuthHeaders()
            });

            if (!response.ok) {
                throw new Error(`Server returned ${response.status}: ${await response.text()}`);
            }

            const settings = await response.json() as Settings;
            
            // Additional validation for required sections
            if (!settings || !settings.system || !settings.xr) {
                logger.error('Invalid server settings: Missing required sections');
                return { ...defaultSettings };
            }

            const validation = validateSettings(settings);
            if (!validation.isValid) {
                throw new Error(`Invalid server settings: ${JSON.stringify(validation.errors)}`);
            }

            return settings;
        } catch (error) {
            logger.error('Failed to load public settings:', createErrorMetadata(error));
            return { ...defaultSettings };
        }
    }

    private async loadFromServer(): Promise<Settings | null> {
        const TIMEOUT = 8000; // 8 seconds timeout for loading settings
        
        try {
            // Use different endpoint based on auth status
            // Power users get global settings from /settings
            // Regular users get personal settings from /settings/sync
            const endpoint = this.isPowerUser ? 
                API_ENDPOINTS.SETTINGS_ROOT : 
                `${API_ENDPOINTS.SETTINGS_ROOT}/sync`;

            // Create an AbortController for timeout
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), TIMEOUT);
            
            logger.debug(`Loading settings from server with ${TIMEOUT}ms timeout`);
            const response = await fetch(buildApiUrl(endpoint), {
                headers: getAuthHeaders(),
                signal: controller.signal
            }).finally(() => clearTimeout(timeoutId));

            if (!response.ok) {
                if (response.status === 404) {
                    return null;
                }
                const errorText = await response.text();
                if (response.status === 403) {
                    throw new Error(`Permission denied: ${this.isPowerUser ? 'Power user validation failed' : 'Regular user attempted to access global settings'}`);
                } else {
                    throw new Error(`Server returned ${response.status}: ${errorText}`);
                }
            }

            const serverSettings = await response.json() as Settings;
            
            // Additional validation for required sections
            if (!serverSettings || !serverSettings.system || !serverSettings.xr) {
                logger.error('Invalid server settings: Missing required sections');
                throw new Error('Server returned invalid settings structure');
            }

            // Validate server settings
            const validation = validateSettings(serverSettings);
            if (!validation.isValid) {
                throw new Error(`Invalid server settings: ${JSON.stringify(validation.errors)}`);
            }

            // Store in local storage with version and pubkey
            const storedSettings = { settings: serverSettings, timestamp: Date.now(), version: this.SETTINGS_VERSION, pubkey: this.currentPubkey };
            localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(storedSettings));
            logger.info('Successfully loaded and cached settings from server');

            return serverSettings;
        } catch (error) {
            if (error instanceof DOMException && error.name === 'AbortError') {
                logger.error(`Settings load timed out after ${TIMEOUT}ms`);
                throw new Error(`Settings load timed out after ${TIMEOUT}ms`);
            }
            logger.error('Failed to load settings from server:', createErrorMetadata(error));
            throw error;
        }
    }

    private migrateSettings(oldSettings: Settings): Settings {
        // Implement version-specific migrations here
        logger.info('Migrating settings from older version');
        
        // For now, just merge with defaults
        return {
            ...defaultSettings,
            ...oldSettings,
            // Ensure critical sections are preserved
            system: {
                ...defaultSettings.system,
                ...oldSettings.system
            },
            xr: {
                ...defaultSettings.xr,
                ...oldSettings.xr
            }
        };
    }

    public clearSettings(): void {
        localStorage.removeItem(this.LOCAL_STORAGE_KEY);
        this.isPowerUser = false;  // Reset power user status on clear
        logger.info('Settings cleared');
    }

    public dispose(): void {
        SettingsPersistenceService.instance = null;
    }
}
----
utils/eventEmitter.ts
type EventCallback<T = any> = (data: T) => void;
type EventMap = Record<string, any>;

export class EventEmitter<Events extends EventMap = EventMap> {
    private events: {
        [E in keyof Events]?: EventCallback<Events[E]>[];
    } = {};

    on<E extends keyof Events>(event: E, callback: EventCallback<Events[E]>): void {
        if (!this.events[event]) {
            this.events[event] = [];
        }
        this.events[event]?.push(callback);
    }

    emit<E extends keyof Events>(event: E, data: Events[E]): void {
        const callbacks = this.events[event];
        if (callbacks) {
            callbacks.forEach(callback => callback(data));
        }
    }

    off<E extends keyof Events>(event: E, callback: EventCallback<Events[E]>): void {
        const callbacks = this.events[event];
        if (callbacks) {
            this.events[event] = callbacks.filter(cb => cb !== callback);
        }
    }
} 
----
utils/vectorUtils.ts
import { Vector3 } from 'three';

/**
 * Create a Vector3 from x,y,z components
 */
export function createVector3(x: number, y: number, z: number): Vector3 {
    return new Vector3(x, y, z);
}

/**
 * Create a zero Vector3
 */
export function zeroVector3(): Vector3 {
    return new Vector3(0, 0, 0);
}

/**
 * Convert object with x,y,z properties to Vector3
 */
export function objectToVector3(obj: { x: number; y: number; z: number }): Vector3 {
    return new Vector3(obj.x, obj.y, obj.z);
}

/**
 * Convert Vector3 to object with x,y,z properties (for logging/serialization)
 */
export function vector3ToObject(vec: Vector3): { x: number; y: number; z: number } {
    return { x: vec.x, y: vec.y, z: vec.z };
}

/**
 * Clamp a Vector3's components between min and max values
 */
export function clampVector3(vec: Vector3, min: number, max: number): Vector3 {
    return new Vector3(
        Math.max(min, Math.min(max, vec.x)),
        Math.max(min, Math.min(max, vec.y)),
        Math.max(min, Math.min(max, vec.z))
    );
}

/**
 * Check if a Vector3 has valid components (finite, non-NaN)
 */
export function isValidVector3(vec: Vector3): boolean {
    return !isNaN(vec.x) && !isNaN(vec.y) && !isNaN(vec.z) &&
           isFinite(vec.x) && isFinite(vec.y) && isFinite(vec.z);
}

/**
 * Compare two Vector3s for equality within a small epsilon
 */
export function vector3Equals(a: Vector3, b: Vector3, epsilon: number = 0.000001): boolean {
    return Math.abs(a.x - b.x) < epsilon &&
           Math.abs(a.y - b.y) < epsilon &&
           Math.abs(a.z - b.z) < epsilon;
}

----
diagnostics/systemDiagnostics.ts
import { createLogger } from '../core/logger';
import { WebSocketService } from '../websocket/websocketService';
import { graphDataManager } from '../state/graphData';
import { debugState } from '../core/debugState';
import { SettingsStore } from '../state/SettingsStore';

const logger = createLogger('SystemDiagnostics');

/**
 * SystemDiagnostics provides tools for diagnosing and debugging the application.
 * It offers methods to analyze various aspects of the system and log detailed information.
 */
export class SystemDiagnostics {
    private static instance: SystemDiagnostics | null = null;
    private webSocketService: WebSocketService;
    private settingsStore: SettingsStore;
    private isActive: boolean = false;
    private intervalId: number | null = null;
    
    private constructor() {
        this.webSocketService = WebSocketService.getInstance();
        this.settingsStore = SettingsStore.getInstance();
        logger.info('SystemDiagnostics initialized');
    }
    
    public static getInstance(): SystemDiagnostics {
        if (!SystemDiagnostics.instance) {
            SystemDiagnostics.instance = new SystemDiagnostics();
        }
        return SystemDiagnostics.instance;
    }
    
    /**
     * Start continuous diagnostics logging
     * @param intervalMs Interval in milliseconds between diagnostics runs
     */
    public startDiagnostics(intervalMs: number = 5000): void {
        if (this.isActive) {
            logger.warn('Diagnostics already running');
            return;
        }
        
        logger.info(`Starting system diagnostics with ${intervalMs}ms interval`);
        this.isActive = true;
        
        // Enable all debug flags
        // Use the settings store to update debug settings
        this.settingsStore.set('system.debug.enabled', true);
        this.settingsStore.set('system.debug.enable_data_debug', true);
        this.settingsStore.set('system.debug.enable_websocket_debug', true);
        this.settingsStore.set('system.debug.enable_node_debug', true);
        this.settingsStore.set('system.debug.enable_shader_debug', true);
        this.settingsStore.set('system.debug.enable_physics_debug', true);
        this.settingsStore.set('system.debug.enable_matrix_debug', true);
        
        // Log the current debug state
        logger.info('Debug flags enabled:', {
            globalDebug: debugState.isEnabled(),
            dataDebug: debugState.isDataDebugEnabled(),
            websocketDebug: debugState.isWebsocketDebugEnabled(),
            nodeDebug: debugState.isNodeDebugEnabled()
        });
        
        // Run initial diagnostics immediately
        this.runDiagnostics();
        
        // Set up interval for continuous diagnostics
        this.intervalId = window.setInterval(() => {
            this.runDiagnostics();
        }, intervalMs);
    }
    
    /**
     * Stop continuous diagnostics logging
     */
    public stopDiagnostics(): void {
        if (!this.isActive || this.intervalId === null) {
            logger.warn('Diagnostics not running');
            return;
        }
        
        logger.info('Stopping system diagnostics');
        window.clearInterval(this.intervalId);
        this.intervalId = null;
        this.isActive = false;
    }
    
    /**
     * Run a full system diagnostics check
     */
    public runDiagnostics(): void {
        try {
            logger.info('Running full system diagnostics');
            
            this.checkWebSocketStatus();
            this.checkGraphData();
            this.checkRendererStatus();
            this.checkMemoryUsage();
            
            logger.info('Diagnostics completed successfully');
        } catch (error) {
            logger.error('Error running diagnostics', {
                error: error instanceof Error ? error.message : String(error),
                stack: error instanceof Error ? error.stack : undefined
            });
        }
    }
    
    /**
     * Check WebSocket connection status and health
     */
    private checkWebSocketStatus(): void {
        // Get connection status as string safely
        const connectionStatus = String(this.webSocketService.getConnectionStatus());
        
        logger.info('WebSocket status:', { 
            statusString: connectionStatus, 
            isConnected: connectionStatus === 'connected',
            readyState: this.getWebSocketReadyState()
        });
        
        // If not connected, try to reconnect
        if (connectionStatus !== 'connected') {
            logger.warn('WebSocket not connected, trying to reconnect');
            this.webSocketService.connect().catch(error => {
                logger.error('Failed to reconnect', { error });
            });
        }
    }

    /**
     * Get the current WebSocket readyState as a string
     */
    private getWebSocketReadyState(): string {
        const ws = (this.webSocketService as any).ws;
        const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
        
        if (!ws) {
            return 'CLOSED (No WebSocket)';
        }
        
        // readyState is a number from 0-3
        const readyState = ws.readyState;
        
        if (readyState >= 0 && readyState <= 3) {
            return `${readyStates[readyState]} (${readyState})`;
        }
        
        // Fallback for unexpected values
        if (typeof readyState === 'number') {
            return `UNKNOWN (${readyState})`;
        }
        
        return 'UNKNOWN (null)';
    }
    
    /**
     * Check graph data state
     */
    private checkGraphData(): void {
        const graphData = graphDataManager.getGraphData();
        logger.info('Graph data status:', {
            nodeCount: graphData.nodes.length,
            edgeCount: graphData.edges.length,
            metadata: graphData.metadata
        });
        
        // Check sample node positions
        if (graphData.nodes.length > 0) {
            const sampleNodes = graphData.nodes.slice(0, 3);
            logger.info('Sample node positions:', {
                samples: sampleNodes.map(node => ({
                    id: node.id,
                    position: node.data.position,
                    velocity: node.data.velocity,
                    metadata: {
                        name: node.data.metadata?.name,
                        fileSize: node.data.metadata?.fileSize
                    }
                }))
            });
        }
    }
    
    /**
     * Check renderer status
     */
    private checkRendererStatus(): void {
        // Get WebGL context information
        try {
            const canvas = document.querySelector('canvas');
            if (!canvas) {
                logger.warn('No canvas element found');
                return;
            }
            
            const gl = canvas.getContext('webgl') || canvas.getContext('webgl2');
            if (!gl) {
                logger.error('WebGL context not available');
                return;
            }
            
            const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
            
            logger.info('WebGL context info:', {
                webgl2: gl instanceof WebGL2RenderingContext,
                vendor: debugInfo ? gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL) : 'unknown',
                renderer: debugInfo ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) : 'unknown',
                maxTextureSize: gl.getParameter(gl.MAX_TEXTURE_SIZE),
                maxVaryings: gl.getParameter(gl.MAX_VARYING_VECTORS),
                maxVertexAttribs: gl.getParameter(gl.MAX_VERTEX_ATTRIBS),
                maxVertexUniforms: gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS),
                maxFragmentUniforms: gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS)
            });
            
            // Check for WebGL errors
            const error = gl.getError();
            if (error !== gl.NO_ERROR) {
                logger.error('WebGL error detected', { 
                    code: error,
                    description: this.getWebGLErrorDescription(error)
                });
            }
        } catch (error) {
            logger.error('Error checking renderer status', { error });
        }
    }
    
    /**
     * Check memory usage
     */
    private checkMemoryUsage(): void {
        if (window.performance && (performance as any).memory) {
            const memory = (performance as any).memory;
            logger.info('Memory usage:', {
                usedJSHeapSize: this.formatBytes(memory.usedJSHeapSize),
                totalJSHeapSize: this.formatBytes(memory.totalJSHeapSize),
                jsHeapSizeLimit: this.formatBytes(memory.jsHeapSizeLimit),
                percentUsed: (memory.usedJSHeapSize / memory.totalJSHeapSize * 100).toFixed(1) + '%'
            });
        }
    }
    
    /**
     * Convert bytes to a human-readable format
     */
    private formatBytes(bytes: number): string {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    /**
     * Get a human-readable description of a WebGL error code
     */
    private getWebGLErrorDescription(errorCode: number): string {
        // Get a sample WebGL context to access error constants
        const canvas = document.createElement('canvas');
        const gl = canvas.getContext('webgl') || canvas.getContext('webgl2');
        if (!gl) return 'Unknown error';
        
        switch (errorCode) {
            case gl.INVALID_ENUM: return 'INVALID_ENUM: An unacceptable value has been specified for an enumerated argument';
            case gl.INVALID_VALUE: return 'INVALID_VALUE: A numeric argument is out of range';
            case gl.INVALID_OPERATION: return 'INVALID_OPERATION: The specified command is not allowed for the current state';
            case gl.INVALID_FRAMEBUFFER_OPERATION: return 'INVALID_FRAMEBUFFER_OPERATION: The currently bound framebuffer is not framebuffer complete';
            case gl.OUT_OF_MEMORY: return 'OUT_OF_MEMORY: Not enough memory is left to execute the command';
            case gl.CONTEXT_LOST_WEBGL: return 'CONTEXT_LOST_WEBGL: The WebGL context has been lost';
            default: return `Unknown WebGL error code: ${errorCode}`;
        }
    }
    
    /**
     * Test a shader for compatibility/compilation issues
     * @param vertexShader Vertex shader source code
     * @param fragmentShader Fragment shader source code
     */
    public testShaderCompilation(vertexShader: string, fragmentShader: string): boolean {
        try {
            const canvas = document.createElement('canvas');
            const gl = canvas.getContext('webgl') || canvas.getContext('webgl2');
            if (!gl) {
                logger.error('WebGL context not available for shader test');
                return false;
            }
            
            // Create and compile vertex shader
            const vs = gl.createShader(gl.VERTEX_SHADER);
            if (!vs) {
                logger.error('Failed to create vertex shader');
                return false;
            }
            gl.shaderSource(vs, vertexShader);
            gl.compileShader(vs);
            
            // Check vertex shader compilation status
            if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {
                logger.error('Vertex shader compilation failed', {
                    error: gl.getShaderInfoLog(vs),
                    source: vertexShader
                });
                gl.deleteShader(vs);
                return false;
            }
            
            // Create and compile fragment shader
            const fs = gl.createShader(gl.FRAGMENT_SHADER);
            if (!fs) {
                logger.error('Failed to create fragment shader');
                gl.deleteShader(vs);
                return false;
            }
            gl.shaderSource(fs, fragmentShader);
            gl.compileShader(fs);
            
            // Check fragment shader compilation status
            if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {
                logger.error('Fragment shader compilation failed', {
                    error: gl.getShaderInfoLog(fs),
                    source: fragmentShader
                });
                gl.deleteShader(vs);
                gl.deleteShader(fs);
                return false;
            }
            
            // Create program and link shaders
            const program = gl.createProgram();
            if (!program) {
                logger.error('Failed to create shader program');
                gl.deleteShader(vs);
                gl.deleteShader(fs);
                return false;
            }
            gl.attachShader(program, vs);
            gl.attachShader(program, fs);
            gl.linkProgram(program);
            
            // Check program link status
            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                logger.error('Shader program linking failed', {
                    error: gl.getProgramInfoLog(program)
                });
                gl.deleteShader(vs);
                gl.deleteShader(fs);
                gl.deleteProgram(program);
                return false;
            }
            
            // Validate program
            gl.validateProgram(program);
            if (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {
                logger.error('Shader program validation failed', {
                    error: gl.getProgramInfoLog(program)
                });
                gl.deleteShader(vs);
                gl.deleteShader(fs);
                gl.deleteProgram(program);
                return false;
            }
            
            // Success! Clean up resources
            gl.deleteShader(vs);
            gl.deleteShader(fs);
            gl.deleteProgram(program);
            
            logger.info('Shader compilation test passed');
            return true;
        } catch (error) {
            logger.error('Error during shader compilation test', {
                error: error instanceof Error ? error.message : String(error),
                stack: error instanceof Error ? error.stack : undefined
            });
            return false;
        }
    }
    
    /**
     * Force a websocket reconnection
     */
    public forceWebSocketReconnect(): void {
        logger.info('Forcing WebSocket reconnection');
        this.webSocketService.close();
        this.webSocketService.connect().then(() => {
            logger.info('WebSocket reconnected successfully');
        }).catch(error => {
            logger.error('WebSocket reconnection failed', { error });
        });
    }
    
    /**
     * Force a refresh of graph data from server
     */
    public refreshGraphData(): void {
        logger.info('Refreshing graph data from server');
        graphDataManager.fetchInitialData().then(() => {
            logger.info('Graph data refreshed successfully');
        }).catch(error => {
            logger.error('Failed to refresh graph data', { error });
        });
    }
}

// Export a singleton instance
export const systemDiagnostics = SystemDiagnostics.getInstance();
----
diagnostics/nodeIdBindingDiagnostics.ts
/**
 * Node ID Binding Diagnostics
 * 
 * This tool helps diagnose issues related to node ID binding between
 * the binary WebSocket protocol and metadata visualization.
 */

import { createLogger } from '../core/logger';
import { WebSocketService } from '../websocket/websocketService';
import { GraphDataManager } from '../state/graphData';
import { debugState } from '../core/debugState';
import { Node } from '../core/types';

const logger = createLogger('NodeBindingDiagnostics');

/**
 * NodeBindingDiagnostics
 * 
 * This class provides diagnostics for node ID binding issues
 * - Validates ID consistency across different components
 * - Detects mismatches between binary protocol and metadata
 * - Provides debugging suggestions for ID binding problems
 */
export class NodeBindingDiagnostics {
    private static instance: NodeBindingDiagnostics | null = null;
    
    private constructor() {
        // Private constructor for singleton pattern
    }
    
    public static getInstance(): NodeBindingDiagnostics {
        if (!NodeBindingDiagnostics.instance) {
            NodeBindingDiagnostics.instance = new NodeBindingDiagnostics();
        }
        return NodeBindingDiagnostics.instance;
    }
    
    /**
     * Run comprehensive checks on node ID binding
     * This is the main entry point for diagnostics
     */
    public runDiagnostics(): void {
        logger.info('Starting node ID binding diagnostics...');
        
        try {
            // Check graph data node IDs
            this.checkGraphDataNodeIds();
            
            // Check WebSocket node mapping
            this.checkWebSocketNodeMapping();
            
            // Check metadata binding
            this.checkMetadataBinding();
            
            // Check for suspicious ID formats
            this.checkForSuspiciousIdFormats();
            
            logger.info('Node ID binding diagnostics completed successfully');
        } catch (error) {
            logger.error('Error running node ID binding diagnostics', {
                error: error instanceof Error ? error.message : String(error),
            });
        }
    }
    
    /**
     * Check for consistency in graph data node IDs
     */
    private checkGraphDataNodeIds(): void {
        const graphData = GraphDataManager.getInstance().getGraphData();
        
        if (!graphData || !graphData.nodes || graphData.nodes.length === 0) {
            logger.warn('No graph data available for node ID check');
            return;
        }
        
        // Check for node ID consistency
        const { numericIdCount, nonNumericIdCount, suspiciousIds } = this.analyzeNodeIds(graphData.nodes);
        
        logger.info('Graph data node ID analysis:', {
            totalNodes: graphData.nodes.length,
            numericIdCount,
            nonNumericIdCount,
            suspiciousIdsCount: suspiciousIds.length,
            suspiciousIdsSample: suspiciousIds.slice(0, 5)
        });
        
        if (nonNumericIdCount > 0) {
            logger.warn(`Found ${nonNumericIdCount} nodes with non-numeric IDs. This may cause binding issues with the binary protocol.`);
        }
    }
    
    /**
     * Check WebSocket service node mapping
     */
    private checkWebSocketNodeMapping(): void {
        const wsService = WebSocketService.getInstance();
        
        // Access private field via a type assertion hack (for diagnostic purposes only)
        const service = wsService as any;
        if (!service.nodeNameToIndexMap) {
            logger.warn('Unable to access WebSocket node mapping');
            return;
        }
        
        const mapping = service.nodeNameToIndexMap as Map<string, number>;
        
        logger.info('WebSocket node mapping analysis:', {
            mappingSize: mapping.size,
            sampleEntries: Array.from(mapping.entries()).slice(0, 5)
        });
        
        // Check for suspicious mappings (non-numeric string to numeric index)
        const suspiciousMappings = Array.from(mapping.entries())
            .filter(([key]) => !/^\d+$/.test(key))
            .slice(0, 10);
            
        if (suspiciousMappings.length > 0) {
            logger.warn('Found suspicious node ID mappings in WebSocket service:', {
                count: suspiciousMappings.length,
                examples: suspiciousMappings
            });
            
            logger.info('RECOMMENDATION: These non-numeric IDs should be converted to numeric IDs for proper binding with the binary protocol.');
        }
    }
    
    /**
     * Check metadata binding to nodes
     */
    private checkMetadataBinding(): void {
        // This requires accessing the DOM to find all metadata labels
        // For browser context only
        if (typeof document === 'undefined') {
            logger.warn('Cannot check metadata binding outside browser context');
            return;
        }
        
        try {
            // Find metadata label groups in the scene
            // This is a heuristic approach that may need adjustment for your specific scene structure
            const metadataElements = Array.from(document.querySelectorAll('[data-metadata-node-id]'));
            
            if (metadataElements.length === 0) {
                logger.warn('No metadata labels found in DOM');
                return;
            }
            
            // Check node IDs in metadata
            const metadataNodeIds = metadataElements.map(el => el.getAttribute('data-metadata-node-id'));
            const graphData = GraphDataManager.getInstance().getGraphData();
            
            const matchingIds = metadataNodeIds.filter(id => 
                graphData.nodes.some(node => node.id === id)
            );
            
            logger.info('Metadata binding analysis:', {
                totalMetadataElements: metadataElements.length,
                matchingWithGraphData: matchingIds.length,
                mismatchCount: metadataElements.length - matchingIds.length
            });
            
            if (matchingIds.length < metadataElements.length) {
                logger.warn('Some metadata labels are not properly bound to graph nodes!', {
                    boundCount: matchingIds.length,
                    unboundCount: metadataElements.length - matchingIds.length
                });
            }
        } catch (error) {
            logger.error('Error checking metadata binding', {
                error: error instanceof Error ? error.message : String(error)
            });
        }
    }
    
    /**
     * Check for suspicious node ID formats
     */
    private checkForSuspiciousIdFormats(): void {
        const graphData = GraphDataManager.getInstance().getGraphData();
        
        if (!graphData || !graphData.nodes || graphData.nodes.length === 0) {
            return;
        }
        
        // Check for inconsistent ID types (mixed string/numeric)
        const idTypes = new Set<string>();
        graphData.nodes.forEach(node => {
            // Determine ID type
            let type = 'unknown';
            if (typeof node.id === 'string') {
                if (/^\d+$/.test(node.id)) {
                    type = 'numeric-string';
                } else if (node.id.includes('.')) {
                    type = 'possible-filename';
                } else {
                    type = 'non-numeric-string';
                }
            } else if (typeof node.id === 'number') {
                type = 'number';
            }
            
            idTypes.add(type);
        });
        
        logger.info('Node ID type analysis:', {
            typesFound: Array.from(idTypes)
        });
        
        if (idTypes.size > 1) {
            logger.warn('Multiple ID types detected in node data. This could indicate inconsistency in ID handling.');
        }
        
        // Check if IDs match their string representation
        // This is to detect issues where IDs might be mistakenly cast between string and number
        const idMismatchCount = graphData.nodes
            .filter(node => node.id !== String(node.id))
            .length;
            
        if (idMismatchCount > 0) {
            logger.warn(`Found ${idMismatchCount} nodes where ID doesn't match its string representation. This could indicate a type conversion issue.`);
        }
    }
    
    /**
     * Analyze node IDs to detect patterns and potential issues
     * @param nodes Array of nodes to analyze
     */
    private analyzeNodeIds(nodes: Node[]): { 
        numericIdCount: number, 
        nonNumericIdCount: number,
        suspiciousIds: string[]
    } {
        let numericIdCount = 0;
        let nonNumericIdCount = 0;
        const suspiciousIds: string[] = [];
        
        nodes.forEach(node => {
            const id = node.id;
            
            // Check if ID is numeric string
            if (typeof id === 'string' && /^\d+$/.test(id)) {
                numericIdCount++;
            } else {
                nonNumericIdCount++;
                suspiciousIds.push(String(id));
            }
            
            // Check for suspicious patterns
            if (typeof id === 'string') {
                // Check for file extension in ID (often a sign of metadata_id being used incorrectly as id)
                if (id.includes('.md') || id.includes('.js') || id.includes('.ts')) {
                    suspiciousIds.push(id);
                }
                
                // Check for very long IDs (unusual for numeric IDs)
                if (id.length > 10) {
                    suspiciousIds.push(id);
                }
            }
        });
        
        return { numericIdCount, nonNumericIdCount, suspiciousIds };
    }
    
    /**
     * Enable diagnostic mode for monitoring ID binding issues in real-time
     */
    public enableMonitoring(): void {
        // Set up monitoring of node position updates
        logger.info('Enabling real-time node ID binding monitoring');
        
        // Log guidance for enabling relevant debug flags
        logger.info('To see detailed node binding logs, please ensure the following debug flags are enabled:');
        logger.info('- Node debugging: ' + (debugState.isNodeDebugEnabled() ? 'ENABLED' : 'DISABLED'));
        logger.info('- Data debugging: ' + (debugState.isDataDebugEnabled() ? 'ENABLED' : 'DISABLED'));
        logger.info('- WebSocket debugging: ' + (debugState.isWebsocketDebugEnabled() ? 'ENABLED' : 'DISABLED'));
        
        if (!debugState.isNodeDebugEnabled() || !debugState.isDataDebugEnabled()) {
            logger.info('NOTE: Enable all debug modes in application settings or console for full diagnostics');
        }
        
        logger.info('Node ID binding monitoring enabled. Check console for detailed logs.');
    }
    
    /**
     * Provide recommendations based on diagnostic results
     */
    public getRecommendations(): string[] {
        return [
            'Ensure all node IDs in graph data are numeric strings matching the binary protocol',
            'Verify WebSocketService correctly converts binary u16 IDs to strings',
            'Check that MetadataVisualizer uses the same node IDs as position updates',
            'Review NodeInstanceManager to confirm it uses the same IDs as other components',
            'Add explicit validation for node ID formats during critical operations',
            'Consider adding assertions to verify ID consistency between components'
        ];
    }
}

// Make diagnostics available on window for console access
if (typeof window !== 'undefined') {
    (window as any).NodeBindingDiagnostics = NodeBindingDiagnostics.getInstance();
}

export default NodeBindingDiagnostics.getInstance();
--END--

## Documentation

The following text represents a project with code. The structure of the text consists of sections beginning with ----, followed by a single line containing the file path and file name, and then a variable number of lines containing the file contents. The text representing the project ends when the symbols --END-- are encountered. Any further text beyond --END-- is meant to be interpreted as instructions using the aforementioned project as context.
----
README-bloom-effect.md
# Bloom Effect Implementation Guide

## Overview

The bloom effect in this project is implemented using Three.js's `UnrealBloomPass` and a layer-based approach to selectively apply bloom to specific objects. This document explains how the bloom effect works, the improvements made, and best practices for using it.

## Implementation Details

### Layer-Based Approach

The bloom effect uses a layer-based approach to selectively apply the effect:

- Layer 0: Default layer for all objects
- Layer 1: Bloom layer for objects that should have the bloom effect

Objects that should have the bloom effect need to have Layer 1 enabled:

```typescript
// Enable bloom layer on an object
object.layers.enable(1);
```

### Bloom Settings

The bloom effect has several configurable settings:

- `enabled`: Whether the bloom effect is enabled
- `strength`: Overall strength of the bloom effect (0-5)
- `radius`: Radius of the bloom effect (0-5)
- `threshold`: Brightness threshold for the bloom effect (0-1)
- `edgeBloomStrength`: Strength of the bloom effect on edges
- `nodeBloomStrength`: Strength of the bloom effect on nodes
- `environmentBloomStrength`: Strength of the bloom effect on the environment

### Performance Considerations

The bloom effect can be performance-intensive. The implementation includes several optimizations:

1. **Adaptive Strength**: When FPS drops below 20, the bloom strength is reduced to maintain performance
2. **Fallback Rendering**: If there's an error with the bloom effect, it falls back to standard rendering
3. **Extreme Low FPS Handling**: At extremely low FPS (<15), bloom is temporarily disabled

## Recent Improvements

The following improvements have been made to the bloom effect:

1. **Consistent Rendering**: Removed conditional rendering based on frame budget to prevent bloom from flashing on/off
2. **Graceful Degradation**: Instead of completely disabling bloom at low FPS, it now gradually reduces intensity
3. **Error Handling**: Added better error handling to prevent rendering failures
4. **Settings Update**: Improved how settings are updated to prevent visual glitches
5. **Layer Management**: Better management of bloom layers with explicit constants

## Best Practices

### Adding Bloom to Objects

To add bloom to an object:

```typescript
// Create your mesh
const mesh = new Mesh(geometry, material);

// Enable bloom layer
mesh.layers.enable(1);

// Add to scene
scene.add(mesh);
```

### Adjusting Bloom Intensity

Different object types should use different bloom intensities:

- **Edges**: Use `edgeBloomStrength` (recommended: 1.0-2.0)
- **Nodes**: Use `nodeBloomStrength` (recommended: 2.0-3.0)
- **Environment**: Use `environmentBloomStrength` (recommended: 0.5-1.5)

### Performance Optimization

For better performance:

1. Be selective about which objects get the bloom effect
2. Use lower bloom radius values (1.0-2.0) for better performance
3. Consider disabling bloom in XR mode or on low-end devices

## Troubleshooting

### Bloom Effect Flashing On/Off

If the bloom effect is flashing on and off:

1. Check if FPS is consistently low (below 15)
2. Verify that objects have the correct layer enabled
3. Reduce the overall bloom strength and radius

### No Bloom Effect

If objects aren't showing the bloom effect:

1. Verify the object has Layer 1 enabled
2. Check if bloom is enabled in settings
3. Ensure the object's material has appropriate properties (emissive materials work best with bloom)

### Performance Issues

If bloom is causing performance issues:

1. Reduce the number of objects with bloom
2. Lower the bloom radius and strength
3. Increase the bloom threshold to only affect brighter parts of the scene
----
README-diagnostics.md
# VisionFlow Diagnostics Tools

This directory contains diagnostic tools for troubleshooting issues with the VisionFlow application, particularly focusing on WebSocket connections and WebGL rendering.

## Available Diagnostic Tools

### 1. WebSocket Diagnostics

#### Browser Console Tool (`websocket-diagnostics-browser.js`)

A standalone browser-compatible tool that can be loaded directly in the browser console:

1. Open the browser console (F12 or Ctrl+Shift+I)
2. Copy the contents of `websocket-diagnostics-browser.js`
3. Paste into the browser console
4. The diagnostics will run automatically, or you can run them manually:
   ```javascript
   WebSocketDiagnostics.runDiagnostics();
   ```

This tool provides detailed information about:
- WebSocket connection status
- Binary protocol validation
- Network latency measurements
- Message size analysis
- Reconnection testing

#### WebSocket Test Script (`websocket-test.ts`)

A simpler test script focused specifically on WebSocket connection testing:

```javascript
// In the browser console
testWebSocket.runTests();
```

### 2. WebGL Diagnostics (`webgl-diagnostics.js`)

A browser-compatible tool for diagnosing WebGL rendering issues:

1. Open the browser console (F12 or Ctrl+Shift+I)
2. Copy the contents of `webgl-diagnostics.js`
3. Paste into the browser console
4. The diagnostics will run automatically, or you can run them manually:
   ```javascript
   WebGLDiagnostics.runDiagnostics();
   ```

This tool provides detailed information about:
- WebGL version and capabilities
- Extension support
- Shader compilation testing
- WebGL context limits
- Context loss recovery support

## Common Issues and Solutions

### WebSocket Issues

1. **Connection Failures**
   - Check if the WebSocket URL is correct (wss:// for HTTPS sites)
   - Verify network connectivity to the API endpoint
   - Check for firewall or proxy blocking WebSocket connections

2. **Binary Protocol Errors**
   - Ensure client and server agree on the binary format (28 bytes per node)
   - Check for compression/decompression issues with large messages

3. **Reconnection Problems**
   - Verify the server is properly handling reconnection attempts
   - Check for network stability issues

### WebGL Issues

1. **Shader Compilation Errors**
   - Replace custom shaders with built-in Three.js materials
   - Ensure shaders are compatible with the browser's WebGL version
   - Simplify shader code to avoid complex operations

2. **WebGL Context Loss**
   - Reduce the number of WebGL contexts (canvases/renderers)
   - Dispose unused materials, textures, and geometries
   - Use shared materials and geometries where possible
   - Reduce texture sizes and complexity

3. **Performance Issues**
   - Reduce the number of objects in the scene
   - Optimize shader complexity
   - Use level-of-detail techniques for complex scenes

## Using Built-in Three.js Materials

To avoid custom shader issues, consider using built-in Three.js materials:

```javascript
// Instead of custom shader materials:
const material = new THREE.MeshPhongMaterial({
  color: 0x00ff00,
  emissive: 0x003300,
  specular: 0x00ff00,
  shininess: 30,
  transparent: true,
  opacity: 0.8
});

// For edges, use LineBasicMaterial:
const edgeMaterial = new THREE.LineBasicMaterial({
  color: 0x0000ff,
  linewidth: 1,
  transparent: true,
  opacity: 0.7
});
```

## Production Debugging

For debugging in production:

1. Open the browser console on the production site
2. Load the diagnostic tools:
   ```javascript
   // For WebSocket diagnostics
   fetch('/client/websocket-diagnostics-browser.js')
     .then(response => response.text())
     .then(code => eval(code));

   // For WebGL diagnostics
   fetch('/client/webgl-diagnostics.js')
     .then(response => response.text())
     .then(code => eval(code));
   ```

3. If the files aren't directly accessible, copy and paste the tool code from your development environment

## Reporting Issues

When reporting issues, please include:
1. The complete diagnostic output from both tools
2. Browser and OS information
3. Steps to reproduce the issue
4. Any error messages from the console 
----
README-shader-fix.md
# WebGL Shader Compatibility Fix

## Issue

The application was encountering the following WebGL shader error:

```
three-BrKKt4oK.js:28169  THREE.WebGLProgram: Shader Error 0 - VALIDATE_STATUS false

Material Name: 
Material Type: ShaderMaterial

Program Info Log: Vertex shader is not compiled.
```

This error occurred because the custom shaders in `UnifiedTextRenderer.ts` were using WebGL2 syntax (`#version 300 es`), but the application was running in a WebGL1 context.

## Fix Applied

The shaders in `UnifiedTextRenderer.ts` have been modified to be compatible with WebGL1:

1. Removed `#version 300 es` directive from both shaders
2. Changed WebGL2 syntax to WebGL1 syntax:
   - `in` → `attribute` in vertex shader
   - `out` → `varying` in vertex shader
   - `in` → `varying` in fragment shader
   - Removed `out vec4 fragColor` (using `gl_FragColor` instead)
   - Changed `texture(fontAtlas, vUv)` to `texture2D(fontAtlas, vUv)`
   - Changed `fragColor = color` to `gl_FragColor = color`
3. Added `glslVersion: null` to the ShaderMaterial constructor to ensure WebGL1 compatibility

## Testing the Fix

Two files have been created to help test the shader compatibility:

1. `shader-test.js` - A script that tests if the modified shaders compile correctly
2. `shader-test.html` - An HTML page that provides a user interface for running the test

To test the fix:

1. Open `shader-test.html` in a browser
2. Click the "Run Shader Test" button
3. Check if the test passes (success message) or fails (error message)

If the test passes, the modified shaders are compatible with your browser's WebGL implementation.

## Diagnostic Information

The project includes diagnostic tools that can help identify WebGL compatibility issues:

- `diagnostics.ts` - Runs system diagnostics including WebGL support checks
- `webgl-diagnostics.js` - A comprehensive WebGL diagnostic tool

These tools can be used to verify WebGL compatibility and identify potential issues with shaders.

## Additional Notes

- The error was specifically related to the custom ShaderMaterial in `UnifiedTextRenderer.ts`
- Other materials in the project (EdgeShaderMaterial, HologramShaderMaterial) were already using built-in Three.js materials instead of custom shaders to avoid WebGL compatibility issues
- If you encounter similar issues with other shaders, consider:
  1. Converting WebGL2 shaders to WebGL1 syntax
  2. Using built-in Three.js materials instead of custom shaders where possible
----
README-websocket-diagnostics.md
# WebSocket Diagnostics Tools

This directory contains tools for diagnosing WebSocket connection issues in the VisionFlow application.

## Overview

The WebSocket implementation in VisionFlow is critical for real-time graph updates. These diagnostic tools help identify and resolve issues with WebSocket connections, particularly in production environments.

## Available Tools

### 1. Built-in Diagnostics (`diagnostics.ts`)

The `diagnostics.ts` file contains several functions for diagnosing WebSocket issues:

- `runDiagnostics()`: Runs a comprehensive system check, including WebSocket configuration
- `checkWebSocketConfig()`: Specifically checks WebSocket support and configuration
- `diagnoseWebSocketIssues()`: Provides detailed WebSocket diagnostics including URL validation, connection testing, and GraphDataManager integration

Usage:
```typescript
import { diagnoseWebSocketIssues } from './diagnostics';

// Run comprehensive WebSocket diagnostics
diagnoseWebSocketIssues();
```

### 2. WebSocket Diagnostics Tool (`websocket-diagnostics.ts`)

A standalone TypeScript module that provides comprehensive WebSocket diagnostics:

- Connection status monitoring
- Binary protocol validation
- Network latency measurement
- Message size analysis
- Reconnection testing

Usage:
```typescript
import { WebSocketDiagnostics } from './websocket-diagnostics';

// Run the diagnostics
WebSocketDiagnostics.runDiagnostics();

// Configure diagnostics options
WebSocketDiagnostics.CONFIG.testDuration = 60000; // 1 minute test
WebSocketDiagnostics.CONFIG.verbose = true;
```

### 3. Browser Console Tool (`websocket-diagnostics-browser.js`)

A browser-compatible version that can be loaded directly in the browser console:

1. Copy the contents of `websocket-diagnostics-browser.js`
2. Paste into the browser console
3. Run the diagnostics:
   ```javascript
   WebSocketDiagnostics.runDiagnostics();
   ```

## Binary Protocol

The WebSocket binary protocol uses a specific format based on Three.js Vector3:

- Node data: 26 bytes per node
  - Node ID (uint16): 2 bytes
  - Position (3 x float32): 12 bytes (THREE.Vector3)
  - Velocity (3 x float32): 12 bytes (THREE.Vector3)

The client code now uses THREE.Vector3 objects throughout for consistency and performance. The protocol is a simple "firehose" of node updates without additional header metadata.

The diagnostics tools validate that binary messages conform to this format.

## Common Issues and Solutions

### Connection Issues

- **Mixed Content Blocking**: When using HTTPS, ensure WebSocket connections use WSS
- **CORS Issues**: Check server CORS configuration if connecting from different origins
- **Proxy/Firewall Blocking**: Some networks block WebSocket connections

### Binary Protocol Issues

- **Message Size Mismatch**: Ensure client and server agree on the binary format (26 bytes per node)
- **Compression Issues**: Large messages are compressed with zlib (pako.js); ensure decompression works correctly
- **Vector3 Integrity**: Verify Vector3 objects contain valid, non-NaN values for reliable rendering
- **Edge Updates**: Edge positions are derived from node positions and not directly included in the binary protocol

### Performance Issues

- **High Latency**: Check network conditions and server load
- **Message Frequency**: Adjust update frequency if too many messages are causing performance issues

## Debugging in Production

For production debugging:

1. Open the browser console
2. Load the browser diagnostics tool:
   ```javascript
   fetch('/client/websocket-diagnostics-browser.js')
     .then(response => response.text())
     .then(code => eval(code))
     .then(() => console.log('Diagnostics tool loaded'));
   ```
3. Run the diagnostics:
   ```javascript
   WebSocketDiagnostics.runDiagnostics();
   ```
4. Check the console for detailed logs and recommendations

## Troubleshooting Steps

1. Verify API connectivity with `WebSocketDiagnostics.testApiConnectivity()`
2. Run full diagnostics with `WebSocketDiagnostics.runDiagnostics()`
3. Review the diagnostics report for specific issues
4. Verify Vector3 data integrity with `WebSocketDiagnostics.validateVectorData()`
5. Check edge rendering efficiency with the Edge Manager diagnostics
6. Apply recommended fixes based on the diagnostics results

## Contributing

When modifying the WebSocket implementation:

1. Update the diagnostics tools to match any protocol changes
2. Maintain the use of THREE.Vector3 throughout the codebase
3. Test with both the TypeScript and browser versions
4. Document any changes to the binary protocol format
5. Ensure edge handling is properly tested since it depends on node position updates
----
STRUCTURE.md
docs/
├── README.md                       # Documentation home
├── getting-started/               
│   ├── introduction.md            # Project overview and features
│   ├── quick-start.md             # Quick start guide
│   └── architecture.md            # System architecture
├── development/
│   ├── setup.md                   # Development environment setup
│   ├── contributing.md            # Contribution guidelines
│   └── debugging.md               # Debugging guide
├── api/
│   ├── overview.md                # API introduction
│   ├── rest.md                    # REST API documentation
│   └── websocket.md               # WebSocket API documentation
├── deployment/
│   ├── docker.md                  # Docker deployment
│   └── configuration.md           # Configuration guide
└── technical/
    ├── protocols/
    │   ├── binary-protocol.md     # Binary protocol specification
    │   └── websocket-protocol.md  # WebSocket implementation details
    ├── performance/
    │   ├── optimizations.md       # Performance optimizations
    │   └── scaling.md             # Scaling considerations
    ├── components/
    │   ├── node-manager.md        # Node management system
    │   └── visualization.md       # Visualization system
    └── integrations/
        └── tts.md                 # Text-to-speech integration
----
api/rest.md
# REST API Reference

## Authentication

### Login
```http
POST /api/auth/nostr
```

**Request Body:**
```json
{
  "pubkey": "your_public_key",
  "signature": "signed_challenge"
}
```

**Response:**
```json
{
  "user": {
    "pubkey": "user_public_key",
    "npub": "user_npub",
    "is_power_user": boolean,
    "last_seen": 1234567890
  },
  "token": "session_token",
  "expires_at": 1234567890,
  "features": ["feature1", "feature2"]
}
```

### Verify Token
```http
POST /api/auth/nostr/verify
```

**Request Body:**
```json
{
  "pubkey": "your_public_key",
  "token": "your_token"
}
```

### Logout
```http
DELETE /api/auth/nostr
```

## Files API

### Process Files
```http
POST /api/files/process
```

Triggers fetching and processing of Markdown files.

**Response:**
```json
{
  "status": "success",
  "processed_files": ["file1.md", "file2.md"]
}
```

### Get File Content
```http
GET /api/files/get_content/{filename}
```

## Graph API

### Get Graph Data
```http
GET /api/graph/data
```

Returns complete graph structure.

### Get Paginated Graph Data
```http
GET /api/graph/data/paginated
```

**Query Parameters:**
- `page`: Page number (default: 1)
- `page_size`: Items per page (default: 100)
- `sort`: Sort field
- `filter`: Filter expression

### Update Graph
```http
POST /api/graph/update
```

**Request Body:**
```json
{
  "nodes": [...],
  "edges": [...]
}
```

### Refresh Graph
```http
POST /api/graph/refresh
```

## Settings API

### Get Visualization Settings
```http
GET /api/user-settings/visualization
```

### Update API Keys
```http
POST /api/auth/nostr/api-keys
```

**Request Body:**
```json
{
  "perplexity": "api_key",
  "openai": "api_key",
  "ragflow": "api_key"
}
```

## AI Services

### Perplexity Query
```http
POST /api/perplexity
```

**Request Body:**
```json
{
  "query": "Your question here",
  "conversation_id": "optional-previous-conversation-id"
}
```

**Response:**
```json
{
  "answer": "The response from Perplexity AI",
  "conversation_id": "conversation-id-for-follow-up-queries"
}
```

## Error Responses

All endpoints may return the following error responses:

#### 400 Bad Request
```json
{
  "error": "bad_request",
  "message": "Invalid parameters",
  "details": {
    "field": "reason for error"
  }
}
```

#### 401 Unauthorized
```json
{
  "error": "unauthorized",
  "message": "Invalid or missing authentication token"
}
```

#### 404 Not Found
```json
{
  "error": "not_found",
  "message": "Resource not found"
}
```

#### 500 Internal Server Error
```json
{
  "error": "internal_error",
  "message": "An internal error occurred",
  "request_id": "abc-123"
}
```

## Related Documentation
- [WebSocket API](./websocket.md)
- [Development Setup](../development/setup.md)
- [Technical Architecture](../overview/architecture.md)
----
api/websocket.md
# WebSocket API Reference

## Connection

Connect to: `wss://your-domain/wss`

## Authentication

Send authentication message immediately after connection:

```json
{
  "type": "auth",
  "token": "your_nostr_token"
}
```

## Message Types

### Control Messages

1. Connection Established
```json
{
  "type": "connection_established"
}
```

2. Request Initial Data
```json
{
  "type": "requestInitialData"
}
```

3. Updates Started
```json
{
  "type": "updatesStarted"
}
```

### Binary Messages

Node position updates are sent as binary messages:

- Each node update is 26 bytes
- Format: [Node ID (2 bytes)][Position (12 bytes)][Velocity (12 bytes)]
- Position and Velocity are float32[3] arrays

### Settings Synchronization

```json
{
  "type": "settings_update",
  "category": "visualization",
  "settings": {
    "edges": {
      "scaleFactor": 2.0
    }
  }
}
```

## Error Handling

1. Connection Error
```json
{
  "type": "error",
  "code": "connection_error",
  "message": "Connection failed"
}
```

2. Authentication Error
```json
{
  "type": "error",
  "code": "auth_error",
  "message": "Invalid token"
}
```

## Rate Limiting

- 60 messages per minute per connection
- Binary updates don't count towards rate limit

----
api/index.md
# LogseqXR API Documentation

This section provides comprehensive documentation for all APIs available in LogseqXR.

## Available APIs

### REST API

The [REST API](rest.md) provides HTTP endpoints for managing files, graph data, settings, and more. It's primarily used for:

- File operations (fetching, processing, updating)
- Graph management
- Settings configuration
- Health monitoring
- Authentication

### WebSocket API

The [WebSocket API](websocket.md) enables real-time communication between the client and server. It's used for:

- Real-time node position updates
- Binary data streaming for efficient 3D visualization
- Connection management
- Settings synchronization

## Authentication

Both APIs use the same authentication mechanism based on Nostr. Include the authentication token in the Authorization header:

```
Authorization: Bearer <token>
```

## API Versioning

The current API version is v1. All endpoints are prefixed with `/api/v1/` except for WebSocket connections which use `/wss`.

## Error Handling

All APIs follow a consistent error format:

```json
{
  "error": "error_code",
  "message": "Human-readable error message",
  "details": {
    "field": "specific error information"
  }
}
```

## Rate Limiting

API endpoints are rate-limited to prevent abuse. The current limits are:

- REST API: 100 requests per minute per IP
- WebSocket: 60 messages per minute per connection

## Further Reading

- [Binary Protocol](../technical/binary-protocol.md) - Details on the binary format used for WebSocket communication
- [WebSocket Implementation](../technical/websockets.md) - In-depth documentation on the WebSocket implementation

----
contributing/guidelines.md
# Contributing Guidelines

Thank you for your interest in contributing to LogseqXR! This document provides guidelines and best practices for contributing to the project.

## Code of Conduct

Please read and follow our [Code of Conduct](./CODE_OF_CONDUCT.md) to maintain a positive and inclusive community.

## Getting Started

### 1. Fork and Clone
```bash
# Fork the repository on GitHub, then:
git clone https://github.com/yourusername/logseq-xr.git
cd logseq-xr
```

### 2. Set Up Development Environment
Follow the [Development Setup Guide](../development/setup.md) to configure your environment.

### 3. Create a Branch
```bash
# Create a branch for your feature/fix
git checkout -b feature/your-feature-name
# or
git checkout -b fix/your-fix-name
```

## Development Workflow

### 1. Code Standards

#### Rust Code
- Follow the [Rust API Guidelines](https://rust-lang.github.io/api-guidelines/)
- Use `rustfmt` for formatting
- Run `clippy` for linting
```bash
# Format code
cargo fmt

# Run clippy
cargo clippy -- -D warnings
```

#### TypeScript/JavaScript Code
- Follow the project's ESLint configuration
- Use Prettier for formatting
```bash
# Lint code
pnpm lint

# Format code
pnpm format
```

### 2. Testing Requirements

#### Write Tests
- Add unit tests for new functionality
- Update existing tests when modifying code
- Ensure all tests pass before submitting PR

```bash
# Run Rust tests
cargo test

# Run TypeScript tests
pnpm test

# Run end-to-end tests
pnpm test:e2e
```

#### Test Coverage
- Aim for 80% or higher coverage
- Include both success and error cases
- Test edge cases and boundary conditions

### 3. Documentation

#### Code Documentation
- Document all public APIs
- Include examples in doc comments
- Update relevant documentation files

#### Rust Documentation
```rust
/// Calculates the force between two nodes
///
/// # Arguments
///
/// * `node1` - First node
/// * `node2` - Second node
///
/// # Returns
///
/// The force vector between the nodes
///
/// # Examples
///
/// ```
/// let force = calculate_force(&node1, &node2);
/// ```
pub fn calculate_force(node1: &Node, node2: &Node) -> Vector3<f32> {
    // Implementation
}
```

#### TypeScript Documentation
```typescript
/**
 * Updates node positions based on calculated forces
 * 
 * @param nodes - Array of nodes to update
 * @param forces - Calculated forces for each node
 * @param deltaTime - Time step for physics simulation
 * 
 * @returns Updated node positions
 * 
 * @example
 * ```typescript
 * const updatedNodes = updateNodePositions(nodes, forces, 0.016);
 * ```
 */
function updateNodePositions(
    nodes: Node[],
    forces: Vector3[],
    deltaTime: number
): Node[] {
    // Implementation
}
```

### 4. Commit Guidelines

#### Commit Messages
Follow the [Conventional Commits](https://www.conventionalcommits.org/) specification:

```
<type>(<scope>): <description>

[optional body]

[optional footer]
```

Types:
- `feat`: New feature
- `fix`: Bug fix
- `docs`: Documentation changes
- `style`: Code style changes (formatting, etc.)
- `refactor`: Code refactoring
- `perf`: Performance improvements
- `test`: Adding or updating tests
- `chore`: Maintenance tasks

Example:
```
feat(graph): add force-directed layout algorithm

Implement Barnes-Hut algorithm for efficient force calculation
in large graphs. This improves performance for graphs with
over 1000 nodes.

Closes #123
```

### 5. Pull Request Process

1. **Update Your Branch**
```bash
git fetch origin
git rebase origin/main
```

2. **Check Your Changes**
```bash
# Run all checks
cargo fmt -- --check
cargo clippy
cargo test
pnpm lint
pnpm test
```

3. **Create Pull Request**
- Use the PR template
- Link related issues
- Provide clear description
- Include screenshots/videos if relevant

4. **PR Template**
```markdown
## Description
Brief description of changes

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Breaking change
- [ ] Documentation update

## Testing
- [ ] Added unit tests
- [ ] Updated existing tests
- [ ] Tested manually
- [ ] Added documentation

## Screenshots
(if applicable)

## Related Issues
Fixes #123
```

5. **Review Process**
- Address reviewer feedback
- Keep PR focused and manageable
- Maintain clear communication

## Best Practices

### 1. Code Organization
- Keep functions focused and small
- Use meaningful names
- Follow project structure
- Minimize dependencies

### 2. Performance
- Consider performance implications
- Profile code changes
- Document performance impacts
- Test with large datasets

### 3. Security
- Follow security best practices
- Validate inputs
- Handle errors appropriately
- Use safe API methods

### 4. Accessibility
- Follow WCAG guidelines
- Test with screen readers
- Provide keyboard navigation
- Support high contrast modes

## Getting Help

- Join our [Discord server](https://discord.gg/logseq-xr)
- Check existing issues and discussions
- Ask questions in PR comments
- Contact maintainers

## Recognition

Contributors are recognized in:
- CONTRIBUTORS.md file
- Release notes
- Project documentation

## Related Documentation
- [Development Setup](../development/setup.md)
- [Architecture Overview](../overview/architecture.md)
- [API Documentation](../api/rest.md)
----
deployment/docker.md
# Docker Deployment Guide

This guide details the deployment process for LogseqXR using Docker and Docker Compose.

## Prerequisites

- Docker Engine 24.0+
- Docker Compose v2.20+
- NVIDIA Container Toolkit (for GPU support)
- Cloudflare account (for tunnel setup)

## Directory Structure

```
logseq-xr/
├── .env                    # Environment variables
├── docker-compose.yml      # Service definitions
├── Dockerfile             # Multi-stage build definition
├── nginx.conf            # Nginx configuration
├── config.yml            # Cloudflare tunnel config
├── settings.yaml         # Application settings
└── data/                 # Mounted data volumes
    ├── markdown/         # Markdown files
    ├── metadata/         # Graph metadata
    ├── piper/           # TTS models
    └── public/          # Built frontend files
```

## Configuration Files

### 1. Environment Variables (.env)
```env
# GitHub Configuration
GITHUB_TOKEN=your_github_token
GITHUB_OWNER=your_github_username
GITHUB_REPO=your_repo_name
GITHUB_BASE_PATH=path/to/markdown/files

# Cloudflare Configuration
TUNNEL_TOKEN=your_cloudflare_tunnel_token

# Application Settings
RUST_LOG=info
RUST_BACKTRACE=1
NODE_ENV=production
DOMAIN=your.domain.com

# GPU Configuration
NVIDIA_VISIBLE_DEVICES=0
NVIDIA_DRIVER_CAPABILITIES=compute,utility

# User Configuration
UID=1000
GID=1000
```

### 2. Docker Compose Configuration
```yaml
name: logseq-xr

services:
  webxr:
    build: .
    image: logseq-xr-image:latest
    container_name: logseq-xr-webxr
    read_only: false
    networks:
      ragflow:
        aliases:
          - logseq-xr-webxr
          - webxr-client
    deploy:
      resources:
        limits:
          cpus: '16.0'
          memory: 64G
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]
    expose:
      - "4000"
    ports:
      - "4000:4000"
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - BIND_ADDRESS=0.0.0.0
      - PORT=3001
      - NGINX_PORT=4000
      - NODE_ENV=production
    volumes:
      - ./data/markdown:/app/data/markdown
      - ./data/metadata:/app/data/metadata
      - ./data/piper:/app/data/piper
      - ./client:/app/client
      - type: bind
        source: ${PWD}/settings.yaml
        target: /app/settings.yaml
        read_only: false
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 4G
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-tunnel
    networks:
      ragflow:
        aliases:
          - cloudflared
    volumes:
      - ./config.yml:/etc/cloudflared/config.yml:ro
    command: tunnel --config /etc/cloudflared/config.yml run
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
```

### 3. Nginx Configuration
```nginx
pid /var/run/nginx/nginx.pid;
error_log /var/log/nginx/error.log debug;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    charset utf-8;

    # WebSocket configuration
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    upstream backend {
        server 127.0.0.1:3001;
        keepalive 32;
    }

    server {
        listen 4000 default_server;
        root /app/data/public/dist;

        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";
        add_header Content-Security-Policy "default-src 'self'";

        # WebSocket endpoint
        location /wss {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_read_timeout 3600s;
        }

        # API endpoints
        location /api {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_buffering on;
            proxy_buffer_size 256k;
        }

        # Static files
        location / {
            try_files $uri $uri/ /index.html =404;
            expires 1h;
        }
    }
}
```

## Deployment Steps

### 1. Initial Setup
```bash
# Clone repository
git clone https://github.com/yourusername/logseq-xr.git
cd logseq-xr

# Copy and configure environment
cp .env_template .env
nano .env

# Create data directories
mkdir -p data/{markdown,metadata,piper,public}
```

### 2. Build and Deploy
```bash
# Build and start services
docker-compose up --build -d

# Check logs
docker-compose logs -f

# Check service health
docker ps
docker-compose ps
```

### 3. Verify Deployment
```bash
# Check HTTP endpoint
curl http://localhost:4000/health

# Test WebSocket connection
websocat ws://localhost:4000/wss
```

## Monitoring & Maintenance

### Health Checks
The Docker Compose configuration includes health checks that monitor:
- HTTP endpoint availability
- WebSocket connectivity
- Resource usage

### Resource Monitoring
```bash
# Monitor container resources
docker stats logseq-xr-webxr

# Check logs
docker-compose logs -f

# Check nginx logs
docker exec logseq-xr-webxr tail -f /var/log/nginx/error.log
```

### Backup & Recovery
```bash
# Backup data volumes
docker run --rm \
  -v logseq-xr_data:/data \
  -v $(pwd)/backup:/backup \
  alpine tar czf /backup/data-backup.tar.gz /data

# Restore from backup
docker run --rm \
  -v logseq-xr_data:/data \
  -v $(pwd)/backup:/backup \
  alpine tar xzf /backup/data-backup.tar.gz -C /
```

## Troubleshooting

### Common Issues

1. **GPU Not Detected**
   ```bash
   # Check GPU visibility
   docker exec logseq-xr-webxr nvidia-smi
   ```

2. **WebSocket Connection Failed**
   - Check nginx logs
   - Verify proxy settings
   - Ensure Cloudflare tunnel is running

3. **Performance Issues**
   - Monitor resource usage
   - Check for memory leaks
   - Verify GPU utilization

### Recovery Procedures

1. **Service Recovery**
   ```bash
   # Restart services
   docker-compose restart

   # Rebuild and restart
   docker-compose up --build -d
   ```

2. **Data Recovery**
   ```bash
   # Stop services
   docker-compose down

   # Restore data
   cp -r backup/data/* data/

   # Restart services
   docker-compose up -d
   ```

## Security Considerations

1. **Container Security**
   - Run containers as non-root
   - Use read-only root filesystem
   - Implement resource limits

2. **Network Security**
   - Use Cloudflare tunnel for secure access
   - Implement proper firewall rules
   - Enable security headers

3. **Data Security**
   - Regular backups
   - Encrypted storage
   - Proper permission management

## Related Documentation
- [Development Setup](../development/setup.md)
- [Configuration Guide](../development/configuration.md)
- [Performance Tuning](../technical/performance.md)
----
development/setup.md
# Development Setup Guide

This guide will help you set up your development environment for LogseqXR.

## Prerequisites

### Required Software
- Node.js >=18.0.0
- Rust (version 1.70.0+)
- Docker & Docker Compose
- Git
- pnpm (recommended) or npm
- CUDA Toolkit 12.2+ (optional, for GPU acceleration)

### Hardware Requirements
- NVIDIA GPU with CUDA support (recommended)
- At least 8GB RAM (16GB recommended)
- 4GB+ GPU memory for optimal performance

## Initial Setup

### 1. Clone the Repository
```bash
git clone https://github.com/yourusername/logseq-xr.git
cd logseq-xr
```

### 2. Environment Configuration
Copy the environment template and configure your settings:
```bash
cp .env_template .env
```

Required environment variables:

#### Server Configuration
```env
RUST_LOG=info
BIND_ADDRESS=0.0.0.0
DEBUG_MODE=true
```

#### CUDA Configuration (Optional)
```env
CUDA_ARCH=86  # 89 for Ada/A6000
```

#### Network Configuration
```env
DOMAIN=your.domain.com
TUNNEL_TOKEN=your_cloudflare_tunnel_token
TUNNEL_ID=your_tunnel_id
```

#### GitHub Configuration
```env
GITHUB_TOKEN=your_github_token
GITHUB_OWNER=your_github_username
GITHUB_REPO=your_repo_name
GITHUB_PATH=/pages
GITHUB_VERSION=
GITHUB_RATE_LIMIT=
```

#### AI Integration Configuration
```env
# RAGFlow
RAGFLOW_API_KEY=your_api_key
RAGFLOW_API_BASE_URL=http://ragflow-server/v1/
RAGFLOW_TIMEOUT=30
RAGFLOW_MAX_RETRIES=3

# Perplexity
PERPLEXITY_API_KEY=your_api_key
PERPLEXITY_MODEL=llama-3.1-sonar-small-128k-online
PERPLEXITY_API_URL=https://api.perplexity.ai/chat/completions
PERPLEXITY_MAX_TOKENS=4096

# OpenAI
OPENAI_API_KEY=your_api_key
OPENAI_BASE_URL=wss://api.openai.com/v1/realtime
```

#### Authentication Configuration
```env
# Base access control
APPROVED_PUBKEYS=pubkey1,pubkey2

# Role-based access
POWER_USER_PUBKEYS=pubkey1
SETTINGS_SYNC_ENABLED_PUBKEYS=pubkey1,pubkey2

# Feature-specific access
PERPLEXITY_ENABLED_PUBKEYS=pubkey1
OPENAI_ENABLED_PUBKEYS=pubkey1
RAGFLOW_ENABLED_PUBKEYS=pubkey1
```

### 3. Install Dependencies

#### Frontend Dependencies
```bash
# Install pnpm if not already installed
npm install -g pnpm

# Install frontend dependencies
pnpm install
```

#### Rust Dependencies
```bash
# Install Rust dependencies
cargo build

# For GPU support
cargo build --features gpu
```

## Configuration Files

### settings.yaml
Create or modify `settings.yaml` in the project root:
```yaml
system:
  network:
    domain: localhost
    port: 4000
    bind_address: 0.0.0.0
  websocket:
    heartbeat_interval: 30
    reconnect_attempts: 5
    compression_enabled: true
    compression_threshold: 1024
  gpu:
    enable: true
    workgroup_size: 256
  debug:
    enabled: false
    enable_websocket_debug: false

visualization:
  nodes:
    default_size: 1.0
    min_size: 0.5
    max_size: 2.0
  edges:
    default_width: 0.1
    min_width: 0.05
    max_width: 0.3
  physics:
    spring_strength: 0.1
    repulsion: 1.0
    damping: 0.8
```

### nginx.conf
The nginx configuration is provided in the repository. For local development, the default configuration should work without modifications.

## Development Workflow

### 1. Start Development Server
For local development without Docker:

```bash
# Terminal 1: Start the Rust backend
cargo watch -x run

# Terminal 2: Start the frontend development server
pnpm dev
```

### 2. Using Docker for Development
```bash
# Build and start all services
docker-compose up --build

# View logs
docker-compose logs -f

# Restart services
docker-compose restart

# Stop services
docker-compose down
```

## Testing

### Running Tests

#### Frontend Tests
```bash
# Run type checking
pnpm type-check

# Run linting
pnpm lint

# Format code
pnpm format
```

#### Backend Tests
```bash
# Run all Rust tests
cargo test

# Run specific test
cargo test test_name

# Run with logging
RUST_LOG=debug cargo test
```

### Linting and Formatting

#### Frontend
```bash
# Run ESLint
pnpm lint

# Fix ESLint issues
pnpm lint:fix

# Format with Prettier
pnpm format
```

#### Backend
```bash
# Format Rust code
cargo fmt

# Run Clippy linter
cargo clippy
```

## Debugging

### Frontend Debugging
1. Open Chrome DevTools (F12)
2. Use the "Sources" tab to set breakpoints
3. Check the "Console" tab for errors and logs
4. Use the React DevTools extension for component debugging

### Backend Debugging
1. Set the `RUST_LOG` environment variable:
```bash
export RUST_LOG=debug
```

2. Use logging in your code:
```rust
debug!("Debug message");
info!("Info message");
error!("Error message");
```

3. Check logs in `/tmp/webxr.log`

### WebSocket Debugging
Use the browser's Network tab to inspect WebSocket messages:
1. Filter by "WS"
2. Click on the WebSocket connection
3. View messages in the "Messages" tab

## Common Issues

### GPU Initialization Failed
If GPU initialization fails, the system will fall back to CPU computation. Check:
1. GPU drivers are up to date
2. CUDA is properly installed (if using GPU features)
3. GPU has sufficient memory
4. Correct CUDA_ARCH is set in .env

### WebSocket Connection Issues
If WebSocket connection fails:
1. Check if the backend is running
2. Verify nginx configuration
3. Check browser console for errors
4. Ensure ports are not blocked by firewall
5. Verify WebSocket compression settings

### Authentication Issues
If authentication fails:
1. Verify Nostr public keys are correctly configured
2. Check role-based access settings
3. Verify feature-specific access permissions
4. Check WebSocket connection for authentication messages

### GitHub API Rate Limiting
If you encounter GitHub API rate limiting:
1. Check your token permissions
2. Use a token with appropriate scopes
3. Implement request caching
4. Add rate limit handling

## Development Tools

### Recommended VSCode Extensions
- rust-analyzer
- ESLint
- Prettier
- Docker
- WebGL Shader
- Mermaid Preview
- Error Lens

### VSCode Settings
```json
{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "rust-analyzer.checkOnSave.command": "clippy"
}
```

## Related Documentation
- [Technical Architecture](../overview/architecture.md)
- [API Documentation](../api/rest.md)
- [Contributing Guidelines](../contributing/guidelines.md)
----
development/debugging.md
# Debugging Guide

This guide provides tools and techniques for debugging LogseqXR during development.

## WebSocket Diagnostics

WebSocket connections are critical for real-time graph updates. These diagnostic tools help identify and resolve connection issues.

### Built-in Diagnostics

LogseqXR includes built-in diagnostic functions for WebSocket troubleshooting:

```typescript
import { diagnoseWebSocketIssues } from './diagnostics';

// Run comprehensive WebSocket diagnostics
diagnoseWebSocketIssues();
```

The diagnostics will check:
- WebSocket URL validation
- Connection status
- Binary protocol validation
- Message processing
- GraphDataManager integration

### Common WebSocket Issues

1. **Connection Failures**
   - Check that the server is running on the expected port (default: 4000)
   - Verify network connectivity between client and server
   - Check for firewall or proxy restrictions

2. **Binary Data Issues**
   - Ensure data format matches the expected binary protocol
   - Check for compression/decompression errors
   - Verify that node IDs are correctly parsed

3. **Performance Problems**
   - Monitor message size and frequency
   - Check for excessive updates that might overwhelm the client
   - Verify that position deadbands are properly configured

### WebSocket Monitoring

You can monitor WebSocket traffic using browser developer tools:
1. Open DevTools (F12 or Ctrl+Shift+I)
2. Go to the Network tab
3. Filter by "WS" to show WebSocket connections
4. Select the connection to view messages

## Rendering Issues

### Three.js Debugging

For Three.js rendering issues:

1. **Enable Stats Panel**
   ```javascript
   import Stats from 'three/examples/jsm/libs/stats.module';
   const stats = new Stats();
   document.body.appendChild(stats.dom);
   ```

2. **Scene Inspector**
   ```javascript
   import { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';
   const gui = new GUI();
   gui.add(mesh.position, 'x', -10, 10);
   ```

3. **Common Rendering Issues**
   - Check camera position and frustum
   - Verify that lights are properly configured
   - Ensure materials and textures are loaded correctly

## Performance Optimization

### Client-Side Performance

1. **Identify Bottlenecks**
   - Use Chrome DevTools Performance tab to record and analyze performance
   - Look for long tasks in the Main thread
   - Check for excessive garbage collection

2. **Rendering Optimization**
   - Reduce draw calls by combining geometries
   - Use instanced meshes for similar objects
   - Implement level-of-detail (LOD) for complex scenes

3. **Memory Management**
   - Dispose of unused Three.js objects (geometries, materials, textures)
   - Use object pooling for frequently created/destroyed objects
   - Monitor memory usage with Chrome DevTools Memory tab

### Server-Side Performance

1. **Profiling Rust Code**
   ```bash
   RUSTFLAGS='-C debuginfo=2' cargo build --release
   perf record -g ./target/release/logseq-xr
   perf report
   ```

2. **WebSocket Optimization**
   - Adjust compression settings for optimal balance
   - Configure position and velocity deadbands appropriately
   - Tune update frequency based on available bandwidth

## Logging

### Client-Side Logging

LogseqXR uses a custom logger with different verbosity levels:

```typescript
import { logger } from './utils/logger';

logger.debug('Detailed information');
logger.info('General information');
logger.warn('Warning message');
logger.error('Error message');
```

Enable verbose logging in the browser console:
```javascript
localStorage.setItem('debug', 'true');
```

### Server-Side Logging

Control Rust logging level through the `RUST_LOG` environment variable:

```bash
RUST_LOG=debug cargo run
```

Available log levels:
- `error`: Only errors
- `warn`: Warnings and errors
- `info`: General information (default)
- `debug`: Detailed debugging information
- `trace`: Very verbose tracing information

## Common Issues and Solutions

### Node Position Issues

If nodes are not positioned correctly:
1. Check the binary protocol implementation
2. Verify that position data is correctly encoded/decoded
3. Ensure the client is correctly applying position updates

### WebSocket Connection Problems

If WebSocket connections fail:
1. Verify the server is running and accessible
2. Check for network issues or firewall restrictions
3. Ensure the WebSocket URL is correctly constructed

### Performance Degradation

If performance degrades over time:
1. Check for memory leaks using browser memory profiling
2. Monitor CPU usage for excessive calculations
3. Verify that unused Three.js objects are properly disposed
4. Check for excessive WebSocket message traffic

----
overview/architecture.md
# Technical Architecture

LogseqXR is built on a robust and scalable architecture that combines a Rust-based backend server with a TypeScript-based frontend client.

## Core System Architecture

The following diagram illustrates the core components of the LogseqXR system and their interactions:

```mermaid
graph TB
    subgraph Frontend
        UI[User Interface Layer]
        VR[WebXR Controller]
        WS[WebSocket Client]
        GPU[GPU Compute Layer]
        ThreeJS[Three.js Renderer]
        ChatUI[Chat Interface]
        GraphUI[Graph Interface]
        ControlPanel[Modular Control Panel]
        VRControls[VR Control System]
        WSService[WebSocket Service]
        DataManager[Graph Data Manager]
        LayoutEngine[Layout Engine]
        SpaceMouse[SpaceMouse Controller]
        NostrAuth[Nostr Authentication]
        SettingsStore[Settings Store]
    end

    subgraph Backend
        Server[Actix Web Server]
        FileH[File Handler]
        GraphH[Graph Handler]
        WSH[WebSocket Handler]
        PerplexityH[Perplexity Handler]
        RagFlowH[RagFlow Handler]
        VisualizationH[Visualization Handler]
        NostrH[Nostr Handler]
        FileS[File Service]
        GraphS[Graph Service]
        GPUS[GPU Compute Service]
        PerplexityS[Perplexity Service]
        RagFlowS[RagFlow Service]
        SpeechS[Speech Service]
        NostrS[Nostr Service]
        WSManager[WebSocket Manager]
        GPUCompute[GPU Compute]
        Compression[Compression Utils]
        AudioProc[Audio Processor]
        Node[Node Model]
        Edge[Edge Model]
        Graph[Graph Model]
        Metadata[Metadata Model]
        Position[Position Update Model]
        SimParams[Simulation Parameters]
    end

    subgraph External
        GitHub[GitHub API]
        Perplexity[Perplexity AI]
        RagFlow[RagFlow API]
        OpenAI[OpenAI API]
        Nostr[Nostr API]
    end

    UI --> ChatUI
    UI --> GraphUI
    UI --> ControlPanel
    UI --> VRControls
    UI --> NostrAuth

    VR --> ThreeJS
    WS --> WSService
    WSService --> Server

    Server --> FileH
    Server --> GraphH
    Server --> WSH
    Server --> PerplexityH
    Server --> RagFlowH
    Server --> VisualizationH
    Server --> NostrH

    FileH --> FileS
    GraphH --> GraphS
    WSH --> WSManager
    PerplexityH --> PerplexityS
    RagFlowH --> RagFlowS
    NostrH --> NostrS

    FileS --> GitHub
    PerplexityS --> Perplexity
    RagFlowS --> RagFlow
    SpeechS --> OpenAI
    NostrS --> Nostr
```

## Component Breakdown

### Frontend Components

- **UI (User Interface Layer)**: Handles user interactions, displays information, and manages UI elements.
- **VR (WebXR Controller)**: Manages WebXR sessions, input, and rendering for VR/AR devices.
- **WS (WebSocket Client)**: Establishes and maintains a WebSocket connection with the backend server.
- **GPU (GPU Compute Layer)**: Performs GPU-accelerated computations using CUDA.
- **ThreeJS (Three.js Renderer)**: Renders the 3D graph visualization using WebGL.
- **ChatUI**: Handles the chat interface for interacting with the AI.
- **GraphUI**: Manages the graph visualization, including nodes, edges, and layout.
- **ControlPanel**: Modular control panel with dockable sections, Nostr authentication, and real-time settings management.
- **VRControls**: Handles VR-specific controls and interactions.
- **WSService**: Manages the WebSocket connection and message handling.
- **DataManager**: Manages the graph data structure and updates.
- **LayoutEngine**: Computes the force-directed layout of the graph.
- **SpaceMouse**: Handles input from Spacemouse devices.
- **NostrAuth**: Manages Nostr-based authentication and user sessions.
- **SettingsStore**: Centralized settings management with persistence and validation.

### Backend Components

- **Server (Actix Web Server)**: The core backend server built with the Actix web framework.
- **FileH (File Handler)**: Handles file-related operations, such as fetching and processing Markdown files.
- **GraphH (Graph Handler)**: Manages graph data and operations, such as building and updating the graph.
- **WSH (WebSocket Handler)**: Handles WebSocket connections and messages.
- **PerplexityH (Perplexity Handler)**: Interfaces with the Perplexity AI service.
- **RagFlowH (RagFlow Handler)**: Interfaces with the RAGFlow service.
- **VisualizationH (Visualization Handler)**: Handles visualization-related requests.
- **NostrH (Nostr Handler)**: Manages Nostr authentication and user sessions.
- **FileS (File Service)**: Provides file-related services.
- **GraphS (Graph Service)**: Provides graph-related services.
- **GPUS (GPU Compute Service)**: Manages GPU-accelerated computations.
- **PerplexityS (Perplexity Service)**: Provides an interface to the Perplexity AI service.
- **RagFlowS (RagFlow Service)**: Provides an interface to the RAGFlow service.
- **SpeechS (Speech Service)**: Manages text-to-speech functionality.
- **NostrS (Nostr Service)**: Provides Nostr-related services and user management.
- **WSManager (WebSocket Manager)**: Manages WebSocket connections and message routing.

### External Services

- **GitHub API**: Provides access to the GitHub API for fetching and updating files.
- **Perplexity AI**: Provides AI-powered question answering and content analysis.
- **RagFlow API**: Provides AI-powered conversational capabilities.
- **OpenAI API**: Provides text-to-speech functionality.
- **Nostr API**: Provides decentralized authentication and user management.

For more detailed technical information, please refer to:
- [Binary Protocol](../technical/binary-protocol.md)
- [Performance Optimizations](../technical/performance.md)
- [Class Diagrams](../technical/class-diagrams.md)
- [WebSockets Implementation](../technical/websockets.md)
- [Graph Node Stacking Fix](../technical/graph-node-stacking-fix.md)
----
overview/introduction.md
# LogseqXR: Immersive WebXR Visualization for Logseq Knowledge Graphs

![image](https://github.com/user-attachments/assets/269a678d-88a5-42de-9d67-d73b64f4e520)

**Inspired by the innovative work of Prof. Rob Aspin:** [https://github.com/trebornipsa](https://github.com/trebornipsa)

![P1080785_1728030359430_0](https://github.com/user-attachments/assets/3ecac4a3-95d7-4c75-a3b2-e93deee565d6)

## Project Overview

LogseqXR revolutionizes the way you interact with your Logseq knowledge base. It's not just a visualization tool; it's a complete platform that transforms your notes into a living, breathing 3D graph, explorable in immersive AR/VR environments. This project leverages the power of **WebXR**, **Perplexity AI**, **RAGFlow**, and **Nostr** to create a dynamic and interactive experience, allowing you to literally step into your knowledge graph and gain new insights through AI-powered interactions.

**What does this mean for you?**

Imagine walking through your Logseq notes as if they were a physical space. Each note becomes a tangible node, connected by edges that represent the relationships between your ideas. With LogseqXR, you can:

- **Visualize Complexity:** See the intricate connections within your knowledge base in a way that's impossible with a flat, 2D representation.
- **Interact Intuitively:** Move, manipulate, and explore your notes using natural hand gestures or controllers in AR/VR, or through a traditional mouse and keyboard interface.
- **Gain Deeper Understanding:** Leverage the power of AI to ask questions about your knowledge graph and receive contextually relevant answers, summaries, and insights.
- **Collaborate in Real-Time:** Future versions will allow multiple users to explore and interact with the same knowledge graph simultaneously, fostering collaborative knowledge building.
- **Seamlessly Update:** Changes made within the visualization can be automatically submitted back to your source GitHub repository as pull requests, ensuring your Logseq data stays synchronized.

## Key Features

LogseqXR is packed with features designed to enhance your knowledge exploration experience:

### **1. Immersive WebXR 3D Visualization:**

- **AR/VR Environments:** LogseqXR isn't just about viewing your graph on a screen. It's about stepping into it. With support for WebXR, you can experience your knowledge graph in augmented reality (AR) or virtual reality (VR) using compatible devices like the Oculus Quest.
- **Node Interaction and Manipulation:**
  - **Click, Drag, and Reposition:** Interact with nodes directly. Click to select, drag to move, and reposition nodes to explore different perspectives on your data.
  - **Intuitive Navigation:** Use hand tracking or controllers to navigate through the 3D space, zoom in and out, and focus on specific areas of interest.
- **Dynamic Force-Directed Layout:**
  - **Real-time Recalculation:** The graph layout is not static. It's powered by a force-directed algorithm that constantly recalculates node positions based on their connections and user interactions. This creates a dynamic and organic visualization that adapts to changes in real-time.
  - **Customizable Physics:** Fine-tune the physics parameters (like spring strength, repulsion, and damping) to control the layout behavior and tailor it to your preferences.
- **Custom Shaders for Visual Effects:**
  - **Holographic Displays:** Nodes and edges can be rendered with a futuristic holographic effect, enhancing the immersive experience.
  - **Lighting Effects:** Dynamic lighting adds depth and realism to the visualization, making it easier to perceive the 3D structure of the graph.
- **Fisheye Distortion for Focus + Context Visualization:**
  - **Focus on Details:** Apply a fisheye distortion effect to magnify specific areas of the graph while still maintaining an overview of the surrounding context. This allows you to focus on details without losing sight of the bigger picture.

### **2. Modular Control Panel with Nostr Authentication**

- **Dockable Interface:**
  - Flexible, modular control panel with dockable sections
  - Customizable layout to suit your workflow
  - Collapsible sections for better space management
- **Nostr Authentication:**
  - Secure authentication using Nostr protocol
  - Role-based access control (Basic/Power User)
  - Feature access management based on user roles
- **Settings Management:**
  - Real-time settings updates with instant visual feedback
  - Settings persistence across sessions
  - Advanced settings for power users

### **3. Voice Interaction System**

The system provides flexible voice interaction capabilities with two options:

#### Current Implementation:
- **OpenAI Voice Integration:**
  - Real-time voice-to-voice communication via WebSocket API
  - High-quality text-to-speech synthesis
  - Natural language understanding
  - Low-latency streaming responses

#### Planned Local Implementation:
- **GPU-Accelerated Voice Processing:**
  - Kororo for local text-to-speech synthesis
  - Whisper for local speech-to-text processing
  - Full GPU acceleration for real-time performance
  - Complete privacy with all processing done locally
  - Zero dependency on external APIs

Both systems support:
- Real-time voice interaction
- Natural conversation flow
- Multi-language support
- WebSocket streaming for low-latency responses
- Seamless integration with the 3D visualization

### **4. AI-Powered Knowledge Enhancement (In Development)**

> **Note:** The Perplexity AI integration is currently under development. The following features describe the planned functionality that will be available in upcoming releases.

- **Automated Knowledge Base Updates:**
  - Perplexity AI analyzes your Markdown files to identify outdated information and suggest updates
  - Automatically generates pull requests to keep your knowledge base current
  - Maintains the integrity of your note structure while enhancing content

- **Intelligent Content Analysis:**
  - Identifies key topics and concepts across your knowledge base
  - Suggests new connections between related notes
  - Highlights potential gaps in your knowledge graph

- **GitHub Integration:**
  - Seamlessly submits updates through pull requests
  - Maintains full version control of all AI-suggested changes
  - Allows for easy review and approval of updates

- **Content Enhancement:**
  - Expands abbreviated notes with detailed explanations
  - Adds relevant citations and references
  - Updates technical information to reflect current state of the art

### **5. Real-time Updates:**

- **WebSocket-Based Communication:** LogseqXR uses WebSockets for real-time, bi-directional communication between the client and server. This ensures that any changes made to the graph, either locally or remotely, are instantly reflected in the visualization.
- **Optimized Binary Protocol:**
  - **Efficient Data Transfer:** To minimize bandwidth usage and maximize performance, LogseqXR uses a custom binary protocol for transmitting node position and velocity updates.
  - **Fixed-Size Format:** Each node update uses a compact 28-byte format (4-byte header + 24 bytes data), making it extremely efficient to transmit over the network.
  - **Initial Layout Flag:** The 4-byte header includes a flag to indicate whether the message contains the initial layout data or just incremental updates.
- **Automatic Graph Layout Recalculation:** When the graph structure changes (e.g., new nodes or edges are added), the force-directed layout algorithm automatically recalculates the optimal node positions to maintain a clear and organized visualization.
- **Live Preview of Changes:** Any changes made to the underlying Logseq knowledge base are immediately reflected in the 3D visualization, providing a live preview of your evolving knowledge graph.

### **6. GPU Acceleration:**

- **CUDA Acceleration for Layout Calculation:** LogseqXR leverages the power of NVIDIA GPUs to perform complex calculations for the force-directed layout algorithm. CUDA kernels enable parallel processing of node positions and velocities, resulting in significantly faster layout calculations compared to CPU-based approaches.
- **Efficient Force-Directed Algorithms:** The force-directed layout algorithm is optimized for GPU execution, taking advantage of parallel processing to handle large graphs with thousands of nodes and edges.
- **Fallback to CPU Computation:** If a compatible GPU is not available, LogseqXR gracefully falls back to CPU-based computation, ensuring that the visualization remains functional on a wide range of devices.
- **GPU-Accelerated Visual Effects:** In addition to layout calculations, CUDA is used to power advanced visual effects like the holographic display and fisheye distortion, enhancing the overall visual appeal and immersiveness of the visualization.

For more detailed information about specific features and components, please refer to the following documentation sections:

- [Technical Architecture](../technical/architecture.md)
- [Development Setup](../development/setup.md)
- [API Documentation](../api/rest.md)
- [Deployment Guide](../deployment/docker.md)
----
technical/binary-protocol.md
# WebSocket Binary Protocol

This document describes the binary protocol used for efficient real-time updates of node positions and velocities over WebSockets.

## Overview

The binary protocol is designed to minimize bandwidth usage while providing fast updates for node positions and velocities in the 3D visualization. The protocol uses a fixed-size format for each node to simplify parsing and ensure consistency.

## Protocol Format

Each binary message consists of a series of node updates, where each node update is exactly 26 bytes:

| Field    | Type      | Size (bytes) | Description                       |
|----------|-----------|--------------|-----------------------------------|
| Node ID  | uint16    | 2            | Unique identifier for the node    |
| Position | float32[3]| 12           | X, Y, Z coordinates               |
| Velocity | float32[3]| 12           | X, Y, Z velocity components       |

Total: 26 bytes per node

## Compression

For large updates (more than 1KB), the binary data is compressed using zlib compression. The client automatically detects and decompresses these messages using the pako library.

## Server-Side Only Fields

The server maintains additional data for each node that is not transmitted over the wire:

- `mass` (u8): Node mass used for physics calculations 
- `flags` (u8): Bit flags for node properties
- `padding` (u8[2]): Reserved for future use

These fields are used for server-side physics calculations and GPU processing but are not transmitted to clients to optimize bandwidth.

## Flow Sequence

1. Client connects to WebSocket endpoint (`/wss`)
2. Server sends a text message: `{"type": "connection_established"}`
3. Client sends a text message: `{"type": "requestInitialData"}`
4. Server starts sending binary updates at regular intervals (configured by `binary_update_rate` setting)
5. Server sends a text message: `{"type": "updatesStarted"}`
6. Client processes binary updates and updates the visualization

## Error Handling

If a binary message has an invalid size (not a multiple of 26 bytes), the client will log an error and discard the message. The server includes additional logging to help diagnose issues with binary message transmission.

## Implementation Notes

- All numeric values use little-endian byte order
- Position and velocity are represented as:
  - Server-side: `Vec3Data` objects with x, y, z properties
  - Client-side: THREE.Vector3 objects
  - Wire format: float32[3] arrays for efficient binary transmission
- Binary conversion takes place at the protocol boundary only

## Data Type Handling

### Server-side (Rust)

```rust
// Vec3Data object representation
struct Vec3Data {
    x: f32,
    y: f32,
    z: f32,
}
```

### Client-side (TypeScript)

```typescript
// Conversion from binary to Vector3
function decodeNodeData(view: DataView, offset: number): NodeData {
    const position = new THREE.Vector3(
        view.getFloat32(offset, true),
        view.getFloat32(offset + 4, true),
        view.getFloat32(offset + 8, true)
    );
    // ...
}
```

## Debugging

To enable WebSocket debugging:

1. Set `system.debug.enabled = true` in settings.yaml
2. Set `system.debug.enable_websocket_debug = true` in settings.yaml

This will enable detailed logging of WebSocket messages on both client and server.

## Recent Optimizations

The binary protocol was recently optimized to:

1. **Reduce Message Size**: Changed Node ID from uint32 (4 bytes) to uint16 (2 bytes), reducing each node's size from 28 to 26 bytes (7% reduction)

2. **Simplify Processing**: Removed headers with version numbers, sequence numbers and timestamps to reduce overhead

3. **Improve Type Consistency**: Ensured consistent use of structured vector objects through the entire pipeline:
   - Server: Vec3Data objects with x, y, z properties
   - Wire format: Compact binary arrays for transmission
   - Client: Direct conversion to THREE.Vector3 objects
   - GPU: Helper functions for array conversion when needed for CUDA
----
technical/class-diagrams.md
# Class Diagrams

This document provides detailed class diagrams and relationships for the major components of LogseqXR.

## Core Application Structure

```mermaid
classDiagram
    class App {
        +websocketService: WebsocketService
        +graphDataManager: GraphDataManager
        +visualization: WebXRVisualization
        +chatManager: ChatManager
        +interface: Interface
        +ragflowService: RAGFlowService
        +nostrAuthService: NostrAuthService
        +settingsStore: SettingsStore
        +start()
        +initializeEventListeners()
        +toggleFullscreen()
    }
    class WebsocketService {
        +socket: WebSocket
        +listeners: Object
        +reconnectAttempts: number
        +maxReconnectAttempts: number
        +reconnectInterval: number
        +connect()
        +on(event: string, callback: function)
        +emit(event: string, data: any)
        +send(data: object)
        +reconnect()
    }
    class GraphDataManager {
        +websocketService: WebsocketService
        +graphData: GraphData
        +requestInitialData()
        +updateGraphData(newData: GraphData)
        +getGraphData(): GraphData
        +recalculateLayout()
        +updateForceDirectedParams(name: string, value: any)
    }
    class WebXRVisualization {
        +graphDataManager: GraphDataManager
        +scene: Scene
        +camera: Camera
        +renderer: Renderer
        +controls: Controls
        +composer: Composer
        +gpu: GPUUtilities
        +nodeManager: EnhancedNodeManager
        +edgeManager: EdgeManager
        +hologramManager: HologramManager
        +textRenderer: TextRenderer
        +initialize()
        +updateVisualization()
        +initThreeJS()
        +setupGPU()
        +initPostProcessing()
        +addLights()
        +createHologramStructure()
        +handleSpacemouseInput(x: number, y: number, z: number)
        +handleBinaryPositionUpdate(buffer: ArrayBuffer)
        +animate()
        +updateVisualFeatures(control: string, value: any)
        +onWindowResize()
        +handleNodeDrag(nodeId: string, position: Vector3)
        +getNodePositions(): PositionUpdate[]
        +showError(message: string)
    }

    App --> WebsocketService
    App --> GraphDataManager
    App --> WebXRVisualization
    App --> NostrAuthService
    App --> SettingsStore
    GraphDataManager --> WebsocketService
    WebXRVisualization --> GraphDataManager
```

## Backend Services

```mermaid
classDiagram
    class GraphService {
        +build_graph(app_state: AppState): Result<GraphData, Error>
        +calculate_layout(gpu_compute: GPUCompute, graph: GraphData, params: SimulationParams): Result<void, Error>
        +initialize_random_positions(graph: GraphData)
    }
    class PerplexityService {
        +process_file(file: ProcessedFile, settings: Settings, api_client: ApiClient): Result<ProcessedFile, Error>
    }
    class FileService {
        +fetch_and_process_files(github_service: GitHubService, settings: Settings, metadata_map: Map<String, Metadata>): Result<Vec<ProcessedFile>, Error>
        +load_or_create_metadata(): Result<Map<String, Metadata>, Error>
        +save_metadata(metadata: Map<String, Metadata>): Result<void, Error>
        +calculate_node_size(file_size: number): number
        +extract_references(content: string, valid_nodes: String[]): Map<String, ReferenceInfo>
        +convert_references_to_topic_counts(references: Map<String, ReferenceInfo>): Map<String, number>
        +initialize_local_storage(github_service: GitHubService, settings: Settings): Result<void, Error>
        +count_hyperlinks(content: string): number
    }
    class NostrService {
        +settings: Settings
        +validate_session(pubkey: str, token: str): bool
        +get_user(pubkey: str): Option<NostrUser>
        +update_user_api_keys(pubkey: str, api_keys: ApiKeys): Result<NostrUser>
    }
    class GitHubService {
        +fetch_file_metadata(): Result<Vec<GithubFileMetadata>, Error>
        +get_download_url(file_name: string): Result<string, Error>
        +fetch_file_content(download_url: string): Result<string, Error>
        +get_file_last_modified(file_path: string): Result<Date, Error>
    }
    class GitHubPRService {
        +create_pull_request(file_name: string, content: string, original_sha: string): Result<string, Error>
    }
    class ApiClient {
        +post_json(url: string, body: PerplexityRequest, perplexity_api_key: string): Result<string, Error>
    }
    class SpeechService {
        +websocketManager: WebSocketManager
        +settings: Settings
        +start(receiver: Receiver<SpeechCommand>)
        +initialize(): Result<void, Error>
        +send_message(message: string): Result<void, Error>
        +close(): Result<void, Error>
        +set_tts_provider(use_openai: boolean): Result<void, Error>
    }

    GraphService --> GPUCompute
    PerplexityService --> ApiClient
    FileService --> GitHubService
    GitHubPRService --> GitHubService
    SpeechService --> WebSocketManager
```

## Frontend Components

```mermaid
classDiagram
    class ChatManager {
        +websocketService: WebsocketService
        +ragflowService: RAGFlowService
        +sendMessage(message: string)
        +receiveMessage()
        +handleIncomingMessage(message: string)
    }
    class Interface {
        +chatManager: ChatManager
        +visualization: WebXRVisualization
        +controlPanel: ModularControlPanel
        +handleUserInput(input: string)
        +displayChatMessage(message: string)
        +setupEventListeners()
        +renderUI()
        +updateNodeInfoPanel(node: object)
        +displayErrorMessage(message: string)
    }
    class ModularControlPanel {
        +settingsStore: SettingsStore
        +validationDisplay: ValidationErrorDisplay
        +sections: Map<string, SectionConfig>
        +initializePanel()
        +initializeNostrAuth()
        +updateAuthUI(user: NostrUser)
        +createSection(config: SectionConfig, paths: string[])
        +toggleDetached(sectionId: string)
        +toggleCollapsed(sectionId: string)
        +show()
        +hide()
        +dispose()
    }
    class NostrAuthService {
        +currentUser: NostrUser
        +eventEmitter: SettingsEventEmitter
        +settingsPersistence: SettingsPersistenceService
        +initialize()
        +login(): Promise<AuthResult>
        +logout()
        +getCurrentUser(): NostrUser
        +isAuthenticated(): boolean
        +isPowerUser(): boolean
        +hasFeatureAccess(feature: string): boolean
        +checkAuthStatus(pubkey: string)
        +onAuthStateChanged(callback: function)
    }
    class SettingsStore {
        +settings: Settings
        +observers: Set<Observer>
        +initialize()
        +get(path: string): any
        +set(path: string, value: any)
        +subscribe(observer: Observer)
        +unsubscribe(observer: Observer)
        +validate(settings: Settings)
        +persist()
    }
    class RAGFlowService {
        +settings: Settings
        +apiClient: ApiClient
        +createConversation(userId: string): Promise<string>
        +sendMessage(conversationId: string, message: string): Promise<string>
        +getConversationHistory(conversationId: string): Promise<object>
    }

    Interface --> ChatManager
    Interface --> WebXRVisualization
    Interface --> ModularControlPanel
    ChatManager --> RAGFlowService
    ModularControlPanel --> SettingsStore
    ModularControlPanel --> NostrAuthService
```

## WebSocket Components

```mermaid
classDiagram
    class SpeechWs {
        +websocketManager: WebSocketManager
        +settings: Settings
        +hb(ctx: Context)
        +check_heartbeat(ctx: Context)
        +started(ctx: Context)
        +handle(msg: Message, ctx: Context)
    }
    class WebSocketManager {
        +connections: Map<String, WebSocket>
        +add_connection(id: String, ws: WebSocket)
        +remove_connection(id: String)
        +broadcast(message: Message)
        +send_to(id: String, message: Message)
    }

    SpeechWs --> WebSocketManager
```

## Key Relationships

- The `App` class serves as the main entry point and coordinates all major components
- `WebsocketService` handles real-time communication between frontend and backend
- `GraphDataManager` manages the graph data structure and coordinates with the visualization
- `WebXRVisualization` handles the 3D rendering and XR interactions
- `ModularControlPanel` provides a flexible UI with dockable sections and Nostr authentication
- `NostrAuthService` manages user authentication and feature access
- `SettingsStore` provides centralized settings management
- Backend services are organized around specific responsibilities (files, graph, AI, auth, etc.)
- Frontend components handle user interaction and visualization updates

## Related Documentation
- [Technical Architecture](../overview/architecture.md)
- [Development Setup](../development/setup.md)
- [API Documentation](../api/rest.md)
----
technical/edge-rendering-fix-plan.md
# Edge Rendering Fix Plan

## Current Issues
1. Edges don't reach node surfaces
2. Edge widths are too thin
3. Edge positions don't update properly with node movement

## Root Causes
1. Edge endpoints don't account for node radii when calculating positions
2. Hardcoded edge width scaling (0.1) makes edges too thin
3. Edge position calculation needs to account for node sizes

## Implementation Plan

### 1. Update Edge Width Calculation
In EdgeManager.ts, modify the edge width calculation to:
- Remove hardcoded 0.1 scale factor
- Use the edge.scaleFactor from settings (default 2.0)
- Properly scale width based on settings ranges

```typescript
// Before
const edgeWidth = Math.max(widthRange[0], Math.min(widthRange[1], baseWidth)) * 0.1;

// After
const edgeWidth = Math.max(widthRange[0], Math.min(widthRange[1], baseWidth)) * settings.visualization.edges.scaleFactor;
```

### 2. Account for Node Sizes
Modify edge endpoint calculations to account for node radii:

```typescript
// Calculate node radii based on settings
const sourceRadius = settings.visualization.nodes.baseSize * 0.5;
const targetRadius = settings.visualization.nodes.baseSize * 0.5;

// Adjust start and end positions by node radii
const direction = endPos.clone().sub(startPos).normalize();
const adjustedStart = startPos.clone().add(direction.clone().multiplyScalar(sourceRadius));
const adjustedEnd = endPos.clone().sub(direction.clone().multiplyScalar(targetRadius));

// Use adjusted positions for edge placement
const position = adjustedStart.clone().add(adjustedEnd).multiplyScalar(0.5);
const length = adjustedStart.distanceTo(adjustedEnd);
```

### 3. Improve Edge Updates
Ensure edges update properly when nodes move:
- Subscribe to node position updates in VisualizationController
- Trigger edge updates when node positions change
- Use proper matrix updates for instanced mesh

## Testing Plan
1. Verify edges connect to node surfaces
2. Check edge widths match settings
3. Confirm edges update with node movement
4. Test with different node sizes
5. Validate performance with many edges

## Expected Results
- Edges should visually connect to node surfaces
- Edge widths should be proportional to settings
- Edges should maintain connections as nodes move
- Performance should remain smooth with many edges
----
technical/github-settings-migration.md
# GitHub Settings Migration Plan

[Previous content remains unchanged up to "Future Considerations" section...]

## Deployment Considerations

### Environment Variables
1. Required Variables:
   - GITHUB_TOKEN
   - GITHUB_OWNER
   - GITHUB_REPO
   - GITHUB_BASE_PATH

2. Optional Variables:
   - GITHUB_RATE_LIMIT (defaults to true)
   - GITHUB_API_VERSION (defaults to "v3")

### Docker Deployment
1. Update Dockerfile:
   - Remove any GitHub-related environment variable defaults
   - Document required environment variables in comments

2. Update docker-compose.yml:
   - Move GitHub environment variables to .env file
   - Add environment variable validation in entrypoint

3. Documentation Updates:
   - Update deployment guides
   - Add environment variable requirements
   - Update troubleshooting guides

### CI/CD Pipeline
1. Secrets Management:
   - Move GitHub token to CI/CD secrets
   - Update pipeline configurations
   - Document secret requirements

2. Testing:
   - Add environment variable validation tests
   - Update integration tests
   - Add deployment validation steps

## Client-Side Verification

1. No Direct Impact:
   - Client code does not directly interact with GitHub settings
   - No client-side changes required
   - No UI updates needed

2. Testing Requirements:
   - Verify all GitHub-dependent features still work
   - Test error handling for GitHub API failures
   - Verify no sensitive data in client logs

## Monitoring and Logging

1. Add Monitoring:
   - GitHub API rate limit usage
   - Authentication failures
   - Configuration validation errors

2. Update Logging:
   - Remove any GitHub token logging
   - Add structured logging for GitHub operations
   - Include correlation IDs for tracking

3. Metrics:
   - Add GitHub API call metrics
   - Track rate limit usage
   - Monitor error rates

## Future Considerations

1. API Integration Improvements:
   - Consider similar patterns for other API integrations (Perplexity, RagFlow)
   - Implement unified API configuration management
   - Create reusable environment config patterns

2. Security Enhancements:
   - Consider secrets management service integration
   - Implement token rotation
   - Add API key usage analytics

3. Configuration Management:
   - Consider configuration validation framework
   - Implement configuration hot-reloading
   - Add configuration documentation generation

4. Error Handling:
   - Create unified error handling system
   - Implement retry strategies
   - Add circuit breakers for API calls

## Migration Checklist

### Pre-Migration
1. [ ] Backup current settings
2. [ ] Document current GitHub integration points
3. [ ] Set up monitoring baseline
4. [ ] Prepare rollback procedures

### Migration Steps
1. [ ] Deploy new configuration system
2. [ ] Update environment variables
3. [ ] Remove GitHub settings from YAML
4. [ ] Update documentation
5. [ ] Deploy changes
6. [ ] Verify functionality

### Post-Migration
1. [ ] Monitor for errors
2. [ ] Verify no sensitive data exposure
3. [ ] Update deployment guides
4. [ ] Train support team
5. [ ] Update disaster recovery procedures

## Success Criteria
1. All GitHub operations functional
2. No sensitive data in settings files
3. Proper error handling implemented
4. All tests passing
5. Documentation updated
6. Monitoring in place
7. Support team trained
8. Deployment procedures updated

## Rollback Procedures
1. Immediate Rollback:
   - Revert code changes
   - Restore settings format
   - Verify functionality

2. Gradual Rollback:
   - Keep dual configuration
   - Monitor for issues
   - Plan new migration attempt

## Timeline
1. Week 1: Implementation and Testing
2. Week 2: Deployment and Monitoring
3. Week 3: Documentation and Training
4. Week 4: Cleanup and Verification

## Support and Maintenance
1. Update support documentation
2. Train support team on new configuration
3. Update troubleshooting guides
4. Prepare common issues documentation
----
technical/metadata-text-visibility-fix.md
# Metadata Text Visibility Fix Plan

## Issues Identified

1. Settings Access
- MetadataVisualizer uses incorrect settings property paths
- Default metadata visualization is disabled
- Billboard mode property name mismatch

2. Text Scaling
- Text meshes are scaled too small (0.1)
- Font size settings not properly utilized

3. Font Loading
- No font loading verification
- Missing retry mechanism
- Silent failure handling

## Implementation Plan

### 1. Fix Settings Access

Update MetadataVisualizer.ts to use correct settings paths:
- Replace `settings.labelSize` with `settings.labels.desktopFontSize`
- Replace `settings.labelColor` with `settings.labels.textColor`
- Replace `settings.labels.billboard_mode` with `settings.labels.billboardMode`

### 2. Improve Text Visibility

Update text creation in MetadataVisualizer.ts:
- Increase base text scale from 0.1 to appropriate size based on desktopFontSize
- Add text outline using textOutlineColor and textOutlineWidth from settings
- Ensure proper text positioning above nodes
- Add distance-based scaling for better readability

### 3. Enhance Font Loading

Add robust font loading:
- Add font existence verification
- Implement retry mechanism with configurable attempts
- Add proper error handling with user feedback
- Cache font after successful load

### 4. Testing Steps

1. Verify settings are properly accessed
2. Confirm text is visible and properly scaled
3. Test font loading reliability
4. Verify text remains readable at different distances
5. Check billboard behavior works correctly

## Migration Notes

- Changes are backward compatible
- No database updates required
- No API changes needed
----
technical/performance.md
# Performance Optimizations

LogseqXR incorporates several performance optimizations to ensure a smooth and responsive user experience, even with large knowledge graphs and complex visualizations.

## Network Optimizations

### WebSocket Binary Protocol
- **Efficient Binary Format**
  - Fixed-size 28-byte format per node
  - Direct floating-point value transmission
  - No parsing or conversion overhead

- **Compact Message Structure**
  - 8-byte header (message type + node count)
  - Fixed-size node data blocks
  - No additional metadata overhead

- **Efficient Data Transfer**
  - Binary format eliminates JSON parsing
  - Direct TypedArray access for fast processing
  - Minimal protocol overhead

### WebSocket Management
- **Connection Pooling**
  - Maintains persistent connections
  - Reduces handshake overhead
  - Automatic reconnection handling

- **Message Batching**
  - Groups multiple updates into single messages
  - Reduces network overhead
  - Optimizes packet utilization

## GPU Acceleration

### Force-Directed Layout
- **CUDA Acceleration**
  - Parallel processing of node positions
  - Efficient force calculations
  - Real-time layout updates

- **Memory Management**
  - Structured buffer layouts
  - Optimized data access patterns
  - Minimal data transfers between CPU and GPU

### Rendering Pipeline
- **Three.js Optimizations**
  - Frustum culling for off-screen objects
  - Level-of-detail management
  - Efficient scene graph organization

- **Custom Shaders**
  - Optimized vertex and fragment shaders
  - Hardware-accelerated visual effects
  - Efficient material updates

## CPU Optimizations

### Fallback Implementation
- **Efficient Data Structures**
  - Optimized spatial partitioning
  - Cache-friendly memory layout
  - Minimal object allocation

- **Algorithm Optimizations**
  - Barnes-Hut approximation for n-body forces
  - Adaptive time stepping
  - Incremental layout updates

### State Management
- **Minimal Re-renders**
  - Change detection optimization
  - Selective updates
  - Event batching

## Memory Management

### Buffer Pooling
- **TypedArray Pools**
  - Reuse of allocated buffers
  - Reduced garbage collection
  - Efficient memory utilization

- **Geometry Instancing**
  - Shared geometry for similar nodes
  - Reduced memory footprint
  - Improved rendering performance

### Resource Cleanup
- **Automatic Disposal**
  - Proper cleanup of Three.js resources
  - WebGL context management
  - Memory leak prevention

## Benchmarks

### Network Performance
```
Message Size (1000 nodes):
- JSON Format:    ~256KB
- Binary Format:  ~28KB
- Reduction:      89%

Update Frequency:
- Target:         60 FPS
- Average:        58 FPS
- Min FPS:        45 FPS
```

### Rendering Performance
```
Scene Complexity:
- Nodes:          10,000
- Edges:          50,000
- FPS (GPU):      60+
- FPS (CPU):      30+

Memory Usage:
- GPU Memory:     ~100MB
- System Memory:  ~200MB
```

### Layout Computation
```
Force Calculation (1000 nodes):
- GPU Time:       0.5ms
- CPU Time:       15ms
- Speedup:        30x

Position Updates:
- GPU Time:       0.2ms
- CPU Time:       5ms
- Speedup:        25x
```

## Best Practices

### Development Guidelines
1. **Minimize State Updates**
   - Batch related changes
   - Use requestAnimationFrame for visual updates
   - Implement proper debouncing

2. **Optimize Resource Loading**
   - Lazy load non-essential components
   - Implement proper asset caching
   - Use compressed textures when possible

3. **Monitor Performance**
   - Implement performance monitoring
   - Track key metrics
   - Set up alerting for degradation

### Configuration Recommendations
```yaml
# Performance-related settings
system:
  websocket:
    batch_size: 100
    update_interval_ms: 16
    compression_threshold: 1024

  gpu:
    workgroup_size: 256
    cuda_block_size: 256
    enable_instancing: true

  rendering:
    frustum_culling: true
    lod_levels: 3
    max_visible_nodes: 5000
```

## Monitoring and Profiling

### Key Metrics
- Frame rate (FPS)
- WebSocket message latency
- GPU memory usage
- Layout computation time
- Network bandwidth utilization

### Performance Logging
```typescript
class PerformanceMonitor {
    private metrics: Map<string, number[]> = new Map();

    logMetric(name: string, value: number) {
        if (!this.metrics.has(name)) {
            this.metrics.set(name, []);
        }
        this.metrics.get(name)!.push(value);
    }

    getAverages(): Record<string, number> {
        const averages: Record<string, number> = {};
        for (const [name, values] of this.metrics) {
            averages[name] = values.reduce((a, b) => a + b) / values.length;
        }
        return averages;
    }
}
```

## Related Documentation
- [Binary Protocol](./binary-protocol.md)
- [Development Setup](../development/setup.md)
----
technical/scale-factors-architecture.md
# Scale Factors Architecture

## Core Principles

1. AR Space Matching
   - Only xrSessionManager.ts should handle room-scale adjustments
   - All other scaling should be relative to the room scale when in AR mode
   - Room scale is the source of truth for real-world space matching

2. Visualization Hierarchy
   - Node scaling is intentionally designed for visual importance
   - Hologram instance scaling is designed for scene composition
   - These visual scales should not affect spatial relationships

## Permitted Scale Usage

### AR/XR Layer (Space Matching)
- Location: xrSessionManager.ts
- Purpose: Match virtual space to real world space
- Implementation: Uses roomScale setting
- Scope: Applies to entire AR group/camera rig

### Node Visualization Layer
- Location: EnhancedNodeManager.ts
- Purpose: Visual representation of node importance
- Implementation: Base size + importance-based scaling
- Scope: Individual node instances

### Scene Elements Layer
- Location: HologramManager.ts
- Purpose: Visual composition of holographic elements
- Implementation: Instance-based scaling for geometric elements
- Scope: Individual hologram instances

## Restricted Areas

The following areas should NOT implement their own scaling:

1. Edge Rendering
   - Should inherit from node scaling
   - No independent scale factors

2. Physics/Graph Layout
   - Should operate in normalized space
   - Scaling should only be applied at visualization layer


## Implementation Guidelines

1. Scale Inheritance
   - All child objects should inherit parent scale
   - No competing scale factors in hierarchy

2. AR Mode Considerations
   - All visual scaling must respect room scale in AR mode
   - Visual effects should not interfere with spatial matching

3. Configuration
   - Scale factors should be centralized in settings
   - Clear separation between space-matching and visual scales

## Validation Points

When reviewing scale factor usage:

1. Check if scale factor is necessary
   - Is it for space matching? → Should be in xrSessionManager.ts
   - Is it for visualization? → Should be in appropriate visualization layer
   - Neither? → Should probably be removed

2. Verify scale inheritance
   - Is it respecting parent scales?
   - Is it conflicting with other scale factors?

3. Test AR compatibility
   - Does it interfere with space matching?
   - Does it maintain proper relationships in AR mode?

## Next Steps

1. Audit Existing Code
   - Remove any scale factors outside permitted areas
   - Ensure proper scale inheritance
   - Validate AR mode compatibility

2. Documentation
   - Update code comments to clarify scale factor usage
   - Document scale inheritance in component relationships

3. Testing
   - Add tests for scale inheritance
   - Verify AR space matching with different configurations
----
technical/scale-factors-review.md
# Scale Factors Review

## Overview
This document outlines the usage of scale factors across the codebase and recommendations for maintaining AR space consistency.

## Current Scale Factor Usage

### AR/XR (Acceptable)
- `xrSessionManager.ts`: Uses roomScale for AR mode
  - Applied to arGroup and cameraRig
  - Controlled by settings
- `config/mod.rs`: room_scale setting (default: 0.1)

### Visualization (Needs Review)
1. MetadataVisualizer.ts
   - Uses scale for metadata importance visualization
   - Could affect AR space perception

2. EnhancedNodeManager.ts
   - Base scale from settings
   - Velocity-based scaling
   - Node importance scaling
   - Recommendation: Consider removing dynamic scaling in AR mode

3. HologramManager.ts
   - Multiple geometric scales:
     - buckminster_scale
     - geodesic_scale
     - triangle_sphere_scale
   - Recommendation: Ensure these are relative to room_scale in AR mode

### Physics/Graph
- graph_service.rs: Uses scale for velocity normalization
- Recommendation: Verify this doesn't affect spatial relationships in AR

## Recommendations

1. AR Mode Consistency
   - All scales should be relative to room_scale in AR mode
   - Consider adding an AR mode check before applying non-essential scaling

2. Configuration Consolidation
   - Review necessity of multiple scale settings
   - Consider consolidating visualization scales
   - Add validation to prevent conflicting scale factors

3. Implementation Tasks
   - Add AR mode checks before applying visualization scaling
   - Normalize all scales relative to room_scale in AR mode
   - Add scale factor validation in settings

## Next Steps
1. Review and validate all scale factor usage
2. Implement AR mode checks
3. Consolidate configuration settings
4. Add scale factor validation
5. Test AR space matching with different scale configurations
----
technical/settings-initialization.md
# Settings Initialization Flow

## Overview
The settings initialization process handles both server-side settings and user-specific settings through Nostr authentication. This document outlines the initialization flow and how different settings sources are prioritized.

## Settings Hierarchy

1. Server Settings (Highest Priority)
   - Defined in settings.yaml
   - Contains system-wide configurations
   - Protected settings that shouldn't be overwritten

2. Nostr User Settings
   - User-specific settings stored with Nostr authentication
   - Persisted per user pubkey
   - Synced across sessions

3. Local Default Settings (Lowest Priority)
   - Defined in defaultSettings.ts
   - Used as fallback when server/Nostr settings unavailable
   - Basic configuration for new users

## Initialization Flow

1. First attempt to fetch server settings
   - Make GET request to `/api/settings`
   - If successful, use these settings as the base
   - Validate the server settings

2. If user is authenticated via Nostr:
   - Fetch user-specific settings using pubkey
   - Merge with server settings (user settings take precedence for customizable options)
   - Preserve protected server settings

3. If server settings fail or user not authenticated:
   - Load default settings as fallback
   - Validate default settings
   - Log warning about using defaults

4. Settings Persistence:
   - Server settings remain in settings.yaml
   - User settings stored with Nostr credentials
   - Local settings cached in browser storage

## Implementation Details

### SettingsStore

```typescript
class SettingsStore {
    private settings: Settings;
    private serverOrigin: boolean;
    private nostrAuth: NostrAuthService;
    private settingsPersistence: SettingsPersistenceService;

    async initialize() {
        try {
            // 1. Try server settings first
            const serverSettings = await this.fetchServerSettings();
            this.settings = serverSettings;
            this.serverOrigin = true;

            // 2. If authenticated, merge with user settings
            if (this.nostrAuth.isAuthenticated()) {
                const userSettings = await this.settingsPersistence.loadUserSettings(
                    this.nostrAuth.getCurrentUser()?.pubkey
                );
                this.mergeSettings(userSettings, true);
            }
        } catch (error) {
            // 3. Fallback to defaults
            this.settings = defaultSettings;
            this.serverOrigin = false;
            logger.warn('Using default settings:', error);
        }

        // Validate final settings
        this.validate(this.settings);
    }

    private mergeSettings(newSettings: Partial<Settings>, isUserSettings: boolean) {
        if (isUserSettings) {
            // Merge user customizable settings only
            this.settings = {
                ...this.settings,
                ...this.filterCustomizableSettings(newSettings)
            };
        } else {
            // Full merge for non-user settings
            this.settings = {
                ...this.settings,
                ...newSettings
            };
        }
    }
}
```

### NostrAuthService Integration

```typescript
class NostrAuthService {
    async login(): Promise<AuthResult> {
        const result = await this.authenticate();
        if (result.authenticated) {
            // Load user settings after successful auth
            await this.settingsPersistence.loadUserSettings(result.user.pubkey);
            this.eventEmitter.emit(SettingsEventType.AUTH_STATE_CHANGED, {
                authState: { isAuthenticated: true, pubkey: result.user.pubkey }
            });
        }
        return result;
    }

    async logout(): Promise<void> {
        const currentPubkey = this.currentUser?.pubkey;
        if (currentPubkey) {
            // Save user settings before logout
            await this.settingsPersistence.saveUserSettings(currentPubkey);
        }
        // Clear user settings and revert to defaults
        await this.settingsPersistence.loadSettings();
    }
}
```

## Benefits

1. Clear Settings Hierarchy
   - Server settings preserved for critical configurations
   - User preferences maintained across sessions
   - Reliable fallback to defaults

2. Improved User Experience
   - Settings persist across devices through Nostr
   - Quick restoration of preferences on login
   - Protected settings prevent accidental overwrites

3. Technical Advantages
   - Reduced unnecessary API calls
   - Better error handling and fallbacks
   - Clear separation of concerns

## Implementation Notes

- Server's settings.yaml is the source of truth for system settings
- User settings only modify allowed customization options
- All UI-based settings changes sync to both server and Nostr storage
- Initial load prevents unnecessary syncing
- Clear logging for debugging settings flow

This architecture ensures proper settings management while providing flexibility for user customization and reliable persistence through Nostr authentication.
----
technical/hologram-edge-rendering.md
# Hologram Edge-Only Rendering Implementation

## Overview
This document outlines the implementation plan for modifying hologram and sphere visuals to render as double-sided edges without faces, improving visual clarity and performance.

## Current Issues
- Full face rendering with opacity affects visual clarity
- Single-sided polygon rendering causes visibility issues
- Separate systems for edge and hologram rendering

## Implementation Plan

### 1. GeometryFactory Modifications

```typescript
// Add new methods for edge-only geometry generation
getEdgeOnlyNodeGeometry(): BufferGeometry {
    // Generate edges for sphere using EdgesGeometry
    // Set threshold angle for edge detection
    // Return edge-only geometry
}

getEdgeOnlyHologramGeometry(): BufferGeometry {
    // Similar to above but with hologram-specific parameters
    // Include additional edge segments for hologram effect
}
```

### 2. HologramShaderMaterial Updates

```glsl
// Modified fragment shader for edge-only rendering
void main() {
    float pulse = sin(time * 2.0) * 0.5 + 0.5;
    float dist = length(vPosition - interactionPoint);
    float interaction = interactionStrength * (1.0 - smoothstep(0.0, 2.0, dist));
    
    // Apply effects to edge intensity instead of face opacity
    float edgeIntensity = opacity * (0.5 + pulse * pulseIntensity + interaction);
    
    // Edge-only color calculation
    gl_FragColor = vec4(color, edgeIntensity);
}
```

### 3. EdgeManager Enhancements

```typescript
// Add hologram-specific edge handling
createHologramEdge(geometry: BufferGeometry): Mesh {
    const material = new HologramShaderMaterial({
        opacity: this.settings.visualization.edges.opacity,
        // Other hologram-specific settings
    });
    
    return new Mesh(geometry, material);
}

// Update edge visibility based on hologram parameters
updateHologramEdges(): void {
    // Apply hologram effects to edge rendering
    // Update edge visibility and intensity
}
```

## Implementation Steps

1. Modify GeometryFactory:
   - Add edge-only geometry generation methods
   - Update existing geometry creation to support edge-only mode
   - Implement caching for edge geometries

2. Update HologramShaderMaterial:
   - Modify shader code for edge-only rendering
   - Add edge-specific uniforms and parameters
   - Update material properties for edge rendering

3. Enhance EdgeManager:
   - Add hologram-specific edge handling
   - Implement edge visibility updates
   - Integrate with hologram visualization system

4. Testing:
   - Verify edge-only rendering
   - Check performance impact
   - Validate visual consistency

## Benefits

- Improved visual clarity through edge-only rendering
- Better performance by eliminating face rendering
- More consistent hologram visualization
- Enhanced edge visibility control

## Technical Considerations

- Edge detection parameters need careful tuning
- Performance optimization for edge geometry generation
- Shader modifications for edge intensity control
- Integration with existing visualization systems

## Future Improvements

- Dynamic edge thickness based on camera distance
- Edge color variations for different hologram states
- Advanced edge effects (glow, pulse patterns)
- Performance optimizations for large numbers of edges
----
technical/kokoros-tts-integration.md
# Kokoros TTS Integration Plan

## Overview

This document outlines the detailed plan for integrating Kokoros TTS into our application, replacing the existing Sonata TTS implementation. The integration will be done in phases to ensure smooth transition and minimal disruption to the existing functionality.

## Phase 1: Server-Side Changes

### 1.1 Update Speech Types

First, we'll update the speech types in `src/types/speech.rs`:

```rust
#[derive(Debug, Clone)]
pub enum TTSProvider {
    OpenAI,
    Kokoros,  // Replacing Sonata
}

#[derive(Debug)]
pub enum SpeechCommand {
    Initialize,
    SendMessage(String),
    Close,
    SetTTSProvider(TTSProvider),
}

// Add Kokoros-specific error types
#[derive(Debug)]
pub enum SpeechError {
    WebSocketError(tungstenite::Error),
    ConnectionError(String),
    SendError(mpsc::error::SendError<SpeechCommand>),
    SerializationError(serde_json::Error),
    ProcessError(std::io::Error),
    Base64Error(base64::DecodeError),
    BroadcastError(String),
    TTSError(String),
    KokorosError(String),  // New error type for Kokoros
}
```

### 1.2 Implement Kokoros Client

Create a new module `src/services/kokoros_client.rs`:

```rust
use reqwest::Client;
use serde::{Deserialize, Serialize};
use tokio::sync::mpsc;
use crate::types::speech::SpeechError;

#[derive(Debug, Serialize)]
struct TTSRequest {
    text: String,
    voice: String,  // Optional: Configure based on settings
}

#[derive(Debug, Deserialize)]
struct TTSResponse {
    audio: Vec<u8>,
    success: bool,
}

pub struct KokorosClient {
    client: Client,
    endpoint: String,
}

impl KokorosClient {
    pub fn new() -> Self {
        Self {
            client: Client::new(),
            endpoint: "http://localhost:4001/v1/audio/tts".to_string(),
        }
    }

    pub async fn generate_speech(&self, text: String) -> Result<Vec<u8>, SpeechError> {
        let request = TTSRequest {
            text,
            voice: "default".to_string(),
        };

        let response = self.client
            .post(&self.endpoint)
            .json(&request)
            .send()
            .await
            .map_err(|e| SpeechError::KokorosError(e.to_string()))?;

        if !response.status().is_success() {
            return Err(SpeechError::KokorosError(
                format!("Kokoros API error: {}", response.status())
            ));
        }

        let audio_data = response
            .bytes()
            .await
            .map_err(|e| SpeechError::KokorosError(e.to_string()))?;

        Ok(audio_data.to_vec())
    }
}
```

### 1.3 Update Speech Service

Modify `src/services/speech_service.rs` to integrate Kokoros:

```rust
use super::kokoros_client::KokorosClient;

pub struct SpeechService {
    sender: Arc<Mutex<mpsc::Sender<SpeechCommand>>>,
    settings: Arc<RwLock<Settings>>,
    tts_provider: Arc<RwLock<TTSProvider>>,
    kokoros_client: KokorosClient,
}

impl SpeechService {
    pub fn new(settings: Arc<RwLock<Settings>>) -> Self {
        let (tx, rx) = mpsc::channel(100);
        let sender = Arc::new(Mutex::new(tx));

        let service = SpeechService {
            sender,
            settings,
            tts_provider: Arc::new(RwLock::new(TTSProvider::Kokoros)),
            kokoros_client: KokorosClient::new(),
        };

        service.start(rx);
        service
    }

    // Update message handling to use Kokoros
    async fn handle_tts(&self, text: String) -> Result<Vec<u8>, SpeechError> {
        match *self.tts_provider.read().await {
            TTSProvider::Kokoros => {
                self.kokoros_client.generate_speech(text).await
            },
            TTSProvider::OpenAI => {
                // Existing OpenAI implementation
            }
        }
    }
}
```

## Phase 2: Client-Side Implementation

### 2.1 Create Audio Player

Create new file `client/audio/AudioPlayer.ts`:

```typescript
export class AudioPlayer {
    private static instance: AudioPlayer | null = null;
    private audioContext: AudioContext;
    private audioQueue: AudioBuffer[] = [];
    private isPlaying: boolean = false;
    private currentSource: AudioBufferSourceNode | null = null;

    private constructor() {
        this.audioContext = new AudioContext();
    }

    public static getInstance(): AudioPlayer {
        if (!AudioPlayer.instance) {
            AudioPlayer.instance = new AudioPlayer();
        }
        return AudioPlayer.instance;
    }

    public async handleAudioChunk(data: ArrayBuffer, isLastChunk: boolean): Promise<void> {
        try {
            const audioBuffer = await this.audioContext.decodeAudioData(data);
            this.audioQueue.push(audioBuffer);

            if (!this.isPlaying) {
                this.playNextChunk();
            }
        } catch (error) {
            console.error('Error processing audio chunk:', error);
        }
    }

    private playNextChunk(): void {
        if (this.audioQueue.length === 0) {
            this.isPlaying = false;
            return;
        }

        this.isPlaying = true;
        const buffer = this.audioQueue.shift()!;
        const source = this.audioContext.createBufferSource();
        source.buffer = buffer;
        source.connect(this.audioContext.destination);

        source.onended = () => {
            this.playNextChunk();
        };

        this.currentSource = source;
        source.start(0);
    }

    public resume(): void {
        if (this.audioContext.state === 'suspended') {
            this.audioContext.resume();
        }
    }

    public pause(): void {
        if (this.audioContext.state === 'running') {
            this.audioContext.suspend();
        }
    }

    public stop(): void {
        if (this.currentSource) {
            this.currentSource.stop();
            this.currentSource = null;
        }
        this.audioQueue = [];
        this.isPlaying = false;
    }
}
```

### 2.2 Update WebSocket Types

Create/update `client/types/websocket.ts`:

```typescript
export enum MessageType {
    POSITION_VELOCITY_UPDATE = 0x01,
    VOICE_DATA = 0x02,
}

export interface VoiceData {
    chunkId: number;
    isFinal: boolean;
    data: ArrayBuffer;
}

export interface VoiceDataMessage {
    type: MessageType.VOICE_DATA;
    data: VoiceData;
}
```

### 2.3 Update WebSocket Service

Modify `client/websocket/websocketService.ts`:

```typescript
import { AudioPlayer } from '../audio/AudioPlayer';
import { MessageType, VoiceData } from '../types/websocket';

export class WebSocketService {
    private readonly MessageType = {
        PositionVelocityUpdate: 0x01,
        VoiceData: 0x02
    } as const;

    private handleBinaryMessage(buffer: ArrayBuffer): void {
        try {
            const decompressedBuffer = this.tryDecompress(buffer);
            const dataView = new DataView(decompressedBuffer);
            let offset = 0;

            const messageType = dataView.getUint32(offset, true);
            offset += 4;

            switch (messageType) {
                case this.MessageType.PositionVelocityUpdate:
                    // Existing position update handling
                    break;

                case this.MessageType.VoiceData:
                    this.handleVoiceData(decompressedBuffer.slice(4));
                    break;

                default:
                    logger.warn('Unexpected binary message type:', messageType);
            }
        } catch (error) {
            logger.error('Failed to process binary message:', error);
        }
    }

    private handleVoiceData(buffer: ArrayBuffer): void {
        const dataView = new DataView(buffer);
        let offset = 0;

        const chunkId = dataView.getUint32(offset, true);
        offset += 4;

        const isFinal = dataView.getUint8(offset) === 1;
        offset += 1;

        const audioData = buffer.slice(offset);
        
        AudioPlayer.getInstance().handleAudioChunk(audioData, isFinal);
    }
}
```

## Phase 3: Build System Updates

### 3.1 Update Dockerfile

Remove Python-related sections from the Dockerfile:

```dockerfile
# Remove these sections
RUN apt-get update && apt-get install -y python3 python3-pip
COPY requirements.txt .
RUN pip3 install -r requirements.txt
```

### 3.2 Update docker-compose.yml

Add Kokoros service dependency:

```yaml
services:
  webxr:
    depends_on:
      - kokoros
    # ... rest of webxr service config

  kokoros:
    image: kokoros
    ports:
      - "4001:4001"
    networks:
      - docker_ragflow
```

## Phase 4: Testing Strategy

### 4.1 Unit Tests

Create test files for each new component:

```typescript
// tests/audio/AudioPlayer.test.ts
describe('AudioPlayer', () => {
    let audioPlayer: AudioPlayer;

    beforeEach(() => {
        audioPlayer = AudioPlayer.getInstance();
    });

    it('should handle audio chunks correctly', async () => {
        // Test implementation
    });

    it('should manage audio queue properly', async () => {
        // Test implementation
    });
});
```

### 4.2 Integration Tests

Create end-to-end tests:

```typescript
// tests/integration/tts.test.ts
describe('TTS Integration', () => {
    it('should stream audio from Kokoros to client', async () => {
        // Test implementation
    });

    it('should handle TTS errors gracefully', async () => {
        // Test implementation
    });
});
```

## Phase 5: Deployment

### 5.1 Pre-deployment Checklist

1. Verify Kokoros container is running and accessible
2. Confirm all Python/Sonata components are removed
3. Test audio streaming in development environment
4. Verify WebSocket connections and error handling
5. Check resource usage and performance

### 5.2 Deployment Steps

1. Deploy updated Dockerfile and docker-compose.yml
2. Start Kokoros container
3. Deploy application updates
4. Monitor logs for any issues
5. Verify audio functionality in production

### 5.3 Rollback Plan

1. Keep backup of Sonata implementation
2. Maintain ability to switch TTS providers
3. Document rollback procedure

## Phase 6: Documentation Updates

1. Update API documentation
2. Update deployment guides
3. Add Kokoros configuration documentation
4. Update troubleshooting guides

## Timeline

1. Phase 1 (Server-Side Changes): 2-3 days
2. Phase 2 (Client-Side Implementation): 2-3 days
3. Phase 3 (Build System Updates): 1 day
4. Phase 4 (Testing): 2-3 days
5. Phase 5 (Deployment): 1-2 days
6. Phase 6 (Documentation): 1 day

Total estimated time: 9-13 days
----
technical/kokoros-tts-progress.md
# Kokoros TTS Integration Progress Tracker

## Current Status

- [x] Initial planning complete
- [x] Detailed implementation plan documented
- [ ] Phase 1: Server-Side Changes
  - [ ] Update speech types
  - [ ] Implement Kokoros client
  - [ ] Update speech service
- [ ] Phase 2: Client-Side Implementation
  - [ ] Create AudioPlayer
  - [ ] Update WebSocket types
  - [ ] Update WebSocket service

### Next Steps
1. Begin Phase 1 implementation
   - Update speech types in src/types/speech.rs
   - Create Kokoros client implementation
2. Set up testing environment
3. Begin client-side audio implementation

### Blockers
- None currently

### Questions/Decisions
- Confirm voice configuration options for Kokoros
- Determine optimal audio chunk size for streaming
- Define error handling strategy for TTS failures

## Timeline Status
- Start Date: TBD
- Current Phase: Planning
- Estimated Completion: TBD (9-13 days from start)

## Daily Updates
(Add daily progress updates here as implementation proceeds)

## Resources
- [Kokoros TTS Integration Plan](kokoros-tts-integration.md)
- [WebSocket Protocol Documentation](../api/websocket.md)
- [Deployment Guide](../deployment/docker.md)
----
technical/node-manager-migration.md
# Node Manager Migration Status

## Overview
This document outlines the plan to migrate the current monolithic EnhancedNodeManager to a modular architecture optimized for Meta Quest 3 performance.

## Package Management
- Using pnpm (v8.x or higher) for deterministic builds
- Strict dependency management through pnpm-lock.yaml
- Efficient node_modules structure
- Version-controlled dependency state

### Installation
```bash
# Verify pnpm version
pnpm --version  # Should be 8.x or higher

# Clean existing state
pnpm store prune
rm -rf node_modules
rm pnpm-lock.yaml

# Fresh installation
pnpm install --frozen-lockfile
```

## Current State
- Single EnhancedNodeManager class handling all node-related operations
- Individual mesh instances for each node
- Performance bottlenecks in AR mode
- Limited optimization for Quest hardware

## Implementation Status

### Completed Components
1. Core Architecture
- ✅ NodeManagerInterface
- ✅ NodeManagerFacade
- ✅ NodeGeometryManager with LOD support
- ✅ NodeInstanceManager with batched updates
- ✅ NodeMetadataManager
- ✅ NodeInteractionManager

2. Supporting Infrastructure
- ✅ FeatureFlags system
- ✅ NodeManagerMetrics monitoring
- ✅ NodeManagerFactory for implementation switching
- ✅ Migration validation tools

3. Testing Tools
- ✅ NodeManagerIntegration test suite
- ✅ MigrationValidator for performance comparison

### Pending Tasks
1. Integration
- ⏳ Update VisualizationController to use NodeManagerFactory
- ⏳ Implement feature flag in settings.yaml
- ⏳ Add monitoring dashboards

2. Testing
- ⏳ Run full performance validation on Quest
- ⏳ Complete edge case testing
- ⏳ Validate WebSocket update performance

3. Documentation
- ⏳ Update API documentation
- ⏳ Add performance tuning guide
- ⏳ Document Quest-specific optimizations

## Target Architecture

### Core Components

1. NodeGeometryManager
```typescript
class NodeGeometryManager {
    // Handles LOD and geometry optimization
    private geometryLevels: Map<number, BufferGeometry>;
    private currentLOD: number;
    
    public updateGeometry(distance: number): void;
    public getOptimizedGeometry(): BufferGeometry;
}
```

2. NodeInstanceManager
```typescript
class NodeInstanceManager {
    private nodeInstances: InstancedMesh;
    private nodeIndices: Map<string, number>;
    private pendingUpdates: Set<number>;
    
    public updateNodePositions(updates: NodeUpdate[]): void;
    public handleVisibilityCulling(): void;
}
```

3. NodeMetadataManager
```typescript
class NodeMetadataManager {
    private metadataLabels: Map<string, Object3D>;
    private visibilityThresholds: DistanceThresholds;
    
    public updateMetadataVisibility(camera: Camera): void;
    public createMetadataLabel(metadata: NodeMetadata): Promise<Object3D>;
}
```

4. NodeInteractionManager
```typescript
class NodeInteractionManager {
    private interactionState: InteractionState;
    private hapticFeedback: HapticFeedback;
    
    public handleHandInteraction(hand: XRHand): void;
    public processGestures(frame: XRFrame): void;
}
```

## Migration Strategy

### Current Phase: Integration & Testing
We are currently in the integration phase, preparing rollback procedures

### Phase 3: Supporting Systems
1. Implement NodeMetadataManager
- Efficient label rendering
- Distance-based visibility
- Memory management

2. Implement NodeInteractionManager
- XR interaction handling
- Gesture recognition
- Haptic feedback

### Phase 4: Integration
1. Create NodeManagerFacade
2. Implement state management
3. Set up event system
4. Add performance monitoring

## Technical Decisions

### InstancedMesh Usage
- **Decision**: Use THREE.InstancedMesh for all nodes
- **Rationale**: 
  * Significant performance improvement
  * Better memory usage
  * Hardware-friendly for Quest
- **Risks**:
  * Initial setup complexity
  * Migration challenges
- **Mitigation**:
  * Comprehensive testing
  * Fallback options

### LOD System
- **Decision**: Implement 3-level LOD
- **Rationale**:
  * Balance between quality and performance
  * Optimized for Quest display
- **Thresholds**:
  * Near: 10 units (full detail)
  * Medium: 30 units (reduced geometry)
  * Far: 50 units (minimal detail)

## Performance Targets

### Meta Quest 3 Metrics
- Maintain 90 FPS with 1000+ nodes
- Latency under 20ms for position updates
- Memory usage under 100MB
- Smooth LOD transitions

### Desktop Metrics
- Support 5000+ nodes at 60 FPS
- Instant position updates
- Efficient memory usage

## Testing Strategy

1. Unit Tests
- Individual manager components
- Matrix operations
- State management

2. Integration Tests
- Component interaction
- Event handling
- State synchronization

3. Performance Tests
- FPS monitoring
- Memory profiling
- CPU/GPU usage

4. XR-Specific Tests
- Hand tracking accuracy
- Interaction responsiveness
- AR passthrough performance

## Rollout Plan

### Stage 1: Preparation
1. Package Management Setup:
```bash
# Clean and verify dependencies
pnpm store prune
rm -rf node_modules
rm pnpm-lock.yaml

# Fresh installation
pnpm install --frozen-lockfile

# Verify installation
pnpm run build
pnpm test
```

2. Feature Flag Setup:
```yaml
features:
  useInstancedNodes: false  # Toggle between old and new system
```

### Stage 2: Integration
1. NodeManagerInterface Implementation
2. Component Integration
3. Testing Infrastructure

### Stage 3: Testing
1. Performance Validation
2. Integration Testing
3. Regression Testing

### Stage 4: Deployment
1. Initial Rollout
2. Production Deployment
3. Full Rollout

### Rollback Plan
1. Immediate Rollback:
```bash
# Revert to known good state
git checkout origin/main -- pnpm-lock.yaml
pnpm store prune
rm -rf node_modules
pnpm install --frozen-lockfile

# Verify system state
pnpm run build
pnpm test
```

2. Monitoring Points:
- FPS drops below 60
- Memory usage above 100MB
- Error rate above 0.1%
- User reports of visual glitches

## Dependencies
- Three.js updates
- WebXR API compatibility
- Browser support for InstancedMesh
- Quest platform requirements
- pnpm 8.x or higher

## Resource Requirements

### Development
- 1 Senior Developer (full-time)
- 1 XR Specialist (part-time)
- 1 QA Engineer (part-time)

### Hardware
- Meta Quest 3 devices
- Development workstations
- Testing environment

### Tools
- pnpm package manager
- Performance profiling tools
- Memory analysis tools
- XR debugging utilities

## Conclusion
This migration significantly improves performance and maintainability while optimizing for Meta Quest 3. Key aspects include:

1. Modular architecture for better maintainability and scalability
2. Optimized performance for Quest 3 hardware
3. Robust package management with pnpm:
   - Deterministic builds through pnpm-lock.yaml
   - Efficient node_modules structure
   - Strict dependency management
   - Clear rollback procedures

### Package Management Guidelines
1. Always use --frozen-lockfile for installations
2. Commit pnpm-lock.yaml with dependency changes
3. Clean node_modules when switching branches
4. Run full test suite after dependency updates
----
technical/websockets.md
# WebSocket Connection and Communication in Logseq XR
## WebSocket Connection Architecture

The application uses a two-component architecture for WebSocket communication:

1. **WebSocketService** (client/websocket/websocketService.ts):
   - Handles the raw WebSocket connection to the server
   - Manages binary protocol encoding/decoding
   - Implements reconnection logic
   - Uses socket-flow library on the server side

2. **GraphDataManager** (client/state/graphData.ts):
   - Manages graph data state
   - Processes node and edge updates
   - Communicates with WebSocketService for binary updates

### Connection Flow

The proper connection sequence must follow this order:

1. Initialize GraphVisualization in index.ts
2. Connect WebSocketService to server with websocketService.connect()
3. Set up binary message handler with websocketService.onBinaryMessage()
4. **Create an adapter** that connects WebSocketService to GraphDataManager
5. Register the adapter with GraphDataManager using setWebSocketService()
6. Enable binary updates in GraphDataManager with graphDataManager.setBinaryUpdatesEnabled(true)

This sequence ensures proper communication between the two components, which use different interfaces.

This sequence ensures that GraphDataManager knows when it can start sending binary updates through WebSocketService.

### Common Issues

#### "WebSocket service not configured" Error

If you see log messages like:
```
[GraphDataManager] Binary updates enabled but WebSocket service not yet configured
[GraphDataManager] WebSocket service still not configured (attempt X/30)
```

This indicates that GraphDataManager is trying to send binary updates before WebSocketService is properly initialized. The fix is to ensure proper initialization sequence:

1. First connect the WebSocketService
2. Then enable binary updates in GraphDataManager

Do not try to directly connect these components through their internal interfaces, as they use different communication patterns. Instead, use their public API methods as shown in the connection flow.

### Component Bridging with Adapter Pattern

GraphDataManager and WebSocketService use different interfaces, which can cause errors if not connected properly. The solution is to use an adapter:

```typescript
// Create an adapter that implements the InternalWebSocketService interface
const webSocketAdapter = {
    send: (data: ArrayBuffer) => {
        websocketService.sendRawBinaryData(data);
    }
};

// Register the adapter with GraphDataManager
graphDataManager.setWebSocketService(webSocketAdapter);
```

This document describes the WebSocket connection and communication process in the Logseq XR project, covering the client-server interaction, data formats, compression, heartbeats, and configuration.

## 1. Connection Establishment

*   **Client-Side Initiation:** The `WebSocketService` in `client/websocket/websocketService.ts` manages the WebSocket connection. The `connect()` method must be called explicitly to initiate the connection.
*   **URL Construction:** The `buildWsUrl()` function in `client/core/api.ts` constructs the WebSocket URL:
    *   **Protocol:** `wss:` for HTTPS, `ws:` for HTTP (determined by `window.location.protocol`).
    *   **Host:** `window.location.hostname`.
    *   **Port:** `:4000` in development (non-production), empty (default port) in production.
    *   **Path:** `/wss`.
    *   **Final URL:** `${protocol}//${host}${port}/wss`
*   **Development Proxy:** In development (using `vite`), the `vite.config.ts` file configures a proxy:
    *   Requests to `/wss` are proxied to `ws://localhost:4000`.
*   **Docker Environment:**
    *   The `Dockerfile` exposes port 4000.
    *   The `docker-compose.yml` file maps container port 4000 to host port 4000.
    *   `nginx` (configured in `nginx.conf`) listens on port 4000 inside the container.
    *   The `scripts/launch-docker.sh` script builds and starts the containers, including a readiness check that uses `websocat` to test the WebSocket connection to `ws://localhost:4000/wss`.
*   **Cloudflared:** When using Cloudflared (`docker-compose.yml`):
    *   Cloudflared forwards traffic to the `webxr` container's `nginx` instance on port 4000, using the container name (`logseq-xr-webxr`) as the hostname.
*   **Server-Side Handling:**
    *   The `socket_flow_handler` function in `src/handlers/socket_flow_handler.rs` handles WebSocket connections (using Actix Web).
    *   It checks for the `Upgrade` header to verify it's a WebSocket request.
    *   It creates a `SocketFlowServer` instance for each connection.
    *   The `ws::start()` function starts the WebSocket actor.
* **Nginx Proxy:** The `nginx.conf` file configures nginx to proxy websocket connections at `/wss` to the rust backend, which is listening on `127.0.0.1:3001` inside the container.

## 2. Message Handling

*   **Client-Side (`client/websocket/websocketService.ts`):**
    *   **`onopen`:** Sends a `requestInitialData` message (JSON) to the server.
    *   **`onmessage`:**
        *   **Text Messages:** Parses JSON messages. Handles `connection_established`, `loading`, and `updatesStarted`.
        *   **Binary Messages:**
            *   Decompresses using `pako.inflate()` (zlib) if necessary.
            *   Decodes the binary data according to the custom protocol (see "Binary Protocol").
            *   Calls the `binaryMessageCallback` with the decoded node data.
    *   **`sendMessage()`:** Sends text messages (JSON).
    *   **`sendNodeUpdates()`:** Sends binary messages for node updates (limited to 2 nodes per update). Compresses if needed.
*   **Server-Side (`src/handlers/socket_flow_handler.rs`):**
    *   **`started`:** Sends a `connection_established` message (JSON) followed by a `loading` message.
    *   **`handle`:**
        *   **`Ping`:** Responds with a `Pong` message (JSON).
        *   **`Text`:**
            *   Parses JSON.
            *   Handles `ping` messages (responds with `pong`).
            *   Handles `requestInitialData`:
                *   Immediately starts a timer to send binary position updates periodically (interval based on settings, default 30 Hz).
                *   Sends an `updatesStarted` message (JSON) to signal that updates have begun.
        *   **`Binary`:**
            *   Decodes using `binary_protocol::decode_node_data()`.
            *   Handles `MessageType::PositionVelocityUpdate` (for up to 2 nodes): Updates node positions and velocities in the graph data.
        *   **`Close`:** Handles client close requests.

## 3. Binary Protocol (`src/utils/binary_protocol.rs`)

*   **`MessageType`:** `PositionVelocityUpdate` (0x01).
*   **`BinaryNodeData`:**
    *   `id`: `u16` (2 bytes)
    *   `position`: `Vec3Data` (12 bytes: x, y, z as `f32` properties)
    *   `velocity`: `Vec3Data` (12 bytes: x, y, z as `f32` properties)
    *   Total: 26 bytes per node.
*   **Encoding:**
    *   Node Data (stream of nodes without header):
        *   Node ID (`u16` Little Endian).
        *   Position (x, y, z as `f32` Little Endian).
        *   Velocity (x, y, z as `f32` Little Endian).
*   **Decoding:**
    *   Validates message size is a multiple of 26 bytes.
    *   Reads node data for each 26-byte segment.
* **Byte Order:** Little Endian.

## 4. Data Alignment and Case Handling

*   **Client (TypeScript):** Uses `camelCase` for variables and interfaces.
*   **Server (Rust):**
    *   `socket_flow_messages::BinaryNodeData`: Uses Vec3Data struct with x,y,z properties for position and velocity
    *   `types::vec3::Vec3Data`: Structured vector representation with x,y,z fields
    *   `models::node::Node`: Uses `camelCase` for fields (due to Serde's `rename_all` attribute)
    * API calls use `burger-case`.
*   **Data Transfer:** The binary protocol ensures data alignment between the client and server. The `BinaryNodeData` struct in `socket_flow_messages.rs` mirrors the structure sent over the WebSocket.

## 5. Compression

*   **Client:** Uses `pako` library for zlib compression/decompression.
    *   Compresses binary messages if they are larger than `COMPRESSION_THRESHOLD` (1024 bytes).
    *   Attempts to decompress incoming binary messages, falling back to original data if decompression fails.
*   **Server:** Uses `flate2` crate for zlib compression/decompression.
    *   `maybe_compress()`: Compresses if enabled in settings and data size exceeds the threshold.
    *   `maybe_decompress()`: Decompresses if enabled in settings.

## 6. Heartbeat

*   **Server:** Expects `ping` messages from the client. `src/utils/socket_flow_constants.rs` defines:
    *   `HEARTBEAT_INTERVAL`: 30 seconds.
    *   `CLIENT_TIMEOUT`: 60 seconds (double the heartbeat interval).
*   **Client:** The client-side code doesn't have explicit heartbeat sending logic, but the server expects pings, and the `docker-compose.yml` healthcheck sends a ping. The `cloudflared` configuration also sets `TUNNEL_WEBSOCKET_HEARTBEAT_INTERVAL` to 30s.
* **Nginx:** `nginx.conf` has timeouts configured:
    * `proxy_read_timeout`: 3600s
    * `proxy_send_timeout`: 3600s
    * `proxy_connect_timeout`: 75s

## 7. Throttling/Update Rate

*   **Server:** Sends position updates at a rate determined by the `binary_update_rate` setting (defaulting to 30 Hz), controlled by a timer in `socket_flow_handler.rs`. The constant `POSITION_UPDATE_RATE` in `socket_flow_constants.rs` is 5 Hz, but the actual update rate is controlled by the settings.
*   **Client:**  The client receives updates as they are sent by the server. There's no explicit throttling on the client side, other than limiting user-initiated updates to 2 nodes per message.
*   **Initial Delay:** To ensure GPU computations have time to run, the server now has a 500ms delay before starting to accept client connections.

## 8. Order of Operations

1.  Client initiates a WebSocket connection to `/wss`.
2.  In development, Vite proxies the connection to `ws://localhost:4000`.
3.  In Docker, the connection goes to port 4000 on the host, which is mapped to port 4000 of the `webxr` container.
4.  Before accepting connections, the server has a brief delay (500ms) to allow the GPU to compute initial node positions.
5.  `nginx` (inside the container) receives the connection on port 4000.
6.  `nginx` proxies the WebSocket connection to the Rust backend on `127.0.0.1:3001`.
7.  The `socket_flow_handler` in the Rust backend handles the connection.
8.  The server sends a `connection_established` message (JSON).
9.  The server sends a `loading` message to signal that the client should display a loading indicator.
10. The client displays a loading indicator and sends a `requestInitialData` message (JSON).
11. The server starts sending binary position updates at the configured interval.
12. The client creates an adapter to connect WebSocketService with GraphDataManager.
13. The client registers the adapter using GraphDataManager.setWebSocketService().
14. The server sends an `updatesStarted` message to signal that updates have begun.
13. The client hides the loading indicator upon receiving the `updatesStarted` message.
14. The client receives and processes the binary data, updating the visualization.
15. The server and client exchange `ping` and `pong` messages for connection health (although the client-side pinging is primarily handled by the `docker-compose` healthcheck and potentially Cloudflared).
16. User interactions on the client can trigger sending binary node updates (limited to 2 nodes) to the server.

## 9. Loading State and User Feedback

*   **Server-Side Loading Message:** After the connection is established, the server sends a `loading` message to indicate data is being prepared.
*   **Client-Side Loading Indicator:** Upon receiving the `loading` message, the client displays a loading indicator (in `VisualizationController.ts`).
*   **Updates Started Signal:** Once the server is ready to send position updates, it sends an `updatesStarted` message.
*   **Loading Complete:** Upon receiving the `updatesStarted` message, the client hides the loading indicator and begins displaying the graph.
*   This provides visual feedback during the initialization process and ensures users don't see poorly-distributed node layouts.

## 10. Recent Protocol Optimizations

*   **Size Reduction:** 
    * Node ID changed from u32 (4 bytes) to u16 (2 bytes)
    * Node data size reduced from 28 to 26 bytes per node (~7% reduction)

*   **Format Simplification:**
    * Removed message headers (no version number, sequence number, timestamp)
    * Binary data is now a simple array of node updates

*   **Type Consistency:**
    * Consistent use of structured Vec3Data/THREE.Vector3 objects throughout the pipeline
    * Helper functions handle GPU compatibility where array formats are needed
----
technical/debug-enhancement-plan.md
# Debug Enhancement Plan

## Phase 1: Debug System Enhancement

### 1. Debug State Enhancements (client/core/debugState.ts)

Add new debug categories:
```typescript
export interface DebugState {
    enabled: boolean;
    logFullJson: boolean;
    enableDataDebug: boolean;
    enableWebsocketDebug: boolean;
    logBinaryHeaders: boolean;
    // New debug categories
    enablePhysicsDebug: boolean;    // For physics/force calculations
    enableNodeDebug: boolean;       // For node position/velocity tracking
    enableShaderDebug: boolean;     // For shader compilation/linking
    enableMatrixDebug: boolean;     // For matrix transformations
    enablePerformanceDebug: boolean; // For performance monitoring
}
```

### 2. Logger Enhancements (client/core/logger.ts)

Add new logging features:
```typescript
export interface LogMetadata {
    nodeId?: string;
    position?: Vector3;
    velocity?: Vector3;
    component?: string;
    operation?: string;
}

export interface Logger {
    debug: (message: string, metadata?: LogMetadata) => void;
    log: (message: string, metadata?: LogMetadata) => void;
    info: (message: string, metadata?: LogMetadata) => void;
    warn: (message: string, metadata?: LogMetadata) => void;
    error: (message: string, metadata?: LogMetadata) => void;
    physics: (message: string, metadata?: LogMetadata) => void;
    matrix: (message: string, metadata?: LogMetadata) => void;
    performance: (message: string, metadata?: LogMetadata) => void;
}
```

## Phase 2: Implementation Plan

### 1. NodeInstanceManager.ts Enhancements

```typescript
// Debug gates
const shouldLogPhysics = () => debugState.isEnabled() && debugState.getState().enablePhysicsDebug;
const shouldLogMatrix = () => debugState.isEnabled() && debugState.getState().enableMatrixDebug;

class NodeInstanceManager {
    private logger = createLogger('NodeInstanceManager');

    private validateNodeData(nodeId: string, position: Vector3, velocity: Vector3) {
        if (shouldLogPhysics()) {
            this.logger.physics('Validating node data', {
                nodeId,
                position,
                velocity,
                operation: 'validate'
            });
        }

        if (!isFinite(position.x) || !isFinite(position.y) || !isFinite(position.z)) {
            this.logger.error('Invalid position detected', {
                nodeId,
                position,
                operation: 'validate'
            });
            return false;
        }

        if (!isFinite(velocity.x) || !isFinite(velocity.y) || !isFinite(velocity.z)) {
            this.logger.error('Invalid velocity detected', {
                nodeId,
                velocity,
                operation: 'validate'
            });
            return false;
        }

        return true;
    }

    private updateNodePositions() {
        if (shouldLogPhysics()) {
            this.logger.physics('Starting node position updates', {
                component: 'physics',
                operation: 'updatePositions'
            });
        }

        // Log nodes array before processing
        if (shouldLogPhysics()) {
            this.logger.physics('Current nodes state', {
                component: 'physics',
                operation: 'preUpdate',
                nodes: this.nodes.map(node => ({
                    id: node.id,
                    position: node.position,
                    velocity: node.velocity
                }))
            });
        }

        // Existing update logic with validation
        for (const node of this.nodes) {
            if (!this.validateNodeData(node.id, node.position, node.velocity)) {
                // Handle invalid data
                this.handleInvalidNodeData(node);
                continue;
            }

            // Proceed with update
            // ... existing update logic ...
        }
    }

    private handleInvalidNodeData(node: Node) {
        this.logger.error('Handling invalid node data', {
            nodeId: node.id,
            position: node.position,
            velocity: node.velocity,
            operation: 'recovery'
        });

        // Reset to safe values
        node.position.set(0, 0, 0);
        node.velocity.set(0, 0, 0);
    }
}
```

### 2. WebSocket Service Enhancements

```typescript
class WebSocketService {
    private logger = createLogger('WebSocketService');

    private handleBinaryMessage(data: ArrayBuffer) {
        if (debugState.shouldLogBinaryHeaders()) {
            this.logger.debug('Received binary message', {
                size: data.byteLength,
                operation: 'receive'
            });
        }

        try {
            // Decompress and process data
            const nodes = this.processNodeData(data);
            
            if (debugState.isDataDebugEnabled()) {
                this.logger.debug('Processed node data', {
                    nodeCount: nodes.length,
                    operation: 'process'
                });
            }

            // Validate each node
            for (const node of nodes) {
                if (!this.validateNodeData(node)) {
                    this.logger.error('Invalid node data in message', {
                        nodeId: node.id,
                        data: node,
                        operation: 'validate'
                    });
                    continue;
                }
                // Process valid node
            }
        } catch (error) {
            this.logger.error('Binary message processing failed', {
                error,
                operation: 'process'
            });
        }
    }
}
```

### 3. Shader Material Enhancements

```typescript
class HologramShaderMaterial {
    private logger = createLogger('HologramShaderMaterial');

    constructor() {
        if (debugState.getState().enableShaderDebug) {
            this.logger.debug('Initializing shader', {
                component: 'shader',
                operation: 'init'
            });
        }

        // Check WebGL version
        const gl = this.renderer.getContext();
        const isWebGL2 = gl instanceof WebGL2RenderingContext;
        
        if (!isWebGL2 && debugState.getState().enableShaderDebug) {
            this.logger.warn('WebGL 2 not available, using fallback', {
                component: 'shader',
                operation: 'init'
            });
        }

        // Monitor shader compilation
        this.onBeforeCompile = (shader) => {
            if (debugState.getState().enableShaderDebug) {
                this.logger.debug('Compiling shader', {
                    component: 'shader',
                    operation: 'compile',
                    vertexShader: shader.vertexShader,
                    fragmentShader: shader.fragmentShader
                });
            }
        };
    }
}
```

## Phase 3: Performance Monitoring

```typescript
class PerformanceMonitor {
    private logger = createLogger('Performance');
    private metrics: Map<string, number> = new Map();

    public startOperation(name: string) {
        if (debugState.getState().enablePerformanceDebug) {
            this.metrics.set(name, performance.now());
        }
    }

    public endOperation(name: string) {
        if (debugState.getState().enablePerformanceDebug) {
            const startTime = this.metrics.get(name);
            if (startTime) {
                const duration = performance.now() - startTime;
                this.logger.performance(`Operation: ${name}`, {
                    duration,
                    operation: 'measure'
                });
            }
        }
    }
}
```

## Implementation Steps

1. Update debugState.ts with new debug categories
2. Enhance logger.ts with new features
3. Implement NodeInstanceManager changes
4. Update WebSocket service
5. Enhance shader materials
6. Add performance monitoring
7. Update settings UI to expose new debug options
8. Add documentation for new debug features

## Testing Plan

1. Test each debug category independently
2. Verify log output format and content
3. Test performance impact of debug logging
4. Validate error recovery mechanisms
5. Test WebGL version detection and fallbacks
6. Verify performance monitoring accuracy

## Notes

- All debug logging is properly gated behind debug flags
- Performance monitoring is optional and can be enabled/disabled
- Error recovery mechanisms are in place for invalid data
- Shader compilation monitoring helps identify WebGL issues
- Binary message processing has enhanced error handling
----
technical/debug-system.md
# Debug System Documentation

## Overview

The LogseqXR debug system provides comprehensive debugging capabilities across different aspects of the application. The system is designed to be modular and configurable, allowing developers to enable specific debug categories as needed.

## Debug Categories

### Core Debug Features
- **General Debug** (`enabled`): Master switch for debug functionality
- **Data Debug** (`enableDataDebug`): Debug data processing and transformations
- **WebSocket Debug** (`enableWebsocketDebug`): Debug WebSocket communications
- **Binary Headers** (`logBinaryHeaders`): Log binary message headers
- **Full JSON** (`logFullJson`): Log complete JSON messages

### Enhanced Debug Categories
- **Physics Debug** (`enablePhysicsDebug`): Monitor physics and force calculations
  - Node position updates
  - Velocity calculations
  - Force application
  - Collision detection

- **Node Debug** (`enableNodeDebug`): Track node-related operations
  - Position tracking
  - Velocity monitoring
  - Node validation
  - Instance management

- **Shader Debug** (`enableShaderDebug`): Monitor shader operations
  - Shader compilation
  - WebGL context validation
  - Uniform validation
  - Shader linking
  - WebGL version detection

- **Matrix Debug** (`enableMatrixDebug`): Track matrix transformations
  - Matrix validation
  - Transform operations
  - Position/rotation/scale decomposition

- **Performance Debug** (`enablePerformanceDebug`): Monitor performance metrics
  - Operation timing
  - Average durations
  - Operation counts
  - Performance bottleneck detection

## Usage

### Enabling Debug Features

1. Access the debug settings in the UI control panel under System > Debug
2. Toggle individual debug categories as needed
3. Debug output will appear in the browser console

### Debug Output Format

Debug messages follow a consistent format:
```
[Timestamp] [Context] Message {metadata}
```

Example:
```
14:30:45.123 [NodeInstanceManager] Validating node data {
  "nodeId": "node-1",
  "position": {"x": 0, "y": 0, "z": 0},
  "operation": "validate"
}
```

### Performance Monitoring

The performance monitoring system allows tracking of specific operations:

```typescript
const performanceMonitor = new PerformanceMonitor();

// Start timing an operation
performanceMonitor.startOperation('nodeUpdate');

// ... perform operation ...

// End timing and log results
performanceMonitor.endOperation('nodeUpdate');
```

Output includes:
- Operation duration
- Average duration over time
- Operation count
- Performance trends

## Best Practices

1. **Selective Debugging**: Enable only the debug categories needed for your current task
2. **Performance Impact**: Be aware that enabling debug logging may impact performance
3. **Error Recovery**: Use debug output to track error recovery mechanisms
4. **Validation**: Utilize debug logging to verify data integrity and state transitions

## Implementation Details

The debug system is implemented across several core components:

- `debugState.ts`: Manages debug state and feature flags
- `logger.ts`: Provides logging functionality with metadata support
- `PerformanceMonitor`: Handles performance tracking and metrics
- UI Components: Exposes debug settings in the control panel

Each debug category is properly gated behind feature flags to minimize performance impact when disabled.
----
technical/vec3-alignment.md
# Vec3 Alignment Across Stack

## Overview

This document describes the unified Vec3 representation implemented across the full stack, from CUDA computation to client-side rendering. The system has been fully refactored to use Three.js Vector3 objects throughout the client codebase, eliminating any custom Vec3 implementations in TypeScript.

## Components

### 1. Vec3Data (Rust)
Located in `src/types/vec3.rs`:
- CUDA-compatible struct (Pod, Zeroable)
- Direct memory layout: `x`, `y`, `z` fields
- Converts to/from glam::Vec3
- Implements array conversion for compatibility

### 2. CUDA Integration
Located in `src/utils/compute_forces.cu`:
- NodeData struct matches Vec3Data memory layout
- Direct field access eliminates array conversions
- Maintains CUDA float3 for computation efficiency
- Improved memory coherence

### 3. Binary Protocol
Located in `src/utils/binary_protocol.rs`:
- Direct serialization of Vec3Data
- Node IDs stored as u16 (2 bytes) for compactness
- Consistent 12-byte layout per vector
- Little-endian encoding
- 26 bytes per node (2 + 12 + 12)

### 4. WebSocket Protocol
Located in `src/utils/socket_flow_messages.rs`:
- BinaryNodeData uses Vec3Data for position/velocity
- Maintains CUDA compatibility
- Efficient binary transmission

### 5. Client Implementation (Updated)
Directly uses THREE.Vector3 throughout:
- Eliminated custom Vec3 implementation in TypeScript
- Direct usage of Three.js Vector3 objects for all vector operations
- Streamlined vector arithmetic using native Three.js methods
- Improved performance by removing conversion steps

## Memory Layout

All Vec3 representations share the same memory layout:
```
struct Vec3 {
    x: f32,  // 0-3   bytes
    y: f32,  // 4-7   bytes
    z: f32,  // 8-11  bytes
}           // Total: 12 bytes
```

## Benefits

1. Performance:
   - Reduced conversions
   - Better memory locality
   - SIMD-friendly layout

2. Consistency:
   - Single source of truth
   - Type safety across boundaries
   - Clear data flow

3. Maintainability:
   - Unified vector operations
   - Simplified debugging
   - Clear upgrade path

## Usage

### Rust Server
```rust
use crate::types::vec3::Vec3Data;

let vec = Vec3Data::new(x, y, z);
```

### CUDA Kernel
```cpp
struct NodeData {
    float x, y, z;        // position
    float vx, vy, vz;     // velocity
};
```

### TypeScript Client (Updated)
```typescript
import { Vector3 } from 'three';

const vec = new Vector3(x, y, z);
```

## Future Improvements

1. Optimized Binary Protocol:
   - Reduced node size from 28 to 26 bytes per node
   - Changed node ID from u32 to u16
   - ✅ Direct Vector3/Vec3Data representation throughout pipeline
   - ✅ Helper functions for GPU array compatibility
   - ✅ Improved type safety and code clarity
   - ✅ Eliminated custom Vec3 TypeScript implementation

1. SIMD Operations:
   - Add SIMD-optimized operations to Vec3Data
   - Leverage CPU vector instructions

2. Client-side Benefits (Achieved):
   - ✅ Eliminated unnecessary conversions between custom Vec3 and THREE.Vector3
   - ✅ Reduced memory footprint by removing duplicate vector representations
   - ✅ Improved performance of vector operations using Three.js optimized methods
   - ✅ Simplified codebase by standardizing on a single vector implementation

3. Zero-Copy:
   - Implement zero-copy transmission where possible
   - Reduce serialization overhead

4. GPU Direct:
   - Investigate direct GPU memory access
   - Reduce CPU-GPU transfers

## Edge Handling Optimization

The edge handling system has been significantly improved by the Vector3 refactoring:

1. Edges now directly use Vector3 objects for source and target positions
2. Edge geometries are updated in-place rather than recreated
3. Position calculations use native Three.js vector methods for better performance
4. Temporary vector objects are reused to minimize garbage collection

For detailed information on edge handling improvements, see [Edge Handling Optimization](./edge-handling-optimization.md).
----
technical/graph-node-stacking-fix.md
# Graph Node Stacking Fix

## Issue Description

This document describes the issue where nodes would appear stacked on top of each other for the first client connecting to the visualization, while subsequent clients would see the graph correctly distributed.

### Root Cause Analysis

The issue was identified as a timing problem related to when clients connect and request data, combined with how the server handles the initial graph setup and GPU computation:

1. **Server Start Sequence**: When the server starts, it loads the initial graph data and begins GPU computation to optimize node positions.

2. **First Client Connection Issue**: If a client connects before the GPU has had enough time to run even a single iteration, the server would send unoptimized node positions (possibly all at the origin or random positions).

3. **Subsequent Clients**: Later clients would connect after the GPU had been running for some time, receiving well-distributed node positions.

4. **Update Limitation**: Due to the `initial_data_sent` flag in the WebSocket handler, the first client would only receive the initial (poor) position data, but not subsequent updates from the GPU, causing nodes to remain stacked.

## Solution Implementation

The fix involves several coordinated changes across the codebase:

### Server-Side Changes

1. **Remove `initial_data_sent` Flag** (in `src/handlers/socket_flow_handler.rs`):
   - Removed the flag that prevented sending continuous updates after initial data
   - This ensures all clients receive ongoing position updates from the GPU computation

2. **Add Loading Message**:
   - Added a "loading" message when clients first connect
   - This signals clients to display a loading indicator while waiting for optimized positions

3. **Add Initial Delay** (in `src/main.rs`):
   - Added a 500ms delay between graph initialization and HTTP server startup
   - This gives the GPU computation time to run and optimize node positions before any clients can connect

```rust
// Add a delay to allow GPU computation to run before accepting client connections
info!("Waiting for initial GPU layout calculation...");
tokio::time::sleep(Duration::from_millis(500)).await;
info!("Initial delay complete. Starting HTTP server...");
```

### Client-Side Changes

1. **Loading State Handling** (in `client/websocket/websocketService.ts`):
   - Added handling for "loading" and "updatesStarted" messages
   - Added `onLoadingStatusChange` callback registration for components to respond to loading state

2. **Loading Indicator** (in `client/rendering/VisualizationController.ts`):
   - Implemented a loading indicator that displays during the initial graph calculation
   - Added methods to show/hide the loading indicator based on WebSocket messages

## Results

With these changes implemented:

1. The GPU computation has time to run before any clients connect
2. All clients receive the same well-distributed initial layout
3. Users see a loading indicator during the initialization phase
4. All clients receive continuous position updates from ongoing GPU computation

This ensures a consistent and visually pleasing experience for all users, regardless of when they connect to the visualization.

## Related Components

- `src/handlers/socket_flow_handler.rs`: WebSocket server implementation
- `src/main.rs`: Application entry point and initialization
- `client/websocket/websocketService.ts`: Client WebSocket handler
- `client/rendering/VisualizationController.ts`: Main visualization controller
----
technical/edge-handling-optimization.md
# Edge Handling Optimization

## Overview

This document describes the optimized edge handling system in the VisionFlow application, focusing on the improvements made after refactoring to use Three.Vector3 throughout the codebase. The edge handling architecture has been optimized for performance and memory efficiency while maintaining visual quality.

## Architecture

The edge rendering system follows this high-level flow:

1. **Server**: Rust backend constructs edge data in `graph_service.rs`
2. **API**: Edges are sent via JSON in REST sync calls to the client
3. **Client Processing**: `graphData.ts` processes and manages edge data
4. **Rendering**: `EdgeManager.ts` handles the visualization of edges in the 3D scene

## Key Improvements

### 1. Consistent Vector3 Usage

- Refactored to use Three.js Vector3 objects consistently throughout the codebase
- Eliminated array-based position handling that previously required conversion
- Simplified code by leveraging Vector3 methods for operations like distance calculations

### 2. Memory Optimization

- Reused temporary Vector3 objects to reduce garbage collection pressure
- Added object pooling for frequently created objects
- Eliminated unnecessary object creation in hot paths
- Replaced `new Vector3()` calls with instance-level reusable vector objects

### 3. Rendering Efficiency

- Used in-place updates for edge geometry instead of recreating geometries
- Updated BufferAttributes directly instead of replacing entire geometries
- Tracked edge identity to avoid unnecessary recreation
- Implemented selective updating for edges that actually changed

### 4. Better Edge Management

- Maintained map of edges by ID for efficient lookup
- Cached source/target relationships to avoid redundant lookups
- Added edge identity tracking to prevent duplicate edges
- Improved validation logic for edge positions

## Implementation Details

### EdgeManager Optimizations

```typescript
// Reusable objects to avoid allocation during updates
private tempDirection = new Vector3();
private tempSourceVec = new Vector3();
private tempTargetVec = new Vector3();
```

The `EdgeManager` now maintains a set of reusable Vector3 objects that are used for calculations without creating new objects during each update. This significantly reduces memory churn.

### Incremental Edge Updates

Previously, the `updateEdges` method would clear all existing edges and recreate them from scratch. The improved approach:

1. Tracks which edges have been updated
2. Only creates new edges when needed
3. Updates existing edges in-place
4. Removes edges that no longer exist

This dramatically reduces the overhead when only a few edges change.

### In-place Geometry Updates

The edge position update logic now modifies existing geometries directly:

```typescript
// Update the existing BufferAttribute instead of recreating the geometry
posAttr.setXYZ(0, sourcePos.x, sourcePos.y, sourcePos.z);
posAttr.setXYZ(1, this.tempTargetVec.x, this.tempTargetVec.y, this.tempTargetVec.z);
posAttr.needsUpdate = true;
```

Instead of creating a new geometry, disposing the old one, and replacing it (which was expensive), we now update the existing buffer attributes directly.

## Performance Impact

The edge handling optimizations provide several performance benefits:

1. **Reduced Memory Allocation**: Less garbage collection pauses due to fewer object allocations
2. **Faster Updates**: Direct BufferAttribute updates are faster than geometry replacement
3. **Selective Processing**: Only processing edges that changed reduces unnecessary work
4. **Vector Math Efficiency**: Using Vector3 native methods is more efficient than manual calculations

## Server-side Edge Construction

On the server side (Rust), edges are constructed in `graph_service.rs` and include:

1. Source/target node IDs
2. Weight values
3. Optional metadata

The server builds edges through the following process:
1. Create nodes from metadata files
2. Analyze topic connections between files
3. Create edges based on relationships
4. Calculate initial layout using GPU physics
5. Send serialized edge data via API responses

## Client-side Edge Processing

The client processes edge data in `graphData.ts`:

1. Maps edges by ID (using a generated or provided ID)
2. Tracks source/target relationships
3. Updates edge data when new data is received
4. Ensures edges reference valid nodes

## Edge Rendering

The actual rendering of edges is handled by `EdgeManager.ts` which:

1. Creates line geometries for edges
2. Applies materials with appropriate colors and opacity
3. Manages edge visibility in different modes (desktop vs XR)
4. Updates edge positions based on node movements
5. Applies visual effects like pulsing animation

## Best Practices

When working with the edge system:

1. Always use Vector3 objects for positions
2. Reuse Vector3 instances when performing calculations in loops
3. Use the EdgeManager's API rather than directly manipulating edges
4. Ensure edges have valid source/target nodes
5. Be mindful of edge count for performance

## Future Improvements

Potential future optimizations include:

1. Instanced line rendering for better performance with large numbers of edges
2. Level of detail system for edges based on distance
3. Edge bundling for cleaner visualization
4. Edge importance scoring for selective display
5. WebGPU acceleration for edge physics and rendering
----
technical/node-id-binding.md
# Node ID Binding Between Binary Protocol and Metadata

## Overview

This document explains the critical binding between node IDs in the binary WebSocket protocol and metadata visualization in the client application. Understanding this binding is essential for maintaining consistent metadata labels and position updates.

## The Node ID Flow

The application uses a specific flow for node IDs that must be preserved across different systems:

1. Server generates numeric node IDs (u16) for each node in the graph
2. These IDs are sent to the client via the binary WebSocket protocol
3. Client uses these numeric IDs (as strings) to bind nodes with their metadata
4. Metadata visualization relies on these same IDs for position updates

```
┌──────────────────┐   Binary Protocol   ┌──────────────────┐
│                  │                     │                  │
│  Server (Rust)   │  u16 Numeric IDs    │  Client (TS)     │
│  Node IDs        │ ──────────────────> │  Node IDs        │
│  (numeric)       │                     │  (string)        │
│                  │                     │                  │
└──────────────────┘                     └──────────────────┘
                                                 │
                                                 │
                                                 ▼
                                         ┌──────────────────┐
                                         │  Metadata        │
                                         │  Visualization   │
                                         │  (same IDs)      │
                                         └──────────────────┘
```

## Binary Protocol Format

The binary WebSocket protocol uses a compact format optimized for performance:

- **Node data**: 26 bytes per node
  - **Node ID** (u16): 2 bytes
  - **Position** (3 x float32): 12 bytes
  - **Velocity** (3 x float32): 12 bytes

The node ID in this protocol is the single source of truth for node identification. All systems must reference this ID for proper binding.

## Common Issues and Solutions

### Problem: All Nodes Showing Same Metadata

When all nodes display the same metadata (e.g., all showing "1000B" file size):

**Root Cause**: Mismatch between IDs used in the binary protocol and metadata visualization.

**Solution**:
1. Ensure the numeric ID from the binary protocol is converted to a string consistently
2. Use this same string ID in MetadataVisualizer.createMetadataLabel()
3. Store the ID in userData for position updates

### Problem: Labels Not Following Node Movements

When node labels don't update position with their corresponding nodes:

**Root Cause**: IDs used in updateMetadataPosition() don't match those used in createMetadataLabel().

**Solution**:
1. Use the same ID format for position updates as was used for label creation
2. Verify the node ID mapping in NodeInstanceManager

### Problem: Missing Metadata Fields

When some metadata fields are missing or showing default values:

**Root Cause**: Improper metadata extraction in the transformNodeData function.

**Solution**:
1. Ensure proper type checking and fallbacks in transformNodeData
2. Verify that metadata is correctly populated from API responses
3. Check for null/undefined handling in metadata display logic

## Key Components and Their Roles

### 1. WebSocketService (client/websocket/websocketService.ts)

This service:
- Receives binary data from the server
- Converts u16 node IDs to strings
- Creates position updates with proper IDs
- Maintains node ID mappings

**Critical Code**:
```typescript
// Convert the numeric ID to a string to match our node ID storage format
const nodeId = id.toString();
```

### 2. VisualizationController (client/rendering/VisualizationController.ts)

This component:
- Coordinates between WebSocketService and visual components
- Routes position updates to NodeInstanceManager
- Initializes metadata visualization with correct IDs
- Ensures consistent ID usage across subsystems

**Critical Code**:
```typescript
// Using the correct node ID for metadata binding
this.metadataVisualizer?.createMetadataLabel(metadata, node.id);
```

### 3. MetadataVisualizer (client/rendering/MetadataVisualizer.ts)

This component:
- Creates and manages metadata labels
- Stores node IDs in userData for later position updates
- Updates label positions based on node movements

**Critical Code**:
```typescript
// Store the exact nodeId in userData for position updates
group.userData = { 
  isMetadata: true,
  nodeId
};
```

### 4. NodeInstanceManager (client/rendering/node/instance/NodeInstanceManager.ts)

This component:
- Manages the instanced rendering of nodes
- Maps between node IDs and instance indices
- Applies position updates from the binary protocol

## Best Practices

### 1. Node ID Consistency

- Always use string representations of the numeric u16 IDs from the server
- Maintain a single source of truth for node ID mapping
- Validate ID format when binding metadata to nodes

### 2. Type Safety

- Verify types when converting between numeric and string IDs
- Use strict ID validation to catch binding issues early
- Add debug logs for ID mismatch detection

### 3. Testing and Validation

- Create tests specifically for node ID binding
- Implement validation checks for metadata-node connections
- Log node ID mappings during initialization

### 4. Code Documentation

- Clearly mark sections that deal with node ID binding
- Comment on the ID format expectations for each component
- Document the origin and lifecycle of node IDs

## Implementation Details

### Server-Side (Rust)

The server generates numeric node IDs in two key files:

1. **src/models/node.rs**:
   - Generates sequential numeric IDs
   - Stores these IDs in the Node struct
   - Transmits them via binary protocol

2. **src/utils/socket_flow_messages.rs**:
   - Defines the BinaryNodeData struct with ID field
   - Handles binary encoding/decoding of node data

### Client-Side (TypeScript)

The client maintains the node ID binding in several key files:

1. **client/websocket/websocketService.ts**:
   - Converts binary u16 IDs to string format
   - Maps between node names and numeric IDs
   - Manages node registration

2. **client/rendering/VisualizationController.ts**:
   - Initializes metadata with appropriate IDs
   - Routes position updates to both NodeInstanceManager and MetadataVisualizer

3. **client/rendering/MetadataVisualizer.ts**:
   - Creates visual metadata with node IDs
   - Updates metadata positions when nodes move

4. **client/rendering/node/instance/NodeInstanceManager.ts**:
   - Manages node instance updates via binary data
   - Maps between node IDs and instance indices

## Debugging Node ID Binding Issues

### 1. Enable Debug Logging

```typescript
debugState.enable('node', 'websocket', 'data');
```

### 2. Check ID Consistency

In browser console:
```javascript
// Show node ID mappings
WebSocketDiagnostics.checkNodeIdMapping();

// Verify node ID to metadata mapping
MetadataDiagnostics.checkNodeBindings();
```

### 3. Validate Binary Protocol

Examine binary messages in the Network tab to verify:
- Node ID byte ordering (little-endian)
- Message size is a multiple of 26 bytes
- No duplicate IDs within a single message

## Conclusion

Proper node ID binding between the binary protocol and metadata visualization is critical for correct application behavior. By maintaining a consistent approach to node ID handling and following the guidelines in this document, similar issues should be avoided in the future.
----
technical/README.md
# Technical Documentation

This directory contains detailed technical documentation about the system architecture, protocols, and implementation details.

## Available Documentation

### Core Systems

* [Node ID Binding](./node-id-binding.md) - Critical information about node ID binding between binary protocol and metadata visualization
* [Binary Protocol](./binary-protocol.md) - Details about the binary WebSocket protocol
* [WebSockets](./websockets.md) - WebSocket implementation and architecture

### Visualization Components

* [Edge Handling Optimization](./edge-handling-optimization.md) - Edge rendering performance improvements
* [Edge Rendering Fix Plan](./edge-rendering-fix-plan.md) - Plan for fixing edge rendering issues
* [Hologram Edge Rendering](./hologram-edge-rendering.md) - Specialized edge rendering for holograms
* [Metadata Text Visibility Fix](./metadata-text-visibility-fix.md) - Fixing metadata text visibility issues
* [Node Manager Migration](./node-manager-migration.md) - Migration to new node management system

### Performance and Architecture

* [Performance](./performance.md) - Performance considerations and optimizations
* [Scale Factors Architecture](./scale-factors-architecture.md) - Architecture of scale factors system
* [Scale Factors Review](./scale-factors-review.md) - Review of scale factors implementation
* [Dynamic Update Rate Optimization](./dynamic-update-rate-optimization.md) - WebSocket update rate optimization for force-directed graphs
* [Vec3 Alignment](./vec3-alignment.md) - Alignment requirements for Vec3 structures

### Integration and Settings

* [GitHub Settings Migration](./github-settings-migration.md) - Migration of settings to GitHub
* [Kokoros TTS Integration](./kokoros-tts-integration.md) - Integration with Kokoros text-to-speech
* [Settings Initialization](./settings-initialization.md) - Initialization of application settings

### Debugging

* [Debug Enhancement Plan](./debug-enhancement-plan.md) - Plan for enhancing debugging capabilities
* [Debug System](./debug-system.md) - Overview of the debugging system
* [Graph Node Stacking Fix](./graph-node-stacking-fix.md) - Fix for stacked nodes in graph visualization
----
technical/diagnostic-tools.md
# Diagnostic Tools Documentation

This document provides a comprehensive guide to all the diagnostic tools available in the codebase for troubleshooting, debugging, and system verification.

## Overview

The codebase includes several diagnostic tools to help identify and fix issues across different system components. These tools can be run from the browser console, CLI, or integrated into testing environments.

## Available Diagnostic Tools

### 1. Node ID Binding Diagnostics

**Location**: `client/diagnostics/nodeIdBindingDiagnostics.ts`

**Purpose**: Diagnoses issues with node ID binding between binary WebSocket protocol and metadata visualization.

**Usage**:
```javascript
// Run in browser console
NodeBindingDiagnostics.runDiagnostics();

// Enable real-time monitoring
NodeBindingDiagnostics.enableMonitoring();

// Get recommendations for fixing issues
NodeBindingDiagnostics.getRecommendations();
```

**Common Scenarios**:
- All nodes showing the same metadata (e.g., "1000B" file size)
- Metadata not updating with node position changes
- Missing or incorrect metadata fields

### 2. WebSocket Diagnostics

**Location**: 
- `client/websocket-diagnostics.ts` (TypeScript module)
- `client/websocket-diagnostics-browser.js` (Browser-compatible version)
- `client/websocket-test.ts` (Simple connection testing)

**Purpose**: Diagnose WebSocket connection issues, binary protocol problems, and network performance.

**Usage**:
```javascript
// In browser console
WebSocketDiagnostics.runDiagnostics();

// Test specific components
WebSocketDiagnostics.testBinaryProtocol();
WebSocketDiagnostics.checkLatency();
WebSocketDiagnostics.validateNodeData();

// Simple connection test
testWebSocket.runTests();
```

**Common Scenarios**:
- Connection failures or frequent disconnects
- Binary protocol errors or data corruption
- High latency or performance issues
- Reconnection problems

### 3. WebGL Diagnostics

**Location**: `client/webgl-diagnostics.js`

**Purpose**: Diagnose WebGL rendering issues, compatibility problems, and performance bottlenecks.

**Usage**:
```javascript
// In browser console
WebGLDiagnostics.runDiagnostics();

// Test specific WebGL features
WebGLDiagnostics.checkExtensionSupport();
WebGLDiagnostics.testShaderCompilation();
WebGLDiagnostics.checkContextLimits();
```

**Common Scenarios**:
- Shader compilation errors
- WebGL context loss
- Rendering artifacts or missing elements
- Performance issues with complex scenes

### 4. System Diagnostics

**Location**: `client/diagnostics/systemDiagnostics.ts`

**Purpose**: Comprehensive system checks for environment, capabilities, and configuration.

**Usage**:
```javascript
// Import in code
import { runSystemDiagnostics } from './diagnostics/systemDiagnostics';

// Run all diagnostics
runSystemDiagnostics();

// Run specific checks
checkPlatformCapabilities();
checkWebGLSupport();
checkNetworkConnectivity();
```

**Common Scenarios**:
- Startup issues or initialization failures
- Platform compatibility problems
- Feature detection and capability reporting
- Environment validation

### 5. General Diagnostics

**Location**: `client/diagnostics.ts`

**Purpose**: Entry point for all diagnostic functions and user-facing diagnostic tools.

**Usage**:
```javascript
// Import in code
import { runDiagnostics } from './diagnostics';

// Run diagnostic suite
runDiagnostics();

// For browser console
window.VisionFlowDiagnostics.run();
```

**Common Scenarios**:
- General troubleshooting and health checks
- Automated testing and CI/CD validation
- User-facing diagnostic reporting

## Using Diagnostic Tools in Production

### Browser Console Method

For production environments, you can load and run diagnostics directly in the browser console:

1. Open browser dev tools (F12 or Ctrl+Shift+I)
2. Copy and paste the following code:

```javascript
// Load WebSocket diagnostics
fetch('/client/websocket-diagnostics-browser.js')
  .then(response => response.text())
  .then(code => eval(code))
  .then(() => console.log('WebSocket diagnostics loaded'));

// Load WebGL diagnostics
fetch('/client/webgl-diagnostics.js')
  .then(response => response.text())
  .then(code => eval(code))
  .then(() => console.log('WebGL diagnostics loaded'));

// Then run diagnostics
WebSocketDiagnostics.runDiagnostics();
WebGLDiagnostics.runDiagnostics();
```

### Alternative Method

If the fetch method doesn't work, you can copy the diagnostic tool code from your development environment and paste it directly into the console.

## Integrated Debugging

The diagnostic tools integrate with the application's debug state system. To enable specific debug categories:

```javascript
// Check current debug state
console.log('Node debugging:', debugState.isNodeDebugEnabled());
console.log('WebSocket debugging:', debugState.isWebsocketDebugEnabled());
console.log('Data debugging:', debugState.isDataDebugEnabled());
```

## Diagnostic Output Formats

Diagnostic tools produce output in several formats:

1. **Console Logs**: Detailed information sent to browser console
2. **JSON Reports**: Structured data for programmatic analysis
3. **Visual Indicators**: On-screen elements showing diagnostic status
4. **Performance Metrics**: Timing and resource utilization data

## Common Issues and Troubleshooting

### WebSocket Connectivity

If you encounter WebSocket connection issues:

1. Run `WebSocketDiagnostics.runDiagnostics()`
2. Check network tab for failed WebSocket connections
3. Verify API endpoints in network settings
4. Check for CORS or mixed content issues

### Rendering Problems

For visual or rendering issues:

1. Run `WebGLDiagnostics.runDiagnostics()`
2. Check for WebGL context support
3. Verify shader compilation success
4. Look for errors in materials or geometries

### Node Binding Issues

For issues with node data or metadata:

1. Run `NodeBindingDiagnostics.runDiagnostics()`
2. Check node ID consistency across components
3. Verify metadata is correctly associated with nodes
4. Look for type conversion issues between numeric and string IDs

### System Performance

For performance issues:

1. Run system diagnostics
2. Check FPS counter and resource utilization
3. Look for rendering bottlenecks
4. Verify data processing efficiency

## Extending the Diagnostic Framework

### Adding New Diagnostic Tools

To add a new diagnostic tool:

1. Create a new file in `client/diagnostics/` following the pattern of existing tools
2. Implement the singleton pattern for consistency
3. Expose run methods and test-specific functions
4. Add browser console integration
5. Update this documentation

### Diagnostic Tool API Conventions

All diagnostic tools should follow these conventions:

1. Implement `runDiagnostics()` as the main entry point
2. Return diagnostic results in a consistent format
3. Provide method-specific tests for targeted debugging
4. Include clear documentation and usage examples
5. Add console-friendly output with appropriate log levels

## Development Best Practices

When working with diagnostic tools:

1. Run relevant diagnostics early when investigating issues
2. Include diagnostic output in bug reports
3. Write tests that verify diagnostic accuracy
4. Keep diagnostic tools updated as the codebase evolves
5. Use diagnostics proactively during development to catch issues early

## Conclusion

These diagnostic tools provide a powerful framework for identifying and resolving issues throughout the application. By understanding and effectively using these tools, developers can quickly troubleshoot problems and ensure application stability and performance.
----
technical/dynamic-update-rate-optimization.md
# Dynamic Update Rate Optimization

## Problem Statement

The force-directed graph visualization relies on WebSocket connections to send real-time position updates from the server to client. The current implementation uses a fixed update rate which has several drawbacks:

1. During periods of high motion (when the graph is rebalancing), a fixed rate may not provide enough updates to ensure smooth visualization
2. During periods of low/no motion, the system continues to send updates at the same rate, consuming unnecessary bandwidth and resources
3. After user interaction with 1-2 nodes, the server responds with full graph rebalancing, but the update rhythm doesn't adapt to this pattern

## Investigation Results

Analyzing the WebSocket traffic between server and client showed:

- Most network traffic occurs in bursts when the graph is initially loaded or after user interactions
- Many WebSocket messages contain position updates for nodes that haven't changed significantly
- Deadband filtering can reduce unnecessary updates, but doesn't solve the temporal pattern issue
- The client uses requestAnimationFrame for rendering, which is limited to the display refresh rate

## Solution Design: Dynamic Update Rates

After considering batching vs. dynamic rates, we determined that **dynamic update rates** are better suited for a force-directed graph system. Here's why:

- When the graph is actively rebalancing, we need frequent updates to ensure visual smoothness
- When nodes are stable, we can reduce update frequency substantially, saving resources
- A dynamic rate approach can adapt to the natural flow of force-directed graph motion

### Design Diagram

```mermaid
stateDiagram
    [*] --> NoMotion
    NoMotion --> LowMotion : Node motion detected
    LowMotion --> HighMotion : Many nodes in motion
    HighMotion --> LowMotion : Node motion decreases
    LowMotion --> NoMotion : No node motion
    state NoMotion {
        UpdateRate: Minimum
        SendHeartbeat
    }
    state LowMotion {
        UpdateRate: Moderate
        ResponsiveFeedback
    }
    state HighMotion {
        UpdateRate: High
        SmoothVisuals
    }
```

## Implementation Details

### Configuration Parameters

Added to settings.yaml under system.websocket:

```yaml
min_update_rate: 5      # Minimum updates per second when graph is stable
max_update_rate: 60     # Maximum updates per second during high motion
motion_threshold: 0.05  # Consider graph in motion if at least 5% of nodes are moving
motion_damping: 0.9     # Damping factor for rate changes (higher = smoother transitions)
```

### Server-Side Changes

1. **Configuration Structure**
   - Added parameters to WebSocketSettings struct in the config module
   - Established default values for cases where settings are unavailable

2. **SocketFlowServer Changes**
   - Added new fields to track motion state:
     - `current_update_rate`: Dynamically adjusted rate based on motion
     - `nodes_in_motion`: Count of nodes currently changing position/velocity
     - `total_node_count`: Total number of nodes for percentage calculation
   - Implemented helper methods:
     - `calculate_motion_percentage()`: Returns the percentage of nodes in motion
     - `update_dynamic_rate()`: Adjusts the rate based on current motion level
     - `get_current_update_interval()`: Converts rate to a time duration

3. **Dynamic Update Scheduling**
   - Replaced fixed interval updates with dynamic scheduling
   - Initial updates start immediately with max rate
   - Each subsequent update is scheduled based on the calculated rate
   - The system transitions smoothly between rates using damping

### Motion Detection Algorithm

1. Calculate the percentage of nodes currently in motion
2. If ≥ threshold%, use maximum update rate
3. If < threshold%, scale rate between min and max based on percentage
4. Apply damping to smooth rate transitions
5. Clamp final rate between min and max values

## Implementation Status

As of now, we have:

- [x] Added configuration parameters to settings.yaml
- [x] Updated WebSocketSettings struct in config/mod.rs
- [x] Added new fields to SocketFlowServer
- [x] Implemented dynamic rate calculation methods
- [ ] Complete replacement of fixed intervals with dynamic scheduling
- [ ] Add client-side notification about dynamic rate status
- [ ] Implement proper error handling for rate transitions

## Projected Benefits

1. **Performance**: Reduced server CPU and network usage during periods of inactivity
2. **Visual Quality**: Higher update rates during active movements for smoother visualization
3. **Responsiveness**: Quick adaptation to user interactions and graph rebalancing
4. **Resource Efficiency**: Automatic scaling of resources based on actual needs

## Next Steps

1. Complete the implementation of dynamic scheduling in socket_flow_handler.rs
2. Add client-side logging to monitor update rate adaptation
3. Implement proper client-side throttling that accounts for varying server rates
4. Conduct performance testing to validate benefits and fine-tune parameters
----
technical/protocols/websocket-protocol.md
# WebSocket Protocol Specification

## Overview
The WebSocket implementation in LogseqXR provides real-time graph updates using an optimized binary protocol.

## Binary Protocol Format

Each binary message consists of node updates, where each node update is exactly 26 bytes:

| Field    | Type      | Size (bytes) | Description                       |
|----------|-----------|--------------|-----------------------------------|
| Node ID  | uint16    | 2            | Unique identifier for the node    |
| Position | float32[3]| 12           | X, Y, Z coordinates               |
| Velocity | float32[3]| 12           | X, Y, Z velocity components       |

## Connection Flow

1. Client connects to WebSocket endpoint (`/wss`)
2. Server sends: `{"type": "connection_established"}`
3. Client sends: `{"type": "requestInitialData"}`
4. Server begins binary updates (configured by `binary_update_rate`)
5. Server sends: `{"type": "updatesStarted"}`

## Optimization Features

- Zlib compression for messages >1KB
- Fixed-size format for efficient parsing
- No message headers to minimize overhead
- Consistent use of THREE.Vector3 throughout

## Diagnostics

### Common Issues

1. Connection Issues
   - Mixed Content: Ensure WebSocket uses WSS with HTTPS
   - CORS: Check server configuration for cross-origin
   - Proxy/Firewall: Verify WebSocket ports are open

2. Binary Protocol Issues
   - Message Size: Verify 26 bytes per node
   - Data Integrity: Validate Vector3 data

### Diagnostic Tools

```typescript
// Run comprehensive diagnostics
WebSocketDiagnostics.runDiagnostics();

// Test API connectivity
WebSocketDiagnostics.testApiConnectivity();

// Validate vector data
WebSocketDiagnostics.validateVectorData();
```

## Error Handling

- Connection failures trigger automatic reconnection
- Invalid messages are logged and skipped
- Server-side validation prevents corrupt data transmission
----
technical/components/node-manager.md
# Node Management System

## Architecture

The node management system uses a modular architecture optimized for Meta Quest 3 performance.

### Core Components

1. NodeGeometryManager
   - Handles LOD and geometry optimization
   - Manages geometry levels for different distances
   - Optimizes for Quest hardware

2. NodeInstanceManager
   - Uses THREE.InstancedMesh for efficient rendering
   - Manages batched updates
   - Handles node indices and pending updates

3. NodeMetadataManager
   - Efficient label rendering
   - Distance-based visibility
   - Memory-optimized metadata storage

4. NodeInteractionManager
   - XR interaction handling
   - Gesture recognition
   - Haptic feedback support

## Scale Management

### AR Space Matching
- Room scale is the source of truth for AR mode
- Only xrSessionManager.ts handles room-scale adjustments
- All other scaling is relative to room scale

### Visualization Hierarchy
- Node scaling based on visual importance
- Hologram instance scaling for scene composition
- Spatial relationships preserved in AR mode

## Performance Optimizations

- Instanced rendering for improved GPU performance
- LOD system for distance-based detail
- Batched updates for efficient state management
- Memory-optimized data structures

## Configuration

```yaml
features:
  useInstancedNodes: true  # Enable instanced rendering
  enableLOD: true         # Enable Level of Detail system
```

## Integration Points

- WebSocket updates via binary protocol
- XR session management
- Visualization system
- Physics system
----
technical/components/visualization.md
# Visualization System

## Core Components

### Edge Rendering
- Dynamic width calculation based on settings
- Node radius-aware endpoint positioning
- Efficient geometry updates

### Text Rendering
- Distance-based scaling
- Font loading with retry mechanism
- Billboard behavior for readability
- Outline support for visibility

### Scale Management
- Base scale from settings
- AR mode compatibility
- Performance-optimized scaling

## Implementation Details

### Edge Rendering
```typescript
const edgeWidth = Math.max(widthRange[0], Math.min(widthRange[1], baseWidth)) 
    * settings.visualization.edges.scaleFactor;
```

### Text Visibility
- Font loading verification
- Configurable retry mechanism
- Cached font instances
- Distance-based scaling

## Performance Considerations

- GPU-optimized geometry updates
- Batched rendering operations
- Memory-efficient data structures
- AR-specific optimizations

## Configuration

```yaml
visualization:
  edges:
    scaleFactor: 2.0
    widthRange: [0.1, 5.0]
  text:
    fontSize: 16
    outlineWidth: 2
    outlineColor: "#000000"
```
--END--

--- README.md ---

# LogseqXR: Immersive WebXR Visualization for Logseq Knowledge Graphs

![image](https://github.com/user-attachments/assets/269a678d-88a5-42de-9d67-d73b64f4e520)

**Inspired by the innovative work of Prof. Rob Aspin:** [https://github.com/trebornipsa](https://github.com/trebornipsa)

![P1080785_1728030359430_0](https://github.com/user-attachments/assets/3ecac4a3-95d7-4c75-a3b2-e93deee565d6)

## Quick Links

- [Project Overview](docs/overview/introduction.md)
- [Technical Architecture](docs/overview/architecture.md)
- [Development Setup](docs/development/setup.md)
- [API Documentation](docs/api/rest.md)
- [Contributing Guidelines](docs/contributing/guidelines.md)

## Documentation Structure

### Overview
- [Introduction & Features](docs/overview/introduction.md)
- [System Architecture](docs/overview/architecture.md)

### Technical Documentation
- [Binary Protocol](docs/technical/binary-protocol.md)
- [WebGPU Pipeline](docs/technical/webgpu.md)
- [Performance Optimizations](docs/technical/performance.md)
- [Class Diagrams](docs/technical/class-diagrams.md)

### Development
- [Setup Guide](docs/development/setup.md)

### API Documentation
- [REST API](docs/api/rest.md)
- [WebSocket API](docs/api/websocket.md)

### Deployment
- [Docker Deployment](docs/deployment/docker.md)

### Contributing
- [Contributing Guidelines](docs/contributing/guidelines.md)

### Diagrams

```mermaid
graph TB
    subgraph Frontend
        UI[User Interface Layer]
        VR[WebXR Controller]
        WS[WebSocket Client]
        GPU[GPU Compute Layer]
        ThreeJS[Three.js Renderer]
        ChatUI[Chat Interface]
        GraphUI[Graph Interface]
        ControlPanel[Control Panel]
        VRControls[VR Control System]
        WSService[WebSocket Service]
        DataManager[Graph Data Manager]
        LayoutEngine[Layout Engine]
        SpaceMouse[SpaceMouse Controller]
        PlatformManager[Platform Manager]
        XRSession[XR Session Manager]
        XRInit[XR Initializer]
        SceneManager[Scene Manager]
        NodeManager[Enhanced Node Manager]
        EdgeManager[Edge Manager]
        HologramManager[Hologram Manager]
        TextRenderer[Text Renderer]
        SettingsStore[Settings Store]
    end

    subgraph Backend
        Server[Actix Web Server]
        FileH[File Handler]
        GraphH[Graph Handler]
        WSH[WebSocket Handler]
        PerplexityH[Perplexity Handler]
        RagFlowH[RagFlow Handler]
        VisualizationH[Visualization Handler]
        NostrH[Nostr Handler]
        HealthH[Health Handler]
        PagesH[Pages Handler]
        SettingsH[Settings Handler]
        FileS[File Service]
        GraphS[Graph Service]
        GPUS[GPU Compute Service]
        PerplexityS[Perplexity Service]
        RagFlowS[RagFlow Service]
        SpeechS[Speech Service]
        NostrS[Nostr Service]
        WSManager[WebSocket Manager]
        GPUCompute[GPU Compute]
        Compression[Compression Utils]
        AudioProc[Audio Processor]
        MetadataStore[Metadata Store]
        ProtectedSettings[Protected Settings]
    end

    subgraph External
        GitHub[GitHub API]
        Perplexity[Perplexity AI]
        RagFlow[RagFlow API]
        OpenAI[OpenAI API]
        NostrAPI[Nostr API]
    end

    UI --> ChatUI
    UI --> GraphUI
    UI --> ControlPanel
    UI --> VRControls

    VR --> ThreeJS
    WS --> WSService
    WSService --> Server

    Server --> FileH
    Server --> GraphH
    Server --> WSH
    Server --> PerplexityH
    Server --> RagFlowH
    Server --> VisualizationH
    Server --> NostrH
    Server --> HealthH
    Server --> PagesH
    Server --> SettingsH

    FileH --> FileS
    GraphH --> GraphS
    WSH --> WSManager
    PerplexityH --> PerplexityS
    RagFlowH --> RagFlowS
    NostrH --> NostrS

    FileS --> GitHub
    PerplexityS --> Perplexity
    RagFlowS --> RagFlow
    SpeechS --> OpenAI
    NostrS --> NostrAPI

    style Frontend fill:#f9f,stroke:#333,stroke-width:2px
    style Backend fill:#bbf,stroke:#333,stroke-width:2px
    style External fill:#bfb,stroke:#333,stroke-width:2px
```

### Class Diagram

```mermaid
classDiagram
    class App {
        +sceneManager: SceneManager
        +nodeManager: EnhancedNodeManager
        +edgeManager: EdgeManager
        +hologramManager: HologramManager
        +textRenderer: TextRenderer
        +websocketService: WebSocketService
        +settingsStore: SettingsStore
        +platformManager: PlatformManager
        +xrSessionManager: XRSessionManager
        +start()
        +initializeEventListeners()
        +handleSettingsUpdate(settings: Settings)
        +dispose()
    }

    class SceneManager {
        -static instance: SceneManager
        +scene: Scene
        +camera: Camera
        +renderer: Renderer
        +controls: Controls
        +composer: Composer
        +getInstance(canvas: HTMLCanvasElement): SceneManager
        +getScene(): Scene
        +getRenderer(): Renderer
        +getCamera(): Camera
        +start()
        +handleSettingsUpdate(settings: Settings)
        +cleanup()
    }

    class WebsocketService {
        -static instance: WebsocketService
        +socket: WebSocket
        +listeners: Object
        +reconnectAttempts: number
        +maxReconnectAttempts: number
        +reconnectInterval: number
        +getInstance(): WebsocketService
        +connect()
        +onBinaryMessage(callback: function)
        +onSettingsUpdate(callback: function)
        +onConnectionStatusChange(callback: function)
        +sendMessage(data: object)
        +close()
    }

    class AppState {
        +graph_service: GraphService
        +gpu_compute: Option<Arc<RwLock<GPUCompute>>>
        +settings: Arc<RwLock<Settings>>
        +protected_settings: Arc<RwLock<ProtectedSettings>>
        +metadata: Arc<RwLock<MetadataStore>>
        +github_client: Arc<GitHubClient>
        +content_api: Arc<ContentAPI>
        +perplexity_service: Option<Arc<PerplexityService>>
        +ragflow_service: Option<Arc<RAGFlowService>>
        +nostr_service: Option<web::Data<NostrService>>
        +ragflow_conversation_id: String
        +active_connections: Arc<AtomicUsize>
        +new()
        +increment_connections(): usize
        +decrement_connections(): usize
        +get_api_keys(pubkey: str): ApiKeys
        +get_nostr_user(pubkey: str): Option<NostrUser>
        +validate_nostr_session(pubkey: str, token: str): bool
        +update_nostr_user_api_keys(pubkey: str, api_keys: ApiKeys): Result<NostrUser>
    }

    class GraphService {
        +build_graph(app_state: AppState): Result<GraphData>
        +calculate_layout(gpu_compute: GPUCompute, graph: GraphData, params: SimulationParams): Result<void>
        +initialize_random_positions(graph: GraphData)
    }

    class EnhancedNodeManager {
        +scene: Scene
        +settings: Settings
        +nodeMeshes: Map<string, Mesh>
        +updateNodes(nodes: Node[])
        +updateNodePositions(nodes: NodeData[])
        +handleSettingsUpdate(settings: Settings)
        +dispose()
    }

    class SpeechService {
        +websocketManager: WebSocketManager
        +settings: Settings
        +start(receiver: Receiver<SpeechCommand>)
        +initialize(): Result<void>
        +send_message(message: string): Result<void>
        +close(): Result<void>
        +set_tts_provider(use_openai: boolean): Result<void>
    }

    class NostrService {
        +settings: Settings
        +validate_session(pubkey: str, token: str): bool
        +get_user(pubkey: str): Option<NostrUser>
        +update_user_api_keys(pubkey: str, api_keys: ApiKeys): Result<NostrUser>
    }

    App --> SceneManager
    App --> WebsocketService
    App --> EnhancedNodeManager
    SceneManager --> WebXRVisualization
    WebsocketService --> GraphDataManager
    AppState --> GraphService
    AppState --> NostrService
    AppState --> SpeechService
```

### Sequence Diagram

```mermaid
sequenceDiagram
    participant Client as Client (Browser)
    participant Platform as PlatformManager
    participant XR as XRSessionManager
    participant Scene as SceneManager
    participant Node as EnhancedNodeManager
    participant Edge as EdgeManager
    participant Hologram as HologramManager
    participant Text as TextRenderer
    participant WS as WebSocketService
    participant Settings as SettingsStore
    participant Server as Actix Server
    participant AppState as AppState
    participant FileH as FileHandler
    participant GraphH as GraphHandler
    participant WSH as WebSocketHandler
    participant PerplexityH as PerplexityHandler
    participant RagFlowH as RagFlowHandler
    participant NostrH as NostrHandler
    participant SettingsH as SettingsHandler
    participant FileS as FileService
    participant GraphS as GraphService
    participant GPUS as GPUService
    participant PerplexityS as PerplexityService
    participant RagFlowS as RagFlowService
    participant NostrS as NostrService
    participant SpeechS as SpeechService
    participant WSM as WebSocketManager
    participant GitHub as GitHub API
    participant Perplexity as Perplexity AI
    participant RagFlow as RagFlow API
    participant OpenAI as OpenAI API
    participant Nostr as Nostr API

    %% Server initialization and AppState setup
    activate Server
    Server->>Server: Load settings.yaml & env vars (config.rs)
    alt Settings Load Error
        Server-->>Client: Error Response (500)
    else Settings Loaded Successfully
        Server->>AppState: new() (app_state.rs)
        activate AppState
            AppState->>GPUS: initialize_gpu_compute()
            activate GPUS
                GPUS->>GPUS: setup_compute_pipeline()
                GPUS->>GPUS: load_wgsl_shaders()
                GPUS-->>AppState: GPU Compute Instance
            deactivate GPUS
            
            AppState->>WSM: initialize()
            activate WSM
                WSM->>WSM: setup_binary_protocol()
                WSM-->>AppState: WebSocket Manager
            deactivate WSM
            
            AppState->>SpeechS: start()
            activate SpeechS
                SpeechS->>SpeechS: initialize_tts()
                SpeechS-->>AppState: Speech Service
            deactivate SpeechS
            
            AppState->>NostrS: initialize()
            activate NostrS
                NostrS->>NostrS: setup_nostr_client()
                NostrS-->>AppState: Nostr Service
            deactivate NostrS
            
            AppState-->>Server: Initialized AppState
        deactivate AppState

        Server->>FileS: fetch_and_process_files()
        activate FileS
            FileS->>GitHub: fetch_files()
            activate GitHub
                GitHub-->>FileS: Files or Error
            deactivate GitHub
            
            loop For Each File
                FileS->>FileS: should_process_file()
                alt File Needs Processing
                    FileS->>PerplexityS: process_file()
                    activate PerplexityS
                        PerplexityS->>Perplexity: analyze_content()
                        Perplexity-->>PerplexityS: Analysis Results
                        PerplexityS-->>FileS: Processed Content
                    deactivate PerplexityS
                    FileS->>FileS: save_metadata()
                end
            end
            FileS-->>Server: Processed Files
        deactivate FileS

        Server->>GraphS: build_graph()
        activate GraphS
            GraphS->>GraphS: create_nodes_and_edges()
            GraphS->>GPUS: calculate_layout()
            activate GPUS
                GPUS->>GPUS: bind_gpu_buffers()
                GPUS->>GPUS: dispatch_compute_shader()
                GPUS->>GPUS: read_buffer_results()
                GPUS-->>GraphS: Updated Positions
            deactivate GPUS
            GraphS-->>Server: Graph Data
        deactivate GraphS
    end

    %% Client and Platform initialization
    Client->>Platform: initialize()
    activate Platform
        Platform->>Platform: detect_capabilities()
        Platform->>Settings: load_settings()
        activate Settings
            Settings->>Settings: validate_settings()
            Settings-->>Platform: Settings Object
        deactivate Settings
        
        Platform->>WS: connect()
        activate WS
            WS->>Server: ws_connect
            Server->>WSH: handle_connection()
            WSH->>WSM: register_client()
            WSM-->>WS: connection_established
            
            WS->>WS: setup_binary_handlers()
            WS->>WS: initialize_reconnection_logic()
            
            WSM-->>WS: initial_graph_data (Binary)
            WS->>WS: decode_binary_message()
        deactivate WS
        
        Platform->>XR: initialize()
        activate XR
            XR->>XR: check_xr_support()
            XR->>Scene: create()
            activate Scene
                Scene->>Scene: setup_three_js()
                Scene->>Scene: setup_render_pipeline()
                Scene->>Node: initialize()
                activate Node
                    Node->>Node: create_geometries()
                    Node->>Node: setup_materials()
                deactivate Node
                Scene->>Edge: initialize()
                activate Edge
                    Edge->>Edge: create_line_geometries()
                    Edge->>Edge: setup_line_materials()
                deactivate Edge
                Scene->>Hologram: initialize()
                activate Hologram
                    Hologram->>Hologram: setup_hologram_shader()
                    Hologram->>Hologram: create_hologram_geometry()
                deactivate Hologram
                Scene->>Text: initialize()
                activate Text
                    Text->>Text: load_fonts()
                    Text->>Text: setup_text_renderer()
                deactivate Text
            deactivate Scene
        deactivate XR
    deactivate Platform

    Note over Client, Nostr: User Interaction Flows

    %% User drags a node
    alt User Drags Node
        Client->>Node: handle_node_drag()
        Node->>WS: send_position_update()
        WS->>Server: binary_position_update
        Server->>GraphS: update_layout()
        GraphS->>GPUS: recalculate_forces()
        GPUS-->>Server: new_positions
        Server->>WSM: broadcast()
        WSM-->>WS: binary_update
        WS->>Node: update_positions()
        Node-->>Client: render_update
    end

    %% User asks a question
    alt User Asks Question
        Client->>RagFlowH: send_query()
        RagFlowH->>RagFlowS: process_query()
        activate RagFlowS
            RagFlowS->>RagFlow: get_context()
            RagFlow-->>RagFlowS: relevant_context
            RagFlowS->>OpenAI: generate_response()
            OpenAI-->>RagFlowS: ai_response
            RagFlowS-->>Client: streaming_response
        deactivate RagFlowS
        alt Speech Enabled
            Client->>SpeechS: synthesize_speech()
            activate SpeechS
                SpeechS->>OpenAI: text_to_speech()
                OpenAI-->>SpeechS: audio_stream
                SpeechS-->>Client: audio_data
            deactivate SpeechS
        end
    end

    %% User updates the graph
    alt User Updates Graph
        Client->>FileH: update_file()
        FileH->>FileS: process_update()
        FileS->>GitHub: create_pull_request()
        GitHub-->>FileS: pr_created
        FileS-->>Client: success_response
    end

    %% WebSocket reconnection flow
    alt WebSocket Reconnection
        WS->>WS: connection_lost()
        loop Until Max Attempts
            WS->>WS: attempt_reconnect()
            WS->>Server: ws_connect
            alt Connection Successful
                Server-->>WS: connection_established
                WSM-->>WS: resend_graph_data
                WS->>Node: restore_state()
            else Connection Failed
                Note right of WS: Continue reconnect attempts
            end
        end
    end

    %% Settings update flow
    alt Settings Update
        Client->>SettingsH: update_settings()
        SettingsH->>AppState: apply_settings()
        AppState->>WSM: broadcast_settings()
        WSM-->>WS: settings_update
        WS->>Settings: update_settings()
        Settings->>Platform: apply_platform_settings()
        Platform->>Scene: update_rendering()
        Scene->>Node: update_visuals()
        Scene->>Edge: update_visuals()
        Scene->>Hologram: update_effects()
    end

    %% Nostr authentication flow
    alt Nostr Authentication
        Client->>NostrH: authenticate()
        NostrH->>NostrS: validate_session()
        NostrS->>Nostr: verify_credentials()
        Nostr-->>NostrS: auth_result
        NostrS-->>Client: session_token
    end

    deactivate Server

```

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

## Acknowledgements

- Prof Rob Aspin: For inspiring the project's vision and providing valuable resources.
- OpenAI: For their advanced AI models powering the question-answering features.
- Perplexity AI and RAGFlow: For their AI services enhancing content processing and interaction.
- Three.js: For the robust 3D rendering capabilities utilized in the frontend.
- Actix: For the high-performance web framework powering the backend server.

=== Docker Configuration ===


--- docker-compose.yml ---

name: logseq-xr

services:
  webxr:
    build: .
    image: logseq-xr-image:latest
    container_name: logseq-xr-webxr
    read_only: false
    networks:
      ragflow:
        aliases:
          - logseq-xr-webxr
          - webxr-client
    deploy:
      resources:
        limits:
          cpus: '16.0'
          memory: 64G
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']  # Explicitly use GPU 0
              capabilities: [gpu]
    expose:
      - "4000"
    ports:
      - "4000:4000"  # Map container nginx port 4000 to host port 4000
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - BIND_ADDRESS=0.0.0.0
      - PORT=3001  # Explicitly set Rust backend to use port 3001
      - NGINX_PORT=4000  # Set nginx to use port 4000
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_GPU_UUID:-0}  # Use GPU UUID from launch script
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - NODE_ENV=production
      - GIT_HASH=${GIT_HASH:-development}  # Pass GIT_HASH from build environment
    env_file:
      - .env
    volumes:
      - ./data/markdown:/app/data/markdown
      - ./data/metadata:/app/data/metadata  # Added metadata volume mount
      - ./data/piper:/app/data/piper
      - ./client:/app/client
      - type: bind
        source: ${PWD}/settings.yaml
        target: /app/settings.yaml
        read_only: false
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 4G
    user: "${UID:-1000}:${GID:-1000}"  # Use host user's UID/GID or default to 1000
    restart: unless-stopped
    stop_grace_period: 30s
    init: true
    logging:
      driver: "json-file"
      options:
        max-size: "1g"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000/ || exit 1; websocat ws://localhost:4000/wss <<< '{\"type\":\"ping\"}' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-tunnel
    networks:
      ragflow:
        aliases:
          - cloudflared
    volumes:
      - ./config.yml:/etc/cloudflared/config.yml:ro
    command: tunnel --loglevel info --config /etc/cloudflared/config.yml run
    restart: unless-stopped
    stop_grace_period: 10s
    init: true
    depends_on: []  # Remove dependency on webxr
    environment:
      - TUNNEL_TOKEN=$TUNNEL_TOKEN
      - TUNNEL_METRICS=0.0.0.0:2000
      - TUNNEL_DNS_UPSTREAM=https://1.1.1.1/dns-query,https://1.0.0.1/dns-query
      - TUNNEL_TRANSPORT_PROTOCOL=http2
      - TUNNEL_ORIGIN_SERVER=http://logseq-xr-webxr:4000  # Use container name to ensure proper DNS resolution
      - TUNNEL_WEBSOCKET_ENABLE=true
      - TUNNEL_WEBSOCKET_HEARTBEAT_INTERVAL=30s  # Match our heartbeat interval
      - TUNNEL_WEBSOCKET_TIMEOUT=3600s  # Match our max timeout
      - TUNNEL_RETRIES=5
      - TUNNEL_GRACE_PERIOD=30s
    env_file:
      - .env
networks:
  ragflow:
    external: true
    name: docker_ragflow  # RAGFlow's network name from docker network ls
--- Dockerfile ---

# Stage 1: Frontend Build
FROM node:20-slim AS frontend-builder

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@9.14.2

# Copy package files and configuration
COPY package.json pnpm-lock.yaml ./
COPY tsconfig.json tsconfig.node.json vite.config.ts ./
COPY client ./client

# Create data/public directory for build output
RUN mkdir -p data/public

# Install dependencies and build
RUN pnpm install --frozen-lockfile && \
    pnpm run build

# Stage 2: Rust Dependencies Cache
FROM nvidia/cuda:12.2.0-devel-ubuntu22.04 AS rust-deps-builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    libssl-dev \
    pkg-config \
    libegl1-mesa-dev \
    libasound2-dev \
    ca-certificates \
    jq \
    && rm -rf /var/lib/apt/lists/*

# Install Rust with better error handling
RUN curl --retry 5 --retry-delay 2 --retry-connrefused https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.82.0
ENV PATH="/root/.cargo/bin:${PATH}"

# Configure cargo for better network resilience
RUN mkdir -p ~/.cargo && \
    echo '[source.crates-io]' >> ~/.cargo/config.toml && \
    echo 'registry = "https://github.com/rust-lang/crates.io-index"' >> ~/.cargo/config.toml && \
    echo 'replace-with = "ustc"' >> ~/.cargo/config.toml && \
    echo '[source.ustc]' >> ~/.cargo/config.toml && \
    echo 'registry = "sparse+https://mirrors.ustc.edu.cn/crates.io-index/"' >> ~/.cargo/config.toml && \
    echo '[net]' >> ~/.cargo/config.toml && \
    echo 'retry = 10' >> ~/.cargo/config.toml && \
    echo 'timeout = 120' >> ~/.cargo/config.toml && \
    echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml

WORKDIR /usr/src/app

# Copy Cargo files first for better layer caching
COPY Cargo.toml Cargo.lock ./

# Install git and set GIT_HASH
RUN apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/*

# Create dummy src directory and build dependencies
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs && \
    GIT_HASH=$(git rev-parse HEAD || echo "development") \
    CARGO_NET_GIT_FETCH_WITH_CLI=true \
    CARGO_HTTP_TIMEOUT=120 \
    CARGO_HTTP_CHECK_REVOKE=false \
    cargo build --release --jobs $(nproc) || \
    (sleep 2 && GIT_HASH=$(git rev-parse HEAD || echo "development") CARGO_HTTP_MULTIPLEXING=false cargo build --release --jobs $(nproc)) || \
    (sleep 5 && GIT_HASH=$(git rev-parse HEAD || echo "development") CARGO_HTTP_MULTIPLEXING=false cargo build --release --jobs 1)

# Now copy the real source code and build
COPY src ./src
RUN GIT_HASH=$(git rev-parse HEAD || echo "development") \
    cargo build --release --jobs $(nproc) || \
    (sleep 2 && GIT_HASH=$(git rev-parse HEAD || echo "development") cargo build --release --jobs $(nproc)) || \
    (sleep 5 && GIT_HASH=$(git rev-parse HEAD || echo "development") cargo build --release --jobs 1)

# Stage 3: Python Dependencies
FROM python:3.10.12-slim AS python-builder

WORKDIR /app

# Create virtual environment and install dependencies
RUN python -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Install Python packages
RUN pip install --upgrade pip==23.3.1 wheel==0.41.3 && \
    pip install \
    piper-phonemize==1.1.0 \
    piper-tts==1.2.0 \
    onnxruntime-gpu==1.16.3

# Stage 4: Final Runtime Image
FROM nvidia/cuda:12.2.0-devel-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONUNBUFFERED=1 \
    PATH="/app/venv/bin:${PATH}" \
    NVIDIA_DRIVER_CAPABILITIES=all \
    RUST_LOG=info \
    RUST_BACKTRACE=0 \
    PORT=4000 \
    BIND_ADDRESS=0.0.0.0 \
    NODE_ENV=production \
    DOMAIN=localhost

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    libssl3 \
    nginx \
    libegl1-mesa \
    libasound2 \
    python3.10-minimal \
    python3.10-venv \
    ca-certificates \
    mesa-utils \
    libgl1-mesa-dri \
    libgl1-mesa-glx \
    netcat-openbsd \
    gettext-base \
    net-tools \
    iproute2 \
    procps \
    lsof \
    jq \
    wget \
    && wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq \
    && chmod +x /usr/bin/yq \
    && wget https://github.com/vi/websocat/releases/latest/download/websocat.x86_64-unknown-linux-musl -O /usr/bin/websocat \
    && chmod +x /usr/bin/websocat \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /usr/share/doc/* \
    && rm -rf /usr/share/man/*

# Create a non-root user for running the application
RUN groupadd -g 1000 webxr && \
    useradd -u 1000 -g webxr -d /app webxr

# Set up nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf.template
RUN envsubst '${DOMAIN}' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && \
    rm /etc/nginx/nginx.conf.template && \
    chown -R webxr:webxr /etc/nginx/nginx.conf && \
    chmod 644 /etc/nginx/nginx.conf

# Set up nginx directories and permissions
RUN mkdir -p /var/lib/nginx/client_temp \
             /var/lib/nginx/proxy_temp \
             /var/lib/nginx/fastcgi_temp \
             /var/lib/nginx/uwsgi_temp \
             /var/lib/nginx/scgi_temp \
             /var/log/nginx \
             /var/run/nginx \
             /var/cache/nginx && \
    chown -R webxr:webxr /var/lib/nginx \
                         /var/log/nginx \
                         /var/run/nginx \
                         /var/cache/nginx \
                         /etc/nginx && \
    chmod -R 755 /var/lib/nginx \
                 /var/log/nginx \
                 /var/run/nginx \
                 /var/cache/nginx \
                 /etc/nginx && \
    touch /var/log/nginx/error.log \
          /var/log/nginx/access.log \
          /var/run/nginx/nginx.pid && \
    chmod 666 /var/log/nginx/*.log \
              /var/run/nginx/nginx.pid

# Set up directory structure and permissions
WORKDIR /app

# Create required directories with proper permissions
RUN mkdir -p /app/data/public/dist \
             /app/data/markdown \
             /app/data/runtime \
             /app/src/utils \
             /app/data/piper \
             /tmp/runtime && \
    chown -R webxr:webxr /app /tmp/runtime && \
    chmod -R 755 /app /tmp/runtime && \
    # Ensure data/markdown is writable by webxr user
    chmod 777 /app/data/markdown

# Create necessary directories and set permissions
RUN mkdir -p /app/data/markdown /app/data/metadata && \
    chmod -R 777 /app/data

# Copy Python virtual environment
COPY --from=python-builder /app/venv /app/venv
RUN chown -R webxr:webxr /app/venv

# Copy built artifacts
COPY --from=rust-deps-builder /usr/src/app/target/release/webxr /app/
COPY src/utils/compute_forces.ptx /app/compute_forces.ptx
COPY --from=frontend-builder /app/data/public/dist /app/data/public/dist

# Copy configuration and scripts
COPY src/generate_audio.py /app/src/
COPY scripts/start.sh /app/start.sh

# Set proper permissions for copied files
RUN chown -R webxr:webxr /app && \
    chmod 755 /app/start.sh && \
    chmod -R g+w /app

# Ensure settings.yaml is present and set permissions
RUN touch /app/settings.yaml && \
    chown webxr:webxr /app/settings.yaml && \
    chmod 666 /app/settings.yaml

# Switch to non-root user
USER webxr

# Add security labels
LABEL org.opencontainers.image.source="https://github.com/yourusername/logseq-xr" \
      org.opencontainers.image.description="LogseqXR WebXR Graph Visualization" \
      org.opencontainers.image.licenses="MIT" \
      security.capabilities="cap_net_bind_service" \
      security.privileged="false" \
      security.allow-privilege-escalation="false"

# Expose port
EXPOSE 4000

# Start application
ENTRYPOINT ["/app/start.sh"]

--- nginx.conf ---

pid /var/run/nginx/nginx.pid;
error_log /var/log/nginx/error.log debug;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    charset utf-8;

    # Override TypeScript MIME type (overriding video/mp2t from mime.types)
    types {
        application/typescript ts;
    }

    # Logging
    log_format debug_format '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"'
                          ' ws_status="$upstream_http_upgrade"';  # Added WebSocket status logging

    access_log /var/log/nginx/access.log debug_format;

    # Optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 120;  # Increased to match cloudflared keepAliveTimeout
    keepalive_requests 100;

    # Gzip settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # WebSocket configuration
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Upstream backend definition for the Rust server
    upstream backend {
        server 127.0.0.1:3001;  # Use localhost since both services are in same container
        keepalive 32;  # Keep connections alive
    }

    # Main server configuration
    server {
        listen 4000 default_server;  # Listen on port 4000 for external connections
        server_name _;  # Accept any server name
        root /app/data/public/dist;  # Set root to built files directory

        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "same-origin" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'; connect-src 'self' ws: wss: http: https: www.visionflow.info;" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # WebSocket endpoint
        location /wss {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            
            # Pass through Cloudflare headers
            proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
            proxy_set_header CF-Ray $http_cf_ray;
            proxy_set_header CF-Visitor $http_cf_visitor;
            
            # Standard proxy headers
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
            
            # WebSocket timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 75s;
            proxy_buffering off;
            proxy_cache off;
            
            # Debug logging
            access_log /var/log/nginx/websocket.log debug_format;
            error_log /var/log/nginx/websocket-error.log debug;
        }

        # API endpoints
        location /api {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API specific settings
            proxy_read_timeout 120s;  # Increased for larger graph data
            proxy_send_timeout 120s;  # Increased for larger graph data
            proxy_connect_timeout 60s;
            proxy_buffering on;       # Enable buffering for API responses
            proxy_buffer_size 256k;   # Increased for larger responses
            proxy_buffers 8 256k;     # Increased number of buffers
            proxy_busy_buffers_size 512k;  # Increased for larger responses
            proxy_max_temp_file_size 2048m;  # Allow larger temporary files
            add_header Cache-Control "no-store" always;  # Prevent caching of dynamic data
        }

        # Static files
        location / {
            try_files $uri $uri/ /index.html =404;
            expires 1h;
            add_header Cache-Control "public, no-transform";
            error_page 404 = @backend;  # Fallback to backend if file not found
        }

        # Static files with proper MIME types
        location /assets/ {
            expires 7d;
            add_header Cache-Control "public, no-transform" always;
            try_files $uri =404;
            access_log off;
        }

        # Fallback location for static files
        location @backend {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}

--- scripts/launch-docker.sh ---

#!/usr/bin/env bash

###############################################################################
# SAFETY SETTINGS
###############################################################################
# -e  Exit on any command returning a non-zero status
# -u  Treat unset variables as errors
# -o pipefail  Return error if any part of a pipeline fails
set -euo pipefail

###############################################################################
# DETECT SCRIPT & PROJECT ROOT
###############################################################################
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"

###############################################################################
# COLOR CONSTANTS
###############################################################################
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'  # No color

###############################################################################
# DATA PATHS
###############################################################################
MARKDOWN_DIR="$PROJECT_ROOT/data/markdown"
METADATA_DIR="$PROJECT_ROOT/data/metadata"
PUBLIC_DIR="$PROJECT_ROOT/data/public"
METADATA_FILE="$METADATA_DIR/metadata.json"

###############################################################################
# LOGGING & EXIT HANDLING
###############################################################################
log() {
    # Logs a message with a timestamp
    echo -e "[$(date "+%Y-%m-%d %H:%M:%S")] $1"
}

handle_exit() {
    # Called when the script receives a signal (Ctrl+C, kill, etc.)
    log "\n${YELLOW}Exiting to shell. Containers will continue running.${NC}"
    exit 0
}

# Trap Ctrl+C, kill, etc. so we can exit gracefully
trap handle_exit INT TERM

###############################################################################
# CHECKS & VALIDATIONS
###############################################################################

check_environment() {
    # Validate required env vars and GitHub token
    log "${YELLOW}Checking environment variables...${NC}"

    local required_vars=(
        "GITHUB_TOKEN"
        "GITHUB_OWNER"
        "GITHUB_REPO"
        "GITHUB_BASE_PATH"
    )

    for var in "${required_vars[@]}"; do
        if [ -z "${!var:-}" ]; then
            log "${RED}Error: $var is not set in .env file${NC}"
            return 1
        fi
    done

    # Check GitHub token access
    if ! curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO" >/dev/null; then
        log "${RED}Error: Invalid GitHub token or repository access${NC}"
        return 1
    fi

    log "${GREEN}Environment check passed${NC}"
    return 0
}

check_pnpm_security() {
    log "${YELLOW}Running pnpm security audit...${NC}"

    # Run and capture the audit output
    local audit_output
    audit_output=$(pnpm audit 2>&1 || true)
    local audit_exit=$?

    # Extract critical vulnerabilities count
    local critical_count
    critical_count=$(echo "$audit_output" | grep -i "critical" \
                                    | grep -o '[0-9]\+ vulnerabilities' \
                                    | awk '{print $1}')
    critical_count=${critical_count:-0}

    # Display the audit output
    echo "$audit_output"

    if [ "$critical_count" -gt 0 ]; then
        log "${RED}Found $critical_count critical vulnerabilities!${NC}"
        return 1
    elif [ "$audit_exit" -ne 0 ]; then
        log "${YELLOW}Found non-critical vulnerabilities${NC}"
    else
        log "${GREEN}No critical vulnerabilities found${NC}"
    fi

    return 0
}

check_typescript() {
    log "${YELLOW}Running TypeScript type check...${NC}"
    if ! pnpm run type-check; then
        log "${RED}TypeScript check failed${NC}"
        log "${YELLOW}Containers will be left running for debugging${NC}"
        return 1
    fi
    log "${GREEN}TypeScript check passed${NC}"
    return 0
}

check_rust_security() {
    log "${YELLOW}Running cargo audit...${NC}"

    local audit_output
    audit_output=$(cargo audit 2>&1 || true)
    local audit_exit=$?

    local critical_count
    critical_count=$(echo "$audit_output" | grep -i "critical" | wc -l)
    critical_count=${critical_count:-0}

    echo "$audit_output"

    if [ "$critical_count" -gt 0 ]; then
        log "${RED}Found $critical_count critical vulnerabilities!${NC}"
        return 1
    elif [ "$audit_exit" -ne 0 ]; then
        log "${YELLOW}Found non-critical vulnerabilities${NC}"
    else
        log "${GREEN}No critical vulnerabilities found${NC}"
    fi

    return 0
}

read_settings() {
    # Read domain & port from settings.yaml using yq
    local settings_file="$PROJECT_ROOT/settings.yaml"

    if [ ! -f "$settings_file" ]; then
        log "${RED}Error: settings.yaml not found${NC}"
        return 1
    fi

    # Check if yq is installed
    if ! command -v yq &>/dev/null; then
        log "${RED}Error: yq is not installed. Please install yq to parse YAML files.${NC}"
        return 1
    fi

    # Extract domain and port using yq
    DOMAIN=$(yq eval '.system.network.domain' "$settings_file")
    export DOMAIN

    PORT=$(yq eval '.system.network.port' "$settings_file")
    export PORT

    if [ -z "${DOMAIN:-}" ] || [ -z "${PORT:-}" ] || [ "$DOMAIN" = "null" ] || [ "$PORT" = "null" ]; then
        log "${RED}Error: DOMAIN or PORT not set in settings.yaml. Check your configuration.${NC}"
        return 1
    fi
}

check_system_resources() {
    log "${YELLOW}Checking GPU availability...${NC}"
    if ! command -v nvidia-smi &>/dev/null; then
        log "${RED}Error: nvidia-smi not found${NC}"
        return 1
    fi

    local gpu_info
    gpu_info=$(nvidia-smi --query-gpu=memory.used,memory.total --format=csv,noheader)
    echo "$gpu_info"

    local has_enough_memory=false
    while IFS=, read -r used total; do
        used=$(echo "$used" | tr -d ' MiB')
        total=$(echo "$total" | tr -d ' MiB')
        local free=$((total - used))
        if [ "$free" -gt 4096 ]; then
            has_enough_memory=true
            break
        fi
    done <<< "$gpu_info"

    if [ "$has_enough_memory" = false ]; then
        log "${RED}Error: No GPU with at least 4GB free memory${NC}"
        return 1
    fi
}

check_dependencies() {
    # Check Docker
    if ! command -v docker &>/dev/null; then
        log "${RED}Error: Docker is not installed${NC}"
        return 1
    fi

    # Try Docker Compose v2 first, fallback to v1
    if docker compose version &>/dev/null; then
        DOCKER_COMPOSE="docker compose"
    elif docker-compose version &>/dev/null; then
        DOCKER_COMPOSE="docker-compose"
    else
        log "${RED}Error: Docker Compose not found${NC}"
        return 1
    fi

    # Check yq
    if ! command -v yq &>/dev/null; then
        log "${RED}Error: yq is not installed${NC}"
        log "${YELLOW}Please install yq to parse YAML files:${NC}"
        log "${YELLOW}On Ubuntu/Debian: sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq${NC}"
        log "${YELLOW}On macOS: brew install yq${NC}"
        log "${YELLOW}On other systems, visit: https://github.com/mikefarah/yq#install${NC}"
        return 1
    fi
}

verify_client_structure() {
    log "${YELLOW}Verifying client directory structure...${NC}"

    local required_files=(
        "$PROJECT_ROOT/client/index.html"
        "$PROJECT_ROOT/client/index.ts"
        "$PROJECT_ROOT/client/core/types.ts"
        "$PROJECT_ROOT/client/core/constants.ts"
        "$PROJECT_ROOT/client/core/utils.ts"
        "$PROJECT_ROOT/client/core/logger.ts"
        "$PROJECT_ROOT/client/websocket/websocketService.ts"
        "$PROJECT_ROOT/client/rendering/scene.ts"
        "$PROJECT_ROOT/client/rendering/nodes.ts"
        "$PROJECT_ROOT/client/rendering/textRenderer.ts"
        "$PROJECT_ROOT/client/state/settings.ts"
        "$PROJECT_ROOT/client/state/graphData.ts"
        "$PROJECT_ROOT/client/state/defaultSettings.ts"
        "$PROJECT_ROOT/client/xr/xrSessionManager.ts"
        "$PROJECT_ROOT/client/xr/xrInteraction.ts"
        "$PROJECT_ROOT/client/xr/xrTypes.ts"
        "$PROJECT_ROOT/client/platform/platformManager.ts"
        "$PROJECT_ROOT/client/tsconfig.json"
    )

    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            log "${RED}Error: Required file $file not found${NC}"
            return 1
        fi
    done

    log "${GREEN}Client directory structure verified${NC}"
    return 0
}

check_ragflow_network() {
    log "${YELLOW}Checking RAGFlow network availability...${NC}"
    if ! docker network ls | grep -q "docker_ragflow"; then
        log "${RED}Error: RAGFlow network (docker_ragflow) not found${NC}"
        log "${YELLOW}Please ensure RAGFlow is running in ../ragflow/docker${NC}"
        log "${YELLOW}You can check the network with: docker network ls${NC}"
        return 1
    fi
    log "${GREEN}RAGFlow network is available${NC}"
    return 0
}

check_application_readiness() {
    local max_attempts=60
    local attempt=1
    local wait_secs=2

    log "${YELLOW}Checking application readiness...${NC}"

    # Install websocat if not present (used for WebSocket testing)
    if ! command -v websocat &>/dev/null; then
        log "${YELLOW}Installing websocat for WebSocket testing...${NC}"
        if command -v cargo &>/dev/null; then
            cargo install websocat
        else
            log "${RED}Error: Neither websocat nor cargo found. Cannot test WebSocket connection.${NC}"
            return 1
        fi
    fi

    while [ "$attempt" -le "$max_attempts" ]; do
        local ready=true
        local status_msg=""

        # 1. Check HTTP
        if ! timeout 5 curl -s http://localhost:4000/ >/dev/null; then
            ready=false
            status_msg="HTTP endpoint not ready"
        fi

        # 2. If HTTP is up, check WebSocket
        if [ "$ready" = true ]; then
            log "${YELLOW}Testing WebSocket connection...${NC}"
            if ! timeout 5 websocat "ws://localhost:4000/wss" \
                    >/dev/null 2>&1 <<< '{"type":"ping"}'; then
                ready=false
                status_msg="WebSocket endpoint not ready"
            fi
        fi

        # 3. Optional RAGFlow connectivity
        if [ "$ready" = true ]; then
            if timeout 5 curl -s http://ragflow-server/v1/health >/dev/null; then
                log "${GREEN}RAGFlow service is accessible${NC}"
            else
                log "${YELLOW}Note: RAGFlow service is not accessible - some features may be limited${NC}"
            fi
        fi

        if [ "$ready" = true ]; then
            log "${GREEN}All services are ready${NC}"
            return 0
        fi

        log "${YELLOW}Attempt $attempt/$max_attempts: $status_msg${NC}"

        # Show partial logs halfway through attempts
        if [ "$attempt" -eq $((max_attempts / 2)) ]; then
            log "${YELLOW}Still waiting for services. Recent logs:${NC}"
            $DOCKER_COMPOSE logs --tail=20
        fi

        sleep "$wait_secs"
        attempt=$((attempt + 1))
    done

    # Exhausted attempts
    log "${RED}Application failed to become ready. Dumping logs...${NC}"
    $DOCKER_COMPOSE logs
    log "${YELLOW}Containers left running for debugging. Use these commands to inspect:${NC}"
    log "  $DOCKER_COMPOSE logs -f"
    log "  docker logs logseq-xr-webxr"
    log "  docker logs cloudflared-tunnel"
    return 1
}
###############################################################################
# COMMAND LINE ARGUMENTS
###############################################################################
REBUILD_TEST=false

# Parse command line arguments
for arg in "$@"; do
    case $arg in
        rebuild-test)
            REBUILD_TEST=true
            shift # Remove from processing
            ;;
    esac
done

###############################################################################
# MAIN EXECUTION
###############################################################################
cd "$PROJECT_ROOT"


# 1. Ensure .env exists
if [ ! -f .env ]; then
    log "${RED}Error: .env file not found in $PROJECT_ROOT${NC}"
    exit 1
fi

# 2. Source environment variables
set -a
source .env
set +a

# 3. Read settings from TOML (non-fatal if it fails, to allow debugging)
read_settings || {
    log "${YELLOW}Settings read failed - continuing for debugging${NC}"
}

# 4. Check dependencies (Docker and yq)
check_dependencies || {
    log "${RED}Dependency check failed${NC}"
    exit 1
}

# 5. GPU resources (non-fatal if it fails)
check_system_resources || {
    log "${YELLOW}System resources check failed - continuing for debugging${NC}"
}

# 6. Verify client directory structure (non-fatal if it fails)
if ! verify_client_structure; then
    log "${RED}Client structure verification failed${NC}"
    log "${YELLOW}Continuing for debugging${NC}"
fi

# 7. Security checks
log "\n${YELLOW}Running security checks...${NC}"
check_pnpm_security || true
check_typescript || {
    log "${YELLOW}TypeScript check failed - continuing for debugging${NC}"
}
check_rust_security || true

# 8. RAGFlow network check (non-fatal)
check_ragflow_network || {
    log "${YELLOW}RAGFlow network check failed - continuing for debugging${NC}"
}

# 9. Environment & GitHub token check (non-fatal)
if ! check_environment; then
    log "${YELLOW}Environment check failed - continuing for debugging${NC}"
fi

# 10. Build & start containers
log "${YELLOW}Building and starting services...${NC}"

# Clean up existing containers
log "${YELLOW}Cleaning up existing containers...${NC}"

# Get container IDs for our specific containers
cloudflared_id=$(docker ps -aq --filter "name=cloudflared-tunnel")
webxr_id=$(docker ps -aq --filter "name=logseq-xr-webxr")

# Stop and remove cloudflared container if it exists
if [ -n "$cloudflared_id" ]; then
    log "${YELLOW}Stopping cloudflared container $cloudflared_id...${NC}"
    docker stop "$cloudflared_id"
    docker rm "$cloudflared_id"
fi

# Stop and remove webxr container if it exists
if [ -n "$webxr_id" ]; then
    log "${YELLOW}Stopping webxr container $webxr_id...${NC}"
    docker stop "$webxr_id"
    docker rm "$webxr_id"
fi

# If in rebuild-test mode, do additional cleanup
if [ "$REBUILD_TEST" = true ]; then
    log "${YELLOW}Rebuild-test mode: Performing additional cleanup...${NC}"
    docker system prune -f
fi

# Get current git hash or use "development" if not in a git repo
GIT_HASH=$(git rev-parse HEAD 2>/dev/null || echo "development")
export GIT_HASH

# Build with GIT_HASH environment variable
GIT_HASH=$GIT_HASH $DOCKER_COMPOSE build --pull --no-cache
$DOCKER_COMPOSE up -d

# 11. Check readiness (fatal if fails)
if ! check_application_readiness; then
    log "${RED}Application failed to start properly${NC}"
    log "${YELLOW}Containers left running for debugging. Use these commands:${NC}"
    log "  $DOCKER_COMPOSE logs -f"
    log "  docker logs logseq-xr-webxr"
    log "  docker logs cloudflared-tunnel"
    exit 1
fi

# 12. Final status
log "\n${GREEN}🚀 Services are running!${NC}"

log "\nResource Usage:"
docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"

log "\nEndpoints:"
echo "HTTP:      http://localhost:4000"
echo "WebSocket: ws://localhost:4000/wss"

log "\nCommands:"
echo "logs:    $DOCKER_COMPOSE logs -f"
echo "stop:    $DOCKER_COMPOSE down"
echo "restart: $DOCKER_COMPOSE restart"

# 13. Show logs in background, wait for them
log "\n${YELLOW}Showing logs (Ctrl+C to exit)...${NC}"
$DOCKER_COMPOSE logs -f &

wait

--- scripts/start.sh ---

#!/bin/bash
set -euo pipefail

# Function to log messages with timestamps
log() {
    echo "[$(date "+%Y-%m-%d %H:%M:%S")] $1"
}

# Verify settings file permissions
log "Verifying settings.yaml permissions..."
if [ ! -f "/app/settings.yaml" ]; then
    log "Error: settings.yaml not found"
    exit 1
fi
chmod 666 /app/settings.yaml
log "settings.yaml permissions verified"

# Set up runtime environment
log "Setting up runtime environment..."
mkdir -p /app/data/metadata /app/data/markdown
chmod -R 777 /app/data
log "Runtime environment configured successfully"

# Start nginx
log "Starting nginx..."
nginx -t && nginx
log "nginx started successfully"

# Execute the webxr binary
log "Executing webxr..."
exec /app/webxr


=== Docker Network Configuration ===


--- docker network inspect docker_ragflow ---

[
    {
        "Name": "docker_ragflow",
        "Id": "a7bc515a66f9014dfe7b39dc55eb933f4620c1536e5ff801fa5f92c8c36060b3",
        "Created": "2024-12-06T11:41:33.959442093Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.19.0.0/16",
                    "Gateway": "172.19.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "13dd52d8ed7208059c1e512072bc7d0ef9c9fd9e5d62b573f02bb4c29a3fbfa0": {
                "Name": "ragflow-minio",
                "EndpointID": "ee3d4ecad24b473f65d54a30a2bab96ce25f30d70c887d6b715b413244d5b0b4",
                "MacAddress": "02:42:ac:13:00:02",
                "IPv4Address": "172.19.0.2/16",
                "IPv6Address": ""
            },
            "15187ae6797c386df2730cb09aa06f9a09bf70d62e3510acf1bb2f86c3815875": {
                "Name": "cloudflared-tunnel",
                "EndpointID": "0c0fe6defbea9088a2d0c000e13a376fa0d3b88e6ad2c2eafb0376162befc29b",
                "MacAddress": "02:42:ac:13:00:0a",
                "IPv4Address": "172.19.0.10/16",
                "IPv6Address": ""
            },
            "442f4636e2fae29893f5305d78a472a6e2720d89e00b0d3db78ef023f8fad915": {
                "Name": "ragflow-server",
                "EndpointID": "2b2b9cbef46eaf0d54c9da686f3019f7755188a6d4df3e147911c165f05d1bbc",
                "MacAddress": "02:42:ac:13:00:07",
                "IPv4Address": "172.19.0.7/16",
                "IPv6Address": ""
            },
            "723a289060840e6ef20b1797a80209915a869f44e76bb55d420853d452251b88": {
                "Name": "ollama",
                "EndpointID": "a20e6e686d132f43b55fc97529eb92d8d8defd613e5eb7dc44f254b63d18dbe1",
                "MacAddress": "02:42:ac:13:00:08",
                "IPv4Address": "172.19.0.8/16",
                "IPv6Address": ""
            },
            "9163044a0d4607bde96940d757b045cb4d8d47364f2dce91b8f27733b8310e35": {
                "Name": "open-webui",
                "EndpointID": "04d1de1cb0a48645efdcc7b13106802ea53e4aefc78897a08f96dbb0f7d521a3",
                "MacAddress": "02:42:ac:13:00:0b",
                "IPv4Address": "172.19.0.11/16",
                "IPv6Address": ""
            },
            "9f5a04aa58e169776776d5dffa228573ef970fe48aac171ad69aeeae74eaffdd": {
                "Name": "logseq-xr-webxr",
                "EndpointID": "05087106fd9932e3ac32312204cb2440e56a085a56992216ea82e016556e204c",
                "MacAddress": "02:42:ac:13:00:06",
                "IPv4Address": "172.19.0.6/16",
                "IPv6Address": ""
            },
            "b0d4b7902a73135616df938ed13eaae3113736a73199c68351bb88961ed94f57": {
                "Name": "ragflow-mysql",
                "EndpointID": "e687654343549c0f8f450c6a904b886ff683d7158e546039587aca8415741876",
                "MacAddress": "02:42:ac:13:00:04",
                "IPv4Address": "172.19.0.4/16",
                "IPv6Address": ""
            },
            "b20ba199e0053fbd6d75353f2f98abafa39524d0893420841d037e7a83fd64a8": {
                "Name": "ragflow-redis",
                "EndpointID": "b8838f2057397fbed1f46d4976431603e85330e6d9b2a386800a2e5589a066ab",
                "MacAddress": "02:42:ac:13:00:03",
                "IPv4Address": "172.19.0.3/16",
                "IPv6Address": ""
            },
            "bfb54d60551054a2d0f0c2da1407a7cbc6898436f8307e37beb2ce07383b9be1": {
                "Name": "ragflow-es-01",
                "EndpointID": "7f3bcba734a797d2e1e77f963334a43469ee34d693ac52727e050386d95d36a9",
                "MacAddress": "02:42:ac:13:00:05",
                "IPv4Address": "172.19.0.5/16",
                "IPv6Address": ""
            },
            "c5b92a96025baeae548518eaafe88ef76e70e6d90e5951a8750d01c56b6c8d4a": {
                "Name": "xinference",
                "EndpointID": "44cee519c20433e6f98f813ce2d313f091996b2779ce3e3be8b6d4ac9c0888e5",
                "MacAddress": "02:42:ac:13:00:09",
                "IPv4Address": "172.19.0.9/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {
            "com.docker.compose.network": "ragflow",
            "com.docker.compose.project": "docker",
            "com.docker.compose.version": "2.29.7"
        }
    }
]
The following text represents a project with code. The structure of the text consists of sections beginning with ----, followed by a single line containing the file path and file name, and then a variable number of lines containing the file contents. The text representing the project ends when the symbols --END-- are encountered. Any further text beyond --END-- is meant to be interpreted as instructions using the aforementioned project as context.
----
index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="immersive-ar" content="true">
  <meta name="oculus-hand-tracking" content="true">
  <title>LogseqXR Graph Visualization</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      overflow: hidden;
      font-family: Arial, sans-serif;
      background: #212121;  /* Match scene background */
      color: #ffffff;
    }

    #scene-container {
      position: absolute;
      width: 100%;
      height: 100%;
      background: transparent;
    }

    #control-panel {
      position: fixed;
      top: 0;
      right: 0;
      height: 100vh;
      background: rgba(33, 33, 33, 0.95);  /* Match scene background */
      border-left: 1px solid rgba(255, 255, 255, 0.1);
      padding: 15px;
      z-index: 1000;
      min-width: 300px;
      overflow-y: auto;
      box-shadow: -2px 0 10px rgba(0, 0, 0, 0.3);
      transition: opacity 0.3s ease;
    }

    #control-panel.hidden {
      opacity: 0;
      pointer-events: none;
    }

    #xr-button {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      padding: 12px 24px;
      background: rgba(255, 255, 255, 0.2);
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 20px;
      color: white;
      font-size: 16px;
      cursor: pointer;
      z-index: 1000;
      transition: all 0.3s ease;
    }

    #xr-button:hover {
      background: rgba(255, 255, 255, 0.3);
    }

    #xr-button.hidden {
      opacity: 0;
      pointer-events: none;
    }

    .control-panel-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .control-panel-header h3 {
      margin: 0;
      font-size: 1.2em;
      color: #ffffff;
    }

    .connection-status {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.9em;
    }

    .connection-status.connected {
      background: rgba(76, 175, 80, 0.2);
      color: #4CAF50;
    }

    .connection-status.disconnected {
      background: rgba(244, 67, 54, 0.2);
      color: #F44336;
    }

    .settings-group {
      margin-bottom: 20px;
      padding: 10px;
      border-radius: 4px;
      background: rgba(255, 255, 255, 0.05);
    }

    .settings-group h4 {
      margin: 0 0 10px 0;
      color: #ffffff;
      font-size: 1em;
    }

    .setting-item {
      margin-bottom: 10px;
    }

    .setting-item label {
      display: block;
      margin-bottom: 5px;
      color: rgba(255, 255, 255, 0.8);
    }

    .setting-item input[type="text"],
    .setting-item input[type="number"],
    .setting-item select {
      width: 100%;
      padding: 6px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 4px;
      background: rgba(255, 255, 255, 0.1);
      color: #ffffff;
    }

    .setting-item input[type="checkbox"] {
      margin-right: 8px;
    }

    .setting-item input:focus,
    .setting-item select:focus {
      outline: none;
      border-color: rgba(255, 255, 255, 0.3);
      background: rgba(255, 255, 255, 0.15);
    }
  </style>
</head>
<body>
  <div id="scene-container">
    <canvas id="main-canvas"></canvas>
  </div>
  <div id="control-panel">
    <div class="control-panel-header">
      <h3>Settings</h3>
      <div class="connection-status">
        <span class="status-indicator"></span>
        <span id="connection-status">Connecting...</span>
      </div>
    </div>
    <div class="control-panel-content">
      <!-- Settings sections will be dynamically populated by ControlPanel.ts -->
    </div>
  </div>
  <script type="module" src="/index.ts"></script>
</body>
</html>

----
tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": [
      "es2020",
      "dom",
      "dom.iterable",
      "webworker",
      "webworker.importscripts",
      "webworker.iterable"
    ],
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitThis": true,
    "noImplicitReturns": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["**/*.ts", "**/*.d.ts"],
  "exclude": ["node_modules"]
}

----
index.ts
import { Settings } from './types/settings';
import { EnhancedNodeManager } from './rendering/EnhancedNodeManager';
import { EdgeManager } from './rendering/EdgeManager';
import { HologramManager } from './rendering/HologramManager';
import { TextRenderer } from './rendering/textRenderer';
import { WebSocketService } from './websocket/websocketService';
import { SettingsStore } from './state/SettingsStore';
import { LoggerConfig, createLogger } from './core/logger';
import { platformManager } from './platform/platformManager';
import { XRSessionManager } from './xr/xrSessionManager';
import { XRInitializer } from './xr/xrInitializer';
import { SceneManager } from './rendering/scene';
import { graphDataManager } from './state/graphData';
import { debugState } from './core/debugState';
import './ui'; // Import UI initialization

const logger = createLogger('GraphVisualization');

// Helper for conditional debug logging
function debugLog(message: string, ...args: any[]) {
    if (debugState.isDataDebugEnabled()) {
        logger.debug(message, ...args);
    }
}

export class GraphVisualization {
    private sceneManager: SceneManager;
    private nodeManager: EnhancedNodeManager;
    private edgeManager: EdgeManager;
    private hologramManager: HologramManager;
    private textRenderer: TextRenderer;
    private websocketService!: WebSocketService;

    private async initializeWebSocket(): Promise<void> {
        debugLog('Initializing WebSocket connection');
        
        // Load initial graph data
        debugLog('Loading initial graph data');
        try {
            await graphDataManager.fetchInitialData();
            // Update visualization with initial data
            const graphData = graphDataManager.getGraphData();
            this.nodeManager.updateNodes(graphData.nodes);
            this.edgeManager.updateEdges(graphData.edges);
            debugLog('Initial graph data loaded and visualization updated');
        } catch (error) {
            logger.error('Failed to load initial graph data:', error);
        }

        // Initialize WebSocket for position updates only
        this.websocketService = WebSocketService.getInstance();
        this.websocketService.onBinaryMessage((nodes) => {
            debugLog('Received binary node update', { nodeCount: nodes.length });
            this.nodeManager.updateNodePositions(nodes);
        });
        this.websocketService.onConnectionStatusChange((connected) => {
            logger.info(`WebSocket connection status changed: ${connected}`);
            if (connected) {
                debugLog('Requesting position updates');
                this.websocketService.sendMessage({ type: 'requestInitialData' });
            }
        });
        this.websocketService.connect();
        debugLog('WebSocket initialization complete');
    }

    constructor(settings: Settings) {
        debugLog('Initializing GraphVisualization');
        
        // Get existing canvas element
        const canvas = document.getElementById('main-canvas') as HTMLCanvasElement;
        if (!canvas) {
            throw new Error('Could not find #main-canvas element');
        }
        
        // Initialize SceneManager
        this.sceneManager = SceneManager.getInstance(canvas);
        
        // Initialize managers with SceneManager's scene and renderer
        const scene = this.sceneManager.getScene();
        const renderer = this.sceneManager.getRenderer();
        const camera = this.sceneManager.getCamera();
        
        this.nodeManager = new EnhancedNodeManager(scene, settings);
        this.edgeManager = new EdgeManager(scene, settings);
        this.hologramManager = new HologramManager(scene, renderer, settings);
        this.textRenderer = new TextRenderer(camera);
        
        // Apply initial settings to all components
        this.handleSettingsUpdate(settings);
        
        // Initialize WebSocket after settings are loaded
        this.initializeWebSocket();
        
        // Start rendering
        this.sceneManager.start();
        debugLog('GraphVisualization initialization complete');
    }


    public handleSettingsUpdate(settings: Settings) {
        debugLog('Handling settings update');
        this.nodeManager.handleSettingsUpdate(settings);
        this.edgeManager.handleSettingsUpdate(settings);
        this.hologramManager.updateSettings(settings);
        this.textRenderer.handleSettingsUpdate(settings.visualization.labels);
        this.sceneManager.handleSettingsUpdate(settings);
    }

    public dispose() {
        debugLog('Disposing GraphVisualization');
        this.nodeManager.dispose();
        this.edgeManager.dispose();
        this.hologramManager.dispose();
        this.textRenderer.dispose();
        this.websocketService.close();
        
        // Clean up XR components
        if ((window as any).xrInitializer) {
            (window as any).xrInitializer.dispose();
            delete (window as any).xrInitializer;
        }
        
        SceneManager.cleanup();
        debugLog('GraphVisualization disposed');
    }
}

// Import default settings
import { defaultSettings } from './state/defaultSettings';

// Initialize settings and logging
async function init() {
    // Initialize settings first
    const settingsStore = SettingsStore.getInstance();
    await settingsStore.initialize();
    
    // Configure logging based on settings
    const debugEnabled = settingsStore.get('system.debug.enabled') as boolean;
    const logFullJson = settingsStore.get('system.debug.log_full_json') as boolean;
    LoggerConfig.setGlobalDebug(debugEnabled);
    LoggerConfig.setFullJson(logFullJson);
    
    // Subscribe to debug setting changes
    settingsStore.subscribe('system.debug.enabled', (_, value) => {
        LoggerConfig.setGlobalDebug(value as boolean);
    });
    settingsStore.subscribe('system.debug.log_full_json', (_, value) => {
        LoggerConfig.setFullJson(value as boolean);
    });
    
    logger.log('Starting application...');
    
    try {
        // Initialize settings first and wait for completion
        const settingsStore = SettingsStore.getInstance();
        await settingsStore.initialize();
        const settings = settingsStore.get('') as Settings || defaultSettings;

        // Initialize platform detection with current settings
        await platformManager.initialize(settings);

        // Create XR button if it doesn't exist
        if (!document.getElementById('xr-button')) {
            const xrButton = document.createElement('button');
            xrButton.id = 'xr-button';
            xrButton.className = 'hidden';
            document.body.appendChild(xrButton);
        }

        // Get canvas and scene manager first for XR setup
        const canvas = document.getElementById('main-canvas') as HTMLCanvasElement;
        if (!canvas) {
            throw new Error('Could not find #main-canvas element');
        }
        const sceneManager = SceneManager.getInstance(canvas);

        // Initialize XR components before UI
        const xrSessionManager = XRSessionManager.getInstance(sceneManager);
        // Keep XRInitializer instance to maintain event listeners, but store in window for cleanup
        (window as any).xrInitializer = XRInitializer.getInstance(xrSessionManager);

        // Initialize UI with settings after XR setup
        const { initializeUI } = await import('./ui');
        await initializeUI();
        
        // Initialize main visualization and store globally
        const viz = new GraphVisualization(settings);
        (window as any).visualization = viz;

        // Subscribe to visualization settings changes
        settingsStore.subscribe('visualization', (_, newVisualizationSettings) => {
            if (viz && newVisualizationSettings) {
                // Create a new settings object with just the visualization changes
                const updatedSettings: Settings = {
                    ...settings,
                    visualization: newVisualizationSettings as Settings['visualization']
                };
                viz.handleSettingsUpdate(updatedSettings);
                logger.debug('Visualization settings updated:', newVisualizationSettings);
            }
        });

        // Log successful initialization
        logger.info('Application components initialized successfully', {
            platformType: platformManager.getPlatform(),
            xrSupported: platformManager.isXRSupported(),
            isQuest: platformManager.isQuest()
        });
        
        logger.info('Application initialized successfully');
    } catch (error) {
        logger.error('Failed to initialize application components:', error);
        throw error;
    }
}

init().catch(error => {
    console.error('Failed to initialize application:', error);
});

----
components/settings/ValidationErrorDisplay.ts
import { ValidationError } from '../../types/settings/validation';
import { SettingsStore } from '../../state/SettingsStore';
import { formatSettingName } from '../../types/settings/utils';

export class ValidationErrorDisplay {
    private container: HTMLDivElement;
    private errorList: HTMLUListElement;
    private unsubscribe: (() => void) | null = null;

    constructor(parentElement: HTMLElement) {
        // Create container
        this.container = document.createElement('div');
        this.container.className = 'validation-error-container';
        this.container.style.cssText = `
            display: none;
            position: fixed;
            bottom: 20px;
            right: 20px;
            max-width: 400px;
            background-color: #fee;
            border: 1px solid #faa;
            border-radius: 4px;
            padding: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            z-index: 1000;
            font-family: Arial, sans-serif;
        `;

        // Create header
        const header = document.createElement('div');
        header.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        `;

        const title = document.createElement('h3');
        title.textContent = 'Settings Validation Errors';
        title.style.cssText = `
            margin: 0;
            color: #d32f2f;
            font-size: 16px;
        `;

        const closeButton = document.createElement('button');
        closeButton.innerHTML = '&times;';
        closeButton.style.cssText = `
            background: none;
            border: none;
            color: #666;
            font-size: 20px;
            cursor: pointer;
            padding: 0 4px;
        `;
        closeButton.onclick = () => this.hide();

        header.appendChild(title);
        header.appendChild(closeButton);
        this.container.appendChild(header);

        // Create error list
        this.errorList = document.createElement('ul');
        this.errorList.style.cssText = `
            margin: 0;
            padding-left: 20px;
            color: #d32f2f;
            font-size: 14px;
        `;
        this.container.appendChild(this.errorList);

        // Add to parent
        parentElement.appendChild(this.container);

        // Subscribe to validation errors
        this.subscribeToValidationErrors();
    }

    private subscribeToValidationErrors(): void {
        const settingsStore = SettingsStore.getInstance();
        this.unsubscribe = settingsStore.subscribeToValidationErrors(errors => {
            if (errors.length > 0) {
                this.showErrors(errors);
            } else {
                this.hide();
            }
        });
    }

    private showErrors(errors: ValidationError[]): void {
        // Clear existing errors
        this.errorList.innerHTML = '';

        // Add new errors
        errors.forEach(error => {
            const li = document.createElement('li');
            li.style.marginBottom = '4px';
            
            // Format the error message
            const settingName = formatSettingName(error.path.split('.').pop() || '');
            const formattedPath = error.path.split('.').map(formatSettingName).join(' → ');
            
            li.innerHTML = `
                <strong>${settingName}:</strong> ${error.message}<br>
                <small style="color: #666;">Path: ${formattedPath}</small>
            `;
            
            this.errorList.appendChild(li);
        });

        // Show the container
        this.container.style.display = 'block';

        // Auto-hide after 5 seconds
        setTimeout(() => this.hide(), 5000);
    }

    private hide(): void {
        this.container.style.display = 'none';
    }

    public dispose(): void {
        if (this.unsubscribe) {
            this.unsubscribe();
            this.unsubscribe = null;
        }
        this.container.remove();
    }

    // Helper method to create an instance and attach it to the document body
    public static initialize(): ValidationErrorDisplay {
        return new ValidationErrorDisplay(document.body);
    }
}

// Add CSS to document
const style = document.createElement('style');
style.textContent = `
    .validation-error-container {
        animation: slideIn 0.3s ease-out;
    }

    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    .validation-error-container button:hover {
        color: #000;
    }

    .validation-error-container ul li {
        line-height: 1.4;
    }
`;
document.head.appendChild(style);
----
core/api.ts
import { API_ENDPOINTS } from './constants';

// Helper function to build API URLs
export function buildApiUrl(path: string): string {
    const protocol = window.location.protocol;
    const host = window.location.hostname;
    // Don't append port for production domain
    const base = host === 'www.visionflow.info' 
        ? `${protocol}//${host}`
        : `${protocol}//${host}:4000`;
    return `${base}${path}`; // All paths are already prefixed with /api in constants.ts
}

// Helper function to build settings URL
export function buildSettingsUrl(category: string): string {
    return `${API_ENDPOINTS.SETTINGS_ROOT}/${category}`;
}

// Helper function to build graph URL
export function buildGraphUrl(type: 'data' | 'update' | 'paginated'): string {
    switch (type) {
        case 'paginated':
            return API_ENDPOINTS.GRAPH_PAGINATED;
        case 'update':
            return API_ENDPOINTS.GRAPH_UPDATE;
        default:
            return API_ENDPOINTS.GRAPH_DATA;
    }
}

// Helper function to build files URL
export function buildFilesUrl(path: string): string {
    return `${API_ENDPOINTS.FILES}/${path}`;
}

// Helper function to build WebSocket URL
export function buildWsUrl(): string {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const host = window.location.hostname;
    // Always use port 4000 for WebSocket in development
    const port = process.env.NODE_ENV === 'production' ? '' : ':4000';
    const base = `${protocol}//${host}${port}`;
    const wsPath = '/wss';
    return `${base}${wsPath}`;
}

// Helper function to build visualization settings URL
export function buildVisualizationSettingsUrl(): string {
    return API_ENDPOINTS.VISUALIZATION_SETTINGS;
}

// Helper function to build WebSocket control URL
export function buildWebSocketControlUrl(): string {
    return API_ENDPOINTS.WEBSOCKET_CONTROL;
}

// Helper function to build WebSocket settings URL
export function buildWebSocketSettingsUrl(): string {
    return API_ENDPOINTS.WEBSOCKET_SETTINGS;
}

----
core/constants.ts
/**
 * Application constants
 */

// Environment detection
export const IS_DEVELOPMENT = process.env.NODE_ENV !== 'production';

// API configuration
export const API_BASE = '';  // Base URL is constructed in buildApiUrl

// API paths
export const API_PATHS = {
    SETTINGS: 'settings',
    WEBSOCKET: 'websocket',
    GRAPH: 'graph',
    FILES: 'files'
} as const;

// API endpoints
export const API_ENDPOINTS = {
    // Graph endpoints
    GRAPH_DATA: '/api/graph/data',
    GRAPH_UPDATE: '/api/graph/update',
    GRAPH_PAGINATED: '/api/graph/data/paginated',
    
    // Settings endpoints
    SETTINGS_ROOT: '/api/settings',
    VISUALIZATION_SETTINGS: '/api/settings/visualization',
    WEBSOCKET_SETTINGS: '/api/settings/websocket',
    
    // WebSocket endpoints
    WEBSOCKET_CONTROL: '/api/websocket/control',
    
    // File endpoints
    FILES: '/api/files'
} as const;

export type ApiEndpoints = typeof API_ENDPOINTS[keyof typeof API_ENDPOINTS];

// Settings categories matching server's snake_case
export const SETTINGS_CATEGORIES = {
    // Visualization settings
    NODES: 'nodes',
    EDGES: 'edges',
    PHYSICS: 'physics',
    RENDERING: 'rendering',
    ANIMATIONS: 'animations',
    LABELS: 'labels',
    BLOOM: 'bloom',
    HOLOGRAM: 'hologram',
    XR: 'xr',
    
    // System settings
    NETWORK: 'network',
    WEBSOCKET: 'websocket',
    DEBUG: 'debug',
} as const;

// WebSocket configuration
export const WS_MESSAGE_QUEUE_SIZE = 1000;

// Binary protocol configuration
export const FLOATS_PER_NODE = 6;  // x, y, z, vx, vy, vz
export const VERSION_OFFSET = 0;    // No version header
export const BINARY_CHUNK_SIZE = 1000; // Number of nodes to process in one chunk
export const NODE_POSITION_SIZE = 24;  // 6 floats * 4 bytes (position + velocity)

// Performance configuration
export const THROTTLE_INTERVAL = 16; // ~60fps
export const EDGE_UPDATE_BATCH_INTERVAL = 16; // Batch edge updates at ~60fps

// Visualization constants
export const NODE_SIZE = 0.5;
export const NODE_SEGMENTS = 16;
export const EDGE_RADIUS = 0.25;
export const EDGE_SEGMENTS = 8;

// Font configuration
export const FONT_URL = '/fonts/Roboto-Regular.woff2';

// Colors
export const NODE_COLOR = 0x4CAF50;  // Material Design Green
export const NODE_HIGHLIGHT_COLOR = 0xff4444;  // Material Design Red
export const EDGE_COLOR = 0xE0E0E0;  // Material Design Grey 300
export const BACKGROUND_COLOR = 0x212121;  // Material Design Grey 900
export const LABEL_COLOR = 0xFFFFFF;  // White

// Debug configuration
export const DEBUG = {
    NETWORK_PANEL: {
        MAX_MESSAGES: 50,
        ENABLED: IS_DEVELOPMENT
    }
};

----
core/debugState.ts
import { SettingsStore } from '../state/SettingsStore';

export interface DebugState {
    enabled: boolean;
    logFullJson: boolean;
    enableDataDebug: boolean;
    enableWebsocketDebug: boolean;
    logBinaryHeaders: boolean;
}

class DebugStateManager {
    private static instance: DebugStateManager | null = null;
    private state: DebugState = {
        enabled: false,
        logFullJson: false,
        enableDataDebug: false,
        enableWebsocketDebug: false,
        logBinaryHeaders: false
    };

    private constructor() {}

    public static getInstance(): DebugStateManager {
        if (!DebugStateManager.instance) {
            DebugStateManager.instance = new DebugStateManager();
        }
        return DebugStateManager.instance;
    }

    public async initialize(): Promise<void> {
        const settingsStore = SettingsStore.getInstance();
        await settingsStore.initialize();

        // Load initial debug settings
        this.state = {
            enabled: settingsStore.get('system.debug.enabled') as boolean ?? false,
            logFullJson: settingsStore.get('system.debug.log_full_json') as boolean ?? false,
            enableDataDebug: settingsStore.get('system.debug.enable_data_debug') as boolean ?? false,
            enableWebsocketDebug: settingsStore.get('system.debug.enable_websocket_debug') as boolean ?? false,
            logBinaryHeaders: settingsStore.get('system.debug.log_binary_headers') as boolean ?? false
        };

        // Subscribe to debug setting changes
        settingsStore.subscribe('system.debug.enabled', (_, value) => {
            this.state.enabled = value as boolean;
            this.updateLoggerConfig();
        });

        settingsStore.subscribe('system.debug.log_full_json', (_, value) => {
            this.state.logFullJson = value as boolean;
            this.updateLoggerConfig();
        });

        settingsStore.subscribe('system.debug.enable_data_debug', (_, value) => {
            this.state.enableDataDebug = value as boolean;
        });

        settingsStore.subscribe('system.debug.enable_websocket_debug', (_, value) => {
            this.state.enableWebsocketDebug = value as boolean;
        });

        settingsStore.subscribe('system.debug.log_binary_headers', (_, value) => {
            this.state.logBinaryHeaders = value as boolean;
        });

        this.updateLoggerConfig();
    }

    private updateLoggerConfig(): void {
        const { LoggerConfig } = require('./logger');
        LoggerConfig.setGlobalDebug(this.state.enabled);
        LoggerConfig.setFullJson(this.state.logFullJson);
    }

    public isEnabled(): boolean {
        return this.state.enabled;
    }

    public isWebsocketDebugEnabled(): boolean {
        return this.state.enabled && this.state.enableWebsocketDebug;
    }

    public isDataDebugEnabled(): boolean {
        return this.state.enabled && this.state.enableDataDebug;
    }

    public shouldLogBinaryHeaders(): boolean {
        return this.state.enabled && this.state.logBinaryHeaders;
    }

    public getState(): DebugState {
        return { ...this.state };
    }
}

export const debugState = DebugStateManager.getInstance();
----
core/logger.ts
let debugEnabled = true;
let logFullJson = true;

export interface Logger {
    debug: (...args: any[]) => void;
    log: (...args: any[]) => void;
    info: (...args: any[]) => void;
    warn: (...args: any[]) => void;
    error: (...args: any[]) => void;
}

export function setDebugEnabled(enabled: boolean, fullJson: boolean = false): void {
    debugEnabled = enabled;
    logFullJson = fullJson;
}

export function createLogger(context: string): Logger {
    const prefix = `[${context}]`;
    
    const formatArgs = (args: any[]): any[] => {
        if (logFullJson) {
            return args.map(arg => 
                typeof arg === 'object' ? JSON.stringify(arg, null, 2) : arg
            );
        }
        return args;
    };

    // Add timestamp to prefix
    const getPrefix = () => {
        const now = new Date();
        const timestamp = now.toISOString().split('T')[1].slice(0, -1);
        return `${timestamp} ${prefix}`;
    };
    
    return {
        debug: (...args: any[]): void => {
            if (debugEnabled) {
                console.debug(getPrefix(), ...formatArgs(args));
            }
        },
        log: (...args: any[]): void => {
            console.log(getPrefix(), ...formatArgs(args));
        },
        info: (...args: any[]): void => {
            console.info(getPrefix(), ...formatArgs(args));
        },
        warn: (...args: any[]): void => {
            console.warn(getPrefix(), ...formatArgs(args));
        },
        error: (...args: any[]): void => {
            console.error(getPrefix(), ...formatArgs(args));
        }
    };
}

// Create and export a global logger configuration
export const LoggerConfig = {
    setGlobalDebug(enabled: boolean) {
        debugEnabled = enabled;
        console.log(`[Logger] Debug logging ${enabled ? 'enabled' : 'disabled'}`);
    },
    setFullJson(enabled: boolean) {
        logFullJson = enabled;
    }
};

// Create core logger instance
export const logger = createLogger('core');

----
core/types.ts
// Core types for the application

export interface Vector3 {
  x: number;
  y: number;
  z: number;
}

export interface NodeMetadata {
  name?: string;
  lastModified?: number;
  links?: string[];
  references?: string[];
}

export interface NodeData {
  position: Vector3;
  velocity: Vector3;
  metadata?: NodeMetadata;
}

export interface Node {
  id: string;
  data: {
    position: Vector3;
    velocity: Vector3;
    metadata?: {
      name?: string;
      lastModified?: number;
      links?: string[];
      references?: string[];
    };
  };
  color?: string;
}

export interface Position {
  x: number;
  y: number;
  z: number;
}

export interface Edge {
  source: string;
  target: string;
  id: string;
  sourcePosition?: Position;
  targetPosition?: Position;
}

export interface PaginatedGraphData extends GraphData {
  totalPages: number;
  currentPage: number;
  totalItems: number;
  pageSize: number;
}

export interface GraphData {
  nodes: Node[];
  edges: Edge[];
  metadata?: any;
}

// Platform types
export type Platform = 'desktop' | 'quest' | 'browser';

export interface PlatformCapabilities {
  xrSupported: boolean;
  webglSupported: boolean;
  websocketSupported: boolean;
  webxr: boolean;
  handTracking: boolean;
  planeDetection: boolean;
}

// Settings interfaces in camelCase
export interface AnimationSettings {
  enableMotionBlur: boolean;
  enableNodeAnimations: boolean;
  motionBlurStrength: number;
  selectionWaveEnabled: boolean;
  pulseEnabled: boolean;
  rippleEnabled: boolean;
  edgeAnimationEnabled: boolean;
  flowParticlesEnabled: boolean;
}

export interface ARSettings {
  dragThreshold: number;
  enableHandTracking: boolean;
  enableHaptics: boolean;
  enableLightEstimation: boolean;
  enablePassthroughPortal: boolean;
  enablePlaneDetection: boolean;
  enableSceneUnderstanding: boolean;
  gestureSsmoothing: number;
  handMeshColor: string;
  handMeshEnabled: boolean;
  handMeshOpacity: number;
  handPointSize: number;
  handRayColor: string;
  handRayEnabled: boolean;
  handRayWidth: number;
  hapticIntensity: number;
  passthroughBrightness: number;
  passthroughContrast: number;
  passthroughOpacity: number;
  pinchThreshold: number;
  planeColor: string;
  planeOpacity: number;
  portalEdgeColor: string;
  portalEdgeWidth: number;
  portalSize: number;
  roomScale: boolean;
  rotationThreshold: number;
  showPlaneOverlay: boolean;
  snapToFloor: boolean;
  interactionRadius: number;
}

export interface AudioSettings {
  enableAmbientSounds: boolean;
  enableInteractionSounds: boolean;
  enableSpatialAudio: boolean;
}

export interface BloomSettings {
  edgeBloomStrength: number;
  enabled: boolean;
  environmentBloomStrength: number;
  nodeBloomStrength: number;
  radius: number;
  strength: number;
}

export interface ClientDebugSettings {
  enableDataDebug: boolean;
  enableWebsocketDebug: boolean;
  enabled: boolean;
  logBinaryHeaders: boolean;
  logFullJson: boolean;
}

export interface EdgeSettings {
  arrowSize: number;
  baseWidth: number;
  color: string;
  enableArrows: boolean;
  opacity: number;
  widthRange: [number, number];
}

export interface HologramSettings {
  xrQuality: 'low' | 'medium' | 'high';
  desktopQuality: 'low' | 'medium' | 'high';
  ringCount: number;
  ringColor: string;
  ringOpacity: number;
  ringSizes: number[];
  ringRotationSpeed: number;
  enableBuckminster: boolean;
  buckminsterScale: number;
  buckminsterOpacity: number;
  enableGeodesic: boolean;
  geodesicScale: number;
  geodesicOpacity: number;
  enableTriangleSphere: boolean;
  triangleSphereScale: number;
  triangleSphereOpacity: number;
  globalRotationSpeed: number;
}

export interface LabelSettings {
  desktopFontSize: number;
  enableLabels: boolean;
  textColor: string;
  textOutlineColor: string;
  textOutlineWidth: number;
  textResolution: number;
  textPadding: number;
  billboardMode: 'camera' | 'up';
}

export interface NodeSettings {
  baseColor: string;
  baseSize: number;
  sizeRange: [number, number];
  enableMetadataShape: boolean;
  colorRangeAge: [string, string];
  colorRangeLinks: [string, string];
  metalness: number;
  roughness: number;
  opacity: number;
}

export interface NetworkSettings {
  bindAddress: string;
  domain: string;
  enableHttp2: boolean;
  enableRateLimiting: boolean;
  enableTls: boolean;
  maxRequestSize: number;
  minTlsVersion: string;
  port: number;
  rateLimitRequests: number;
  rateLimitWindow: number;
  tunnelId: string;
}

export interface DefaultSettings {
  apiClientTimeout: number;
  enableMetrics: boolean;
  enableRequestLogging: boolean;
  logFormat: string;
  logLevel: string;
  maxConcurrentRequests: number;
  maxPayloadSize: number;
  maxRetries: number;
  metricsPort: number;
  retryDelay: number;
}

export interface SecuritySettings {
  allowedOrigins: string[];
  auditLogPath: string;
  cookieHttponly: boolean;
  cookieSamesite: string;
  cookieSecure: boolean;
  csrfTokenTimeout: number;
  enableAuditLogging: boolean;
  enableRequestValidation: boolean;
  sessionTimeout: number;
}

export interface ServerDebugSettings {
  enabled: boolean;
  enableDataDebug: boolean;
  enableWebsocketDebug: boolean;
  logBinaryHeaders: boolean;
  logFullJson: boolean;
}

export interface PhysicsSettings {
  attractionStrength: number;
  boundsSize: number;
  collisionRadius: number;
  damping: number;
  enableBounds: boolean;
  enabled: boolean;
  iterations: number;
  maxVelocity: number;
  repulsionStrength: number;
  springStrength: number;
}

export interface RenderingSettings {
  ambientLightIntensity: number;
  backgroundColor: string;
  directionalLightIntensity: number;
  enableAmbientOcclusion: boolean;
  enableAntialiasing: boolean;
  enableShadows: boolean;
  environmentIntensity: number;
}

export interface WebSocketSettings {
  url: string;                   // WebSocket server URL
  heartbeatInterval: number;     // Ping interval in seconds (default: 30)
  heartbeatTimeout: number;      // Connection timeout in seconds (default: 60)
  reconnectAttempts: number;     // Max reconnection attempts (default: 3)
  reconnectDelay: number;        // Delay between reconnects in ms (default: 5000)
  binaryChunkSize: number;       // Size of binary chunks
  compressionEnabled: boolean;   // Enable/disable compression
  compressionThreshold: number;  // Compression threshold
  maxConnections: number;        // Maximum connections
  maxMessageSize: number;        // Maximum message size
  updateRate: number;           // Update rate in Hz
}

export interface Settings {
  animations: AnimationSettings;
  ar: ARSettings;
  audio: AudioSettings;
  bloom: BloomSettings;
  clientDebug: ClientDebugSettings;
  default: DefaultSettings;
  edges: EdgeSettings;
  hologram: HologramSettings;
  labels: LabelSettings;
  network: NetworkSettings;
  nodes: NodeSettings;
  physics: PhysicsSettings;
  rendering: RenderingSettings;
  security: SecuritySettings;
  serverDebug: ServerDebugSettings;
  websocket: WebSocketSettings;
}

export type SettingCategory = keyof Settings;
export type SettingKey<T extends SettingCategory> = keyof Settings[T];
export type SettingValue = string | number | boolean | number[] | string[];

// WebSocket message types
export type MessageType = 
  | 'binaryPositionUpdate'  // Real-time position/velocity data
  | 'ping'                  // Connection health check
  | 'pong'                 // Connection health response
  | 'connectionStatus'     // Connection status updates
  | 'enableBinaryUpdates'; // Enable/disable binary updates

// Base WebSocket message interface
export interface BaseWebSocketMessage {
  type: MessageType;
}

// Binary position update message (server -> client)
export interface BinaryPositionUpdateMessage extends BaseWebSocketMessage {
  type: 'binaryPositionUpdate';
  data: {
    nodes: Array<{
      data: {
        position: Vector3;
        velocity: Vector3;
      }
    }>
  };
}

// Connection health messages
export interface PingMessage extends BaseWebSocketMessage {
  type: 'ping';
  timestamp: number;
}

export interface PongMessage extends BaseWebSocketMessage {
  type: 'pong';
  timestamp: number;
}

export type WebSocketMessage =
  | BinaryPositionUpdateMessage
  | PingMessage
  | PongMessage;

// WebSocket error types
export enum WebSocketErrorType {
  CONNECTION_ERROR = 'CONNECTION_ERROR',       // Failed to establish connection
  CONNECTION_LOST = 'CONNECTION_LOST',         // Connection was lost
  TIMEOUT = 'TIMEOUT',                        // Connection timed out
  BINARY_FORMAT_ERROR = 'BINARY_FORMAT_ERROR', // Invalid binary data format
}

export interface WebSocketError {
  type: WebSocketErrorType;
  message: string;
  code?: number;
  details?: any;
}

// Logger interface
export interface Logger {
  log: (message: string, ...args: any[]) => void;
  error: (message: string, ...args: any[]) => void;
  warn: (message: string, ...args: any[]) => void;
  debug: (message: string, ...args: any[]) => void;
  info: (message: string, ...args: any[]) => void;
}

// Helper functions
interface RawNode {
  id: string;
  data: {
    position: Vector3;
    metadata?: NodeMetadata;
  };
  color?: string;
}

interface RawEdge {
  source: string;
  target: string;
  id?: string;
}

interface RawGraphData {
  nodes: RawNode[];
  edges: RawEdge[];
  metadata?: any;
  totalPages?: number;
  currentPage?: number;
  totalItems?: number;
  pageSize?: number;
}

export function transformGraphData(data: RawGraphData): GraphData {
  const nodes = data.nodes.map((node: RawNode) => transformNodeData(node));
  const nodePositions = new Map(nodes.map((node: Node) => [
    node.id,
    node.data.position
  ]));

  const edges = data.edges.map((edge: any) => ({
    ...edge,
    sourcePosition: nodePositions.get(edge.source),
    targetPosition: nodePositions.get(edge.target)
  }));

  return {
    nodes,
    edges,
    metadata: data.metadata
  };
}

export function transformNodeData(node: any): Node {
  return {
    id: node.id,
    data: {
      position: node.data.position,
      velocity: node.data.velocity || { x: 0, y: 0, z: 0 }, // Add default velocity
      metadata: node.data.metadata
    },
    color: node.color
  };
}

----
core/utils.ts
/**
 * Core utilities for the LogseqXR visualization system
 */

import { Vector3 } from './types';
import { THROTTLE_INTERVAL } from './constants';

// Debug logging utility
export interface Logger {
  log: (message: string, ...args: any[]) => void;
  error: (message: string, ...args: any[]) => void;
  warn: (message: string, ...args: any[]) => void;
  debug: (message: string, ...args: any[]) => void;
  info: (message: string, ...args: any[]) => void;
}

export function createLogger(namespace: string): Logger {
  return {
    log: (message: string, ...args: any[]) => console.log(`[${namespace}] ${message}`, ...args),
    error: (message: string, ...args: any[]) => console.error(`[${namespace}] ${message}`, ...args),
    warn: (message: string, ...args: any[]) => console.warn(`[${namespace}] ${message}`, ...args),
    debug: (message: string, ...args: any[]) => console.debug(`[${namespace}] ${message}`, ...args),
    info: (message: string, ...args: any[]) => console.info(`[${namespace}] ${message}`, ...args)
  };
}

// Case conversion utilities
export const camelToSnakeCase = (str: string): string => {
  return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
};

export const snakeToCamelCase = (str: string): string => {
  return str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
};

export const convertObjectKeysToSnakeCase = (obj: any): any => {
  if (Array.isArray(obj)) {
    return obj.map(item => convertObjectKeysToSnakeCase(item));
  }
  
  if (obj !== null && typeof obj === 'object') {
    return Object.keys(obj).reduce((acc, key) => {
      const snakeKey = camelToSnakeCase(key);
      acc[snakeKey] = convertObjectKeysToSnakeCase(obj[key]);
      return acc;
    }, {} as any);
  }
  
  return obj;
};

export const convertObjectKeysToCamelCase = (obj: any): any => {
  if (Array.isArray(obj)) {
    return obj.map(item => convertObjectKeysToCamelCase(item));
  }
  
  if (obj !== null && typeof obj === 'object') {
    return Object.keys(obj).reduce((acc, key) => {
      const camelKey = snakeToCamelCase(key);
      acc[camelKey] = convertObjectKeysToCamelCase(obj[key]);
      return acc;
    }, {} as any);
  }
  
  return obj;
};

// Update throttler for performance optimization
export class UpdateThrottler {
  private lastUpdate: number = 0;
  private throttleInterval: number;

  constructor(throttleInterval: number = THROTTLE_INTERVAL) {
    this.throttleInterval = throttleInterval;
  }

  shouldUpdate(): boolean {
    const now = performance.now();
    if (now - this.lastUpdate >= this.throttleInterval) {
      this.lastUpdate = now;
      return true;
    }
    return false;
  }

  reset(): void {
    this.lastUpdate = 0;
  }
}

// Vector operations
export const vectorOps = {
  add: (a: Vector3, b: Vector3): Vector3 => ({
    x: a.x + b.x,
    y: a.y + b.y,
    z: a.z + b.z
  }),

  subtract: (a: Vector3, b: Vector3): Vector3 => ({
    x: a.x - b.x,
    y: a.y - b.y,
    z: a.z - b.z
  }),

  multiply: (v: Vector3, scalar: number): Vector3 => ({
    x: v.x * scalar,
    y: v.y * scalar,
    z: v.z * scalar
  }),

  divide: (v: Vector3, scalar: number): Vector3 => ({
    x: v.x / scalar,
    y: v.y / scalar,
    z: v.z / scalar
  }),

  length: (v: Vector3): number => 
    Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z),

  normalize: (v: Vector3): Vector3 => {
    const len = vectorOps.length(v);
    return len > 0 ? vectorOps.divide(v, len) : { x: 0, y: 0, z: 0 };
  },

  distance: (a: Vector3, b: Vector3): number => 
    vectorOps.length(vectorOps.subtract(a, b)),

  // Convert position array to Vector3
  fromArray: (arr: number[]): Vector3 => ({
    x: arr[0] || 0,
    y: arr[1] || 0,
    z: arr[2] || 0
  })
};

// Scale utilities
export const scaleOps = {
  // Normalize a value between min and max
  normalize: (value: number, min: number, max: number): number => {
    return Math.min(max, Math.max(min, value));
  },

  // Map a value from one range to another
  mapRange: (value: number, inMin: number, inMax: number, outMin: number, outMax: number): number => {
    // First normalize to 0-1
    const normalized = (value - inMin) / (inMax - inMin);
    // Then map to output range
    return outMin + normalized * (outMax - outMin);
  },

  // Scale node size from server range to visualization range
  normalizeNodeSize: (size: number, serverMin: number = 20, serverMax: number = 30, visMin: number = 0.15, visMax: number = 0.4): number => {
    return scaleOps.mapRange(size, serverMin, serverMax, visMin, visMax);
  }
};

// Data validation utilities
export const validateGraphData = (data: any): boolean => {
  if (!data || typeof data !== 'object') return false;
  if (!Array.isArray(data.nodes) || !Array.isArray(data.edges)) return false;
  
  // Validate nodes
  for (const node of data.nodes) {
    if (!node.id) return false;
    // Allow position to be either array or Vector3
    if (node.position) {
      if (Array.isArray(node.position)) {
        if (node.position.length !== 3 || 
            typeof node.position[0] !== 'number' ||
            typeof node.position[1] !== 'number' ||
            typeof node.position[2] !== 'number') {
          return false;
        }
      } else if (typeof node.position === 'object') {
        if (typeof node.position.x !== 'number' ||
            typeof node.position.y !== 'number' ||
            typeof node.position.z !== 'number') {
          return false;
        }
      } else {
        return false;
      }
    }
  }
  
  // Validate edges
  for (const edge of data.edges) {
    if (!edge.source || !edge.target) return false;
  }
  
  return true;
};

// Binary data helpers
export const binaryToFloat32Array = (buffer: ArrayBuffer): Float32Array => {
  return new Float32Array(buffer);
};

export const float32ArrayToPositions = (array: Float32Array): Vector3[] => {
  const positions: Vector3[] = [];
  for (let i = 0; i < array.length; i += 3) {
    positions.push({
      x: array[i],
      y: array[i + 1],
      z: array[i + 2]
    });
  }
  return positions;
};

// Error handling utility
export class VisualizationError extends Error {
  constructor(message: string, public code: string) {
    super(message);
    this.name = 'VisualizationError';
  }
}

// Performance monitoring
export class PerformanceMonitor {
  private frames: number = 0;
  private lastTime: number = performance.now();
  private fps: number = 0;

  update(): void {
    this.frames++;
    const now = performance.now();
    const delta = now - this.lastTime;

    if (delta >= 1000) {
      this.fps = (this.frames * 1000) / delta;
      this.frames = 0;
      this.lastTime = now;
    }
  }

  getFPS(): number {
    return Math.round(this.fps);
  }
}

----
core/physicsConstants.ts
// Physics parameter ranges and defaults based on GPU-accelerated implementations
export const PHYSICS_CONSTANTS = {
    // Attraction force (cohesion between nodes)
    ATTRACTION: {
        MIN: 0.001,
        MAX: 1.0,
        DEFAULT: 0.015,  // Proven stable in Rust backend
        RECOMMENDED_RANGE: {
            MIN: 0.01,
            MAX: 0.05
        }
    },

    // Repulsion force (separation between nodes)
    REPULSION: {
        MIN: 1.0,
        MAX: 10000.0,
        DEFAULT: 1500.0,  // Proven stable in Rust backend
        RECOMMENDED_RANGE: {
            MIN: 1000.0,
            MAX: 2000.0
        }
    },

    // Spring force (edge elasticity)
    SPRING: {
        MIN: 0.001,
        MAX: 1.0,
        DEFAULT: 0.018,  // Proven stable in Rust backend
        RECOMMENDED_RANGE: {
            MIN: 0.01,
            MAX: 0.05
        }
    },

    // Damping (velocity decay)
    DAMPING: {
        MIN: 0.5,
        MAX: 0.95,
        DEFAULT: 0.88,  // Proven stable in Rust backend
        RECOMMENDED_RANGE: {
            MIN: 0.85,
            MAX: 0.92
        }
    },

    // Simulation iterations
    ITERATIONS: {
        MIN: 1,
        MAX: 1000,
        DEFAULT: 500,  // Proven stable in Rust backend
        RECOMMENDED_RANGE: {
            MIN: 200,
            MAX: 600
        }
    },

    // Maximum velocity
    MAX_VELOCITY: {
        MIN: 0.1,
        MAX: 5.0,
        DEFAULT: 2.5,  // Proven stable in Rust backend
        RECOMMENDED_RANGE: {
            MIN: 1.0,
            MAX: 3.0
        }
    },

    // Additional physics parameters
    COLLISION_RADIUS: {
        MIN: 0.1,
        MAX: 1.0,
        DEFAULT: 0.25,
        RECOMMENDED_RANGE: {
            MIN: 0.2,
            MAX: 0.4
        }
    },

    BOUNDS_SIZE: {
        MIN: 5.0,
        MAX: 50.0,
        DEFAULT: 12.0,
        RECOMMENDED_RANGE: {
            MIN: 10.0,
            MAX: 15.0
        }
    }
};

// Helper types for physics parameters
export type PhysicsParameter = keyof typeof PHYSICS_CONSTANTS;
export type PhysicsRange = {
    MIN: number;
    MAX: number;
    DEFAULT: number;
    RECOMMENDED_RANGE: {
        MIN: number;
        MAX: number;
    };
};

// Helper functions for physics parameters
export const isWithinPhysicsRange = (param: PhysicsParameter, value: number): boolean => {
    const range = PHYSICS_CONSTANTS[param];
    return value >= range.MIN && value <= range.MAX;
};

export const isWithinRecommendedRange = (param: PhysicsParameter, value: number): boolean => {
    const range = PHYSICS_CONSTANTS[param].RECOMMENDED_RANGE;
    return value >= range.MIN && value <= range.MAX;
};

export const getPhysicsRange = (param: PhysicsParameter): PhysicsRange => {
    return PHYSICS_CONSTANTS[param];
};

export const getDefaultPhysicsValue = (param: PhysicsParameter): number => {
    return PHYSICS_CONSTANTS[param].DEFAULT;
};
----
platform/platformManager.ts
import { Platform, PlatformCapabilities } from '../core/types';
import { createLogger } from '../core/utils';
import { Settings } from '../types/settings';
import { XRSessionMode } from '../types/xr';

const logger = createLogger('PlatformManager');

declare global {
  interface Navigator {
    xr?: XRSystem;
  }
}

class BrowserEventEmitter {
  private listeners: { [event: string]: Function[] } = {};

  on(event: string, listener: Function): void {
    if (!this.listeners[event]) {
      this.listeners[event] = [];
    }
    this.listeners[event].push(listener);
  }

  emit(event: string, ...args: any[]): void {
    const eventListeners = this.listeners[event];
    if (eventListeners) {
      eventListeners.forEach(listener => listener(...args));
    }
  }

  removeAllListeners(): void {
    this.listeners = {};
  }
}

export class PlatformManager extends BrowserEventEmitter {
  private static instance: PlatformManager | null = null;
  private platform: Platform;
  private capabilities: PlatformCapabilities;
  private initialized: boolean = false;
  private _isXRMode: boolean = false;

  private constructor() {
    super();
    this.platform = 'desktop';
    this.capabilities = {
      xrSupported: false,
      webglSupported: false,
      websocketSupported: false,
      webxr: false,
      handTracking: false,
      planeDetection: false
    };
  }

  static getInstance(): PlatformManager {
    if (!PlatformManager.instance) {
      PlatformManager.instance = new PlatformManager();
    }
    return PlatformManager.instance;
  }

  async initialize(settings: Settings): Promise<void> {
    if (this.initialized) {
      return;
    }

    this.detectPlatform();
    await this.detectCapabilities();
    
    // Auto-enable XR mode for Quest devices unless explicitly disabled in settings
    if (this.isQuest()) {
      this._isXRMode = settings.xr?.mode !== 'inline';
      if (this._isXRMode) {
        this.capabilities.xrSupported = await this.checkXRSupport('immersive-ar');
      }
    }
    // For other platforms, initialize based on settings
    else if (settings.xr?.mode) {
      this._isXRMode = true;
      this.capabilities.xrSupported = await this.checkXRSupport(
        settings.xr?.mode as XRSessionMode
      );
    }
    
    this.initialized = true;
    logger.log('Platform manager initialized:', {
      platform: this.platform,
      isXRMode: this._isXRMode,
      capabilities: this.capabilities
    });
  }

  private detectPlatform(): void {
    // Try modern User-Agent Client Hints API first
    if ('userAgentData' in navigator) {
      const brands = (navigator as any).userAgentData.brands;
      const isOculusDevice = brands.some((b: any) =>
        /oculus|meta|quest/i.test(b.brand)
      );
      if (isOculusDevice) {
        this.platform = 'quest';
        logger.log('Quest platform detected via userAgentData');
        return;
      }
    }

    // Fallback to traditional user agent detection
    const userAgent = navigator.userAgent.toLowerCase();
    const isQuest = userAgent.includes('quest') ||
                    userAgent.includes('oculus') ||
                    userAgent.includes('oculusbrowser') ||
                    userAgent.includes('meta');
    
    if (isQuest) {
      this.platform = 'quest';
      logger.log('Quest platform detected via userAgent');
    } else if (userAgent.includes('chrome') || userAgent.includes('firefox') || userAgent.includes('safari')) {
      this.platform = 'browser';
    } else {
      this.platform = 'desktop';
    }
  }

  private async detectCapabilities(): Promise<void> {
    // WebXR support
    if ('xr' in navigator && navigator.xr) {
      try {
        // For Quest devices, prioritize checking immersive-ar support
        if (this.isQuest()) {
          this.capabilities.xrSupported = await navigator.xr.isSessionSupported('immersive-ar');
        } else {
          // For other platforms, check both VR and AR
          this.capabilities.xrSupported = 
            await navigator.xr.isSessionSupported('immersive-ar') ||
            await navigator.xr.isSessionSupported('immersive-vr');
        }
        
        this.capabilities.webxr = this.capabilities.xrSupported;
        this.capabilities.handTracking = this.capabilities.xrSupported;
        this.capabilities.planeDetection = this.capabilities.xrSupported;
      } catch (error) {
        logger.warn('WebXR not supported:', error);
        this.capabilities.xrSupported = false;
        this.capabilities.webxr = false;
        this.capabilities.handTracking = false;
        this.capabilities.planeDetection = false;
      }
    }

    // WebGL support
    try {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');
      this.capabilities.webglSupported = !!gl;
    } catch (error) {
      logger.warn('WebGL not supported:', error);
      this.capabilities.webglSupported = false;
    }

    // WebSocket support
    this.capabilities.websocketSupported = 'WebSocket' in window;

    logger.log('Platform capabilities detected:', this.capabilities);
  }

  getPlatform(): Platform {
    return this.platform;
  }

  getCapabilities(): PlatformCapabilities {
    return { ...this.capabilities };
  }

  isDesktop(): boolean {
    return this.platform === 'desktop';
  }

  isQuest(): boolean {
    return this.platform === 'quest';
  }

  isBrowser(): boolean {
    return this.platform === 'browser';
  }

  isXRSupported(): boolean {
    return this.capabilities.xrSupported;
  }

  isWebGLSupported(): boolean {
    return this.capabilities.webglSupported;
  }

  isWebSocketSupported(): boolean {
    return this.capabilities.websocketSupported;
  }

  async requestXRSession(mode: XRSessionMode = 'immersive-ar'): Promise<XRSession | null> {
    if (!this.capabilities.xrSupported || !('xr' in navigator) || !navigator.xr) {
      logger.warn('WebXR not supported');
      return null;
    }

    try {
      const requiredFeatures: string[] = ['local-floor'];
      const optionalFeatures: string[] = ['hand-tracking'];

      // Add mode-specific features
      if (mode === 'immersive-ar') {
        requiredFeatures.push('hit-test');
        optionalFeatures.push('plane-detection');
      } else if (mode === 'immersive-vr') {
        optionalFeatures.push('bounded-floor');
      }

      const features: XRSessionInit = {
        requiredFeatures,
        optionalFeatures
      };

      const session = await navigator.xr.requestSession(mode, features);

      session.addEventListener('end', () => {
        logger.log('XR session ended');
        this.emit('xrsessionend');
      });

      logger.log(`XR session started in ${mode} mode`);
      return session;
    } catch (error) {
      logger.error('Failed to start XR session:', error);
      return null;
    }
  }

  async checkXRSupport(mode: XRSessionMode = 'immersive-ar'): Promise<boolean> {
    if ('xr' in navigator && navigator.xr) {
      try {
        const supported = await navigator.xr.isSessionSupported(mode);
        if (supported) {
          this.capabilities.webxr = true;
          this.capabilities.handTracking = true;
          this.capabilities.planeDetection = mode === 'immersive-ar';
          this.emit('xrdevicechange', true);
          logger.log('WebXR supported for mode:', mode);
          return true;
        }
      } catch (error) {
        logger.warn('WebXR check failed:', error);
      }
    }
    this.capabilities.webxr = false;
    this.capabilities.handTracking = false;
    this.capabilities.planeDetection = false;
    this.emit('xrdevicechange', false);
    return false;
  }

  dispose(): void {
    this.removeAllListeners();
    this.initialized = false;
    PlatformManager.instance = null;
  }

  get isXRMode(): boolean {
    return this._isXRMode;
  }

  setXRMode(enabled: boolean): void {
    this._isXRMode = enabled;
    this.emit('xrmodechange', enabled);
  }
}

export const platformManager = PlatformManager.getInstance();

----
public/fonts/Roboto-Regular.woff2
wOF2     =     t  =                       dd^`  T	<
|{
 6$ t I3%؋8&4Z|t 8D$uNEPEAk=x9Xz`IR#F+B`}RP|EZ\W[CQBmcm?FgQ3шpL2ٽ[̮!+@U^~ޣ D?jUcUl6{ mCD]htջQ8@PLc

+ZD2K:4{g:~  v  < H^R'8?;uyVW8="FÓ*	@EĴc= Iby8$a){ԶKiIW&Ӕ~}1wM{4!{FH5#Kt5wve; 'NJ	'(%;?DMCq,<=?f _VbA(37v+uYCb
w8AF3n-'U%2؟oٟl"^bj aoF!`
Aj'މ:Zu.[݂pGW:U%Ejq	:IC	SCsJe6Dқ<UM,
&hz} y|9
DᛯjnB$T¬׵?/Q=BC_f#:Bo@]T(vF+d" RRR!~AX>!`p¢,08 9Ό/茓
rQ Qpg\koC3Yyt'd9>#|3Ƹ?֌#$i
g5z֏秲S{3ɲSpS2бw6 Ӣf]﵋F]&^fM%A}؊)ZLUX.&qOq?$nV_[3hQ詎ְ$ڥcEv0CQ4a=jwn'&Vwz'
fxdjqv:ꡔVVF7:HZl*Тtj"O~ۿGJa1F~۷--J%MZ߱}:!%cV1&9עV5hUp}
ѾtS߼w?<=VEk-xƻ1xP@F'O!#LXdÖ{pƓ	&.XX
$4xǞhסSmq&G|O_ClNX\p@Ĉ/~q6A7^SsNjQ#-vV"qwq
a#hoa|'|k/}w0ܯ2"n<0BCPAzǥ
x>CEMTqXUX+SR٘xʀJ)X	2~8A/WѬdq9G
 !4m1I7?ۗν<	o8&0y8/JYc"#>3%ahv|8C%. }pha '|Ɨsи}DK*SY\S%P8'K[J2*f
"D ^ bt6220/:1F0cƁ+ܩIHDJC
Zn;&YxP?%GFN&M<<2db	,Yaéĉg\ʕ#[`
wTxD!PB`!(DDED%
Kh41b(RF45iEMm馛[< CO'g yFb$#|_h~KOdLLW[1Pec`R^rT2Sbt "O7)Q@yAQU)@)`j"[lq11vFVc4F IDfXa9O܉gfCԜ[#9 =371G~$v:H6T>@v"A!nٝfso;}|7
߻/ڊ<H(FІZ{&n2I-	-f[37D'"r?a3m -&J
Uj+jcHD-U<p#l&c:AVvf19g-V9]p%!F$Y0Y`0lTY"_}ܵ
 EHHQ)3{{"_aLb  :c<ˢ	eʹ|
,`}A 3䱪 \@nޤRj1)6jWB$T`~t1Ըd*2SzKw]lüea[=l2t̏k]9]LU)a?OU(>Ai#mÕ'ҥ@NϡՃP㐮ks7;g'~5zoZ2F)+Bbb,.HgsXl.إꠧ ;k1{P16C2E0-@b ٧BL÷d^<Pfdbp3󢑔ܣ/&<#tXTkD9Fίث
Vz倶(<Cl3_5JH6	>U)9NIac_XQO}h	~o~༰Vɕ[JށfK.rf0
^xy0Gռ	KFߛIf <ex2hI;iҰ_D^275 >(?
҅*G78BCXL8y	cA+ESs5Z!C
>!/bx3ڔi{nx[㉭!dS P@Y<˂U{֍Ug'YjbIЙ7rA2UZM%dvxȢ&Wp6պF|J
!:	Rhz oudQʫ#XXxBXa}+l^܊SH0Y	0	fTpV7O'1My$"B5SǛ0PVŜb]$WR
PkE	Lܰ9 E!CK3X;RqtH45Ik`wiLTo7E2%{yU~nVb}8^RNY+;3SٴF|T=JHEIBw	ˡPm;7jMIڐF_sM
U[t
'\y٨叶skHȡ^][!4p̬:"O[+5h %C*1b]|e{*ȹu.ٞHʁ:!/ya]
ܤkg1g=mCл0=SgMTHXV 9?D/[|!GϦ19@od_OW,
:pax^m@MKc+CD%(U+\i!7X
\r>}
Ҷv48?)
,yk
=V|0>sjgVUeȒReT\VHJ+bӯP37L&Yp<
ٮ7ݦ~L-z2=p+q23"s~pʩ
EV8?ެCAۧ=J8M8s+x*"(D(*:)"W}`;k|SUW253ttJ!5Cgu2R˖yD[ǵʷR8'Ul}ݬdPAڇt!':@eAFZI%ϙ}V4ITz_CQNͨT۷3'G˲]PV<>f[ˍ|: Qp	|Hnb^^شm	!4 ź*quk<BI=vK,<-v)y-&S^L⮙LzR<fR]%!V6u\4]
N}&'Y䅓Γ08ko^i_K5K\#)#seC\xL2joآ!IXc'm,*3(9ĮdGsТOt<u6$U(d轢{_'
~/`eKxwGe{?ޜB隑~
GnUkY[
:6xx|O< 녭RoĆNd 
p(!1-Jڲ{'3)MWpHBmg|SwF|qSi;[܆TNa%(˅Iy\:ڝYwEhlƥQVFiyU:RG(fQ!,E 9ۦO_lJ9?d#?JmSQCw~,J$iF..;벍Dm|dqs(MʘZWѥ)^׀
&uVEoZ5F
фS$xPE-~n*+\yd^C/:Wꋕ.Xv`fH$ǉPYrQ{hӐ&y<K"ޓ6Z;kQbyw.sjI
xWg$YW//W/x

Wӈ}$4QB½@@蛄tH53E5{^\Ã=J|Ҝ<JLj'7n/.~^$gw-Ǭ, <ESd/DabLޝ(=q opGU32qrꑌpFל]g[I,'zw؟pΞFtVt<?meE؟X%3V?\8B>&m5_-d7!Ӓ#ogZ(aBh(PLBy*t6gEgbtB+flaTpL0#-du	0sp%8dA*<'41/ހhFj!Ovs+1eҚ!-f7@6aIQ-dLBEץ'~x[
.FnVg62-Y6(;GLRq{OK:1|e,PUwǚFWƳ߃W]CjFc:'Tjx .Gs<u5B\coօTOm$ϳll3oWp_~DddYf*MG
կ0zbW`[ͫ4On37@W_yYk\#Z+qsJorӝȼX|EM>>Ϟֻ\ͦ?T$`@l$ p1G7_<M
(̘	>ˎ%չ% BN9ǁPqumO9G/۬of_z?u0v2K:K̬$ce^.FbgGNVxq/qiq^!b;=NJ+ 
e'dHbBt#[1YCw@z0>Bʟ%XLi \""''.*#Ƶ~씠=\I䋹sDU9ܗk3x\rSKٕ1O~~^l[6R)%JRS":
7

k
(t˸FTKTSD<+GLODhDBpO`xY@UiߐrD}=KoHY	 +,~&8z/k4>㺭51]),rj3=ǿ#dV<zot_Fn+L릟8!ݟݏݎ&SvnڑA|侦WAhRf-nw:1 tɱ۱5/S&[NTyUJ(x:sQo1"cED:3kLv׶I1Aȥf
p/z^Ee&A
v񜝯ʲ_
.W]"6@ԵD{	l vHs3
F-BBP:Y	ɰP9~~~cLiP!(}
?
ک 1r<8qrc>pLb		ȱh|,,=6=$5	a湩Rj玪KϭW--g=O>Zٕ06c-%ꠅb[# Se!/^bϝ9ih~wvo<LCu!N-raPV8yW@DF0٬?bbmԡM\}sW-r@6to]po2=4L,FÂ`dlxDECE]&)n/@X F} wF$jojǝc_	kUj*\Q?H^m-PʉES2""8NsK`nes(H-X~8|=/_tKAƀrH#@V`z(S1ZP']f2eyP`d\1n'ơ6ۮhΞkٽtS;K` ^gXdL`vIrMZc>d\?VK;ͺr	|?4[*KmxKw
<=\7`Xwbf.&wr{7OFns _?
)	-]o#t$2SjldJy˗rvV-ŏһe[owtOrm
]sc9%OV!ۢ[my|F|+L$/qqŻ.	%rwdKrn=SUknJ@2yڕ3ǚB<r}e,x94Y"i)p=^uIoʮCTQj=-YcQǿ+ .pqr#Qs
mNL p;T}LM>Ȟ~߰JjBrS/,-`%q_%[
Y|GM[-[y͏L훏OGc^_b4 xz
Xq(mˮY7e4=E^wT"{A^vZvKka}e=ZlY_
`	zR=U.XF;i5:e
t
A1fFFB:m(gwXYF?Mwp9$5My+6{&(KްfX氺q?vbA{5`e2Qs3I~_?AHoB_di7f$᧶O>!Rbor`rOU241}twS;{݊2eC	!ݍd`ht\%Ar<:ڿX6A2֋?=ܻGAm;ayrKť6a>ځAǸO1XgObu~(Y`(^NH=nYɭK2/vI"k-
Xui,q6PCX0 _>&J-F׺FSB3+nyT53;73\Y/!g斐(STTY9G
\))ȵɤՔ*:f2f #Dވ\,3n2N567MmM\zSrJ-z-fV9r27˅g繁X L^wk4ҫ*j oy~Jk""Lls۶EiϷ$lapS,I{5nGd8{4#:7Z^K]dV׶5J}<}RbP͏'|i]lh]noH	jKHA[̰9=ibkeX3:13%8؎PM5QQ=ܖ]Y/n|
0UOdeI?dCj-5Rm5~v(ld') ..53HpgF@ZP|"RK<RVRRVB
	%
[jhZT`6RD9L,Ϥ4	}202orEG(6Ԡ |!aa6EDN03my0kԼjTXUb#ՔN225RCg=:tIXY3	؝R7S~̇i-3pg>)tgǱqp%W[wz*$JiD0[[绐m@'hHhqz/dh3lBOEFS=Yڽ{=;h1mm=>(<<waT@7mͅǝPo[ؚ$$ۘ3.pSA	a
OGCYz~Ͽdekp_
#㡗ٙ&aʈ>IO?`)뮴p!JswcKvT7--c":Z8]7<Wɹl{%L͞$Gy߻yrбJ$~tPpеp	]}(|scT|KAE)o@GP/rlY+?^BVv	GD;o75wW}Nc4j74bff*D~RQ֣_^V.<{J$ܫn9>Nt1\u{:WCC:\{/޼,t%"Fz_3/M
ԧ(
q(K
̗
NED:vdFc'.mg&\t`%C">صSP/9J"dLЩBiDKl-OoEa޽8@Idҋ?oy5LMHaGDlZ= 6ks67Iy%pJy$F<exkJWr|{r`rAu'[lk=~:gQRxQKRn?ysnJ+	1"
`@|st<(B<p\,V#"`uKo5n[VkvAx˸FDxGFbYcZKXT *䯏&_x2}"x
YiϡkCNvuuhsZldr 2yh)B2!M,$F{|2{Ln7,'|x-n>_Mn`k )P{ᱧd].N ^

Y>q긢5dE(gɢ]\8{jaisarIgAgM'hxP`
e_/-V=8X77Tv9;UbBu@k jjx	Bל3z8&Aa$BPR'`Q,oaYJ+IA2
`ƺV0V4<V2!(1ZE7+-os/+VqFIO&ҾŦ{Lc		xMl
OCZ,QM&ǧqz0
eKtK
;#Ϣy}]m~PB~^zR=-3T&A'S|j;jkY:XX{CP~q(T\G92DqVY`󽩭mٰMMb¯{^ٺpe^p5`hVVnE c>[D;¸ψ;#XűW$4C
H&໼eZozrSZi`U-[P?t1,o4 !@dc ml[AA
-q.O)tLE ml `]LWƳ`^ȇ}H,:w_v[bև]hsQx<'ټI[<q^?X.7y]7٦M>mQ-9nII6F؇`'ֹIoKiD Ban\wo{rbJ诤P`yɰ~y%d3v\\=ՃO<8v7 	"]=#b Z$YtWAE$TXihb/5pR>weO_ڿGv3Do
=&'Z w;=UOUZ*KsrJ {>}i.C)J!1:E3 Z?&=,ŅD{^%DtK(2(`gih=|w
JaȝGCTʾqIòvFG7ٴEWIh$O>罖 7`.~ 5g^h_;~)A)ĥwlSj@#`lv[EwLΜ7cڰRjJ,zdp_([bދv6LӲVڢ.A#y%?`,'@:0uNBp(VLW￳.H yx&n	FE~}Y)7nӉGhZ'	cI)ae:tEƶ|Ff5xИ&qKQlVd(%rb@$V?TUaMݮGe%
az-W+M֌q"XaƿX@éKf>ެ4t:ێTͣg;v
Mx^[\f:o/KԥCU3jY5io~aVQ4 ԤbR<fxIɔ9S>D"x*yzETa| OI,]Ԁ0\6j"y)=XCi~2=%zڌ<:XSkZcrsD#0]y-5g݀z4Nظ1-za\ݨ՞}Qt4[ha2AFOdȋřa@Gwub`pƴX݃InKaXg92cQr,g&wjkȟn0B"AA#k0s/S
挷	rdNUexLenMpv_ä=;׭<7zxkxovwi}fB8"	%IZ*+id	ҵ
T!zB`"9d7Xr)g1ۄwM6ğm1ari}x~׊z2t[0z"<Ƴul< [  WO_շ:K>/q/U]-\G]!F_{0
>W28W+JJRf}1udXʢ`/r35@AhseHGm\nXhL}4dSZȡL V`%9",<i%³yJ \vQ%DRp`FWɹCRE0;YF@wќÑP^[kJ  YJ),۱6L$4fR$%W>eGN2tJ{i틭3e&/֊]:CH|g墶5D,hrV%͕Ӧ@*	229	:x#a3[G5[u v1#濑T֚XLB~[pS:<p?no#bݙcbqN{6D#FT|Hl,+Q@ďSMkI:A۠HCuCuH'bRV	^
CM#gn8V9ʓ¿uoկNTI3*dQa˓X=#ëi8CD |D1lQ3TIo82D
%rJkFbO#N|.VFqR_X;9׾U cƛTb],E?P;ѧ=BM&kF#eg"`9abePȣ\VMnrA@+uwe޺=q3:HH1<uo
I_Svkel
SP1,K-W=7Psx +9\
M2>YAG'1JLcrKm8Pi\v;ȝfoBs7]=G`udI@Idwgs*se-nZxcdiE)tfȤ\q()@By34גIaz[EYHTTVД+w`l0tA=wrֆM/CѓSH(рT-<m[IʲӴ"}E4eRB@H2sIdflcؒ
3;W}VtIzydwjh<޼,ۥ$D3Čіiډͳ~89|̥G }>ӆ5S >Myߙ=ۓ龼[?Е/B:\9ڠvYޜ6At2ûh>V%/lX_M@xng҅ی6U#׵3wOE}Z2L0;YVBXv+sAP (xw{2PWQW=`L^Ujݚ,IɜYL:o|p\·3yo@Bu7y1bviJ12n P>-u0;(BG=aqȊXlb{ΥMs!!*]Y]Vɰb3Q%,]u"_bȶȩؐh!PRYz')O8:	+9<nSDeXii=`o/<јRmɛI-}?.[NO5(ovRƶɘC=EXRBS_-YU U ma,kJ;x]]q)4?7cɍ2(ںe>-ɟ=Gwaa/a^.7vz89K_3/8M0̪siGf41z^l
MeOުu%ĩƝ+VaeA(lVj;t2+hKmy{%4O}']MvdY9wiej/xƂY}([G)ҚD(&}|`ʬf:.Ÿ>N(&Rí/c r@g,M}<KXCAV4Ișp34/Iz"'{ZX ](Mɹp"0@
QLp%رvZn#V=1p@+]YE}Dvi3P-z
і-.4!m=đben}0>C?i{
Rg;L;}\vgɱڵOVqA;'l#٦xWepg?B+yzm'`/ό{z) վr`XNT^Ӓc;HRS:e)qE:蕞8Xe3z0S4êe<Ɗ05FNHBAqme$do^'0Z`YK&#5Z,m<[-G=1?);Cd1{To=޼L1Z
sjOdت5h*i)U}	wg#՝Xd=o]<n^tbD4^].+;e2kRʴ4^ohO%G<%r_;:
	е(jd!\hYRjx+VKKkqKs"_<.Ё
}	hzL~o{4V(?Ge֗n8,\#噦,JǇv
l/"o"t-=g@Mm#4]qAi edR1F<D訉n?H{	gÄ<W>ԠfJ#SOb$A)g!* F( 	jZdYT8H?"x#qDɀ_[1^X$F	JDNbd0EkV!l(st;
t^9"yǕc8^q6g?~jNw,g09w`?3^JBKE5X?eAY*LӶ$ܵcPhe%(]
(#1CySEdH8ITVgyd4uZס9N c-nmsƮfۡVNSoQ9êYiFu. |B)6VsFnjh5 ");ԤĊMevjq&>Z}2:dq~/--U=:'zǉpk$ON RnHOz҉[/<Tom"TǥdLdmUWX;s;e%T_[Dl_;kuLJ:4KJmN%,8⬱%~j뤍Câ:cI
 m[=R\T]Zy̹\_ZU5mY嶈|d6fiVVsڏIdń b ?<o @fX"HXS+h3PK!{"/RԆu PIzvueN=M]jv@7_YӞ4yV$ZF9"G (!`&%
р+FQF3n&+i~ih\y).U"\,YU&\NF侞r$
A٪<JV$BE$LU,K"@tS6dd:G^Y$EJ#xyKe4$
,
rj{><5`6l6%ܤ3$|d/ѺxG\o_i궫Q'氃-lڊAIQ5%ϋI!崓A!p1䲏JtZCXdE#[VB
=aEXdcR	d1+s#]|QǘERSdŏ.
)   
----
public/fonts/helvetiker_regular.typeface.json
{"glyphs":{"ο":{"x_min":0,"x_max":712,"ha":815,"o":"m 356 -25 q 96 88 192 -25 q 0 368 0 201 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 "},"S":{"x_min":0,"x_max":788,"ha":890,"o":"m 788 291 q 662 54 788 144 q 397 -26 550 -26 q 116 68 226 -26 q 0 337 0 168 l 131 337 q 200 152 131 220 q 384 85 269 85 q 557 129 479 85 q 650 270 650 183 q 490 429 650 379 q 194 513 341 470 q 33 739 33 584 q 142 964 33 881 q 388 1041 242 1041 q 644 957 543 1041 q 756 716 756 867 l 625 716 q 561 874 625 816 q 395 933 497 933 q 243 891 309 933 q 164 759 164 841 q 325 609 164 656 q 625 526 475 568 q 788 291 788 454 "},"¦":{"x_min":343,"x_max":449,"ha":792,"o":"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "},"/":{"x_min":183.25,"x_max":608.328125,"ha":792,"o":"m 608 1041 l 266 -129 l 183 -129 l 520 1041 l 608 1041 "},"Τ":{"x_min":-0.4375,"x_max":777.453125,"ha":839,"o":"m 777 893 l 458 893 l 458 0 l 319 0 l 319 892 l 0 892 l 0 1013 l 777 1013 l 777 893 "},"y":{"x_min":0,"x_max":684.78125,"ha":771,"o":"m 684 738 l 388 -83 q 311 -216 356 -167 q 173 -279 252 -279 q 97 -266 133 -279 l 97 -149 q 132 -155 109 -151 q 168 -160 155 -160 q 240 -114 213 -160 q 274 -26 248 -98 l 0 738 l 137 737 l 341 139 l 548 737 l 684 738 "},"Π":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 803 1012 l 803 0 "},"ΐ":{"x_min":-111,"x_max":339,"ha":361,"o":"m 339 800 l 229 800 l 229 925 l 339 925 l 339 800 m -1 800 l -111 800 l -111 925 l -1 925 l -1 800 m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 m 302 1040 l 113 819 l 30 819 l 165 1040 l 302 1040 "},"g":{"x_min":0,"x_max":686,"ha":838,"o":"m 686 34 q 586 -213 686 -121 q 331 -306 487 -306 q 131 -252 216 -306 q 31 -84 31 -190 l 155 -84 q 228 -174 166 -138 q 345 -207 284 -207 q 514 -109 454 -207 q 564 89 564 -27 q 461 6 521 36 q 335 -23 401 -23 q 88 100 184 -23 q 0 370 0 215 q 87 634 0 522 q 330 758 183 758 q 457 728 398 758 q 564 644 515 699 l 564 737 l 686 737 l 686 34 m 582 367 q 529 560 582 481 q 358 652 468 652 q 189 561 250 652 q 135 369 135 482 q 189 176 135 255 q 361 85 251 85 q 529 176 468 85 q 582 367 582 255 "},"²":{"x_min":0,"x_max":442,"ha":539,"o":"m 442 383 l 0 383 q 91 566 0 492 q 260 668 176 617 q 354 798 354 727 q 315 875 354 845 q 227 905 277 905 q 136 869 173 905 q 99 761 99 833 l 14 761 q 82 922 14 864 q 232 974 141 974 q 379 926 316 974 q 442 797 442 878 q 351 635 442 704 q 183 539 321 611 q 92 455 92 491 l 442 455 l 442 383 "},"–":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "},"Κ":{"x_min":0,"x_max":819.5625,"ha":893,"o":"m 819 0 l 650 0 l 294 509 l 139 356 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "},"ƒ":{"x_min":-46.265625,"x_max":392,"ha":513,"o":"m 392 651 l 259 651 l 79 -279 l -46 -278 l 134 651 l 14 651 l 14 751 l 135 751 q 151 948 135 900 q 304 1041 185 1041 q 334 1040 319 1041 q 392 1034 348 1039 l 392 922 q 337 931 360 931 q 271 883 287 931 q 260 793 260 853 l 260 751 l 392 751 l 392 651 "},"e":{"x_min":0,"x_max":714,"ha":813,"o":"m 714 326 l 140 326 q 200 157 140 227 q 359 87 260 87 q 488 130 431 87 q 561 245 545 174 l 697 245 q 577 48 670 123 q 358 -26 484 -26 q 97 85 195 -26 q 0 363 0 197 q 94 642 0 529 q 358 765 195 765 q 626 627 529 765 q 714 326 714 503 m 576 429 q 507 583 564 522 q 355 650 445 650 q 206 583 266 650 q 140 429 152 522 l 576 429 "},"ό":{"x_min":0,"x_max":712,"ha":815,"o":"m 356 -25 q 94 91 194 -25 q 0 368 0 202 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 m 576 1040 l 387 819 l 303 819 l 438 1040 l 576 1040 "},"J":{"x_min":0,"x_max":588,"ha":699,"o":"m 588 279 q 287 -26 588 -26 q 58 73 126 -26 q 0 327 0 158 l 133 327 q 160 172 133 227 q 288 96 198 96 q 426 171 391 96 q 449 336 449 219 l 449 1013 l 588 1013 l 588 279 "},"»":{"x_min":-1,"x_max":503,"ha":601,"o":"m 503 302 l 280 136 l 281 256 l 429 373 l 281 486 l 280 608 l 503 440 l 503 302 m 221 302 l 0 136 l 0 255 l 145 372 l 0 486 l -1 608 l 221 440 l 221 302 "},"©":{"x_min":-3,"x_max":1008,"ha":1106,"o":"m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 741 394 q 661 246 731 302 q 496 190 591 190 q 294 285 369 190 q 228 497 228 370 q 295 714 228 625 q 499 813 370 813 q 656 762 588 813 q 733 625 724 711 l 634 625 q 589 704 629 673 q 498 735 550 735 q 377 666 421 735 q 334 504 334 597 q 374 340 334 408 q 490 272 415 272 q 589 304 549 272 q 638 394 628 337 l 741 394 "},"ώ":{"x_min":0,"x_max":922,"ha":1030,"o":"m 687 1040 l 498 819 l 415 819 l 549 1040 l 687 1040 m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 338 0 202 q 45 551 0 444 q 161 737 84 643 l 302 737 q 175 552 219 647 q 124 336 124 446 q 155 179 124 248 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 341 797 257 q 745 555 797 450 q 619 737 705 637 l 760 737 q 874 551 835 640 q 922 339 922 444 "},"^":{"x_min":193.0625,"x_max":598.609375,"ha":792,"o":"m 598 772 l 515 772 l 395 931 l 277 772 l 193 772 l 326 1013 l 462 1013 l 598 772 "},"«":{"x_min":0,"x_max":507.203125,"ha":604,"o":"m 506 136 l 284 302 l 284 440 l 506 608 l 507 485 l 360 371 l 506 255 l 506 136 m 222 136 l 0 302 l 0 440 l 222 608 l 221 486 l 73 373 l 222 256 l 222 136 "},"D":{"x_min":0,"x_max":828,"ha":935,"o":"m 389 1013 q 714 867 593 1013 q 828 521 828 729 q 712 161 828 309 q 382 0 587 0 l 0 0 l 0 1013 l 389 1013 m 376 124 q 607 247 523 124 q 681 510 681 355 q 607 771 681 662 q 376 896 522 896 l 139 896 l 139 124 l 376 124 "},"∙":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "},"ÿ":{"x_min":0,"x_max":47,"ha":125,"o":"m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 "},"w":{"x_min":0,"x_max":1009.71875,"ha":1100,"o":"m 1009 738 l 783 0 l 658 0 l 501 567 l 345 0 l 222 0 l 0 738 l 130 738 l 284 174 l 432 737 l 576 738 l 721 173 l 881 737 l 1009 738 "},"$":{"x_min":0,"x_max":700,"ha":793,"o":"m 664 717 l 542 717 q 490 825 531 785 q 381 872 450 865 l 381 551 q 620 446 540 522 q 700 241 700 370 q 618 45 700 116 q 381 -25 536 -25 l 381 -152 l 307 -152 l 307 -25 q 81 62 162 -25 q 0 297 0 149 l 124 297 q 169 146 124 204 q 307 81 215 89 l 307 441 q 80 536 148 469 q 13 725 13 603 q 96 910 13 839 q 307 982 180 982 l 307 1077 l 381 1077 l 381 982 q 574 917 494 982 q 664 717 664 845 m 307 565 l 307 872 q 187 831 233 872 q 142 724 142 791 q 180 618 142 656 q 307 565 218 580 m 381 76 q 562 237 562 96 q 517 361 562 313 q 381 423 472 409 l 381 76 "},"\\":{"x_min":-0.015625,"x_max":425.0625,"ha":522,"o":"m 425 -129 l 337 -129 l 0 1041 l 83 1041 l 425 -129 "},"µ":{"x_min":0,"x_max":697.21875,"ha":747,"o":"m 697 -4 q 629 -14 658 -14 q 498 97 513 -14 q 422 9 470 41 q 313 -23 374 -23 q 207 4 258 -23 q 119 81 156 32 l 119 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 173 124 246 q 308 83 216 83 q 452 178 402 83 q 493 359 493 255 l 493 738 l 617 738 l 617 214 q 623 136 617 160 q 673 92 637 92 q 697 96 684 92 l 697 -4 "},"Ι":{"x_min":42,"x_max":181,"ha":297,"o":"m 181 0 l 42 0 l 42 1013 l 181 1013 l 181 0 "},"Ύ":{"x_min":0,"x_max":1144.5,"ha":1214,"o":"m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"’":{"x_min":0,"x_max":139,"ha":236,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "},"Ν":{"x_min":0,"x_max":801,"ha":915,"o":"m 801 0 l 651 0 l 131 822 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 191 l 670 1013 l 801 1013 l 801 0 "},"-":{"x_min":8.71875,"x_max":350.390625,"ha":478,"o":"m 350 317 l 8 317 l 8 428 l 350 428 l 350 317 "},"Q":{"x_min":0,"x_max":968,"ha":1072,"o":"m 954 5 l 887 -79 l 744 35 q 622 -11 687 2 q 483 -26 556 -26 q 127 130 262 -26 q 0 504 0 279 q 127 880 0 728 q 484 1041 262 1041 q 841 884 708 1041 q 968 507 968 735 q 933 293 968 398 q 832 104 899 188 l 954 5 m 723 191 q 802 330 777 248 q 828 499 828 412 q 744 790 828 673 q 483 922 650 922 q 228 791 322 922 q 142 505 142 673 q 227 221 142 337 q 487 91 323 91 q 632 123 566 91 l 520 215 l 587 301 l 723 191 "},"ς":{"x_min":1,"x_max":676.28125,"ha":740,"o":"m 676 460 l 551 460 q 498 595 542 546 q 365 651 448 651 q 199 578 263 651 q 136 401 136 505 q 266 178 136 241 q 508 106 387 142 q 640 -50 640 62 q 625 -158 640 -105 q 583 -278 611 -211 l 465 -278 q 498 -182 490 -211 q 515 -80 515 -126 q 381 12 515 -15 q 134 91 197 51 q 1 388 1 179 q 100 651 1 542 q 354 761 199 761 q 587 680 498 761 q 676 460 676 599 "},"M":{"x_min":0,"x_max":954,"ha":1067,"o":"m 954 0 l 819 0 l 819 869 l 537 0 l 405 0 l 128 866 l 128 0 l 0 0 l 0 1013 l 200 1013 l 472 160 l 757 1013 l 954 1013 l 954 0 "},"Ψ":{"x_min":0,"x_max":1006,"ha":1094,"o":"m 1006 678 q 914 319 1006 429 q 571 200 814 200 l 571 0 l 433 0 l 433 200 q 92 319 194 200 q 0 678 0 429 l 0 1013 l 139 1013 l 139 679 q 191 417 139 492 q 433 326 255 326 l 433 1013 l 571 1013 l 571 326 l 580 326 q 813 423 747 326 q 868 679 868 502 l 868 1013 l 1006 1013 l 1006 678 "},"C":{"x_min":0,"x_max":886,"ha":944,"o":"m 886 379 q 760 87 886 201 q 455 -26 634 -26 q 112 136 236 -26 q 0 509 0 283 q 118 882 0 737 q 469 1041 245 1041 q 748 955 630 1041 q 879 708 879 859 l 745 708 q 649 862 724 805 q 473 920 573 920 q 219 791 312 920 q 136 509 136 675 q 217 229 136 344 q 470 99 311 99 q 672 179 591 99 q 753 379 753 259 l 886 379 "},"!":{"x_min":0,"x_max":138,"ha":236,"o":"m 138 684 q 116 409 138 629 q 105 244 105 299 l 33 244 q 16 465 33 313 q 0 684 0 616 l 0 1013 l 138 1013 l 138 684 m 138 0 l 0 0 l 0 151 l 138 151 l 138 0 "},"{":{"x_min":0,"x_max":480.5625,"ha":578,"o":"m 480 -286 q 237 -213 303 -286 q 187 -45 187 -159 q 194 48 187 -15 q 201 141 201 112 q 164 264 201 225 q 0 314 118 314 l 0 417 q 164 471 119 417 q 201 605 201 514 q 199 665 201 644 q 193 772 193 769 q 241 941 193 887 q 480 1015 308 1015 l 480 915 q 336 866 375 915 q 306 742 306 828 q 310 662 306 717 q 314 577 314 606 q 288 452 314 500 q 176 365 256 391 q 289 275 257 337 q 314 143 314 226 q 313 84 314 107 q 310 -11 310 -5 q 339 -131 310 -94 q 480 -182 377 -182 l 480 -286 "},"X":{"x_min":-0.015625,"x_max":854.15625,"ha":940,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 "},"#":{"x_min":0,"x_max":963.890625,"ha":1061,"o":"m 963 690 l 927 590 l 719 590 l 655 410 l 876 410 l 840 310 l 618 310 l 508 -3 l 393 -2 l 506 309 l 329 310 l 215 -2 l 102 -3 l 212 310 l 0 310 l 36 410 l 248 409 l 312 590 l 86 590 l 120 690 l 347 690 l 459 1006 l 573 1006 l 462 690 l 640 690 l 751 1006 l 865 1006 l 754 690 l 963 690 m 606 590 l 425 590 l 362 410 l 543 410 l 606 590 "},"ι":{"x_min":42,"x_max":284,"ha":361,"o":"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 738 l 167 738 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 "},"Ά":{"x_min":0,"x_max":906.953125,"ha":982,"o":"m 283 1040 l 88 799 l 5 799 l 145 1040 l 283 1040 m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1012 l 529 1012 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "},")":{"x_min":0,"x_max":318,"ha":415,"o":"m 318 365 q 257 25 318 191 q 87 -290 197 -141 l 0 -290 q 140 21 93 -128 q 193 360 193 189 q 141 704 193 537 q 0 1024 97 850 l 87 1024 q 257 706 197 871 q 318 365 318 542 "},"ε":{"x_min":0,"x_max":634.71875,"ha":714,"o":"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 314 0 265 q 128 390 67 353 q 56 460 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 "},"Δ":{"x_min":0,"x_max":952.78125,"ha":1028,"o":"m 952 0 l 0 0 l 400 1013 l 551 1013 l 952 0 m 762 124 l 476 867 l 187 124 l 762 124 "},"}":{"x_min":0,"x_max":481,"ha":578,"o":"m 481 314 q 318 262 364 314 q 282 136 282 222 q 284 65 282 97 q 293 -58 293 -48 q 241 -217 293 -166 q 0 -286 174 -286 l 0 -182 q 143 -130 105 -182 q 171 -2 171 -93 q 168 81 171 22 q 165 144 165 140 q 188 275 165 229 q 306 365 220 339 q 191 455 224 391 q 165 588 165 505 q 168 681 165 624 q 171 742 171 737 q 141 865 171 827 q 0 915 102 915 l 0 1015 q 243 942 176 1015 q 293 773 293 888 q 287 675 293 741 q 282 590 282 608 q 318 466 282 505 q 481 417 364 417 l 481 314 "},"‰":{"x_min":-3,"x_max":1672,"ha":1821,"o":"m 846 0 q 664 76 732 0 q 603 244 603 145 q 662 412 603 344 q 846 489 729 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 846 0 962 0 m 845 103 q 945 143 910 103 q 981 243 981 184 q 947 340 981 301 q 845 385 910 385 q 745 342 782 385 q 709 243 709 300 q 742 147 709 186 q 845 103 781 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 m 1428 0 q 1246 76 1314 0 q 1185 244 1185 145 q 1244 412 1185 344 q 1428 489 1311 489 q 1610 412 1542 489 q 1672 244 1672 343 q 1612 76 1672 144 q 1428 0 1545 0 m 1427 103 q 1528 143 1492 103 q 1564 243 1564 184 q 1530 340 1564 301 q 1427 385 1492 385 q 1327 342 1364 385 q 1291 243 1291 300 q 1324 147 1291 186 q 1427 103 1363 103 "},"a":{"x_min":0,"x_max":698.609375,"ha":794,"o":"m 698 0 q 661 -12 679 -7 q 615 -17 643 -17 q 536 12 564 -17 q 500 96 508 41 q 384 6 456 37 q 236 -25 312 -25 q 65 31 130 -25 q 0 194 0 88 q 118 390 0 334 q 328 435 180 420 q 488 483 476 451 q 495 523 495 504 q 442 619 495 584 q 325 654 389 654 q 209 617 257 654 q 152 513 161 580 l 33 513 q 123 705 33 633 q 332 772 207 772 q 528 712 448 772 q 617 531 617 645 l 617 163 q 624 108 617 126 q 664 90 632 90 l 698 94 l 698 0 m 491 262 l 491 372 q 272 329 350 347 q 128 201 128 294 q 166 113 128 144 q 264 83 205 83 q 414 130 346 83 q 491 262 491 183 "},"—":{"x_min":0,"x_max":941.671875,"ha":1039,"o":"m 941 334 l 0 334 l 0 410 l 941 410 l 941 334 "},"=":{"x_min":8.71875,"x_max":780.953125,"ha":792,"o":"m 780 510 l 8 510 l 8 606 l 780 606 l 780 510 m 780 235 l 8 235 l 8 332 l 780 332 l 780 235 "},"N":{"x_min":0,"x_max":801,"ha":914,"o":"m 801 0 l 651 0 l 131 823 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 193 l 670 1013 l 801 1013 l 801 0 "},"ρ":{"x_min":0,"x_max":712,"ha":797,"o":"m 712 369 q 620 94 712 207 q 362 -26 521 -26 q 230 2 292 -26 q 119 83 167 30 l 119 -278 l 0 -278 l 0 362 q 91 643 0 531 q 355 764 190 764 q 617 647 517 764 q 712 369 712 536 m 583 366 q 530 559 583 480 q 359 651 469 651 q 190 562 252 651 q 135 370 135 483 q 189 176 135 257 q 359 85 250 85 q 528 175 466 85 q 583 366 583 254 "},"2":{"x_min":59,"x_max":731,"ha":792,"o":"m 731 0 l 59 0 q 197 314 59 188 q 457 487 199 315 q 598 691 598 580 q 543 819 598 772 q 411 867 488 867 q 272 811 328 867 q 209 630 209 747 l 81 630 q 182 901 81 805 q 408 986 271 986 q 629 909 536 986 q 731 694 731 826 q 613 449 731 541 q 378 316 495 383 q 201 122 235 234 l 731 122 l 731 0 "},"¯":{"x_min":0,"x_max":941.671875,"ha":938,"o":"m 941 1033 l 0 1033 l 0 1109 l 941 1109 l 941 1033 "},"Z":{"x_min":0,"x_max":779,"ha":849,"o":"m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 "},"u":{"x_min":0,"x_max":617,"ha":729,"o":"m 617 0 l 499 0 l 499 110 q 391 10 460 45 q 246 -25 322 -25 q 61 58 127 -25 q 0 258 0 136 l 0 738 l 125 738 l 125 284 q 156 148 125 202 q 273 82 197 82 q 433 165 369 82 q 493 340 493 243 l 493 738 l 617 738 l 617 0 "},"k":{"x_min":0,"x_max":612.484375,"ha":697,"o":"m 612 738 l 338 465 l 608 0 l 469 0 l 251 382 l 121 251 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 402 l 456 738 l 612 738 "},"Η":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"Α":{"x_min":0,"x_max":906.953125,"ha":985,"o":"m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "},"s":{"x_min":0,"x_max":604,"ha":697,"o":"m 604 217 q 501 36 604 104 q 292 -23 411 -23 q 86 43 166 -23 q 0 238 0 114 l 121 237 q 175 122 121 164 q 300 85 223 85 q 415 112 363 85 q 479 207 479 147 q 361 309 479 276 q 140 372 141 370 q 21 544 21 426 q 111 708 21 647 q 298 761 190 761 q 492 705 413 761 q 583 531 583 643 l 462 531 q 412 625 462 594 q 298 657 363 657 q 199 636 242 657 q 143 558 143 608 q 262 454 143 486 q 484 394 479 397 q 604 217 604 341 "},"B":{"x_min":0,"x_max":778,"ha":876,"o":"m 580 546 q 724 469 670 535 q 778 311 778 403 q 673 83 778 171 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 892 q 691 633 732 693 q 580 546 650 572 m 393 899 l 139 899 l 139 588 l 379 588 q 521 624 462 588 q 592 744 592 667 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 303 635 219 q 559 436 635 389 q 402 477 494 477 l 139 477 l 139 124 l 419 124 "},"…":{"x_min":0,"x_max":614,"ha":708,"o":"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 m 378 0 l 236 0 l 236 151 l 378 151 l 378 0 m 614 0 l 472 0 l 472 151 l 614 151 l 614 0 "},"?":{"x_min":0,"x_max":607,"ha":704,"o":"m 607 777 q 543 599 607 674 q 422 474 482 537 q 357 272 357 391 l 236 272 q 297 487 236 395 q 411 619 298 490 q 474 762 474 691 q 422 885 474 838 q 301 933 371 933 q 179 880 228 933 q 124 706 124 819 l 0 706 q 94 963 0 872 q 302 1044 177 1044 q 511 973 423 1044 q 607 777 607 895 m 370 0 l 230 0 l 230 151 l 370 151 l 370 0 "},"H":{"x_min":0,"x_max":803,"ha":915,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"ν":{"x_min":0,"x_max":675,"ha":761,"o":"m 675 738 l 404 0 l 272 0 l 0 738 l 133 738 l 340 147 l 541 738 l 675 738 "},"c":{"x_min":1,"x_max":701.390625,"ha":775,"o":"m 701 264 q 584 53 681 133 q 353 -26 487 -26 q 91 91 188 -26 q 1 370 1 201 q 92 645 1 537 q 353 761 190 761 q 572 688 479 761 q 690 493 666 615 l 556 493 q 487 606 545 562 q 356 650 428 650 q 186 563 246 650 q 134 372 134 487 q 188 179 134 258 q 359 88 250 88 q 492 136 437 88 q 566 264 548 185 l 701 264 "},"¶":{"x_min":0,"x_max":566.671875,"ha":678,"o":"m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 "},"β":{"x_min":0,"x_max":660,"ha":745,"o":"m 471 550 q 610 450 561 522 q 660 280 660 378 q 578 64 660 151 q 367 -22 497 -22 q 239 5 299 -22 q 126 82 178 32 l 126 -278 l 0 -278 l 0 593 q 54 903 0 801 q 318 1042 127 1042 q 519 964 436 1042 q 603 771 603 887 q 567 644 603 701 q 471 550 532 586 m 337 79 q 476 138 418 79 q 535 279 535 198 q 427 437 535 386 q 226 477 344 477 l 226 583 q 398 620 329 583 q 486 762 486 668 q 435 884 486 833 q 312 935 384 935 q 169 861 219 935 q 126 698 126 797 l 126 362 q 170 169 126 242 q 337 79 224 79 "},"Μ":{"x_min":0,"x_max":954,"ha":1068,"o":"m 954 0 l 819 0 l 819 868 l 537 0 l 405 0 l 128 865 l 128 0 l 0 0 l 0 1013 l 199 1013 l 472 158 l 758 1013 l 954 1013 l 954 0 "},"Ό":{"x_min":0.109375,"x_max":1120,"ha":1217,"o":"m 1120 505 q 994 132 1120 282 q 642 -29 861 -29 q 290 130 422 -29 q 167 505 167 280 q 294 883 167 730 q 650 1046 430 1046 q 999 882 868 1046 q 1120 505 1120 730 m 977 504 q 896 784 977 669 q 644 915 804 915 q 391 785 484 915 q 307 504 307 669 q 391 224 307 339 q 644 95 486 95 q 894 224 803 95 q 977 504 977 339 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"Ή":{"x_min":0,"x_max":1158,"ha":1275,"o":"m 1158 0 l 1022 0 l 1022 475 l 496 475 l 496 0 l 356 0 l 356 1012 l 496 1012 l 496 599 l 1022 599 l 1022 1012 l 1158 1012 l 1158 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"•":{"x_min":0,"x_max":663.890625,"ha":775,"o":"m 663 529 q 566 293 663 391 q 331 196 469 196 q 97 294 194 196 q 0 529 0 393 q 96 763 0 665 q 331 861 193 861 q 566 763 469 861 q 663 529 663 665 "},"¥":{"x_min":0.1875,"x_max":819.546875,"ha":886,"o":"m 563 561 l 697 561 l 696 487 l 520 487 l 482 416 l 482 380 l 697 380 l 695 308 l 482 308 l 482 0 l 342 0 l 342 308 l 125 308 l 125 380 l 342 380 l 342 417 l 303 487 l 125 487 l 125 561 l 258 561 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 l 563 561 "},"(":{"x_min":0,"x_max":318.0625,"ha":415,"o":"m 318 -290 l 230 -290 q 61 23 122 -142 q 0 365 0 190 q 62 712 0 540 q 230 1024 119 869 l 318 1024 q 175 705 219 853 q 125 360 125 542 q 176 22 125 187 q 318 -290 223 -127 "},"U":{"x_min":0,"x_max":796,"ha":904,"o":"m 796 393 q 681 93 796 212 q 386 -25 566 -25 q 101 95 208 -25 q 0 393 0 211 l 0 1013 l 138 1013 l 138 391 q 204 191 138 270 q 394 107 276 107 q 586 191 512 107 q 656 391 656 270 l 656 1013 l 796 1013 l 796 393 "},"γ":{"x_min":0.5,"x_max":744.953125,"ha":822,"o":"m 744 737 l 463 54 l 463 -278 l 338 -278 l 338 54 l 154 495 q 104 597 124 569 q 13 651 67 651 l 0 651 l 0 751 l 39 753 q 168 711 121 753 q 242 594 207 676 l 403 208 l 617 737 l 744 737 "},"α":{"x_min":0,"x_max":765.5625,"ha":809,"o":"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 728 407 760 q 563 637 524 696 l 563 739 l 685 739 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 96 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 "},"F":{"x_min":0,"x_max":683.328125,"ha":717,"o":"m 683 888 l 140 888 l 140 583 l 613 583 l 613 458 l 140 458 l 140 0 l 0 0 l 0 1013 l 683 1013 l 683 888 "},"­":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "},":":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "},"Χ":{"x_min":0,"x_max":854.171875,"ha":935,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 "},"*":{"x_min":116,"x_max":674,"ha":792,"o":"m 674 768 l 475 713 l 610 544 l 517 477 l 394 652 l 272 478 l 178 544 l 314 713 l 116 766 l 153 876 l 341 812 l 342 1013 l 446 1013 l 446 811 l 635 874 l 674 768 "},"†":{"x_min":0,"x_max":777,"ha":835,"o":"m 458 804 l 777 804 l 777 683 l 458 683 l 458 0 l 319 0 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 "},"°":{"x_min":0,"x_max":347,"ha":444,"o":"m 173 802 q 43 856 91 802 q 0 977 0 905 q 45 1101 0 1049 q 173 1153 90 1153 q 303 1098 255 1153 q 347 977 347 1049 q 303 856 347 905 q 173 802 256 802 m 173 884 q 238 910 214 884 q 262 973 262 937 q 239 1038 262 1012 q 173 1064 217 1064 q 108 1037 132 1064 q 85 973 85 1010 q 108 910 85 937 q 173 884 132 884 "},"V":{"x_min":0,"x_max":862.71875,"ha":940,"o":"m 862 1013 l 505 0 l 361 0 l 0 1013 l 143 1013 l 434 165 l 718 1012 l 862 1013 "},"Ξ":{"x_min":0,"x_max":734.71875,"ha":763,"o":"m 723 889 l 9 889 l 9 1013 l 723 1013 l 723 889 m 673 463 l 61 463 l 61 589 l 673 589 l 673 463 m 734 0 l 0 0 l 0 124 l 734 124 l 734 0 "}," ":{"x_min":0,"x_max":0,"ha":853},"Ϋ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 588 1046 l 460 1046 l 460 1189 l 588 1189 l 588 1046 m 360 1046 l 232 1046 l 232 1189 l 360 1189 l 360 1046 m 819 1012 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1012 l 140 1012 l 411 533 l 679 1012 l 819 1012 "},"0":{"x_min":73,"x_max":715,"ha":792,"o":"m 394 -29 q 153 129 242 -29 q 73 479 73 272 q 152 829 73 687 q 394 989 241 989 q 634 829 545 989 q 715 479 715 684 q 635 129 715 270 q 394 -29 546 -29 m 394 89 q 546 211 489 89 q 598 479 598 322 q 548 748 598 640 q 394 871 491 871 q 241 748 298 871 q 190 479 190 637 q 239 211 190 319 q 394 89 296 89 "},"”":{"x_min":0,"x_max":347,"ha":454,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 m 347 851 q 310 737 347 784 q 208 669 273 690 l 208 734 q 267 787 250 741 q 280 873 280 821 l 208 873 l 208 1013 l 347 1013 l 347 851 "},"@":{"x_min":0,"x_max":1260,"ha":1357,"o":"m 1098 -45 q 877 -160 1001 -117 q 633 -203 752 -203 q 155 -29 327 -203 q 0 360 0 127 q 176 802 0 616 q 687 1008 372 1008 q 1123 854 969 1008 q 1260 517 1260 718 q 1155 216 1260 341 q 868 82 1044 82 q 772 106 801 82 q 737 202 737 135 q 647 113 700 144 q 527 82 594 82 q 367 147 420 82 q 314 312 314 212 q 401 565 314 452 q 639 690 498 690 q 810 588 760 690 l 849 668 l 938 668 q 877 441 900 532 q 833 226 833 268 q 853 182 833 198 q 902 167 873 167 q 1088 272 1012 167 q 1159 512 1159 372 q 1051 793 1159 681 q 687 925 925 925 q 248 747 415 925 q 97 361 97 586 q 226 26 97 159 q 627 -122 370 -122 q 856 -87 737 -122 q 1061 8 976 -53 l 1098 -45 m 786 488 q 738 580 777 545 q 643 615 700 615 q 483 517 548 615 q 425 322 425 430 q 457 203 425 250 q 552 156 490 156 q 722 273 665 156 q 786 488 738 309 "},"Ί":{"x_min":0,"x_max":499,"ha":613,"o":"m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 m 499 0 l 360 0 l 360 1012 l 499 1012 l 499 0 "},"i":{"x_min":14,"x_max":136,"ha":275,"o":"m 136 873 l 14 873 l 14 1013 l 136 1013 l 136 873 m 136 0 l 14 0 l 14 737 l 136 737 l 136 0 "},"Β":{"x_min":0,"x_max":778,"ha":877,"o":"m 580 545 q 724 468 671 534 q 778 310 778 402 q 673 83 778 170 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 891 q 691 632 732 692 q 580 545 650 571 m 393 899 l 139 899 l 139 587 l 379 587 q 521 623 462 587 q 592 744 592 666 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 302 635 219 q 559 435 635 388 q 402 476 494 476 l 139 476 l 139 124 l 419 124 "},"υ":{"x_min":0,"x_max":617,"ha":725,"o":"m 617 352 q 540 94 617 199 q 308 -24 455 -24 q 76 94 161 -24 q 0 352 0 199 l 0 739 l 126 739 l 126 355 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 355 492 257 l 492 739 l 617 739 l 617 352 "},"]":{"x_min":0,"x_max":275,"ha":372,"o":"m 275 -281 l 0 -281 l 0 -187 l 151 -187 l 151 920 l 0 920 l 0 1013 l 275 1013 l 275 -281 "},"m":{"x_min":0,"x_max":1019,"ha":1128,"o":"m 1019 0 l 897 0 l 897 454 q 860 591 897 536 q 739 660 816 660 q 613 586 659 660 q 573 436 573 522 l 573 0 l 447 0 l 447 455 q 412 591 447 535 q 294 657 372 657 q 165 586 213 657 q 122 437 122 521 l 122 0 l 0 0 l 0 738 l 117 738 l 117 640 q 202 730 150 697 q 316 763 254 763 q 437 730 381 763 q 525 642 494 697 q 621 731 559 700 q 753 763 682 763 q 943 694 867 763 q 1019 512 1019 625 l 1019 0 "},"χ":{"x_min":8.328125,"x_max":780.5625,"ha":815,"o":"m 780 -278 q 715 -294 747 -294 q 616 -257 663 -294 q 548 -175 576 -227 l 379 133 l 143 -277 l 9 -277 l 313 254 l 163 522 q 127 586 131 580 q 36 640 91 640 q 8 637 27 640 l 8 752 l 52 757 q 162 719 113 757 q 236 627 200 690 l 383 372 l 594 737 l 726 737 l 448 250 l 625 -69 q 670 -153 647 -110 q 743 -188 695 -188 q 780 -184 759 -188 l 780 -278 "},"8":{"x_min":55,"x_max":736,"ha":792,"o":"m 571 527 q 694 424 652 491 q 736 280 736 358 q 648 71 736 158 q 395 -26 551 -26 q 142 69 238 -26 q 55 279 55 157 q 96 425 55 359 q 220 527 138 491 q 120 615 153 562 q 88 726 88 668 q 171 904 88 827 q 395 986 261 986 q 618 905 529 986 q 702 727 702 830 q 670 616 702 667 q 571 527 638 565 m 394 565 q 519 610 475 565 q 563 717 563 655 q 521 823 563 781 q 392 872 474 872 q 265 824 312 872 q 224 720 224 783 q 265 613 224 656 q 394 565 312 565 m 395 91 q 545 150 488 91 q 597 280 597 204 q 546 408 597 355 q 395 465 492 465 q 244 408 299 465 q 194 280 194 356 q 244 150 194 203 q 395 91 299 91 "},"ί":{"x_min":42,"x_max":326.71875,"ha":361,"o":"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 102 239 101 q 284 112 257 104 l 284 3 m 326 1040 l 137 819 l 54 819 l 189 1040 l 326 1040 "},"Ζ":{"x_min":0,"x_max":779.171875,"ha":850,"o":"m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 "},"R":{"x_min":0,"x_max":781.953125,"ha":907,"o":"m 781 0 l 623 0 q 587 242 590 52 q 407 433 585 433 l 138 433 l 138 0 l 0 0 l 0 1013 l 396 1013 q 636 946 539 1013 q 749 731 749 868 q 711 597 749 659 q 608 502 674 534 q 718 370 696 474 q 729 207 722 352 q 781 26 736 62 l 781 0 m 373 551 q 533 594 465 551 q 614 731 614 645 q 532 859 614 815 q 373 896 465 896 l 138 896 l 138 551 l 373 551 "},"o":{"x_min":0,"x_max":713,"ha":821,"o":"m 357 -25 q 94 91 194 -25 q 0 368 0 202 q 93 642 0 533 q 357 761 193 761 q 618 644 518 761 q 713 368 713 533 q 619 91 713 201 q 357 -25 521 -25 m 357 85 q 528 175 465 85 q 584 369 584 255 q 529 562 584 484 q 357 651 467 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 357 85 250 85 "},"5":{"x_min":54.171875,"x_max":738,"ha":792,"o":"m 738 314 q 626 60 738 153 q 382 -23 526 -23 q 155 47 248 -23 q 54 256 54 125 l 183 256 q 259 132 204 174 q 382 91 314 91 q 533 149 471 91 q 602 314 602 213 q 538 469 602 411 q 386 528 475 528 q 284 506 332 528 q 197 439 237 484 l 81 439 l 159 958 l 684 958 l 684 840 l 254 840 l 214 579 q 306 627 258 612 q 407 643 354 643 q 636 552 540 643 q 738 314 738 457 "},"7":{"x_min":58.71875,"x_max":730.953125,"ha":792,"o":"m 730 839 q 469 448 560 641 q 335 0 378 255 l 192 0 q 328 441 235 252 q 593 830 421 630 l 58 830 l 58 958 l 730 958 l 730 839 "},"K":{"x_min":0,"x_max":819.46875,"ha":906,"o":"m 819 0 l 649 0 l 294 509 l 139 355 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "},",":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 -12 q 105 -132 142 -82 q 0 -205 68 -182 l 0 -138 q 57 -82 40 -124 q 70 0 70 -51 l 0 0 l 0 151 l 142 151 l 142 -12 "},"d":{"x_min":0,"x_max":683,"ha":796,"o":"m 683 0 l 564 0 l 564 93 q 456 6 516 38 q 327 -25 395 -25 q 87 100 181 -25 q 0 365 0 215 q 90 639 0 525 q 343 763 187 763 q 564 647 486 763 l 564 1013 l 683 1013 l 683 0 m 582 373 q 529 562 582 484 q 361 653 468 653 q 190 561 253 653 q 135 365 135 479 q 189 175 135 254 q 358 85 251 85 q 529 178 468 85 q 582 373 582 258 "},"¨":{"x_min":-109,"x_max":247,"ha":232,"o":"m 247 1046 l 119 1046 l 119 1189 l 247 1189 l 247 1046 m 19 1046 l -109 1046 l -109 1189 l 19 1189 l 19 1046 "},"E":{"x_min":0,"x_max":736.109375,"ha":789,"o":"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "},"Y":{"x_min":0,"x_max":820,"ha":886,"o":"m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 "},"\"":{"x_min":0,"x_max":299,"ha":396,"o":"m 299 606 l 203 606 l 203 988 l 299 988 l 299 606 m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "},"‹":{"x_min":17.984375,"x_max":773.609375,"ha":792,"o":"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "},"„":{"x_min":0,"x_max":364,"ha":467,"o":"m 141 -12 q 104 -132 141 -82 q 0 -205 67 -182 l 0 -138 q 56 -82 40 -124 q 69 0 69 -51 l 0 0 l 0 151 l 141 151 l 141 -12 m 364 -12 q 327 -132 364 -82 q 222 -205 290 -182 l 222 -138 q 279 -82 262 -124 q 292 0 292 -51 l 222 0 l 222 151 l 364 151 l 364 -12 "},"δ":{"x_min":1,"x_max":710,"ha":810,"o":"m 710 360 q 616 87 710 196 q 356 -28 518 -28 q 99 82 197 -28 q 1 356 1 192 q 100 606 1 509 q 355 703 199 703 q 180 829 288 754 q 70 903 124 866 l 70 1012 l 643 1012 l 643 901 l 258 901 q 462 763 422 794 q 636 592 577 677 q 710 360 710 485 m 584 365 q 552 501 584 447 q 451 602 521 555 q 372 611 411 611 q 197 541 258 611 q 136 355 136 472 q 190 171 136 245 q 358 85 252 85 q 528 173 465 85 q 584 365 584 252 "},"έ":{"x_min":0,"x_max":634.71875,"ha":714,"o":"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 313 0 265 q 128 390 67 352 q 56 459 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 m 520 1040 l 331 819 l 248 819 l 383 1040 l 520 1040 "},"ω":{"x_min":0,"x_max":922,"ha":1031,"o":"m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 "},"´":{"x_min":0,"x_max":96,"ha":251,"o":"m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "},"±":{"x_min":11,"x_max":781,"ha":792,"o":"m 781 490 l 446 490 l 446 255 l 349 255 l 349 490 l 11 490 l 11 586 l 349 586 l 349 819 l 446 819 l 446 586 l 781 586 l 781 490 m 781 21 l 11 21 l 11 115 l 781 115 l 781 21 "},"|":{"x_min":343,"x_max":449,"ha":792,"o":"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "},"ϋ":{"x_min":0,"x_max":617,"ha":725,"o":"m 482 800 l 372 800 l 372 925 l 482 925 l 482 800 m 239 800 l 129 800 l 129 925 l 239 925 l 239 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 "},"§":{"x_min":0,"x_max":593,"ha":690,"o":"m 593 425 q 554 312 593 369 q 467 233 516 254 q 537 83 537 172 q 459 -74 537 -12 q 288 -133 387 -133 q 115 -69 184 -133 q 47 96 47 -6 l 166 96 q 199 7 166 40 q 288 -26 232 -26 q 371 -5 332 -26 q 420 60 420 21 q 311 201 420 139 q 108 309 210 255 q 0 490 0 383 q 33 602 0 551 q 124 687 66 654 q 75 743 93 712 q 58 812 58 773 q 133 984 58 920 q 300 1043 201 1043 q 458 987 394 1043 q 529 814 529 925 l 411 814 q 370 908 404 877 q 289 939 336 939 q 213 911 246 939 q 180 841 180 883 q 286 720 180 779 q 484 612 480 615 q 593 425 593 534 m 467 409 q 355 544 467 473 q 196 630 228 612 q 146 587 162 609 q 124 525 124 558 q 239 387 124 462 q 398 298 369 315 q 448 345 429 316 q 467 409 467 375 "},"b":{"x_min":0,"x_max":685,"ha":783,"o":"m 685 372 q 597 99 685 213 q 347 -25 501 -25 q 219 5 277 -25 q 121 93 161 36 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 634 q 214 723 157 692 q 341 754 272 754 q 591 637 493 754 q 685 372 685 526 m 554 356 q 499 550 554 470 q 328 644 437 644 q 162 556 223 644 q 108 369 108 478 q 160 176 108 256 q 330 83 221 83 q 498 169 435 83 q 554 356 554 245 "},"q":{"x_min":0,"x_max":683,"ha":876,"o":"m 683 -278 l 564 -278 l 564 97 q 474 8 533 39 q 345 -23 415 -23 q 91 93 188 -23 q 0 364 0 203 q 87 635 0 522 q 337 760 184 760 q 466 727 408 760 q 564 637 523 695 l 564 737 l 683 737 l 683 -278 m 582 375 q 527 564 582 488 q 358 652 466 652 q 190 565 253 652 q 135 377 135 488 q 189 179 135 261 q 361 84 251 84 q 530 179 469 84 q 582 375 582 260 "},"Ω":{"x_min":-0.171875,"x_max":969.5625,"ha":1068,"o":"m 969 0 l 555 0 l 555 123 q 744 308 675 194 q 814 558 814 423 q 726 812 814 709 q 484 922 633 922 q 244 820 334 922 q 154 567 154 719 q 223 316 154 433 q 412 123 292 199 l 412 0 l 0 0 l 0 124 l 217 124 q 68 327 122 210 q 15 572 15 444 q 144 911 15 781 q 484 1041 274 1041 q 822 909 691 1041 q 953 569 953 777 q 899 326 953 443 q 750 124 846 210 l 969 124 l 969 0 "},"ύ":{"x_min":0,"x_max":617,"ha":725,"o":"m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 535 1040 l 346 819 l 262 819 l 397 1040 l 535 1040 "},"z":{"x_min":-0.015625,"x_max":613.890625,"ha":697,"o":"m 613 0 l 0 0 l 0 100 l 433 630 l 20 630 l 20 738 l 594 738 l 593 636 l 163 110 l 613 110 l 613 0 "},"™":{"x_min":0,"x_max":894,"ha":1000,"o":"m 389 951 l 229 951 l 229 503 l 160 503 l 160 951 l 0 951 l 0 1011 l 389 1011 l 389 951 m 894 503 l 827 503 l 827 939 l 685 503 l 620 503 l 481 937 l 481 503 l 417 503 l 417 1011 l 517 1011 l 653 580 l 796 1010 l 894 1011 l 894 503 "},"ή":{"x_min":0.78125,"x_max":697,"ha":810,"o":"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 721 124 755 q 200 630 193 687 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 m 479 1040 l 290 819 l 207 819 l 341 1040 l 479 1040 "},"Θ":{"x_min":0,"x_max":960,"ha":1056,"o":"m 960 507 q 833 129 960 280 q 476 -32 698 -32 q 123 129 255 -32 q 0 507 0 280 q 123 883 0 732 q 476 1045 255 1045 q 832 883 696 1045 q 960 507 960 732 m 817 500 q 733 789 817 669 q 476 924 639 924 q 223 792 317 924 q 142 507 142 675 q 222 222 142 339 q 476 89 315 89 q 730 218 636 89 q 817 500 817 334 m 716 449 l 243 449 l 243 571 l 716 571 l 716 449 "},"®":{"x_min":-3,"x_max":1008,"ha":1106,"o":"m 503 532 q 614 562 566 532 q 672 658 672 598 q 614 747 672 716 q 503 772 569 772 l 338 772 l 338 532 l 503 532 m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 788 146 l 678 146 q 653 316 655 183 q 527 449 652 449 l 338 449 l 338 146 l 241 146 l 241 854 l 518 854 q 688 808 621 854 q 766 658 766 755 q 739 563 766 607 q 668 497 713 519 q 751 331 747 472 q 788 164 756 190 l 788 146 "},"~":{"x_min":0,"x_max":833,"ha":931,"o":"m 833 958 q 778 753 833 831 q 594 665 716 665 q 402 761 502 665 q 240 857 302 857 q 131 795 166 857 q 104 665 104 745 l 0 665 q 54 867 0 789 q 237 958 116 958 q 429 861 331 958 q 594 765 527 765 q 704 827 670 765 q 729 958 729 874 l 833 958 "},"Ε":{"x_min":0,"x_max":736.21875,"ha":778,"o":"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "},"³":{"x_min":0,"x_max":450,"ha":547,"o":"m 450 552 q 379 413 450 464 q 220 366 313 366 q 69 414 130 366 q 0 567 0 470 l 85 567 q 126 470 85 504 q 225 437 168 437 q 320 467 280 437 q 360 552 360 498 q 318 632 360 608 q 213 657 276 657 q 195 657 203 657 q 176 657 181 657 l 176 722 q 279 733 249 722 q 334 815 334 752 q 300 881 334 856 q 220 907 267 907 q 133 875 169 907 q 97 781 97 844 l 15 781 q 78 926 15 875 q 220 972 135 972 q 364 930 303 972 q 426 817 426 888 q 344 697 426 733 q 421 642 392 681 q 450 552 450 603 "},"[":{"x_min":0,"x_max":273.609375,"ha":371,"o":"m 273 -281 l 0 -281 l 0 1013 l 273 1013 l 273 920 l 124 920 l 124 -187 l 273 -187 l 273 -281 "},"L":{"x_min":0,"x_max":645.828125,"ha":696,"o":"m 645 0 l 0 0 l 0 1013 l 140 1013 l 140 126 l 645 126 l 645 0 "},"σ":{"x_min":0,"x_max":803.390625,"ha":894,"o":"m 803 628 l 633 628 q 713 368 713 512 q 618 93 713 204 q 357 -25 518 -25 q 94 91 194 -25 q 0 368 0 201 q 94 644 0 533 q 356 761 194 761 q 481 750 398 761 q 608 739 564 739 l 803 739 l 803 628 m 360 85 q 529 180 467 85 q 584 374 584 262 q 527 566 584 490 q 352 651 463 651 q 187 559 247 651 q 135 368 135 478 q 189 175 135 254 q 360 85 251 85 "},"ζ":{"x_min":0,"x_max":573,"ha":642,"o":"m 573 -40 q 553 -162 573 -97 q 510 -278 543 -193 l 400 -278 q 441 -187 428 -219 q 462 -90 462 -132 q 378 -14 462 -14 q 108 45 197 -14 q 0 290 0 117 q 108 631 0 462 q 353 901 194 767 l 55 901 l 55 1012 l 561 1012 l 561 924 q 261 669 382 831 q 128 301 128 489 q 243 117 128 149 q 458 98 350 108 q 573 -40 573 80 "},"θ":{"x_min":0,"x_max":674,"ha":778,"o":"m 674 496 q 601 160 674 304 q 336 -26 508 -26 q 73 153 165 -26 q 0 485 0 296 q 72 840 0 683 q 343 1045 166 1045 q 605 844 516 1045 q 674 496 674 692 m 546 579 q 498 798 546 691 q 336 935 437 935 q 178 798 237 935 q 126 579 137 701 l 546 579 m 546 475 l 126 475 q 170 233 126 348 q 338 80 230 80 q 504 233 447 80 q 546 475 546 346 "},"Ο":{"x_min":0,"x_max":958,"ha":1054,"o":"m 485 1042 q 834 883 703 1042 q 958 511 958 735 q 834 136 958 287 q 481 -26 701 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 729 q 485 1042 263 1042 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 670 q 480 913 640 913 q 226 785 321 913 q 142 504 142 671 q 226 224 142 339 q 480 98 319 98 "},"Γ":{"x_min":0,"x_max":705.28125,"ha":749,"o":"m 705 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 705 1012 l 705 886 "}," ":{"x_min":0,"x_max":0,"ha":375},"%":{"x_min":-3,"x_max":1089,"ha":1186,"o":"m 845 0 q 663 76 731 0 q 602 244 602 145 q 661 412 602 344 q 845 489 728 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 845 0 962 0 m 844 103 q 945 143 909 103 q 981 243 981 184 q 947 340 981 301 q 844 385 909 385 q 744 342 781 385 q 708 243 708 300 q 741 147 708 186 q 844 103 780 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 "},"P":{"x_min":0,"x_max":726,"ha":806,"o":"m 424 1013 q 640 931 555 1013 q 726 719 726 850 q 637 506 726 587 q 413 426 548 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 379 889 l 140 889 l 140 548 l 372 548 q 522 589 459 548 q 593 720 593 637 q 528 845 593 801 q 379 889 463 889 "},"Έ":{"x_min":0,"x_max":1078.21875,"ha":1118,"o":"m 1078 0 l 342 0 l 342 1013 l 1067 1013 l 1067 889 l 481 889 l 481 585 l 1019 585 l 1019 467 l 481 467 l 481 125 l 1078 125 l 1078 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"Ώ":{"x_min":0.125,"x_max":1136.546875,"ha":1235,"o":"m 1136 0 l 722 0 l 722 123 q 911 309 842 194 q 981 558 981 423 q 893 813 981 710 q 651 923 800 923 q 411 821 501 923 q 321 568 321 720 q 390 316 321 433 q 579 123 459 200 l 579 0 l 166 0 l 166 124 l 384 124 q 235 327 289 210 q 182 572 182 444 q 311 912 182 782 q 651 1042 441 1042 q 989 910 858 1042 q 1120 569 1120 778 q 1066 326 1120 443 q 917 124 1013 210 l 1136 124 l 1136 0 m 277 1040 l 83 800 l 0 800 l 140 1041 l 277 1040 "},"_":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 -334 l 0 -334 l 0 -234 l 705 -234 l 705 -334 "},"Ϊ":{"x_min":-110,"x_max":246,"ha":275,"o":"m 246 1046 l 118 1046 l 118 1189 l 246 1189 l 246 1046 m 18 1046 l -110 1046 l -110 1189 l 18 1189 l 18 1046 m 136 0 l 0 0 l 0 1012 l 136 1012 l 136 0 "},"+":{"x_min":23,"x_max":768,"ha":792,"o":"m 768 372 l 444 372 l 444 0 l 347 0 l 347 372 l 23 372 l 23 468 l 347 468 l 347 840 l 444 840 l 444 468 l 768 468 l 768 372 "},"½":{"x_min":0,"x_max":1050,"ha":1149,"o":"m 1050 0 l 625 0 q 712 178 625 108 q 878 277 722 187 q 967 385 967 328 q 932 456 967 429 q 850 484 897 484 q 759 450 798 484 q 721 352 721 416 l 640 352 q 706 502 640 448 q 851 551 766 551 q 987 509 931 551 q 1050 385 1050 462 q 976 251 1050 301 q 829 179 902 215 q 717 68 740 133 l 1050 68 l 1050 0 m 834 985 l 215 -28 l 130 -28 l 750 984 l 834 985 m 224 422 l 142 422 l 142 811 l 0 811 l 0 867 q 104 889 62 867 q 164 973 157 916 l 224 973 l 224 422 "},"Ρ":{"x_min":0,"x_max":720,"ha":783,"o":"m 424 1013 q 637 933 554 1013 q 720 723 720 853 q 633 508 720 591 q 413 426 546 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 378 889 l 140 889 l 140 548 l 371 548 q 521 589 458 548 q 592 720 592 637 q 527 845 592 801 q 378 889 463 889 "},"'":{"x_min":0,"x_max":139,"ha":236,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "},"ª":{"x_min":0,"x_max":350,"ha":397,"o":"m 350 625 q 307 616 328 616 q 266 631 281 616 q 247 673 251 645 q 190 628 225 644 q 116 613 156 613 q 32 641 64 613 q 0 722 0 669 q 72 826 0 800 q 247 866 159 846 l 247 887 q 220 934 247 916 q 162 953 194 953 q 104 934 129 953 q 76 882 80 915 l 16 882 q 60 976 16 941 q 166 1011 104 1011 q 266 979 224 1011 q 308 891 308 948 l 308 706 q 311 679 308 688 q 331 670 315 670 l 350 672 l 350 625 m 247 757 l 247 811 q 136 790 175 798 q 64 726 64 773 q 83 682 64 697 q 132 667 103 667 q 207 690 174 667 q 247 757 247 718 "},"΅":{"x_min":0,"x_max":450,"ha":553,"o":"m 450 800 l 340 800 l 340 925 l 450 925 l 450 800 m 406 1040 l 212 800 l 129 800 l 269 1040 l 406 1040 m 110 800 l 0 800 l 0 925 l 110 925 l 110 800 "},"T":{"x_min":0,"x_max":777,"ha":835,"o":"m 777 894 l 458 894 l 458 0 l 319 0 l 319 894 l 0 894 l 0 1013 l 777 1013 l 777 894 "},"Φ":{"x_min":0,"x_max":915,"ha":997,"o":"m 527 0 l 389 0 l 389 122 q 110 231 220 122 q 0 509 0 340 q 110 785 0 677 q 389 893 220 893 l 389 1013 l 527 1013 l 527 893 q 804 786 693 893 q 915 509 915 679 q 805 231 915 341 q 527 122 696 122 l 527 0 m 527 226 q 712 310 641 226 q 779 507 779 389 q 712 705 779 627 q 527 787 641 787 l 527 226 m 389 226 l 389 787 q 205 698 275 775 q 136 505 136 620 q 206 308 136 391 q 389 226 276 226 "},"⁋":{"x_min":0,"x_max":0,"ha":694},"j":{"x_min":-77.78125,"x_max":167,"ha":349,"o":"m 167 871 l 42 871 l 42 1013 l 167 1013 l 167 871 m 167 -80 q 121 -231 167 -184 q -26 -278 76 -278 l -77 -278 l -77 -164 l -41 -164 q 26 -143 11 -164 q 42 -65 42 -122 l 42 737 l 167 737 l 167 -80 "},"Σ":{"x_min":0,"x_max":756.953125,"ha":819,"o":"m 756 0 l 0 0 l 0 107 l 395 523 l 22 904 l 22 1013 l 745 1013 l 745 889 l 209 889 l 566 523 l 187 125 l 756 125 l 756 0 "},"1":{"x_min":215.671875,"x_max":574,"ha":792,"o":"m 574 0 l 442 0 l 442 697 l 215 697 l 215 796 q 386 833 330 796 q 475 986 447 875 l 574 986 l 574 0 "},"›":{"x_min":18.0625,"x_max":774,"ha":792,"o":"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "},"<":{"x_min":17.984375,"x_max":773.609375,"ha":792,"o":"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "},"£":{"x_min":0,"x_max":704.484375,"ha":801,"o":"m 704 41 q 623 -10 664 5 q 543 -26 583 -26 q 359 15 501 -26 q 243 36 288 36 q 158 23 197 36 q 73 -21 119 10 l 6 76 q 125 195 90 150 q 175 331 175 262 q 147 443 175 383 l 0 443 l 0 512 l 108 512 q 43 734 43 623 q 120 929 43 854 q 358 1010 204 1010 q 579 936 487 1010 q 678 729 678 857 l 678 684 l 552 684 q 504 838 552 780 q 362 896 457 896 q 216 852 263 896 q 176 747 176 815 q 199 627 176 697 q 248 512 217 574 l 468 512 l 468 443 l 279 443 q 297 356 297 398 q 230 194 297 279 q 153 107 211 170 q 227 133 190 125 q 293 142 264 142 q 410 119 339 142 q 516 96 482 96 q 579 105 550 96 q 648 142 608 115 l 704 41 "},"t":{"x_min":0,"x_max":367,"ha":458,"o":"m 367 0 q 312 -5 339 -2 q 262 -8 284 -8 q 145 28 183 -8 q 108 143 108 64 l 108 638 l 0 638 l 0 738 l 108 738 l 108 944 l 232 944 l 232 738 l 367 738 l 367 638 l 232 638 l 232 185 q 248 121 232 140 q 307 102 264 102 q 345 104 330 102 q 367 107 360 107 l 367 0 "},"¬":{"x_min":0,"x_max":706,"ha":803,"o":"m 706 411 l 706 158 l 630 158 l 630 335 l 0 335 l 0 411 l 706 411 "},"λ":{"x_min":0,"x_max":750,"ha":803,"o":"m 750 -7 q 679 -15 716 -15 q 538 59 591 -15 q 466 214 512 97 l 336 551 l 126 0 l 0 0 l 270 705 q 223 837 247 770 q 116 899 190 899 q 90 898 100 899 l 90 1004 q 152 1011 125 1011 q 298 938 244 1011 q 373 783 326 901 l 605 192 q 649 115 629 136 q 716 95 669 95 l 736 95 q 750 97 745 97 l 750 -7 "},"W":{"x_min":0,"x_max":1263.890625,"ha":1351,"o":"m 1263 1013 l 995 0 l 859 0 l 627 837 l 405 0 l 265 0 l 0 1013 l 136 1013 l 342 202 l 556 1013 l 701 1013 l 921 207 l 1133 1012 l 1263 1013 "},">":{"x_min":18.0625,"x_max":774,"ha":792,"o":"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "},"v":{"x_min":0,"x_max":675.15625,"ha":761,"o":"m 675 738 l 404 0 l 272 0 l 0 738 l 133 737 l 340 147 l 541 737 l 675 738 "},"τ":{"x_min":0.28125,"x_max":644.5,"ha":703,"o":"m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 "},"ξ":{"x_min":0,"x_max":624.9375,"ha":699,"o":"m 624 -37 q 608 -153 624 -96 q 563 -278 593 -211 l 454 -278 q 491 -183 486 -200 q 511 -83 511 -126 q 484 -23 511 -44 q 370 1 452 1 q 323 0 354 1 q 283 -1 293 -1 q 84 76 169 -1 q 0 266 0 154 q 56 431 0 358 q 197 538 108 498 q 94 613 134 562 q 54 730 54 665 q 77 823 54 780 q 143 901 101 867 l 27 901 l 27 1012 l 576 1012 l 576 901 l 380 901 q 244 863 303 901 q 178 745 178 820 q 312 600 178 636 q 532 582 380 582 l 532 479 q 276 455 361 479 q 118 281 118 410 q 165 173 118 217 q 274 120 208 133 q 494 101 384 110 q 624 -37 624 76 "},"&":{"x_min":-3,"x_max":894.25,"ha":992,"o":"m 894 0 l 725 0 l 624 123 q 471 0 553 40 q 306 -41 390 -41 q 168 -7 231 -41 q 62 92 105 26 q 14 187 31 139 q -3 276 -3 235 q 55 433 -3 358 q 248 581 114 508 q 170 689 196 640 q 137 817 137 751 q 214 985 137 922 q 384 1041 284 1041 q 548 988 483 1041 q 622 824 622 928 q 563 666 622 739 q 431 556 516 608 l 621 326 q 649 407 639 361 q 663 493 653 426 l 781 493 q 703 229 781 352 l 894 0 m 504 818 q 468 908 504 877 q 384 940 433 940 q 293 907 331 940 q 255 818 255 875 q 289 714 255 767 q 363 628 313 678 q 477 729 446 682 q 504 818 504 771 m 556 209 l 314 499 q 179 395 223 449 q 135 283 135 341 q 146 222 135 253 q 183 158 158 192 q 333 80 241 80 q 556 209 448 80 "},"Λ":{"x_min":0,"x_max":862.5,"ha":942,"o":"m 862 0 l 719 0 l 426 847 l 143 0 l 0 0 l 356 1013 l 501 1013 l 862 0 "},"I":{"x_min":41,"x_max":180,"ha":293,"o":"m 180 0 l 41 0 l 41 1013 l 180 1013 l 180 0 "},"G":{"x_min":0,"x_max":921,"ha":1011,"o":"m 921 0 l 832 0 l 801 136 q 655 15 741 58 q 470 -28 568 -28 q 126 133 259 -28 q 0 499 0 284 q 125 881 0 731 q 486 1043 259 1043 q 763 957 647 1043 q 905 709 890 864 l 772 709 q 668 866 747 807 q 486 926 589 926 q 228 795 322 926 q 142 507 142 677 q 228 224 142 342 q 483 94 323 94 q 712 195 625 94 q 796 435 796 291 l 477 435 l 477 549 l 921 549 l 921 0 "},"ΰ":{"x_min":0,"x_max":617,"ha":725,"o":"m 524 800 l 414 800 l 414 925 l 524 925 l 524 800 m 183 800 l 73 800 l 73 925 l 183 925 l 183 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 489 1040 l 300 819 l 216 819 l 351 1040 l 489 1040 "},"`":{"x_min":0,"x_max":138.890625,"ha":236,"o":"m 138 699 l 0 699 l 0 861 q 36 974 0 929 q 138 1041 72 1020 l 138 977 q 82 931 95 969 q 69 839 69 893 l 138 839 l 138 699 "},"·":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "},"Υ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 "},"r":{"x_min":0,"x_max":355.5625,"ha":432,"o":"m 355 621 l 343 621 q 179 569 236 621 q 122 411 122 518 l 122 0 l 0 0 l 0 737 l 117 737 l 117 604 q 204 719 146 686 q 355 753 262 753 l 355 621 "},"x":{"x_min":0,"x_max":675,"ha":764,"o":"m 675 0 l 525 0 l 331 286 l 144 0 l 0 0 l 256 379 l 12 738 l 157 737 l 336 473 l 516 738 l 661 738 l 412 380 l 675 0 "},"μ":{"x_min":0,"x_max":696.609375,"ha":747,"o":"m 696 -4 q 628 -14 657 -14 q 498 97 513 -14 q 422 8 470 41 q 313 -24 374 -24 q 207 3 258 -24 q 120 80 157 31 l 120 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 172 124 246 q 308 82 216 82 q 451 177 402 82 q 492 358 492 254 l 492 738 l 616 738 l 616 214 q 623 136 616 160 q 673 92 636 92 q 696 95 684 92 l 696 -4 "},"h":{"x_min":0,"x_max":615,"ha":724,"o":"m 615 472 l 615 0 l 490 0 l 490 454 q 456 590 490 535 q 338 654 416 654 q 186 588 251 654 q 122 436 122 522 l 122 0 l 0 0 l 0 1013 l 122 1013 l 122 633 q 218 727 149 694 q 362 760 287 760 q 552 676 484 760 q 615 472 615 600 "},".":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "},"φ":{"x_min":-2,"x_max":878,"ha":974,"o":"m 496 -279 l 378 -279 l 378 -17 q 101 88 204 -17 q -2 367 -2 194 q 68 626 -2 510 q 283 758 151 758 l 283 646 q 167 537 209 626 q 133 373 133 462 q 192 177 133 254 q 378 93 259 93 l 378 758 q 445 764 426 763 q 476 765 464 765 q 765 659 653 765 q 878 377 878 553 q 771 96 878 209 q 496 -17 665 -17 l 496 -279 m 496 93 l 514 93 q 687 183 623 93 q 746 380 746 265 q 691 569 746 491 q 522 658 629 658 l 496 656 l 496 93 "},";":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 -12 q 105 -132 142 -82 q 0 -206 68 -182 l 0 -138 q 58 -82 43 -123 q 68 0 68 -56 l 0 0 l 0 151 l 142 151 l 142 -12 "},"f":{"x_min":0,"x_max":378,"ha":472,"o":"m 378 638 l 246 638 l 246 0 l 121 0 l 121 638 l 0 638 l 0 738 l 121 738 q 137 935 121 887 q 290 1028 171 1028 q 320 1027 305 1028 q 378 1021 334 1026 l 378 908 q 323 918 346 918 q 257 870 273 918 q 246 780 246 840 l 246 738 l 378 738 l 378 638 "},"“":{"x_min":1,"x_max":348.21875,"ha":454,"o":"m 140 670 l 1 670 l 1 830 q 37 943 1 897 q 140 1011 74 990 l 140 947 q 82 900 97 940 q 68 810 68 861 l 140 810 l 140 670 m 348 670 l 209 670 l 209 830 q 245 943 209 897 q 348 1011 282 990 l 348 947 q 290 900 305 940 q 276 810 276 861 l 348 810 l 348 670 "},"A":{"x_min":0.03125,"x_max":906.953125,"ha":1008,"o":"m 906 0 l 756 0 l 648 303 l 251 303 l 142 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 610 421 l 452 867 l 293 421 l 610 421 "},"6":{"x_min":53,"x_max":739,"ha":792,"o":"m 739 312 q 633 62 739 162 q 400 -31 534 -31 q 162 78 257 -31 q 53 439 53 206 q 178 859 53 712 q 441 986 284 986 q 643 912 559 986 q 732 713 732 833 l 601 713 q 544 830 594 786 q 426 875 494 875 q 268 793 331 875 q 193 517 193 697 q 301 597 240 570 q 427 624 362 624 q 643 540 552 624 q 739 312 739 451 m 603 298 q 540 461 603 400 q 404 516 484 516 q 268 461 323 516 q 207 300 207 401 q 269 137 207 198 q 405 83 325 83 q 541 137 486 83 q 603 298 603 197 "},"‘":{"x_min":1,"x_max":139.890625,"ha":236,"o":"m 139 670 l 1 670 l 1 830 q 37 943 1 897 q 139 1011 74 990 l 139 947 q 82 900 97 940 q 68 810 68 861 l 139 810 l 139 670 "},"ϊ":{"x_min":-70,"x_max":283,"ha":361,"o":"m 283 800 l 173 800 l 173 925 l 283 925 l 283 800 m 40 800 l -70 800 l -70 925 l 40 925 l 40 800 m 283 3 q 232 -10 257 -5 q 181 -15 206 -15 q 84 26 118 -15 q 41 200 41 79 l 41 737 l 166 737 l 167 215 q 171 141 167 157 q 225 101 182 101 q 247 103 238 101 q 283 112 256 104 l 283 3 "},"π":{"x_min":-0.21875,"x_max":773.21875,"ha":857,"o":"m 773 -7 l 707 -11 q 575 40 607 -11 q 552 174 552 77 l 552 226 l 552 626 l 222 626 l 222 0 l 97 0 l 97 626 l 0 626 l 0 737 l 773 737 l 773 626 l 676 626 l 676 171 q 695 103 676 117 q 773 90 714 90 l 773 -7 "},"ά":{"x_min":0,"x_max":765.5625,"ha":809,"o":"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 727 407 760 q 563 637 524 695 l 563 738 l 685 738 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 95 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 m 604 1040 l 415 819 l 332 819 l 466 1040 l 604 1040 "},"O":{"x_min":0,"x_max":958,"ha":1057,"o":"m 485 1041 q 834 882 702 1041 q 958 512 958 734 q 834 136 958 287 q 481 -26 702 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 728 q 485 1041 263 1041 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 669 q 480 912 640 912 q 226 784 321 912 q 142 504 142 670 q 226 224 142 339 q 480 98 319 98 "},"n":{"x_min":0,"x_max":615,"ha":724,"o":"m 615 463 l 615 0 l 490 0 l 490 454 q 453 592 490 537 q 331 656 410 656 q 178 585 240 656 q 117 421 117 514 l 117 0 l 0 0 l 0 738 l 117 738 l 117 630 q 218 728 150 693 q 359 764 286 764 q 552 675 484 764 q 615 463 615 593 "},"3":{"x_min":54,"x_max":737,"ha":792,"o":"m 737 284 q 635 55 737 141 q 399 -25 541 -25 q 156 52 248 -25 q 54 308 54 140 l 185 308 q 245 147 185 202 q 395 96 302 96 q 539 140 484 96 q 602 280 602 190 q 510 429 602 390 q 324 454 451 454 l 324 565 q 487 584 441 565 q 565 719 565 617 q 515 835 565 791 q 395 879 466 879 q 255 824 307 879 q 203 661 203 769 l 78 661 q 166 909 78 822 q 387 992 250 992 q 603 921 513 992 q 701 723 701 844 q 669 607 701 656 q 578 524 637 558 q 696 434 655 499 q 737 284 737 369 "},"9":{"x_min":53,"x_max":739,"ha":792,"o":"m 739 524 q 619 94 739 241 q 362 -32 516 -32 q 150 47 242 -32 q 59 244 59 126 l 191 244 q 246 129 191 176 q 373 82 301 82 q 526 161 466 82 q 597 440 597 255 q 363 334 501 334 q 130 432 216 334 q 53 650 53 521 q 134 880 53 786 q 383 986 226 986 q 659 841 566 986 q 739 524 739 719 m 388 449 q 535 514 480 449 q 585 658 585 573 q 535 805 585 744 q 388 873 480 873 q 242 809 294 873 q 191 658 191 745 q 239 514 191 572 q 388 449 292 449 "},"l":{"x_min":41,"x_max":166,"ha":279,"o":"m 166 0 l 41 0 l 41 1013 l 166 1013 l 166 0 "},"¤":{"x_min":40.09375,"x_max":728.796875,"ha":825,"o":"m 728 304 l 649 224 l 512 363 q 383 331 458 331 q 256 363 310 331 l 119 224 l 40 304 l 177 441 q 150 553 150 493 q 184 673 150 621 l 40 818 l 119 898 l 267 749 q 321 766 291 759 q 384 773 351 773 q 447 766 417 773 q 501 749 477 759 l 649 898 l 728 818 l 585 675 q 612 618 604 648 q 621 553 621 587 q 591 441 621 491 l 728 304 m 384 682 q 280 643 318 682 q 243 551 243 604 q 279 461 243 499 q 383 423 316 423 q 487 461 449 423 q 525 553 525 500 q 490 641 525 605 q 384 682 451 682 "},"κ":{"x_min":0,"x_max":632.328125,"ha":679,"o":"m 632 0 l 482 0 l 225 384 l 124 288 l 124 0 l 0 0 l 0 738 l 124 738 l 124 446 l 433 738 l 596 738 l 312 466 l 632 0 "},"4":{"x_min":48,"x_max":742.453125,"ha":792,"o":"m 742 243 l 602 243 l 602 0 l 476 0 l 476 243 l 48 243 l 48 368 l 476 958 l 602 958 l 602 354 l 742 354 l 742 243 m 476 354 l 476 792 l 162 354 l 476 354 "},"p":{"x_min":0,"x_max":685,"ha":786,"o":"m 685 364 q 598 96 685 205 q 350 -23 504 -23 q 121 89 205 -23 l 121 -278 l 0 -278 l 0 738 l 121 738 l 121 633 q 220 726 159 691 q 351 761 280 761 q 598 636 504 761 q 685 364 685 522 m 557 371 q 501 560 557 481 q 330 651 437 651 q 162 559 223 651 q 108 366 108 479 q 162 177 108 254 q 333 87 224 87 q 502 178 441 87 q 557 371 557 258 "},"‡":{"x_min":0,"x_max":777,"ha":835,"o":"m 458 238 l 458 0 l 319 0 l 319 238 l 0 238 l 0 360 l 319 360 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 l 777 804 l 777 683 l 458 683 l 458 360 l 777 360 l 777 238 l 458 238 "},"ψ":{"x_min":0,"x_max":808,"ha":907,"o":"m 465 -278 l 341 -278 l 341 -15 q 87 102 180 -15 q 0 378 0 210 l 0 739 l 133 739 l 133 379 q 182 195 133 275 q 341 98 242 98 l 341 922 l 465 922 l 465 98 q 623 195 563 98 q 675 382 675 278 l 675 742 l 808 742 l 808 381 q 720 104 808 213 q 466 -13 627 -13 l 465 -278 "},"η":{"x_min":0.78125,"x_max":697,"ha":810,"o":"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 720 124 755 q 200 630 193 686 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 "}},"cssFontWeight":"normal","ascender":1189,"underlinePosition":-100,"cssFontStyle":"normal","boundingBox":{"yMin":-334,"xMin":-111,"yMax":1189,"xMax":1672},"resolution":1000,"original_font_information":{"postscript_name":"Helvetiker-Regular","version_string":"Version 1.00 2004 initial release","vendor_url":"http://www.magenta.gr/","full_font_name":"Helvetiker","font_family_name":"Helvetiker","copyright":"Copyright (c) Μagenta ltd, 2004","description":"","trademark":"","designer":"","designer_url":"","unique_font_identifier":"Μagenta ltd:Helvetiker:22-10-104","license_url":"http://www.ellak.gr/fonts/MgOpen/license.html","license_description":"Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license (\"Fonts\") and associated documentation files (the \"Font Software\"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \r\n\r\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\r\n\r\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word \"MgOpen\", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\r\n\r\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the \"MgOpen\" name.\r\n\r\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \r\n\r\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.","manufacturer_name":"Μagenta ltd","font_sub_family_name":"Regular"},"descender":-334,"familyName":"Helvetiker","lineHeight":1522,"underlineThickness":50}
----
rendering/EdgeManager.ts
import {
    Scene,
    InstancedMesh,
    Matrix4,
    Vector3,
    BufferGeometry,
    Object3D,
    Material,
    BufferAttribute
} from 'three';
import { Settings } from '../types/settings';
import { Edge } from '../core/types';
import { MaterialFactory } from './factories/MaterialFactory';

export class EdgeManager {
    private scene: Scene;
    private edgeGeometry: BufferGeometry;
    private edgeMaterial: Material;
    private instancedMesh: InstancedMesh | null = null;
    private materialFactory: MaterialFactory;

    // Reusable objects for calculations
    private readonly startPos = new Vector3();
    private readonly endPos = new Vector3();
    private readonly tempObject = new Object3D();
    private readonly direction = new Vector3();
    private readonly position = new Vector3();
    private readonly matrix = new Matrix4();

    // Batch size for matrix updates
    private static readonly BATCH_SIZE = 1000;
    private pendingUpdates: Set<number> = new Set();
    private updateScheduled = false;

    constructor(scene: Scene, settings: Settings) {
        this.scene = scene;
        this.materialFactory = MaterialFactory.getInstance();
        
        // Create simple edge geometry (just a line segment)
        this.edgeGeometry = new BufferGeometry();
        const vertices = new Float32Array([
            0, -0.5, 0,  // bottom
            0, 0.5, 0    // top
        ]);
        this.edgeGeometry.setAttribute('position', new BufferAttribute(vertices, 3));
        
        this.edgeMaterial = this.materialFactory.getEdgeMaterial(settings);
        this.setupInstancedMesh();
    }

    private setupInstancedMesh() {
        this.instancedMesh = new InstancedMesh(this.edgeGeometry, this.edgeMaterial, 1000);
        this.instancedMesh.count = 0;
        this.instancedMesh.frustumCulled = true; // Enable frustum culling
        this.scene.add(this.instancedMesh);
    }

    public handleSettingsUpdate(settings: Settings): void {
        this.materialFactory.updateMaterial('edge', settings);
    }

    private scheduleBatchUpdate(): void {
        if (this.updateScheduled) return;
        this.updateScheduled = true;

        requestAnimationFrame(() => {
            this.processBatchUpdate();
            this.updateScheduled = false;
        });
    }

    private processBatchUpdate(): void {
        if (!this.instancedMesh || this.pendingUpdates.size === 0) return;

        let processed = 0;
        this.pendingUpdates.forEach(index => {
            if (processed >= EdgeManager.BATCH_SIZE) return;

            const edge = this.currentEdges[index];
            if (!edge?.sourcePosition || !edge?.targetPosition) return;

            // Set positions
            this.startPos.set(
                edge.sourcePosition.x,
                edge.sourcePosition.y,
                edge.sourcePosition.z
            );
            this.endPos.set(
                edge.targetPosition.x,
                edge.targetPosition.y,
                edge.targetPosition.z
            );

            // Calculate direction and length
            this.direction.subVectors(this.endPos, this.startPos);
            const length = this.direction.length();
            
            if (length === 0) return;

            // Position at midpoint
            this.position.addVectors(this.startPos, this.endPos).multiplyScalar(0.5);
            
            // Calculate direction
            this.direction.subVectors(this.endPos, this.startPos).normalize();
            
            // Use Object3D to handle transformations
            this.tempObject.position.copy(this.position);
            this.tempObject.scale.set(0.1, length, 0.1);
            this.tempObject.lookAt(this.endPos);
            this.tempObject.updateMatrix();
            
            // Copy the transformation matrix
            this.matrix.copy(this.tempObject.matrix);
            
            this.instancedMesh!.setMatrixAt(index, this.matrix);
            
            processed++;
            this.pendingUpdates.delete(index);
        });

        if (processed > 0) {
            this.instancedMesh.instanceMatrix.needsUpdate = true;
        }

        if (this.pendingUpdates.size > 0) {
            this.scheduleBatchUpdate();
        }
    }

    private currentEdges: Edge[] = [];

    updateEdges(edges: Edge[]) {
        const mesh = this.instancedMesh;
        if (!mesh) return;
        
        mesh.count = edges.length;
        this.currentEdges = edges;

        // Queue all edges for update
        for (let i = 0; i < edges.length; i++) {
            this.pendingUpdates.add(i);
        }

        this.scheduleBatchUpdate();
    }

    dispose() {
        if (this.instancedMesh) {
            this.instancedMesh.geometry.dispose();
            this.instancedMesh.material.dispose();
            this.scene.remove(this.instancedMesh);
        }
        this.pendingUpdates.clear();
    }
}

----
rendering/EnhancedNodeManager.ts
import {
    Scene,
    InstancedMesh,
    Matrix4,
    Vector3,
    Mesh,
    Object3D,
    Quaternion,
    BufferGeometry,
    Material,
    PerspectiveCamera
} from 'three';
import { NodeData } from '../core/types';
import { Settings } from '../types/settings';
import { MetadataVisualizer } from './MetadataVisualizer';
import { XRHandWithHaptics } from '../types/xr';
import { GeometryFactory } from './factories/GeometryFactory';
import { MaterialFactory } from './factories/MaterialFactory';
import { HologramShaderMaterial } from './materials/HologramShaderMaterial';

interface NodePosition {
    position: [number, number, number];
    velocity: [number, number, number];
}

export class EnhancedNodeManager {
    private scene: Scene;
    private settings: Settings;
    private nodes: Map<string, Mesh> = new Map();
    private nodeGeometry: BufferGeometry;
    private nodeMaterial: Material;
    private instancedMesh: InstancedMesh | null = null;
    private tempMatrix = new Matrix4();
    private tempVector = new Vector3();
    private tempQuaternion = new Quaternion();

    public updateNodePositions(nodeData: NodePosition[]): void {
        const mesh = this.instancedMesh;
        if (!mesh) return;

        const scale = new Vector3(1, 1, 1);
        
        nodeData.forEach((data, index) => {
            const [x, y, z] = data.position;
            this.tempVector.set(x, y, z);
            this.tempMatrix.compose(
                this.tempVector,
                this.tempQuaternion,
                scale
            );
            mesh.setMatrixAt(index, this.tempMatrix);
        });

        // Mark instance matrix as needing update
        mesh.instanceMatrix.needsUpdate = true;
    }
    private dummy = new Object3D();
    private geometryFactory: GeometryFactory;
    private materialFactory: MaterialFactory;
    private isInstanced: boolean;
    private isHologram: boolean = false;
    private hologramMaterial: HologramShaderMaterial | null = null;
    private metadataMaterial: Material | null = null;
    private metadataVisualizer: MetadataVisualizer;
    private quaternion = new Quaternion();
    private camera: PerspectiveCamera;

    constructor(scene: Scene, settings: Settings) {
        this.scene = scene;
        this.settings = settings;

        // Find the camera in the scene
        let camera: PerspectiveCamera | null = null;
        scene.traverse((object) => {
            if (object instanceof PerspectiveCamera) {
                camera = object;
            }
        });
        if (!camera) {
            camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, 5, 20);
            camera.lookAt(0, 0, 0);
            scene.add(camera);
        }
        this.camera = camera;

        this.geometryFactory = GeometryFactory.getInstance();
        this.materialFactory = MaterialFactory.getInstance();
        this.isInstanced = settings.visualization.nodes.enableInstancing;
        this.nodeGeometry = this.geometryFactory.getNodeGeometry(settings.visualization.nodes.quality);
        this.nodeMaterial = this.materialFactory.getNodeMaterial(settings);
        this.isHologram = settings.visualization.nodes.enableHologram;

        if (this.settings.visualization.nodes.enableHologram) {
            this.hologramMaterial = this.materialFactory.getHologramMaterial(settings);
        }

        this.metadataMaterial = this.materialFactory.getMetadataMaterial();

        // Initialize MetadataVisualizer with both camera and scene
        this.metadataVisualizer = new MetadataVisualizer(this.camera, this.scene, settings);
        this.setupInstancedMesh();
    }

    private setupInstancedMesh() {
        if (this.isInstanced) {
            this.instancedMesh = new InstancedMesh(this.nodeGeometry, this.nodeMaterial, 1000);
            this.instancedMesh.count = 0;
            // Enable both default and AR layers for the instanced mesh
            this.instancedMesh.layers.enable(0);
            this.instancedMesh.layers.enable(1);
            this.scene.add(this.instancedMesh);
        }
    }

    public updateNodePositionsAndVelocities(nodes: { position: [number, number, number]; velocity: [number, number, number] }[]): void {
        if (!this.instancedMesh) return;
    
        nodes.forEach((node, i) => {
            this.dummy.position.set(node.position[0], node.position[1], node.position[2]);
    
            // Get base scale from settings
            const baseScale = this.settings.visualization.nodes.baseSize;
            
            // Calculate velocity-based scale with much smaller effect
            const velocityMagnitude = Math.sqrt(
                node.velocity[0] * node.velocity[0] +
                node.velocity[1] * node.velocity[1] +
                node.velocity[2] * node.velocity[2]
            );
            // Limit velocity effect to 10% increase
            const scaleFactor = baseScale * (1 + Math.min(velocityMagnitude * 0.1, 0.1));
            this.dummy.scale.set(scaleFactor, scaleFactor, scaleFactor);
    
            this.dummy.updateMatrix();
            this.instancedMesh?.setMatrixAt(i, this.dummy.matrix);
        });
    
        if (this.instancedMesh) {
            this.instancedMesh.instanceMatrix.needsUpdate = true;
        }
    }

    public handleSettingsUpdate(settings: Settings): void {
        // Always update materials first
        const newMaterial = this.materialFactory.getNodeMaterial(settings);
        if (this.nodeMaterial !== newMaterial) {
            this.nodeMaterial = newMaterial;
            // Update material for non-instanced nodes
            if (!this.isInstanced) {
                this.nodes.forEach(node => {
                    node.material = this.nodeMaterial;
                });
            }
        }

        // Update geometry if needed
        const newGeometry = this.geometryFactory.getNodeGeometry(settings.visualization.nodes.quality);
        if (this.nodeGeometry !== newGeometry) {
            this.nodeGeometry = newGeometry;
            if (this.instancedMesh) {
                this.instancedMesh.geometry = this.nodeGeometry;
            }
            if (!this.isInstanced) {
                this.nodes.forEach(node => {
                    node.geometry = this.nodeGeometry;
                });
            }
        }

        this.settings = settings;
        
        // Update node material
        this.nodeMaterial = this.materialFactory.getNodeMaterial(settings);


        this.materialFactory.updateMaterial('node-basic', settings);
        this.materialFactory.updateMaterial('node-phong', settings);
        this.materialFactory.updateMaterial('edge', settings);
        if (this.isHologram) {
            this.materialFactory.updateMaterial('hologram', settings);
        }

        const newIsInstanced = settings.visualization.nodes.enableInstancing;
        const newIsHologram = settings.visualization.nodes.enableHologram;

        if (newIsInstanced !== this.isInstanced || newIsHologram !== this.isHologram) {
            this.isInstanced = newIsInstanced;
            this.isHologram = newIsHologram;
            this.rebuildInstancedMesh();
        }

        if (settings.visualization.nodes.enableMetadataVisualization && this.metadataMaterial) {
            const serverSupportsMetadata = true;
            if (serverSupportsMetadata) {
                // Apply metadata material and update visualization
            } else {
                // Disable metadata visualization
            }
        }
    }

    private rebuildInstancedMesh() {
        // Clean up old mesh if it exists
        if (this.instancedMesh) {
            this.instancedMesh.geometry.dispose();
            this.instancedMesh.material.dispose();
            this.scene.remove(this.instancedMesh);
        }
        if (this.isInstanced) {
            this.instancedMesh = new InstancedMesh(this.nodeGeometry, this.nodeMaterial, 1000);
            this.instancedMesh.count = 0;
            // Enable both default and AR layers for the instanced mesh
            this.instancedMesh.layers.enable(0);
            this.instancedMesh.layers.enable(1);
            this.scene.add(this.instancedMesh);
        }
    }

    updateNodes(nodes: { id: string, data: NodeData }[]) {
        // Clear existing non-instanced nodes if they exist
        if (!this.isInstanced) {
            this.nodes.forEach(node => {
                this.scene.remove(node);
                if (node.geometry) node.geometry.dispose();
                if (node.material) node.material.dispose();
            });
            this.nodes.clear();
        }

        if (this.isInstanced && this.instancedMesh) {
            this.instancedMesh.count = nodes.length;
        }

        nodes.forEach((node, index) => {
            const metadata = {
                id: node.id,
                name: node.data.metadata?.name || '',
                commitAge: this.calculateCommitAge(node.data.metadata?.lastModified || Date.now()),
                hyperlinkCount: node.data.metadata?.links?.length || 0,
                importance: this.calculateImportance({ id: node.id, data: node.data }),
                position: {
                    x: node.data.position.x,
                    y: node.data.position.y,
                    z: node.data.position.z
                }
            };

            const matrix = new Matrix4();

            if (this.settings.visualization.nodes.enableMetadataShape) {
                // Handle metadata visualization case
                const nodeMesh = this.metadataVisualizer.createNodeMesh(metadata);
                nodeMesh.position.set(metadata.position.x, metadata.position.y, metadata.position.z);
                this.scene.add(nodeMesh);
            } else {
                const scale = this.calculateNodeScale(metadata.importance);
                const position = new Vector3(metadata.position.x, metadata.position.y, metadata.position.z);

                if (this.isInstanced && this.instancedMesh) {
                    // Handle instanced rendering
                    matrix.compose(position, this.quaternion, new Vector3(scale, scale, scale));
                    this.instancedMesh.setMatrixAt(index, matrix);
                } else {
                    // Handle non-instanced rendering
                    const nodeMesh = new Mesh(this.nodeGeometry, this.nodeMaterial);
                    nodeMesh.position.copy(position);
                    nodeMesh.scale.set(scale, scale, scale);
                    nodeMesh.layers.enable(0);
                    nodeMesh.layers.enable(1);
                    this.scene.add(nodeMesh);
                    this.nodes.set(node.id, nodeMesh);
                }
            }
        });

        if (this.isInstanced && this.instancedMesh) {
            this.instancedMesh.instanceMatrix.needsUpdate = true;
        }
    }

    private calculateCommitAge(timestamp: number): number {
        const now = Date.now();
        return (now - timestamp) / (1000 * 60 * 60 * 24); // Convert to days
    }

    private calculateImportance(node: { id: string, data: NodeData }): number {
        const linkFactor = node.data.metadata?.links ? node.data.metadata.links.length / 20 : 0;
        const referenceFactor = node.data.metadata?.references ? node.data.metadata.references.length / 10 : 0;
        return Math.min(linkFactor + referenceFactor, 1);
    }

    private calculateNodeScale(importance: number): number {
        const [min, max] = this.settings.visualization.nodes.sizeRange;
        return min + (max - min) * importance;
    }

    update(deltaTime: number) {
        if (this.isHologram && this.hologramMaterial) {
            this.hologramMaterial.update(deltaTime);
        }

        if (this.settings.visualization.animations.enableNodeAnimations) {
            if (this.instancedMesh) {
                this.instancedMesh.instanceMatrix.needsUpdate = true;
            }
            this.scene.traverse(child => {
                if (child instanceof Mesh) {
                    child.rotateY(0.001 * deltaTime);
                }
            });
        }
    }

    handleHandInteraction(hand: XRHandWithHaptics) {
        const position = new Vector3();
        const indexTip = hand.hand.joints['index-finger-tip'] as Object3D | undefined;
        if (indexTip) {
            position.setFromMatrixPosition(indexTip.matrixWorld);
            if (this.isHologram && this.hologramMaterial) {
                this.hologramMaterial.handleInteraction(position);
            }
        }
    }

    dispose() {
        if (this.instancedMesh) {
            this.instancedMesh.geometry.dispose();
            this.instancedMesh.material.dispose();
            this.scene.remove(this.instancedMesh);
        }
        if (this.isHologram && this.hologramMaterial) {
            this.hologramMaterial.dispose();
        }
        if (this.metadataMaterial) {
            this.metadataMaterial.dispose();
        }
    }

    public createNode(id: string, data: NodeData): void {
        const position = new Vector3(data.position.x, data.position.y, data.position.z);
        const scale = this.calculateNodeScale(this.calculateImportance({ id, data }));
        
        if (this.settings.visualization.nodes.enableMetadataShape) {
            const nodeMesh = this.metadataVisualizer.createNodeMesh({
                id,
                name: data.metadata?.name || '',
                commitAge: this.calculateCommitAge(data.metadata?.lastModified || Date.now()),
                hyperlinkCount: data.metadata?.links?.length || 0,
                importance: this.calculateImportance({ id, data }),
                position: data.position
            });
            // Enable both default and AR layers
            nodeMesh.layers.enable(0);
            nodeMesh.layers.enable(1);
            this.nodes.set(id, nodeMesh);
            this.scene.add(nodeMesh);
        } else if (this.instancedMesh) {
            const matrix = new Matrix4();
            matrix.compose(position, this.quaternion, new Vector3(scale, scale, scale));
            const index = this.nodes.size;
            this.instancedMesh.setMatrixAt(index, matrix);
            this.instancedMesh.count = index + 1;
            this.instancedMesh.instanceMatrix.needsUpdate = true;
            // Enable both default and AR layers for the instanced mesh
            this.instancedMesh.layers.enable(0);
            this.instancedMesh.layers.enable(1);
            // Store a reference to the instanced mesh for this node
            this.nodes.set(id, this.instancedMesh);
        }
    }
}

----
rendering/HologramManager.ts
import {
    Scene,
    Group,
    Mesh,
    Vector3,
    WebGLRenderer
} from 'three';
import { Settings } from '../types/settings';
import { GeometryFactory } from './factories/GeometryFactory';
import { MaterialFactory } from './factories/MaterialFactory';
import { HologramShaderMaterial } from './materials/HologramShaderMaterial';

export class HologramManager {
    private readonly group = new Group();
    private isXRMode = false;
    private readonly geometryFactory: GeometryFactory;
    private readonly materialFactory: MaterialFactory;

    constructor(
        private readonly scene: Scene,
        _renderer: WebGLRenderer,  // Used by subclasses
        private settings: Settings
    ) {
        this.geometryFactory = GeometryFactory.getInstance();
        this.materialFactory = MaterialFactory.getInstance();
        this.createHolograms();
        this.scene.add(this.group);
    }

    private createHolograms() {
        while (this.group.children.length > 0) {
            const child = this.group.children[0];
            this.group.remove(child);
            if (child instanceof Mesh) {
                child.geometry.dispose();
                child.material.dispose();
            }
        }

        const quality = this.isXRMode ? 'high' : this.settings.xr.quality;
        const material = this.materialFactory.getHologramMaterial(this.settings);

        for (let i = 0; i < this.settings.visualization.hologram.ringCount; i++) {
            const ring = new Mesh(
                this.geometryFactory.getHologramGeometry('ring', quality),
                material.clone()
            );
            const scale = this.settings.visualization.hologram.ringSizes[i] || 20;
            ring.scale.set(scale, scale, scale);
            ring.rotateX(Math.PI / 2 * i);
            ring.rotateY(Math.PI / 4 * i);
            ring.userData.rotationSpeed = this.settings.visualization.hologram.ringRotationSpeed * (i + 1);
            this.group.add(ring);
        }

        if (this.settings.visualization.hologram.enableBuckminster) {
            const mesh = new Mesh(
                this.geometryFactory.getHologramGeometry('buckminster', quality),
                material.clone()
            );
            const scale = this.settings.visualization.hologram.buckminsterScale;
            mesh.scale.set(scale, scale, scale);
            (mesh.material as HologramShaderMaterial).uniforms.opacity.value = this.settings.visualization.hologram.buckminsterOpacity;
            this.group.add(mesh);
        }

        if (this.settings.visualization.hologram.enableGeodesic) {
            const mesh = new Mesh(
                this.geometryFactory.getHologramGeometry('geodesic', quality),
                material.clone()
            );
            const scale = this.settings.visualization.hologram.geodesicScale;
            mesh.scale.set(scale, scale, scale);
            (mesh.material as HologramShaderMaterial).uniforms.opacity.value = this.settings.visualization.hologram.geodesicOpacity;
            this.group.add(mesh);
        }

        if (this.settings.visualization.hologram.enableTriangleSphere) {
            const mesh = new Mesh(
                this.geometryFactory.getHologramGeometry('triangleSphere', quality),
                material.clone()
            );
            const scale = this.settings.visualization.hologram.triangleSphereScale;
            mesh.scale.set(scale, scale, scale);
            (mesh.material as HologramShaderMaterial).uniforms.opacity.value = this.settings.visualization.hologram.triangleSphereOpacity;
            this.group.add(mesh);
        }
    }

    setXRMode(enabled: boolean) {
        this.isXRMode = enabled;
        this.group.traverse(child => {
            if (child instanceof Mesh && child.material instanceof HologramShaderMaterial) {
                child.material.defines = { USE_AR: '' };
                child.material.needsUpdate = true;
            }
        });
        this.createHolograms();
    }

    handleInteraction(position: Vector3) {
        this.group.traverse(child => {
            if (child instanceof Mesh && child.material instanceof HologramShaderMaterial) {
                const distance = position.distanceTo(child.position);
                if (distance < 0.5) {
                    child.material.uniforms.pulseIntensity.value = 0.4;
                    setTimeout(() => {
                        if (child.material instanceof HologramShaderMaterial) {
                            child.material.uniforms.pulseIntensity.value = 0.2;
                        }
                    }, 500);
                }
            }
        });
    }

    update(deltaTime: number) {
        this.group.traverse(child => {
            if (child instanceof Mesh) {
                child.rotateY((child.userData.rotationSpeed || this.settings.visualization.hologram.globalRotationSpeed) * deltaTime);
                if (child.material instanceof HologramShaderMaterial) {
                    child.material.uniforms.time.value += deltaTime;
                }
            }
        });
    }

    updateSettings(newSettings: Settings) {
        this.settings = newSettings;
        this.materialFactory.updateMaterial('hologram', this.settings);
        this.createHolograms();
    }

    getGroup() {
        return this.group;
    }

    dispose() {
        // Geometries and materials are managed by the factories
        this.scene.remove(this.group);
    }
}

----
rendering/MetadataVisualizer.ts
import { 
    Color, 
    Matrix4, 
    Mesh, 
    PerspectiveCamera, 
    Scene, 
    Vector3, 
    Material,
    MeshBasicMaterial,
    Quaternion
} from 'three';
import { GeometryFactory } from './factories/GeometryFactory';
import { MaterialFactory } from './factories/MaterialFactory';
import { Metadata } from '../types/metadata';
import { Settings } from '../types/settings';
import { defaultSettings } from '../state/defaultSettings';

export class MetadataVisualizer {
    private readonly camera: PerspectiveCamera;
    private readonly scene: Scene;
    private readonly geometryFactory: GeometryFactory;
    private readonly materialFactory: MaterialFactory;
    private settings: Settings;
    private nodes: Map<string, Mesh> = new Map();

    constructor(camera: PerspectiveCamera, scene: Scene, settings: Settings = defaultSettings) {
        this.camera = camera;
        this.scene = scene;
        this.settings = settings;
        this.geometryFactory = GeometryFactory.getInstance();
        this.materialFactory = MaterialFactory.getInstance();
    }

    public createNodeMesh(metadata: Metadata): Mesh {
        const geometry = this.geometryFactory.getNodeGeometry(this.settings.xr.quality);
        const material = this.materialFactory.getMetadataMaterial();
        
        const mesh = new Mesh(geometry, material);
        mesh.position.set(
            metadata.position?.x || 0,
            metadata.position?.y || 0,
            metadata.position?.z || 0
        );
        
        this.nodes.set(metadata.id, mesh);
        this.scene.add(mesh);
        
        return mesh;
    }

    public dispose(): void {
        this.nodes.forEach(mesh => {
            this.scene.remove(mesh);
            mesh.geometry.dispose();
            if (Array.isArray(mesh.material)) {
                mesh.material.forEach(m => m.dispose());
            } else {
                mesh.material.dispose();
            }
        });
        this.nodes.clear();
    }

    public updateNodeMetadata(
        mesh: Mesh,
        _age: number,
        linkCount: number,
        material: Material
    ): void {
        // Calculate color based on link count
        if (material instanceof MeshBasicMaterial) {
            // Simple color interpolation based on link count
            const intensity = Math.min(linkCount / 10, 1); // Cap at 10 links
            
            // Convert RGB values to hex
            const red = Math.floor(intensity * 255);
            const green = Math.floor((1 - intensity) * 255);
            const blue = 0;
            const hexColor = (red << 16) | (green << 8) | blue;
            
            // Create and assign color
            const newColor = new Color(hexColor);
            material.color = newColor;
        }

        // Update mesh orientation to face camera
        const meshPosition = mesh.position;
        const cameraPosition = this.camera.position;

        // Calculate direction from mesh to camera
        const direction = new Vector3()
            .subVectors(cameraPosition, meshPosition)
            .normalize();

        // Calculate up vector (world up)
        const up = new Vector3(0, 1, 0);

        // Calculate right vector
        const right = new Vector3()
            .crossVectors(up, direction)
            .normalize();

        // Recalculate up vector to ensure orthogonality
        up.crossVectors(direction, right).normalize();

        // Create rotation matrix
        const rotationMatrix = new Matrix4();
        rotationMatrix.elements = [
            right.x, up.x, direction.x, 0,
            right.y, up.y, direction.y, 0,
            right.z, up.z, direction.z, 0,
            0, 0, 0, 1
        ];

        // Create quaternion from direction
        const quaternion = new Quaternion();
        const m = rotationMatrix.elements;
        const trace = m[0] + m[5] + m[10];

        if (trace > 0) {
            const s = 0.5 / Math.sqrt(trace + 1.0);
            quaternion.w = 0.25 / s;
            quaternion.x = (m[6] - m[9]) * s;
            quaternion.y = (m[8] - m[2]) * s;
            quaternion.z = (m[1] - m[4]) * s;
        } else {
            if (m[0] > m[5] && m[0] > m[10]) {
                const s = 2.0 * Math.sqrt(1.0 + m[0] - m[5] - m[10]);
                quaternion.w = (m[6] - m[9]) / s;
                quaternion.x = 0.25 * s;
                quaternion.y = (m[1] + m[4]) / s;
                quaternion.z = (m[8] + m[2]) / s;
            } else if (m[5] > m[10]) {
                const s = 2.0 * Math.sqrt(1.0 + m[5] - m[0] - m[10]);
                quaternion.w = (m[8] - m[2]) / s;
                quaternion.x = (m[1] + m[4]) / s;
                quaternion.y = 0.25 * s;
                quaternion.z = (m[6] + m[9]) / s;
            } else {
                const s = 2.0 * Math.sqrt(1.0 + m[10] - m[0] - m[5]);
                quaternion.w = (m[1] - m[4]) / s;
                quaternion.x = (m[8] + m[2]) / s;
                quaternion.y = (m[6] + m[9]) / s;
                quaternion.z = 0.25 * s;
            }
        }

        // Apply rotation
        mesh.quaternion.x = quaternion.x;
        mesh.quaternion.y = quaternion.y;
        mesh.quaternion.z = quaternion.z;
        mesh.quaternion.w = quaternion.w;
    }
}

----
rendering/VisualizationController.ts
import * as THREE from 'three';
import { MetadataVisualizer } from '../rendering/MetadataVisualizer';
import { HologramManager } from '../rendering/HologramManager';
import { NodeMetadata, HologramSettings } from '../types/metadata';
import { XRHand, XRHandWithHaptics } from '../types/xr';
import { Settings } from '../types/settings';

export class VisualizationController {
    private readonly scene: THREE.Scene;
    private readonly camera: THREE.PerspectiveCamera;
    private readonly renderer: THREE.WebGLRenderer;
    private readonly metadataVisualizer: MetadataVisualizer;
    private readonly hologramManager: HologramManager;
    private clock: THREE.Clock;
    private isXRSession: boolean = false;

    constructor(container: HTMLElement, settings: Settings) {
        this.currentSettings = settings;
        // Initialize Three.js basics
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.renderer = new THREE.WebGLRenderer({
            antialias: true,
            alpha: true,
            logarithmicDepthBuffer: true
        });
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.xr.enabled = true;
        container.appendChild(this.renderer.domElement);

        // Initialize managers
        this.metadataVisualizer = new MetadataVisualizer(this.camera, this.scene, settings);
        this.hologramManager = new HologramManager(this.scene, this.renderer, settings);
        this.clock = new THREE.Clock();

        // Set up XR session change handling
        this.renderer.xr.addEventListener('sessionstart', () => {
            this.isXRSession = true;
            this.hologramManager.setXRMode(true);
        });

        this.renderer.xr.addEventListener('sessionend', () => {
            this.isXRSession = false;
            this.hologramManager.setXRMode(false);
        });

        // Set up window resize handling
        window.addEventListener('resize', this.onWindowResize.bind(this));
    }

    private onWindowResize(): void {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
    }

    public updateNodes(nodes: NodeMetadata[]): void {
        // Clear existing nodes
        this.scene.children
            .filter(child => child.userData.isNode)
            .forEach(node => this.scene.remove(node));

        // Create new nodes
        nodes.forEach(metadata => {
            const nodeMesh = this.metadataVisualizer.createNodeMesh(metadata);
            nodeMesh.userData.isNode = true;
            nodeMesh.position.set(
                metadata.position.x,
                metadata.position.y,
                metadata.position.z
            );
            this.scene.add(nodeMesh);
        });
    }

    private currentSettings: Settings;

    public updateHologramSettings(hologramSettings: Partial<HologramSettings>): void {
        this.currentSettings = {
            ...this.currentSettings,
            visualization: {
                ...this.currentSettings.visualization,
                hologram: {
                    ...this.currentSettings.visualization.hologram,
                    ...hologramSettings
                }
            }
        };
        this.hologramManager.updateSettings(this.currentSettings);
    }

    public handleHandInput(hand: XRHand | XRHandWithHaptics): void {
        if (!this.isXRSession) return;

        let indexTipPosition: THREE.Vector3 | undefined;

        if ('hand' in hand && hand.hand.joints) {
            // XRHandWithHaptics case
            const indexTip = hand.hand.joints['index-finger-tip'];
            if (indexTip) {
                indexTipPosition = indexTip.position;
            }
        } else if ('joints' in hand) {
            // XRHand case
            const indexTip = hand.joints['index-finger-tip'];
            if (indexTip) {
                indexTipPosition = indexTip.position;
            }
        }

        if (indexTipPosition) {
            this.hologramManager.handleInteraction(indexTipPosition);
        }
    }

    public animate(): void {
        const render = () => {
            const delta = this.clock.getDelta();
            
            // Update hologram animations
            this.hologramManager.update(delta);

            // Render scene
            this.renderer.render(this.scene, this.camera);
        };

        this.renderer.setAnimationLoop(render);
    }

    public dispose(): void {
        // Clean up event listeners
        window.removeEventListener('resize', this.onWindowResize.bind(this));

        // Dispose managers
        this.metadataVisualizer.dispose();
        this.hologramManager.dispose();

        // Stop animation loop
        this.renderer.setAnimationLoop(null);

        // Dispose Three.js resources
        this.renderer.dispose();
        this.scene.traverse((object) => {
            if (object instanceof THREE.Mesh) {
                object.geometry.dispose();
                if (Array.isArray(object.material)) {
                    object.material.forEach(material => material.dispose());
                } else {
                    object.material.dispose();
                }
            }
        });
    }
}

----
rendering/nodes.ts
import * as THREE from 'three';
import { Node } from '../core/types';
import { createLogger } from '../core/logger';
import { settingsManager } from '../state/settings';
import type { Settings } from '../types/settings';
import { GeometryFactory } from './factories/GeometryFactory';
import { MaterialFactory } from './factories/MaterialFactory';
import { SettingsObserver } from '../state/SettingsObserver';

const logger = createLogger('NodeManager');

const FLOATS_PER_NODE = 6;  // x, y, z, vx, vy, vz

// Reusable objects for matrix calculations
const matrix = new THREE.Matrix4();
const quaternion = new THREE.Quaternion();
const position = new THREE.Vector3();
const scale = new THREE.Vector3(1, 1, 1);

// Batch size for matrix updates
const MATRIX_UPDATE_BATCH_SIZE = 1000;

export class NodeManager {
    private static instance: NodeManager;
    private currentSettings: Settings;
    private nodeInstances: THREE.InstancedMesh;
    private edgeInstances: THREE.InstancedMesh;
    private currentNodes: Node[] = [];
    private nodeIndices: Map<string, number> = new Map();
    private readonly materialFactory: MaterialFactory;
    private readonly geometryFactory: GeometryFactory;
    private readonly settingsObserver: SettingsObserver;
    
    // Matrix update queue for batching
    private pendingMatrixUpdates: Set<number> = new Set();
    private matrixUpdateScheduled: boolean = false;

    private constructor() {
        this.currentSettings = settingsManager.getCurrentSettings();
        this.materialFactory = MaterialFactory.getInstance();
        this.geometryFactory = GeometryFactory.getInstance();
        this.settingsObserver = SettingsObserver.getInstance();

        // Create node instances with basic material for better performance
        this.nodeInstances = new THREE.InstancedMesh(
            this.geometryFactory.getNodeGeometry(this.currentSettings.xr.quality),
            this.materialFactory.getNodeMaterial(this.currentSettings),
            10000
        );

        // Set AR layer for node instances
        this.nodeInstances.layers.enable(1);
        this.nodeInstances.frustumCulled = true; // Enable frustum culling

        // Create edge instances with simple cylinder geometry
        const edgeGeometry = new THREE.CylinderGeometry(0.05, 0.05, 1, 4);
        edgeGeometry.rotateX(Math.PI / 2); // Align with direction of travel
        
        this.edgeInstances = new THREE.InstancedMesh(
            edgeGeometry,
            this.materialFactory.getEdgeMaterial(this.currentSettings),
            30000
        );

        // Set AR layer for edge instances
        this.edgeInstances.layers.enable(1);
        this.edgeInstances.frustumCulled = true; // Enable frustum culling

        this.setupSettingsSubscriptions();
    }

    private setupSettingsSubscriptions(): void {
        this.settingsObserver.subscribe('NodeManager', (settings) => {
            this.currentSettings = settings;
            this.materialFactory.updateMaterial('node-basic', settings);
            this.materialFactory.updateMaterial('edge', settings);
        });
    }

    public static getInstance(): NodeManager {
        if (!NodeManager.instance) {
            NodeManager.instance = new NodeManager();
        }
        return NodeManager.instance;
    }

    private scheduleBatchUpdate(): void {
        if (this.matrixUpdateScheduled) return;
        this.matrixUpdateScheduled = true;

        requestAnimationFrame(() => {
            this.processBatchUpdate();
            this.matrixUpdateScheduled = false;
        });
    }

    private processBatchUpdate(): void {
        if (!this.nodeInstances || this.pendingMatrixUpdates.size === 0) return;

        let processed = 0;
        this.pendingMatrixUpdates.forEach(index => {
            if (processed >= MATRIX_UPDATE_BATCH_SIZE) {
                return; // Process remaining updates in next batch
            }

            const node = this.currentNodes[index];
            if (!node) return;

            position.set(
                node.data.position.x,
                node.data.position.y + 1.5,
                node.data.position.z
            );

            const baseSize = this.currentSettings.visualization.nodes.baseSize || 1;
            scale.set(baseSize, baseSize, baseSize);

            matrix.compose(position, quaternion, scale);
            this.nodeInstances.setMatrixAt(index, matrix);

            processed++;
            this.pendingMatrixUpdates.delete(index);
        });

        if (processed > 0) {
            this.nodeInstances.instanceMatrix.needsUpdate = true;
        }

        if (this.pendingMatrixUpdates.size > 0) {
            this.scheduleBatchUpdate(); // Schedule next batch if needed
        }
    }

    public updatePositions(positions: Float32Array): void {
        if (!this.nodeInstances) return;

        const count = Math.min(positions.length / FLOATS_PER_NODE, this.nodeInstances.count);
        
        for (let i = 0; i < count; i++) {
            const baseIndex = i * FLOATS_PER_NODE;
            
            const x = positions[baseIndex];
            const y = positions[baseIndex + 1];
            const z = positions[baseIndex + 2];
            
            if (!Number.isFinite(x) || !Number.isFinite(y) || !Number.isFinite(z) ||
                Math.abs(x) > 1000 || Math.abs(y) > 1000 || Math.abs(z) > 1000) {
                logger.warn(`Skipping invalid position for node ${i}: (${x}, ${y}, ${z})`);
                continue;
            }

            this.pendingMatrixUpdates.add(i);
        }

        this.scheduleBatchUpdate();
    }

    public getAllNodeMeshes(): THREE.InstancedMesh[] {
        return [this.nodeInstances];
    }

    public getNodePosition(nodeId: string): THREE.Vector3 {
        const node = this.currentNodes.find(n => n.id === nodeId);
        if (!node) {
            throw new Error(`Node ${nodeId} not found`);
        }
        return new THREE.Vector3(
            node.data.position.x,
            node.data.position.y,
            node.data.position.z
        );
    }

    public updateNodePosition(nodeId: string, newPosition: THREE.Vector3): void {
        const index = this.nodeIndices.get(nodeId);
        if (index === undefined) {
            throw new Error(`Node ${nodeId} not found`);
        }

        const node = this.currentNodes[index];
        if (node) {
            node.data.position = {
                x: newPosition.x,
                y: newPosition.y,
                z: newPosition.z
            };
            this.pendingMatrixUpdates.add(index);
            this.scheduleBatchUpdate();
        }
    }

    public getCurrentNodes(): Node[] {
        return [...this.currentNodes];
    }

    public updateNodes(nodes: Node[]): void {
        this.currentNodes = nodes;
        const positions = new Float32Array(nodes.length * FLOATS_PER_NODE);
        
        nodes.forEach((node, index) => {
            const baseIndex = index * FLOATS_PER_NODE;
            positions[baseIndex] = node.data.position.x;
            positions[baseIndex + 1] = node.data.position.y + 1.5;
            positions[baseIndex + 2] = node.data.position.z;
            positions[baseIndex + 3] = 0;
            positions[baseIndex + 4] = 0;
            positions[baseIndex + 5] = 0;
            
            this.nodeIndices.set(node.id, index);
        });
        
        this.updatePositions(positions);
    }

    public dispose(): void {
        if (this.nodeInstances) {
            this.nodeInstances.geometry.dispose();
            this.nodeInstances.material.dispose();
        }
        if (this.edgeInstances) {
            this.edgeInstances.geometry.dispose();
            this.edgeInstances.material.dispose();
        }
        this.pendingMatrixUpdates.clear();
    }
}

----
rendering/renderManager.ts
 
----
rendering/textRenderer.ts
import type { Settings, LabelSettings } from '../types/settings';
import { settingsManager } from '../state/settings';
import { createLogger } from '../core/logger';
import * as THREE from 'three';

const logger = createLogger('TextRenderer');

interface LabelState {
    text: string;
    position: THREE.Vector3;
    visible: boolean;
    boundingBox?: THREE.Object3D;
}

export class TextRenderer {
    private labels: Map<string, THREE.Group>;
    private camera: THREE.Camera;
    private labelStates: Map<string, LabelState>;
    private unsubscribers: Array<() => void> = [];
    private projMatrix: THREE.Matrix4;
    private viewMatrix: THREE.Matrix4;
    private currentSettings: Settings;
    private settings: LabelSettings;
    private group: THREE.Group;

    constructor(camera: THREE.Camera) {
        this.camera = camera;
        this.labels = new Map();
        this.labelStates = new Map();
        this.projMatrix = new THREE.Matrix4();
        this.viewMatrix = new THREE.Matrix4();
        this.currentSettings = settingsManager.getCurrentSettings();
        this.settings = this.currentSettings.visualization.labels;
        this.group = new THREE.Group();
        this.setupSettingsSubscriptions();
    }

    private setupSettingsSubscriptions(): void {
        Object.keys(this.currentSettings.visualization.labels).forEach(setting => {
            const path = `visualization.labels.${setting}`;
            const unsubscribe = settingsManager.subscribe(path, (value) => {
                this.handleSettingChange(setting as keyof LabelSettings, value);
            });
            this.unsubscribers.push(unsubscribe);
        });
    }

    private handleSettingChange(setting: keyof LabelSettings, value: any): void {
        try {
            switch (setting) {
                case 'desktopFontSize':
                    this.updateFontSize(value as number);
                    break;
                case 'textColor':
                    this.updateTextColor(value as string);
                    break;
                case 'enableLabels':
                    this.updateLabelVisibility(value as boolean);
                    break;
                default:
                    // Other settings handled elsewhere
                    break;
            }
        } catch (error) {
            logger.error(`Error handling setting change for ${setting}:`, error);
        }
    }

    private updateFontSize(fontSize: number): void {
        if (!this.labels) return;
        
        this.labels.forEach((group) => {
            group.children.forEach((child) => {
                if (child instanceof THREE.Mesh && child.userData.text) {
                    const material = child.material as THREE.MeshBasicMaterial;
                    material.dispose();
                    
                    // Create new text geometry with updated font size
                    const geometry = this.createTextGeometry(child.userData.text, {
                        fontSize,
                        position: child.position.clone()
                    });
                    
                    // Replace old geometry
                    child.geometry.dispose();
                    child.geometry = geometry;
                }
            });
        });
    }

    private createTextGeometry(text: string, { fontSize, position }: { fontSize: number; position: THREE.Vector3 }): THREE.BufferGeometry {
        // Create a simple plane geometry as a placeholder
        // In a real implementation, this would create actual text geometry based on the font and text
        const width = fontSize * text.length * 0.5;
        const height = fontSize;
        
        // Create vertices for a simple plane
        const vertices = new Float32Array([
            -width/2 + position.x, -height/2 + position.y, position.z,  // bottom left
            width/2 + position.x, -height/2 + position.y, position.z,   // bottom right
            width/2 + position.x, height/2 + position.y, position.z,    // top right
            -width/2 + position.x, height/2 + position.y, position.z    // top left
        ]);

        // Create UVs
        const uvs = new Float32Array([
            0, 0,  // bottom left
            1, 0,  // bottom right
            1, 1,  // top right
            0, 1   // top left
        ]);

        // Create indices
        const indices = new Uint16Array([
            0, 1, 2,  // first triangle
            0, 2, 3   // second triangle
        ]);

        // Create normals (facing forward in this case)
        const normals = new Float32Array([
            0, 0, 1,
            0, 0, 1,
            0, 0, 1,
            0, 0, 1
        ]);

        const geometry = new THREE.BufferGeometry();
        geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
        geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));
        geometry.setAttribute('uv', new THREE.BufferAttribute(uvs, 2));
        geometry.setIndex(new THREE.BufferAttribute(indices, 1));

        return geometry;
    }

    private updateTextColor(newColor: string): void {
        if (!this.labels) return;
        
        this.labels.forEach((group) => {
            group.children.forEach((child) => {
                if (child instanceof THREE.Mesh) {
                    const material = child.material as THREE.MeshBasicMaterial;
                    material.color.set(newColor);
                    material.dispose();
                    material.color.set(newColor);
                }
            });
        });
    }

    private updateLabelVisibility(visible: boolean): void {
        // Update visibility for all labels
        this.labels.forEach((labelGroup) => {
            labelGroup.visible = visible;
        });
    }

    public updateLabel(id: string, text: string, position: THREE.Vector3): void {
        try {
            let labelGroup = this.labels.get(id);
            if (!labelGroup) {
                labelGroup = new THREE.Group();
                this.labels.set(id, labelGroup);
                this.group.add(labelGroup);
            }

            const state: LabelState = {
                text,
                position: position.clone(),
                visible: true
            };
            this.labelStates.set(id, state);

            // Update style and position
            this.updateLabelStyle(labelGroup, state);
        } catch (error) {
            logger.error('Error updating label:', error);
        }
    }

    private updateLabelStyle(labelGroup: THREE.Group, state: LabelState): void {
        try {
            // Update position
            labelGroup.position.copy(state.position);

            // Update text content and style
            // Implementation depends on how you're rendering text
            // (e.g., using HTML elements, sprites, or geometry)

            // Update visibility
            labelGroup.visible = this.settings.enableLabels && state.visible;

            // Update bounding box for culling
            state.boundingBox = labelGroup;
        } catch (error) {
            logger.error('Error updating label style:', error);
        }
    }

    public removeLabel(id: string): void {
        try {
            const labelGroup = this.labels.get(id);
            if (labelGroup) {
                this.group.remove(labelGroup);
                // Clean up THREE.js objects
                this.clearLabels();
                this.labels.delete(id);
                this.labelStates.delete(id);
            }
        } catch (error) {
            logger.error('Error removing label:', error);
        }
    }

    private clearLabels(): void {
        if (!this.labels) return;
        
        this.labels.forEach((group) => {
            while (group.children.length > 0) {
                const child = group.children[0];
                group.remove(child);
                if (child instanceof THREE.Mesh) {
                    child.geometry.dispose();
                    if (child.material instanceof THREE.Material) {
                        child.material.dispose();
                    }
                }
            }
        });
    }

    public update(): void {
        try {
            // Update projection and view matrices
            this.camera.updateMatrixWorld();
            this.projMatrix.copy(this.camera.projectionMatrix);
            this.viewMatrix.copy(this.camera.matrixWorldInverse);

            // Update label positions and visibility
            this.labelStates.forEach((state, id) => {
                const labelGroup = this.labels.get(id);
                if (!labelGroup) return;

                // Update label position and style
                this.updateLabelStyle(labelGroup, state);
            });
        } catch (error) {
            logger.error('Error updating labels:', error);
        }
    }

    public dispose(): void {
        try {
            // Clean up THREE.js objects
            this.clearLabels();
            this.labels.clear();
            this.labelStates.clear();

            // Clean up subscribers
            this.unsubscribers.forEach(unsubscribe => unsubscribe());
            this.unsubscribers = [];

            // Clean up group
            if (this.group.parent) {
                this.group.parent.remove(this.group);
            }
        } catch (error) {
            logger.error('Error disposing TextRenderer:', error);
        }
    }

    public handleSettingsUpdate(settings: LabelSettings): void {
        this.settings = settings;
        this.updateLabelVisibility(settings.enableLabels);
        this.updateFontSize(settings.desktopFontSize);
        this.updateTextColor(settings.textColor);
    }

    public getGroup(): THREE.Group {
        return this.group;
    }
}

----
rendering/scene.ts
/**
 * Three.js scene management with simplified setup
 */

import { Scene, PerspectiveCamera, WebGLRenderer, Color, AmbientLight, DirectionalLight, GridHelper, Vector2, Material, Mesh, Object3D } from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';
import { createLogger } from '../core/utils';
import { Settings } from '../types/settings';

const logger = createLogger('SceneManager');

// Constants
const BACKGROUND_COLOR = 0x212121;  // Material Design Grey 900

export class SceneManager {
  private static instance: SceneManager;
  
  // Three.js core components
  private scene: Scene;
  private camera: PerspectiveCamera;
  private renderer: WebGLRenderer;
  private controls: OrbitControls;
  private sceneGrid: GridHelper | null = null;
  
  // Post-processing
  private composer: EffectComposer;
  private bloomPass: UnrealBloomPass;
  
  // Animation
  private animationFrameId: number | null = null;
  private isRunning: boolean = false;

  private constructor(canvas: HTMLCanvasElement) {
    logger.log('Initializing SceneManager');
    
    // Create scene
    this.scene = new Scene();
    this.scene.background = new Color(BACKGROUND_COLOR);
    // Removed fog to ensure graph visibility

    // Create camera with wider view
    this.camera = new PerspectiveCamera(
      60, // Reduced FOV for less distortion
      window.innerWidth / window.innerHeight,
      0.1,
      2000
    );
    this.camera.position.set(0, 10, 50); // Position for better overview
    this.camera.lookAt(0, 0, 0);

    // Create renderer with WebXR support
    this.renderer = new WebGLRenderer({
      canvas,
      antialias: true,
      alpha: true,
      powerPreference: 'high-performance',
      xr: {
        enabled: true
      }
    });
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

    // Create controls
    this.controls = new OrbitControls(this.camera, canvas);
    this.controls.enableDamping = true;
    this.controls.dampingFactor = 0.1;
    this.controls.screenSpacePanning = true;
    this.controls.minDistance = 1;
    this.controls.maxDistance = 1000;
    this.controls.enableRotate = true;
    this.controls.enableZoom = true;
    this.controls.enablePan = true;
    this.controls.rotateSpeed = 1.0;
    this.controls.zoomSpeed = 1.2;
    this.controls.panSpeed = 0.8;

    // Setup post-processing
    this.composer = new EffectComposer(this.renderer);
    const renderPass = new RenderPass(this.scene, this.camera);
    this.composer.addPass(renderPass);

    // Initialize bloom with disabled state
    this.bloomPass = new UnrealBloomPass(
      new Vector2(window.innerWidth, window.innerHeight),
      0.0,  // Strength
      0.0,  // Radius
      1.0   // High threshold to effectively disable bloom
    );
    this.bloomPass.enabled = false;  // Explicitly disable bloom
    this.bloomPass.threshold = 1.0;  // Set high threshold to further ensure no bloom
    this.composer.addPass(this.bloomPass);

    // Setup basic lighting
    this.setupLighting();

    // Setup event listeners
    window.addEventListener('resize', this.handleResize.bind(this));

    logger.log('SceneManager initialization complete');
  }

  static getInstance(canvas: HTMLCanvasElement): SceneManager {
    if (!SceneManager.instance) {
      SceneManager.instance = new SceneManager(canvas);
    }
    return SceneManager.instance;
  }

  static cleanup(): void {
    if (SceneManager.instance) {
      SceneManager.instance.dispose();
      SceneManager.instance = null as any;
    }
  }

  private setupLighting(): void {
    const ambientLight = new AmbientLight(0xffffff, 0.6);
    this.scene.add(ambientLight);

    const directionalLight = new DirectionalLight(0xffffff, 0.8);
    directionalLight.position.set(1, 1, 1).normalize();
    this.scene.add(directionalLight);

    // Add smaller grid helper
    const gridHelper = new GridHelper(50, 50); // Reduced grid size
    if (gridHelper.material instanceof Material) {
      gridHelper.material.transparent = true;
      gridHelper.material.opacity = 0.1;
    }
    this.scene.add(gridHelper);
    this.sceneGrid = gridHelper;
  }

  private handleResize(): void {
    const width = window.innerWidth;
    const height = window.innerHeight;

    this.camera.aspect = width / height;
    this.camera.updateProjectionMatrix();

    this.renderer.setSize(width, height);
    this.composer.setSize(width, height);
  }

  start(): void {
    if (this.isRunning) return;
    this.isRunning = true;
    this.animate();
    logger.log('Scene rendering started');
  }

  // Alias for start() to maintain compatibility with new client code
  startRendering(): void {
    this.start();
  }

  stop(): void {
    this.isRunning = false;
    
    // Clean up animation loops
    if (this.renderer.xr.enabled) {
      this.renderer.setAnimationLoop(null);
    }
    if (this.animationFrameId !== null) {
      cancelAnimationFrame(this.animationFrameId);
      this.animationFrameId = null;
    }
    
    logger.log('Scene rendering stopped');
  }

  private animate = (): void => {
    if (!this.isRunning) return;

    // Set up animation loop
    if (this.renderer.xr.enabled) {
      // For XR, use the built-in animation loop
      this.renderer.setAnimationLoop(this.render);
    } else {
      // For non-XR, use requestAnimationFrame
      this.animationFrameId = requestAnimationFrame(this.animate);
      this.render();
    }
  }

  private render = (): void => {
    // Update controls only in non-XR mode
    if (!this.renderer.xr.enabled) {
      this.controls.update();
      // Show scene grid in non-XR mode
      if (this.sceneGrid) this.sceneGrid.visible = true;
    } else {
      // Hide scene grid in XR mode
      if (this.sceneGrid) this.sceneGrid.visible = false;
    }

    // Determine if we should use post-processing
    const usePostProcessing = !this.renderer.xr.enabled &&
                            this.bloomPass.enabled &&
                            (this.bloomPass.strength > 0 ||
                             this.bloomPass.radius > 0 ||
                             (this.bloomPass as any).edgeStrength > 0 ||
                             (this.bloomPass as any).nodeStrength > 0 ||
                             (this.bloomPass as any).environmentStrength > 0);

    // Render scene
    if (usePostProcessing) {
      this.composer.render();
    } else {
      this.renderer.render(this.scene, this.camera);
    }
  }

  // Public getters
  getScene(): Scene {
    return this.scene;
  }

  getCamera(): PerspectiveCamera {
    return this.camera;
  }

  getRenderer(): WebGLRenderer {
    return this.renderer;
  }

  getControls(): OrbitControls {
    return this.controls;
  }

  // Scene management methods
  add(object: Object3D): void {
    this.scene.add(object);
  }

  remove(object: Object3D): void {
    this.scene.remove(object);
  }

  dispose(): void {
    this.stop();
    
    // Remove event listeners
    const boundResize = this.handleResize.bind(this);
    window.removeEventListener('resize', boundResize);

    // Dispose of post-processing
    if (this.composer) {
      // Dispose of render targets
      this.composer.renderTarget1.dispose();
      this.composer.renderTarget2.dispose();
      
      // Clear passes
      this.composer.passes.length = 0;
    }

    // Dispose of bloom pass resources
    if (this.bloomPass) {
      // Dispose of any textures or materials used by the bloom pass
      if ((this.bloomPass as any).renderTargetsHorizontal) {
        (this.bloomPass as any).renderTargetsHorizontal.forEach((target: any) => {
          if (target && target.dispose) target.dispose();
        });
      }
      if ((this.bloomPass as any).renderTargetsVertical) {
        (this.bloomPass as any).renderTargetsVertical.forEach((target: any) => {
          if (target && target.dispose) target.dispose();
        });
      }
      if ((this.bloomPass as any).materialHorizontal) {
        (this.bloomPass as any).materialHorizontal.dispose();
      }
      if ((this.bloomPass as any).materialVertical) {
        (this.bloomPass as any).materialVertical.dispose();
      }
    }

    // Dispose of controls
    if (this.controls) {
      this.controls.dispose();
    }

    // Dispose of renderer and materials
    if (this.renderer) {
      this.renderer.dispose();
      this.renderer.domElement.remove();
      (this.renderer.domElement as any).width = 0;
      (this.renderer.domElement as any).height = 0;
    }

    // Dispose of scene objects
    if (this.scene) {
      this.scene.traverse((object) => {
        if (object instanceof Mesh) {
          if (object.geometry) object.geometry.dispose();
          if (object.material) {
            if (Array.isArray(object.material)) {
              object.material.forEach(material => material.dispose());
            } else {
              object.material.dispose();
            }
          }
        }
      });
    }

    logger.log('Scene manager disposed');
  }

  public handleSettingsUpdate(settings: Settings): void {
    if (!settings.visualization?.rendering) {
      logger.warn('Received settings update without visualization.rendering section');
      return;
    }

    const { rendering, bloom } = settings.visualization;

    // Update bloom settings
    if (bloom) {
      if (!bloom.enabled) {
        // When disabled, set all bloom parameters to zero/disabled state
        this.bloomPass.enabled = false;
        this.bloomPass.strength = 0;
        this.bloomPass.radius = 0;
        this.bloomPass.threshold = 1.0;
        (this.bloomPass as any).edgeStrength = 0;
        (this.bloomPass as any).nodeStrength = 0;
        (this.bloomPass as any).environmentStrength = 0;
      } else {
        // Only enable and set parameters if explicitly enabled
        this.bloomPass.enabled = true;
        this.bloomPass.strength = bloom.strength || 0;
        this.bloomPass.radius = bloom.radius || 0;
        this.bloomPass.threshold = 0.3; // Standard threshold when enabled
        (this.bloomPass as any).edgeStrength = bloom.edgeBloomStrength || 0;
        (this.bloomPass as any).nodeStrength = bloom.nodeBloomStrength || 0;
        (this.bloomPass as any).environmentStrength = bloom.environmentBloomStrength || 0;
      }
      logger.debug('Bloom settings updated:', {
        enabled: this.bloomPass.enabled,
        strength: this.bloomPass.strength,
        radius: this.bloomPass.radius,
        threshold: this.bloomPass.threshold
      });
    }

    // Update background color
    if (rendering.backgroundColor) {
      this.scene.background = new Color(rendering.backgroundColor);
    }

    // Update lighting
    const lights = this.scene.children.filter(child => 
      child instanceof AmbientLight || child instanceof DirectionalLight
    );
    
    lights.forEach(light => {
      if (light instanceof AmbientLight) {
        light.intensity = rendering.ambientLightIntensity;
      } else if (light instanceof DirectionalLight) {
        light.intensity = rendering.directionalLightIntensity;
      }
    });

    // Update renderer settings
    if (this.renderer) {
      // Note: Some settings can only be changed at renderer creation
      if (rendering.enableAntialiasing) {
        logger.warn('Antialiasing setting change requires renderer recreation');
      }
      if (rendering.enableShadows) {
        logger.warn('Shadow settings change requires renderer recreation');
      }
    }

    logger.debug('Scene settings updated:', rendering);
  }
}

----
rendering/factories/GeometryFactory.ts
import { BufferGeometry, SphereGeometry, CylinderGeometry } from 'three';

export class GeometryFactory {
    private static instance: GeometryFactory;
    private geometryCache = new Map<string, BufferGeometry>();

    private constructor() {}

    static getInstance(): GeometryFactory {
        if (!GeometryFactory.instance) {
            GeometryFactory.instance = new GeometryFactory();
        }
        return GeometryFactory.instance;
    }

    getNodeGeometry(quality: 'low' | 'medium' | 'high'): BufferGeometry {
        const cacheKey = `node-${quality}`;
        if (this.geometryCache.has(cacheKey)) {
            return this.geometryCache.get(cacheKey)!;
        }

        const segments = {
            low: 8,
            medium: 16,
            high: 32
        }[quality] || 16;

        const geometry = new SphereGeometry(1, segments, segments);
        this.geometryCache.set(cacheKey, geometry);
        return geometry;
    }

    getHologramGeometry(type: string, quality: string): BufferGeometry {
        const cacheKey = `hologram-${type}-${quality}`;
        if (this.geometryCache.has(cacheKey)) {
            return this.geometryCache.get(cacheKey)!;
        }

        const segments = {
            low: { ring: 64, sphere: 32 },
            medium: { ring: 96, sphere: 48 },
            high: { ring: 128, sphere: 64 }
        }[quality] || { ring: 96, sphere: 48 };

        let geometry: BufferGeometry;
        switch (type) {
            case 'ring':
                // Translucent rings at scene scale
                geometry = new SphereGeometry(40, segments.ring, segments.ring);
                break;
            case 'outerSphere':
                geometry = new SphereGeometry(200, segments.sphere, segments.sphere);
                break;
            case 'middleSphere':
                geometry = new SphereGeometry(100, segments.sphere, segments.sphere);
                break;
            case 'innerSphere':
                geometry = new SphereGeometry(40, segments.sphere, segments.sphere);
                break;
            default:
                geometry = new SphereGeometry(40, segments.sphere, segments.sphere);
        }

        this.geometryCache.set(cacheKey, geometry);
        return geometry;
    }

    getEdgeGeometry(): BufferGeometry {
        const cacheKey = 'edge';
        if (this.geometryCache.has(cacheKey)) {
            return this.geometryCache.get(cacheKey)!;
        }

        // CylinderGeometry parameters:
        // radiusTop, radiusBottom, height, radialSegments
        const geometry = new CylinderGeometry(0.05, 0.05, 1, 8);
        this.geometryCache.set(cacheKey, geometry);
        return geometry;
    }

    dispose(): void {
        this.geometryCache.forEach(geometry => geometry.dispose());
        this.geometryCache.clear();
    }
}

----
rendering/factories/MaterialFactory.ts
import { HologramShaderMaterial } from '../materials/HologramShaderMaterial';
import { Color, Material, MeshBasicMaterial, LineBasicMaterial } from 'three';

export class MaterialFactory {
    private static instance: MaterialFactory;
    private materialCache: Map<string, Material>;

    private constructor() {
        this.materialCache = new Map();
    }

    public static getInstance(): MaterialFactory {
        if (!MaterialFactory.instance) {
            MaterialFactory.instance = new MaterialFactory();
        }
        return MaterialFactory.instance;
    }

    private hexToRgb(hex: string): Color {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        if (!result) {
            return new Color(0xffffff);
        }
        return new Color(`#${result[1]}${result[2]}${result[3]}`);
    }

    public createHologramMaterial(settings: any): HologramShaderMaterial {
        const cacheKey = 'hologram';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey) as HologramShaderMaterial;
        }

        const material = new HologramShaderMaterial(settings);
        
        if (settings.visualization?.hologram?.color) {
            const materialColor = this.hexToRgb(settings.visualization.hologram.color);
            material.uniforms.color.value = materialColor;
        }

        this.materialCache.set(cacheKey, material);
        return material;
    }

    public getHologramMaterial(settings: any): HologramShaderMaterial {
        return this.createHologramMaterial(settings);
    }

    public getNodeMaterial(settings: any): Material {
        const cacheKey = 'node-basic';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }

        const material = new MeshBasicMaterial({
            color: settings.visualization?.nodes?.baseColor || 0x4287f5,
            transparent: true,
            opacity: settings.visualization?.nodes?.opacity || 0.9,
            depthWrite: true
        });

        this.materialCache.set(cacheKey, material);
        return material;
    }

    public getPhongNodeMaterial(settings: any): Material {
        const cacheKey = 'node-phong';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }

        const material = new MeshBasicMaterial({
            color: settings.visualization?.nodes?.baseColor || 0x4287f5,
            transparent: true,
            opacity: settings.visualization?.nodes?.opacity || 0.9,
            depthWrite: true
        });

        this.materialCache.set(cacheKey, material);
        return material;
    }

    public getSceneSphereMaterial(type: string, settings: any): Material {
        const cacheKey = `scene-sphere-${type}`;
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }

        const material = new MeshBasicMaterial({
            color: settings.visualization?.hologram?.color || 0x4287f5,
            transparent: true,
            opacity: 0.3,
            depthWrite: false
        });

        (material as any).wireframe = true;

        this.materialCache.set(cacheKey, material);
        return material;
    }

    public getRingMaterial(settings: any): Material {
        const cacheKey = 'ring';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }

        const material = new MeshBasicMaterial({
            color: settings.visualization?.hologram?.color || 0x4287f5,
            transparent: true,
            opacity: 0.15,
            depthWrite: false
        });

        this.materialCache.set(cacheKey, material);
        return material;
    }

    public getEdgeMaterial(settings: any): Material {
        const cacheKey = 'edge';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }

        const material = new LineBasicMaterial({
            color: settings.visualization?.edges?.color || 0x6e7c91
        });

        this.materialCache.set(cacheKey, material);
        return material;
    }

    public getMetadataMaterial(): Material {
        const cacheKey = 'metadata';
        if (this.materialCache.has(cacheKey)) {
            return this.materialCache.get(cacheKey)!;
        }

        const material = new MeshBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.8
        });

        this.materialCache.set(cacheKey, material);
        return material;
    }

    public updateMaterial(type: string, settings: any): void {
        const material = this.materialCache.get(type);
        if (!material) return;

        switch (type) {
            case 'node-basic':
            case 'node-phong': {
                const nodeMaterial = material as MeshBasicMaterial;
                nodeMaterial.color = this.hexToRgb(settings.visualization?.nodes?.baseColor || '#4287f5');
                nodeMaterial.opacity = settings.visualization?.nodes?.opacity || 0.9;
                nodeMaterial.needsUpdate = true;
                break;
            }
            case 'edge':
                (material as LineBasicMaterial).color = this.hexToRgb(settings.visualization?.edges?.color || '#6e7c91');
                break;
            case 'hologram':
                if (material instanceof HologramShaderMaterial) {
                    material.uniforms.color.value = this.hexToRgb(settings.visualization?.hologram?.color || '#ffffff');
                }
                break;
            case 'scene-sphere-inner':
            case 'scene-sphere-middle':
            case 'scene-sphere-outer':
                const sphereMaterial = material as MeshBasicMaterial;
                sphereMaterial.color = this.hexToRgb(settings.visualization?.hologram?.color || '#4287f5');
                sphereMaterial.needsUpdate = true;
                break;
            case 'ring':
                const ringMaterial = material as MeshBasicMaterial;
                ringMaterial.color = this.hexToRgb(settings.visualization?.hologram?.color || '#4287f5');
                ringMaterial.needsUpdate = true;
                break;
        }
    }

    public dispose(): void {
        this.materialCache.forEach(material => material.dispose());
        this.materialCache.clear();
    }
}

----
rendering/materials/HologramShaderMaterial.ts
import * as THREE from 'three';

export interface HologramUniforms {
    [key: string]: { value: any };
    time: { value: number };
    opacity: { value: number };
    color: { value: THREE.Color };
    pulseIntensity: { value: number };
    interactionPoint: { value: THREE.Vector3 };
    interactionStrength: { value: number };
}

export class HologramShaderMaterial extends THREE.ShaderMaterial {
    declare uniforms: HologramUniforms;

    constructor(settings?: any) {
        super({
            uniforms: {
                time: { value: 0 },
                opacity: { value: settings?.visualization?.hologram?.opacity ?? 1.0 },
                color: { value: new THREE.Color(settings?.visualization?.hologram?.color ?? 0x00ff00) },
                pulseIntensity: { value: 0.2 },
                interactionPoint: { value: new THREE.Vector3() },
                interactionStrength: { value: 0.0 }
            },
            vertexShader: `
                varying vec2 vUv;
                varying vec3 vPosition;
                void main() {
                    vUv = uv;
                    vPosition = position;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `,
            fragmentShader: `
                uniform float time;
                uniform float opacity;
                uniform vec3 color;
                uniform float pulseIntensity;
                uniform vec3 interactionPoint;
                uniform float interactionStrength;
                varying vec2 vUv;
                varying vec3 vPosition;

                void main() {
                    float pulse = sin(time * 2.0) * 0.5 + 0.5;
                    float dist = length(vPosition - interactionPoint);
                    float interaction = interactionStrength * (1.0 - smoothstep(0.0, 2.0, dist));
                    float alpha = opacity * (0.5 + pulse * pulseIntensity + interaction);
                    gl_FragColor = vec4(color, alpha);
                }
            `,
            transparent: true,
            side: THREE.DoubleSide,
            blending: THREE.AdditiveBlending
        });
    }

    update(deltaTime: number): void {
        this.uniforms.time.value += deltaTime;
        this.uniforms.interactionStrength.value *= 0.95; // Decay interaction effect
    }

    handleInteraction(position: THREE.Vector3): void {
        this.uniforms.interactionPoint.value.copy(position);
        this.uniforms.interactionStrength.value = 1.0;
    }

    clone(): this {
        const material = new HologramShaderMaterial();
        material.uniforms = {
            time: { value: this.uniforms.time.value },
            opacity: { value: this.uniforms.opacity.value },
            color: { value: this.uniforms.color.value.clone() },
            pulseIntensity: { value: this.uniforms.pulseIntensity.value },
            interactionPoint: { value: this.uniforms.interactionPoint.value.clone() },
            interactionStrength: { value: this.uniforms.interactionStrength.value }
        };
        return material as this;
    }
}

----
state/SettingsObserver.ts
import { Settings } from '../types/settings';
import { createLogger } from '../core/logger';

const logger = createLogger('SettingsObserver');

export type SettingsChangeCallback = (settings: Settings) => void;

export class SettingsObserver {
    private static instance: SettingsObserver;
    private observers = new Map<string, SettingsChangeCallback>();

    private constructor() {}

    static getInstance(): SettingsObserver {
        if (!SettingsObserver.instance) {
            SettingsObserver.instance = new SettingsObserver();
        }
        return SettingsObserver.instance;
    }

    subscribe(id: string, callback: SettingsChangeCallback): () => void {
        logger.debug(`Subscribing observer: ${id}`);
        this.observers.set(id, callback);
        return () => this.unsubscribe(id);
    }

    unsubscribe(id: string): void {
        logger.debug(`Unsubscribing observer: ${id}`);
        this.observers.delete(id);
    }

    notifyAll(settings: Settings): void {
        logger.debug(`Notifying ${this.observers.size} observers of settings change`);
        this.observers.forEach((callback, id) => {
            try {
                callback(settings);
            } catch (error) {
                logger.error(`Error in settings observer ${id}:`, error);
            }
        });
    }
}

----
state/defaultSettings.ts
import { Settings, VisualizationSettings } from '../types/settings';

// Helper function to convert number to hex color
function toHexColor(num: number): string {
    return `#${num.toString(16).padStart(6, '0')}`;
}

// Export visualization defaults separately for reuse
export const defaultVisualizationSettings: VisualizationSettings = {
    nodes: {
        quality: 'high',
        enableInstancing: true,
        enableMetadataShape: true,
        enableMetadataVisualization: true,
        baseSize: 1.0,  // Default size with range up to 10.0
        sizeRange: [0.8, 5.0],  // Wider range for more size variation
        baseColor: toHexColor(0x4287f5),  // Softer blue
        opacity: 0.9,  // Slightly transparent
        colorRangeAge: [toHexColor(0x4287f5), toHexColor(0xf542a1)],  // Blue to pink
        colorRangeLinks: [toHexColor(0x4287f5), toHexColor(0xa142f5)],  // Blue to purple
        metalness: 0.3,  // Much less metallic for reduced reflections
        roughness: 0.7,  // More diffuse for reduced specular highlights
        enableHologram: false
    },
    edges: {
        color: toHexColor(0x6e7c91),  // Softer gray-blue that complements node colors
        opacity: 0.4,  // More subtle connections
        arrowSize: 0.8,  // Small arrows when enabled
        baseWidth: 0.8,  // Thinner base width
        enableArrows: false,  // Default to no arrows
        widthRange: [0.6, 1.6]  // More subtle width variation
    },
    animations: {
        enableNodeAnimations: true,
        enableMotionBlur: true,  // Enable for smoother transitions
        motionBlurStrength: 0.35,  // Subtle motion blur
        selectionWaveEnabled: true,
        pulseEnabled: true,
        pulseSpeed: 1.2,  // Slightly slower, more gentle pulse
        pulseStrength: 0.8,  // Less intense pulse
        waveSpeed: 0.8  // Slower, more graceful wave
    },
    labels: {
        enableLabels: true,
        desktopFontSize: 14,  // Slightly smaller for better integration
        textColor: toHexColor(0xe1e5eb),  // Softer white for better contrast
        textOutlineColor: toHexColor(0x1a1a1a),  // Darker outline for better readability
        textOutlineWidth: 3,  // Thicker outline for better visibility
        textResolution: 512,  // Higher resolution for sharper text
        textPadding: 6,  // More padding for better spacing
        billboardMode: true
    },
    rendering: {
        ambientLightIntensity: 0.4,  // Reduced ambient for less overall brightness
        directionalLightIntensity: 0.8,  // Reduced directional for less harsh lighting
        environmentIntensity: 0.8,  // Reduced environment intensity for better balance
        backgroundColor: toHexColor(0x1a1a2e),  // Slightly blue-tinted dark background
        enableAmbientOcclusion: true,
        enableAntialiasing: true,
        enableShadows: true,
        shadowMapSize: 2048,  // Higher resolution shadows
        shadowBias: 0.0001  // Fine-tuned shadow bias
    },
    bloom: {
        enabled: false,  // Disabled to reduce overall brightness
        strength: 1.2,        // Slightly reduced overall bloom
        radius: 0.6,         // Tighter bloom radius
        threshold: 0.4,      // Higher threshold for more selective bloom
        edgeBloomStrength: 0.4,  // Subtler edge glow
        nodeBloomStrength: 0.8,  // Much less intense node glow
        environmentBloomStrength: 0.8  // Reduced environment bloom
    },
    hologram: {
        ringCount: 4,                    // One more ring for better effect
        ringSizes: [0.8, 1.2, 1.6, 2],  // More gradual size progression
        ringRotationSpeed: 0.08,         // Slower, more graceful rotation
        globalRotationSpeed: 0.06,       // Slower global rotation
        ringColor: toHexColor(0x4287f5), // Match node base color
        ringOpacity: 0.2,                // Much more subtle rings
        enableBuckminster: false,
        buckminsterScale: 1.2,           // Slightly larger when enabled
        buckminsterOpacity: 0.3,         // More subtle buckminster
        enableGeodesic: false,
        geodesicScale: 1.1,              // Slightly larger when enabled
        geodesicOpacity: 0.3,            // More subtle geodesic
        enableTriangleSphere: false,
        triangleSphereScale: 1.1,        // Slightly larger when enabled
        triangleSphereOpacity: 0.3       // More subtle triangle sphere
    },
    physics: {
        enabled: true,
        attractionStrength: 0.015,     // Range: 0.001-1.0, proven value from Initial phase
        repulsionStrength: 1200.0,     // Range: 1.0-10000.0, proven value from settings
        springStrength: 0.018,         // Range: 0.001-1.0, proven value from Initial phase
        damping: 0.95,                 // Range: 0.5-0.95, proven value from Initial phase
        iterations: 300,               // Range: 1-500, proven value from Initial phase
        maxVelocity: 0.2,             // Range: 0.1-1.0, matches time_step
        collisionRadius: 0.25,         // From Rust default
        enableBounds: true,
        boundsSize: 100.0             // Range: 10-500, from SimulationParams
    }
};

// Main settings object with all defaults
export const defaultSettings: Settings = {
    visualization: defaultVisualizationSettings,
    system: {
        websocket: {
            reconnectAttempts: 3,         // Fewer attempts but more frequent
            reconnectDelay: 3000,         // Shorter delay between attempts
            binaryChunkSize: 2048,        // Larger chunks for better performance
            compressionEnabled: true,
            compressionThreshold: 512,     // Lower threshold to compress more data
            updateRate: 90                 // Higher update rate for smoother animations
        },
        debug: {
            enabled: false,
            enableDataDebug: false,
            enableWebsocketDebug: false,
            logBinaryHeaders: false,
            logFullJson: false,
            logLevel: 'warn',             // Default to warnings only
            logFormat: 'pretty'           // More readable logs by default
        }
    },
    xr: {
        // Mode and Space Settings
        mode: 'immersive-ar' as const,
        quality: 'high',
        roomScale: 0.1,  // Scale factor of 0.1 for AR to make graph room-sized
        spaceType: 'local-floor',

        // Hand Tracking Settings
        enableHandTracking: true,
        handMeshEnabled: true,
        handMeshColor: toHexColor(0x4287f5),  // Match visualization theme
        handMeshOpacity: 0.3,                 // More subtle hand visualization
        handPointSize: 3,                     // Smaller, less intrusive points
        handRayEnabled: true,
        handRayColor: toHexColor(0x4287f5),   // Match visualization theme
        handRayWidth: 1.5,                    // Thinner ray
        gestureSmoothing: 0.7,                // Smoother gesture tracking

        // Interaction Settings
        enableHaptics: true,
        hapticIntensity: 0.3,                 // Gentler haptics
        dragThreshold: 0.08,                  // Lower threshold for easier dragging
        pinchThreshold: 0.3,                  // Lower threshold for easier pinching
        rotationThreshold: 0.08,              // Lower threshold for easier rotation
        interactionRadius: 0.15,              // Larger interaction radius
        movementSpeed: 0.08,                  // Faster movement
        deadZone: 0.12,                       // Slightly larger deadzone
        movementAxes: {
            horizontal: 2,                     // Right joystick X
            vertical: 3                        // Right joystick Y
        },

        // Platform Settings
        autoEnterAR: false,                   // Let user choose when to enter
        hideControlPanel: false,              // Show control panel by default
        preferredMode: 'immersive-ar',

        // Scene Understanding
        enableLightEstimation: true,
        enablePlaneDetection: true,
        enableSceneUnderstanding: true,
        planeColor: toHexColor(0x4287f5),     // Match visualization theme
        planeOpacity: 0.2,                    // More subtle planes
        showPlaneOverlay: true,
        snapToFloor: true,

        // Passthrough Settings
        enablePassthroughPortal: false,
        passthroughOpacity: 0.8,              // Slightly transparent
        passthroughBrightness: 1.1,           // Slightly brighter
        passthroughContrast: 1.2,             // Higher contrast
        portalSize: 2.5,                      // Larger portal
        portalEdgeColor: toHexColor(0x4287f5), // Match visualization theme
        portalEdgeWidth: 0.5                  // 20% of portal size (2.5 * 0.2 = 0.5)
    }
};

----
state/graphData.ts
import { transformGraphData, Node, Edge, GraphData } from '../core/types';
import { createLogger } from '../core/utils';
import { API_ENDPOINTS } from '../core/constants';

const logger = createLogger('GraphDataManager');

// Constants
const FLOATS_PER_NODE = 6;     // x, y, z, vx, vy, vz

interface WebSocketService {
  send(data: ArrayBuffer): void;
}

// Extend Edge interface to include id
interface EdgeWithId extends Edge {
  id: string;
}

export class GraphDataManager {
  private static instance: GraphDataManager;
  private nodes: Map<string, Node>;
  private edges: Map<string, EdgeWithId>;
  private wsService!: WebSocketService;  // Use definite assignment assertion
  private metadata: Record<string, any>;
  private updateListeners: Set<(data: GraphData) => void>;
  private positionUpdateListeners: Set<(positions: Float32Array) => void>;
  private binaryUpdatesEnabled: boolean = false;

  private constructor() {
    this.nodes = new Map();
    this.edges = new Map();
    this.metadata = {};
    this.updateListeners = new Set();
    this.positionUpdateListeners = new Set();
    // Initialize with a no-op websocket service
    this.wsService = {
      send: () => logger.warn('WebSocket service not configured')
    };
    this.enableBinaryUpdates();  // Start binary updates by default
  }

  /**
   * Configure the WebSocket service for binary updates
   */
  public setWebSocketService(service: WebSocketService): void {
    this.wsService = service;
    logger.info('WebSocket service configured');
    if (this.binaryUpdatesEnabled) {
      this.updatePositions(new Float32Array());  // Send initial empty update
    }
  }

  static getInstance(): GraphDataManager {
    if (!GraphDataManager.instance) {
      GraphDataManager.instance = new GraphDataManager();
    }
    return GraphDataManager.instance;
  }

  public async fetchInitialData(): Promise<void> {
    try {
      // Start with first page
      await this.fetchPaginatedData(1, 100);
      logger.info('Initial graph data page loaded');
      
      // Get total pages from metadata
      const totalPages = this.metadata.pagination?.totalPages || 1;
      
      if (totalPages > 1) {
        logger.info(`Loading remaining ${totalPages - 1} pages in background`);
        // Load remaining pages in background
        for (let page = 2; page <= totalPages; page++) {
          try {
            await this.fetchPaginatedData(page, 100);
            logger.debug(`Loaded page ${page}/${totalPages}`);
          } catch (error) {
            logger.error(`Failed to load page ${page}:`, error);
            // Continue with next page even if one fails
          }
        }
      }
    } catch (error) {
      logger.error('Failed to fetch initial graph data:', error);
      throw error;
    }
  }

  public async fetchPaginatedData(page: number = 1, pageSize: number = 100): Promise<void> {
    try {
      const response = await fetch(
        `${API_ENDPOINTS.GRAPH_PAGINATED}?page=${page}&pageSize=${pageSize}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
      if (!response.ok) {
        throw new Error(`Failed to fetch paginated data: ${response.statusText}`);
      }

      const data = await response.json();
      this.updateGraphData(data);
      logger.info(`Paginated data loaded for page ${page}`);
    } catch (error) {
      logger.error('Failed to fetch paginated data:', error);
      throw error;
    }
  }

  async loadInitialGraphData(): Promise<void> {
    try {
      // Try both endpoints
      const endpoints = [
        API_ENDPOINTS.GRAPH_PAGINATED
      ];

      let response = null;
      for (const endpoint of endpoints) {
        try {
          response = await fetch(`${endpoint}?page=1&pageSize=100`);
          if (response.ok) break;
        } catch (e) {
          continue;
        }
      }

      if (!response || !response.ok) {
        throw new Error('Failed to fetch graph data from any endpoint');
      }

      const data = await response.json();
      const transformedData = transformGraphData(data);
      
      // Update nodes and edges
      this.nodes = new Map(transformedData.nodes.map((node: Node) => [node.id, node]));
      const edgesWithIds = transformedData.edges.map((edge: Edge) => ({
        ...edge,
        id: this.createEdgeId(edge.source, edge.target)
      }));
      this.edges = new Map(edgesWithIds.map(edge => [edge.id, edge]));
      
      // Update metadata
      this.metadata = {
        ...transformedData.metadata || {},
        pagination: {
          totalPages: data.totalPages,
          currentPage: data.currentPage,
          totalItems: data.totalItems,
          pageSize: data.pageSize
        }
      };

      // Enable WebSocket updates immediately
      this.enableBinaryUpdates();
      this.setBinaryUpdatesEnabled(true);
      
      // Notify listeners of initial data
      this.notifyUpdateListeners();
      
      // Load remaining pages if any
      if (data.totalPages > 1) {
        await this.loadRemainingPages(data.totalPages, data.pageSize);
      }
      
      logger.info('Initial graph data loaded successfully');
    } catch (error) {
      logger.error('Failed to fetch graph data:', error);
      throw new Error('Failed to fetch graph data: ' + error);
    }
  }

  private async loadRemainingPages(totalPages: number, pageSize: number): Promise<void> {
    try {
      // Load remaining pages in parallel with a reasonable chunk size
      const chunkSize = 5;
      for (let i = 2; i <= totalPages; i += chunkSize) {
        const pagePromises = [];
        for (let j = i; j < Math.min(i + chunkSize, totalPages + 1); j++) {
          pagePromises.push(this.loadPage(j, pageSize));
        }
        await Promise.all(pagePromises);
        // Update listeners after each chunk
        this.notifyUpdateListeners();
      }
    } catch (error) {
      logger.error('Error loading remaining pages:', error);
      throw error;
    }
  }

  private async loadPage(page: number, pageSize: number): Promise<void> {
    try {
      const response = await fetch(
        `${API_ENDPOINTS.GRAPH_PAGINATED}?page=${page}&pageSize=${pageSize}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
      if (!response.ok) {
        throw new Error(`Failed to fetch page ${page}: ${response.statusText}`);
      }

      const data = await response.json();
      const transformedData = transformGraphData(data);
      
      // Add new nodes
      transformedData.nodes.forEach((node: Node) => {
        if (!this.nodes.has(node.id)) {
          this.nodes.set(node.id, node);
        }
      });
      
      // Add new edges
      transformedData.edges.forEach((edge: Edge) => {
        const edgeId = this.createEdgeId(edge.source, edge.target);
        if (!this.edges.has(edgeId)) {
          this.edges.set(edgeId, { ...edge, id: edgeId });
        }
      });

      logger.debug(`Loaded page ${page} with ${transformedData.nodes.length} nodes`);
    } catch (error) {
      logger.error(`Error loading page ${page}:`, error);
      throw error;
    }
  }

  /**
   * Enable binary position updates via WebSocket
   */
  public enableBinaryUpdates(): void {
    try {
      const ws = new WebSocket(`wss://${window.location.host}/wss`);
      ws.binaryType = 'arraybuffer';
      
      ws.onopen = () => {
        logger.info('WebSocket connection established');
        this.setWebSocketService({
          send: (data: ArrayBuffer) => {
            if (ws.readyState === WebSocket.OPEN) {
              ws.send(data);
            }
          }
        });
        this.setBinaryUpdatesEnabled(true);
      };
      
      ws.onmessage = (event: MessageEvent) => {
        if (event.data instanceof ArrayBuffer) {
          const positions = new Float32Array(event.data);
          this.updateNodePositions(positions);
          this.notifyPositionUpdateListeners(positions);
        }
      };
      
      ws.onerror = (error) => {
        logger.error('WebSocket error:', error);
        this.setBinaryUpdatesEnabled(false);
      };
      
      ws.onclose = () => {
        logger.warn('WebSocket connection closed');
        this.setBinaryUpdatesEnabled(false);
        // Attempt to reconnect after a delay
        setTimeout(() => this.enableBinaryUpdates(), 5000);
      };
      
    } catch (error) {
      logger.error('Failed to initialize WebSocket:', error);
      this.setBinaryUpdatesEnabled(false);
    }
  }

  /**
   * Update node positions from binary data
   */
  private updatePositions(positions: Float32Array): void {
    if (!this.binaryUpdatesEnabled) return;
    this.wsService.send(positions.buffer);
  }

  /**
   * Initialize or update the graph data
   */
  updateGraphData(data: any): void {
    // Transform and validate incoming data
    const transformedData = transformGraphData(data);
    
    // Update nodes with proper position and velocity
    transformedData.nodes.forEach((node: Node) => {
      this.nodes.set(node.id, node);
    });

    // Store edges in Map with generated IDs
    if (Array.isArray(transformedData.edges)) {
      transformedData.edges.forEach((edge: Edge) => {
        const edgeId = this.createEdgeId(edge.source, edge.target);
        const edgeWithId: EdgeWithId = {
          ...edge,
          id: edgeId
        };
        this.edges.set(edgeId, edgeWithId);
      });
    }

    // Update metadata, including pagination info if available
    this.metadata = {
      ...transformedData.metadata,
      pagination: data.totalPages ? {
        totalPages: data.totalPages,
        currentPage: data.currentPage,
        totalItems: data.totalItems,
        pageSize: data.pageSize
      } : undefined
    };

    // Notify listeners
    this.notifyUpdateListeners();
    logger.debug(`Updated graph data: ${this.nodes.size} nodes, ${this.edges.size} edges`);

    // Enable binary updates after initial data is received
    if (!this.binaryUpdatesEnabled) {
      this.enableBinaryUpdates();
    }
  }

  /**
   * Get the current graph data
   */
  getGraphData(): GraphData {
    return {
      nodes: Array.from(this.nodes.values()),
      edges: Array.from(this.edges.values()) as Edge[],
      metadata: this.metadata
    };
  }

  /**
   * Get a specific node by ID
   */
  getNode(id: string): Node | undefined {
    return this.nodes.get(id);
  }

  /**
   * Subscribe to graph data updates
   */
  subscribe(listener: (data: GraphData) => void): () => void {
    this.updateListeners.add(listener);
    return () => {
      this.updateListeners.delete(listener);
    };
  }

  /**
   * Subscribe to position updates only
   */
  subscribeToPositionUpdates(
    listener: (positions: Float32Array) => void
  ): () => void {
    this.positionUpdateListeners.add(listener);
    return () => {
      this.positionUpdateListeners.delete(listener);
    };
  }

  /**
   * Clear all graph data
   */
  clear(): void {
    this.nodes.clear();
    this.edges.clear();
    this.metadata = {};
    this.notifyUpdateListeners();
  }

  private createEdgeId(source: string, target: string): string {
    return [source, target].sort().join('_');
  }

  private notifyUpdateListeners(): void {
    const data = this.getGraphData();
    this.updateListeners.forEach(listener => {
      try {
        listener(data);
      } catch (error) {
        logger.error('Error in graph update listener:', error);
      }
    });
  }

  private notifyPositionUpdateListeners(positions: Float32Array): void {
    this.positionUpdateListeners.forEach(listener => {
      try {
        listener(positions);
      } catch (error) {
        logger.error('Error in position update listener:', error);
      }
    });
  }

  public setBinaryUpdatesEnabled(enabled: boolean): void {
    this.binaryUpdatesEnabled = enabled;
    if (enabled) {
      this.updatePositions(new Float32Array());  // Send initial empty update
    }
    logger.info(`Binary updates ${enabled ? 'enabled' : 'disabled'}`);
    
    // Notify listeners of state change
    this.updateListeners.forEach(listener => {
      listener({
        nodes: Array.from(this.nodes.values()),
        edges: Array.from(this.edges.values()) as Edge[],
        metadata: { ...this.metadata, binaryUpdatesEnabled: enabled }
      });
    });
  }

  public updateNodePositions(positions: Float32Array): void {
    if (!this.binaryUpdatesEnabled) {
      return;
    }
  
    // Log for debugging
    logger.debug('Received binary position update:', positions);
  
    if (positions.length % FLOATS_PER_NODE !== 0) {
      logger.error('Invalid position array length:', positions.length);
      return;
    }
  
    this.positionUpdateListeners.forEach(listener => {
      try {
        listener(positions);
      } catch (error) {
        logger.error('Error in position update listener:', error);
      }
    });
  }
}

// Export a singleton instance
export const graphDataManager = GraphDataManager.getInstance();

// Declare WebSocket on window for TypeScript
declare global {
  interface Window {
    ws: WebSocket;
  }
}

----
state/settings.ts
import { Settings } from '../types/settings';
import { createLogger } from '../core/logger';
import { SettingsStore } from './SettingsStore';
import { defaultSettings } from './defaultSettings';
import {
    SettingsCategory,
    SettingsPath,
    SettingValue,
    getSettingValue,
    setSettingValue,
    isValidSettingPath
} from '../types/settings/utils';

const logger = createLogger('SettingsManager');

export class SettingsManager {
    private store: SettingsStore;
    private initialized: boolean = false;
    private settings: Settings = { ...defaultSettings };

    constructor() {
        this.store = SettingsStore.getInstance();
    }

    private useDefaultSettings(): void {
        // Reset to default settings
        this.settings = { ...defaultSettings };
        this.initialized = true;
    }

    public async initialize(): Promise<void> {
        if (this.initialized) return;

        try {
            await this.store.initialize();
            this.settings = this.store.get('') as Settings;
            this.initialized = true;
            logger.info('Settings initialized from server');
        } catch (error) {
            logger.error('Failed to initialize settings from server:', error);
            this.useDefaultSettings();
        }
    }

    public getCurrentSettings(): Settings {
        // Always return settings, which will be defaults if initialization failed
        return this.settings;
    }

    public async updateSetting(path: SettingsPath, value: SettingValue): Promise<void> {
        if (!isValidSettingPath(path)) {
            throw new Error(`Invalid settings path: ${path}`);
        }

        try {
            setSettingValue(this.settings, path, value);
            if (this.initialized) {
                await this.store.set(path, value);
            } else {
                logger.warn(`Setting ${path} updated in memory only - store not initialized`);
            }
            logger.debug(`Updated setting ${path} to ${value}`);
        } catch (error) {
            logger.error(`Failed to update setting ${path}:`, error);
            throw error;
        }
    }

    public get(path: SettingsPath): SettingValue {
        if (!isValidSettingPath(path)) {
            throw new Error(`Invalid settings path: ${path}`);
        }
        
        try {
            return getSettingValue(this.settings, path);
        } catch (error) {
            logger.error(`Error getting setting at path ${path}:`, error);
            // Return default value for this path if available
            return getSettingValue(defaultSettings, path);
        }
    }

    public getCategory(category: SettingsCategory): Settings[typeof category] {
        if (!(category in this.settings)) {
            logger.warn(`Category ${category} not found, using defaults`);
            return defaultSettings[category];
        }
        return this.settings[category];
    }

    public subscribe(path: string, callback: (value: unknown) => void): () => void {
        const store = SettingsStore.getInstance();
        let unsubscriber: (() => void) | undefined;
        
        store.subscribe(path, (_, value) => {
            callback(value);
        }).then(unsub => {
            unsubscriber = unsub;
        });

        return () => {
            if (unsubscriber) {
                unsubscriber();
            }
        };
    }

    public onSettingChange(path: SettingsPath, callback: (value: SettingValue) => void): () => void {
        const store = SettingsStore.getInstance();
        let unsubscriber: (() => void) | undefined;
        
        store.subscribe(path, (_, value) => {
            callback(value as SettingValue);
        }).then(unsub => {
            unsubscriber = unsub;
        });

        return () => {
            if (unsubscriber) {
                unsubscriber();
            }
        };
    }

    public async batchUpdate(updates: Array<{ path: SettingsPath; value: SettingValue }>): Promise<void> {
        try {
            // Validate all paths first
            for (const { path } of updates) {
                if (!isValidSettingPath(path)) {
                    throw new Error(`Invalid settings path: ${path}`);
                }
            }

            // Apply updates to local settings first
            for (const { path, value } of updates) {
                setSettingValue(this.settings, path, value);
            }

            // Then sync with store if initialized
            if (this.initialized) {
                await Promise.all(
                    updates.map(({ path, value }) => this.store.set(path, value))
                );
            } else {
                logger.warn('Settings updated in memory only - store not initialized');
            }
        } catch (error) {
            logger.error('Failed to apply batch updates:', error);
            throw error;
        }
    }

    public dispose(): void {
        this.store.dispose();
        this.initialized = false;
    }
}

// Export singleton instance
export const settingsManager = new SettingsManager();

----
state/SettingsStore.ts
import { Settings } from '../types/settings';
import { createLogger } from '../core/logger';
import { defaultSettings } from './defaultSettings';
import { buildApiUrl } from '../core/api';
import { API_ENDPOINTS } from '../core/constants';
import { Logger } from '../core/logger';
import { validateSettings, validateSettingValue, ValidationError } from '../types/settings/validation';
import { convertObjectKeysToSnakeCase, convertObjectKeysToCamelCase } from '../core/utils';

const logger = createLogger('SettingsStore');

export type SettingsChangeCallback = (path: string, value: unknown) => void;
export type ValidationErrorCallback = (errors: ValidationError[]) => void;

export class SettingsStore {
    private static instance: SettingsStore | null = null;
    private settings: Settings;
    private initialized: boolean = false;
    private initializationPromise: Promise<void> | null = null;
    private subscribers: Map<string, SettingsChangeCallback[]> = new Map();
    private validationSubscribers: ValidationErrorCallback[] = [];
    private logger: Logger;
    private retryCount: number = 0;
    private MAX_RETRIES: number = 3;
    private RETRY_DELAY: number = 1000;
    private settingsOrigin: 'server' | 'default' = 'default';

    private constructor() {
        this.settings = { ...defaultSettings };
        this.subscribers = new Map();
        this.logger = createLogger('SettingsStore');
    }

    public static getInstance(): SettingsStore {
        if (!SettingsStore.instance) {
            SettingsStore.instance = new SettingsStore();
        }
        return SettingsStore.instance;
    }

    public async initialize(): Promise<void> {
        if (this.initialized) {
            return Promise.resolve();
        }
        if (this.initializationPromise) {
            return this.initializationPromise;
        }

        this.initializationPromise = (async () => {
            try {
                // Try to fetch settings from server first
                try {
                    logger.info('Fetching settings from:', buildApiUrl(API_ENDPOINTS.SETTINGS_ROOT));
                    const response = await fetch(buildApiUrl(API_ENDPOINTS.SETTINGS_ROOT));
                    logger.info('Server response status:', response.status);
                    
                    if (response.ok) {
                        const serverSettings = await response.json();
                        logger.info('Received server settings:', serverSettings);
                        
                        // Convert snake_case to camelCase
                        const camelCaseSettings = convertObjectKeysToCamelCase(serverSettings);
                        
                        // Validate server settings
                        const serverValidation = validateSettings(camelCaseSettings);
                        if (!serverValidation.isValid) {
                            throw new Error(`Invalid server settings: ${JSON.stringify(serverValidation.errors)}`);
                        }
                        
                        // Use server settings as base, filling in any missing fields with defaults
                        this.settings = this.deepMerge({ ...defaultSettings }, camelCaseSettings);
                        this.settingsOrigin = 'server';
                        logger.info('Using server settings with defaults as fallback');
                    } else {
                        const errorText = await response.text();
                        throw new Error(`Failed to fetch server settings: ${response.statusText}. Details: ${errorText}`);
                    }
                } catch (error) {
                    // If server settings fail, fall back to defaults
                    logger.warn('Error loading server settings, falling back to defaults:', error);
                    this.settings = { ...defaultSettings };
                    this.settingsOrigin = 'default';
                    
                    // Validate default settings
                    const validationResult = validateSettings(this.settings);
                    if (!validationResult.isValid) {
                        this.logger.error('Default settings validation failed:', validationResult.errors);
                        this.notifyValidationErrors(validationResult.errors);
                    }
                    
                    logger.info('Using default settings:', this.settings);
                }

                this.initialized = true;
                logger.info('SettingsStore initialized with origin:', this.settingsOrigin);
            } catch (error) {
                logger.error('Critical initialization failure:', error);
                // Last resort: use defaults without validation
                this.settings = { ...defaultSettings };
                this.settingsOrigin = 'default';
                this.initialized = true;
            }
        })();

        return this.initializationPromise;
    }

    public isInitialized(): boolean {
        return this.initialized;
    }

    public subscribeToValidationErrors(callback: ValidationErrorCallback): () => void {
        this.validationSubscribers.push(callback);
        return () => {
            const index = this.validationSubscribers.indexOf(callback);
            if (index > -1) {
                this.validationSubscribers.splice(index, 1);
            }
        };
    }

    public async subscribe(path: string, callback: SettingsChangeCallback): Promise<() => void> {
        if (!this.initialized) {
            await this.initialize();
        }

        if (!this.subscribers.has(path)) {
            this.subscribers.set(path, []);
        }
        
        const subscribers = this.subscribers.get(path);
        if (subscribers) {
            subscribers.push(callback);
        }

        // Immediately call callback with current value
        const value = this.get(path);
        if (value !== undefined) {
            callback(path, value);
        }

        return () => {
            const pathSubscribers = this.subscribers.get(path);
            if (pathSubscribers) {
                const index = pathSubscribers.indexOf(callback);
                if (index > -1) {
                    pathSubscribers.splice(index, 1);
                }
                if (pathSubscribers.length === 0) {
                    this.subscribers.delete(path);
                }
            }
        };
    }

    public get(path: string): unknown {
        if (!this.initialized) {
            logger.warn('Attempting to access settings before initialization');
            return undefined;
        }
        
        if (!path) {
            return this.settings;
        }
        
        try {
            return path.split('.').reduce((obj: any, key) => {
                if (obj === null || obj === undefined) {
                    throw new Error(`Invalid path: ${path}`);
                }
                return obj[key];
            }, this.settings);
        } catch (error) {
            logger.error(`Error accessing setting at path ${path}:`, error);
            return undefined;
        }
    }

    public async set(path: string, value: unknown): Promise<void> {
        try {
            // Validate the specific setting change
            const validationErrors = validateSettingValue(path, value, this.settings);
            if (validationErrors.length > 0) {
                this.notifyValidationErrors(validationErrors);
                throw new Error(`Validation failed: ${JSON.stringify(validationErrors)}`);
            }
            
            // Create a copy of settings for rollback
            const previousSettings = JSON.parse(JSON.stringify(this.settings));
            const previousOrigin = this.settingsOrigin;
            
            // Update local state
            this.updateSettingValue(path, value);
            // Mark as modified from default since this is a user action
            this.settingsOrigin = 'default';
            
            // Validate entire settings object after update
            const fullValidation = validateSettings(this.settings);
            if (!fullValidation.isValid) {
                // Rollback and notify of validation errors
                this.settings = previousSettings;
                this.settingsOrigin = previousOrigin;
                this.notifyValidationErrors(fullValidation.errors);
                throw new Error(`Full validation failed: ${JSON.stringify(fullValidation.errors)}`);
            }
            
            // Sync with server (not an initial sync)
            try {
                await this.syncWithServer(false);
            } catch (error) {
                // Rollback on server sync failure
                this.settings = previousSettings;
                this.settingsOrigin = previousOrigin;
                this.notifySubscribers(path, this.get(path));
                throw error;
            }
            
            // Notify subscribers of successful update
            this.notifySubscribers(path, value);
            
            this.logger.debug(`Setting updated successfully: ${path}`, {
                value,
                origin: this.settingsOrigin
            });
        } catch (error) {
            this.logger.error(`Failed to update setting: ${path}`, error);
            throw error;
        }
    }

    public isFromServer(): boolean {
        return this.settingsOrigin === 'server';
    }

    private prepareSettingsForSync(settings: Settings): any {
        // Create a copy of settings
        const preparedSettings = JSON.parse(JSON.stringify(settings));

        // Ensure required sections exist
        if (!preparedSettings.system) preparedSettings.system = {};
        if (!preparedSettings.system.debug) preparedSettings.system.debug = {};
        if (!preparedSettings.xr) preparedSettings.xr = {};

        // Always include all required debug fields
        preparedSettings.system.debug = {
            enabled: preparedSettings.system.debug.enabled ?? false,
            enableDataDebug: preparedSettings.system.debug.enableDataDebug ?? false,
            enableWebsocketDebug: preparedSettings.system.debug.enableWebsocketDebug ?? false,
            logBinaryHeaders: preparedSettings.system.debug.logBinaryHeaders ?? false,
            logFullJson: preparedSettings.system.debug.logFullJson ?? false,
            logLevel: preparedSettings.system.debug.logLevel ?? 'info',
            logFormat: preparedSettings.system.debug.logFormat ?? 'json'
        };

        // Always include required XR fields
        const defaultXR = defaultSettings.xr;
        preparedSettings.xr = {
            ...preparedSettings.xr,
            gestureSmoothing: preparedSettings.xr.gestureSmoothing ?? defaultXR.gestureSmoothing,
            mode: preparedSettings.xr.mode ?? defaultXR.mode,
            roomScale: preparedSettings.xr.roomScale ?? defaultXR.roomScale,
            quality: preparedSettings.xr.quality ?? defaultXR.quality,
            spaceType: preparedSettings.xr.spaceType ?? defaultXR.spaceType,
            enableHandTracking: preparedSettings.xr.enableHandTracking ?? defaultXR.enableHandTracking,
            handMeshEnabled: preparedSettings.xr.handMeshEnabled ?? defaultXR.handMeshEnabled,
            handMeshColor: preparedSettings.xr.handMeshColor ?? defaultXR.handMeshColor,
            handMeshOpacity: preparedSettings.xr.handMeshOpacity ?? defaultXR.handMeshOpacity,
            handPointSize: preparedSettings.xr.handPointSize ?? defaultXR.handPointSize,
            handRayEnabled: preparedSettings.xr.handRayEnabled ?? defaultXR.handRayEnabled,
            handRayColor: preparedSettings.xr.handRayColor ?? defaultXR.handRayColor,
            handRayWidth: preparedSettings.xr.handRayWidth ?? defaultXR.handRayWidth,
            movementAxes: preparedSettings.xr.movementAxes ?? defaultXR.movementAxes
        };

        // Convert to snake_case for server
        return convertObjectKeysToSnakeCase(preparedSettings);
    }

    private async syncWithServer(isInitialSync: boolean = false): Promise<void> {
        // Don't sync to server during initialization if we got settings from server
        if (isInitialSync && this.settingsOrigin === 'server') {
            this.logger.debug('Skipping initial sync as settings came from server');
            return;
        }

        try {
            // Prepare settings for server sync
            const serverSettings = this.prepareSettingsForSync(this.settings);
            
            this.logger.debug('Sending settings to server:', {
                origin: this.settingsOrigin,
                isInitialSync,
                debug: serverSettings.system?.debug
            });
            
            const response = await fetch(buildApiUrl(API_ENDPOINTS.SETTINGS_ROOT), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(serverSettings)
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                this.logger.error('Server sync failed:', {
                    status: response.status,
                    error: errorText,
                    sentSettings: serverSettings.system?.debug
                });
                throw new Error(`Server returned ${response.status}: ${errorText}`);
            }
            
            // Convert server response back to camelCase
            const responseData = await response.json();
            const camelCaseSettings = convertObjectKeysToCamelCase(responseData);
            
            this.logger.debug('Received settings from server:', {
                debug: camelCaseSettings.system?.debug
            });
            
            // Validate server response
            const validationResult = validateSettings(camelCaseSettings);
            if (!validationResult.isValid) {
                this.logger.error('Settings validation failed:', {
                    errors: validationResult.errors,
                    receivedSettings: camelCaseSettings.system?.debug
                });
                throw new Error(`Invalid server response: ${JSON.stringify(validationResult.errors)}`);
            }
            
            this.settings = this.deepMerge(this.settings, camelCaseSettings);
            this.logger.debug('Settings synced successfully:', {
                finalDebug: this.settings.system?.debug
            });
        } catch (error) {
            this.logger.error('Failed to sync settings with server:', error);
            if (this.retryCount < this.MAX_RETRIES) {
                this.retryCount++;
                this.logger.info(`Retrying sync (attempt ${this.retryCount}/${this.MAX_RETRIES})...`);
                await new Promise(resolve => setTimeout(resolve, this.RETRY_DELAY));
                return this.syncWithServer();
            }
            throw error;
        }
    }

    private notifyValidationErrors(errors: ValidationError[]): void {
        this.validationSubscribers.forEach(callback => {
            try {
                callback(errors);
            } catch (error) {
                this.logger.error('Error in validation subscriber:', error);
            }
        });
    }

    private notifySubscribers(path: string, value: unknown): void {
        const subscribers = this.subscribers.get(path);
        if (subscribers) {
            subscribers.forEach(callback => {
                try {
                    callback(path, value);
                } catch (error) {
                    this.logger.error(`Error in settings subscriber for ${path}:`, error);
                }
            });
        }
    }

    private deepMerge(target: any, source: any): any {
        const result = { ...target };
        
        // Handle arrays
        if (Array.isArray(source)) {
            return [...source];
        }
        
        if (source && typeof source === 'object') {
            Object.keys(source).forEach(key => {
                if (source[key] instanceof Object && !Array.isArray(source[key])) {
                    result[key] = this.deepMerge(result[key] || {}, source[key]);
                } else {
                    result[key] = source[key];
                }
            });
        }
        
        return result;
    }

    private updateSettingValue(path: string, value: unknown): void {
        if (!path) {
            throw new Error('Setting path cannot be empty');
        }
        
        const parts = path.split('.');
        const section = parts[0];
        const lastKey = parts.pop()!;
        const target = parts.reduce((obj: any, key) => {
            if (!(key in obj)) {
                obj[key] = {};
            }
            return obj[key];
        }, this.settings);

        if (!target || typeof target !== 'object') {
            throw new Error(`Invalid settings path: ${path}`);
        }

        // Update the specific value
        target[lastKey] = value;

        // If this is an XR setting, ensure all required fields are present
        if (section === 'xr') {
            const currentXR = this.settings.xr;
            const defaultXR = defaultSettings.xr;
            
            // Ensure all required XR fields are present with defaults
            this.settings.xr = {
                ...currentXR,
                mode: currentXR.mode ?? defaultXR.mode,
                roomScale: currentXR.roomScale ?? defaultXR.roomScale,
                spaceType: currentXR.spaceType ?? defaultXR.spaceType,
                quality: currentXR.quality ?? defaultXR.quality,
                gestureSmoothing: currentXR.gestureSmoothing ?? defaultXR.gestureSmoothing,
                enableHandTracking: currentXR.enableHandTracking ?? defaultXR.enableHandTracking,
                handMeshEnabled: currentXR.handMeshEnabled ?? defaultXR.handMeshEnabled,
                handMeshColor: currentXR.handMeshColor ?? defaultXR.handMeshColor,
                handMeshOpacity: currentXR.handMeshOpacity ?? defaultXR.handMeshOpacity,
                handPointSize: currentXR.handPointSize ?? defaultXR.handPointSize,
                handRayEnabled: currentXR.handRayEnabled ?? defaultXR.handRayEnabled,
                handRayColor: currentXR.handRayColor ?? defaultXR.handRayColor,
                handRayWidth: currentXR.handRayWidth ?? defaultXR.handRayWidth,
                movementAxes: currentXR.movementAxes ?? defaultXR.movementAxes
            };
        }
    }

    public dispose(): void {
        this.subscribers.clear();
        this.validationSubscribers = [];
        this.settings = { ...defaultSettings };
        SettingsStore.instance = null;
    }
}

----
types/env.d.ts
/// <reference types="vite/client" />

interface ImportMetaEnv {
  readonly VITE_APP_TITLE: string;
  readonly DEV: boolean;
  readonly PROD: boolean;
  readonly MODE: string;
}

interface ImportMeta {
  readonly env: ImportMetaEnv;
}

----
types/gestures.ts
export enum HandGestureType {
    None = 'none',
    Pinch = 'pinch',
    Grab = 'grab',
    Point = 'point',
    Wave = 'wave'
}

----
types/metadata.ts
export interface NodeMetadata {
    id: string;
    name: string;
    commitAge: number;        // Age in days
    hyperlinkCount: number;   // Number of hyperlinks
    importance: number;       // Normalized importance (0-1)
    position: {
        x: number;
        y: number;
        z: number;
    };
}

export interface HologramSettings {
    enabled: boolean;
    desktopQuality: 'low' | 'medium' | 'high';
    xrQuality: 'low' | 'medium';
    ringCount: number;
    ringSizes: number[];
    ringOpacity: number;
    ringColor: string;
    ringRotationSpeed: number;
    enableBuckminster: boolean;
    buckminsterScale: number;
    buckminsterOpacity: number;
    enableGeodesic: boolean;
    geodesicScale: number;
    geodesicOpacity: number;
    enableTriangleSphere: boolean;
    triangleSphereScale: number;
    triangleSphereOpacity: number;
    globalRotationSpeed: number;
    wireframeThickness: number;
}

export interface LabelSettings {
    textRenderingMode: 'sdf' | 'bitmap';
    textResolution: number;
    textPadding: number;
    textOutlineWidth: number;
    textOutlineColor: string;
    billboardMode: 'camera' | 'vertical';
    desktopFontSize: number;
    enableLabels: boolean;
    textColor: string;
}

// Alias for backward compatibility and clarity
export type Metadata = NodeMetadata;
----
types/settings.ts
import { XRSettings } from './settings/xr';

// Core visualization settings
export interface VisualizationSettings {
    animations: AnimationSettings;
    bloom: BloomSettings;
    edges: EdgeSettings;
    hologram: HologramSettings;
    labels: LabelSettings;
    nodes: NodeSettings;
    physics: PhysicsSettings;
    rendering: RenderingSettings;
}

// Component settings interfaces
export interface AnimationSettings {
    enableNodeAnimations: boolean;
    enableMotionBlur: boolean;
    motionBlurStrength: number;
    selectionWaveEnabled: boolean;
    pulseEnabled: boolean;
    pulseSpeed: number;
    pulseStrength: number;
    waveSpeed: number;
}

export interface BloomSettings {
    enabled: boolean;
    strength: number;
    radius: number;
    threshold: number;
    edgeBloomStrength: number;
    nodeBloomStrength: number;
    environmentBloomStrength: number;
}

export interface EdgeSettings {
    color: string;
    opacity: number;
    arrowSize: number;
    baseWidth: number;
    enableArrows: boolean;
    widthRange: [number, number];
}

export interface HologramSettings {
    ringCount: number;
    ringSizes: number[];
    ringRotationSpeed: number;
    globalRotationSpeed: number;
    ringColor: string;
    ringOpacity: number;
    enableBuckminster: boolean;
    buckminsterScale: number;
    buckminsterOpacity: number;
    enableGeodesic: boolean;
    geodesicScale: number;
    geodesicOpacity: number;
    enableTriangleSphere: boolean;
    triangleSphereScale: number;
    triangleSphereOpacity: number;
}

export interface LabelSettings {
    enableLabels: boolean;
    desktopFontSize: number;
    textColor: string;
    textOutlineColor: string;
    textOutlineWidth: number;
    textResolution: number;
    textPadding: number;
    billboardMode: boolean;
}

export interface NodeSettings {
    quality: 'low' | 'medium' | 'high';
    enableInstancing: boolean;
    enableHologram: boolean;
    enableMetadataShape: boolean;
    enableMetadataVisualization: boolean;
    baseSize: number;
    sizeRange: [number, number];
    baseColor: string;
    opacity: number;
    colorRangeAge: [string, string];
    colorRangeLinks: [string, string];
    metalness: number;
    roughness: number;
}

export interface PhysicsSettings {
    enabled: boolean;
    attractionStrength: number;
    repulsionStrength: number;
    springStrength: number;
    damping: number;
    iterations: number;
    maxVelocity: number;
    collisionRadius: number;
    enableBounds: boolean;
    boundsSize: number;
}

export interface RenderingSettings {
    ambientLightIntensity: number;
    directionalLightIntensity: number;
    environmentIntensity: number;
    backgroundColor: string;
    enableAmbientOcclusion: boolean;
    enableAntialiasing: boolean;
    enableShadows: boolean;
    shadowMapSize: number;  // Size of shadow map texture
    shadowBias: number;    // Shadow bias for preventing shadow acne
}

// Client-side WebSocket settings (non-sensitive)
export interface WebSocketSettings {
    reconnectAttempts: number;
    reconnectDelay: number;
    binaryChunkSize: number;
    compressionEnabled: boolean;
    compressionThreshold: number;
    updateRate: number;
}

// Debug settings (UI-only)
export interface DebugSettings {
    enabled: boolean;
    enableDataDebug: boolean;
    enableWebsocketDebug: boolean;
    logBinaryHeaders: boolean;
    logFullJson: boolean;
    logLevel: 'error' | 'warn' | 'info' | 'debug' | 'trace';
    logFormat: string;
}

// Main settings interface
export interface Settings {
    visualization: {
        nodes: NodeSettings;
        edges: EdgeSettings;
        physics: PhysicsSettings;
        rendering: RenderingSettings;
        animations: AnimationSettings;
        labels: LabelSettings;
        bloom: BloomSettings;
        hologram: HologramSettings;
    };
    system: {
        websocket: WebSocketSettings;
        debug: DebugSettings;
    };
    xr: XRSettings;
}

export * from './settings/base';
export * from './settings/utils';

----
types/three-ext.d.ts
declare module 'three/examples/jsm/controls/OrbitControls' {
  import { Camera, EventDispatcher, MOUSE, TOUCH, Vector3 } from 'three';

  export class OrbitControls extends EventDispatcher {
    constructor(object: Camera, domElement?: HTMLElement);

    object: Camera;
    domElement: HTMLElement | HTMLDocument;

    enabled: boolean;
    target: Vector3;

    minDistance: number;
    maxDistance: number;

    minZoom: number;
    maxZoom: number;

    minPolarAngle: number;
    maxPolarAngle: number;

    minAzimuthAngle: number;
    maxAzimuthAngle: number;

    enableDamping: boolean;
    dampingFactor: number;

    enableZoom: boolean;
    zoomSpeed: number;

    enableRotate: boolean;
    rotateSpeed: number;

    enablePan: boolean;
    panSpeed: number;
    screenSpacePanning: boolean;
    keyPanSpeed: number;

    autoRotate: boolean;
    autoRotateSpeed: number;

    enableKeys: boolean;

    keys: { LEFT: number; UP: number; RIGHT: number; BOTTOM: number };
    mouseButtons: { LEFT: MOUSE; MIDDLE: MOUSE; RIGHT: MOUSE };
    touches: { ONE: TOUCH; TWO: TOUCH };

    update(): boolean;
    dispose(): void;
  }
}

declare module 'three/examples/jsm/webxr/XRControllerModelFactory' {
  import { Group, Texture } from 'three';

  export class XRControllerModelFactory {
    constructor();
    createControllerModel(controller: Group): Group;
  }
}

declare module 'three/examples/jsm/postprocessing/EffectComposer' {
  import { WebGLRenderer, WebGLRenderTarget } from 'three';

  export class Pass {
    enabled: boolean;
    needsSwap: boolean;
    clear: boolean;
    renderToScreen: boolean;

    setSize(width: number, height: number): void;
    render(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget, deltaTime?: number, maskActive?: boolean): void;
  }

  export class EffectComposer {
    constructor(renderer: WebGLRenderer, renderTarget?: WebGLRenderTarget);
    
    renderTarget1: WebGLRenderTarget;
    renderTarget2: WebGLRenderTarget;
    writeBuffer: WebGLRenderTarget;
    readBuffer: WebGLRenderTarget;
    passes: Pass[];
    
    swapBuffers(): void;
    addPass(pass: Pass): void;
    insertPass(pass: Pass, __index: number): void;
    removePass(pass: Pass): void;
    render(deltaTime?: number): void;
    reset(renderTarget?: WebGLRenderTarget): void;
    setSize(width: number, height: number): void;
    dispose(): void;
  }
}

declare module 'three/examples/jsm/postprocessing/RenderPass' {
  import { Scene, Camera } from 'three';
  import { Pass } from 'three/examples/jsm/postprocessing/EffectComposer';

  export class RenderPass extends Pass {
    constructor(scene: Scene, camera: Camera);
    scene: Scene;
    camera: Camera;
  }
}

declare module 'three/examples/jsm/postprocessing/UnrealBloomPass' {
  import { Vector2 } from 'three';
  import { Pass } from 'three/examples/jsm/postprocessing/EffectComposer';

  export class UnrealBloomPass extends Pass {
    constructor(resolution: Vector2, strength?: number, radius?: number, threshold?: number);
    resolution: Vector2;
    strength: number;
    radius: number;
    threshold: number;
  }
}

----
types/three.d.ts
declare module 'three' {
  export interface Event {
    type: string;
    target: Group;
  }

  export interface XRControllerEvent extends Event {
    type: 'connected' | 'disconnected';
    target: Group;
    data: XRInputSource;
  }

  export interface Object3DEventMap {
    connected: XRControllerEvent;
    disconnected: XRControllerEvent;
  }

  export interface EventDispatcher<E extends Event = Event> {
    addEventListener<T extends E['type']>(type: T, listener: (event: E & { type: T }) => void): void;
    removeEventListener<T extends E['type']>(type: T, listener: (event: E & { type: T }) => void): void;
    dispatchEvent(event: E): void;
  }

  export class Layers {
    mask: number;
    set(layer: number): void;
    enable(layer: number): void;
    disable(layer: number): void;
    toggle(layer: number): void;
    test(layers: Layers): boolean;
  }

  export class Object3D implements EventDispatcher<Event & XRControllerEvent> {
    position: Vector3;
    quaternion: Quaternion;
    scale: Vector3;
    matrix: Matrix4;
    matrixWorld: Matrix4;
    children: Object3D[];
    parent: Object3D | null;
    userData: any;
    visible: boolean;
    renderOrder: number;
    frustumCulled: boolean;
    matrixAutoUpdate: boolean;
    layers: Layers;
    add(...objects: Object3D[]): this;
    remove(...objects: Object3D[]): this;
    rotateX(angle: number): this;
    rotateY(angle: number): this;
    rotateZ(angle: number): this;
    updateMatrix(): void;
    updateMatrixWorld(force?: boolean): void;
    traverse(callback: (object: Object3D) => void): void;
    lookAt(x: number | Vector3, y?: number, z?: number): void;
    addEventListener<K extends keyof Object3DEventMap>(
      type: K,
      listener: (event: Object3DEventMap[K]) => void
    ): void;
    addEventListener(
      type: string,
      listener: (event: Event) => void
    ): void;
    removeEventListener<K extends keyof Object3DEventMap>(
      type: K,
      listener: (event: Object3DEventMap[K]) => void
    ): void;
    removeEventListener(
      type: string,
      listener: (event: Event) => void
    ): void;
    dispatchEvent(event: Event): void;
  }

  export class Group extends Object3D {
    constructor();
  }

  export class Scene extends Object3D {
    constructor();
    fog: FogExp2 | null;
    background: Color | Texture | null;
  }

  export class Material {
    transparent: boolean;
    opacity: number;
    depthWrite: boolean;
    depthTest: boolean;
    side: Side;
    color: Color;
    dispose(): void;
  }

  export class Mesh extends Object3D {
    constructor(geometry: BufferGeometry, material: Material);
    geometry: BufferGeometry;
    material: Material;
  }

  export class GridHelper extends Object3D {
    constructor(size: number, divisions: number, color1?: ColorRepresentation, color2?: ColorRepresentation);
    material: Material;
    geometry: BufferGeometry;
  }

  export class Light extends Object3D {
    constructor(color?: ColorRepresentation, intensity?: number);
    intensity: number;
  }

  export class DirectionalLight extends Light {
    constructor(color?: ColorRepresentation, intensity?: number);
    intensity: number;
  }

  export class AmbientLight extends Light {
    constructor(color?: ColorRepresentation, intensity?: number);
  }

  export class BufferAttribute {
    array: ArrayLike<number>;
    itemSize: number;
    count: number;
    normalized: boolean;
    needsUpdate: boolean;
    constructor(array: ArrayLike<number>, itemSize: number, normalized?: boolean);
    setX(index: number, x: number): this;
    setY(index: number, y: number): this;
    setZ(index: number, z: number): this;
    setW(index: number, w: number): this;
    setXY(index: number, x: number, y: number): this;
    setXYZ(index: number, x: number, y: number, z: number): this;
    setXYZW(index: number, x: number, y: number, z: number, w: number): this;
  }

  export class InstancedBufferAttribute extends BufferAttribute {
    constructor(array: ArrayLike<number>, itemSize: number, normalized?: boolean, meshPerAttribute?: number);
    meshPerAttribute: number;
  }

  export class InstancedMesh extends Mesh {
    constructor(geometry: BufferGeometry, material: Material | Material[], count: number);
    count: number;
    instanceMatrix: InstancedBufferAttribute;
    instanceColor: InstancedBufferAttribute | null;
    frustumCulled: boolean;
    setColorAt(index: number, color: Color): void;
    setMatrixAt(index: number, matrix: Matrix4): void;
    getMatrixAt(index: number, matrix: Matrix4): void;
    getColorAt(index: number, color: Color): void;
    dispose(): void;
  }

  export class MeshBasicMaterial extends Material {
    constructor(parameters?: MeshBasicMaterialParameters);
  }

  export class LineBasicMaterial extends Material {
    constructor(parameters?: MaterialParameters);
  }

  export class MeshPhongMaterial extends Material {
    constructor(parameters?: MeshPhongMaterialParameters);
    shininess: number;
    specular: Color;
  }

  export class MeshStandardMaterial extends Material {
    constructor(parameters?: MeshStandardMaterialParameters);
    metalness: number;
    roughness: number;
    map: Texture | null;
    emissive: Color;
  }

  export class SpriteMaterial extends Material {
    constructor(parameters?: SpriteMaterialParameters);
    map: Texture | null;
    color: Color;
    sizeAttenuation: boolean;
    rotation: number;
  }

  export class BufferGeometry {
    dispose(): void;
    rotateX(angle: number): this;
    rotateY(angle: number): this;
    rotateZ(angle: number): this;
    setAttribute(name: string, attribute: BufferAttribute): this;
    setIndex(index: BufferAttribute): this;
  }

  export class PlaneGeometry extends BufferGeometry {
    constructor(width?: number, height?: number, widthSegments?: number, heightSegments?: number);
  }

  export class SphereGeometry extends BufferGeometry {
    constructor(radius?: number, widthSegments?: number, heightSegments?: number);
  }

  export class CylinderGeometry extends BufferGeometry {
    constructor(
      radiusTop?: number,
      radiusBottom?: number,
      height?: number,
      radialSegments?: number
    );
  }

  export class RingGeometry extends BufferGeometry {
    constructor(
      innerRadius?: number,
      outerRadius?: number,
      thetaSegments?: number
    );
  }

  export class Vector2 {
    x: number;
    y: number;
    constructor(x?: number, y?: number);
    set(x: number, y: number): this;
  }

  export class Vector3 {
    x: number;
    y: number;
    z: number;
    constructor(x?: number, y?: number, z?: number);
    set(x: number, y: number, z: number): this;
    copy(v: Vector3): this;
    add(v: Vector3): this;
    sub(v: Vector3): this;
    multiply(v: Vector3): this;
    multiplyScalar(s: number): this;
    normalize(): this;
    dot(v: Vector3): number;
    cross(v: Vector3): this;
    length(): number;
    lengthSq(): number;
    clone(): Vector3;
    fromArray(array: number[] | ArrayLike<number>, offset?: number): this;
    subVectors(a: Vector3, b: Vector3): this;
    addVectors(a: Vector3, b: Vector3): this;
    crossVectors(a: Vector3, b: Vector3): this;
    setFromMatrixPosition(m: Matrix4): this;
    distanceTo(v: Vector3): number;
    applyMatrix4(m: Matrix4): this;
    lookAt(v: Vector3): this;
  }

  export class Matrix4 {
    elements: number[];
    constructor();
    set(...elements: number[]): this;
    identity(): this;
    copy(m: Matrix4): this;
    compose(position: Vector3, quaternion: Quaternion, scale: Vector3): this;
    decompose(position: Vector3, quaternion: Quaternion, scale: Vector3): this;
    fromArray(array: ArrayLike<number>, offset?: number): this;
    extractRotation(m: Matrix4): this;
    makeRotationFromQuaternion(q: Quaternion): this;
  }

  export class Quaternion {
    x: number;
    y: number;
    z: number;
    w: number;
    constructor(x?: number, y?: number, z?: number, w?: number);
    setFromAxisAngle(axis: Vector3, angle: number): this;
    identity(): this;
    multiply(q: Quaternion): this;
    setFromEuler(euler: Euler): this;
  }

  export class Euler {
    constructor(x?: number, y?: number, z?: number, order?: string);
    x: number;
    y: number;
    z: number;
    order: string;
  }

  export class Color {
    constructor(color?: ColorRepresentation);
    set(color: ColorRepresentation): this;
    setHSL(h: number, s: number, l: number): Color;
    clone(): Color;
  }

  export class Sprite extends Object3D {
    constructor(material: SpriteMaterial);
    material: SpriteMaterial;
  }

  export class Raycaster {
    constructor();
    ray: Ray;
    near: number;
    far: number;
    camera: Camera;
    params: {
      Mesh?: {},
      Line?: {},
      LOD?: {},
      Points?: { threshold: number },
      Sprite?: {}
    };
    setFromCamera(coords: Vector2, camera: Camera): void;
    intersectObject(object: Object3D, recursive?: boolean, intersects?: Intersection[]): Intersection[];
    intersectObjects(objects: Object3D[], recursive?: boolean, intersects?: Intersection[]): Intersection[];
  }

  export class Ray {
    origin: Vector3;
    direction: Vector3;
    constructor(origin?: Vector3, direction?: Vector3);
  }

  export class WebGLRenderer {
    constructor(parameters?: WebGLRendererParameters);
    domElement: HTMLCanvasElement;
    setSize(width: number, height: number, updateStyle?: boolean): void;
    setPixelRatio(value: number): void;
    render(scene: Scene, camera: Camera): void;
    dispose(): void;
    xr: WebXRManager;
    setAnimationLoop(callback: ((time: number) => void) | null): void;
  }

  export interface WebXRManager {
    enabled: boolean;
    setSession(session: XRSession): Promise<void>;
    addEventListener(type: string, listener: EventListener): void;
    removeEventListener(type: string, listener: EventListener): void;
  }

  export class Camera extends Object3D {
    matrixWorldInverse: Matrix4;
    projectionMatrix: Matrix4;
    projectionMatrixInverse: Matrix4;
    layers: Layers;
    lookAt(target: Vector3 | number, y?: number, z?: number): void;
  }

  export class PerspectiveCamera extends Camera {
    constructor(fov?: number, aspect?: number, near?: number, far?: number);
    fov: number;
    aspect: number;
    near: number;
    far: number;
    updateProjectionMatrix(): void;
    lookAt(target: Vector3 | number, y?: number, z?: number): void;
  }

  export interface MaterialParameters {
    color?: ColorRepresentation;
    transparent?: boolean;
    opacity?: number;
    side?: Side;
    depthWrite?: boolean;
    depthTest?: boolean;
    map?: Texture;
  }

  export interface MeshBasicMaterialParameters extends MaterialParameters {}
  export interface MeshPhongMaterialParameters extends MaterialParameters {
    shininess?: number;
    specular?: ColorRepresentation;
  }
  export interface MeshStandardMaterialParameters extends MaterialParameters {
    metalness?: number;
    roughness?: number;
    map?: Texture | null;
    emissive?: ColorRepresentation;
  }

  export interface SpriteMaterialParameters extends MaterialParameters {
    sizeAttenuation?: boolean;
    rotation?: number;
  }

  export class Texture {
    constructor(image?: HTMLImageElement | HTMLCanvasElement);
    needsUpdate: boolean;
    dispose(): void;
  }

  export class FogExp2 {
    constructor(color: ColorRepresentation, density?: number);
    color: Color;
    density: number;
  }

  export interface Intersection {
    distance: number;
    point: Vector3;
    face: { normal: Vector3 } | null;
    object: Object3D;
  }

  export class MathUtils {
    static clamp(value: number, min: number, max: number): number;
    static degToRad(degrees: number): number;
    static radToDeg(radians: number): number;
    static lerp(x: number, y: number, t: number): number;
    static smoothstep(x: number, min: number, max: number): number;
  }

  export const DoubleSide: Side;
  export type Side = 0 | 1 | 2;
  export type ColorRepresentation = Color | string | number;

  export class Clock {
    constructor(autoStart?: boolean);
    start(): void;
    stop(): void;
    getElapsedTime(): number;
    getDelta(): number;
  }

  export class TorusGeometry extends BufferGeometry {
    constructor(radius?: number, tube?: number, radialSegments?: number, tubularSegments?: number, arc?: number);
  }

  export class IcosahedronGeometry extends BufferGeometry {
    constructor(radius?: number, detail?: number);
  }

  export class OctahedronGeometry extends BufferGeometry {
    constructor(radius?: number, detail?: number);
  }

  export class ShaderMaterial extends Material {
    constructor(parameters?: ShaderMaterialParameters);
    uniforms: { [uniform: string]: { value: any } };
    defines: { [define: string]: string | number | boolean };
    needsUpdate: boolean;
  }

  export interface Material {
    clone(): Material;
    uniforms?: { [uniform: string]: { value: any } };
    defines?: { [define: string]: string | number | boolean };
    needsUpdate: boolean;
  }

  export interface Vector3 {
    setScalar(scalar: number): Vector3;
    fromBufferAttribute(attribute: BufferAttribute, index: number): Vector3;
  }

  export interface Quaternion {
    copy(quaternion: Quaternion): Quaternion;
  }

  export interface Mesh extends Object3D {
    rotation: Euler;
    material: Material;
  }

  export interface Group extends Object3D {
    onBeforeRender?: (renderer: WebGLRenderer, scene: Scene, camera: Camera) => void;
  }

  export interface Color {
    setHSL(h: number, s: number, l: number): Color;
  }

  export interface XRHand extends Map<XRHandJoint, XRJointSpace> {
    joints: { [key: string]: XRJointSpace };
  }

  export const AdditiveBlending: number;
  export const NormalBlending: number;
  export const MultiplyBlending: number;

  export class TextGeometry extends BufferGeometry {
    constructor(text: string, parameters?: {
        font: Font;
        size?: number;
        height?: number;
        curveSegments?: number;
        bevelEnabled?: boolean;
        bevelThickness?: number;
        bevelSize?: number;
        bevelOffset?: number;
        bevelSegments?: number;
    });
    computeBoundingBox(): void;
    boundingBox: Box3 | null;
    dispose(): void;
    rotateX(angle: number): this;
    rotateY(angle: number): this;
    rotateZ(angle: number): this;
    translate(x: number, y: number, z: number): this;
  }

  export class Box3 {
    min: Vector3;
    max: Vector3;
    constructor(min?: Vector3, max?: Vector3);
  }

  export interface XRJointSpace {
    position: Vector3;
    matrixWorld: Matrix4;
  }

  export interface XRHand extends Map<XRHandJoint, XRJointSpace> {
    joints: { [key: string]: XRJointSpace };
  }
}

----
types/websocket.ts
// WebSocket types for graph synchronization

export enum ConnectionState {
    DISCONNECTED = 'DISCONNECTED',
    CONNECTING = 'CONNECTING',
    CONNECTED = 'CONNECTED',
    RECONNECTING = 'RECONNECTING'
}

export enum MessageType {
    PING = 'ping',                          // Connection health check
    PONG = 'pong'                           // Connection health response
}

// Connection health messages
export interface PingMessage {
    type: MessageType.PING;
    timestamp: number;
}

export interface PongMessage {
    type: MessageType.PONG;
    timestamp: number;
}

export type WebSocketMessage = PingMessage | PongMessage;

// WebSocket settings loaded via REST API
export interface WebSocketSettings {
    url: string;                  // WebSocket URL
    reconnectAttempts: number;     // Max reconnection attempts (default: 3)
    reconnectDelay: number;        // Delay between reconnects in ms (default: 5000)
    updateRate: number;            // Update rate in Hz
}

----
types/webxr.d.ts
/**
 * WebXR API type extensions
 */

declare module 'three' {
  interface Object3DEventMap {
    connected: XRControllerEvent;
    disconnected: XRControllerEvent;
  }
}

interface XRControllerEvent extends THREE.Event {
  type: 'connected' | 'disconnected';
  data: XRInputSource;
}

interface XRLightEstimate {
  primaryLightIntensity?: { value: number };
  primaryLightDirection?: { x: number; y: number; z: number };
}

// Extend existing WebXR types
declare global {
  interface XRFrame {
    // Make getLightEstimate optional
    getLightEstimate?(): XRLightEstimate | null;
    getHitTestResults(hitTestSource: XRHitTestSource): XRHitTestResult[];
    getViewerPose(referenceSpace: XRReferenceSpace): XRViewerPose | null;
    getPose(space: XRSpace, baseSpace: XRReferenceSpace): XRPose | null;
  }

  interface XRSession {
    requestReferenceSpace(type: XRReferenceSpaceType): Promise<XRReferenceSpace>;
    // Make requestHitTestSource non-optional
    requestHitTestSource(options: XRHitTestOptionsInit): Promise<XRHitTestSource>;
    end(): Promise<void>;
    addEventListener(type: string, listener: EventListener): void;
    removeEventListener(type: string, listener: EventListener): void;
  }

  interface XRHitTestOptionsInit {
    space: XRSpace;
    offsetRay?: XRRay;
  }

  interface XRHitTestSource {
    cancel(): void;
  }

  interface XRHitTestResult {
    getPose(baseSpace: XRSpace): XRPose | null;
  }

  interface XRPose {
    transform: XRRigidTransform;
  }

  interface XRViewerPose extends XRPose {
    views: XRView[];
  }

  interface XRView {
    projectionMatrix: Float32Array;
    transform: XRRigidTransform;
  }

  interface XRRigidTransform {
    matrix: Float32Array;
    position: { x: number; y: number; z: number };
    orientation: { x: number; y: number; z: number; w: number };
  }

  interface XRReferenceSpace extends XRSpace {
    getOffsetReferenceSpace(originOffset: XRRigidTransform): XRReferenceSpace;
  }

  interface XRSpace {}

  interface XRRay {
    origin: DOMPointReadOnly;
    direction: DOMPointReadOnly;
    matrix: Float32Array;
  }

  type XRReferenceSpaceType = 
    | 'viewer'
    | 'local'
    | 'local-floor'
    | 'bounded-floor'
    | 'unbounded';

  interface XRInputSource {
    handedness: 'none' | 'left' | 'right';
    targetRayMode: 'gaze' | 'tracked-pointer' | 'screen';
    targetRaySpace: XRSpace;
    gripSpace?: XRSpace;
    profiles: string[];
    gamepad?: Gamepad;
    hand?: XRHand;
  }

  interface XRHand extends Map<XRHandJoint, XRJointSpace> {
    get(joint: XRHandJoint): XRJointSpace | undefined;
  }

  export type XRHandJoint =
    | 'wrist'
    | 'thumb-metacarpal'
    | 'thumb-phalanx-proximal'
    | 'thumb-phalanx-distal'
    | 'thumb-tip'
    | 'index-finger-metacarpal'
    | 'index-finger-phalanx-proximal'
    | 'index-finger-phalanx-intermediate'
    | 'index-finger-phalanx-distal'
    | 'index-finger-tip';

  export interface XRJointSpace extends XRSpace {
    jointRadius: number | undefined;
    position: { x: number; y: number; z: number };
    matrixWorld: THREE.Matrix4;
  }

  interface Navigator {
    xr?: {
      isSessionSupported(mode: string): Promise<boolean>;
      requestSession(mode: string, options?: XRSessionInit): Promise<XRSession>;
    };
  }

  interface XRSessionInit {
    requiredFeatures?: string[];
    optionalFeatures?: string[];
  }
}

// Prevent conflicts with @types/webxr
declare module '@types/webxr' {
  export {};
}

----
types/xr.ts
import * as THREE from 'three';
import { Platform } from '../core/types';

// Core XR Types
export type XRSessionMode = 'inline' | 'immersive-vr' | 'immersive-ar';
export type XRHandedness = 'none' | 'left' | 'right';
export type XRHand = THREE.XRHand;

export type XRHandJoint =
    | 'wrist'
    | 'thumb-metacarpal'
    | 'thumb-phalanx-proximal'
    | 'thumb-phalanx-distal'
    | 'thumb-tip'
    | 'index-finger-metacarpal'
    | 'index-finger-phalanx-proximal'
    | 'index-finger-phalanx-intermediate'
    | 'index-finger-phalanx-distal'
    | 'index-finger-tip'
    | 'middle-finger-metacarpal'
    | 'middle-finger-phalanx-proximal'
    | 'middle-finger-phalanx-intermediate'
    | 'middle-finger-phalanx-distal'
    | 'middle-finger-tip'
    | 'ring-finger-metacarpal'
    | 'ring-finger-phalanx-proximal'
    | 'ring-finger-phalanx-intermediate'
    | 'ring-finger-phalanx-distal'
    | 'ring-finger-tip'
    | 'pinky-finger-metacarpal'
    | 'pinky-finger-phalanx-proximal'
    | 'pinky-finger-phalanx-intermediate'
    | 'pinky-finger-phalanx-distal'
    | 'pinky-finger-tip';

export interface XRSessionConfig {
    mode: XRSessionMode;
    features: {
        required?: string[];
        optional?: string[];
    };
    spaceType: XRReferenceSpaceType;
}

// Input and Interaction Types
export interface HapticActuator {
    pulse: (intensity: number, duration: number) => Promise<boolean>;
}

export interface WorldObject3D extends THREE.Object3D {
    getWorldPosition(target: THREE.Vector3): THREE.Vector3;
}

export interface XRControllerState {
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
    hapticActuator?: HapticActuator;
    platform: Platform;
}

export interface XRHandJointState {
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
    radius?: number;
}

export interface XRHandState {
    position: THREE.Vector3;
    joints: Map<XRHandJoint, XRHandJointState>;
    pinchStrength: number;
    gripStrength: number;
    platform: Platform;
}

export interface XRHandWithHaptics extends THREE.Group {
    hapticActuators?: HapticActuator[];
    hand: {
        joints: {
            [key in XRHandJoint]?: WorldObject3D;
        };
    };
    pinchStrength: number;
    gripStrength: number;
    userData: {
        hapticActuator?: HapticActuator;
        platform: Platform;
    };
}

// Input Configuration
export interface XRInputConfig {
    controllers: boolean;
    hands: boolean;
    haptics: boolean;
}

// Event Types
export interface XRControllerEvent {
    controller: XRSpace;
    inputSource: XRInputSource;
    hapticActuator?: HapticActuator;
}

export interface XRHandEvent {
    hand: XRHandWithHaptics;
    inputSource: XRInputSource;
}

export interface XRInteractionState {
    pinching: boolean;
    pinchStrength: number;
    gripping: boolean;
    gripStrength: number;
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
}

// Platform-specific Types
export interface QuestHandTracking extends XRHandState {
    confidence: number;
    gestureId?: number;
}

export interface QuestControllerTracking extends XRControllerState {
    thumbstick: THREE.Vector2;
    trigger: number;
    grip: number;
}

----
types/settings/utils.ts
import { Settings } from '../settings';
import { defaultSettings } from '../../state/defaultSettings';

// Type for top-level settings categories
export type SettingsCategory = keyof Settings;

// Type for all possible paths in settings
export type SettingsPath = string;

// Type guard to check if a string is a valid settings category
export function isSettingsCategory(key: string): key is SettingsCategory {
    return key in defaultSettings;
}

// Type guard to check if a path exists in settings
export function isValidSettingPath(path: string): boolean {
    if (!path) {
        return false;
    }

    try {
        const parts = path.split('.');
        if (parts.length === 0) {
            return false;
        }

        let current: any = defaultSettings;
        for (const part of parts) {
            if (!part || typeof part !== 'string' || !(part in current)) {
                return false;
            }
            current = current[part];
        }
        
        return true;
    } catch (error: unknown) {
        return false;
    }
}

// Get value from settings using path
export function getSettingValue(settings: Settings, path: string): any {
    if (!settings || typeof settings !== 'object') {
        throw new Error('Invalid settings object');
    }
    if (!path) {
        throw new Error('Path cannot be empty');
    }
    
    try {
        return path.split('.').reduce((obj: any, key) => {
            if (obj === null || obj === undefined) {
                throw new Error(`Invalid path: ${path}`);
            }
            return obj[key];
        }, settings);
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : 'Unknown error';
        throw new Error(`Failed to get setting value at path ${path}: ${message}`);
    }
}

// Set value in settings using path
export function setSettingValue(settings: Settings, path: string, value: any): void {
    if (!settings || typeof settings !== 'object') {
        throw new Error('Invalid settings object');
    }
    if (!path) {
        throw new Error('Path cannot be empty');
    }
    
    try {
        const parts = path.split('.');
        const lastKey = parts.pop();
        if (!lastKey) {
            throw new Error('Invalid path format');
        }
        
        const target = parts.reduce((obj: any, key) => {
            if (!(key in obj)) {
                obj[key] = {};
            }
            return obj[key];
        }, settings);

        if (!target || typeof target !== 'object') {
            throw new Error(`Invalid path: ${path}`);
        }

        target[lastKey] = value;
    } catch (error: unknown) {
        const message = error instanceof Error ? error.message : 'Unknown error';
        throw new Error(`Failed to set setting value at path ${path}: ${message}`);
    }
}

// Get the parent category of a setting path
export function getSettingCategory(path: string): SettingsCategory | undefined {
    if (!path) {
        return undefined;
    }
    const category = path.split('.')[0];
    return isSettingsCategory(category) ? category : undefined;
}

// Get subcategory path (everything after the main category)
export function getSettingSubPath(path: string): string | undefined {
    if (!path) {
        return undefined;
    }
    const parts = path.split('.');
    return parts.length > 1 ? parts.slice(1).join('.') : undefined;
}

// Helper to check if a value is a nested settings object
export function isSettingsObject(value: any): boolean {
    return value !== null && typeof value === 'object' && !Array.isArray(value);
}

// Helper to get all paths in a settings object
export function getAllSettingPaths(
    obj: any,
    parentPath: string = '',
    paths: string[] = []
): string[] {
    if (!isSettingsObject(obj)) {
        return paths;
    }

    for (const key in obj) {
        const currentPath = parentPath ? `${parentPath}.${key}` : key;
        if (isSettingsObject(obj[key])) {
            getAllSettingPaths(obj[key], currentPath, paths);
        } else {
            paths.push(currentPath);
        }
    }
    return paths;
}

// Type helper for settings values
export type SettingValue = string | number | boolean | string[] | number[];

// Helper to get the appropriate input type for a setting
export function getSettingInputType(value: SettingValue): string {
    if (value === null || value === undefined) {
        return 'text';
    }
    if (typeof value === 'boolean') return 'checkbox';
    if (typeof value === 'number') return 'number';
    if (typeof value === 'string' && value.startsWith('#')) return 'color';
    if (Array.isArray(value)) return 'select';
    return 'text';
}

// Helper to format setting names for display
export function formatSettingName(setting: string): string {
    if (!setting) return '';
    return setting
        .split(/(?=[A-Z])|_/)
        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
        .join(' ');
}

// Helper to get step value for number inputs
export function getStepValue(key: string): string {
    if (!key) return '1';
    return key.toLowerCase().match(/strength|opacity|intensity|threshold|scale/)
        ? '0.1'
        : '1';
}

----
types/settings/validation.ts
import { Settings } from '../settings';

export interface ValidationError {
    path: string;
    message: string;
}

export interface ValidationResult {
    isValid: boolean;
    errors: ValidationError[];
}

export function validateSettings(settings: Settings): ValidationResult {
    const errors: ValidationError[] = [];

    // Validate visualization settings
    if (settings.visualization) {
        validateVisualizationSettings(settings.visualization, errors);
    }

    // Validate system settings
    if (settings.system) {
        validateSystemSettings(settings.system, errors);
    }

    // Validate XR settings
    if (settings.xr) {
        validateXRSettings(settings.xr, errors);
    }

    return {
        isValid: errors.length === 0,
        errors
    };
}

function validateVisualizationSettings(visualization: Settings['visualization'], errors: ValidationError[]): void {
    // Validate bloom settings
    if (visualization.bloom?.enabled) {
        validateNumericRange('visualization.bloom.strength', visualization.bloom.strength, 0, 3, errors);
        validateNumericRange('visualization.bloom.radius', visualization.bloom.radius, 0, 2, errors);
        validateNumericRange('visualization.bloom.threshold', visualization.bloom.threshold, 0, 1.5, errors);
    }

    // Validate hologram settings
    if (visualization.hologram) {
        if (visualization.hologram.enableBuckminster) {
            validateNumericRange('visualization.hologram.buckminsterScale', visualization.hologram.buckminsterScale, 0.1, 50, errors);
            validateNumericRange('visualization.hologram.buckminsterOpacity', visualization.hologram.buckminsterOpacity, 0, 1, errors);
        }
        if (visualization.hologram.enableGeodesic) {
            validateNumericRange('visualization.hologram.geodesicScale', visualization.hologram.geodesicScale, 0.1, 50, errors);
            validateNumericRange('visualization.hologram.geodesicOpacity', visualization.hologram.geodesicOpacity, 0, 1, errors);
        }
    }

    // Validate physics settings
    if (visualization.physics?.enabled) {
        // Align with force_calculation.wgsl SimulationParams ranges
        validateNumericRange('visualization.physics.attractionStrength', visualization.physics.attractionStrength, 0.001, 1.0, errors);
        validateNumericRange('visualization.physics.repulsionStrength', visualization.physics.repulsionStrength, 1.0, 10000.0, errors);
        validateNumericRange('visualization.physics.springStrength', visualization.physics.springStrength, 0.001, 1.0, errors);
        validateNumericRange('visualization.physics.damping', visualization.physics.damping, 0.5, 0.95, errors);
        validateNumericRange('visualization.physics.iterations', visualization.physics.iterations, 1, 500, errors);
        validateNumericRange('visualization.physics.maxVelocity', visualization.physics.maxVelocity, 0.1, 1.0, errors);
        validateNumericRange('visualization.physics.collisionRadius', visualization.physics.collisionRadius, 0.1, 1.0, errors);
        validateNumericRange('visualization.physics.boundsSize', visualization.physics.boundsSize, 10.0, 500.0, errors);
    }

    // Validate node settings
    if (visualization.nodes) {
        validateQualityEnum('visualization.nodes.quality', visualization.nodes.quality, errors);
        validateNumericRange('visualization.nodes.baseSize', visualization.nodes.baseSize, 0.5, 10.0, errors);
        validateNumericRange('visualization.nodes.opacity', visualization.nodes.opacity, 0.3, 1, errors);
        validateNumericRange('visualization.nodes.metalness', visualization.nodes.metalness, 0.2, 0.8, errors);
        validateNumericRange('visualization.nodes.roughness', visualization.nodes.roughness, 0.2, 0.8, errors);
        
        // Validate size range array
        if (visualization.nodes.sizeRange) {
            validateNumericRange('visualization.nodes.sizeRange[0]', visualization.nodes.sizeRange[0], 0.5, 5.0, errors);
            validateNumericRange('visualization.nodes.sizeRange[1]', visualization.nodes.sizeRange[1], 1.0, 10.0, errors);
            if (visualization.nodes.sizeRange[0] >= visualization.nodes.sizeRange[1]) {
                errors.push({
                    path: 'visualization.nodes.sizeRange',
                    message: 'Min size must be less than max size'
                });
            }
        }
    }
}

function validateSystemSettings(system: Settings['system'], errors: ValidationError[]): void {
    // Validate websocket settings
    if (system.websocket) {
        validateNumericRange('system.websocket.updateRate', system.websocket.updateRate, 1, 120, errors);
        validateNumericRange('system.websocket.reconnectAttempts', system.websocket.reconnectAttempts, 1, 10, errors);
        validateNumericRange('system.websocket.reconnectDelay', system.websocket.reconnectDelay, 1000, 30000, errors);
        validateNumericRange('system.websocket.binaryChunkSize', system.websocket.binaryChunkSize, 1024, 1048576, errors);
        validateNumericRange('system.websocket.compressionThreshold', system.websocket.compressionThreshold, 512, 1048576, errors);
    }
}

function validateXRSettings(xr: Settings['xr'], errors: ValidationError[]): void {
    // Validate mode
    if (!['immersive-ar', 'immersive-vr'].includes(xr.mode)) {
        errors.push({
            path: 'xr.mode',
            message: 'XR mode must be either immersive-ar or immersive-vr'
        });
    }

    // Validate space type
    if (!['viewer', 'local', 'local-floor', 'bounded-floor', 'unbounded'].includes(xr.spaceType)) {
        errors.push({
            path: 'xr.spaceType',
            message: 'Invalid space type'
        });
    }

    // Validate quality
    validateQualityEnum('xr.quality', xr.quality, errors);

    // Validate room scale
    validateNumericRange('xr.roomScale', xr.roomScale, 0.01, 1.0, errors);

    // Validate hand tracking settings
    validateNumericRange('xr.handMeshOpacity', xr.handMeshOpacity, 0.1, 0.8, errors);
    validateNumericRange('xr.handPointSize', xr.handPointSize, 1, 10, errors);
    validateNumericRange('xr.handRayWidth', xr.handRayWidth, 0.5, 5, errors);
    validateNumericRange('xr.gestureSmoothing', xr.gestureSmoothing, 0.3, 0.9, errors);

    // Validate interaction settings with refined ranges
    validateNumericRange('xr.hapticIntensity', xr.hapticIntensity, 0.1, 0.8, errors);
    validateNumericRange('xr.dragThreshold', xr.dragThreshold, 0.05, 0.3, errors);
    validateNumericRange('xr.pinchThreshold', xr.pinchThreshold, 0.1, 0.5, errors);
    validateNumericRange('xr.rotationThreshold', xr.rotationThreshold, 0.05, 0.3, errors);
    validateNumericRange('xr.interactionRadius', xr.interactionRadius, 0.1, 0.5, errors);
    validateNumericRange('xr.movementSpeed', xr.movementSpeed, 0.05, 0.2, errors);
    validateNumericRange('xr.deadZone', xr.deadZone, 0.05, 0.2, errors);

    // Validate movement axes
    if (xr.movementAxes) {
        validateNumericRange('xr.movementAxes.horizontal', xr.movementAxes.horizontal, 0, 5, errors);
        validateNumericRange('xr.movementAxes.vertical', xr.movementAxes.vertical, 0, 5, errors);
    }

    // Validate scene understanding settings with refined ranges
    validateNumericRange('xr.planeOpacity', xr.planeOpacity, 0.1, 0.5, errors);
    validateNumericRange('xr.planeDetectionDistance', xr.planeDetectionDistance ?? 3.0, 1.0, 10.0, errors);

    // Validate passthrough settings with refined ranges
    validateNumericRange('xr.passthroughOpacity', xr.passthroughOpacity, 0.5, 1.0, errors);
    validateNumericRange('xr.passthroughBrightness', xr.passthroughBrightness, 0.8, 1.5, errors);
    validateNumericRange('xr.passthroughContrast', xr.passthroughContrast, 0.8, 1.5, errors);
    validateNumericRange('xr.portalSize', xr.portalSize, 1.0, 5.0, errors);
    validateNumericRange('xr.portalEdgeWidth', xr.portalEdgeWidth, 0.5, 3.0, errors);

    // Validate that portal edge width is proportional to portal size
    if (xr.portalEdgeWidth && xr.portalSize && xr.portalEdgeWidth > xr.portalSize * 0.2) {
        errors.push({
            path: 'xr.portalEdgeWidth',
            message: 'Portal edge width should not exceed 20% of portal size'
        });
    }
}

function validateNumericRange(path: string, value: number, min: number, max: number, errors: ValidationError[]): void {
    if (value === undefined || value === null) {
        return; // Skip validation for undefined/null values
    }

    if (typeof value !== 'number' || isNaN(value)) {
        errors.push({
            path,
            message: `${path} must be a number`
        });
        return;
    }

    if (value < min || value > max) {
        errors.push({
            path,
            message: `${path} must be between ${min} and ${max}`
        });
    }
}

function validateQualityEnum(path: string, value: string, errors: ValidationError[]): void {
    if (!['low', 'medium', 'high'].includes(value)) {
        errors.push({
            path,
            message: `${path} must be one of: low, medium, high`
        });
    }
}

export function validateSettingValue(path: string, value: unknown, settings: Settings): ValidationError[] {
    // Create a copy of settings and update with new value
    const settingsCopy = JSON.parse(JSON.stringify(settings));
    const parts = path.split('.');
    let current = settingsCopy;
    for (let i = 0; i < parts.length - 1; i++) {
        current = current[parts[i]];
    }
    current[parts[parts.length - 1]] = value;

    // Validate the entire settings object
    const result = validateSettings(settingsCopy);
    
    // Filter errors to only include those related to the changed path
    // or any interdependent settings that might be affected
    return result.errors.filter(error => 
        error.path === path || isInterdependentSetting(path, error.path)
    );
}

function isInterdependentSetting(changedPath: string, errorPath: string): boolean {
    // Define interdependencies between settings
    const interdependencies: Record<string, string[]> = {
        'visualization.bloom.enabled': [
            'visualization.rendering.enableAntialiasing',
            'visualization.bloom.strength',
            'visualization.bloom.radius'
        ],
        'visualization.physics.enabled': [
            'visualization.animations.enableNodeAnimations',
            'visualization.physics.attractionStrength',
            'visualization.physics.repulsionStrength'
        ],
        'xr.enableHandTracking': [
            'xr.handMeshEnabled',
            'xr.handRayEnabled',
            'xr.gestureSmoothing'
        ],
        'xr.enablePassthroughPortal': [
            'xr.passthroughOpacity',
            'xr.passthroughBrightness',
            'xr.passthroughContrast',
            'xr.portalSize',
            'xr.portalEdgeWidth'
        ]
    };

    // Check if the error path is interdependent with the changed path
    return interdependencies[changedPath]?.includes(errorPath) || false;
}
----
types/settings/xr.ts
import { XRSessionMode } from '../xr';

export interface XRSettings {
    // Session Settings
    mode: XRSessionMode;
    roomScale: number;
    spaceType: 'viewer' | 'local' | 'local-floor' | 'bounded-floor' | 'unbounded';
    quality: 'low' | 'medium' | 'high';
    
    // Platform Settings
    autoEnterAR?: boolean;
    hideControlPanel?: boolean;
    preferredMode?: XRSessionMode;
    
    // Hand Tracking
    enableHandTracking: boolean;
    handMeshEnabled: boolean;
    handMeshColor: string;
    handMeshOpacity: number;
    handPointSize: number;
    handRayEnabled: boolean;
    handRayColor: string;
    handRayWidth: number;
    gestureSmoothing: number;
    
    // Interaction
    enableHaptics: boolean;
    hapticIntensity: number;
    dragThreshold: number;
    pinchThreshold: number;
    rotationThreshold: number;
    interactionRadius: number;
    movementSpeed: number;
    deadZone: number;
    movementAxes: {
        horizontal: number;
        vertical: number;
    };
    
    // Scene Understanding
    enableLightEstimation: boolean;
    enablePlaneDetection: boolean;
    enableSceneUnderstanding: boolean;
    planeColor: string;
    planeOpacity: number;
    showPlaneOverlay: boolean;
    snapToFloor: boolean;
    planeDetectionDistance?: number;  // Maximum distance for plane detection
    
    // Passthrough
    enablePassthroughPortal: boolean;
    passthroughOpacity: number;
    passthroughBrightness: number;
    passthroughContrast: number;
    portalSize: number;
    portalEdgeColor: string;
    portalEdgeWidth: number;
}

// Platform-specific XR settings
export interface QuestXRSettings extends XRSettings {
    enableHandMeshes: boolean;
    enableControllerModel: boolean;
    controllerProfile: string;
}

export interface WebXRSettings extends XRSettings {
    fallbackToInline: boolean;
    requireFeatures: string[];
    optionalFeatures: string[];
}

// Default XR settings
export const defaultXRSettings: XRSettings = {
    // Session Settings
    mode: 'immersive-ar',
    roomScale: 0.01,  // Updated: Scale factor of 0.01 for AR visualization (1/100th scaling)
    spaceType: 'local-floor',
    quality: 'high',
    
    // Platform Settings
    autoEnterAR: true,
    hideControlPanel: true,
    preferredMode: 'immersive-ar',
    
    // Hand Tracking
    enableHandTracking: true,
    handMeshEnabled: true,
    handMeshColor: '#ffffff',
    handMeshOpacity: 0.5,
    handPointSize: 5,
    handRayEnabled: true,
    handRayColor: '#00ff00',
    handRayWidth: 2,
    gestureSmoothing: 0.5,
    
    // Interaction
    enableHaptics: true,
    hapticIntensity: 0.5,
    dragThreshold: 0.02,
    pinchThreshold: 0.5,  // Updated: Reduced pinch threshold for improved responsiveness
    rotationThreshold: 0.1,
    interactionRadius: 0.5,
    movementSpeed: 0.05,
    deadZone: 0.1,
    movementAxes: {
        horizontal: 2, // Right joystick X
        vertical: 3   // Right joystick Y
    },
    
    // Scene Understanding
    enableLightEstimation: true,
    enablePlaneDetection: true,
    enableSceneUnderstanding: true,
    planeColor: '#808080',
    planeOpacity: 0.5,
    showPlaneOverlay: true,
    snapToFloor: true,
    planeDetectionDistance: 3.0,
    
    // Passthrough
    enablePassthroughPortal: false,
    passthroughOpacity: 1.0,
    passthroughBrightness: 1.0,
    passthroughContrast: 1.0,
    portalSize: 2.0,
    portalEdgeColor: '#ffffff',
    portalEdgeWidth: 2.0
};

----
types/settings/base.ts
// Base types for settings
export interface BaseSettings {
    visualization: {
        animations: {
            enableMotionBlur: boolean;
            enableNodeAnimations: boolean;
            motionBlurStrength: number;
            selectionWaveEnabled: boolean;
            pulseEnabled: boolean;
            rippleEnabled: boolean;
            edgeAnimationEnabled: boolean;
            flowParticlesEnabled: boolean;
        };
        bloom: {
            enabled: boolean;
            strength: number;
            radius: number;
            edgeBloomStrength: number;
            nodeBloomStrength: number;
            environmentBloomStrength: number;
        };
        edges: {
            arrowSize: number;
            baseWidth: number;
            color: string;
            enableArrows: boolean;
            opacity: number;
            widthRange: [number, number];
        };
        hologram: {
            ringCount: number;
            ringColor: string;
            ringOpacity: number;
            ringSizes: [number, number, number];
            ringRotationSpeed: number;
            enableBuckminster: boolean;
            buckminsterScale: number;
            buckminsterOpacity: number;
            enableGeodesic: boolean;
            geodesicScale: number;
            geodesicOpacity: number;
            enableTriangleSphere: boolean;
            triangleSphereScale: number;
            triangleSphereOpacity: number;
            globalRotationSpeed: number;
        };
        labels: {
            enableLabels: boolean;
            textColor: string;
            fontSize: number;
            fontFamily: string;
            strokeWidth: number;
            strokeColor: string;
            backgroundColor: string;
            backgroundOpacity: number;
            maxLength: number;
            minDistance: number;
            maxDistance: number;
        };
        nodes: {
            baseSize: number;
            sizeRange: [number, number];
            color: string;
            opacity: number;
            outlineWidth: number;
            outlineColor: string;
            enableGlow: boolean;
            glowStrength: number;
            glowColor: string;
            enablePulse: boolean;
            pulseSpeed: number;
            pulseStrength: number;
        };
        physics: {
            enabled: boolean;
            gravity: number;
            springLength: number;
            springStrength: number;
            damping: number;
            repulsion: number;
            timeStep: number;
            maxVelocity: number;
            minVelocity: number;
            maxIterations: number;
        };
    };
    xr: {
        mode: 'immersive-ar' | 'immersive-vr';
        roomScale: number;
        quality: 'low' | 'medium' | 'high';
        input: {
            handTracking: boolean;
            controllerModel: string;
            hapticFeedback: boolean;
            gestureThreshold: number;
            pinchThreshold: number;
            grabThreshold: number;
        };
        visuals: {
            shadowQuality: 'none' | 'low' | 'medium' | 'high';
            antiAliasing: boolean;
            foveatedRendering: boolean;
            foveationLevel: number;
            resolution: number;
        };
        environment: {
            skybox: boolean;
            skyboxColor: string;
            groundPlane: boolean;
            groundColor: string;
            fog: boolean;
            fogColor: string;
            fogDensity: number;
        };
        passthrough: {
            enabled: boolean;
            opacity: number;
            brightness: number;
            contrast: number;
            saturation: number;
            blendMode: 'alpha-blend' | 'additive' | 'multiply';
        };
    };
    system: {
        debug: {
            enabled: boolean;
            enableDataDebug: boolean;  // Added required field
            enableWebsocketDebug: boolean;  // Added to match server
            logBinaryHeaders: boolean;  // Added to match server
            logLevel: 'error' | 'warn' | 'info' | 'debug' | 'trace';
            logFormat: string;  // Added to match server
            logFullJson: boolean;
            showStats?: boolean;  // Made optional since not in server
            showFPS?: boolean;  // Made optional since not in server
            showMemory?: boolean;  // Made optional since not in server
        };
        network: {
            websocketUrl: string;
            reconnectInterval: number;
            maxReconnectAttempts: number;
            heartbeatInterval: number;
            compressionEnabled: boolean;
            batchUpdates: boolean;
            batchInterval: number;
        };
        security: {
            enableEncryption: boolean;
            encryptionAlgorithm: string;
            encryptionKeySize: number;
            enableAuthentication: boolean;
            authenticationMethod: string;
            tokenExpiration: number;
        };
    };
}

----
ui/index.ts
import { ControlPanel } from './ControlPanel';
import { createLogger } from '../core/logger';
import './ControlPanel.css';

const logger = createLogger('UI');

import { SettingsStore } from '../state/SettingsStore';
import { platformManager } from '../platform/platformManager';

// Initialize UI components
export async function initializeUI(): Promise<void> {
    try {
        logger.debug('Initializing UI components');
        
        const controlPanelElement = document.getElementById('control-panel');
        if (controlPanelElement instanceof HTMLElement) {
            logger.debug('Found control panel element, initializing ControlPanel');
            
            // Initialize settings first
            const settingsStore = SettingsStore.getInstance();
            await settingsStore.initialize();
            
            const controlPanel = ControlPanel.initialize(controlPanelElement);
            
            // Check if we should hide control panel based on platform
            if (platformManager.isQuest()) {
                controlPanel.hide();
            }
            
            // Settings should now be initialized
            const settings = settingsStore.get('');
            if (settings) {
                logger.debug('Applying initial settings to control panel');
                // Settings will be handled by ControlPanel's internal subscription
            } else {
                logger.error('Settings still not available after initialization');
            }
        } else {
            logger.error('Control panel element not found');
        }
    } catch (error) {
        logger.error('Failed to initialize UI:', error);
        throw error; // Re-throw to ensure caller knows initialization failed
    }
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        initializeUI().catch(error => {
            logger.error('Failed to initialize UI on DOMContentLoaded:', error);
        });
    });
} else {
    initializeUI().catch(error => {
        logger.error('Failed to initialize UI:', error);
    });
}

export { ControlPanel };

----
ui/ControlPanel.css
/* Control Panel Base Styles */
#control-panel {
    position: fixed;
    top: 0;
    right: -300px; /* Start hidden */
    width: 300px;
    height: 100vh;
    background: #212121;
    color: #ffffff;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    overflow-y: auto;
    z-index: 1000;
    border-left: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.3);
    padding: 15px;
    transition: right 0.3s ease;
}

#control-panel.visible {
    right: 0;
}

/* Panel Toggle Tab */
.panel-toggle {
    position: fixed;
    top: 50%;
    right: 0;
    transform: translateY(-50%);
    width: 30px;
    height: 60px;
    background: #212121;
    border-radius: 8px 0 0 8px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-right: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 999;
    transition: background-color 0.3s;
}

.panel-toggle:hover {
    background: #2a2a2a;
}

.panel-toggle::before {
    content: '⚙️';
    font-size: 16px;
}

/* Control Panel Layout */
.control-panel-content {
    display: flex;
    flex-direction: column;
    gap: 15px;
    padding: 16px;
}

/* Settings Sections */
.settings-section {
    margin-bottom: 20px;
    background: rgba(255, 255, 255, 0.03);
    border-radius: 8px;
    border: 1px solid rgba(255, 255, 255, 0.05);
    overflow: hidden;
}

.section-header {
    padding: 12px 15px;
    background: rgba(255, 255, 255, 0.05);
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    user-select: none;
}

.section-header h4 {
    margin: 0;
    font-size: 16px;
    font-weight: 500;
    color: #ecf0f1;
}

.section-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
    padding: 0 15px;
}

.section-content.expanded {
    max-height: 1000px;
    padding: 15px;
}

.section-header::after {
    content: '▼';
    font-size: 12px;
    transition: transform 0.3s;
}

.section-header.expanded::after {
    transform: rotate(180deg);
}

/* Setting Controls */
.setting-control {
    display: flex;
    flex-direction: column;
    gap: 8px;
    margin: 12px 0;
    padding: 8px;
    border-radius: 4px;
    transition: background-color 0.2s;
}

.setting-control:hover {
    background: rgba(255, 255, 255, 0.05);
}

.setting-label {
    font-size: 14px;
    color: #ecf0f1;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.setting-value {
    font-size: 12px;
    color: #7f8c8d;
    margin-left: auto;
}

/* Slider Styles */
.slider-container {
    display: flex;
    align-items: center;
    gap: 10px;
    width: 100%;
}

input[type="range"] {
    flex: 1;
    height: 4px;
    -webkit-appearance: none;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
    outline: none;
}

input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 16px;
    height: 16px;
    background: #4CAF50;
    border-radius: 50%;
    cursor: pointer;
    transition: background-color 0.2s;
}

input[type="range"]::-webkit-slider-thumb:hover {
    background: #45a049;
}

/* Toggle Switch */
.toggle-switch {
    position: relative;
    display: inline-block;
    width: 44px;
    height: 24px;
}

.toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(255, 255, 255, 0.1);
    transition: .4s;
    border-radius: 24px;
}

.toggle-slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 3px;
    bottom: 3px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

input:checked + .toggle-slider {
    background-color: #4CAF50;
}

input:checked + .toggle-slider:before {
    transform: translateX(20px);
}

/* Select Styles */
.select-container {
    position: relative;
    width: 100%;
}

select {
    width: 100%;
    padding: 8px 12px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: white;
    border-radius: 4px;
    appearance: none;
    cursor: pointer;
}

.select-container::after {
    content: '▼';
    font-size: 12px;
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
}

/* Color Picker */
.color-picker {
    display: flex;
    align-items: center;
    gap: 10px;
}

input[type="color"] {
    -webkit-appearance: none;
    width: 32px;
    height: 32px;
    padding: 0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

input[type="color"]::-webkit-color-swatch-wrapper {
    padding: 0;
}

input[type="color"]::-webkit-color-swatch {
    border: none;
    border-radius: 4px;
}

/* Scrollbar styles */
#control-panel::-webkit-scrollbar {
    width: 8px;
}

#control-panel::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 4px;
}

#control-panel::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
}

#control-panel::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.15);
}

/* Loading and Error states */
.loading, .error {
    padding: 15px;
    text-align: center;
    color: #ffffff;
    font-size: 14px;
    border-radius: 4px;
    margin: 10px 0;
}

.loading {
    background-color: rgba(52, 152, 219, 0.2);
    border: 1px solid rgba(52, 152, 219, 0.4);
    animation: pulse 1.5s infinite;
}

.error {
    background-color: rgba(231, 76, 60, 0.2);
    border: 1px solid rgba(231, 76, 60, 0.4);
}

@keyframes pulse {
    0% { opacity: 0.6; }
    50% { opacity: 1; }
    100% { opacity: 0.6; }
}

----
ui/ControlPanel.ts
import { SettingsStore } from '../state/SettingsStore';
import { getAllSettingPaths, formatSettingName, getStepValue } from '../types/settings/utils';
import { ValidationErrorDisplay } from '../components/settings/ValidationErrorDisplay';
import { createLogger } from '../core/logger';
import { platformManager } from '../platform/platformManager';

const logger = createLogger('ControlPanel');

export class ControlPanel {
    private static instance: ControlPanel | null = null;
    private container: HTMLDivElement;
    private settingsStore: SettingsStore;
    private validationDisplay: ValidationErrorDisplay;
    private unsubscribers: (() => void)[] = [];

    private constructor(parentElement: HTMLElement) {
        this.settingsStore = SettingsStore.getInstance();
        
        // Create main container
        this.container = document.createElement('div');
        this.container.id = 'control-panel';
        parentElement.appendChild(this.container);

        // Create toggle tab
        const toggleTab = document.createElement('div');
        toggleTab.className = 'panel-toggle';
        toggleTab.addEventListener('click', () => this.togglePanel());
        parentElement.appendChild(toggleTab);

        // Initialize validation error display
        this.validationDisplay = new ValidationErrorDisplay(this.container);

        // Check platform and settings before showing panel
        if (platformManager.isQuest()) {
            this.hide();
        }

        this.initializePanel();
    }

    private togglePanel() {
        this.container.classList.toggle('visible');
    }

    public static getInstance(): ControlPanel {
        if (!ControlPanel.instance) {
            ControlPanel.instance = new ControlPanel(document.body);
        }
        return ControlPanel.instance;
    }

    public static initialize(parentElement: HTMLElement): ControlPanel {
        if (!ControlPanel.instance) {
            ControlPanel.instance = new ControlPanel(parentElement);
        }
        return ControlPanel.instance;
    }

    private async initializePanel(): Promise<void> {
        try {
            await this.settingsStore.initialize();
            
            // Get all setting paths
            const settings = this.settingsStore.get('') as any;
            const paths = getAllSettingPaths(settings);
            
            // Group settings by category
            const groupedSettings = this.groupSettingsByCategory(paths);
            
            // Create sections for each category
            for (const [category, paths] of Object.entries(groupedSettings)) {
                const section = await this.createSection(category, paths);
                this.container.appendChild(section);
            }
            
            logger.info('Control panel initialized');
        } catch (error) {
            logger.error('Failed to initialize control panel:', error);
        }
    }

    private groupSettingsByCategory(paths: string[]): Record<string, string[]> {
        const groups: Record<string, string[]> = {};
        
        paths.forEach(path => {
            const [category] = path.split('.');
            if (!groups[category]) {
                groups[category] = [];
            }
            groups[category].push(path);
        });
        
        return groups;
    }

    private async createSection(category: string, paths: string[]): Promise<HTMLElement> {
        const section = document.createElement('div');
        section.className = 'settings-section';
        
        const header = document.createElement('div');
        header.className = 'section-header';
        header.addEventListener('click', () => {
            header.classList.toggle('expanded');
            const content = section.querySelector('.section-content');
            if (content) {
                content.classList.toggle('expanded');
            }
        });
        
        const title = document.createElement('h4');
        title.textContent = formatSettingName(category);
        header.appendChild(title);
        section.appendChild(header);
        
        // Group paths by subcategory
        const subcategories = this.groupBySubcategory(paths);
        
        const content = document.createElement('div');
        content.className = 'section-content';
        
        for (const [subcategory, subPaths] of Object.entries(subcategories)) {
            const subsection = await this.createSubsection(subcategory, subPaths);
            content.appendChild(subsection);
        }
        
        section.appendChild(content);
        return section;
    }

    private groupBySubcategory(paths: string[]): Record<string, string[]> {
        const groups: Record<string, string[]> = {};
        
        paths.forEach(path => {
            const parts = path.split('.');
            if (parts.length > 2) {
                const subcategory = parts[1];
                if (!groups[subcategory]) {
                    groups[subcategory] = [];
                }
                groups[subcategory].push(path);
            } else {
                if (!groups['general']) {
                    groups['general'] = [];
                }
                groups['general'].push(path);
            }
        });
        
        return groups;
    }

    private async createSubsection(subcategory: string, paths: string[]): Promise<HTMLElement> {
        const subsection = document.createElement('div');
        subsection.className = 'settings-subsection';
        
        const header = document.createElement('h3');
        header.textContent = formatSettingName(subcategory);
        header.className = 'settings-subsection-header';
        subsection.appendChild(header);
        
        for (const path of paths) {
            const control = await this.createSettingControl(path);
            subsection.appendChild(control);
        }
        
        return subsection;
    }

    private async createSettingControl(path: string): Promise<HTMLElement> {
        const container = document.createElement('div');
        container.className = 'setting-control';
        
        const labelContainer = document.createElement('div');
        labelContainer.className = 'setting-label';
        
        const label = document.createElement('span');
        label.textContent = formatSettingName(path.split('.').pop() || '');
        labelContainer.appendChild(label);
        
        const value = this.settingsStore.get(path);
        const valueDisplay = document.createElement('span');
        valueDisplay.className = 'setting-value';
        labelContainer.appendChild(valueDisplay);
        
        container.appendChild(labelContainer);
        
        const input = this.createInputElement(path, value, valueDisplay);
        container.appendChild(input);
        
        // Subscribe to changes
        const unsubscribe = await this.settingsStore.subscribe(path, (_, newValue) => {
            this.updateInputValue(input, newValue, valueDisplay);
        });
        this.unsubscribers.push(unsubscribe);
        
        return container;
    }

    private createInputElement(path: string, value: any, valueDisplay: HTMLElement): HTMLElement {
        const inputType = this.getInputTypeForSetting(path, value);
        let input: HTMLElement;
        
        switch (inputType) {
            case 'toggle':
                input = this.createToggleSwitch(path, value as boolean);
                break;
            case 'slider':
                input = this.createSlider(path, value as number, valueDisplay);
                break;
            case 'select':
                input = this.createSelect(path, value);
                break;
            case 'color':
                input = this.createColorPicker(path, value as string);
                break;
            default:
                input = this.createTextInput(path, value);
        }
        
        return input;
    }

    private getInputTypeForSetting(path: string, value: any): string {
        // XR mode and space type should be dropdowns
        if (path.endsWith('.mode') || path.endsWith('.spaceType') || path.endsWith('.quality')) {
            return 'select';
        }
        
        // Most numeric values should be sliders
        if (typeof value === 'number') {
            return 'slider';
        }
        
        // Boolean values should be toggles
        if (typeof value === 'boolean') {
            return 'toggle';
        }
        
        // Color values should use color picker
        if (typeof value === 'string' && value.startsWith('#')) {
            return 'color';
        }
        
        return 'text';
    }

    private createToggleSwitch(path: string, value: boolean): HTMLElement {
        const label = document.createElement('label');
        label.className = 'toggle-switch';
        
        const input = document.createElement('input');
        input.type = 'checkbox';
        input.checked = value;
        
        const slider = document.createElement('span');
        slider.className = 'toggle-slider';
        
        input.addEventListener('change', async () => {
            try {
                await this.settingsStore.set(path, input.checked);
            } catch (error) {
                logger.error(`Failed to update ${path}:`, error);
                input.checked = !input.checked;
            }
        });
        
        label.appendChild(input);
        label.appendChild(slider);
        return label;
    }

    private createSlider(path: string, value: number, valueDisplay: HTMLElement): HTMLElement {
        const container = document.createElement('div');
        container.className = 'slider-container';
        
        const input = document.createElement('input');
        input.type = 'range';
        input.min = '0';
        input.max = '1';
        input.step = getStepValue(path);
        input.value = String(value);
        
        // Set appropriate ranges based on the setting
        if (path.includes('Strength')) {
            input.max = '2';
        } else if (path.includes('Size')) {
            input.max = '10';
        } else if (path.includes('Opacity')) {
            input.max = '1';
        }
        
        valueDisplay.textContent = value.toFixed(2);
        
        input.addEventListener('input', () => {
            valueDisplay.textContent = Number(input.value).toFixed(2);
        });
        
        input.addEventListener('change', async () => {
            try {
                await this.settingsStore.set(path, Number(input.value));
            } catch (error) {
                logger.error(`Failed to update ${path}:`, error);
                input.value = String(value);
                valueDisplay.textContent = value.toFixed(2);
            }
        });
        
        container.appendChild(input);
        return container;
    }

    private createSelect(path: string, value: string): HTMLElement {
        const container = document.createElement('div');
        container.className = 'select-container';
        
        const select = document.createElement('select');
        
        // Add appropriate options based on the setting
        if (path.endsWith('.mode')) {
            ['immersive-ar', 'immersive-vr'].forEach(option => {
                const opt = document.createElement('option');
                opt.value = option;
                opt.textContent = formatSettingName(option);
                select.appendChild(opt);
            });
        } else if (path.endsWith('.spaceType')) {
            ['viewer', 'local', 'local-floor', 'bounded-floor', 'unbounded'].forEach(option => {
                const opt = document.createElement('option');
                opt.value = option;
                opt.textContent = formatSettingName(option);
                select.appendChild(opt);
            });
        } else if (path.endsWith('.quality')) {
            ['low', 'medium', 'high'].forEach(option => {
                const opt = document.createElement('option');
                opt.value = option;
                opt.textContent = formatSettingName(option);
                select.appendChild(opt);
            });
        }
        
        select.value = value;
        
        select.addEventListener('change', async () => {
            try {
                await this.settingsStore.set(path, select.value);
            } catch (error) {
                logger.error(`Failed to update ${path}:`, error);
                select.value = value;
            }
        });
        
        container.appendChild(select);
        return container;
    }

    private createColorPicker(path: string, value: string): HTMLElement {
        const container = document.createElement('div');
        container.className = 'color-picker';
        
        const input = document.createElement('input');
        input.type = 'color';
        input.value = value;
        
        input.addEventListener('change', async () => {
            try {
                await this.settingsStore.set(path, input.value);
            } catch (error) {
                logger.error(`Failed to update ${path}:`, error);
                input.value = value;
            }
        });
        
        container.appendChild(input);
        return container;
    }

    private createTextInput(path: string, value: any): HTMLElement {
        const input = document.createElement('input');
        input.type = 'text';
        input.value = String(value);
        
        input.addEventListener('change', async () => {
            try {
                await this.settingsStore.set(path, input.value);
            } catch (error) {
                logger.error(`Failed to update ${path}:`, error);
                input.value = String(value);
            }
        });
        
        return input;
    }

    private updateInputValue(input: HTMLElement, value: any, valueDisplay?: HTMLElement): void {
        if (input instanceof HTMLInputElement) {
            if (input.type === 'checkbox') {
                input.checked = value as boolean;
            } else if (input.type === 'range') {
                input.value = String(value);
                if (valueDisplay) {
                    valueDisplay.textContent = Number(value).toFixed(2);
                }
            } else {
                input.value = String(value);
            }
        } else if (input instanceof HTMLSelectElement) {
            input.value = String(value);
        }
    }

    public show(): void {
        this.container.classList.add('visible');
    }

    public hide(): void {
        this.container.classList.remove('visible');
    }

    public dispose(): void {
        this.unsubscribers.forEach(unsubscribe => unsubscribe());
        this.validationDisplay.dispose();
        this.container.remove();
        ControlPanel.instance = null;
    }
}

----
utils/eventEmitter.ts
type EventCallback<T = any> = (data: T) => void;
type EventMap = Record<string, any>;

export class EventEmitter<Events extends EventMap = EventMap> {
    private events: {
        [E in keyof Events]?: EventCallback<Events[E]>[];
    } = {};

    on<E extends keyof Events>(event: E, callback: EventCallback<Events[E]>): void {
        if (!this.events[event]) {
            this.events[event] = [];
        }
        this.events[event]?.push(callback);
    }

    emit<E extends keyof Events>(event: E, data: Events[E]): void {
        const callbacks = this.events[event];
        if (callbacks) {
            callbacks.forEach(callback => callback(data));
        }
    }

    off<E extends keyof Events>(event: E, callback: EventCallback<Events[E]>): void {
        const callbacks = this.events[event];
        if (callbacks) {
            this.events[event] = callbacks.filter(cb => cb !== callback);
        }
    }
} 
----
visualization/HologramManager.ts
import * as THREE from 'three';
import { GeometryFactory } from '../rendering/factories/GeometryFactory';
import { MaterialFactory } from '../rendering/factories/MaterialFactory';

export class HologramManager {
    private readonly hologramGroup: THREE.Group;
    private readonly settings: any;
    private isXRMode: boolean = false;
    private readonly geometryFactory: GeometryFactory;
    private readonly materialFactory: MaterialFactory;
    
    // Store scene objects
    private rings: THREE.Mesh[] = [];
    private spheres: THREE.Mesh[] = [];
    private ringQuaternions: THREE.Quaternion[] = [];

    constructor(
        private readonly scene: THREE.Scene,
        settings: any
    ) {
        this.settings = settings;
        this.hologramGroup = new THREE.Group();
        this.scene.add(this.hologramGroup);
        
        this.geometryFactory = GeometryFactory.getInstance();
        this.materialFactory = MaterialFactory.getInstance();
        
        this.createHolographicStructures();
    }

    private createHolographicStructures(): void {
        // Clean up existing objects
        this.rings.forEach(ring => {
            ring.geometry.dispose();
            ring.material.dispose();
            this.hologramGroup.remove(ring);
        });
        this.spheres.forEach(sphere => {
            sphere.geometry.dispose();
            sphere.material.dispose();
            this.hologramGroup.remove(sphere);
        });
        this.rings = [];
        this.spheres = [];

        const quality = this.isXRMode ? 'high' : (this.settings.quality || 'medium');

        // Create spheres
        const sphereRadii = [40, 100, 200];
        sphereRadii.forEach(radius => {
            const geometry = this.geometryFactory.getHologramGeometry('innerSphere', quality);
            const material = this.materialFactory.getSceneSphereMaterial('sphere', this.settings);
            const sphere = new THREE.Mesh(geometry, material);
            sphere.scale.setScalar(radius / 40); // Base geometry is radius 40
            this.hologramGroup.add(sphere);
            this.spheres.push(sphere);
        });

        // Create rings
        sphereRadii.forEach(radius => {
            const scale = radius / 40; // Base ring geometry is radius 40
            for (let i = 0; i < 3; i++) {
                const geometry = this.geometryFactory.getHologramGeometry('ring', quality);
                const material = this.materialFactory.getRingMaterial(this.settings);
                const ring = new THREE.Mesh(geometry, material);
                
                ring.scale.setScalar(scale);
                const quaternion = new THREE.Quaternion();
                quaternion.setFromEuler(new THREE.Euler(Math.PI / 3 * i, Math.PI / 4 * i, 0));
                ring.quaternion.copy(quaternion);
                this.ringQuaternions.push(quaternion);
                
                this.hologramGroup.add(ring);
                this.rings.push(ring);
            }
        });
    }

    public setXRMode(enabled: boolean): void {
        this.isXRMode = enabled;
        this.createHolographicStructures();
    }

    public update(deltaTime: number): void {
        // Update ring rotations using quaternions
        const rotationQuat = new THREE.Quaternion();
        rotationQuat.setFromAxisAngle(new THREE.Vector3(0, 1, 0), deltaTime * 0.1);
        
        this.rings.forEach((ring, index) => {
            this.ringQuaternions[index].multiply(rotationQuat);
            ring.quaternion.copy(this.ringQuaternions[index]);
        });
    }

    public handleHandInteraction(hand: THREE.XRHand): void {
        if (!this.isXRMode) return;

        const indexTip = hand.joints['index-finger-tip'];
        if (!indexTip) return;

        const position = new THREE.Vector3();
        position.set(
            indexTip.position.x,
            indexTip.position.y,
            indexTip.position.z
        );
        position.applyMatrix4(indexTip.matrixWorld);

        [...this.rings, ...this.spheres].forEach(mesh => {
            const distance = position.distanceTo(mesh.position);
            if (distance < 0.1) {
                if (mesh.material instanceof THREE.MeshBasicMaterial) {
                    const originalOpacity = mesh.material.opacity;
                    mesh.material.opacity = Math.min(originalOpacity * 2, 1);
                    setTimeout(() => {
                        mesh.material.opacity = originalOpacity;
                    }, 200);
                }
            }
        });
    }

    public updateSettings(settings: any): void {
        Object.assign(this.settings, settings);
        this.createHolographicStructures();
    }

    public dispose(): void {
        this.rings.forEach(ring => {
            ring.geometry.dispose();
            ring.material.dispose();
        });
        this.spheres.forEach(sphere => {
            sphere.geometry.dispose();
            sphere.material.dispose();
        });
        this.scene.remove(this.hologramGroup);
    }
}

----
visualization/MetadataVisualizer.ts
import * as THREE from 'three';
import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';
import { FontLoader, Font } from 'three/examples/jsm/loaders/FontLoader.js';
import { NodeMetadata } from '../types/metadata';

type GeometryWithBoundingBox = THREE.BufferGeometry & {
    boundingBox: THREE.Box3 | null;
    computeBoundingBox: () => void;
};

export class MetadataVisualizer {
    private scene: THREE.Scene;
    private camera: THREE.PerspectiveCamera;
    private fontLoader: FontLoader;
    private font: Font | null;
    private fontPath: string;
    private labelGroup: THREE.Group;
    private settings: any;

    constructor(scene: THREE.Scene, camera: THREE.PerspectiveCamera, settings: any) {
        this.scene = scene;
        this.camera = camera;
        this.fontLoader = new FontLoader();
        this.font = null;
        this.fontPath = '/fonts/helvetiker_regular.typeface.json';
        this.labelGroup = new THREE.Group();
        this.settings = settings;
        this.scene.add(this.labelGroup);
        this.loadFont();
    }

    private readonly geometries = {
        SPHERE: new THREE.SphereGeometry(1, 32, 32),
        ICOSAHEDRON: new THREE.IcosahedronGeometry(1),
        OCTAHEDRON: new THREE.OctahedronGeometry(1)
    };

    private readonly labelScale = 0.1;
    private readonly labelHeight = 0.1;

    private async loadFont(): Promise<void> {
        try {
            this.font = await new Promise((resolve, reject) => {
                this.fontLoader.load(this.fontPath, resolve, undefined, reject);
            });
        } catch (error) {
            console.error('Failed to load font:', error);
        }
    }

    public createLabel(text: string, position: THREE.Vector3): void {
        if (!this.font) {
            console.warn('Font not loaded yet');
            return;
        }

        const textGeometry = new TextGeometry(text, {
            font: this.font,
            size: this.settings.labelSize || 0.1,
            height: this.settings.labelHeight || 0.01
        });

        const material = new THREE.MeshBasicMaterial({
            color: this.settings.labelColor || 0xffffff
        });

        // Create mesh with the text geometry and center it
        const geometry = textGeometry as unknown as GeometryWithBoundingBox;
        geometry.computeBoundingBox();
        const mesh = new THREE.Mesh(geometry, material);
        mesh.position.copy(position);

        if (geometry.boundingBox) {
            const width = geometry.boundingBox.max.x - geometry.boundingBox.min.x;
            mesh.position.x -= width / 2;
        }
        
        this.labelGroup.add(mesh);
    }

    public async createTextMesh(text: string): Promise<THREE.Mesh | null> {
        if (!this.font) {
            console.warn('Font not loaded yet');
            return null;
        }

        const textGeometry = new TextGeometry(text, {
            font: this.font,
            size: 1,
            height: this.labelHeight,
            curveSegments: 4,
            bevelEnabled: false
        });

        const material = new THREE.MeshBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.8
        });

        // Create mesh with the text geometry and center it
        const geometry = textGeometry as unknown as GeometryWithBoundingBox;
        geometry.computeBoundingBox();
        const mesh = new THREE.Mesh(geometry, material);
        mesh.scale.set(this.labelScale, this.labelScale, this.labelScale);

        if (geometry.boundingBox) {
            const width = geometry.boundingBox.max.x - geometry.boundingBox.min.x;
            mesh.position.x -= width / 2;
        }

        return mesh;
    }

    public createNodeVisual(metadata: NodeMetadata): THREE.Mesh {
        const geometry = this.getGeometryFromAge(metadata.commitAge);
        const material = this.createMaterialFromHyperlinks(metadata.hyperlinkCount);
        const mesh = new THREE.Mesh(geometry, material);

        const scale = this.calculateScale(metadata.importance);
        mesh.scale.set(scale, scale, scale);

        mesh.position.set(
            metadata.position.x,
            metadata.position.y,
            metadata.position.z
        );

        return mesh;
    }

    private getGeometryFromAge(age: number): THREE.BufferGeometry {
        if (age < 7) return this.geometries.SPHERE;
        if (age < 30) return this.geometries.ICOSAHEDRON;
        return this.geometries.OCTAHEDRON;
    }

    private createMaterialFromHyperlinks(count: number): THREE.Material {
        const hue = Math.min(count / 10, 1) * 0.3; // 0 to 0.3 range
        const color = new THREE.Color().setHSL(hue, 0.7, 0.5);

        return new THREE.MeshPhongMaterial({
            color: color,
            shininess: 30,
            transparent: true,
            opacity: 0.9
        });
    }

    private calculateScale(importance: number): number {
        const [min, max] = this.settings.nodes.sizeRange;
        return min + (max - min) * Math.min(importance, 1);
    }

    public async createMetadataLabel(metadata: NodeMetadata): Promise<THREE.Group> {
        const group = new THREE.Group();

        // Create text for name
        const nameMesh = await this.createTextMesh(metadata.name);
        if (nameMesh) {
            nameMesh.position.y = 1.2;
            group.add(nameMesh);
        }

        // Create text for commit age
        const ageMesh = await this.createTextMesh(`${Math.round(metadata.commitAge)} days`);
        if (ageMesh) {
            ageMesh.position.y = 0.8;
            group.add(ageMesh);
        }

        // Create text for hyperlink count
        const linksMesh = await this.createTextMesh(`${metadata.hyperlinkCount} links`);
        if (linksMesh) {
            linksMesh.position.y = 0.4;
            group.add(linksMesh);
        }

        // Billboard behavior
        if (this.settings.labels?.billboard_mode === 'camera') {
            group.onBeforeRender = () => {
                group.quaternion.copy(this.camera.quaternion);
            };
        } else {
            // Vertical billboard - only rotate around Y
            group.onBeforeRender = () => {
                const cameraPos = this.camera.position.clone();
                cameraPos.y = group.position.y;
                group.lookAt(cameraPos);
            };
        }

        return group;
    }

    public dispose(): void {
        // Clean up geometries
        Object.values(this.geometries).forEach(geometry => geometry.dispose());
        
        // Clean up label group
        this.labelGroup.traverse(child => {
            if (child instanceof THREE.Mesh) {
                child.geometry.dispose();
                if (child.material instanceof THREE.Material) {
                    child.material.dispose();
                }
            }
        });
    }
}

----
websocket/websocketService.ts
import { createLogger } from '../core/logger';
import { buildWsUrl } from '../core/api';
import { debugState } from '../core/debugState';
import pako from 'pako';

const logger = createLogger('WebSocketService');

// Helper for conditional debug logging
function debugLog(message: string, ...args: any[]) {
    if (debugState.isWebsocketDebugEnabled()) {
        logger.debug(message, ...args);
    }
}

// Compression settings
const COMPRESSION_THRESHOLD = 1024; // Only compress messages larger than 1KB

enum ConnectionState {
    DISCONNECTED = 'disconnected',
    CONNECTING = 'connecting',
    CONNECTED = 'connected',
    RECONNECTING = 'reconnecting',
    FAILED = 'failed'
}

// Interface matching server's binary protocol format (28 bytes per node):
// - id: 4 bytes (u32)
// - position: 12 bytes (3 × f32)
// - velocity: 12 bytes (3 × f32)
interface NodeData {
    id: number;
    position: [number, number, number];
    velocity: [number, number, number];
}

// Interface for node updates from user interaction
interface NodeUpdate {
    id: string;          // Node ID (converted to u32 for binary protocol)
    position: {          // Current position
        x: number;
        y: number;
        z: number;
    };
    velocity?: {         // Optional velocity (defaults to 0 if not provided)
        x: number;
        y: number;
        z: number;
    };
}

type BinaryMessageCallback = (nodes: NodeData[]) => void;

export class WebSocketService {
    private static instance: WebSocketService | null = null;
    private ws: WebSocket | null = null;
    private binaryMessageCallback: BinaryMessageCallback | null = null;
    private reconnectTimeout: number | null = null;
    private connectionState: ConnectionState = ConnectionState.DISCONNECTED;
    private reconnectAttempts: number = 0;
    private readonly _maxReconnectAttempts: number = 5;
    private readonly initialReconnectDelay: number = 5000; // 5 seconds
    private readonly maxReconnectDelay: number = 60000; // 60 seconds
    private url: string = '';
    private connectionStatusHandler: ((status: boolean) => void) | null = null;

    private constructor() {
        // Don't automatically connect - wait for explicit connect() call
    }

    public connect(): void {
        if (this.connectionState !== ConnectionState.DISCONNECTED) {
            logger.warn('WebSocket already connected or connecting');
            return;
        }
        this.initializeWebSocket();
    }

    private async initializeWebSocket(): Promise<void> {
        if (this.connectionState !== ConnectionState.DISCONNECTED) {
            return;
        }

        try {
            this.url = buildWsUrl();
            
            if (!this.url) {
                throw new Error('No WebSocket URL available');
            }

            this.connectionState = ConnectionState.CONNECTING;
            this.ws = new WebSocket(this.url);
            this.setupWebSocketHandlers();
        } catch (error) {
            logger.error('Failed to initialize WebSocket:', error);
            this.handleReconnect();
        }
    }

    private getReconnectDelay(): number {
        // Exponential backoff with max delay
        const delay = Math.min(
            this.initialReconnectDelay * Math.pow(2, this.reconnectAttempts),
            this.maxReconnectDelay
        );
        // Add some jitter
        return delay + (Math.random() * 1000);
    }

    private setupWebSocketHandlers(): void {
        if (!this.ws) return;
        
        this.ws.binaryType = 'arraybuffer';

        this.ws.onopen = (): void => {
            logger.info(`WebSocket connected successfully to ${this.url}`);
            this.connectionState = ConnectionState.CONNECTED;
            this.reconnectAttempts = 0;

            if (this.connectionStatusHandler) {
                this.connectionStatusHandler(true);
                debugLog('Connection status handler notified: connected');
            }

            // Send request for position updates after connection
            debugLog('Requesting position updates');
            this.sendMessage({ type: 'requestInitialData' });
        };

        this.ws.onerror = (event: Event): void => {
            logger.error('WebSocket error:', event);
            if (this.ws?.readyState === WebSocket.CLOSED) {
                this.handleReconnect();
            }
        };

        this.ws.onclose = (event: CloseEvent): void => {
            logger.warn(`WebSocket closed with code ${event.code}: ${event.reason}`);
            
            if (this.connectionStatusHandler) {
                this.connectionStatusHandler(false);
            }
            
            this.handleReconnect();
        };

        this.ws.onmessage = (event: MessageEvent) => {
            try {
                if (event.data instanceof ArrayBuffer) {
                    debugLog('Received binary position update');
                    this.handleBinaryMessage(event.data);
                } else if (typeof event.data === 'string') {
                    try {
                        const message = JSON.parse(event.data);
                        if (message.type === 'connection_established' || message.type === 'updatesStarted') {
                            logger.info(`WebSocket ${message.type}`);
                        } else {
                            logger.warn('Unknown message type:', {
                                type: message.type,
                                message
                            });
                        }
                    } catch (error) {
                        logger.error('Failed to parse WebSocket message:', error);
                    }
                }
            } catch (error) {
                logger.error('Critical error in message handler:', error);
            }
        };
    }

    private readonly MessageType = {
        PositionVelocityUpdate: 0x01
    } as const;

    private tryDecompress(buffer: ArrayBuffer): ArrayBuffer {
        try {
            const decompressed = pako.inflate(new Uint8Array(buffer));
            if (decompressed.length < 8 || decompressed.length % 4 !== 0) {
                return buffer;
            }
            return decompressed.buffer;
        } catch (error) {
            return buffer;
        }
    }

    private compressIfNeeded(buffer: ArrayBuffer): ArrayBuffer {
        if (buffer.byteLength > COMPRESSION_THRESHOLD) {
            try {
                const compressed = pako.deflate(new Uint8Array(buffer));
                return compressed.buffer;
            } catch (error) {
                logger.warn('Compression failed, using original data:', error);
                return buffer;
            }
        }
        return buffer;
    }

    private handleBinaryMessage(buffer: ArrayBuffer): void {
        try {
            const decompressedBuffer = this.tryDecompress(buffer);
            
            if (!decompressedBuffer || decompressedBuffer.byteLength < 8) {
                throw new Error(`Invalid buffer size: ${decompressedBuffer?.byteLength ?? 0} bytes`);
            }

            const dataView = new DataView(decompressedBuffer);
            let offset = 0;

            const messageType = dataView.getUint32(offset, true);
            offset += 4;

            if (messageType !== this.MessageType.PositionVelocityUpdate) {
                logger.warn('Unexpected binary message type:', messageType);
                return;
            }

            const nodeCount = dataView.getUint32(offset, true);
            offset += 4;

            const expectedSize = 8 + (nodeCount * 28);
            if (decompressedBuffer.byteLength !== expectedSize) {
                throw new Error(`Invalid buffer size: ${decompressedBuffer.byteLength} bytes (expected ${expectedSize})`);
            }

            const nodes: NodeData[] = [];
            
            for (let i = 0; i < nodeCount; i++) {
                const id = dataView.getUint32(offset, true);
                offset += 4;

                const position: [number, number, number] = [
                    dataView.getFloat32(offset, true),
                    dataView.getFloat32(offset + 4, true),
                    dataView.getFloat32(offset + 8, true)
                ];
                offset += 12;

                const velocity: [number, number, number] = [
                    dataView.getFloat32(offset, true),
                    dataView.getFloat32(offset + 4, true),
                    dataView.getFloat32(offset + 8, true)
                ];
                offset += 12;

                const sanitizedPosition = position.map(v => isNaN(v) ? 0 : v) as [number, number, number];
                const sanitizedVelocity = velocity.map(v => isNaN(v) ? 0 : v) as [number, number, number];

                nodes.push({ id, position: sanitizedPosition, velocity: sanitizedVelocity });
            }

            if (nodes.length > 0 && this.binaryMessageCallback) {
                this.binaryMessageCallback(nodes);
            }
        } catch (error) {
            logger.error('Failed to process binary message:', error);
        }
    }

    private handleReconnect(): void {
        const wasConnected = this.connectionState === ConnectionState.CONNECTED;
        
        this.connectionState = ConnectionState.DISCONNECTED;
        this.binaryMessageCallback = null;
        
        if (this.reconnectTimeout !== null) {
            window.clearTimeout(this.reconnectTimeout);
            this.reconnectTimeout = null;
        }
        
        if (this.reconnectAttempts < this._maxReconnectAttempts &&
            (wasConnected || this.reconnectAttempts === 0)) {
            
            this.reconnectAttempts++;
            const delay = this.getReconnectDelay();
            
            this.connectionState = ConnectionState.RECONNECTING;
            
            this.reconnectTimeout = window.setTimeout(() => {
                this.reconnectTimeout = null;
                this.connect();
            }, delay);
        } else {
            this.handleReconnectFailure();
        }
    }

    private handleReconnectFailure(): void {
        this.connectionState = ConnectionState.FAILED;
        if (this.connectionStatusHandler) {
            this.connectionStatusHandler(false);
        }
    }

    public static getInstance(): WebSocketService {
        if (!WebSocketService.instance) {
            WebSocketService.instance = new WebSocketService();
        }
        return WebSocketService.instance;
    }

    public onBinaryMessage(callback: BinaryMessageCallback): void {
        this.binaryMessageCallback = callback;
    }

    public getConnectionStatus(): ConnectionState {
        return this.connectionState;
    }

    public sendMessage(message: any): void {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            try {
                this.ws.send(JSON.stringify(message));
            } catch (error) {
                logger.error('Error sending message:', error);
            }
        }
    }

    public sendNodeUpdates(updates: NodeUpdate[]): void {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            logger.warn('WebSocket not connected, cannot send node updates');
            return;
        }

        // Limit to 2 nodes per update as per server requirements
        if (updates.length > 2) {
            logger.warn('Too many nodes in update, limiting to first 2');
            updates = updates.slice(0, 2);
        }

        const buffer = new ArrayBuffer(8 + updates.length * 28);
        const dataView = new DataView(buffer);
        let offset = 0;

        dataView.setUint32(offset, this.MessageType.PositionVelocityUpdate, true);
        offset += 4;

        dataView.setUint32(offset, updates.length, true);
        offset += 4;

        updates.forEach(update => {
            const id = parseInt(update.id, 10);
            if (isNaN(id)) {
                logger.warn('Invalid node ID:', update.id);
                return;
            }
            dataView.setUint32(offset, id, true);
            offset += 4;

            dataView.setFloat32(offset, update.position.x, true);
            dataView.setFloat32(offset + 4, update.position.y, true);
            dataView.setFloat32(offset + 8, update.position.z, true);
            offset += 12;

            dataView.setFloat32(offset, update.velocity?.x ?? 0, true);
            dataView.setFloat32(offset + 4, update.velocity?.y ?? 0, true);
            dataView.setFloat32(offset + 8, update.velocity?.z ?? 0, true);
            offset += 12;
        });

        const finalBuffer = this.compressIfNeeded(buffer);
        this.ws.send(finalBuffer);
    }

    public onConnectionStatusChange(handler: (status: boolean) => void): void {
        this.connectionStatusHandler = handler;
        if (this.connectionState === ConnectionState.CONNECTED && handler) {
            handler(true);
        }
    }

    public dispose(): void {
        if (this.reconnectTimeout !== null) {
            window.clearTimeout(this.reconnectTimeout);
            this.reconnectTimeout = null;
        }
        
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
        
        this.binaryMessageCallback = null;
        this.connectionStatusHandler = null;
        this.connectionState = ConnectionState.DISCONNECTED;
        WebSocketService.instance = null;
    }

    public close(): void {
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }
    }
}
----
xr/xrInitializer.ts
import { platformManager } from '../platform/platformManager';
import { XRSessionManager } from './xrSessionManager';
import { createLogger } from '../core/logger';

const logger = createLogger('XRInitializer');

export class XRInitializer {
    private static instance: XRInitializer | null = null;
    private xrButton: HTMLButtonElement;
    private xrSessionManager: XRSessionManager;

    private constructor(xrSessionManager: XRSessionManager) {
        this.xrSessionManager = xrSessionManager;
        this.xrButton = document.getElementById('xr-button') as HTMLButtonElement;
        if (!this.xrButton) {
            throw new Error('XR button not found');
        }
        this.setupEventListeners();
    }

    public static getInstance(xrSessionManager: XRSessionManager): XRInitializer {
        if (!XRInitializer.instance) {
            XRInitializer.instance = new XRInitializer(xrSessionManager);
        }
        return XRInitializer.instance;
    }

    private isProcessingClick = false;
    private keyboardShortcutEnabled = !platformManager.isQuest(); // Disable for Quest

    private setupEventListeners(): void {
        // Button click handler with debounce
        this.xrButton.addEventListener('click', async () => {
            if (this.isProcessingClick) return;
            this.isProcessingClick = true;
            
            try {
                await this.onXRButtonClick();
            } finally {
                // Reset after a short delay to prevent rapid clicks
                setTimeout(() => {
                    this.isProcessingClick = false;
                }, 1000);
            }
        });

        // Keyboard shortcut only for non-Quest devices
        if (this.keyboardShortcutEnabled) {
            document.addEventListener('keydown', (event) => {
                if (event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'a') {
                    this.onXRButtonClick();
                }
            });
        }

        // Update button visibility based on XR session state
        this.xrSessionManager.setSessionCallbacks(
            () => this.xrButton.classList.add('hidden'),    // onStart
            () => this.xrButton.classList.remove('hidden'), // onEnd
            () => {}                                        // onFrame
        );

        // Initial button state
        this.updateButtonState();
    }

    private async updateButtonState(): Promise<void> {
        const isQuest = platformManager.isQuest();
        const xrSupported = platformManager.isXRSupported();

        if (!xrSupported) {
            this.xrButton.style.display = 'none';
            return;
        }

        if (isQuest) {
            this.xrButton.textContent = 'Enter AR';
            this.xrButton.classList.remove('hidden');
        } else {
            this.xrButton.textContent = 'Enter VR';
            this.xrButton.classList.remove('hidden');
        }
    }

    private async onXRButtonClick(): Promise<void> {
        try {
            if (this.xrSessionManager.isXRPresenting()) {
                await this.xrSessionManager.endXRSession();
            } else {
                await this.xrSessionManager.initXRSession();
            }
        } catch (error) {
            logger.error('Failed to toggle XR session:', error);
        }
    }

    public dispose(): void {
        // Clean up event listeners if needed
        XRInitializer.instance = null;
    }
}
----
xr/xrInteraction.ts
import { XRSessionManager } from './xrSessionManager';
import { NodeManager } from '../rendering/nodes';
import { SettingsStore } from '../state/SettingsStore';
import { createLogger } from '../core/logger';
import { WebSocketService } from '../websocket/websocketService';
import { XRSettings } from '../types/settings/xr';
import * as THREE from 'three';

const logger = createLogger('XRInteraction');

export class XRInteraction {
    private static instance: XRInteraction | null = null;
    private readonly settingsStore: SettingsStore;
    private updateBatch: Map<string, THREE.Vector3> = new Map();
    private batchUpdateTimeout: number | null = null;
    private settingsUnsubscribers: Array<() => void> = [];
    private interactionEnabled: boolean = false;
    private websocketService: WebSocketService;

    private xrManager: XRSessionManager;
    private constructor(xrManager: XRSessionManager, _: NodeManager) {
        this.xrManager = xrManager;
        this.settingsStore = SettingsStore.getInstance();
        this.websocketService = WebSocketService.getInstance();
        this.initializeSettings();
        this.initializeXRSession();
    }

    private async initializeXRSession(): Promise<void> {
        try {
            const { platformManager } = require('../platform/platformManager');
            const settings = this.settingsStore.get('xr') as XRSettings;
            
            // Auto-enter AR for Quest devices if enabled in settings
            if (platformManager.isQuest() && settings && settings.autoEnterAR) {
                logger.info('Auto-entering AR mode for Quest device');
                await this.xrManager.initXRSession();
            }
        } catch (error) {
            logger.error('Failed to initialize XR session:', error);
        }
    }

    private initializeSettings(): void {
        try {
            this.setupSettingsSubscription();
        } catch (error) {
            logger.error('Failed to setup settings subscription:', error);
        }
    }

    public static getInstance(xrManager: XRSessionManager, nodeManager: NodeManager): XRInteraction {
        if (!XRInteraction.instance) {
            XRInteraction.instance = new XRInteraction(xrManager, nodeManager);
        }
        return XRInteraction.instance;
    }

    private setupSettingsSubscription(): void {
        // Clear any existing subscriptions
        this.settingsUnsubscribers.forEach(unsub => unsub());
        this.settingsUnsubscribers = [];

        // Subscribe to XR interaction enabled state
        let unsubscriber: (() => void) | undefined;
        this.settingsStore.subscribe('xr.interaction.enabled', (value) => {
            this.interactionEnabled = typeof value === 'boolean' ? value : value === 'true';
            if (!this.interactionEnabled) {
                this.clearHandState();
            }
        }).then(unsub => {
            unsubscriber = unsub;
            if (unsubscriber) {
                this.settingsUnsubscribers.push(unsubscriber);
            }
        });
    }

    private clearHandState(): void {
        this.updateBatch.clear();
        if (this.batchUpdateTimeout) {
            clearTimeout(this.batchUpdateTimeout);
            this.batchUpdateTimeout = null;
        }
    }

    private scheduleFlush(): void {
        if (this.batchUpdateTimeout !== null) return;
        
        this.batchUpdateTimeout = requestAnimationFrame(() => {
            this.flushPositionUpdates();
            this.batchUpdateTimeout = null;
        });
    }

    private flushPositionUpdates(): void {
        if (this.updateBatch.size === 0) return;

        const updates = Array.from(this.updateBatch.entries()).map(([id, position]) => ({
            id,
            position: {
                x: position.x,
                y: position.y,
                z: position.z
            }
        }));

        this.websocketService.sendNodeUpdates(updates);
        this.updateBatch.clear();
    }

    public update(): void {
        if (!this.interactionEnabled) return;
        this.scheduleFlush();
    }

    public dispose(): void {
        // Clear subscriptions
        this.settingsUnsubscribers.forEach(unsub => unsub());
        this.settingsUnsubscribers = [];

        // Flush any pending updates
        this.flushPositionUpdates();

        XRInteraction.instance = null;
    }
}

----
xr/xrSessionManager.ts
/**
 * XR session management and rendering
 */

import * as THREE from 'three';
import {
    Group,
    GridHelper,
    PlaneGeometry,
    MeshPhongMaterial,
    Mesh,
    RingGeometry,
    MeshBasicMaterial,
    DirectionalLight,
    SphereGeometry,
    Color,
    DoubleSide,
    Vector3
} from 'three';
import { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';
import { createLogger } from '../core/utils';
import { platformManager } from '../platform/platformManager';
import { SceneManager } from '../rendering/scene';
import { BACKGROUND_COLOR } from '../core/constants';
import { defaultSettings } from '../state/defaultSettings';
import { VisualizationController } from '../rendering/VisualizationController';
import { NodeManager } from '../rendering/nodes';
import { ControlPanel } from '../ui/ControlPanel';
import { SettingsStore } from '../state/SettingsStore';
import { XRSettings } from '../types/settings/xr';
import { XRHandWithHaptics, WorldObject3D, XRHandJoint } from '../types/xr';

const _logger = createLogger('XRSessionManager');

// Type guards for WebXR features
function hasLightEstimate(frame: XRFrame): frame is XRFrame & { getLightEstimate(): XRLightEstimate | null } {
  return 'getLightEstimate' in frame;
}

function hasHitTest(session: XRSession): session is XRSession & { requestHitTestSource(options: XRHitTestOptionsInit): Promise<XRHitTestSource> } {
  return 'requestHitTestSource' in session;
}


export class XRSessionManager {
    private static instance: XRSessionManager;
    private sceneManager: SceneManager;
    private visualizationController: VisualizationController;
    private settingsStore: SettingsStore;
    private nodeManager: NodeManager;
    private session: XRSession | null = null;
    private referenceSpace: XRReferenceSpace | null = null;
    private isPresenting: boolean = false;
    private settingsUnsubscribe: (() => void) | null = null;
    private currentSettings: XRSettings;

    // XR specific objects
    private cameraRig: Group;
    private arGroup: Group; // New group for AR elements
    private controllers: Group[];
    private controllerGrips: Group[];
    private controllerModelFactory: XRControllerModelFactory;

    // AR specific objects
    private gridHelper: GridHelper;
    private groundPlane: Mesh;
    private hitTestMarker: Mesh;
    private arLight: DirectionalLight;
    private hitTestSource: XRHitTestSource | null = null;
    private hitTestSourceRequested = false;

    // Event handlers
    private xrSessionStartCallback: (() => void) | null = null;
    private xrSessionEndCallback: (() => void) | null = null;
    private xrAnimationFrameCallback: ((frame: XRFrame) => void) | null = null;
    private controllerAddedCallback: ((controller: Group) => void) | null = null;
    private controllerRemovedCallback: ((controller: Group) => void) | null = null;

    constructor(sceneManager: SceneManager) {
        this.sceneManager = sceneManager;
        this.settingsStore = SettingsStore.getInstance();
        this.nodeManager = NodeManager.getInstance();
        this.visualizationController = new VisualizationController(document.body, defaultSettings);
        // Initialize with current settings
        this.currentSettings = this.settingsStore.get('xr') as XRSettings;
        
        // Set up settings subscription
        this.setupSettingsSubscription();
        
        // Initialize XR objects
        this.cameraRig = new Group();
        this.arGroup = new Group(); // Initialize AR group
        this.controllers = [new Group(), new Group()];
        this.controllerGrips = [new Group(), new Group()];
        this.controllerModelFactory = new XRControllerModelFactory();

        // Initialize AR objects
        this.gridHelper = this.createGridHelper();
        this.groundPlane = this.createGroundPlane();
        this.hitTestMarker = this.createHitTestMarker();
        this.arLight = this.createARLight();

        this.setupXRObjects();
    }

    static getInstance(sceneManager: SceneManager): XRSessionManager {
        if (!XRSessionManager.instance) {
            XRSessionManager.instance = new XRSessionManager(sceneManager);
        }
        return XRSessionManager.instance;
    }

    private createGridHelper(): GridHelper {
        const grid = new GridHelper(10, 10, 0x808080, 0x808080);
        grid.material.transparent = true;
        grid.material.opacity = 0.5;
        grid.position.y = -0.01; // Slightly below ground to avoid z-fighting
        grid.visible = false; // Start hidden until AR session begins
        grid.layers.set(1); // Set to AR layer
        return grid;
    }

    private createGroundPlane(): Mesh {
        const geometry = new PlaneGeometry(10, 10);
        const material = new MeshPhongMaterial({
            color: 0x999999,
            transparent: true,
            opacity: 0.3,
            side: DoubleSide
        });
        const plane = new Mesh(geometry, material);
        plane.rotateX(-Math.PI / 2);
        plane.position.y = -0.02; // Below grid
        plane.visible = false; // Start hidden until AR session begins
        plane.layers.set(1); // Set to AR layer
        return plane;
    }

    private createHitTestMarker(): Mesh {
        const geometry = new RingGeometry(0.15, 0.2, 32);
        const material = new MeshBasicMaterial({
            color: 0xffffff,
            transparent: true,
            opacity: 0.8,
            side: DoubleSide
        });
        const marker = new Mesh(geometry, material);
        marker.rotateX(-Math.PI / 2);
        marker.visible = false;
        marker.layers.set(1); // Set to AR layer
        return marker;
    }

    private createARLight(): DirectionalLight {
        const light = new DirectionalLight(0xffffff, 1);
        light.position.set(1, 1, 1);
        light.layers.set(1); // Set to AR layer
        return light;
    }

    private setupXRObjects(): void {
        const scene = this.sceneManager.getScene();
        
        // Add camera rig to scene
        scene.add(this.cameraRig);

        // Add AR group to camera rig
        this.cameraRig.add(this.arGroup);

        // Add AR objects to AR group
        this.arGroup.add(this.gridHelper);
        this.arGroup.add(this.groundPlane);
        this.arGroup.add(this.hitTestMarker);
        this.arGroup.add(this.arLight);

        // Setup controllers
        this.controllers.forEach((_controller, index) => {
            this.setupController(index);
        });

        // Setup controller grips
        this.controllerGrips.forEach(grip => {
            this.setupControllerGrip(grip);
        });
    }

    private setupController(index: number): void {
        const controller = this.controllers[index];
        const controllerGrip = this.controllerGrips[index];

        // Store event handlers as properties for proper cleanup
        const onControllerConnected = (event: any) => {
            const inputSource = event.data;
            controller.userData.inputSource = inputSource;
            const controllerModel = this.buildController(inputSource);
            controller.add(controllerModel);
            this.notifyControllerAdded(controller);
        };

        const onControllerDisconnected = () => {
            controller.userData.inputSource = null;
            controller.remove(...controller.children);
            this.notifyControllerRemoved(controller);
        };

        // Store handlers in userData for cleanup
        controller.userData.eventHandlers = {
            connected: onControllerConnected,
            disconnected: onControllerDisconnected
        };

        controller.addEventListener('connected', onControllerConnected);
        controller.addEventListener('disconnected', onControllerDisconnected);

        this.cameraRig.add(controller);
        this.cameraRig.add(controllerGrip);
    }

    private setupControllerGrip(grip: Group): void {
        const controllerModel = this.controllerModelFactory.createControllerModel(grip);
        grip.add(controllerModel);
    }

    private buildController(_inputSource: XRInputSource): Group {
        const controller = new Group();
        const geometry = new SphereGeometry(0.1, 16, 16);
        const material = new MeshBasicMaterial({ color: 0xffffff });
        const sphere = new Mesh(geometry, material);
        controller.add(sphere);
        return controller;
    }

    async initXRSession(): Promise<void> {
        if (this.isPresenting) {
            _logger.warn('XR session already active');
            return;
        }

        if (!platformManager.getCapabilities().xrSupported || !navigator.xr) {
            throw new Error('XR not supported on this platform');
        }

        try {
            // Check if session mode is supported
            const mode = platformManager.isQuest() ? 'immersive-ar' : 'immersive-vr';
            const isSupported = await navigator.xr.isSessionSupported(mode);
            
            if (!isSupported) {
                throw new Error(`${mode} not supported on this device`);
            }
            
            // Configure features based on mode and platform
            const requiredFeatures = ['local-floor'];
            const optionalFeatures = ['hand-tracking', 'layers'];
            
            // Add mode-specific features for Quest
            if (platformManager.isQuest()) {
                // For Quest AR, require hit-test and make plane detection optional
                requiredFeatures.push('hit-test');
                optionalFeatures.push(
                    'light-estimation',
                    'plane-detection',
                    'anchors',
                    'depth-sensing',
                    'dom-overlay'
                );
            }
            
            // Request session with configured features
            const sessionInit: XRSessionInit = {
                requiredFeatures,
                optionalFeatures,
                domOverlay: platformManager.isQuest() ? { root: document.body } : undefined
            };
            
            _logger.info('Requesting XR session with config:', {
                mode,
                features: sessionInit
            });
            
            const session = await navigator.xr.requestSession(mode, sessionInit);

            if (!session) {
                throw new Error('Failed to create XR session');
            }

            this.session = session;

            // Setup XR rendering
            const renderer = this.sceneManager.getRenderer();
            await renderer.xr.setSession(this.session);
            
            // Configure renderer for AR
            renderer.xr.enabled = true;
            
            // Set up scene for XR mode
            const scene = this.sceneManager.getScene();
            if (platformManager.isQuest()) {
                // Clear background for AR passthrough
                scene.background = null;
            } else {
                // Keep background for VR mode
                scene.background = new Color(BACKGROUND_COLOR);
            }
            
            // Get reference space based on platform
            const spaceType = platformManager.isQuest() ? 'local-floor' : 'bounded-floor';
            this.referenceSpace = await this.session.requestReferenceSpace(spaceType);
            
            // Setup session event handlers
            this.session.addEventListener('end', this.onXRSessionEnd);

            // Enable AR layer for camera
            const camera = this.sceneManager.getCamera();
            camera.layers.enable(1);
            
            // Apply AR scale if in AR mode
            if (platformManager.isQuest()) {
                this.arGroup.scale.setScalar(this.currentSettings.roomScale);
                
                // Move node instances to arGroup for proper scaling
                const nodeInstances = this.nodeManager.getAllNodeMeshes();
                nodeInstances.forEach(mesh => {
                    this.arGroup.add(mesh);
                });
            }

            // Reset camera rig position
            this.cameraRig.position.set(0, 0, 0);
            this.cameraRig.quaternion.identity();

            // Show AR visualization elements after a short delay to ensure proper placement
            setTimeout(() => {
                this.gridHelper.visible = true;
                this.groundPlane.visible = true;
                this.arLight.visible = true;
            }, 1000);
            
            this.isPresenting = true;
            _logger.log('XR session initialized');

            // Hide control panel in XR mode
            const controlPanel = ControlPanel.getInstance();
            if (controlPanel) {
                controlPanel.hide();
            }

            // Notify session start
            if (this.xrSessionStartCallback) {
                this.xrSessionStartCallback();
            }
        } catch (error) {
            _logger.error('Failed to initialize XR session:', error);
            throw error;
        }
    }

    async endXRSession(): Promise<void> {
        if (this.session) {
            await this.session.end();
        }
    }

    private onXRSessionEnd = (): void => {
        // Clean up hit test source
        if (this.hitTestSource) {
            this.hitTestSource.cancel();
            this.hitTestSource = null;
        }
        
        // Reset session state
        this.session = null;
        this.referenceSpace = null;
        this.hitTestSourceRequested = false;
        this.isPresenting = false;

        // Hide AR visualization elements if in Quest mode
        if (platformManager.isQuest()) {
            this.gridHelper.visible = false;
            this.groundPlane.visible = false;
            this.hitTestMarker.visible = false;
            this.arLight.visible = false;
            
            // Move node instances back to main scene
            const nodeInstances = this.nodeManager.getAllNodeMeshes();
            nodeInstances.forEach(mesh => {
                this.sceneManager.getScene().add(mesh);
            });
        }

        // Reset camera and scene
        this.cameraRig.position.set(0, 0, 0);
        this.cameraRig.quaternion.identity();

        // Reset scene background
        const scene = this.sceneManager.getScene();
        scene.background = new Color(BACKGROUND_COLOR);

        // Reset camera layers
        const camera = this.sceneManager.getCamera();
        camera.layers.disable(1); // AR layer

        // Reset renderer
        const renderer = this.sceneManager.getRenderer();
        renderer.xr.enabled = false;

        _logger.log('XR session ended');

        // Show control panel and notify session end (only once)
        ControlPanel.getInstance()?.show();
        this.xrSessionEndCallback?.();
    }

    onXRFrame(frame: XRFrame): void {
        if (!this.session || !this.referenceSpace) return;

        // Get pose
        const pose = frame.getViewerPose(this.referenceSpace);
        if (!pose) return;

        // Let Three.js handle camera updates through WebXRManager
        // Handle hit testing
        this.handleHitTest(frame);

        // Update controller poses and handle gamepad input
        this.controllers.forEach((controller) => {
            const inputSource = controller.userData.inputSource as XRInputSource;
            if (inputSource) {
                // Try to use gripSpace for more accurate hand position, fall back to targetRaySpace
                const pose = inputSource.gripSpace
                    ? frame.getPose(inputSource.gripSpace, this.referenceSpace!)
                    : frame.getPose(inputSource.targetRaySpace, this.referenceSpace!);
                
                if (pose) {
                    controller.matrix.fromArray(pose.transform.matrix);
                    controller.matrix.decompose(controller.position, controller.quaternion, controller.scale);
                }

                // Handle gamepad input for movement
                if (inputSource.gamepad) {
                    const { axes } = inputSource.gamepad;
                    
                    // Use cached settings for better performance
                    const moveX = axes[this.currentSettings.movementAxes?.horizontal ?? 2] || 0;
                    const moveZ = axes[this.currentSettings.movementAxes?.vertical ?? 3] || 0;

                    // Apply dead zone to avoid drift from small joystick movements
                    const deadZone = this.currentSettings.deadZone ?? 0.1;
                    const processedX = Math.abs(moveX) > deadZone ? moveX : 0;
                    const processedZ = Math.abs(moveZ) > deadZone ? moveZ : 0;

                    if (processedX !== 0 || processedZ !== 0) {
                        // Get camera's view direction (ignoring vertical rotation)
                        const moveDirection = new Vector3();
                        
                        // Calculate frame-rate independent movement using fixed time step
                        const deltaTime = 1 / 60; // Target 60 FPS
                        
                        // Combine horizontal and forward movement with time-based scaling
                        moveDirection.x = processedX * (this.currentSettings.movementSpeed ?? 1) * deltaTime;
                        moveDirection.z = processedZ * (this.currentSettings.movementSpeed ?? 1) * deltaTime;
                        
                        // If snap to floor is enabled, keep y position constant
                        if (this.currentSettings.snapToFloor) {
                            const currentY = this.cameraRig.position.y;
                            this.cameraRig.position.add(moveDirection);
                            this.cameraRig.position.y = currentY;
                        } else {
                            this.cameraRig.position.add(moveDirection);
                        }
                    }
                }

                // Handle hand tracking input
                if (inputSource.hand) {
                    const xrHand = inputSource.hand;
                    // Convert XRHand to XRHandWithHaptics
                    const handWithHaptics: XRHandWithHaptics = new Group() as XRHandWithHaptics;
                    handWithHaptics.hand = { joints: {} };
                    handWithHaptics.pinchStrength = 0;
                    handWithHaptics.gripStrength = 0;
                    handWithHaptics.userData = {
                        platform: platformManager.getPlatform()
                    };

                    // Process each joint
                    xrHand.forEach((joint, jointName) => {
                        const pose = frame.getPose(joint, this.referenceSpace!);
                        if (pose) {
                            const jointObject = new Group() as WorldObject3D;
                            jointObject.matrix.fromArray(pose.transform.matrix);
                            jointObject.matrix.decompose(
                                jointObject.position,
                                jointObject.quaternion,
                                jointObject.scale
                            );
                            handWithHaptics.hand.joints[jointName as XRHandJoint] = jointObject;
                        }
                    });

                    // Calculate pinch and grip strength based on joint distances
                    const thumbTip = handWithHaptics.hand.joints['thumb-tip'];
                    const indexTip = handWithHaptics.hand.joints['index-finger-tip'];
                    if (thumbTip && indexTip) {
                        const distance = thumbTip.position.distanceTo(indexTip.position);
                        handWithHaptics.pinchStrength = Math.max(0, 1 - distance / 0.05); // 5cm max distance
                    }

                    this.visualizationController.handleHandInput(handWithHaptics);
                }
            }
        });

        // Update lighting if available
        if (hasLightEstimate(frame)) {
            const lightEstimate = frame.getLightEstimate();
            if (lightEstimate) {
                this.updateARLighting(lightEstimate);
            }
        }

        // Call animation frame callback
        if (this.xrAnimationFrameCallback) {
            this.xrAnimationFrameCallback(frame);
        }
    }

    private async handleHitTest(frame: XRFrame): Promise<void> {
        if (!this.hitTestSourceRequested && this.session && hasHitTest(this.session)) {
            try {
                const viewerSpace = await this.session.requestReferenceSpace('viewer');
                if (!viewerSpace) {
                    throw new Error('Failed to get viewer reference space');
                }

                const hitTestSource = await this.session.requestHitTestSource({
                    space: viewerSpace
                });

                if (hitTestSource) {
                    this.hitTestSource = hitTestSource;
                    this.hitTestSourceRequested = true;
                }
            } catch (error) {
                _logger.error('Failed to initialize hit test source:', error);
                this.hitTestSourceRequested = true; // Prevent further attempts
            }
        }

        if (this.hitTestSource && this.referenceSpace) {
            const hitTestResults = frame.getHitTestResults(this.hitTestSource);
            if (hitTestResults.length > 0) {
                const hit = hitTestResults[0];
                const pose = hit.getPose(this.referenceSpace);
                if (pose) {
                    this.hitTestMarker.visible = true;
                    this.hitTestMarker.position.set(
                        pose.transform.position.x,
                        pose.transform.position.y,
                        pose.transform.position.z
                    );

                    // Update grid and ground plane position to match hit test
                    this.gridHelper.position.y = pose.transform.position.y;
                    this.groundPlane.position.y = pose.transform.position.y - 0.01;
                }
            } else {
                this.hitTestMarker.visible = false;
            }
        }
    }

    private updateARLighting(lightEstimate: XRLightEstimate): void {
        const intensity = lightEstimate.primaryLightIntensity?.value || 1;
        const direction = lightEstimate.primaryLightDirection;
        
        if (direction) {
            this.arLight.position.set(direction.x, direction.y, direction.z);
        }
        this.arLight.intensity = intensity;
    }

    setSessionCallbacks(
        onStart: () => void,
        onEnd: () => void,
        onFrame: (frame: XRFrame) => void
    ): void {
        this.xrSessionStartCallback = onStart;
        this.xrSessionEndCallback = onEnd;
        this.xrAnimationFrameCallback = onFrame;
    }

    onControllerAdded(callback: (controller: Group) => void): void {
        this.controllerAddedCallback = callback;
    }

    onControllerRemoved(callback: (controller: Group) => void): void {
        this.controllerRemovedCallback = callback;
    }

    private notifyControllerAdded(controller: Group): void {
        this.controllerAddedCallback?.(controller);
    }

    private notifyControllerRemoved(controller: Group): void {
        this.controllerRemovedCallback?.(controller);
    }

    getCameraRig(): Group {
        return this.cameraRig;
    }

    getControllers(): Group[] {
        return this.controllers;
    }

    getControllerGrips(): Group[] {
        return this.controllerGrips;
    }

    isXRPresenting(): boolean {
        return this.isPresenting;
    }

    getSession(): XRSession | null {
        return this.session;
    }

    getReferenceSpace(): XRReferenceSpace | null {
        return this.referenceSpace;
    }

    private async setupSettingsSubscription(): Promise<void> {
        // Subscribe to XR settings changes
        this.settingsUnsubscribe = await this.settingsStore.subscribe('xr', () => {
            this.currentSettings = this.settingsStore.get('xr') as XRSettings;
            this.applyXRSettings();
        });
    }

    private applyXRSettings(): void {
        if (!this.isPresenting) return;

        // Update movement settings
        const controllers = this.getControllers();
        controllers.forEach(controller => {
            const inputSource = controller.userData.inputSource as XRInputSource;
            if (inputSource?.gamepad) {
                // Settings will be applied on next frame in onXRFrame
            }
        });

        // Update visual settings if needed
        if (this.currentSettings.handMeshEnabled !== undefined) {
            controllers.forEach(controller => {
                controller.traverse((object: { name?: string; visible: boolean }) => {
                    if (object.name === 'handMesh') {
                        object.visible = !!this.currentSettings.handMeshEnabled;
                    }
                });
            });
        }

        if (this.currentSettings.handRayEnabled !== undefined) {
            controllers.forEach(controller => {
                controller.traverse((object: { name?: string; visible: boolean }) => {
                    if (object.name === 'ray') {
                        object.visible = !!this.currentSettings.handRayEnabled;
                    }
                });
            });
        }

        // Update room scale if changed
        if (this.currentSettings.roomScale !== undefined) {
            if (platformManager.isQuest()) {
                this.arGroup.scale.setScalar(Number(this.currentSettings.roomScale));
            } else {
                this.cameraRig.scale.setScalar(Number(this.currentSettings.roomScale));
            }
        }
    }

    dispose(): void {
        // Clean up settings subscription
        if (this.settingsUnsubscribe) {
            this.settingsUnsubscribe();
            this.settingsUnsubscribe = null;
        }

        // End XR session if active
        if (this.session) {
            // Remove session event listener before ending
            this.session.removeEventListener('end', this.onXRSessionEnd);
            this.session.end().catch(console.error);
        }

        // Clean up controller event listeners using stored handlers
        this.controllers.forEach(controller => {
            const handlers = controller.userData.eventHandlers;
            if (handlers) {
                controller.removeEventListener('connected', handlers.connected);
                controller.removeEventListener('disconnected', handlers.disconnected);
                delete controller.userData.eventHandlers;
            }
            controller.userData.inputSource = null;
        });

        // Clean up controller grip models
        this.controllerGrips.forEach(grip => {
            grip.remove(...grip.children);
        });

        // Clean up hit test resources
        this.hitTestSource?.cancel();
        this.hitTestSource = null;
        this.hitTestSourceRequested = false;

        // Reset session state
        this.session = null;
        this.referenceSpace = null;
        this.isPresenting = false;

        // Clear callbacks
        this.xrSessionStartCallback = null;
        this.xrSessionEndCallback = null;
        this.xrAnimationFrameCallback = null;
        this.controllerAddedCallback = null;
        this.controllerRemovedCallback = null;
    }
}

----
xr/xrTypes.ts
import * as THREE from 'three';

export interface XRHandWithHaptics {
    hand: {
        joints: {
            [key: string]: THREE.Object3D;
        };
    };
    hapticActuators: any[];
    pinchStrength: number;
    gripStrength: number;
}

export interface XRControllerState {
    position: THREE.Vector3;
    rotation: THREE.Quaternion;
    hapticActuator?: any;
}

export interface XRHandState {
    position: THREE.Vector3;
    joints: Map<string, THREE.Object3D>;
    pinchStrength: number;
    gripStrength: number;
}

--END--
diff --git a/Dockerfile b/Dockerfile
index 6a7063ca..b63d6400 100755
--- a/Dockerfile
+++ b/Dockerfile
@@ -70,6 +70,7 @@ RUN mkdir src && \
 
 # Now copy the real source code and build
 COPY src ./src
+
 RUN GIT_HASH=$(git rev-parse HEAD || echo "development") \
     cargo build --release --jobs $(nproc) || \
     (sleep 2 && GIT_HASH=$(git rev-parse HEAD || echo "development") cargo build --release --jobs $(nproc)) || \
@@ -159,7 +160,7 @@ WORKDIR /app
 RUN mkdir -p /app/data/public/dist \
              /app/data/markdown \
              /app/data/runtime \
-             /app/src/utils \
+             /app/compute_forces \
              /app/data/piper \
              /tmp/runtime && \
     chown -R webxr:webxr /app /tmp/runtime && \
@@ -173,7 +174,7 @@ RUN mkdir -p /app/data/markdown /app/data/metadata && \
 
 # Copy built artifacts
 COPY --from=rust-deps-builder /usr/src/app/target/release/webxr /app/
-COPY src/utils/compute_forces.ptx /app/compute_forces.ptx
+COPY src/utils/compute_forces.ptx /app/compute_forces/compute_forces.ptx
 COPY --from=frontend-builder /app/data/public/dist /app/data/public/dist
 
 # Copy start script
diff --git a/client/state/defaultSettings.ts b/client/state/defaultSettings.ts
index 177d9bc7..49635bd8 100644
--- a/client/state/defaultSettings.ts
+++ b/client/state/defaultSettings.ts
@@ -7,12 +7,12 @@ export const defaultSettings: Settings = {
             metalness: 0.8,
             opacity: 1.0,
             roughness: 0.2,
-            sizeRange: [200, 700], // Wider range for better size differentiation
-            quality: 'medium', // Default to medium quality for better performance
+            sizeRange: [200, 700],
+            quality: 'medium',
             enableInstancing: true,
             enableHologram: true,
             enableMetadataShape: false,
-            enableMetadataVisualization: false, // Disable for performance
+            enableMetadataVisualization: false,
             colorRangeAge: ['#ff0000', '#00ff00'],
             colorRangeLinks: ['#0000ff', '#ff00ff']
         },
@@ -24,7 +24,6 @@ export const defaultSettings: Settings = {
             opacity: 0.8,
             widthRange: [1.5, 4.0],
             quality: 'medium',
-            // New shader-based edge settings
             enableFlowEffect: true,
             flowSpeed: 1.0,
             flowIntensity: 0.6,
@@ -34,16 +33,19 @@ export const defaultSettings: Settings = {
             gradientColors: ['#888888', '#aaaaaa']
         },
         physics: {
-            attractionStrength: 0.015,
-            boundsSize: 100.0,
-            collisionRadius: 0.25,
-            damping: 0.5,
-            enableBounds: false,
             enabled: true,
-            iterations: 100,
-            maxVelocity: 2.0,
-            repulsionStrength: 0.4,
-            springStrength: 0.6
+            iterations: 100,                // Balanced for performance and stability
+            attractionStrength: 0.5,        // Moderate attraction for connected nodes
+            repulsionStrength: 700.0,       // Strong repulsion for good spacing
+            repulsionDistance: 1000.0,      // Large enough for initial layout
+            springStrength: 0.5,            // Moderate spring force for stability
+            damping: 0.8,                   // Higher damping for stability
+            boundaryDamping: 0.9,           // Strong boundary damping to prevent oscillation
+            massScale: 1.0,                 // Default mass scaling
+            maxVelocity: 2.0,               // Moderate velocity limit
+            collisionRadius: 1.0,           // Default collision detection radius
+            enableBounds: true,             // Enable bounds by default
+            boundsSize: 1000.0              // Large enough for typical graphs
         },
         rendering: {
             ambientLightIntensity: 0.2,
@@ -75,7 +77,7 @@ export const defaultSettings: Settings = {
             textOutlineWidth: 0.1,
             textResolution: 16,
             textPadding: 2,
-            billboardMode: 'camera' 
+            billboardMode: 'camera'
         },
         bloom: {
             edgeBloomStrength: 2.0,
@@ -88,18 +90,18 @@ export const defaultSettings: Settings = {
         },
         hologram: {
             ringCount: 2,
-            sphereSizes: [40, 80],  // Reduced to 2 layers
+            sphereSizes: [40, 80],
             ringRotationSpeed: 1.0,
             ringColor: '#00ffff',
             ringOpacity: 0.6,
             enableBuckminster: false,
             enableGeodesic: false,
-            buckminsterSize: 0,  // Keep but set to 0 since disabled
-            buckminsterOpacity: 0,  // Keep but set to 0 since disabled
-            geodesicSize: 0,  // Keep but set to 0 since disabled
-            geodesicOpacity: 0,  // Keep but set to 0 since disabled
+            buckminsterSize: 0,
+            buckminsterOpacity: 0,
+            geodesicSize: 0,
+            geodesicOpacity: 0,
             enableTriangleSphere: true,
-            triangleSphereSize: 80,  // Single size for instanced geometry
+            triangleSphereSize: 80,
             triangleSphereOpacity: 0.15,
             globalRotationSpeed: 0.03
         }
diff --git a/client/types/settings/base.ts b/client/types/settings/base.ts
index 8c027337..55cc53e7 100644
--- a/client/types/settings/base.ts
+++ b/client/types/settings/base.ts
@@ -113,6 +113,9 @@ export interface PhysicsSettings {
     collisionRadius: number;
     enableBounds: boolean;
     boundsSize: number;
+    repulsionDistance: number;  // Maximum distance for repulsion forces
+    massScale: number;         // Scaling factor for node masses
+    boundaryDamping: number;   // Damping factor near boundaries
 }
 
 export interface RenderingSettings {
diff --git a/client/types/settings/validation.ts b/client/types/settings/validation.ts
index a2c4eee6..ab9b5c93 100644
--- a/client/types/settings/validation.ts
+++ b/client/types/settings/validation.ts
@@ -18,67 +18,53 @@ interface ValidationRule {
 
 const validationRules: Record<string, Record<string, ValidationRule>> = {
     visualization: {
-        'nodes.baseSize': {
-            validate: (value: number) => value >= 0.1 && value <= 10,
-            message: 'Base size must be between 0.1 and 10'
+        'physics.iterations': {
+            validate: (value: number) => value >= 1 && value <= 500,
+            message: 'Iterations must be between 1 and 500'
         },
-        'nodes.opacity': {
-            validate: (value: number) => value >= 0 && value <= 1,
-            message: 'Opacity must be between 0 and 1'
+        'physics.springStrength': {
+            validate: (value: number) => value >= 0.1 && value <= 10,
+            message: 'Spring strength must be between 0.1 and 10'
         },
-        'nodes.metalness': {
-            validate: (value: number) => value >= 0 && value <= 1,
-            message: 'Metalness must be between 0 and 1'
+        'physics.repulsionStrength': {
+            validate: (value: number) => value >= 1 && value <= 2000,
+            message: 'Repulsion strength must be between 1 and 2000'
         },
-        'nodes.roughness': {
-            validate: (value: number) => value >= 0 && value <= 1,
-            message: 'Roughness must be between 0 and 1'
+        'physics.repulsionDistance': {
+            validate: (value: number) => value >= 100 && value <= 2000,
+            message: 'Repulsion distance must be between 100 and 2000'
         },
-        'edges.width': {
+        'physics.massScale': {
             validate: (value: number) => value >= 0.1 && value <= 5,
-            message: 'Edge width must be between 0.1 and 5'
+            message: 'Mass scale must be between 0.1 and 5'
         },
-        'physics.attractionStrength': {
-            validate: (value: number) => value >= 0 && value <= 2,
-            message: 'Attraction strength must be between 0 and 2'
-        },
-        'physics.repulsionStrength': {
-            validate: (value: number) => value >= 0 && value <= 2,
-            message: 'Repulsion strength must be between 0 and 2'
-        },
-        'physics.springStrength': {
-            validate: (value: number) => value >= 0 && value <= 2,
-            message: 'Spring strength must be between 0 and 2'
+        'physics.damping': {
+            validate: (value: number) => value >= 0 && value <= 1,
+            message: 'Damping must be between 0 and 1'
         },
-        'rendering.quality': {
-            validate: (value: string) => ['low', 'medium', 'high'].includes(value),
-            message: 'Quality must be low, medium, or high'
+        'physics.boundaryDamping': {
+            validate: (value: number) => value >= 0.5 && value <= 1,
+            message: 'Boundary damping must be between 0.5 and 1'
         },
-        'rendering.ambientLightIntensity': {
-            validate: (value: number) => value >= 0 && value <= 2,
-            message: 'Ambient light intensity must be between 0 and 2'
-        }
-    },
-    'visualization.bloom': {
-        'visualization.bloom.strength': {
-            validate: (value: number) => value >= 0 && value <= 5,
-            message: 'Bloom strength must be between 0 and 5'
+        'physics.boundsSize': {
+            validate: (value: number) => value >= 100 && value <= 5000,
+            message: 'Bounds size must be between 100 and 5000'
         },
-        'visualization.bloom.radius': {
-            validate: (value: number) => value >= 0 && value <= 3,
-            message: 'Bloom radius must be between 0 and 3'
+        'physics.enableBounds': {
+            validate: (value: boolean) => typeof value === 'boolean',
+            message: 'Enable bounds must be a boolean'
         },
-        'visualization.bloom.edge_bloom_strength': {
-            validate: (value: number) => value >= 0 && value <= 5,
-            message: 'Edge bloom strength must be between 0 and 5'
+        'physics.collisionRadius': {
+            validate: (value: number) => value >= 0.1 && value <= 100,
+            message: 'Collision radius must be between 0.1 and 100'
         },
-        'visualization.bloom.node_bloom_strength': {
-            validate: (value: number) => value >= 0 && value <= 5,
-            message: 'Node bloom strength must be between 0 and 5'
+        'physics.maxVelocity': {
+            validate: (value: number) => value >= 0.1 && value <= 10,
+            message: 'Max velocity must be between 0.1 and 10'
         },
-        'visualization.bloom.environment_bloom_strength': {
-            validate: (value: number) => value >= 0 && value <= 5,
-            message: 'Environment bloom strength must be between 0 and 5'
+        'physics.attractionStrength': {
+            validate: (value: number) => value >= 0.1 && value <= 10,
+            message: 'Attraction strength must be between 0.1 and 10'
         }
     }
 };
@@ -86,14 +72,12 @@ const validationRules: Record<string, Record<string, ValidationRule>> = {
 export function validateSettings(settings: Partial<Settings>): ValidationResult {
     const errors: ValidationError[] = [];
     
-    // Recursively validate all settings
     function validateObject(obj: any, path: string = '') {
         if (!obj || typeof obj !== 'object') return;
         
         Object.entries(obj).forEach(([key, value]) => {
             const currentPath = path ? `${path}.${key}` : key;
             
-            // Check if there's a validation rule for this path
             for (const [category, rules] of Object.entries(validationRules)) {
                 if (currentPath.startsWith(category)) {
                     const rule = rules[currentPath];
@@ -107,7 +91,6 @@ export function validateSettings(settings: Partial<Settings>): ValidationResult
                 }
             }
             
-            // Recursively validate nested objects
             if (value && typeof value === 'object' && !Array.isArray(value)) {
                 validateObject(value, currentPath);
             }
@@ -125,7 +108,6 @@ export function validateSettings(settings: Partial<Settings>): ValidationResult
 export function validateSettingValue(path: string, value: any, currentSettings: Settings): ValidationError[] {
     const errors: ValidationError[] = [];
     
-    // Find matching validation rule
     for (const [category, rules] of Object.entries(validationRules)) {
         if (path.startsWith(category)) {
             const rule = rules[path];
@@ -139,11 +121,8 @@ export function validateSettingValue(path: string, value: any, currentSettings:
         }
     }
     
-    // Special validation for interdependent settings
     if (path.includes('physics')) {
         validatePhysicsSettings(path, value, currentSettings, errors);
-    } else if (path.includes('rendering')) {
-        validateRenderingSettings(path, value, currentSettings, errors);
     }
     
     return errors;
@@ -157,33 +136,41 @@ function validatePhysicsSettings(
 ): void {
     const physics = settings.visualization.physics;
     
-    // Example: Ensure attraction and repulsion strengths are balanced
-    if (path === 'visualization.physics.attractionStrength' && physics.repulsionStrength) {
-        const ratio = value / physics.repulsionStrength;
-        if (ratio > 3 || ratio < 0.33) {
+    // Validate repulsion and distance relationship
+    if (path === 'visualization.physics.repulsionStrength' && physics.repulsionDistance) {
+        if (value > physics.repulsionDistance) {
             errors.push({
                 path,
-                message: 'Attraction and repulsion strengths should be relatively balanced',
+                message: 'Repulsion strength should not exceed repulsion distance for stability',
                 value
             });
         }
     }
-}
 
-function validateRenderingSettings(
-    path: string,
-    value: any,
-    settings: Settings,
-    errors: ValidationError[]
-): void {
-    const rendering = settings.visualization.rendering;
-    
-    // Example: Warn about performance impact of combined settings
-    if (path === 'visualization.rendering.quality' && value === 'high') {
-        if (rendering.enableShadows && rendering.enableAmbientOcclusion) {
+    // Validate performance impact of iterations
+    if (path === 'visualization.physics.iterations' && value > 200) {
+        errors.push({
+            path,
+            message: 'High iteration count may impact performance',
+            value
+        });
+    }
+
+    // Validate mass scale impact on forces
+    if (path === 'visualization.physics.massScale' && value > 2) {
+        errors.push({
+            path,
+            message: 'High mass scale values may cause unstable behavior',
+            value
+        });
+    }
+
+    // Validate bounds size and repulsion distance relationship
+    if (path === 'visualization.physics.boundsSize' && physics.repulsionDistance) {
+        if (value < physics.repulsionDistance * 0.5) {
             errors.push({
                 path,
-                message: 'High quality with shadows and ambient occlusion may impact performance',
+                message: 'Bounds size should be at least half of repulsion distance',
                 value
             });
         }
diff --git a/client/ui/controlPanelConfig.ts b/client/ui/controlPanelConfig.ts
index c55081c7..a3c01062 100644
--- a/client/ui/controlPanelConfig.ts
+++ b/client/ui/controlPanelConfig.ts
@@ -2,131 +2,113 @@
 export interface SettingControl {
     label: string;
     type: 'slider' | 'toggle' | 'color' | 'select' | 'number' | 'text';
-    options?: string[]; // For select controls
-    min?: number;      // For sliders and number inputs
-    max?: number;      // For sliders and number inputs
-    step?: number;     // For sliders and number inputs
+    options?: string[];
+    min?: number;
+    max?: number;
+    step?: number;
     tooltip?: string;
 }
 
 export const settingsMap: Record<string, Record<string, SettingControl | Record<string, SettingControl>>> = {
     visualization: {
-        nodes: {
-            baseColor: { label: 'Base Color', type: 'color', tooltip: 'The base color of the nodes.' },
-            metalness: { label: 'Metalness', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The metalness of the nodes.' },
-            opacity: { label: 'Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the nodes.' },
-            roughness: { label: 'Roughness', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The roughness of the nodes.' },
-            sizeRange: { label: 'Size Range', type: 'text', tooltip: 'Min and max size of the nodes (e.g., "200.0, 700.0").' },
-            quality: { label: 'Quality', type: 'select', options: ['low', 'medium', 'high'], tooltip: 'The quality level of the node geometry.' },
-            enableInstancing: { label: 'Enable Instancing', type: 'toggle', tooltip: 'Enable instanced rendering for improved performance.' },
-            enableHologram: { label: 'Enable Hologram', type: 'toggle', tooltip: 'Enable the hologram effect around nodes.' },
-            enableMetadataShape: { label: 'Enable Metadata Shape', type: 'toggle', tooltip: 'Enable a shape based on node metadata.' },
-            enableMetadataVisualization: { label: 'Enable Metadata Visualization', type: 'toggle', tooltip: 'Enable visualization of node metadata.' },
-        },
-        edges: {
-            arrowSize: { label: 'Arrow Size', type: 'number', min: 0, tooltip: 'The size of the arrowheads on edges.' },
-            baseWidth: { label: 'Base Width', type: 'number', min: 0, tooltip: 'The base width of the edges.' },
-            color: { label: 'Color', type: 'color', tooltip: 'The color of the edges.' },
-            enableArrows: { label: 'Enable Arrows', type: 'toggle', tooltip: 'Enable arrowheads on edges.' },
-            opacity: { label: 'Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the edges.' },
-            widthRange: { label: 'Width Range', type: 'text', tooltip: 'Min and max width of the edges (e.g., "2.0, 3.0").' },
-            quality: { label: 'Quality', type: 'select', options: ['low', 'medium', 'high'], tooltip: 'The quality level of the edge geometry.' },
-            enableFlowEffect: { label: 'Flow Effect', type: 'toggle', tooltip: 'Enable flowing animation on edges.' },
-            flowSpeed: { label: 'Flow Speed', type: 'slider', min: 0, max: 2, step: 0.1, tooltip: 'Speed of the flow animation.' },
-            flowIntensity: { label: 'Flow Intensity', type: 'slider', min: 0, max: 1, step: 0.1, tooltip: 'Intensity of the flow effect.' },
-            glowStrength: { label: 'Glow Strength', type: 'slider', min: 0, max: 1, step: 0.1, tooltip: 'Strength of the edge glow effect.' },
-            distanceIntensity: { label: 'Distance Intensity', type: 'slider', min: 0, max: 1, step: 0.1, tooltip: 'How edge appearance changes with distance.' },
-            useGradient: { label: 'Use Gradient', type: 'toggle', tooltip: 'Enable gradient coloring on edges.' },
-            gradientColors: { label: 'Gradient Colors', type: 'text', tooltip: 'Start and end colors for the gradient (e.g., "#ff0000, #00ff00").' },
-        },
         physics: {
-            attractionStrength: { label: 'Attraction Strength', type: 'slider', min: 0, max: 0.1, step: 0.001, tooltip: 'The strength of the attraction force between connected nodes.' },
-            boundsSize: { label: 'Bounds Size', type: 'number', min: 0, tooltip: 'The size of the bounding box that contains the nodes.' },
-            collisionRadius: { label: 'Collision Radius', type: 'number', min: 0, tooltip: 'The radius within which nodes will collide.' },
-            damping: { label: 'Damping', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The damping factor that slows down node movement.' },
-            enableBounds: { label: 'Enable Bounds', type: 'toggle', tooltip: 'Enable a bounding box to contain the nodes.' },
-            enabled: { label: 'Enabled', type: 'toggle', tooltip: 'Enable/disable the physics simulation.' },
-            iterations: { label: 'Iterations', type: 'number', min: 1, tooltip: 'The number of physics simulation iterations per frame.' },
-            maxVelocity: { label: 'Max Velocity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The maximum velocity of the nodes.' },
-            repulsionStrength: { label: 'Repulsion Strength', type: 'number', min: 0, tooltip: 'The strength of the repulsion force between nodes.' },
-            springStrength: { label: 'Spring Strength', type: 'slider', min: 0, max: 0.1, step: 0.001, tooltip: 'The strength of the spring force that keeps connected nodes together.' },
-        },
-        rendering: {
-            ambientLightIntensity: { label: 'Ambient Light', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The intensity of the ambient light.' },
-            backgroundColor: { label: 'Background Color', type: 'color', tooltip: 'The background color of the scene.' },
-            directionalLightIntensity: { label: 'Directional Light', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The intensity of the directional light.' },
-            enableAmbientOcclusion: { label: 'Ambient Occlusion', type: 'toggle', tooltip: 'Enable ambient occlusion for more realistic shadows.' },
-            enableAntialiasing: { label: 'Antialiasing', type: 'toggle', tooltip: 'Enable antialiasing for smoother edges.' },
-            enableShadows: { label: 'Shadows', type: 'toggle', tooltip: 'Enable shadows (can be performance-intensive).' },
-            environmentIntensity: { label: 'Environment Light', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The intensity of the environment lighting.' },
-            shadowMapSize: { label: 'Shadow Map Size', type: 'select', options: ['1024', '2048', '4096'], tooltip: 'Resolution of shadow maps.' },
-            shadowBias: { label: 'Shadow Bias', type: 'slider', min: -0.01, max: 0.01, step: 0.0001, tooltip: 'Bias value to prevent shadow acne.' },
-            context: { label: 'Context', type: 'select', options: ['desktop', 'ar'], tooltip: 'Rendering context (desktop or AR).' },
-        },
-        animations: {
-            enableMotionBlur: { label: 'Motion Blur', type: 'toggle', tooltip: 'Enable motion blur for smoother animations.' },
-            enableNodeAnimations: { label: 'Node Animations', type: 'toggle', tooltip: 'Enable animations on the nodes.' },
-            motionBlurStrength: { label: 'Motion Blur Strength', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The strength of the motion blur effect.' },
-            selectionWaveEnabled: { label: "Selection Wave", type: "toggle", tooltip: 'Enable wave effect on node selection.' },
-            pulseEnabled: { label: "Pulse", type: "toggle", tooltip: 'Enable node pulsing.' },
-            pulseSpeed: { label: "Pulse Speed", type: 'slider', min: 0, max: 2, step: 0.1, tooltip: 'Speed of node pulsing.' },
-            pulseStrength: { label: "Pulse Strength", type: 'slider', min: 0, max: 1, step: 0.1, tooltip: 'Strength of node pulsing.' },
-            waveSpeed: { label: "Wave Speed", type: 'slider', min: 0, max: 2, step: 0.1, tooltip: 'Speed of the selection wave.' },
-        },
-        labels: {
-            desktopFontSize: { label: 'Font Size', type: 'number', min: 1, tooltip: 'The font size for labels on desktop.' },
-            enableLabels: { label: 'Enable Labels', type: 'toggle', tooltip: 'Enable/disable node labels.' },
-            textColor: { label: 'Text Color', type: 'color', tooltip: 'The color of the label text.' },
-            textOutlineColor: { label: 'Outline Color', type: 'color', tooltip: 'The color of the label text outline.' },
-            textOutlineWidth: { label: 'Outline Width', type: 'number', min: 0, tooltip: 'The width of the label text outline.' },
-            textResolution: { label: 'Resolution', type: 'number', min: 1, tooltip: 'The resolution of the label text.' },
-            textPadding: { label: 'Padding', type: 'number', min: 0, tooltip: 'Padding around label text.' },
-            billboardMode: { label: 'Billboard Mode', type: 'select', options: ['camera', 'vertical'], tooltip: 'Orientation of labels.' },
-        },
-        bloom: {
-            edgeBloomStrength: { label: 'Edge Bloom', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The strength of the bloom effect on edges.' },
-            enabled: { label: 'Enable Bloom', type: 'toggle', tooltip: 'Enable/disable the bloom effect.' },
-            environmentBloomStrength: { label: 'Environment Bloom', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The strength of the bloom effect on the environment.' },
-            nodeBloomStrength: { label: 'Node Bloom', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The strength of the bloom effect on nodes.' },
-            radius: { label: 'Radius', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The radius of the bloom effect.' },
-            strength: { label: 'Strength', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The overall strength of the bloom effect.' },
-            threshold: { label: 'Threshold', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The brightness threshold for the bloom effect.' },
-        },
-        hologram: {
-            ringCount: { label: 'Ring Count', type: 'number', min: 0, tooltip: 'The number of rings in the hologram effect.' },
-            ringColor: { label: 'Ring Color', type: 'color', tooltip: 'The color of the hologram rings.' },
-            ringOpacity: { label: 'Ring Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the hologram rings.' },
-            sphereSizes: { label: 'Sphere Sizes', type: 'text', tooltip: 'Sizes of the hologram spheres (e.g., "40.0, 80.0").' },
-            ringRotationSpeed: { label: 'Ring Speed', type: 'number', min: 0, tooltip: 'The rotation speed of the hologram rings.' },
-            enableBuckminster: { label: 'Buckminster', type: 'toggle', tooltip: 'Enable the Buckminsterfullerene hologram effect.' },
-            buckminsterSize: { label: 'Buckminster Size', type: 'number', min: 0, tooltip: 'The size of the Buckminsterfullerene hologram.' },
-            buckminsterOpacity: { label: 'Buckminster Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the Buckminsterfullerene hologram.' },
-            enableGeodesic: { label: 'Geodesic', type: 'toggle', tooltip: 'Enable the geodesic sphere hologram effect.' },
-            geodesicSize: { label: 'Geodesic Size', type: 'number', min: 0, tooltip: 'The size of the geodesic sphere hologram.' },
-            geodesicOpacity: { label: 'Geodesic Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the geodesic sphere hologram.' },
-            enableTriangleSphere: { label: 'Triangle Sphere', type: 'toggle', tooltip: 'Enable the triangle sphere hologram effect.' },
-            triangleSphereSize: { label: 'Triangle Size', type: 'number', min: 0, tooltip: 'The size of the triangle sphere hologram.' },
-            triangleSphereOpacity: { label: 'Triangle Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the triangle sphere hologram.' },
-            globalRotationSpeed: { label: 'Global Speed', type: 'number', min: 0, tooltip: 'The global rotation speed of the hologram.' },
-        },
-    },
-    system: {
-        websocket: {
-            reconnectAttempts: { label: 'Reconnect Attempts', type: 'number', min: 0, tooltip: 'Number of reconnection attempts.' },
-            reconnectDelay: { label: 'Reconnect Delay', type: 'number', min: 1000, tooltip: 'Delay between reconnection attempts (ms).' },
-            binaryChunkSize: { label: 'Binary Chunk Size', type: 'number', min: 1, tooltip: 'Size of binary message chunks.' },
-            compressionEnabled: { label: 'Enable Compression', type: 'toggle', tooltip: 'Enable WebSocket message compression.' },
-            compressionThreshold: { label: 'Compression Threshold', type: 'number', min: 0, tooltip: 'Message size threshold for compression.' },
-            updateRate: { label: 'Update Rate', type: 'number', min: 1, tooltip: 'Rate of WebSocket updates (Hz).' },
-        },
-        debug: {
-            enabled: { label: 'Enable Debug', type: 'toggle', tooltip: 'Enable debug mode.' },
-            enableDataDebug: { label: 'Data Debug', type: 'toggle', tooltip: 'Enable data debugging.' },
-            enableWebsocketDebug: { label: 'WebSocket Debug', type: 'toggle', tooltip: 'Enable WebSocket debugging.' },
-            logBinaryHeaders: { label: 'Log Binary Headers', type: 'toggle', tooltip: 'Log binary message headers.' },
-            logFullJson: { label: 'Log Full JSON', type: 'toggle', tooltip: 'Log complete JSON messages.' },
-            logLevel: { label: 'Log Level', type: 'select', options: ['error', 'warn', 'info', 'debug', 'trace'], tooltip: 'Logging level.' },
-            logFormat: { label: 'Log Format', type: 'text', tooltip: 'Format string for log messages.' },
-        },
-    },
+            enabled: { 
+                label: 'Enable Physics', 
+                type: 'toggle', 
+                tooltip: 'Enable/disable the physics simulation.' 
+            },
+            iterations: { 
+                label: 'Iterations', 
+                type: 'number', 
+                min: 1, 
+                max: 500, 
+                tooltip: 'Number of physics iterations per frame. Higher values increase accuracy but impact performance.' 
+            },
+            attractionStrength: { 
+                label: 'Attraction', 
+                type: 'slider', 
+                min: 0.1, 
+                max: 10, 
+                step: 0.1, 
+                tooltip: 'Strength of attraction between connected nodes. Higher values pull connected nodes closer together.' 
+            },
+            repulsionStrength: { 
+                label: 'Repulsion', 
+                type: 'slider', 
+                min: 1, 
+                max: 2000, 
+                step: 1, 
+                tooltip: 'Strength of repulsion between all nodes. Higher values push nodes further apart.' 
+            },
+            repulsionDistance: { 
+                label: 'Repulsion Range', 
+                type: 'slider', 
+                min: 100, 
+                max: 2000, 
+                step: 100, 
+                tooltip: 'Maximum distance for repulsion forces. Nodes beyond this range do not repel each other.' 
+            },
+            springStrength: { 
+                label: 'Spring Strength', 
+                type: 'slider', 
+                min: 0.1, 
+                max: 10, 
+                step: 0.1, 
+                tooltip: 'Strength of spring forces between connected nodes. Affects the equilibrium distance.' 
+            },
+            damping: { 
+                label: 'Damping', 
+                type: 'slider', 
+                min: 0, 
+                max: 1, 
+                step: 0.01, 
+                tooltip: 'Velocity damping factor. Higher values make the simulation more stable but less dynamic.' 
+            },
+            boundaryDamping: { 
+                label: 'Boundary Damping', 
+                type: 'slider', 
+                min: 0.5, 
+                max: 1, 
+                step: 0.05, 
+                tooltip: 'Additional damping applied near boundaries. Higher values prevent boundary oscillation.' 
+            },
+            massScale: { 
+                label: 'Mass Scale', 
+                type: 'slider', 
+                min: 0.1, 
+                max: 5, 
+                step: 0.1, 
+                tooltip: 'Scaling factor for node masses. Affects force calculations and node movement speed.' 
+            },
+            maxVelocity: { 
+                label: 'Max Velocity', 
+                type: 'slider', 
+                min: 0.1, 
+                max: 10, 
+                step: 0.1, 
+                tooltip: 'Maximum velocity limit for nodes. Higher values allow faster movement but may cause instability.' 
+            },
+            collisionRadius: { 
+                label: 'Collision Radius', 
+                type: 'slider', 
+                min: 0.1, 
+                max: 100, 
+                step: 0.1, 
+                tooltip: 'Radius for node collision detection. Affects minimum distance between nodes.' 
+            },
+            enableBounds: { 
+                label: 'Enable Bounds', 
+                type: 'toggle', 
+                tooltip: 'Enable bounding box to contain nodes within a specific volume.' 
+            },
+            boundsSize: { 
+                label: 'Bounds Size', 
+                type: 'slider', 
+                min: 100, 
+                max: 5000, 
+                step: 100, 
+                tooltip: 'Size of the bounding box that contains the nodes. Larger values allow more spread.' 
+            }
+        }
+    }
 };
\ No newline at end of file
diff --git a/scripts/codebase.txt b/scripts/codebase.txt
new file mode 100644
index 00000000..0375a7fb
--- /dev/null
+++ b/scripts/codebase.txt
@@ -0,0 +1,16337 @@
+
+## Project Structure Tree
+
+```
+Root files:
+Cargo.lock
+Cargo.toml
+config.yml
+docker-compose.yml
+Dockerfile
+nginx.conf
+package.json
+pnpm-lock.yaml
+README.md
+settings.yaml
+tsconfig.json
+tsconfig.node.json
+vite.config.ts
+
+Directories:
+../client
+├── audio
+│   └── AudioPlayer.ts
+├── components
+│   └── settings
+│       └── ValidationErrorDisplay.ts
+├── config
+│   └── featureFlags.ts
+├── core
+│   ├── api.ts
+│   ├── constants.ts
+│   ├── debugState.ts
+│   ├── logger.ts
+│   ├── physicsConstants.ts
+│   ├── types.ts
+│   └── utils.ts
+├── index.html
+├── index.ts
+├── monitoring
+│   └── NodeManagerMetrics.ts
+├── platform
+│   └── platformManager.ts
+├── public
+│   └── fonts
+│       ├── helvetiker_regular.typeface.json
+│       └── Roboto-Regular.woff2
+├── rendering
+│   ├── EdgeManager.ts
+│   ├── factories
+│   │   ├── GeometryFactory.ts
+│   │   └── MaterialFactory.ts
+│   ├── materials
+│   │   ├── EdgeShaderMaterial.ts
+│   │   └── HologramShaderMaterial.ts
+│   ├── MetadataVisualizer.ts
+│   ├── node
+│   │   ├── geometry
+│   │   │   └── NodeGeometryManager.ts
+│   │   ├── instance
+│   │   │   └── NodeInstanceManager.ts
+│   │   ├── interaction
+│   │   │   └── NodeInteractionManager.ts
+│   │   ├── metadata
+│   │   │   └── NodeMetadataManager.ts
+│   │   ├── NodeManagerFacade.ts
+│   │   ├── NodeManagerFactory.ts
+│   │   └── NodeManagerInterface.ts
+│   ├── renderManager.ts
+│   ├── scene.ts
+│   ├── textRenderer.ts
+│   └── VisualizationController.ts
+├── services
+│   ├── NostrAuthService.ts
+│   ├── SettingsEventEmitter.ts
+│   ├── SettingsLayoutManager.ts
+│   ├── SettingsPersistenceService.ts
+│   └── SettingsPreviewManager.ts
+├── settings
+│   └── index.ts
+├── state
+│   ├── defaultSettings.ts
+│   ├── graphData.ts
+│   ├── SettingsObserver.ts
+│   ├── SettingsStore.ts
+│   └── settings.ts
+├── tsconfig.json
+├── types
+│   ├── env.d.ts
+│   ├── gestures.ts
+│   ├── metadata.ts
+│   ├── nostr.d.ts
+│   ├── settings
+│   │   ├── base.ts
+│   │   ├── utils.ts
+│   │   ├── validation.ts
+│   │   └── xr.ts
+│   ├── settings.ts
+│   ├── three.d.ts
+│   ├── three-ext.d.ts
+│   ├── websocket.ts
+│   ├── webxr.d.ts
+│   └── xr.ts
+├── ui
+│   ├── controlPanelConfig.ts
+│   ├── index.ts
+│   ├── ModularControlPanel.css
+│   ├── ModularControlPanel.ts
+│   └── styles.css
+├── utils
+│   └── eventEmitter.ts
+├── visualization
+│   ├── HologramManager.ts
+│   └── MetadataVisualizer.ts
+├── websocket
+│   └── websocketService.ts
+└── xr
+    ├── handInteraction.ts
+    ├── xrInitializer.ts
+    ├── xrInteraction.ts
+    ├── xrSessionManager.ts
+    └── xrTypes.ts
+../src
+├── app_state.rs
+├── config
+│   ├── feature_access.rs
+│   ├── feature_access_test.rs
+│   └── mod.rs
+├── handlers
+│   ├── api_handler
+│   │   ├── files
+│   │   │   └── mod.rs
+│   │   ├── graph
+│   │   │   └── mod.rs
+│   │   ├── mod.rs
+│   │   └── visualization
+│   │       └── mod.rs
+│   ├── file_handler.rs
+│   ├── graph_handler.rs
+│   ├── health_handler.rs
+│   ├── mod.rs
+│   ├── nostr_handler.rs
+│   ├── pages_handler.rs
+│   ├── perplexity_handler.rs
+│   ├── ragflow_handler.rs
+│   ├── settings_handler.rs
+│   ├── socket_flow_handler.rs
+│   └── visualization_handler.rs
+├── lib.rs
+├── main.rs
+├── models
+│   ├── edge.rs
+│   ├── graph.rs
+│   ├── metadata.rs
+│   ├── mod.rs
+│   ├── node.rs
+│   ├── pagination.rs
+│   ├── position_update.rs
+│   ├── protected_settings.rs
+│   ├── simulation_params.rs
+│   └── ui_settings.rs
+├── services
+│   ├── file_service.rs
+│   ├── github
+│   │   ├── api.rs
+│   │   ├── config.rs
+│   │   ├── content.rs
+│   │   ├── mod.rs
+│   │   ├── pr.rs
+│   │   └── types.rs
+│   ├── graph_service.rs
+│   ├── mod.rs
+│   ├── nostr_service.rs
+│   ├── perplexity_service.rs
+│   ├── ragflow_service.rs
+│   └── speech_service.rs
+├── state.rs
+├── types
+│   ├── mod.rs
+│   └── speech.rs
+└── utils
+    ├── audio_processor.rs
+    ├── binary_protocol.rs
+    ├── case_conversion.rs
+    ├── compute_forces.cu
+    ├── compute_forces.ptx
+    ├── force_calculation.wgsl
+    ├── gpu_compute.rs
+    ├── logging.rs
+    ├── mod.rs
+    ├── socket_flow_constants.rs
+    ├── socket_flow_messages.rs
+    ├── tests
+    │   └── socket_flow_tests.rs
+    └── update_positions.wgsl
+
+12 directories, 60 files
+```
+
+# Project Codebase
+
+Generated: Sun 16 Feb 09:55:30 GMT 2025
+
+## Project Structure
+
+- Server: Rust (src directory)
+- Client: TypeScript (client directory)
+
+
+## README.md
+
+# LogseqXR: Immersive WebXR Visualization for Logseq Knowledge Graphs
+
+![image](https://github.com/user-attachments/assets/269a678d-88a5-42de-9d67-d73b64f4e520)
+
+**Inspired by the innovative work of Prof. Rob Aspin:** [https://github.com/trebornipsa](https://github.com/trebornipsa)
+
+![P1080785_1728030359430_0](https://github.com/user-attachments/assets/3ecac4a3-95d7-4c75-a3b2-e93deee565d6)
+
+## Quick Links
+
+- [Project Overview](docs/overview/introduction.md)
+- [Technical Architecture](docs/overview/architecture.md)
+- [Development Setup](docs/development/setup.md)
+- [API Documentation](docs/api/rest.md)
+- [Contributing Guidelines](docs/contributing/guidelines.md)
+
+## Documentation Structure
+
+### Overview
+- [Introduction & Features](docs/overview/introduction.md)
+- [System Architecture](docs/overview/architecture.md)
+
+### Technical Documentation
+- [Binary Protocol](docs/technical/binary-protocol.md)
+- [WebGPU Pipeline](docs/technical/webgpu.md)
+- [Performance Optimizations](docs/technical/performance.md)
+- [Class Diagrams](docs/technical/class-diagrams.md)
+- [Authentication & Settings](docs/technical/auth-settings.md)
+- [Modular Control Panel](docs/technical/control-panel.md)
+
+### Development
+- [Setup Guide](docs/development/setup.md)
+
+### API Documentation
+- [REST API](docs/api/rest.md)
+- [WebSocket API](docs/api/websocket.md)
+
+### Deployment
+- [Docker Deployment](docs/deployment/docker.md)
+
+### Contributing
+- [Contributing Guidelines](docs/contributing/guidelines.md)
+
+### Diagrams
+
+```mermaid
+graph TB
+    %% Frontend Components
+    subgraph Frontend
+        UI[User Interface Layer]
+        VR[WebXR Controller]
+        WS[WebSocket Client]
+        GPU[GPU Compute Layer]
+        ThreeJS[Three.js Renderer]
+        ChatUI[Chat Interface]
+        GraphUI[Graph Interface]
+        ControlPanel["Modular Control Panel (with Nostr Auth)"]
+        VRControls[VR Control System]
+        WSService[WebSocket Service]
+        DataManager[Graph Data Manager]
+        LayoutEngine[Layout Engine]
+        SpaceMouse[SpaceMouse Controller]
+        PlatformManager[Platform Manager]
+        XRSession[XR Session Manager]
+        XRInit[XR Initializer]
+        SceneManager[Scene Manager]
+        NodeManager[Enhanced Node Manager]
+        EdgeManager[Edge Manager]
+        HologramManager[Hologram Manager]
+        TextRenderer[Text Renderer]
+        SettingsStore[Settings Store]
+    end
+
+    %% Backend Components
+    subgraph Backend
+        Server[Actix Web Server]
+        FileH[File Handler]
+        GraphH[Graph Handler]
+        WSH[WebSocket Handler]
+        PerplexityH[Perplexity Handler]
+        RagFlowH[RagFlow Handler]
+        VisualizationH[Visualization Handler]
+        NostrH[Nostr Handler]
+        HealthH[Health Handler]
+        PagesH[Pages Handler]
+        SettingsH[Settings Handler]
+        FileS[File Service]
+        GraphS[Graph Service]
+        GPUS[GPU Compute Service]
+        PerplexityS[Perplexity Service]
+        RagFlowS[RagFlow Service]
+        SpeechS[Speech Service]
+        NostrS[Nostr Service]
+        WSManager[WebSocket Manager]
+        GPUCompute[GPU Compute]
+        Compression[Compression Utils]
+        AudioProc[Audio Processor]
+        MetadataStore[Metadata Store]
+        ProtectedSettings[Protected Settings]
+    end
+
+    %% External Components
+    subgraph External
+        GitHub[GitHub API]
+        Perplexity[Perplexity AI]
+        RagFlow[RagFlow API]
+        OpenAI[OpenAI API]
+        NostrAPI[Nostr API]
+    end
+
+    %% Connections between Frontend Components
+    UI --> ChatUI
+    UI --> GraphUI
+    UI --> ControlPanel
+    UI --> VRControls
+
+    VR --> ThreeJS
+    WS --> WSService
+    WSService --> Server
+
+    %% Connections between Backend Components
+    Server --> FileH
+    Server --> GraphH
+    Server --> WSH
+    Server --> PerplexityH
+    Server --> RagFlowH
+    Server --> VisualizationH
+    Server --> NostrH
+    Server --> HealthH
+    Server --> PagesH
+    Server --> SettingsH
+
+    FileH --> FileS
+    GraphH --> GraphS
+    WSH --> WSManager
+    PerplexityH --> PerplexityS
+    RagFlowH --> RagFlowS
+    NostrH --> NostrS
+
+    %% Connections to External Components
+    FileS --> GitHub
+    PerplexityS --> Perplexity
+    RagFlowS --> RagFlow
+    SpeechS --> OpenAI
+    NostrS --> NostrAPI
+
+    %% Styling for clarity
+    style Frontend fill:#f9f,stroke:#333,stroke-width:2px
+    style Backend fill:#bbf,stroke:#333,stroke-width:2px
+    style External fill:#bfb,stroke:#333,stroke-width:2px
+```
+
+### Class Diagram
+
+```mermaid
+classDiagram
+    class App {
+        +sceneManager: SceneManager
+        +nodeManager: EnhancedNodeManager
+        +edgeManager: EdgeManager
+        +hologramManager: HologramManager
+        +textRenderer: TextRenderer
+        +websocketService: WebSocketService
+        +settingsStore: SettingsStore
+        +platformManager: PlatformManager
+        +xrSessionManager: XRSessionManager
+        +start()
+        +initializeEventListeners()
+        +handleSettingsUpdate(settings: Settings)
+        +dispose()
+    }
+
+    class SceneManager {
+        -static instance: SceneManager
+        +scene: Scene
+        +camera: Camera
+        +renderer: Renderer
+        +controls: Controls
+        +composer: Composer
+        +getInstance(canvas: HTMLCanvasElement): SceneManager
+        +getScene(): Scene
+        +getRenderer(): Renderer
+        +getCamera(): Camera
+        +start()
+        +handleSettingsUpdate(settings: Settings)
+        +cleanup()
+    }
+
+    class WebsocketService {
+        -static instance: WebsocketService
+        +socket: WebSocket
+        +listeners: Object
+        +reconnectAttempts: number
+        +maxReconnectAttempts: number
+        +reconnectInterval: number
+        +getInstance(): WebsocketService
+        +connect()
+        +onBinaryMessage(callback: function)
+        +onSettingsUpdate(callback: function)
+        +onConnectionStatusChange(callback: function)
+        +sendMessage(data: object)
+        +close()
+    }
+
+    class AppState {
+        +graph_service: GraphService
+        +gpu_compute: Option<Arc<RwLock<GPUCompute>>>
+        +settings: Arc<RwLock<Settings>>
+        +protected_settings: Arc<RwLock<ProtectedSettings>>
+        +metadata: Arc<RwLock<MetadataStore>>
+        +github_client: Arc<GitHubClient>
+        +content_api: Arc<ContentAPI>
+        +perplexity_service: Option<Arc<PerplexityService>>
+        +ragflow_service: Option<Arc<RAGFlowService>>
+        +nostr_service: Option<web::Data<NostrService>>
+        +ragflow_conversation_id: String
+        +active_connections: Arc<AtomicUsize>
+        +new()
+        +increment_connections(): usize
+        +decrement_connections(): usize
+        +get_api_keys(pubkey: str): ApiKeys
+        +get_nostr_user(pubkey: str): Option<NostrUser>
+        +validate_nostr_session(pubkey: str, token: str): bool
+        +update_nostr_user_api_keys(pubkey: str, api_keys: ApiKeys): Result<NostrUser>
+    }
+
+    class GraphService {
+        +build_graph(app_state: AppState): Result<GraphData>
+        +calculate_layout(gpu_compute: GPUCompute, graph: GraphData, params: SimulationParams): Result<void>
+        +initialize_random_positions(graph: GraphData)
+    }
+
+    class EnhancedNodeManager {
+        +scene: Scene
+        +settings: Settings
+        +nodeMeshes: Map<string, Mesh>
+        +updateNodes(nodes: Node[])
+        +updateNodePositions(nodes: NodeData[])
+        +handleSettingsUpdate(settings: Settings)
+        +dispose()
+    }
+
+    class SpeechService {
+        +websocketManager: WebSocketManager
+        +settings: Settings
+        +start(receiver: Receiver<SpeechCommand>)
+        +initialize(): Result<void>
+        +send_message(message: string): Result<void>
+        +close(): Result<void>
+        +set_tts_provider(use_openai: boolean): Result<void>
+    }
+
+    class NostrService {
+        +settings: Settings
+        +validate_session(pubkey: str, token: str): bool
+        +get_user(pubkey: str): Option<NostrUser>
+        +update_user_api_keys(pubkey: str, api_keys: ApiKeys): Result<NostrUser>
+    }
+
+    App --> SceneManager
+    App --> WebsocketService
+    App --> EnhancedNodeManager
+    SceneManager --> WebXRVisualization
+    WebsocketService --> GraphDataManager
+    AppState --> GraphService
+    AppState --> NostrService
+    AppState --> SpeechService
+```
+
+### Sequence Diagram
+
+```mermaid
+sequenceDiagram
+    participant Client as Client (Browser)
+    participant Platform as PlatformManager
+    participant XR as XRSessionManager
+    participant Scene as SceneManager
+    participant Node as EnhancedNodeManager
+    participant Edge as EdgeManager
+    participant Hologram as HologramManager
+    participant Text as TextRenderer
+    participant WS as WebSocketService
+    participant Settings as SettingsStore
+    participant Server as Actix Server
+    participant AppState as AppState
+    participant FileH as FileHandler
+    participant GraphH as GraphHandler
+    participant WSH as WebSocketHandler
+    participant PerplexityH as PerplexityHandler
+    participant RagFlowH as RagFlowHandler
+    participant NostrH as NostrHandler
+    participant SettingsH as SettingsHandler
+    participant FileS as FileService
+    participant GraphS as GraphService
+    participant GPUS as GPUService
+    participant PerplexityS as PerplexityService
+    participant RagFlowS as RagFlowService
+    participant NostrS as NostrService
+    participant SpeechS as SpeechService
+    participant WSM as WebSocketManager
+    participant GitHub as GitHub API
+    participant Perplexity as Perplexity AI
+    participant RagFlow as RagFlow API
+    participant OpenAI as OpenAI API
+    participant Nostr as Nostr API
+
+    %% Server initialization and AppState setup
+    activate Server
+    Server->>Server: Load settings.yaml & env vars (config.rs)
+    alt Settings Load Error
+        Server-->>Client: Error Response (500)
+    else Settings Loaded Successfully
+        Server->>AppState: new() (app_state.rs)
+        activate AppState
+            AppState->>GPUS: initialize_gpu_compute()
+            activate GPUS
+                GPUS->>GPUS: setup_compute_pipeline()
+                GPUS->>GPUS: load_wgsl_shaders()
+                GPUS-->>AppState: GPU Compute Instance
+            deactivate GPUS
+            
+            AppState->>WSM: initialize()
+            activate WSM
+                WSM->>WSM: setup_binary_protocol()
+                WSM-->>AppState: WebSocket Manager
+            deactivate WSM
+            
+            AppState->>SpeechS: start()
+            activate SpeechS
+                SpeechS->>SpeechS: initialize_tts()
+                SpeechS-->>AppState: Speech Service
+            deactivate SpeechS
+            
+            AppState->>NostrS: initialize()
+            activate NostrS
+                NostrS->>NostrS: setup_nostr_client()
+                NostrS-->>AppState: Nostr Service
+            deactivate NostrS
+            
+            AppState-->>Server: Initialized AppState
+        deactivate AppState
+
+        Server->>FileS: fetch_and_process_files()
+        activate FileS
+            FileS->>GitHub: fetch_files()
+            activate GitHub
+                GitHub-->>FileS: Files or Error
+            deactivate GitHub
+            
+            loop For Each File
+                FileS->>FileS: should_process_file()
+                alt File Needs Processing
+                    FileS->>PerplexityS: process_file()
+                    activate PerplexityS
+                        PerplexityS->>Perplexity: analyze_content()
+                        Perplexity-->>PerplexityS: Analysis Results
+                        PerplexityS-->>FileS: Processed Content
+                    deactivate PerplexityS
+                    FileS->>FileS: save_metadata()
+                end
+            end
+            FileS-->>Server: Processed Files
+        deactivate FileS
+
+        Server->>GraphS: build_graph()
+        activate GraphS
+            GraphS->>GraphS: create_nodes_and_edges()
+            GraphS->>GPUS: calculate_layout()
+            activate GPUS
+                GPUS->>GPUS: bind_gpu_buffers()
+                GPUS->>GPUS: dispatch_compute_shader()
+                GPUS->>GPUS: read_buffer_results()
+                GPUS-->>GraphS: Updated Positions
+            deactivate GPUS
+            GraphS-->>Server: Graph Data
+        deactivate GraphS
+    end
+
+    %% Client and Platform initialization
+    Client->>Platform: initialize()
+    activate Platform
+        Platform->>Platform: detect_capabilities()
+        Platform->>Settings: load_settings()
+        activate Settings
+            Settings->>Settings: validate_settings()
+            Settings-->>Platform: Settings Object
+        deactivate Settings
+        
+        Platform->>WS: connect()
+        activate WS
+            WS->>Server: ws_connect
+            Server->>WSH: handle_connection()
+            WSH->>WSM: register_client()
+            WSM-->>WS: connection_established
+            
+            WS->>WS: setup_binary_handlers()
+            WS->>WS: initialize_reconnection_logic()
+            
+            WSM-->>WS: initial_graph_data (Binary)
+            WS->>WS: decode_binary_message()
+        deactivate WS
+        
+        Platform->>XR: initialize()
+        activate XR
+            XR->>XR: check_xr_support()
+            XR->>Scene: create()
+            activate Scene
+                Scene->>Scene: setup_three_js()
+                Scene->>Scene: setup_render_pipeline()
+                Scene->>Node: initialize()
+                activate Node
+                    Node->>Node: create_geometries()
+                    Node->>Node: setup_materials()
+                deactivate Node
+                Scene->>Edge: initialize()
+                activate Edge
+                    Edge->>Edge: create_line_geometries()
+                    Edge->>Edge: setup_line_materials()
+                deactivate Edge
+                Scene->>Hologram: initialize()
+                activate Hologram
+                    Hologram->>Hologram: setup_hologram_shader()
+                    Hologram->>Hologram: create_hologram_geometry()
+                deactivate Hologram
+                Scene->>Text: initialize()
+                activate Text
+                    Text->>Text: load_fonts()
+                    Text->>Text: setup_text_renderer()
+                deactivate Text
+            deactivate Scene
+        deactivate XR
+    deactivate Platform
+
+    Note over Client, Nostr: User Interaction Flows
+
+    %% User drags a node
+    alt User Drags Node
+        Client->>Node: handle_node_drag()
+        Node->>WS: send_position_update()
+        WS->>Server: binary_position_update
+        Server->>GraphS: update_layout()
+        GraphS->>GPUS: recalculate_forces()
+        GPUS-->>Server: new_positions
+        Server->>WSM: broadcast()
+        WSM-->>WS: binary_update
+        WS->>Node: update_positions()
+        Node-->>Client: render_update
+    end
+
+    %% User asks a question
+    alt User Asks Question
+        Client->>RagFlowH: send_query()
+        RagFlowH->>RagFlowS: process_query()
+        activate RagFlowS
+            RagFlowS->>RagFlow: get_context()
+            RagFlow-->>RagFlowS: relevant_context
+            RagFlowS->>OpenAI: generate_response()
+            OpenAI-->>RagFlowS: ai_response
+            RagFlowS-->>Client: streaming_response
+        deactivate RagFlowS
+        alt Speech Enabled
+            Client->>SpeechS: synthesize_speech()
+            activate SpeechS
+                SpeechS->>OpenAI: text_to_speech()
+                OpenAI-->>SpeechS: audio_stream
+                SpeechS-->>Client: audio_data
+            deactivate SpeechS
+        end
+    end
+
+    %% User updates the graph
+    alt User Updates Graph
+        Client->>FileH: update_file()
+        FileH->>FileS: process_update()
+        FileS->>GitHub: create_pull_request()
+        GitHub-->>FileS: pr_created
+        FileS-->>Client: success_response
+    end
+
+    %% WebSocket reconnection flow
+    alt WebSocket Reconnection
+        WS->>WS: connection_lost()
+        loop Until Max Attempts
+            WS->>WS: attempt_reconnect()
+            WS->>Server: ws_connect
+            alt Connection Successful
+                Server-->>WS: connection_established
+                WSM-->>WS: resend_graph_data
+                WS->>Node: restore_state()
+            else Connection Failed
+                Note right of WS: Continue reconnect attempts
+            end
+        end
+    end
+
+    %% Settings update flow
+    alt Settings Update
+        Client->>SettingsH: update_settings()
+        SettingsH->>AppState: apply_settings()
+        AppState->>WSM: broadcast_settings()
+        WSM-->>WS: settings_update
+        WS->>Settings: update_settings()
+        Settings->>Platform: apply_platform_settings()
+        Platform->>Scene: update_rendering()
+        Scene->>Node: update_visuals()
+        Scene->>Edge: update_visuals()
+        Scene->>Hologram: update_effects()
+    end
+
+    %% Nostr authentication flow
+    alt Nostr Authentication
+        Client->>NostrH: authenticate()
+        NostrH->>NostrS: validate_session()
+        NostrS->>Nostr: verify_credentials()
+        Nostr-->>NostrS: auth_result
+        NostrS-->>Client: session_token
+    end
+
+    deactivate Server
+```
+
+### AR Features Implementation Status
+
+#### Hand Tracking (Meta Quest 3)
+- Implementation in `client/xr/xrSessionManager.ts`
+- Currently addressing:
+  - Performance optimization for AR passthrough mode
+  - Virtual desktop cleanup during AR activation
+  - Type compatibility between `XRHand` and custom `XRHandWithHaptics`
+  - Joint position extraction methods
+
+##### Current Challenges
+- Type mismatches between standard `XRHand` and custom `XRHandWithHaptics`
+- Joint position extraction from `XRJointSpace`
+- Performance optimization in AR passthrough mode
+
+##### Next Steps
+- Implement adapter for `XRHand` to `XRHandWithHaptics` conversion
+- Refactor VisualizationController for native XRHand compatibility
+- Optimize AR mode transitions
+- Enhance Meta Quest 3 performance
+
+## License
+
+This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.
+
+## Acknowledgements
+
+- Prof Rob Aspin: For inspiring the project's vision and providing valuable resources.
+- OpenAI: For their advanced AI models powering the question-answering features.
+- Perplexity AI and RAGFlow: For their AI services enhancing content processing and interaction.
+- Three.js: For the robust 3D rendering capabilities utilized in the frontend.
+- Actix: For the high-performance web framework powering the backend server.
+
+### Authentication and Settings Inheritance
+
+#### Unauthenticated Users
+- Use browser's localStorage for settings persistence
+- Settings are stored locally and not synced
+- Default to basic settings visibility
+- Limited to local visualization features
+
+#### Authenticated Users (Nostr)
+- Inherit settings from server's settings.yaml
+- Settings are synced across all authenticated users
+- Access to advanced settings based on role
+
+#### Power Users
+- Full access to all settings
+- Can modify server's settings.yaml
+- Access to advanced API features:
+  - Perplexity API for AI assistance
+  - RagFlow for document processing
+  - GitHub integration for PR management
+  - OpenAI voice synthesis
+- Settings modifications are persisted to settings.yaml
+
+### Settings Inheritance Flow
+
+```mermaid
+graph TD
+    A[Start] --> B{Authenticated?}
+    B -->|No| C[Load Local Settings]
+    B -->|Yes| D[Load Server Settings]
+    D --> E{Is Power User?}
+    E -->|No| F[Apply Read-Only]
+    E -->|Yes| G[Enable Full Access]
+```
+
+### Settings Sync Flow
+
+```mermaid
+graph TD
+    A[Setting Changed] --> B{Authenticated?}
+    B -->|No| C[Save Locally]
+    B -->|Yes| D{Is Power User?}
+    D -->|No| E[Preview Only]
+    D -->|Yes| F[Update Server]
+    F --> G[Sync to All Users]
+```
+
+### Modular Control Panel Architecture
+
+The control panel is built with a modular architecture that supports:
+- Detachable sections
+- Real-time preview integration
+- Drag and drop functionality
+- Dynamic tooltips
+- Performance optimizations
+
+#### Component Structure
+
+```typescript
+interface ModularControlPanelProps {
+  sections: ControlSection[];
+  layout: LayoutConfig;
+  onLayoutChange: (newLayout: LayoutConfig) => void;
+}
+
+interface ControlSection {
+  id: string;
+  title: string;
+  settings: Setting[];
+  isDetached: boolean;
+  position?: { x: number, y: number };
+  size?: { width: number, height: number };
+}
+
+interface Setting {
+  id: string;
+  type: 'slider' | 'toggle' | 'color' | 'select';
+  value: any;
+  metadata: SettingMetadata;
+}
+```
+
+#### Layout Management
+
+```typescript
+interface LayoutConfig {
+  sections: {
+    [sectionId: string]: {
+      position: { x: number, y: number };
+      size: { width: number, height: number };
+      isDetached: boolean;
+      isCollapsed: boolean;
+    };
+  };
+  userPreferences: {
+    showAdvanced: boolean;
+    activeFilters: string[];
+    customOrder: string[];
+  };
+}
+```
+
+#### Performance Optimizations
+
+- ResizeObserver for efficient size tracking
+- Virtual scrolling for large setting lists
+- Debounced real-time preview updates
+- CSS transforms for smooth animations
+- Lazy loading for visual aids
+- Efficient memory management with WeakMap
+- Real-time preview integration with ~60fps target
+
+## Docker Configuration
+
+
+### docker-compose.yml
+
+name: logseq-xr
+
+services:
+  webxr:
+    build: .
+    image: logseq-xr-image:latest
+    container_name: logseq-xr-webxr
+    read_only: false
+    networks:
+      ragflow:
+        aliases:
+          - logseq-xr-webxr
+          - webxr-client
+    deploy:
+      resources:
+        limits:
+          cpus: '16.0'
+          memory: 64G
+        reservations:
+          devices:
+            - driver: nvidia
+              device_ids: ['0']  # Explicitly use GPU 0
+              capabilities: [gpu]
+    expose:
+      - "4000"
+    ports:
+      - "4000:4000"  # Map container nginx port 4000 to host port 4000
+    environment:
+      - RUST_LOG=info
+      - RUST_BACKTRACE=1
+      - BIND_ADDRESS=0.0.0.0
+      - PORT=3001  # Explicitly set Rust backend to use port 3001
+      - NGINX_PORT=4000  # Set nginx to use port 4000
+      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_GPU_UUID:-0}  # Use GPU UUID from launch script
+      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
+      - NODE_ENV=production
+      - GIT_HASH=${GIT_HASH:-development}  # Pass GIT_HASH from build environment
+    env_file:
+      - .env
+    volumes:
+      - ./data/markdown:/app/data/markdown
+      - ./data/metadata:/app/data/metadata  # Added metadata volume mount
+      - type: bind
+        source: ${PWD}/settings.yaml
+        target: /app/settings.yaml
+        read_only: false
+      - type: tmpfs
+        target: /tmp
+        tmpfs:
+          size: 4G
+    user: "${UID:-1000}:${GID:-1000}"  # Use host user's UID/GID or default to 1000
+    restart: unless-stopped
+    stop_grace_period: 30s
+    init: true
+    logging:
+      driver: "json-file"
+      options:
+        max-size: "1g"
+        max-file: "5"
+    healthcheck:
+      test: ["CMD-SHELL", "curl -f http://localhost:4000/ || exit 1; websocat ws://localhost:4000/wss <<< '{\"type\":\"ping\"}' || exit 1"]
+      interval: 10s
+      timeout: 5s
+      retries: 5
+      start_period: 10s
+
+  cloudflared:
+    image: cloudflare/cloudflared:latest
+    container_name: cloudflared-tunnel
+    networks:
+      ragflow:
+        aliases:
+          - cloudflared
+    volumes:
+      - ./config.yml:/etc/cloudflared/config.yml:ro
+    command: tunnel --loglevel info --config /etc/cloudflared/config.yml run
+    restart: unless-stopped
+    stop_grace_period: 10s
+    init: true
+    depends_on: []  # Remove dependency on webxr
+    environment:
+      - TUNNEL_TOKEN=$TUNNEL_TOKEN
+      - TUNNEL_METRICS=0.0.0.0:2000
+      - TUNNEL_DNS_UPSTREAM=https://1.1.1.1/dns-query,https://1.0.0.1/dns-query
+      - TUNNEL_TRANSPORT_PROTOCOL=http2
+      - TUNNEL_ORIGIN_SERVER=http://logseq-xr-webxr:4000  # Use container name to ensure proper DNS resolution
+      - TUNNEL_WEBSOCKET_ENABLE=true
+      - TUNNEL_WEBSOCKET_HEARTBEAT_INTERVAL=30s  # Match our heartbeat interval
+      - TUNNEL_WEBSOCKET_TIMEOUT=3600s  # Match our max timeout
+      - TUNNEL_RETRIES=5
+      - TUNNEL_GRACE_PERIOD=30s
+    env_file:
+      - .env
+networks:
+  ragflow:
+    external: true
+    name: docker_ragflow  # RAGFlow's network name from docker network ls
+### Dockerfile
+
+# Stage 1: Frontend Build
+FROM node:20-slim AS frontend-builder
+
+WORKDIR /app
+
+# Install pnpm
+RUN npm install -g pnpm@9.14.2
+
+# Copy package files and configuration
+COPY package.json pnpm-lock.yaml ./
+COPY tsconfig.json tsconfig.node.json vite.config.ts ./
+COPY client ./client
+
+# Create data/public directory for build output
+RUN mkdir -p data/public
+
+# Install dependencies and build
+RUN pnpm install --frozen-lockfile && \
+    pnpm run build
+
+# Stage 2: Rust Dependencies Cache
+FROM nvidia/cuda:12.2.0-devel-ubuntu22.04 AS rust-deps-builder
+
+# Install build dependencies
+RUN apt-get update && apt-get install -y --no-install-recommends \
+    build-essential \
+    curl \
+    libssl-dev \
+    pkg-config \
+    libegl1-mesa-dev \
+    libasound2-dev \
+    ca-certificates \
+    jq \
+    && rm -rf /var/lib/apt/lists/*
+
+# Install Rust with better error handling
+RUN curl --retry 5 --retry-delay 2 --retry-connrefused https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain 1.82.0
+ENV PATH="/root/.cargo/bin:${PATH}"
+
+# Configure cargo for better network resilience
+RUN mkdir -p ~/.cargo && \
+    echo '[source.crates-io]' >> ~/.cargo/config.toml && \
+    echo 'registry = "https://github.com/rust-lang/crates.io-index"' >> ~/.cargo/config.toml && \
+    echo 'replace-with = "ustc"' >> ~/.cargo/config.toml && \
+    echo '[source.ustc]' >> ~/.cargo/config.toml && \
+    echo 'registry = "sparse+https://mirrors.ustc.edu.cn/crates.io-index/"' >> ~/.cargo/config.toml && \
+    echo '[net]' >> ~/.cargo/config.toml && \
+    echo 'retry = 10' >> ~/.cargo/config.toml && \
+    echo 'timeout = 120' >> ~/.cargo/config.toml && \
+    echo 'git-fetch-with-cli = true' >> ~/.cargo/config.toml
+
+WORKDIR /usr/src/app
+
+# Copy Cargo files first for better layer caching
+COPY Cargo.toml Cargo.lock ./
+
+# Install git and set GIT_HASH
+RUN apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/*
+
+# Create dummy src directory and build dependencies
+RUN mkdir src && \
+    echo "fn main() {}" > src/main.rs && \
+    GIT_HASH=$(git rev-parse HEAD || echo "development") \
+    CARGO_NET_GIT_FETCH_WITH_CLI=true \
+    CARGO_HTTP_TIMEOUT=120 \
+    CARGO_HTTP_CHECK_REVOKE=false \
+    cargo build --release --jobs $(nproc) || \
+    (sleep 2 && GIT_HASH=$(git rev-parse HEAD || echo "development") CARGO_HTTP_MULTIPLEXING=false cargo build --release --jobs $(nproc)) || \
+    (sleep 5 && GIT_HASH=$(git rev-parse HEAD || echo "development") CARGO_HTTP_MULTIPLEXING=false cargo build --release --jobs 1)
+
+# Now copy the real source code and build
+COPY src ./src
+RUN GIT_HASH=$(git rev-parse HEAD || echo "development") \
+    cargo build --release --jobs $(nproc) || \
+    (sleep 2 && GIT_HASH=$(git rev-parse HEAD || echo "development") cargo build --release --jobs $(nproc)) || \
+    (sleep 5 && GIT_HASH=$(git rev-parse HEAD || echo "development") cargo build --release --jobs 1)
+
+# Stage 3: Final Runtime Image
+FROM nvidia/cuda:12.2.0-devel-ubuntu22.04
+
+ENV DEBIAN_FRONTEND=noninteractive \
+    PYTHONUNBUFFERED=1 \
+    PATH="/app/venv/bin:${PATH}" \
+    NVIDIA_DRIVER_CAPABILITIES=all \
+    RUST_LOG=info \
+    RUST_BACKTRACE=0 \
+    PORT=4000 \
+    BIND_ADDRESS=0.0.0.0 \
+    NODE_ENV=production \
+    DOMAIN=localhost
+
+# Install runtime dependencies
+RUN apt-get update && apt-get install -y --no-install-recommends \
+    curl \
+    libssl3 \
+    nginx \
+    libegl1-mesa \
+    libasound2 \
+    ca-certificates \
+    mesa-utils \
+    libgl1-mesa-dri \
+    libgl1-mesa-glx \
+    netcat-openbsd \
+    gettext-base \
+    net-tools \
+    iproute2 \
+    procps \
+    lsof \
+    jq \
+    wget \
+    && wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq \
+    && chmod +x /usr/bin/yq \
+    && wget https://github.com/vi/websocat/releases/latest/download/websocat.x86_64-unknown-linux-musl -O /usr/bin/websocat \
+    && chmod +x /usr/bin/websocat \
+    && rm -rf /var/lib/apt/lists/* \
+    && rm -rf /usr/share/doc/* \
+    && rm -rf /usr/share/man/*
+
+# Create a non-root user for running the application
+RUN groupadd -g 1000 webxr && \
+    useradd -u 1000 -g webxr -d /app webxr
+
+# Set up nginx configuration
+COPY nginx.conf /etc/nginx/nginx.conf.template
+RUN envsubst '${DOMAIN}' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && \
+    rm /etc/nginx/nginx.conf.template && \
+    chown -R webxr:webxr /etc/nginx/nginx.conf && \
+    chmod 644 /etc/nginx/nginx.conf
+
+# Set up nginx directories and permissions
+RUN mkdir -p /var/lib/nginx/client_temp \
+             /var/lib/nginx/proxy_temp \
+             /var/lib/nginx/fastcgi_temp \
+             /var/lib/nginx/uwsgi_temp \
+             /var/lib/nginx/scgi_temp \
+             /var/log/nginx \
+             /var/run/nginx \
+             /var/cache/nginx && \
+    chown -R webxr:webxr /var/lib/nginx \
+                         /var/log/nginx \
+                         /var/run/nginx \
+                         /var/cache/nginx \
+                         /etc/nginx && \
+    chmod -R 755 /var/lib/nginx \
+                 /var/log/nginx \
+                 /var/run/nginx \
+                 /var/cache/nginx \
+                 /etc/nginx && \
+    touch /var/log/nginx/error.log \
+          /var/log/nginx/access.log \
+          /var/run/nginx/nginx.pid && \
+    chmod 666 /var/log/nginx/*.log \
+              /var/run/nginx/nginx.pid
+
+# Set up directory structure and permissions
+WORKDIR /app
+
+# Create required directories with proper permissions
+RUN mkdir -p /app/data/public/dist \
+             /app/data/markdown \
+             /app/data/runtime \
+             /app/src/utils \
+             /app/data/piper \
+             /tmp/runtime && \
+    chown -R webxr:webxr /app /tmp/runtime && \
+    chmod -R 755 /app /tmp/runtime && \
+    # Ensure data/markdown is writable by webxr user
+    chmod 777 /app/data/markdown
+
+# Create necessary directories and set permissions
+RUN mkdir -p /app/data/markdown /app/data/metadata && \
+    chmod -R 777 /app/data
+
+# Copy built artifacts
+COPY --from=rust-deps-builder /usr/src/app/target/release/webxr /app/
+COPY src/utils/compute_forces.ptx /app/compute_forces.ptx
+COPY --from=frontend-builder /app/data/public/dist /app/data/public/dist
+
+# Copy start script
+COPY scripts/start.sh /app/start.sh
+
+# Set proper permissions for copied files
+RUN chown -R webxr:webxr /app && \
+    chmod 755 /app/start.sh && \
+    chmod -R g+w /app
+RUN touch /app/settings.yaml && \
+    chown webxr:webxr /app/settings.yaml && \
+    chmod 666 /app/settings.yaml
+
+# Switch to non-root user
+USER webxr
+
+# Add security labels
+LABEL org.opencontainers.image.source="https://github.com/yourusername/logseq-xr" \
+      org.opencontainers.image.description="LogseqXR WebXR Graph Visualization" \
+      org.opencontainers.image.licenses="MIT" \
+      security.capabilities="cap_net_bind_service" \
+      security.privileged="false" \
+      security.allow-privilege-escalation="false"
+
+# Expose port
+EXPOSE 4000
+
+# Start application
+ENTRYPOINT ["/app/start.sh"]
+
+### nginx.conf
+
+pid /var/run/nginx/nginx.pid;
+error_log /var/log/nginx/error.log debug;
+
+events {
+    worker_connections 1024;
+    multi_accept on;
+    use epoll;
+}
+
+http {
+    # Basic settings
+    include /etc/nginx/mime.types;
+    default_type application/octet-stream;
+    charset utf-8;
+
+    # Override TypeScript MIME type (overriding video/mp2t from mime.types)
+    types {
+        application/typescript ts;
+    }
+
+    # Logging
+    log_format debug_format '$remote_addr - $remote_user [$time_local] '
+                          '"$request" $status $body_bytes_sent '
+                          '"$http_referer" "$http_user_agent" '
+                          'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time"'
+                          ' ws_status="$upstream_http_upgrade"';  # Added WebSocket status logging
+
+    access_log /var/log/nginx/access.log debug_format;
+
+    # Optimization
+    sendfile on;
+    tcp_nopush on;
+    tcp_nodelay on;
+    keepalive_timeout 120;  # Increased to match cloudflared keepAliveTimeout
+    keepalive_requests 100;
+
+    # Gzip settings
+    gzip on;
+    gzip_disable "msie6";
+    gzip_vary on;
+    gzip_proxied any;
+    gzip_comp_level 6;
+    gzip_buffers 16 8k;
+    gzip_http_version 1.1;
+    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
+
+    # WebSocket configuration
+    map $http_upgrade $connection_upgrade {
+        default upgrade;
+        ''      close;
+    }
+
+    # Upstream backend definition for the Rust server
+    upstream backend {
+        server 127.0.0.1:3001;  # Use localhost since both services are in same container
+        keepalive 32;  # Keep connections alive
+    }
+
+    # Main server configuration
+    server {
+        listen 4000 default_server;  # Listen on port 4000 for external connections
+        server_name _;  # Accept any server name
+        root /app/data/public/dist;  # Set root to built files directory
+
+        # Security headers
+        add_header X-Content-Type-Options nosniff;
+        add_header X-Frame-Options SAMEORIGIN;
+        add_header X-XSS-Protection "1; mode=block";
+        add_header Referrer-Policy "same-origin" always;
+        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline' 'unsafe-eval'; connect-src 'self' ws: wss: http: https: *.visionflow.info; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://getalby.com; frame-src 'self' https://getalby.com" always;
+        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
+
+        # WebSocket endpoint
+        location /wss {
+            proxy_pass http://backend;
+            proxy_http_version 1.1;
+            proxy_set_header Upgrade $http_upgrade;
+            proxy_set_header Connection $connection_upgrade;
+            proxy_set_header Host $host;
+            
+            # Pass through Cloudflare headers
+            proxy_set_header CF-Connecting-IP $http_cf_connecting_ip;
+            proxy_set_header CF-Ray $http_cf_ray;
+            proxy_set_header CF-Visitor $http_cf_visitor;
+            
+            # Standard proxy headers
+            proxy_set_header X-Real-IP $remote_addr;
+            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
+            proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
+            
+            # WebSocket timeouts
+            proxy_read_timeout 3600s;
+            proxy_send_timeout 3600s;
+            proxy_connect_timeout 75s;
+            proxy_buffering off;
+            proxy_cache off;
+            
+            # Debug logging
+            access_log /var/log/nginx/websocket.log debug_format;
+            error_log /var/log/nginx/websocket-error.log debug;
+        }
+
+        # API endpoints
+        location /api {
+            proxy_pass http://backend;
+            proxy_http_version 1.1;
+            proxy_set_header Host $host;
+            proxy_set_header X-Real-IP $remote_addr;
+            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
+            proxy_set_header X-Forwarded-Proto $scheme;
+            
+            # API specific settings
+            proxy_read_timeout 120s;  # Increased for larger graph data
+            proxy_send_timeout 120s;  # Increased for larger graph data
+            proxy_connect_timeout 60s;
+            proxy_buffering on;       # Enable buffering for API responses
+            proxy_buffer_size 256k;   # Increased for larger responses
+            proxy_buffers 8 256k;     # Increased number of buffers
+            proxy_busy_buffers_size 512k;  # Increased for larger responses
+            proxy_max_temp_file_size 2048m;  # Allow larger temporary files
+            add_header Cache-Control "no-store" always;  # Prevent caching of dynamic data
+        }
+
+        # Static files
+        location / {
+            try_files $uri $uri/ /index.html =404;
+            expires 1h;
+            add_header Cache-Control "public, no-transform";
+            error_page 404 = @backend;  # Fallback to backend if file not found
+        }
+
+        # Static files with proper MIME types
+        location /assets/ {
+            expires 7d;
+            add_header Cache-Control "public, no-transform" always;
+            try_files $uri =404;
+            access_log off;
+        }
+
+        # Fallback location for static files
+        location @backend {
+            proxy_pass http://backend;
+            proxy_http_version 1.1;
+            proxy_set_header Host $host;
+            proxy_set_header X-Real-IP $remote_addr;
+            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
+            proxy_set_header X-Forwarded-Proto $scheme;
+        }
+
+        # Error pages
+        error_page 404 /404.html;
+        error_page 500 502 503 504 /50x.html;
+        location = /50x.html {
+            root /usr/share/nginx/html;
+        }
+    }
+}
+
+### settings.yaml
+
+visualization:
+  nodes:
+    base_color: '#df90c2'
+    metalness: 0.2
+    opacity: 1.0
+    roughness: 0.7
+    size_range:
+    - 200.0
+    - 700.0
+    quality: medium
+    enable_instancing: true
+    enable_hologram: true
+    enable_metadata_shape: false
+    enable_metadata_visualization: false
+  edges:
+    arrow_size: 2.0
+    base_width: 2.0
+    color: '#0c2140'
+    enable_arrows: true
+    opacity: 0.5
+    width_range:
+    - 2.0
+    - 3.0
+    quality: high
+  physics:
+    attraction_strength: 0.02
+    bounds_size: 0.33
+    collision_radius: 1.0
+    damping: 1.0
+    enable_bounds: true
+    enabled: true
+    iterations: 100
+    max_velocity: 0.4
+    repulsion_strength: 700.0
+    spring_strength: 0.02
+  rendering:
+    ambient_light_intensity: 0.41
+    background_color: '#1a1a2e'
+    directional_light_intensity: 0.7
+    enable_ambient_occlusion: true
+    enable_antialiasing: true
+    enable_shadows: false
+    environment_intensity: 0.7
+  animations:
+    enable_motion_blur: true
+    enable_node_animations: true
+    motion_blur_strength: 0.2
+    selection_wave_enabled: false
+    pulse_enabled: false
+    pulse_speed: 0.8
+    pulse_strength: 0.6
+    wave_speed: 0.5
+  labels:
+    desktop_font_size: 10
+    enable_labels: true
+    text_color: '#000000'
+    text_outline_color: '#ffffff'
+    text_outline_width: 0.1
+    text_resolution: 16
+    text_padding: 2
+    billboard_mode: camera
+  bloom:
+    edge_bloom_strength: 0.4
+    enabled: true
+    environment_bloom_strength: 2.0
+    node_bloom_strength: 3.0
+    radius: 2.0
+    strength: 3.0
+  hologram:
+    ring_count: 2
+    ring_color: '#c2a200'
+    ring_opacity: 0.001
+    sphere_sizes:
+    - 40.0
+    - 80.0
+    ring_rotation_speed: 10.0
+    enable_buckminster: false
+    buckminster_size: 0.0
+    buckminster_opacity: 0.0
+    enable_geodesic: false
+    geodesic_size: 0.0
+    geodesic_opacity: 0.0
+    enable_triangle_sphere: true
+    triangle_sphere_size: 80.0
+    triangle_sphere_opacity: 0.15
+    global_rotation_speed: 0.03
+system:
+  network:
+    bind_address: 0.0.0.0
+    domain: visionflow.info
+    enable_http2: false
+    enable_rate_limiting: true
+    enable_tls: false
+    max_request_size: 10485760
+    min_tls_version: ''
+    port: 3001
+    rate_limit_requests: 100
+    rate_limit_window: 60
+    tunnel_id: dummy
+    api_client_timeout: 30
+    enable_metrics: true
+    max_concurrent_requests: 5
+    max_retries: 3
+    metrics_port: 9090
+    retry_delay: 5
+  websocket:
+    binary_chunk_size: 2048
+    binary_update_rate: 60
+    binary_message_version: 1
+    compression_enabled: false
+    compression_threshold: 512
+    heartbeat_interval: 10000
+    heartbeat_timeout: 30000
+    max_connections: 1000
+    max_message_size: 100485760
+    reconnect_attempts: 3
+    reconnect_delay: 3000
+    update_rate: 90
+  security:
+    allowed_origins:
+    - https://www.visionflow.info
+    - https://visionflow.info
+    audit_log_path: /app/logs/audit.log
+    cookie_httponly: true
+    cookie_samesite: Strict
+    cookie_secure: true
+    csrf_token_timeout: 3600
+    enable_audit_logging: true
+    enable_request_validation: true
+    session_timeout: 3600
+  debug:
+    enabled: false
+    enable_data_debug: false
+    enable_websocket_debug: false
+    log_binary_headers: false
+    log_full_json: false
+    log_level: warn
+    log_format: json
+xr:
+  mode: inline
+  room_scale: 0.6
+  space_type: local-floor
+  quality: medium
+  enable_hand_tracking: true
+  hand_mesh_enabled: true
+  hand_mesh_color: '#4287f5'
+  hand_mesh_opacity: 0.3
+  hand_point_size: 3.0
+  hand_ray_enabled: true
+  hand_ray_color: '#4287f5'
+  hand_ray_width: 1.5
+  gesture_smoothing: 0.7
+  enable_haptics: true
+  haptic_intensity: 0.3
+  drag_threshold: 0.08
+  pinch_threshold: 0.3
+  rotation_threshold: 0.08
+  interaction_radius: 0.15
+  movement_speed: 0.08
+  dead_zone: 0.12
+  movement_axes:
+    horizontal: 2
+    vertical: 3
+  enable_light_estimation: false
+  enable_plane_detection: false
+  enable_scene_understanding: false
+  plane_color: '#4287f5'
+  plane_opacity: 0.2
+  plane_detection_distance: 3.0
+  show_plane_overlay: false
+  snap_to_floor: false
+  enable_passthrough_portal: false
+  passthrough_opacity: 0.8
+  passthrough_brightness: 1.1
+  passthrough_contrast: 1.2
+  portal_size: 2.5
+  portal_edge_color: '#4287f5'
+  portal_edge_width: 0.5
+ragflow:
+  api_key: ''
+  api_base_url: ''
+  timeout: 30
+  max_retries: 3
+  chat_id: ''
+perplexity:
+  api_key: ''
+  model: llama-3.1-sonar-small-128k-online
+  api_url: ''
+  max_tokens: 4096
+  temperature: 0.5
+  top_p: 0.9
+  presence_penalty: 0.0
+  frequency_penalty: 0.0
+  timeout: 30
+  rate_limit: 100
+openai:
+  api_key: ''
+  base_url: ''
+  timeout: 30
+  rate_limit: 100
+
+### .dockerignore
+
+# Git
+.git
+.gitignore
+.pmpm-store
+
+# Rust
+target/
+
+# Node.js
+node_modules/
+npm-debug.log
+
+# IDEs and editors
+.vscode/
+.idea/
+*.swp
+*.swo
+
+# OS generated files
+.DS_Store
+Thumbs.db
+
+# Test files
+tests/
+
+# Environment variables
+.env
+
+# Cloudflared
+config.yml
+
+## Configuration Files
+
+
+### Cargo.toml
+
+[package]
+name = "webxr"
+version = "0.1.0"
+edition = "2021"
+description = "A WebXR graph visualization server with GPU-accelerated physics"
+authors = ["Your Name <your.email@example.com>"]
+
+[dependencies]
+# Web framework and WebSocket
+actix-web = { version = "=4.5.1", features = ["compress-gzip"] }
+actix-cors = "=0.7.0"
+actix-files = "=0.6.5"
+actix = "=0.13.1"
+actix-web-actors = "=4.3.0"
+tungstenite = "0.21"
+tokio-tungstenite = { version = "0.21" }
+
+# Async runtime
+tokio = { version = "1.43", features = ["full"] }
+futures = "0.3"
+async-trait = "0.1"
+
+# Serialization
+serde = { version = "1.0", features = ["derive"] }
+serde_json = "1.0"
+serde_yaml = "0.9"
+
+# Configuration
+config = { version = "0.13", features = ["toml"] }
+dotenvy = "0.15"
+toml = "0.8"
+
+# Logging
+log = "0.4"
+simplelog = "0.12"
+
+# Error handling
+thiserror = "1.0"
+anyhow = "1.0"
+
+# GPU/Compute
+wgpu = { version = "0.17", features = ["spirv", "webgl"] }
+bytemuck = { version = "1.21", features = ["derive"] }
+pollster = "0.3"
+naga = { version = "0.13", features = ["wgsl-in", "spv-out", "wgsl-out"] }
+cudarc = { version = "0.10", features = ["driver"] }
+
+# HTTP client and API
+reqwest = { version = "0.11", features = ["json", "stream"] }
+async-openai = "0.14"
+backoff = { version = "0.4", features = ["tokio"] }
+nostr-sdk = "0.25"
+
+# Utilities
+uuid = { version = "1.12", features = ["v4", "serde"] }
+chrono = { version = "0.4", features = ["serde"] }
+base64 = "0.21"
+rand = "0.8"
+regex = "1.11"
+lazy_static = "1.5"
+sha1 = "0.10"
+url = "2.5"
+flate2 = "1.0"
+byteorder = "1.5"
+urlencoding = "2.1"
+
+# Math/Linear Algebra (needed for GPU compute)
+nalgebra = "0.32"
+
+# WebGL (minimal features needed for GPU compute visualization)
+web-sys = { version = "0.3", features = [
+    "WebGl2RenderingContext",
+    "WebGlBuffer",
+    "WebGlProgram",
+    "WebGlShader",
+    "WebGlUniformLocation",
+    "Window"
+]}
+
+# Added from the code block
+glam = "0.24"
+
+[dev-dependencies]
+tokio-test = "0.4"
+mockall = "0.11"
+pretty_assertions = "1.4"
+
+[features]
+default = ["gpu"]
+gpu = ["cudarc/driver"]  # Enable GPU support with CUDA driver
+cpu = []  # CPU-only mode
+
+[profile.release]
+opt-level = 3
+lto = true
+codegen-units = 1
+panic = "abort"
+strip = true
+
+[profile.dev]
+opt-level = 1
+
+[package.metadata.rust-version]
+min = "1.70.0"
+
+[package.metadata.docs.rs]
+all-features = true
+rustdoc-args = ["--cfg", "docsrs"]
+
+### package.json - MISSING
+
+
+### vite.config.ts
+
+import { defineConfig } from 'vite';
+import { resolve } from 'path';
+
+// https://vitejs.dev/config/
+export default defineConfig(({ mode, command }) => {
+  const isProd = mode === 'production';
+  const isQuest = process.env.npm_config_platform === 'quest';
+
+  return {
+    root: 'client',
+    base: './',
+    
+    build: {
+      outDir: resolve(__dirname, 'data/public/dist'),
+      emptyOutDir: true,
+      chunkSizeWarningLimit: 600,
+      sourcemap: !isProd,
+      minify: isProd ? 'terser' : false,
+      target: 'esnext',
+      terserOptions: {
+        compress: {
+          passes: 2,
+          pure_funcs: ['console.log', 'console.info', 'console.debug'],
+          drop_console: isProd,
+          drop_debugger: isProd,
+          unsafe_math: true,
+          unsafe_methods: true,
+          unsafe_proto: true,
+          keep_infinity: true,
+          ecma: 2020,
+          module: true
+        },
+        mangle: isProd
+      },
+      rollupOptions: {
+        input: {
+          main: resolve(__dirname, 'client/index.html')
+        },
+        output: {
+          assetFileNames: (assetInfo) => {
+            if (!assetInfo.name) return 'assets/[name][extname]';
+            
+            if (/\.(woff2?|eot|ttf|otf)$/i.test(assetInfo.name)) {
+              return `assets/fonts/[name][extname]`;
+            }
+            if (/\.(css)$/i.test(assetInfo.name)) {
+              return `assets/css/[name][extname]`;
+            }
+            if (/\.(png|jpe?g|gif|svg|ico)$/i.test(assetInfo.name)) {
+              return `assets/images/[name][extname]`;
+            }
+            return `assets/[name][extname]`;
+          },
+          chunkFileNames: 'assets/js/[name]-[hash].js',
+          entryFileNames: 'assets/js/[name]-[hash].js',
+          manualChunks: {
+            three: ['three'],
+            'three-extras': [
+              'three/examples/jsm/controls/OrbitControls',
+              'three/examples/jsm/loaders/GLTFLoader'
+            ],
+            visualization: ['./client/visualization/HologramManager.ts', './client/rendering/node/geometry/NodeGeometryManager.ts'],
+            core: ['./client/core/types.ts', './client/core/constants.ts', './client/core/utils.ts']
+          }
+        }
+      }
+    },
+
+    resolve: {
+      alias: {
+        '@': resolve(__dirname, './client')
+      }
+    },
+
+    server: {
+      port: 3001,
+      host: true,
+      proxy: {
+        '/wss': {  // Updated from /ws to /wss to match nginx
+          target: 'ws://localhost:4000',
+          ws: true
+        },
+        '/api': {
+          target: 'http://localhost:4000',
+          changeOrigin: true
+        }
+      }
+    },
+
+    optimizeDeps: {
+      include: [
+        'three',
+        'three/examples/jsm/controls/OrbitControls',
+        'three/examples/jsm/loaders/GLTFLoader'
+      ],
+      exclude: []
+    },
+
+    define: {
+      __QUEST__: isQuest,
+      __DEV__: !isProd
+    }
+  };
+});
+
+### .env.template - MISSING
+
+
+### tsconfig.json
+
+{
+  "compilerOptions": {
+    "target": "ES2020",
+    "useDefineForClassFields": true,
+    "module": "ESNext",
+    "lib": [
+      "ES2020",
+      "DOM",
+      "DOM.Iterable",
+      "WebWorker",
+      "WebWorker.ImportScripts",
+      "Webworker.Iterable"
+    ],
+    "skipLibCheck": true,
+    "moduleResolution": "bundler",
+    "allowImportingTsExtensions": true,
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "noEmit": true,
+    "strict": true,
+    "noUnusedLocals": true,
+    "noUnusedParameters": true,
+    "noFallthroughCasesInSwitch": true,
+    "noImplicitAny": true,
+    "noImplicitThis": true,
+    "noImplicitReturns": true,
+    "strictNullChecks": true,
+    "strictFunctionTypes": true,
+    "strictBindCallApply": true,
+    "strictPropertyInitialization": true,
+    "allowJs": true,
+    "checkJs": true,
+    "esModuleInterop": true,
+    "forceConsistentCasingInFileNames": true,
+    "baseUrl": ".",
+    "paths": {
+      "@/*": ["client/*"]
+    },
+    "types": ["vite/client", "node", "three"]
+  },
+  "include": ["client/**/*.ts", "client/**/*.d.ts"],
+  "exclude": ["node_modules", "dist"]
+}
+
+### .eslintrc - MISSING
+
+
+### .gitignore
+
+# Logs
+logs
+*.log
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+pnpm-debug.log*
+lerna-debug.log*
+debug_log.txt
+
+# Dependencies
+node_modules
+.pnpm-store/
+.npm
+.yarn
+/featureclient/
+
+# Build output
+dist
+dist-ssr
+*.local
+build
+out
+/codebase.txt
+
+# Data directories
+data/markdown/
+data/runtime/
+data/public/dist/
+data/metadata/metadata.json
+
+# Documentation and assets
+docs/*.gif
+docs/*.png
+*.mp4
+*.webm
+*.mov
+*.wav
+*.mp3
+*.glb
+*.gltf
+*.hdr
+*.exr
+
+# Editor directories and files
+.vscode/*
+!.vscode/extensions.json
+!.vscode/settings.json
+.idea
+*.suo
+*.ntvs*
+*.njsproj
+*.sln
+*.sw?
+.DS_Store
+*.pem
+
+# Environment and configuration
+.env
+.env.*
+!.env.example
+!.env_template
+settings.local.toml
+certs
+
+# TypeScript
+*.tsbuildinfo
+auto-imports.d.ts
+components.d.ts
+
+# Testing and coverage
+coverage
+.nyc_output
+
+# Cache and temporary
+.cache
+.temp
+.eslintcache
+.stylelintcache
+*.tmp
+*.temp
+.tmp
+.temp
+
+# Rust/Cargo
+target/
+**/*.rs.bk
+Cargo.lock
+
+# Platform and deployment
+.vercel
+.netlify
+.cloudflare
+
+# Debug and profiling
+chrome-profiler-events*.json
+speed-measure-plugin*.json
+
+# Generated files
+generated
+optimized-output.gif
+
+# Docker
+.docker/
+docker-compose.override.yml
+
+# AI and tools
+.aider*
+.hypothesis/
+__pycache__/
+*.pyc
+
+# Project specific
+scripts/local/
+client/visualization/effects/custom/
+
+### tsconfig.json
+
+{
+  "compilerOptions": {
+    "target": "ES2020",
+    "useDefineForClassFields": true,
+    "module": "ESNext",
+    "lib": [
+      "es2020",
+      "dom",
+      "dom.iterable",
+      "webworker",
+      "webworker.importscripts",
+      "webworker.iterable"
+    ],
+    "skipLibCheck": true,
+    "moduleResolution": "bundler",
+    "allowImportingTsExtensions": true,
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "noEmit": true,
+    "strict": true,
+    "noUnusedLocals": true,
+    "noUnusedParameters": true,
+    "noFallthroughCasesInSwitch": true,
+    "noImplicitAny": true,
+    "noImplicitThis": true,
+    "noImplicitReturns": true,
+    "strictNullChecks": true,
+    "strictFunctionTypes": true,
+    "strictBindCallApply": true,
+    "strictPropertyInitialization": true,
+    "allowJs": true,
+    "checkJs": true,
+    "esModuleInterop": true,
+    "forceConsistentCasingInFileNames": true
+  },
+  "include": ["**/*.ts", "**/*.d.ts"],
+  "exclude": ["node_modules"]
+}
+
+### launch-docker.sh
+
+#!/usr/bin/env bash
+
+###############################################################################
+# SAFETY SETTINGS
+###############################################################################
+# -e  Exit on any command returning a non-zero status
+# -u  Treat unset variables as errors
+# -o pipefail  Return error if any part of a pipeline fails
+set -euo pipefail
+
+###############################################################################
+# DETECT SCRIPT & PROJECT ROOT
+###############################################################################
+SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
+PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"
+
+###############################################################################
+# COLOR CONSTANTS
+###############################################################################
+RED='\033[0;31m'
+GREEN='\033[0;32m'
+YELLOW='\033[1;33m'
+NC='\033[0m'  # No color
+
+###############################################################################
+# DATA PATHS
+###############################################################################
+MARKDOWN_DIR="$PROJECT_ROOT/data/markdown"
+METADATA_DIR="$PROJECT_ROOT/data/metadata"
+METADATA_FILE="$METADATA_DIR/metadata.json"
+
+###############################################################################
+# LOGGING & EXIT HANDLING
+###############################################################################
+log() {
+    # Logs a message with a timestamp
+    echo -e "[$(date "+%Y-%m-%d %H:%M:%S")] $1"
+}
+
+handle_exit() {
+    # Called when the script receives a signal (Ctrl+C, kill, etc.)
+    log "\n${YELLOW}Exiting to shell. Containers will continue running.${NC}"
+    exit 0
+}
+
+# Trap Ctrl+C, kill, etc. so we can exit gracefully
+trap handle_exit INT TERM
+
+###############################################################################
+# CHECKS & VALIDATIONS
+###############################################################################
+
+check_environment() {
+    # Validate required env vars and GitHub token
+    log "${YELLOW}Checking environment variables...${NC}"
+
+    local required_vars=(
+        "GITHUB_TOKEN"
+        "GITHUB_OWNER"
+        "GITHUB_REPO"
+        "GITHUB_BASE_PATH"
+    )
+
+    for var in "${required_vars[@]}"; do
+        if [ -z "${!var:-}" ]; then
+            log "${RED}Error: $var is not set in .env file${NC}"
+            return 1
+        fi
+    done
+
+    # Check GitHub token access
+    if ! curl -s -H "Authorization: token $GITHUB_TOKEN" \
+        "https://api.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO" >/dev/null; then
+        log "${RED}Error: Invalid GitHub token or repository access${NC}"
+        return 1
+    fi
+
+    log "${GREEN}Environment check passed${NC}"
+    return 0
+}
+
+check_pnpm_security() {
+    log "${YELLOW}Running pnpm security audit...${NC}"
+
+    # Run and capture the audit output
+    local audit_output
+    audit_output=$(pnpm audit 2>&1 || true)
+    local audit_exit=$?
+
+    # Extract critical vulnerabilities count
+    local critical_count
+    critical_count=$(echo "$audit_output" | grep -i "critical" \
+                                    | grep -o '[0-9]\+ vulnerabilities' \
+                                    | awk '{print $1}')
+    critical_count=${critical_count:-0}
+
+    # Display the audit output
+    echo "$audit_output"
+
+    if [ "$critical_count" -gt 0 ]; then
+        log "${RED}Found $critical_count critical vulnerabilities!${NC}"
+        return 1
+    elif [ "$audit_exit" -ne 0 ]; then
+        log "${YELLOW}Found non-critical vulnerabilities${NC}"
+    else
+        log "${GREEN}No critical vulnerabilities found${NC}"
+    fi
+
+    return 0
+}
+
+check_typescript() {
+    log "${YELLOW}Running TypeScript type check...${NC}"
+    if ! pnpm run type-check; then
+        log "${RED}TypeScript check failed${NC}"
+        log "${YELLOW}Containers will be left running for debugging${NC}"
+        return 1
+    fi
+    log "${GREEN}TypeScript check passed${NC}"
+    return 0
+}
+
+check_rust_security() {
+    log "${YELLOW}Running cargo audit...${NC}"
+
+    local audit_output
+    audit_output=$(cargo audit 2>&1 || true)
+    local audit_exit=$?
+
+    local critical_count
+    critical_count=$(echo "$audit_output" | grep -i "critical" | wc -l)
+    critical_count=${critical_count:-0}
+
+    echo "$audit_output"
+
+    if [ "$critical_count" -gt 0 ]; then
+        log "${RED}Found $critical_count critical vulnerabilities!${NC}"
+        return 1
+    elif [ "$audit_exit" -ne 0 ]; then
+        log "${YELLOW}Found non-critical vulnerabilities${NC}"
+    else
+        log "${GREEN}No critical vulnerabilities found${NC}"
+    fi
+
+    return 0
+}
+
+read_settings() {
+    # Read domain & port from settings.yaml using yq
+    local settings_file="$PROJECT_ROOT/settings.yaml"
+
+    if [ ! -f "$settings_file" ]; then
+        log "${RED}Error: settings.yaml not found${NC}"
+        return 1
+    fi
+
+    # Check if yq is installed
+    if ! command -v yq &>/dev/null; then
+        log "${RED}Error: yq is not installed. Please install yq to parse YAML files.${NC}"
+        return 1
+    fi
+
+    # Extract domain and port using yq
+    DOMAIN=$(yq eval '.system.network.domain' "$settings_file")
+    export DOMAIN
+
+    PORT=$(yq eval '.system.network.port' "$settings_file")
+    export PORT
+
+    if [ -z "${DOMAIN:-}" ] || [ -z "${PORT:-}" ] || [ "$DOMAIN" = "null" ] || [ "$PORT" = "null" ]; then
+        log "${RED}Error: DOMAIN or PORT not set in settings.yaml. Check your configuration.${NC}"
+        return 1
+    fi
+}
+
+check_system_resources() {
+    log "${YELLOW}Checking GPU availability...${NC}"
+    if ! command -v nvidia-smi &>/dev/null; then
+        log "${RED}Error: nvidia-smi not found${NC}"
+        return 1
+    fi
+
+    local gpu_info
+    gpu_info=$(nvidia-smi --query-gpu=memory.used,memory.total --format=csv,noheader)
+    echo "$gpu_info"
+
+    local has_enough_memory=false
+    while IFS=, read -r used total; do
+        used=$(echo "$used" | tr -d ' MiB')
+        total=$(echo "$total" | tr -d ' MiB')
+        local free=$((total - used))
+        if [ "$free" -gt 4096 ]; then
+            has_enough_memory=true
+            break
+        fi
+    done <<< "$gpu_info"
+
+    if [ "$has_enough_memory" = false ]; then
+        log "${RED}Error: No GPU with at least 4GB free memory${NC}"
+        return 1
+    fi
+}
+
+check_dependencies() {
+    # Check Docker
+    if ! command -v docker &>/dev/null; then
+        log "${RED}Error: Docker is not installed${NC}"
+        return 1
+    fi
+
+    # Try Docker Compose v2 first, fallback to v1
+    if docker compose version &>/dev/null; then
+        DOCKER_COMPOSE="docker compose"
+    elif docker-compose version &>/dev/null; then
+        DOCKER_COMPOSE="docker-compose"
+    else
+        log "${RED}Error: Docker Compose not found${NC}"
+        return 1
+    fi
+
+    # Check yq
+    if ! command -v yq &>/dev/null; then
+        log "${RED}Error: yq is not installed${NC}"
+        log "${YELLOW}Please install yq to parse YAML files:${NC}"
+        log "${YELLOW}On Ubuntu/Debian: sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq${NC}"
+        log "${YELLOW}On macOS: brew install yq${NC}"
+        log "${YELLOW}On other systems, visit: https://github.com/mikefarah/yq#install${NC}"
+        return 1
+    fi
+}
+
+verify_client_structure() {
+    log "${YELLOW}Verifying client directory structure...${NC}"
+
+    local required_files=(
+        "$PROJECT_ROOT/client/index.html"
+        "$PROJECT_ROOT/client/index.ts"
+        "$PROJECT_ROOT/client/core/types.ts"
+        "$PROJECT_ROOT/client/core/constants.ts"
+        "$PROJECT_ROOT/client/core/utils.ts"
+        "$PROJECT_ROOT/client/core/logger.ts"
+        "$PROJECT_ROOT/client/websocket/websocketService.ts"
+        "$PROJECT_ROOT/client/rendering/scene.ts"
+        "$PROJECT_ROOT/client/rendering/node/geometry/NodeGeometryManager.ts"
+        "$PROJECT_ROOT/client/rendering/textRenderer.ts"
+        "$PROJECT_ROOT/client/state/settings.ts"
+        "$PROJECT_ROOT/client/state/graphData.ts"
+        "$PROJECT_ROOT/client/state/defaultSettings.ts"
+        "$PROJECT_ROOT/client/xr/xrSessionManager.ts"
+        "$PROJECT_ROOT/client/xr/xrInteraction.ts"
+        "$PROJECT_ROOT/client/xr/xrTypes.ts"
+        "$PROJECT_ROOT/client/platform/platformManager.ts"
+        "$PROJECT_ROOT/client/tsconfig.json"
+    )
+
+    for file in "${required_files[@]}"; do
+        if [ ! -f "$file" ]; then
+            log "${RED}Error: Required file $file not found${NC}"
+            return 1
+        fi
+    done
+
+    log "${GREEN}Client directory structure verified${NC}"
+    return 0
+}
+
+check_ragflow_network() {
+    log "${YELLOW}Checking RAGFlow network availability...${NC}"
+    if ! docker network ls | grep -q "docker_ragflow"; then
+        log "${RED}Error: RAGFlow network (docker_ragflow) not found${NC}"
+        log "${YELLOW}Please ensure RAGFlow is running in ../ragflow/docker${NC}"
+        log "${YELLOW}You can check the network with: docker network ls${NC}"
+        return 1
+    fi
+    log "${GREEN}RAGFlow network is available${NC}"
+    return 0
+}
+
+check_kokoros() {
+    log "${YELLOW}Checking Kokoros TTS service...${NC}"
+    if ! docker ps --format '{{.Names}}' | grep -q "^kokoros$"; then
+        log "${YELLOW}Kokoros container not running, starting it...${NC}"
+        if ! docker run -d -p 4001:4001 --network docker_ragflow --name kokoros kokoros openai; then
+            log "${RED}Failed to start Kokoros container${NC}"
+            return 1
+        fi
+        log "${GREEN}Kokoros container started successfully${NC}"
+    else
+        log "${GREEN}Kokoros container is already running${NC}"
+    fi
+    return 0
+}
+
+check_application_readiness() {
+    local max_attempts=60
+    local attempt=1
+    local wait_secs=2
+
+    log "${YELLOW}Checking application readiness...${NC}"
+
+    # Install websocat if not present (used for WebSocket testing)
+    if ! command -v websocat &>/dev/null; then
+        log "${YELLOW}Installing websocat for WebSocket testing...${NC}"
+        if command -v cargo &>/dev/null; then
+            cargo install websocat
+        else
+            log "${RED}Error: Neither websocat nor cargo found. Cannot test WebSocket connection.${NC}"
+            return 1
+        fi
+    fi
+
+    while [ "$attempt" -le "$max_attempts" ]; do
+        local ready=true
+        local status_msg=""
+
+        # 1. Check HTTP
+        if ! timeout 5 curl -s http://localhost:4000/ >/dev/null; then
+            ready=false
+            status_msg="HTTP endpoint not ready"
+        fi
+
+        # 2. If HTTP is up, check WebSocket
+        if [ "$ready" = true ]; then
+            log "${YELLOW}Testing WebSocket connection...${NC}"
+            if ! timeout 5 websocat "ws://localhost:4000/wss" \
+                    >/dev/null 2>&1 <<< '{"type":"ping"}'; then
+                ready=false
+                status_msg="WebSocket endpoint not ready"
+            fi
+        fi
+
+        # 3. Optional RAGFlow connectivity
+        if [ "$ready" = true ]; then
+            if timeout 5 curl -s http://ragflow-server/v1/health >/dev/null; then
+                log "${GREEN}RAGFlow service is accessible${NC}"
+            else
+                log "${YELLOW}Note: RAGFlow service is not accessible - some features may be limited${NC}"
+            fi
+        fi
+
+        if [ "$ready" = true ]; then
+            log "${GREEN}All services are ready${NC}"
+            return 0
+        fi
+
+        log "${YELLOW}Attempt $attempt/$max_attempts: $status_msg${NC}"
+
+        # Show partial logs halfway through attempts
+        if [ "$attempt" -eq $((max_attempts / 2)) ]; then
+            log "${YELLOW}Still waiting for services. Recent logs:${NC}"
+            $DOCKER_COMPOSE logs --tail=20
+        fi
+
+        sleep "$wait_secs"
+        attempt=$((attempt + 1))
+    done
+
+    # Exhausted attempts
+    log "${RED}Application failed to become ready. Dumping logs...${NC}"
+    $DOCKER_COMPOSE logs
+    log "${YELLOW}Containers left running for debugging. Use these commands to inspect:${NC}"
+    log "  $DOCKER_COMPOSE logs -f"
+    log "  docker logs logseq-xr-webxr"
+    log "  docker logs cloudflared-tunnel"
+    return 1
+}
+###############################################################################
+# COMMAND LINE ARGUMENTS
+###############################################################################
+REBUILD_TEST=false
+
+# Parse command line arguments
+for arg in "$@"; do
+    case $arg in
+        rebuild-test)
+            REBUILD_TEST=true
+            shift # Remove from processing
+            ;;
+    esac
+done
+
+###############################################################################
+# MAIN EXECUTION
+###############################################################################
+cd "$PROJECT_ROOT"
+
+
+# 1. Ensure .env exists
+if [ ! -f .env ]; then
+    log "${RED}Error: .env file not found in $PROJECT_ROOT${NC}"
+    exit 1
+fi
+
+# 2. Source environment variables
+set -a
+source .env
+set +a
+
+# 3. Read settings from TOML (non-fatal if it fails, to allow debugging)
+read_settings || {
+    log "${YELLOW}Settings read failed - continuing for debugging${NC}"
+}
+
+# 4. Check dependencies (Docker and yq)
+check_dependencies || {
+    log "${RED}Dependency check failed${NC}"
+    exit 1
+}
+
+# 5. GPU resources (non-fatal if it fails)
+check_system_resources || {
+    log "${YELLOW}System resources check failed - continuing for debugging${NC}"
+}
+
+# 6. Verify client directory structure (non-fatal if it fails)
+if ! verify_client_structure; then
+    log "${RED}Client structure verification failed${NC}"
+    log "${YELLOW}Continuing for debugging${NC}"
+fi
+
+# 7. Security checks
+log "\n${YELLOW}Running security checks...${NC}"
+check_pnpm_security || true
+check_typescript || {
+    log "${YELLOW}TypeScript check failed - continuing for debugging${NC}"
+}
+check_rust_security || true
+
+# 10. Environment & GitHub token check (non-fatal)
+if ! check_environment; then
+    log "${YELLOW}Environment check failed - continuing for debugging${NC}"
+fi
+
+# 10. Build & start containers
+log "${YELLOW}Building and starting services...${NC}"
+
+# Clean up existing containers
+log "${YELLOW}Cleaning up existing containers...${NC}"
+
+# Get container IDs for our specific containers
+cloudflared_id=$(docker ps -aq --filter "name=cloudflared-tunnel")
+webxr_id=$(docker ps -aq --filter "name=logseq-xr-webxr")
+
+# Stop and remove cloudflared container if it exists
+if [ -n "$cloudflared_id" ]; then
+    log "${YELLOW}Stopping cloudflared container $cloudflared_id...${NC}"
+    docker stop "$cloudflared_id"
+    docker rm "$cloudflared_id"
+fi
+
+# Stop and remove webxr container if it exists
+if [ -n "$webxr_id" ]; then
+    log "${YELLOW}Stopping webxr container $webxr_id...${NC}"
+    docker stop "$webxr_id"
+    docker rm "$webxr_id"
+fi
+
+# If in rebuild-test mode, do additional cleanup
+if [ "$REBUILD_TEST" = true ]; then
+    log "${YELLOW}Rebuild-test mode: Performing additional cleanup...${NC}"
+    docker system prune -f
+fi
+
+# Get current git hash or use "development" if not in a git repo
+GIT_HASH=$(git rev-parse HEAD 2>/dev/null || echo "development")
+export GIT_HASH
+
+# Build client code before building container
+log "${YELLOW}Building client code...${NC}"
+pnpm build || { log "${RED}Client build failed${NC}"; exit 1; }
+log "${GREEN}Client build successful${NC}"
+
+# Build with GIT_HASH environment variable
+GIT_HASH=$GIT_HASH $DOCKER_COMPOSE build --pull --no-cache
+$DOCKER_COMPOSE up -d
+
+# 11. Check readiness (fatal if fails)
+if ! check_application_readiness; then
+    log "${RED}Application failed to start properly${NC}"
+    log "${YELLOW}Containers left running for debugging. Use these commands:${NC}"
+    log "  $DOCKER_COMPOSE logs -f"
+    log "  docker logs logseq-xr-webxr"
+    log "  docker logs cloudflared-tunnel"
+    exit 1
+fi
+
+# 12. Final status
+log "\n${GREEN}🚀 Services are running!${NC}"
+
+log "\nResource Usage:"
+docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
+
+log "\nEndpoints:"
+echo "HTTP:      http://localhost:4000"
+echo "WebSocket: ws://localhost:4000/wss"
+
+log "\nCommands:"
+echo "logs:    $DOCKER_COMPOSE logs -f"
+echo "stop:    $DOCKER_COMPOSE down"
+echo "restart: $DOCKER_COMPOSE restart"
+
+# 13. Show logs in background, wait for them
+log "\n${YELLOW}Showing logs (Ctrl+C to exit)...${NC}"
+$DOCKER_COMPOSE logs -f &
+
+wait
+
+### start.sh
+
+#!/bin/bash
+set -euo pipefail
+
+# Function to log messages with timestamps
+log() {
+    echo "[$(date "+%Y-%m-%d %H:%M:%S")] $1"
+}
+
+# Verify settings file permissions
+log "Verifying settings.yaml permissions..."
+if [ ! -f "/app/settings.yaml" ]; then
+    log "Error: settings.yaml not found"
+    exit 1
+fi
+chmod 666 /app/settings.yaml
+log "settings.yaml permissions verified"
+
+# Set up runtime environment
+# Start nginx
+log "Starting nginx..."
+nginx -t && nginx
+log "nginx started successfully"
+
+# Execute the webxr binary
+log "Executing webxr..."
+exec /app/webxr
+
+
+=== Docker Network Configuration ===
+
+
+--- docker network inspect docker_ragflow ---
+
+[
+    {
+        "Name": "docker_ragflow",
+        "Id": "a7bc515a66f9014dfe7b39dc55eb933f4620c1536e5ff801fa5f92c8c36060b3",
+        "Created": "2024-12-06T11:41:33.959442093Z",
+        "Scope": "local",
+        "Driver": "bridge",
+        "EnableIPv6": false,
+        "IPAM": {
+            "Driver": "default",
+            "Options": null,
+            "Config": [
+                {
+                    "Subnet": "172.19.0.0/16",
+                    "Gateway": "172.19.0.1"
+                }
+            ]
+        },
+        "Internal": false,
+        "Attachable": false,
+        "Ingress": false,
+        "ConfigFrom": {
+            "Network": ""
+        },
+        "ConfigOnly": false,
+        "Containers": {
+            "02729e216f9d731265c221373319a9c86123287df95b6d83c8566898a46618e0": {
+                "Name": "kokoros",
+                "EndpointID": "66bbf80235f21a2be6f225d5ac07f23c4e21047d2ce068c66a4adeb00d5f876e",
+                "MacAddress": "02:42:ac:13:00:06",
+                "IPv4Address": "172.19.0.6/16",
+                "IPv6Address": ""
+            },
+            "257803d1f4025872538628f136179d756ad83e650a474ff3bf40ffc97384c957": {
+                "Name": "logseq-xr-webxr",
+                "EndpointID": "933b73ee5e3c09b1ede0289b340e724973323b657c94aa87bdb33157fd4d8442",
+                "MacAddress": "02:42:ac:13:00:0a",
+                "IPv4Address": "172.19.0.10/16",
+                "IPv6Address": ""
+            },
+            "37236cd15a632531557445eceb52798043a3c05aeac3e621a1b44a97b325abb4": {
+                "Name": "ragflow-server",
+                "EndpointID": "14559c2ca7a236a11494c18af4efc366169efd9c6bc96cc0e7205027efe55529",
+                "MacAddress": "02:42:ac:13:00:07",
+                "IPv4Address": "172.19.0.7/16",
+                "IPv6Address": ""
+            },
+            "3be454562b9e9cb29c8baaa366180266040b65ee6e4f49b2a2d574823ed1ce6c": {
+                "Name": "ragflow-es-01",
+                "EndpointID": "44331406abf654f7d884dc6ec1ba928a57ebc0409eec86bda26985ab128b39d7",
+                "MacAddress": "02:42:ac:13:00:02",
+                "IPv4Address": "172.19.0.2/16",
+                "IPv6Address": ""
+            },
+            "6f29e52e755469407f276c8296b30e93e939cd4fb971c861a6391f9f7c3b6e16": {
+                "Name": "ragflow-mysql",
+                "EndpointID": "654c07ea7d9d5fc00918d71bcf5d0df1a029fefc2587e036ffca8f4660f95961",
+                "MacAddress": "02:42:ac:13:00:05",
+                "IPv4Address": "172.19.0.5/16",
+                "IPv6Address": ""
+            },
+            "723a289060840e6ef20b1797a80209915a869f44e76bb55d420853d452251b88": {
+                "Name": "ollama",
+                "EndpointID": "a20e6e686d132f43b55fc97529eb92d8d8defd613e5eb7dc44f254b63d18dbe1",
+                "MacAddress": "02:42:ac:13:00:08",
+                "IPv4Address": "172.19.0.8/16",
+                "IPv6Address": ""
+            },
+            "8b7cea10b14ce843b477c50ab0f47c3c606494e101acaaf074d75481d9c65f80": {
+                "Name": "ragflow-redis",
+                "EndpointID": "cafc82a072427660b2c728e66765dab0ab1847d0c837e9f9f65dd23a0d7018f7",
+                "MacAddress": "02:42:ac:13:00:03",
+                "IPv4Address": "172.19.0.3/16",
+                "IPv6Address": ""
+            },
+            "9163044a0d4607bde96940d757b045cb4d8d47364f2dce91b8f27733b8310e35": {
+                "Name": "open-webui",
+                "EndpointID": "04d1de1cb0a48645efdcc7b13106802ea53e4aefc78897a08f96dbb0f7d521a3",
+                "MacAddress": "02:42:ac:13:00:0b",
+                "IPv4Address": "172.19.0.11/16",
+                "IPv6Address": ""
+            },
+            "927938944e0afdc54d3767040449c418ac58b2af3d0a7e56dc7218ced2556c4f": {
+                "Name": "ragflow-minio",
+                "EndpointID": "35640543fb737ef890a31a2025695c25b5abff9e9d9e36f8ffccccb77a6bbdb1",
+                "MacAddress": "02:42:ac:13:00:04",
+                "IPv4Address": "172.19.0.4/16",
+                "IPv6Address": ""
+            },
+            "9ec1444930cffda25fe0ac682a3edcf1d0b6147a252d6f17953ecc96ecf74002": {
+                "Name": "cloudflared-tunnel",
+                "EndpointID": "4e8088cf35b9607410567604f02551f070e93f8d34ddf0b81c315583d0bfe8d5",
+                "MacAddress": "02:42:ac:13:00:0c",
+                "IPv4Address": "172.19.0.12/16",
+                "IPv6Address": ""
+            },
+            "c5b92a96025baeae548518eaafe88ef76e70e6d90e5951a8750d01c56b6c8d4a": {
+                "Name": "xinference",
+                "EndpointID": "44cee519c20433e6f98f813ce2d313f091996b2779ce3e3be8b6d4ac9c0888e5",
+                "MacAddress": "02:42:ac:13:00:09",
+                "IPv4Address": "172.19.0.9/16",
+                "IPv6Address": ""
+            }
+        },
+        "Options": {},
+        "Labels": {
+            "com.docker.compose.network": "ragflow",
+            "com.docker.compose.project": "docker",
+            "com.docker.compose.version": "2.29.7"
+        }
+    }
+]
+
+
+## Server Code (Rust)
+
+
+
+## Client Code (TypeScript)
+
+The following text represents a project with code. The structure of the text consists of sections beginning with ----, followed by a single line containing the file path and file name, and then a variable number of lines containing the file contents. The text representing the project ends when the symbols --END-- are encountered. Any further text beyond --END-- is meant to be interpreted as instructions using the aforementioned project as context.
+----
+tsconfig.json
+{
+  "compilerOptions": {
+    "target": "ES2020",
+    "useDefineForClassFields": true,
+    "module": "ESNext",
+    "lib": [
+      "es2020",
+      "dom",
+      "dom.iterable",
+      "webworker",
+      "webworker.importscripts",
+      "webworker.iterable"
+    ],
+    "skipLibCheck": true,
+    "moduleResolution": "bundler",
+    "allowImportingTsExtensions": true,
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "noEmit": true,
+    "strict": true,
+    "noUnusedLocals": true,
+    "noUnusedParameters": true,
+    "noFallthroughCasesInSwitch": true,
+    "noImplicitAny": true,
+    "noImplicitThis": true,
+    "noImplicitReturns": true,
+    "strictNullChecks": true,
+    "strictFunctionTypes": true,
+    "strictBindCallApply": true,
+    "strictPropertyInitialization": true,
+    "allowJs": true,
+    "checkJs": true,
+    "esModuleInterop": true,
+    "forceConsistentCasingInFileNames": true
+  },
+  "include": ["**/*.ts", "**/*.d.ts"],
+  "exclude": ["node_modules"]
+}
+
+----
+index.html
+<!DOCTYPE html>
+<html lang="en">
+<head>
+  <meta charset="UTF-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1.0">
+  <meta name="immersive-ar" content="true">
+  <meta name="oculus-hand-tracking" content="true">
+  <title>LogseqXR Graph Visualization</title>
+  <style>
+    body {
+      margin: 0;
+      padding: 0;
+      overflow: hidden;
+      font-family: Arial, sans-serif;
+      background: #212121;  /* Match scene background */
+      color: #ffffff;
+    }
+
+    #scene-container {
+      position: absolute;
+      width: 100%;
+      height: 100%;
+      background: transparent;
+    }
+
+    #control-panel {
+      position: fixed;
+      top: 0;
+      right: 0;
+      height: 100vh;
+      background: rgba(33, 33, 33, 0.95);  /* Match scene background */
+      border-left: 1px solid rgba(255, 255, 255, 0.1);
+      padding: 15px;
+      z-index: 1000;
+      min-width: 300px;
+      overflow-y: auto;
+      box-shadow: -2px 0 10px rgba(0, 0, 0, 0.3);
+      transition: opacity 0.3s ease;
+    }
+
+    #control-panel.hidden {
+      opacity: 0;
+      pointer-events: none;
+    }
+
+    #xr-button {
+      position: fixed;
+      bottom: 20px;
+      left: 50%;
+      transform: translateX(-50%);
+      padding: 12px 24px;
+      background: rgba(255, 255, 255, 0.2);
+      border: 1px solid rgba(255, 255, 255, 0.3);
+      border-radius: 20px;
+      color: white;
+      font-size: 16px;
+      cursor: pointer;
+      z-index: 1000;
+      transition: all 0.3s ease;
+    }
+
+    #xr-button:hover {
+      background: rgba(255, 255, 255, 0.3);
+    }
+
+    #xr-button.hidden {
+      opacity: 0;
+      pointer-events: none;
+    }
+
+    .control-panel-header {
+      display: flex;
+      justify-content: space-between;
+      align-items: center;
+      margin-bottom: 15px;
+      padding-bottom: 10px;
+      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
+    }
+
+    .control-panel-header h3 {
+      margin: 0;
+      font-size: 1.2em;
+      color: #ffffff;
+    }
+
+    .connection-status {
+      display: inline-block;
+      padding: 4px 8px;
+      border-radius: 4px;
+      font-size: 0.9em;
+    }
+
+    .connection-status.connected {
+      background: rgba(76, 175, 80, 0.2);
+      color: #4CAF50;
+    }
+
+    .connection-status.disconnected {
+      background: rgba(244, 67, 54, 0.2);
+      color: #F44336;
+    }
+
+    .settings-group {
+      margin-bottom: 20px;
+      padding: 10px;
+      border-radius: 4px;
+      background: rgba(255, 255, 255, 0.05);
+    }
+
+    .settings-group h4 {
+      margin: 0 0 10px 0;
+      color: #ffffff;
+      font-size: 1em;
+    }
+
+    .setting-item {
+      margin-bottom: 10px;
+    }
+
+    .setting-item label {
+      display: block;
+      margin-bottom: 5px;
+      color: rgba(255, 255, 255, 0.8);
+    }
+
+    .setting-item input[type="text"],
+    .setting-item input[type="number"],
+    .setting-item select {
+      width: 100%;
+      padding: 6px;
+      border: 1px solid rgba(255, 255, 255, 0.1);
+      border-radius: 4px;
+      background: rgba(255, 255, 255, 0.1);
+      color: #ffffff;
+    }
+
+    .setting-item input[type="checkbox"] {
+      margin-right: 8px;
+    }
+
+    .setting-item input:focus,
+    .setting-item select:focus {
+      outline: none;
+      border-color: rgba(255, 255, 255, 0.3);
+      background: rgba(255, 255, 255, 0.15);
+    }
+  </style>
+</head>
+<body>
+  <div id="scene-container">
+    <canvas id="main-canvas"></canvas>
+  </div>
+  <div id="control-panel">
+    <div class="control-panel-header">
+      <h3>Settings</h3>
+      <div class="connection-status">
+        <span class="status-indicator"></span>
+        <span id="connection-status">Connecting...</span>
+      </div>
+    </div>
+    <div class="control-panel-content">
+      <!-- Settings sections will be dynamically populated by ControlPanel.ts -->
+    </div>
+  </div>
+  <script type="module" src="/index.ts"></script>
+</body>
+</html>
+
+----
+index.ts
+import { Settings } from './types/settings';
+import { NodeManagerFacade } from './rendering/node/NodeManagerFacade';
+import { EdgeManager } from './rendering/EdgeManager';
+import { HologramManager } from './visualization/HologramManager';
+import { TextRenderer } from './rendering/textRenderer';
+import { WebSocketService } from './websocket/websocketService';
+import { SettingsStore } from './state/SettingsStore';
+import { LoggerConfig, createLogger } from './core/logger';
+import { platformManager } from './platform/platformManager';
+import { XRSessionManager } from './xr/xrSessionManager';
+import { XRInitializer } from './xr/xrInitializer';
+import { SceneManager } from './rendering/scene';
+import { graphDataManager } from './state/graphData';
+import { debugState } from './core/debugState';
+import { ModularControlPanel } from './ui/ModularControlPanel';
+import { defaultSettings } from './state/defaultSettings';
+import { MaterialFactory } from './rendering/factories/MaterialFactory';
+import './ui'; // Import UI initialization
+
+const logger = createLogger('GraphVisualization');
+
+// Helper for conditional debug logging
+function debugLog(message: string, ...args: any[]) {
+    if (debugState.isDataDebugEnabled()) {
+        logger.debug(message, ...args);
+    }
+}
+
+export class GraphVisualization {
+    private sceneManager: SceneManager;
+    private nodeManager: NodeManagerFacade;
+    private edgeManager: EdgeManager;
+    private hologramManager: HologramManager;
+    private textRenderer: TextRenderer;
+    private websocketService!: WebSocketService;
+    private initialized: boolean = false;
+
+    public async initializeWebSocket(): Promise<void> {
+        debugLog('Initializing WebSocket connection');
+        
+        // Initialize WebSocket but don't connect yet
+        this.websocketService = WebSocketService.getInstance();
+        
+        // Set up binary message handler before connecting
+        this.websocketService.onBinaryMessage((nodes) => {
+            if (this.initialized) {
+                debugLog('Received binary node update', { nodeCount: nodes.length });
+                this.nodeManager.updateNodePositions(nodes.map(node => ({
+                    id: node.id.toString(),
+                    data: {
+                        position: node.position,
+                        velocity: node.velocity
+                    }
+                })));
+            }
+        });
+        
+        // Set up connection status handler
+        this.websocketService.onConnectionStatusChange((connected) => {
+            logger.info(`WebSocket connection status changed: ${connected}`);
+            if (connected) {
+                debugLog('Requesting position updates');
+                this.websocketService.sendMessage({ type: 'requestInitialData' });
+            }
+        });
+        
+        // Load initial graph data before connecting
+        debugLog('Loading initial graph data');
+        try {
+            await graphDataManager.fetchInitialData();
+            const graphData = graphDataManager.getGraphData();
+            this.nodeManager.updateNodes(graphData.nodes);
+            this.edgeManager.updateEdges(graphData.edges);
+            
+            // Mark as initialized and connect websocket only after initial data is loaded
+            this.initialized = true;
+            await this.websocketService.connect();
+            debugLog('Initial graph data loaded and WebSocket connected');
+        } catch (error) {
+            logger.error('Failed to load initial graph data:', error);
+        }
+    }
+
+    constructor(settings: Settings) {
+        debugLog('Initializing GraphVisualization');
+        
+        // Get existing canvas element
+        const canvas = document.getElementById('main-canvas') as HTMLCanvasElement;
+        if (!canvas) {
+            throw new Error('Could not find #main-canvas element');
+        }
+        
+        // Initialize SceneManager
+        this.sceneManager = SceneManager.getInstance(canvas);
+        
+        // Initialize managers with SceneManager's scene and renderer
+        const scene = this.sceneManager.getScene();
+        const camera = this.sceneManager.getCamera();
+        const renderer = this.sceneManager.getRenderer();
+        const materialFactory = MaterialFactory.getInstance();
+        
+        this.nodeManager = NodeManagerFacade.getInstance(
+            scene,
+            camera,
+            materialFactory.getNodeMaterial(settings)
+        );
+        this.edgeManager = new EdgeManager(scene, settings, this.nodeManager.getNodeInstanceManager());
+        this.hologramManager = new HologramManager(scene, renderer, settings);
+        this.textRenderer = new TextRenderer(camera, scene);
+        
+        // Apply initial settings to all components but don't connect websocket yet
+        this.handleSettingsUpdate(settings);
+        
+        // Start rendering
+        this.sceneManager.start();
+        debugLog('GraphVisualization initialization complete');
+    }
+
+    public handleSettingsUpdate(settings: Settings) {
+        debugLog('Handling settings update');
+        this.nodeManager.handleSettingsUpdate(settings);
+        this.edgeManager.handleSettingsUpdate(settings);
+        this.hologramManager.updateSettings(settings);
+        this.textRenderer.handleSettingsUpdate(settings.visualization.labels);
+        this.sceneManager.handleSettingsUpdate(settings);
+    }
+
+    public dispose() {
+        debugLog('Disposing GraphVisualization');
+        this.nodeManager.dispose();
+        this.edgeManager.dispose();
+        this.hologramManager.dispose();
+        this.textRenderer.dispose();
+        this.websocketService.close();
+        
+        // Clean up XR components
+        if ((window as any).xrInitializer) {
+            (window as any).xrInitializer.dispose();
+            delete (window as any).xrInitializer;
+        }
+        
+        SceneManager.cleanup();
+        debugLog('GraphVisualization disposed');
+    }
+}
+
+// Initialize settings and logging
+async function init() {
+    logger.info('Starting application initialization...');
+    
+    try {
+        // Initialize platform detection first
+        await platformManager.initialize(defaultSettings);
+        
+        // Initialize ModularControlPanel first and wait for settings to be ready
+        const controlPanel = ModularControlPanel.getInstance();
+        
+        // Wait for settings to be ready
+        if (!controlPanel.isReady()) {
+            await new Promise<void>((resolve) => {
+                controlPanel.on('settings:ready', () => resolve());
+            });
+        }
+        
+        // Get settings store after it's been initialized by ModularControlPanel
+        const settingsStore = SettingsStore.getInstance();
+        const settings = settingsStore.get('') as Settings || defaultSettings;
+
+        // Configure logging based on settings
+        const debugEnabled = settingsStore.get('system.debug.enabled') as boolean;
+        const logFullJson = settingsStore.get('system.debug.log_full_json') as boolean;
+        LoggerConfig.setGlobalDebug(debugEnabled);
+        LoggerConfig.setFullJson(logFullJson);
+        
+        // Subscribe to debug setting changes
+        settingsStore.subscribe('system.debug.enabled', (_, value) => {
+            LoggerConfig.setGlobalDebug(value as boolean);
+        });
+        settingsStore.subscribe('system.debug.log_full_json', (_, value) => {
+            LoggerConfig.setFullJson(value as boolean);
+        });
+
+        // Create XR button if it doesn't exist
+        if (!document.getElementById('xr-button')) {
+            const xrButton = document.createElement('button');
+            xrButton.id = 'xr-button';
+            xrButton.className = 'hidden';
+            document.body.appendChild(xrButton);
+        }
+
+        // Get canvas and scene manager for XR setup
+        const canvas = document.getElementById('main-canvas') as HTMLCanvasElement;
+        if (!canvas) {
+            throw new Error('Could not find #main-canvas element');
+        }
+        const sceneManager = SceneManager.getInstance(canvas);
+
+        // Initialize XR components
+        const xrSessionManager = XRSessionManager.getInstance(sceneManager);
+        (window as any).xrInitializer = XRInitializer.getInstance(xrSessionManager);
+
+        // Initialize main visualization and store globally
+        const viz = new GraphVisualization(settings);
+        (window as any).visualization = viz;
+        
+        // Initialize WebSocket after visualization is created
+        await viz.initializeWebSocket();
+
+        // Subscribe to all relevant visualization paths
+        const visualizationPaths = [
+            'visualization.nodes',
+            'visualization.edges',
+            'visualization.physics',
+            'visualization.rendering',
+            'visualization.animations',
+            'visualization.labels',
+            'visualization.bloom',
+            'visualization.hologram'
+        ];
+
+        // Subscribe to each path and update both visualization and scene
+        let pendingUpdate = false;
+        let pendingSettings: Settings | null = null;
+
+        const handleSettingsChange = () => {
+            if (!viz || !pendingSettings) return;
+            
+            try {
+                // Use the pending settings and clear it
+                const currentSettings = pendingSettings;
+                pendingSettings = null;
+                pendingUpdate = false;
+
+                if (!currentSettings) {
+                    return;
+                }
+                
+                // Batch updates to avoid cascading changes
+                viz.handleSettingsUpdate(currentSettings);
+                sceneManager.handleSettingsUpdate(currentSettings);
+                
+                if (debugState.isEnabled()) {
+                    logger.debug('Settings updated:', {
+                        bloom: currentSettings.visualization.bloom,
+                        rendering: currentSettings.visualization.rendering
+                    });
+                }
+            } catch (error) {
+                logger.error('Error handling settings update:', error);
+            }
+        };
+
+        // Use a single subscription for all visualization paths
+        visualizationPaths.forEach(path => {
+            settingsStore.subscribe(path, () => {
+                if (!pendingUpdate) {
+                    pendingUpdate = true;
+                    pendingSettings = settingsStore.get('') as Settings;
+                    window.requestAnimationFrame(handleSettingsChange);
+                }
+            }, false); // Don't trigger immediate update on subscription
+        });
+
+        // Log successful initialization
+        logger.info('Application components initialized successfully', {
+            platformType: platformManager.getPlatform(),
+            xrSupported: platformManager.isXRSupported(),
+            isQuest: platformManager.isQuest()
+        });
+        
+        logger.info('Application initialized successfully');
+    } catch (error) {
+        logger.error('Failed to initialize application components:', error);
+        throw error;
+    }
+}
+
+init().catch(error => {
+    console.error('Failed to initialize application:', error);
+});
+
+----
+visualization/HologramManager.ts
+import {
+    Scene,
+    Group,
+    Mesh,
+    Vector3,
+    WebGLRenderer,
+    InstancedMesh,
+    Matrix4
+} from 'three';
+import { Settings } from '../types/settings';
+import { GeometryFactory } from '../rendering/factories/GeometryFactory';
+import { MaterialFactory } from '../rendering/factories/MaterialFactory';
+import { HologramShaderMaterial } from '../rendering/materials/HologramShaderMaterial';
+
+export class HologramManager {
+    private readonly group = new Group();
+    private isXRMode = false;
+    private readonly geometryFactory: GeometryFactory;
+    private readonly ringInstances: InstancedMesh[] = [];
+    private readonly sphereInstances: InstancedMesh[] = [];
+    private readonly tempMatrix = new Matrix4();
+    private readonly instanceCount = 3;
+    private readonly materialFactory: MaterialFactory;
+
+    constructor(
+        private readonly scene: Scene,
+        _renderer: WebGLRenderer,  // Used by subclasses
+        private settings: Settings
+    ) {
+        this.geometryFactory = GeometryFactory.getInstance();
+        this.materialFactory = MaterialFactory.getInstance();
+        
+        // Enable bloom layer
+        this.group.layers.enable(1);
+        this.createHolograms();
+        this.scene.add(this.group);
+    }
+
+    private createHolograms() {
+        while (this.group.children.length > 0) {
+            const child = this.group.children[0];
+            this.group.remove(child);
+            if (child instanceof Mesh || child instanceof InstancedMesh) {
+                child.geometry.dispose();
+                child.material.dispose();
+            }
+        }
+
+        const quality = this.isXRMode ? 'high' : this.settings.xr.quality;
+        const baseMaterial = this.materialFactory.getHologramMaterial(this.settings);
+
+        // Create instanced rings
+        const sphereSizes = this.settings.visualization.hologram.sphereSizes;
+        
+        // Create one ring instance for each size
+        sphereSizes.forEach(size => {
+            const ring = new InstancedMesh(
+                this.geometryFactory.getHologramGeometry('ring', quality, size),
+                baseMaterial.clone(),
+                this.instanceCount
+            );
+            
+            // Set up ring instances with different rotations
+            for (let j = 0; j < this.instanceCount; j++) {
+                this.tempMatrix.makeRotationX(Math.PI / 3 * j);
+                this.tempMatrix.multiply(new Matrix4().makeRotationY(Math.PI / 6 * j));
+                ring.setMatrixAt(j, this.tempMatrix);
+            }
+            
+            ring.instanceMatrix.needsUpdate = true;
+            ring.layers.enable(1); // Enable bloom layer
+            this.ringInstances.push(ring);
+            this.group.add(ring);
+        });
+
+        if (this.settings.visualization.hologram.enableTriangleSphere) {
+            const size = this.settings.visualization.hologram.triangleSphereSize;
+            const sphereMesh = new InstancedMesh(
+                this.geometryFactory.getHologramGeometry('triangleSphere', quality, size),
+                baseMaterial.clone(),
+                this.instanceCount
+            );
+            
+            // Set up sphere instances with different scales and rotations
+            for (let i = 0; i < this.instanceCount; i++) {
+                this.tempMatrix.makeScale(0.8 + (i * 0.2), 0.8 + (i * 0.2), 0.8 + (i * 0.2));
+                this.tempMatrix.multiply(new Matrix4().makeRotationX(Math.PI / 4 * i));
+                this.tempMatrix.multiply(new Matrix4().makeRotationY(Math.PI / 3 * i));
+                sphereMesh.setMatrixAt(i, this.tempMatrix);
+            }
+            
+            sphereMesh.instanceMatrix.needsUpdate = true;
+            
+            // Set material properties
+            const material = (sphereMesh.material as HologramShaderMaterial);
+            material.uniforms.opacity.value = this.settings.visualization.hologram.triangleSphereOpacity;
+            material.setEdgeOnly(true);
+            
+            sphereMesh.layers.enable(1); // Enable bloom layer
+            this.sphereInstances.push(sphereMesh);
+            this.group.add(sphereMesh);
+        }
+    }
+
+    setXRMode(enabled: boolean) {
+        this.isXRMode = enabled;
+        this.group.traverse(child => {
+            if (child instanceof Mesh && child.material instanceof HologramShaderMaterial) {
+                child.material.defines = { USE_AR: '' };
+                child.material.needsUpdate = true;
+            }
+        });
+        this.createHolograms();
+    }
+
+    handleInteraction(position: Vector3) {
+        this.group.traverse(child => {
+            if (child instanceof Mesh && child.material instanceof HologramShaderMaterial) {
+                const distance = position.distanceTo(child.position);
+                if (distance < 0.5 && child.material.uniforms) {
+                    child.material.uniforms.pulseIntensity.value = 0.4;
+                    setTimeout(() => {
+                        if (child.material instanceof HologramShaderMaterial && child.material.uniforms) {
+                            child.material.uniforms.pulseIntensity.value = 0.2;
+                        }
+                    }, 500);
+                }
+            }
+        });
+    }
+
+    update(deltaTime: number) {
+        this.group.traverse(child => {
+            if (child instanceof InstancedMesh) {
+                const rotationSpeed = this.settings.visualization.hologram.globalRotationSpeed;
+                
+                // Update each instance's rotation
+                for (let i = 0; i < child.count; i++) {
+                    child.getMatrixAt(i, this.tempMatrix);
+                    
+                    // Apply rotation based on instance index
+                    const instanceSpeed = rotationSpeed * (i + 1);
+                    this.tempMatrix.multiply(new Matrix4().makeRotationY(instanceSpeed * deltaTime));
+                    
+                    child.setMatrixAt(i, this.tempMatrix);
+                }
+                
+                child.instanceMatrix.needsUpdate = true;
+                
+                // Update shader time
+                const material = child.material as HologramShaderMaterial;
+                material.uniforms.time.value += deltaTime;
+            }
+        });
+    }
+
+    updateSettings(newSettings: Settings) {
+        this.settings = newSettings;
+        this.materialFactory.updateMaterial('hologram', this.settings);
+        this.createHolograms();
+    }
+
+    getGroup() {
+        return this.group;
+    }
+
+    dispose() {
+        // Geometries and materials are managed by the factories
+        this.scene.remove(this.group);
+    }
+}
+
+----
+visualization/MetadataVisualizer.ts
+import * as THREE from 'three';
+import {
+    Mesh,
+    Group,
+    MeshStandardMaterial,
+    MeshBasicMaterial,
+    Vector3,
+    DoubleSide,
+    BufferGeometry,
+    Object3D
+} from 'three';
+import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';
+import { FontLoader, Font } from 'three/examples/jsm/loaders/FontLoader.js';
+import { NodeMetadata } from '../types/metadata';
+import { Settings } from '../types/settings';
+import { platformManager } from '../platform/platformManager';
+
+type GeometryWithBoundingBox = THREE.BufferGeometry & {
+    boundingBox: THREE.Box3 | null;
+    computeBoundingBox: () => void;
+};
+
+interface MetadataLabelGroup extends Group {
+    name: string;
+    userData: {
+        isMetadata: boolean;
+    };
+}
+
+export type MetadataLabelCallback = (group: MetadataLabelGroup) => void;
+
+interface ExtendedTextGeometry extends TextGeometry {
+    computeBoundingBox: () => void;
+    boundingBox: {
+        max: { x: number };
+        min: { x: number };
+    } | null;
+}
+
+export class MetadataVisualizer {
+    private scene: THREE.Scene;
+    private camera: THREE.PerspectiveCamera;
+    private fontLoader: FontLoader;
+    private font: Font | null;
+    private fontPath: string;
+    private labelGroup: THREE.Group;
+    private settings: Settings;
+    private fontLoadAttempts: number = 0;
+
+    constructor(camera: THREE.PerspectiveCamera, scene: THREE.Scene, settings: Settings) {
+        this.scene = scene;
+        this.camera = camera;
+        this.fontLoader = new FontLoader();
+        this.font = null;
+        this.fontPath = '/fonts/helvetiker_regular.typeface.json';
+        this.labelGroup = new THREE.Group();
+        
+        // Enable both layers by default for desktop mode
+        this.labelGroup.layers.enable(0);
+        this.labelGroup.layers.enable(1);
+        
+        this.settings = settings;
+        this.scene.add(this.labelGroup);
+        this.loadFont();
+        
+        // Set initial layer mode
+        this.setXRMode(platformManager.isXRMode);
+        
+        // Listen for XR mode changes
+        platformManager.on('xrmodechange', (enabled: boolean) => {
+            this.setXRMode(enabled);
+        });
+    }
+
+    private readonly geometries = {
+        SPHERE: new THREE.SphereGeometry(1, 32, 32),
+        ICOSAHEDRON: new THREE.IcosahedronGeometry(1),
+        OCTAHEDRON: new THREE.OctahedronGeometry(1)
+    };
+
+    private async loadFont(): Promise<void> {
+        try {
+            await this.attemptFontLoad();
+        } catch (error) {
+            console.error('Initial font load failed:', error);
+            await this.retryFontLoad();
+        }
+    }
+
+    private async attemptFontLoad(): Promise<void> {
+        this.font = await new Promise((resolve, reject) => {
+            this.fontLoader.load(
+                this.fontPath,
+                resolve,
+                undefined,
+                reject
+            );
+        });
+    }
+
+    private async retryFontLoad(maxAttempts: number = 3): Promise<void> {
+        while (this.fontLoadAttempts < maxAttempts && !this.font) {
+            this.fontLoadAttempts++;
+            await new Promise(resolve => setTimeout(resolve, 1000));
+            try {
+                await this.attemptFontLoad();
+                console.log('Font loaded successfully after retry');
+                break;
+            } catch (error) {
+                console.error(`Font load attempt ${this.fontLoadAttempts} failed:`, error);
+            }
+        }
+    }
+
+    public createLabel(text: string, position: THREE.Vector3): void {
+        if (!this.font) {
+            console.warn('Font not loaded yet');
+            return;
+        }
+
+        const textGeometry = new TextGeometry(text, {
+            font: this.font,
+            size: this.settings.visualization.labels.desktopFontSize / 10 || 0.5,
+            height: 0.01 // Fixed thin height for better readability
+        });
+
+        const material = new THREE.MeshStandardMaterial({
+            color: this.settings.visualization.labels.textColor || '#ffffff',
+            metalness: 0.1,
+            roughness: 0.6,
+            emissive: this.settings.visualization.labels.textColor || '#ffffff',
+            transparent: true,
+            opacity: 1.0,
+            side: THREE.DoubleSide
+        });
+
+        // Create mesh with the text geometry and center it
+        const geometry = textGeometry as unknown as GeometryWithBoundingBox;
+        geometry.computeBoundingBox();
+        const mesh = new THREE.Mesh(geometry, material);
+        mesh.position.copy(position);
+
+        if (geometry.boundingBox) {
+            const width = geometry.boundingBox.max.x - geometry.boundingBox.min.x;
+            mesh.position.x -= width / 2;
+        }
+        
+        this.labelGroup.add(mesh);
+    }
+
+    public async createTextMesh(text: string): Promise<Mesh | Group | null> {
+        if (!this.font) {
+            console.warn('Font not loaded yet');
+            return null;
+        }
+
+        const textGeometry = new TextGeometry(text, {
+            font: this.font,
+            size: this.settings.visualization.labels.desktopFontSize / 10 || 0.5,
+            depth: 0.1, // Using depth instead of height
+            curveSegments: this.settings.visualization.labels.textResolution || 4,
+            bevelEnabled: false
+        }) as ExtendedTextGeometry;
+
+        // Compute bounding box right after creation
+        textGeometry.computeBoundingBox();
+
+        const material = new MeshStandardMaterial({
+            color: this.settings.visualization.labels.textColor || '#ffffff',
+            metalness: 0.1,
+            roughness: 0.6,
+            emissive: this.settings.visualization.labels.textColor || '#ffffff',
+            transparent: true,
+            opacity: 1.0,
+            side: DoubleSide,
+            depthWrite: true,
+            depthTest: true
+        });
+
+        // Add outline for better visibility
+        if (this.settings.visualization.labels.textOutlineWidth > 0) {
+            const outlineMaterial = new MeshBasicMaterial({
+                color: this.settings.visualization.labels.textOutlineColor || '#000000',
+                side: DoubleSide
+            });
+            
+            const outlineWidth = this.settings.visualization.labels.textOutlineWidth;
+            // Create a new geometry for the outline to avoid sharing
+            const outlineGeometry = new TextGeometry(text, {
+                font: this.font,
+                size: this.settings.visualization.labels.desktopFontSize / 10 || 0.5,
+                depth: 0.1,
+                curveSegments: this.settings.visualization.labels.textResolution || 4,
+                bevelEnabled: false
+            }) as ExtendedTextGeometry;
+            outlineGeometry.computeBoundingBox();
+            
+            const outlineMesh = new Mesh(outlineGeometry as unknown as BufferGeometry, outlineMaterial);
+            outlineMesh.scale.multiplyScalar(1 + outlineWidth);
+            
+            const group = new Group();
+            group.add(outlineMesh);
+            group.add(new Mesh(textGeometry as unknown as BufferGeometry, material));
+            
+            // Center the group
+            const bbox = textGeometry.boundingBox;
+            if (bbox) {
+                const width = bbox.max.x - bbox.min.x;
+                group.position.x -= width / 2;
+            }
+            
+            return group;
+        }
+
+        // Create mesh with the text geometry and center it
+        const bbox = textGeometry.boundingBox;
+        const mesh = new Mesh(textGeometry as unknown as BufferGeometry, material);
+
+        if (bbox) {
+            const width = bbox.max.x - bbox.min.x;
+            mesh.position.x -= width / 2;
+        }
+
+        return mesh;
+    }
+
+    public createNodeVisual = (metadata: NodeMetadata): THREE.Mesh => {
+        const geometry = this.getGeometryFromAge(metadata.commitAge);
+        const material = this.createMaterialFromHyperlinks(metadata.hyperlinkCount);
+        const mesh = new THREE.Mesh(geometry, material);
+
+        mesh.position.set(
+            metadata.position.x,
+            metadata.position.y,
+            metadata.position.z
+        );
+
+        return mesh;
+    }
+
+    private getGeometryFromAge = (age: number): THREE.BufferGeometry => {
+        if (age < 7) return this.geometries.SPHERE;
+        if (age < 30) return this.geometries.ICOSAHEDRON;
+        return this.geometries.OCTAHEDRON;
+    }
+
+    private createMaterialFromHyperlinks(count: number): THREE.Material {
+        const hue = Math.min(count / 10, 1) * 0.3; // 0 to 0.3 range
+        const color = new THREE.Color().setHSL(hue, 0.7, 0.5);
+
+        return new THREE.MeshPhongMaterial({
+            color: color,
+            shininess: 30,
+            transparent: true,
+            opacity: 0.9
+        });
+    }
+
+    public async createMetadataLabel(metadata: NodeMetadata): Promise<MetadataLabelGroup> {
+        const group = new Group() as MetadataLabelGroup;
+        group.name = 'metadata-label';
+        group.userData = { isMetadata: true };
+
+        // Create text for name
+        const nameMesh = await this.createTextMesh(metadata.name);
+        if (nameMesh) {
+            nameMesh.position.y = 1.2;
+            nameMesh.scale.setScalar(0.8);
+            group.add(nameMesh);
+        }
+
+        // Create text for commit age
+        const ageMesh = await this.createTextMesh(`${Math.round(metadata.commitAge)} days`);
+        if (ageMesh) {
+            ageMesh.position.y = 0.8;
+            ageMesh.scale.setScalar(0.7);
+            group.add(ageMesh);
+        }
+
+        // Create text for hyperlink count
+        const linksMesh = await this.createTextMesh(`${metadata.hyperlinkCount} links`);
+        if (linksMesh) {
+            linksMesh.position.y = 0.4;
+            linksMesh.scale.setScalar(0.7);
+            group.add(linksMesh);
+        }
+
+        // Set up billboarding
+        const tempVec = new Vector3();
+        const billboardMode = this.settings.visualization.labels.billboardMode;
+
+        const updateBillboard = () => {
+            if (billboardMode === 'camera') {
+                // Full billboard - always face camera
+                group.quaternion.copy(this.camera.quaternion);
+            } else {
+                // Vertical billboard - only rotate around Y axis
+                tempVec.copy(this.camera.position).sub(group.position);
+                tempVec.y = 0;
+                group.lookAt(tempVec.add(group.position));
+            }
+        };
+
+        // Add to render loop
+        const onBeforeRender = () => {
+            updateBillboard();
+        };
+        group.onBeforeRender = onBeforeRender;
+
+        // Set initial layer
+        this.setGroupLayer(group, platformManager.isXRMode);
+
+        return group;
+    }
+
+    private setGroupLayer(group: Object3D, enabled: boolean): void {
+        if (enabled) {
+            // In XR mode, only show on layer 1
+            group.traverse(child => {
+                child.layers.disable(0);
+                child.layers.enable(1);
+            });
+            group.layers.disable(0);
+            group.layers.enable(1);
+        } else {
+            // In desktop mode, show on both layers
+            group.traverse(child => {
+                child.layers.enable(0);
+                child.layers.enable(1);
+            });
+            group.layers.enable(0);
+            group.layers.enable(1);
+        }
+    }
+
+    public setXRMode(enabled: boolean): void {
+        if (enabled) {
+            // In XR mode, only show on layer 1
+            this.labelGroup.traverse(child => {
+                child.layers.disable(0);
+                child.layers.enable(1);
+            });
+            this.labelGroup.layers.disable(0);
+            this.labelGroup.layers.enable(1);
+        } else {
+            // In desktop mode, show on both layers
+            this.labelGroup.traverse(child => {
+                child.layers.enable(0);
+                child.layers.enable(1);
+            });
+            this.labelGroup.layers.enable(0);
+            this.labelGroup.layers.enable(1);
+        }
+    }
+
+    public dispose(): void {
+        // Clean up geometries
+        Object.values(this.geometries).forEach(geometry => geometry.dispose());
+        
+        // Clean up label group
+        this.labelGroup.traverse(child => {
+            if (child instanceof THREE.Mesh) {
+                child.geometry.dispose();
+                if (child.material instanceof THREE.Material) {
+                    child.material.dispose();
+                }
+            }
+        });
+    }
+}
+
+----
+xr/handInteraction.ts
+import { Vector3 } from 'three';
+import { XRHandWithHaptics } from '../types/xr';
+import { WebSocketService } from '../websocket/websocketService';
+import { NodeManagerFacade } from '../rendering/node/NodeManagerFacade';
+import { NodeInteractionManager } from '../rendering/node/interaction/NodeInteractionManager';
+import { createLogger } from '../core/logger';
+
+const _logger = createLogger('HandInteraction');
+
+export class HandInteractionManager {
+    private static instance: HandInteractionManager;
+    private lastPinchState: boolean = false;
+    private websocketService: WebSocketService;
+    private nodeManager?: NodeManagerFacade;
+    private interactionManager?: NodeInteractionManager;
+
+    private constructor() {
+        this.websocketService = WebSocketService.getInstance();
+    }
+
+    public static getInstance(): HandInteractionManager {
+        if (!HandInteractionManager.instance) {
+            HandInteractionManager.instance = new HandInteractionManager();
+        }
+        return HandInteractionManager.instance;
+    }
+
+    public setNodeManager(nodeManager: NodeManagerFacade): void {
+        this.nodeManager = nodeManager;
+        this.interactionManager = NodeInteractionManager.getInstance(nodeManager.getInstancedMesh());
+    }
+
+    public processHandInput(hand: XRHandWithHaptics): void {
+        if (!this.nodeManager || !this.interactionManager) return;
+
+        const thumbTip = hand.hand.joints['thumb-tip'];
+        const indexTip = hand.hand.joints['index-finger-tip'];
+
+        if (!thumbTip || !indexTip) return;
+
+        const distance = thumbTip.position.distanceTo(indexTip.position);
+        const pinchStrength = Math.max(0, 1 - distance / 0.05); // 5cm max distance
+        hand.pinchStrength = pinchStrength;
+
+        // Detect pinch gesture
+        const isPinching = pinchStrength > 0.9; // 90% threshold for pinch
+        if (isPinching !== this.lastPinchState) {
+            this.lastPinchState = isPinching;
+            if (isPinching) {
+                this.handlePinchGesture(indexTip.position);
+            }
+        }
+
+        // Pass hand data to interaction manager
+        this.interactionManager.handleHandInteraction(hand);
+    }
+
+    private handlePinchGesture(position: Vector3): void {
+        if (!this.nodeManager || !this.interactionManager) return;
+
+        // Get the instance mesh
+        const instanceMesh = this.nodeManager.getInstancedMesh();
+        if (!instanceMesh) return;
+
+        // Get the intersected node index
+        const intersectedNodeIndex = this.interactionManager.getIntersectedNodeIndex(position);
+        if (intersectedNodeIndex === -1) return;
+
+        // Get node ID from instance index
+        const nodeId = this.nodeManager.getNodeId(intersectedNodeIndex);
+        if (!nodeId) return;
+
+        _logger.debug(`Pinch gesture detected on node ${nodeId}`);
+        
+        // Send node position update through websocket
+        this.websocketService.sendNodeUpdates([{
+            id: nodeId,
+            position: { x: position.x, y: position.y, z: position.z },
+            velocity: { x: 0, y: 0, z: 0 }
+        }]);
+
+        // Update local node position
+        this.nodeManager.updateNodePositions([{
+            id: nodeId,
+            data: { position: [position.x, position.y, position.z], velocity: [0, 0, 0] }
+        }]);
+    }
+
+    public dispose(): void {
+        this.lastPinchState = false;
+        this.nodeManager = undefined;
+        this.interactionManager = undefined;
+    }
+}
+----
+xr/xrInitializer.ts
+import { platformManager } from '../platform/platformManager';
+import { XRSessionManager } from './xrSessionManager';
+import { createLogger } from '../core/logger';
+
+const logger = createLogger('XRInitializer');
+
+export class XRInitializer {
+    private static instance: XRInitializer | null = null;
+    private xrButton: HTMLButtonElement;
+    private xrSessionManager: XRSessionManager;
+
+    private constructor(xrSessionManager: XRSessionManager) {
+        this.xrSessionManager = xrSessionManager;
+        this.xrButton = document.getElementById('xr-button') as HTMLButtonElement;
+        if (!this.xrButton) {
+            throw new Error('XR button not found');
+        }
+        this.setupEventListeners();
+    }
+
+    public static getInstance(xrSessionManager: XRSessionManager): XRInitializer {
+        if (!XRInitializer.instance) {
+            XRInitializer.instance = new XRInitializer(xrSessionManager);
+        }
+        return XRInitializer.instance;
+    }
+
+    private isProcessingClick = false;
+    private keyboardShortcutEnabled = !platformManager.isQuest(); // Disable for Quest
+
+    private setupEventListeners(): void {
+        // Button click handler with debounce
+        this.xrButton.addEventListener('click', async () => {
+            if (this.isProcessingClick) return;
+            this.isProcessingClick = true;
+            
+            try {
+                await this.onXRButtonClick();
+            } finally {
+                // Reset after a short delay to prevent rapid clicks
+                setTimeout(() => {
+                    this.isProcessingClick = false;
+                }, 1000);
+            }
+        });
+
+        // Keyboard shortcut only for non-Quest devices
+        if (this.keyboardShortcutEnabled) {
+            document.addEventListener('keydown', (event) => {
+                if (event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'a') {
+                    this.onXRButtonClick();
+                }
+            });
+        }
+
+        // Update button visibility based on XR session state
+        this.xrSessionManager.setSessionCallbacks(
+            () => this.xrButton.classList.add('hidden'),    // onStart
+            () => this.xrButton.classList.remove('hidden'), // onEnd
+            () => {}                                        // onFrame
+        );
+
+        // Initial button state
+        this.updateButtonState();
+    }
+
+    private async updateButtonState(): Promise<void> {
+        const isQuest = platformManager.isQuest();
+        const xrSupported = platformManager.isXRSupported();
+
+        if (!xrSupported) {
+            this.xrButton.style.display = 'none';
+            return;
+        }
+
+        if (isQuest) {
+            this.xrButton.textContent = 'Enter AR';
+            this.xrButton.classList.remove('hidden');
+        } else {
+            this.xrButton.textContent = 'Enter VR';
+            this.xrButton.classList.remove('hidden');
+        }
+    }
+
+    private async onXRButtonClick(): Promise<void> {
+        try {
+            if (this.xrSessionManager.isXRPresenting()) {
+                await this.xrSessionManager.endXRSession();
+            } else {
+                await this.xrSessionManager.initXRSession();
+            }
+        } catch (error) {
+            logger.error('Failed to toggle XR session:', error);
+        }
+    }
+
+    public dispose(): void {
+        // Clean up event listeners if needed
+        XRInitializer.instance = null;
+    }
+}
+----
+xr/xrInteraction.ts
+import { XRSessionManager } from './xrSessionManager';
+import { SettingsStore } from '../state/SettingsStore';
+import { createLogger } from '../core/logger';
+import { WebSocketService } from '../websocket/websocketService';
+import { XRSettings } from '../types/settings/xr';
+import * as THREE from 'three';
+
+const logger = createLogger('XRInteraction');
+
+export class XRInteraction {
+    private static instance: XRInteraction | null = null;
+    private readonly settingsStore: SettingsStore;
+    private updateBatch: Map<string, THREE.Vector3> = new Map();
+    private batchUpdateTimeout: number | null = null;
+    private settingsUnsubscribers: Array<() => void> = [];
+    private interactionEnabled: boolean = false;
+    private websocketService: WebSocketService;
+
+    private xrManager: XRSessionManager;
+    private constructor(xrManager: XRSessionManager) {
+        this.xrManager = xrManager;
+        this.settingsStore = SettingsStore.getInstance();
+        this.websocketService = WebSocketService.getInstance();
+        this.initializeSettings();
+        this.initializeXRSession();
+    }
+
+    private async initializeXRSession(): Promise<void> {
+        try {
+            const { platformManager } = require('../platform/platformManager');
+            const settings = this.settingsStore.get('xr') as XRSettings;
+            
+            // Auto-enter AR for Quest devices if enabled in settings
+            if (platformManager.isQuest() && settings && settings.autoEnterAR) {
+                logger.info('Auto-entering AR mode for Quest device');
+                await this.xrManager.initXRSession();
+            }
+        } catch (error) {
+            logger.error('Failed to initialize XR session:', error);
+        }
+    }
+
+    private initializeSettings(): void {
+        try {
+            this.setupSettingsSubscription();
+        } catch (error) {
+            logger.error('Failed to setup settings subscription:', error);
+        }
+    }
+
+    public static getInstance(xrManager: XRSessionManager): XRInteraction {
+        if (!XRInteraction.instance) {
+            XRInteraction.instance = new XRInteraction(xrManager);
+        }
+        return XRInteraction.instance;
+    }
+
+    private setupSettingsSubscription(): void {
+        // Clear any existing subscriptions
+        this.settingsUnsubscribers.forEach(unsub => unsub());
+        this.settingsUnsubscribers = [];
+
+        // Subscribe to XR interaction enabled state
+        let unsubscriber: (() => void) | undefined;
+        this.settingsStore.subscribe('xr.interaction.enabled', (value) => {
+            this.interactionEnabled = typeof value === 'boolean' ? value : value === 'true';
+            if (!this.interactionEnabled) {
+                this.clearHandState();
+            }
+        }).then(unsub => {
+            unsubscriber = unsub;
+            if (unsubscriber) {
+                this.settingsUnsubscribers.push(unsubscriber);
+            }
+        });
+    }
+
+    private clearHandState(): void {
+        this.updateBatch.clear();
+        if (this.batchUpdateTimeout) {
+            clearTimeout(this.batchUpdateTimeout);
+            this.batchUpdateTimeout = null;
+        }
+    }
+
+    private scheduleFlush(): void {
+        if (this.batchUpdateTimeout !== null) return;
+        
+        this.batchUpdateTimeout = requestAnimationFrame(() => {
+            this.flushPositionUpdates();
+            this.batchUpdateTimeout = null;
+        });
+    }
+
+    private flushPositionUpdates(): void {
+        if (this.updateBatch.size === 0) return;
+
+        const updates = Array.from(this.updateBatch.entries()).map(([id, position]) => ({
+            id,
+            position: {
+                x: position.x,
+                y: position.y,
+                z: position.z
+            }
+        }));
+
+        this.websocketService.sendNodeUpdates(updates);
+        this.updateBatch.clear();
+    }
+
+    public update(): void {
+        if (!this.interactionEnabled) return;
+        this.scheduleFlush();
+    }
+
+    public dispose(): void {
+        // Clear subscriptions
+        this.settingsUnsubscribers.forEach(unsub => unsub());
+        this.settingsUnsubscribers = [];
+
+        // Flush any pending updates
+        this.flushPositionUpdates();
+
+        XRInteraction.instance = null;
+    }
+}
+
+----
+xr/xrSessionManager.ts
+import {
+    Group,
+    GridHelper,
+    PlaneGeometry,
+    MeshPhongMaterial,
+    Mesh,
+    RingGeometry,
+    MeshBasicMaterial,
+    DirectionalLight,
+    SphereGeometry,
+    Color,
+    DoubleSide
+} from 'three';
+import { XRControllerModelFactory } from 'three/examples/jsm/webxr/XRControllerModelFactory';
+import { createLogger } from '../core/utils';
+import { platformManager } from '../platform/platformManager';
+import { SceneManager } from '../rendering/scene';
+import { BACKGROUND_COLOR } from '../core/constants';
+import { debugState } from '../core/debugState';
+import { NodeManagerFacade } from '../rendering/node/NodeManagerFacade';
+import { MaterialFactory } from '../rendering/factories/MaterialFactory';
+import { ModularControlPanel } from '../ui/ModularControlPanel';
+import { SettingsStore } from '../state/SettingsStore';
+import { Settings } from '../types/settings/base';
+import { XRSettings } from '../types/settings/xr';
+const logger = createLogger('XRSessionManager');
+
+export class XRSessionManager {
+    private static instance: XRSessionManager | null = null;
+    private readonly sceneManager: SceneManager;
+    private readonly settingsStore: SettingsStore;
+    private readonly nodeManager: NodeManagerFacade;
+    private session: XRSession | null = null;
+    /* @ts-ignore - Used in XR session lifecycle */
+    private referenceSpace: XRReferenceSpace | null = null;
+    private isPresenting: boolean = false;
+    private settingsUnsubscribe: (() => void) | null = null;
+    private currentSettings: XRSettings;
+    /* @ts-ignore - Used in XR session lifecycle */
+    private hitTestSourceRequested = false;
+    /* @ts-ignore - Used in XR session lifecycle */
+    private xrAnimationFrameCallback: ((frame: XRFrame) => void) | null = null;
+
+    // XR specific objects
+    private cameraRig: Group;
+    private arGroup: Group; // Group for AR environment elements (grid, ground plane, etc.)
+    private arGraphGroup: Group; // Separate group for graph nodes in AR
+    private arUIGroup: Group; // Group for UI elements in AR
+    private controllers: Group[];
+    private controllerGrips: Group[];
+    private controllerModelFactory: XRControllerModelFactory;
+
+    // AR specific objects
+    private gridHelper: GridHelper;
+    private groundPlane: Mesh;
+    private hitTestMarker: Mesh;
+    private arLight: DirectionalLight;
+    private hitTestSource: XRHitTestSource | null = null;
+
+    // Event handlers
+    private xrSessionStartCallback: (() => void) | null = null;
+    private xrSessionEndCallback: (() => void) | null = null;
+    private controllerAddedCallback: ((controller: Group) => void) | null = null;
+    private controllerRemovedCallback: ((controller: Group) => void) | null = null;
+
+    private constructor(sceneManager: SceneManager) {
+        this.sceneManager = sceneManager;
+        this.settingsStore = SettingsStore.getInstance();
+        const settings = this.settingsStore.get('') as Settings;
+        const materialFactory = MaterialFactory.getInstance();
+        this.nodeManager = NodeManagerFacade.getInstance(
+            sceneManager.getScene(),
+            sceneManager.getCamera(),
+            materialFactory.getNodeMaterial(settings)
+        );
+        // Initialize with current settings
+        this.currentSettings = this.settingsStore.get('xr') as XRSettings;
+        
+        // Set up settings subscription
+        this.setupSettingsSubscription();
+        
+        // Initialize XR objects
+        this.cameraRig = new Group();
+        this.arGroup = new Group(); // Group for AR elements
+        this.arGraphGroup = new Group(); // Group for graph nodes in AR
+        this.arUIGroup = new Group(); // Group for UI elements in AR
+        this.controllers = [new Group(), new Group()];
+        this.controllerGrips = [new Group(), new Group()];
+        this.controllerModelFactory = new XRControllerModelFactory();
+
+        // Set up AR group hierarchy
+        this.arGroup.add(this.arGraphGroup);
+        this.arGroup.add(this.arUIGroup);
+
+        // Initialize AR objects
+        this.gridHelper = this.createGridHelper();
+        this.groundPlane = this.createGroundPlane();
+        this.hitTestMarker = this.createHitTestMarker();
+        this.arLight = this.createARLight();
+
+        this.setupXRObjects();
+    }
+
+    private async setupSettingsSubscription(): Promise<void> {
+        // Subscribe to XR settings changes
+        this.settingsUnsubscribe = await this.settingsStore.subscribe('xr', () => {
+            this.currentSettings = this.settingsStore.get('xr') as XRSettings;
+            this.applyXRSettings();
+        });
+    }
+
+    private createGridHelper(): GridHelper {
+        const grid = new GridHelper(0.5, 5, 0x808080, 0x808080); // 0.5 meter grid with 5x5 divisions
+        grid.material.transparent = true;
+        grid.material.opacity = 0.5;
+        grid.position.y = -0.01; // Slightly below ground to avoid z-fighting
+        grid.visible = false; // Start hidden until AR session begins
+        grid.layers.enable(0); // Enable default layer
+        grid.layers.enable(1); // Enable AR layer
+        return grid;
+    }
+
+    private createGroundPlane(): Mesh {
+        const geometry = new PlaneGeometry(0.5, 0.5); // 0.5x0.5 meter plane
+        const material = new MeshPhongMaterial({
+            color: 0x999999,
+            transparent: true,
+            opacity: 0.3,
+            side: DoubleSide
+        });
+        const plane = new Mesh(geometry, material);
+        plane.rotateX(-Math.PI / 2);
+        plane.position.y = -0.02; // Below grid
+        plane.visible = false; // Start hidden until AR session begins
+        plane.layers.enable(0); // Enable default layer
+        plane.layers.enable(1); // Enable AR layer
+        return plane;
+    }
+
+    private createHitTestMarker(): Mesh {
+        const geometry = new RingGeometry(0.15, 0.2, 32);
+        const material = new MeshBasicMaterial({
+            color: 0xffffff,
+            transparent: true,
+            opacity: 0.8,
+            side: DoubleSide
+        });
+        const marker = new Mesh(geometry, material);
+        marker.rotateX(-Math.PI / 2);
+        marker.visible = false;
+        marker.layers.enable(0); // Enable default layer
+        marker.layers.enable(1); // Enable AR layer
+        return marker;
+    }
+
+    private createARLight(): DirectionalLight {
+        const light = new DirectionalLight(0xffffff, 1);
+        light.position.set(1, 1, 1);
+        light.layers.enable(0); // Enable default layer
+        light.layers.enable(1); // Enable AR layer
+        return light;
+    }
+
+    private setupXRObjects(): void {
+        const scene = this.sceneManager.getScene();
+        
+        // Reset and verify initial scales
+        this.cameraRig.scale.setScalar(1);
+        this.arGroup.scale.setScalar(1);
+        this.arGraphGroup.scale.setScalar(1);
+        if (debugState.isEnabled() && platformManager.isQuest()) {
+            logger.info('Initial scales:', { cameraRig: this.cameraRig.scale.x, arGroup: this.arGroup.scale.x, arGraphGroup: this.arGraphGroup.scale.x });
+        }
+        
+        // Add camera rig to scene
+        scene.add(this.cameraRig);
+
+        // Add AR group to camera rig
+        this.cameraRig.add(this.arGroup);
+
+        // Add AR objects to AR group
+        this.arGroup.add(this.gridHelper);
+        this.arGroup.add(this.groundPlane);
+        this.arGroup.add(this.hitTestMarker);
+        this.arGroup.add(this.arLight);
+        this.arGroup.add(this.arGraphGroup);
+
+        // Setup controllers
+        this.controllers.forEach((_controller: Group, index: number) => {
+            this.setupController(index);
+        });
+
+        // Setup controller grips
+        this.controllerGrips.forEach((grip: Group) => {
+            this.setupControllerGrip(grip);
+        });
+    }
+
+    private setupController(index: number): void {
+        const controller = this.controllers[index];
+        const controllerGrip = this.controllerGrips[index];
+
+        // Store event handlers as properties for proper cleanup
+        const onControllerConnected = (event: any) => {
+            const inputSource = event.data;
+            controller.userData.inputSource = inputSource;
+            const controllerModel = this.buildController(inputSource);
+            controller.add(controllerModel);
+            this.notifyControllerAdded(controller);
+        };
+
+        const onControllerDisconnected = () => {
+            controller.userData.inputSource = null;
+            controller.remove(...controller.children);
+            this.notifyControllerRemoved(controller);
+        };
+
+        // Store handlers in userData for cleanup
+        controller.userData.eventHandlers = {
+            connected: onControllerConnected,
+            disconnected: onControllerDisconnected
+        };
+
+        controller.addEventListener('connected', onControllerConnected);
+        controller.addEventListener('disconnected', onControllerDisconnected);
+
+        this.cameraRig.add(controller);
+        this.cameraRig.add(controllerGrip);
+    }
+
+    private setupControllerGrip(grip: Group): void {
+        const controllerModel = this.controllerModelFactory.createControllerModel(grip);
+        grip.add(controllerModel);
+    }
+
+    private buildController(_inputSource: XRInputSource): Group {
+        const controller = new Group();
+        const geometry = new SphereGeometry(0.1, 16, 16);
+        const material = new MeshBasicMaterial({ color: 0xffffff });
+        const sphere = new Mesh(geometry, material);
+        controller.add(sphere);
+        return controller;
+    }
+
+    public static getInstance(sceneManager: SceneManager): XRSessionManager {
+        if (!XRSessionManager.instance) {
+            XRSessionManager.instance = new XRSessionManager(sceneManager);
+        }
+        return XRSessionManager.instance;
+    }
+
+    public setSessionCallbacks(
+        onStart: () => void,
+        onEnd: () => void,
+        onFrame: (frame: XRFrame) => void
+    ): void {
+        this.xrSessionStartCallback = onStart;
+        this.xrSessionEndCallback = onEnd;
+        this.xrAnimationFrameCallback = onFrame;
+    }
+
+    public isXRPresenting(): boolean {
+        return this.isPresenting;
+    }
+
+    public async initXRSession(): Promise<void> {
+        if (this.isPresenting) {
+            if (debugState.isEnabled()) {
+                logger.warn('XR session already active');
+            }
+            return;
+        }
+
+        if (!platformManager.getCapabilities().xrSupported || !navigator.xr) {
+            throw new Error('XR not supported on this platform');
+        }
+
+        try {
+            // Check if session mode is supported
+            const mode = platformManager.isQuest() ? 'immersive-ar' : 'immersive-vr';
+            const isSupported = await navigator.xr.isSessionSupported(mode);
+            
+            if (!isSupported) {
+                throw new Error(`${mode} not supported on this device`);
+            }
+            
+            // Configure features based on mode and platform
+            const requiredFeatures = ['local-floor'];
+            const optionalFeatures = ['hand-tracking', 'layers'];
+            
+            // Add mode-specific features for Quest
+            if (platformManager.isQuest()) {
+                requiredFeatures.push('hit-test');
+                optionalFeatures.push(
+                    'light-estimation',
+                    'plane-detection',
+                    'anchors',
+                    'depth-sensing',
+                    'dom-overlay'
+                );
+            }
+            
+            // Request session with configured features
+            const sessionInit: XRSessionInit = {
+                requiredFeatures,
+                optionalFeatures,
+                domOverlay: platformManager.isQuest() ? { root: document.body } : undefined
+            };
+            
+            if (debugState.isEnabled()) {
+                logger.info('Requesting XR session with config:', {
+                    mode,
+                    features: sessionInit
+                });
+            }
+            
+            const session = await navigator.xr.requestSession(mode, sessionInit);
+
+            if (!session) {
+                throw new Error('Failed to create XR session');
+            }
+
+            this.session = session;
+
+            // Setup XR rendering
+            const renderer = this.sceneManager.getRenderer();
+            await renderer.xr.setSession(this.session);
+            
+            // Configure renderer for AR
+            renderer.xr.enabled = true;
+            
+            // Set up scene for XR mode
+            const scene = this.sceneManager.getScene();
+            if (platformManager.isQuest()) {
+                // Clear background for AR passthrough
+                scene.background = null;
+            } else {
+                // Keep background for VR mode
+                scene.background = new Color(BACKGROUND_COLOR);
+            }
+            
+            // Get reference space based on platform
+            const spaceType = platformManager.isQuest() ? 'local-floor' : 'bounded-floor';
+            this.referenceSpace = await this.session.requestReferenceSpace(spaceType);
+            
+            // Setup session event handlers
+            this.session.addEventListener('end', this.onXRSessionEnd);
+
+            // Enable AR layer for camera
+            const camera = this.sceneManager.getCamera();
+            camera.layers.enable(1);
+            
+            // Apply AR scale if in AR mode
+            if (platformManager.isQuest()) {
+                // Use direct room scale for better AR sizing
+                // Apply a base scale of 0.001 for AR to make objects more manageable
+                const arScale = this.currentSettings.roomScale * 0.001;
+                if (debugState.isEnabled()) {
+                    logger.info('Setting initial AR scale:', { 
+                        arScale, 
+                        roomScale: this.currentSettings.roomScale,
+                        cameraRigScale: this.cameraRig.scale.x,
+                        arGroupScale: this.arGroup.scale.x,
+                        arGraphGroupScale: this.arGraphGroup.scale.x,
+                        currentGroupScale: this.arGroup.scale.x
+                    });
+                }
+
+                this.arGroup.scale.setScalar(arScale);
+                
+                // Move node instances to arGroup for proper scaling
+                const instanceMesh = this.nodeManager.getInstancedMesh();
+                if (instanceMesh) {
+                    // Enable both layers for the mesh and its children
+                    instanceMesh.layers.enable(0);
+                    instanceMesh.layers.enable(1);
+                    instanceMesh.traverse((child: any) => {
+                        if (child.layers) {
+                            child.layers.enable(0);
+                            child.layers.enable(1);
+                        }
+                    });
+                    this.arGroup.add(instanceMesh);
+                }
+            }
+
+            // Reset camera rig position
+            this.cameraRig.position.set(0, 0, 0);
+            this.cameraRig.quaternion.identity();
+
+            // Show AR visualization elements after a short delay to ensure proper placement
+            setTimeout(() => {
+                this.gridHelper.visible = true;
+                this.groundPlane.visible = true;
+                this.arLight.visible = true;
+            }, 1000);
+            
+            this.isPresenting = true;
+            if (debugState.isEnabled()) {
+                logger.info('XR session initialized');
+            }
+
+            // Hide control panel in XR mode
+            const controlPanel = ModularControlPanel.getInstance();
+            if (controlPanel) {
+                controlPanel.hide();
+            }
+
+            // Notify session start
+            if (this.xrSessionStartCallback) {
+                this.xrSessionStartCallback();
+            }
+        } catch (error) {
+            if (debugState.isEnabled()) {
+                logger.error('Failed to initialize XR session:', error);
+            }
+            throw error;
+        }
+    }
+
+    public async endXRSession(): Promise<void> {
+        if (this.session) {
+            await this.session.end();
+        }
+    }
+
+    public getControllers(): Group[] {
+        return this.controllers;
+    }
+
+    public getControllerGrips(): Group[] {
+        return this.controllerGrips;
+    }
+
+    private notifyControllerAdded(controller: Group): void {
+        if (this.controllerAddedCallback) {
+            this.controllerAddedCallback(controller);
+        }
+    }
+
+    private notifyControllerRemoved(controller: Group): void {
+        if (this.controllerRemovedCallback) {
+            this.controllerRemovedCallback(controller);
+        }
+    }
+
+    private onXRSessionEnd = (): void => {
+        // Clean up hit test source
+        if (this.hitTestSource) {
+            this.hitTestSource.cancel();
+            this.hitTestSource = null;
+        }
+        
+        // Reset session state
+        this.session = null;
+        this.referenceSpace = null;
+        this.hitTestSourceRequested = false;
+        this.isPresenting = false;
+
+        // Hide AR visualization elements if in Quest mode
+        if (platformManager.isQuest()) {
+            this.gridHelper.visible = false;
+            this.groundPlane.visible = false;
+            this.hitTestMarker.visible = false;
+            this.arLight.visible = false;
+            
+            // Move node instances back to main scene
+            const instanceMesh = this.nodeManager.getInstancedMesh();
+            if (instanceMesh) {
+                this.sceneManager.getScene().add(instanceMesh);
+            }
+        }
+
+        // Reset camera and scene
+        this.cameraRig.position.set(0, 0, 0);
+        this.cameraRig.quaternion.identity();
+
+        // Reset scene background
+        const scene = this.sceneManager.getScene();
+        scene.background = new Color(BACKGROUND_COLOR);
+
+        // Reset camera layers
+        const camera = this.sceneManager.getCamera();
+        camera.layers.disable(1); // AR layer
+
+        // Reset renderer
+        const renderer = this.sceneManager.getRenderer();
+        renderer.xr.enabled = false;
+
+        if (debugState.isEnabled()) {
+            logger.info('XR session ended');
+        }
+
+        // Show control panel and notify session end (only once)
+        ModularControlPanel.getInstance()?.show();
+        this.xrSessionEndCallback?.();
+    }
+
+    private applyXRSettings(): void {
+        if (!this.isPresenting) return;
+
+        // Update movement settings
+        const controllers = this.getControllers();
+        controllers.forEach(controller => {
+            const inputSource = controller.userData.inputSource as XRInputSource;
+            if (inputSource?.gamepad) {
+                // Settings will be applied on next frame in onXRFrame
+            }
+        });
+
+        // Update visual settings if needed
+        if (this.currentSettings.handMeshEnabled !== undefined) {
+            controllers.forEach(controller => {
+                controller.traverse((object: { name?: string; visible: boolean }) => {
+                    if (object.name === 'handMesh') {
+                        object.visible = !!this.currentSettings.handMeshEnabled;
+                    }
+                });
+            });
+        }
+
+        if (this.currentSettings.handRayEnabled !== undefined) {
+            controllers.forEach(controller => {
+                controller.traverse((object: { name?: string; visible: boolean }) => {
+                    if (object.name === 'ray') {
+                        object.visible = !!this.currentSettings.handRayEnabled;
+                    }
+                });
+            });
+        }
+
+        // Update room scale if changed
+        if (this.currentSettings.roomScale !== undefined) {
+            if (platformManager.isQuest()) {
+                // Apply a base scale of 0.001 for AR to make objects more manageable
+                const arScale = Number(this.currentSettings.roomScale) * 0.001;
+                if (debugState.isEnabled()) {
+                    logger.info('Updating AR scale:', { 
+                        arScale, 
+                        roomScale: this.currentSettings.roomScale,
+                        cameraRigScale: this.cameraRig.scale.x,
+                        arGroupScale: this.arGroup.scale.x,
+                        arGraphGroupScale: this.arGraphGroup.scale.x,
+                        currentGroupScale: this.arGroup.scale.x
+                    });
+                }
+                this.arGroup.scale.setScalar(arScale);
+            } else {
+                this.cameraRig.scale.setScalar(Number(this.currentSettings.roomScale));
+            }
+        }
+    }
+
+    public dispose(): void {
+        if (this.settingsUnsubscribe) {
+            this.settingsUnsubscribe();
+            this.settingsUnsubscribe = null;
+        }
+
+        if (this.session) {
+            this.session.removeEventListener('end', this.onXRSessionEnd);
+            this.session.end().catch(console.error);
+        }
+
+        this.controllers.forEach(controller => {
+            const handlers = controller.userData.eventHandlers;
+            if (handlers) {
+                controller.removeEventListener('connected', handlers.connected);
+                controller.removeEventListener('disconnected', handlers.disconnected);
+                delete controller.userData.eventHandlers;
+            }
+            controller.userData.inputSource = null;
+        });
+
+        this.controllerGrips.forEach(grip => {
+            grip.remove(...grip.children);
+        });
+
+        this.hitTestSource?.cancel();
+        this.hitTestSource = null;
+        this.hitTestSourceRequested = false;
+
+        this.session = null;
+        this.referenceSpace = null;
+        this.isPresenting = false;
+
+        this.xrSessionStartCallback = null;
+        this.xrSessionEndCallback = null;
+        this.xrAnimationFrameCallback = null;
+        this.controllerAddedCallback = null;
+        this.controllerRemovedCallback = null;
+
+        XRSessionManager.instance = null;
+    }
+}
+
+----
+xr/xrTypes.ts
+import * as THREE from 'three';
+
+export interface XRHandWithHaptics {
+    hand: {
+        joints: {
+            [key: string]: THREE.Object3D;
+        };
+    };
+    hapticActuators: any[];
+    pinchStrength: number;
+    gripStrength: number;
+}
+
+export interface XRControllerState {
+    position: THREE.Vector3;
+    rotation: THREE.Quaternion;
+    hapticActuator?: any;
+}
+
+export interface XRHandState {
+    position: THREE.Vector3;
+    joints: Map<string, THREE.Object3D>;
+    pinchStrength: number;
+    gripStrength: number;
+}
+
+----
+audio/AudioPlayer.ts
+export interface AudioPlayerOptions {
+    sampleRate?: number;
+    channels?: number;
+    bufferSize?: number;
+}
+
+export class AudioPlayer {
+    private audioContext: AudioContext;
+    private audioQueue: AudioBuffer[] = [];
+    private isPlaying = false;
+    private gainNode: GainNode;
+    private options: Required<AudioPlayerOptions>;
+
+    constructor(options: AudioPlayerOptions = {}) {
+        this.options = {
+            sampleRate: options.sampleRate || 24000, // Kokoros default sample rate
+            channels: options.channels || 1,
+            bufferSize: options.bufferSize || 4096,
+        };
+
+        this.audioContext = new AudioContext({
+            sampleRate: this.options.sampleRate,
+            latencyHint: 'interactive',
+        });
+
+        this.gainNode = this.audioContext.createGain();
+        this.gainNode.connect(this.audioContext.destination);
+        this.setVolume(1.0); // Default volume
+    }
+
+    public setVolume(value: number): void {
+        if (value >= 0 && value <= 1) {
+            this.gainNode.gain.value = value;
+        }
+    }
+
+    public async handleAudioChunk(data: ArrayBuffer, isLastChunk: boolean): Promise<void> {
+        try {
+            const audioBuffer = await this.decodeAudioData(data);
+            this.audioQueue.push(audioBuffer);
+            
+            if (!this.isPlaying) {
+                await this.playNextChunk();
+            }
+            
+            if (isLastChunk) {
+                this.clear(); // Clear the queue after playing the last chunk
+            }
+        } catch (error) {
+            console.error('Error handling audio chunk:', error);
+        }
+    }
+
+    private async decodeAudioData(data: ArrayBuffer): Promise<AudioBuffer> {
+        return new Promise((resolve, reject) => {
+            this.audioContext.decodeAudioData(
+                data,
+                (buffer) => resolve(buffer),
+                (error) => reject(error)
+            );
+        });
+    }
+
+    private async playNextChunk(): Promise<void> {
+        if (this.audioQueue.length === 0) {
+            this.isPlaying = false;
+            return;
+        }
+
+        this.isPlaying = true;
+        const buffer = this.audioQueue.shift()!;
+        const source = this.audioContext.createBufferSource();
+        
+        source.buffer = buffer;
+        source.connect(this.gainNode);
+        
+        return new Promise((resolve) => {
+            source.onended = () => {
+                this.playNextChunk().then(resolve);
+            };
+            
+            source.start();
+        });
+    }
+
+    public async resume(): Promise<void> {
+        if (this.audioContext.state === 'suspended') {
+            await this.audioContext.resume();
+        }
+    }
+
+    public async pause(): Promise<void> {
+        if (this.audioContext.state === 'running') {
+            await this.audioContext.suspend();
+        }
+    }
+
+    public stop(): void {
+        this.audioQueue = [];
+        this.isPlaying = false;
+        this.audioContext.close();
+    }
+
+    public clear(): void {
+        this.audioQueue = [];
+    }
+
+    public getState(): AudioContextState {
+        return this.audioContext.state;
+    }
+
+    public getQueueLength(): number {
+        return this.audioQueue.length;
+    }
+}
+
+// Singleton instance for global access
+let audioPlayerInstance: AudioPlayer | null = null;
+
+export function getAudioPlayer(options?: AudioPlayerOptions): AudioPlayer {
+    if (!audioPlayerInstance) {
+        audioPlayerInstance = new AudioPlayer(options);
+    }
+    return audioPlayerInstance;
+}
+
+export function disposeAudioPlayer(): void {
+    if (audioPlayerInstance) {
+        audioPlayerInstance.stop();
+        audioPlayerInstance = null;
+    }
+}
+
+// Error handling
+export class AudioPlayerError extends Error {
+    constructor(message: string) {
+        super(message);
+        this.name = 'AudioPlayerError';
+    }
+}
+
+// Types for WebSocket messages
+export interface VoiceDataMessage {
+    chunkId: number;
+    isFinal: boolean;
+    data: ArrayBuffer;
+}
+
+// Example usage:
+/*
+const player = getAudioPlayer();
+
+// Handle incoming WebSocket message
+ws.onmessage = async (event) => {
+    if (event.data instanceof ArrayBuffer) {
+        const view = new DataView(event.data);
+        const messageType = view.getUint8(0);
+        
+        if (messageType === 1) { // VoiceData type
+            const chunkId = view.getUint32(1, true);
+            const isFinal = Boolean(view.getUint8(5));
+            const dataSize = view.getUint32(6, true);
+            const audioData = event.data.slice(10, 10 + dataSize);
+            
+            await player.handleAudioChunk(audioData, isFinal);
+        }
+    }
+};
+*/
+----
+config/featureFlags.ts
+import { createLogger } from '../core/logger';
+
+const logger = createLogger('FeatureFlags');
+
+/**
+ * Feature flag configuration interface
+ */
+export interface FeatureFlags {
+    enableLOD: boolean;
+}
+
+/**
+ * Default feature flag values
+ */
+const defaultFlags: FeatureFlags = {
+    enableLOD: true,  // Enable Level of Detail system
+};
+
+/**
+ * Feature flag manager class
+ */
+export class FeatureFlagManager {
+    private static instance: FeatureFlagManager;
+    private flags: FeatureFlags;
+    private listeners: Set<(flags: FeatureFlags) => void>;
+
+    private constructor() {
+        this.flags = { ...defaultFlags };
+        this.listeners = new Set();
+        
+        // Load flags from localStorage if available
+        if (typeof window !== 'undefined' && window.localStorage) {
+            const savedFlags = localStorage.getItem('featureFlags');
+            if (savedFlags) {
+                try {
+                    const parsed = JSON.parse(savedFlags);
+                    this.flags = {
+                        ...defaultFlags,
+                        ...parsed
+                    };
+                    logger.info('Loaded feature flags from localStorage');
+                } catch (error) {
+                    logger.error('Failed to parse feature flags from localStorage:', error);
+                }
+            }
+        }
+    }
+
+    public static getInstance(): FeatureFlagManager {
+        if (!FeatureFlagManager.instance) {
+            FeatureFlagManager.instance = new FeatureFlagManager();
+        }
+        return FeatureFlagManager.instance;
+    }
+
+    /**
+     * Get current state of all feature flags
+     */
+    public getFlags(): FeatureFlags {
+        return { ...this.flags };
+    }
+
+    /**
+     * Check if a specific feature is enabled
+     */
+    public isEnabled(feature: keyof FeatureFlags): boolean {
+        return this.flags[feature];
+    }
+
+    /**
+     * Update feature flags
+     */
+    public updateFlags(updates: Partial<FeatureFlags>): void {
+        const oldFlags = { ...this.flags };
+        this.flags = {
+            ...this.flags,
+            ...updates
+        };
+
+        // Save to localStorage if available
+        if (typeof window !== 'undefined' && window.localStorage) {
+            try {
+                localStorage.setItem('featureFlags', JSON.stringify(this.flags));
+            } catch (error) {
+                logger.error('Failed to save feature flags to localStorage:', error);
+            }
+        }
+
+        // Log changes
+        Object.keys(updates).forEach(key => {
+            const feature = key as keyof FeatureFlags;
+            if (oldFlags[feature] !== this.flags[feature]) {
+                logger.info(`Feature flag "${feature}" changed:`, {
+                    from: oldFlags[feature],
+                    to: this.flags[feature]
+                });
+            }
+        });
+
+        // Notify listeners
+        this.notifyListeners();
+    }
+
+    /**
+     * Subscribe to feature flag changes
+     */
+    public subscribe(callback: (flags: FeatureFlags) => void): () => void {
+        this.listeners.add(callback);
+        return () => {
+            this.listeners.delete(callback);
+        };
+    }
+
+    /**
+     * Reset all flags to default values
+     */
+    public reset(): void {
+        this.updateFlags(defaultFlags);
+        logger.info('Reset all feature flags to defaults');
+    }
+
+    private notifyListeners(): void {
+        const flags = this.getFlags();
+        this.listeners.forEach(listener => {
+            try {
+                listener(flags);
+            } catch (error) {
+                logger.error('Error in feature flag listener:', error);
+            }
+        });
+    }
+}
+
+// Export singleton instance
+export const featureFlags = FeatureFlagManager.getInstance();
+----
+core/api.ts
+import { API_ENDPOINTS } from './constants';
+
+// Helper function to build API URLs
+export function buildApiUrl(path: string): string {
+    const protocol = window.location.protocol;
+    const host = window.location.hostname;
+    // Check if we're in production (any visionflow.info domain)
+    const isProduction = host.endsWith('visionflow.info');
+    const base = isProduction 
+        ? `${protocol}//${host}`
+        : `${protocol}//${host}:4000`;
+    return `${base}${path}`; // All paths are already prefixed with /api in constants.ts
+}
+
+// Helper function to build settings URL
+export function buildSettingsUrl(category: string): string {
+    return `${API_ENDPOINTS.SETTINGS_ROOT}/${category}`;
+}
+
+// Helper function to build graph URL
+export function buildGraphUrl(type: 'data' | 'update' | 'paginated'): string {
+    switch (type) {
+        case 'paginated':
+            return API_ENDPOINTS.GRAPH_PAGINATED;
+        case 'update':
+            return API_ENDPOINTS.GRAPH_UPDATE;
+        default:
+            return API_ENDPOINTS.GRAPH_DATA;
+    }
+}
+
+// Helper function to build files URL
+export function buildFilesUrl(path: string): string {
+    return `${API_ENDPOINTS.FILES}/${path}`;
+}
+
+// Helper function to build WebSocket URL
+export function buildWsUrl(): string {
+    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
+    const host = window.location.hostname;
+    // Check if we're in production (any visionflow.info domain)
+    const isProduction = host.endsWith('visionflow.info');
+    const port = isProduction ? '' : ':4000';
+    const base = `${protocol}//${host}${port}`;
+    const wsPath = '/wss';
+    return `${base}${wsPath}`;
+}
+
+// Helper function to build visualization settings URL
+export function buildVisualizationSettingsUrl(): string {
+    return API_ENDPOINTS.VISUALIZATION_SETTINGS;
+}
+
+// Helper function to build WebSocket control URL
+export function buildWebSocketControlUrl(): string {
+    return API_ENDPOINTS.WEBSOCKET_CONTROL;
+}
+
+// Helper function to build WebSocket settings URL
+export function buildWebSocketSettingsUrl(): string {
+    return API_ENDPOINTS.WEBSOCKET_SETTINGS;
+}
+
+----
+core/constants.ts
+/**
+ * Application constants
+ */
+
+// Environment detection
+export const IS_DEVELOPMENT = process.env.NODE_ENV !== 'production';
+
+// API configuration
+export const API_BASE = '';  // Base URL is constructed in buildApiUrl
+
+// API paths
+export const API_PATHS = {
+    SETTINGS: 'settings',
+    WEBSOCKET: 'websocket',
+    GRAPH: 'graph',
+    FILES: 'files'
+} as const;
+
+// API endpoints
+export const API_ENDPOINTS = {
+    // Graph endpoints
+    GRAPH_DATA: '/api/graph/data',
+    GRAPH_UPDATE: '/api/graph/update',
+    GRAPH_PAGINATED: '/api/graph/data/paginated',
+    
+    // Settings endpoints
+    SETTINGS_ROOT: '/api/settings',
+    VISUALIZATION_SETTINGS: '/api/settings/visualization',
+    WEBSOCKET_SETTINGS: '/api/settings/websocket',
+    
+    // WebSocket endpoints
+    WEBSOCKET_CONTROL: '/api/websocket/control',
+    
+    // File endpoints
+    FILES: '/api/files',
+    
+    // Auth endpoints
+    AUTH_NOSTR: '/api/auth/nostr',
+    AUTH_NOSTR_VERIFY: '/api/auth/nostr/verify',
+    AUTH_NOSTR_LOGOUT: '/api/auth/nostr/logout'
+} as const;
+
+export type ApiEndpoints = typeof API_ENDPOINTS[keyof typeof API_ENDPOINTS];
+
+// Settings categories matching server's snake_case
+export const SETTINGS_CATEGORIES = {
+    // Visualization settings
+    NODES: 'nodes',
+    EDGES: 'edges',
+    PHYSICS: 'physics',
+    RENDERING: 'rendering',
+    ANIMATIONS: 'animations',
+    LABELS: 'labels',
+    BLOOM: 'bloom',
+    HOLOGRAM: 'hologram',
+    XR: 'xr',
+    
+    // System settings
+    NETWORK: 'network',
+    WEBSOCKET: 'websocket',
+    DEBUG: 'debug',
+} as const;
+
+// WebSocket configuration
+export const WS_MESSAGE_QUEUE_SIZE = 1000;
+
+// Binary protocol configuration
+export const FLOATS_PER_NODE = 6;  // x, y, z, vx, vy, vz
+export const VERSION_OFFSET = 0;    // No version header
+export const BINARY_CHUNK_SIZE = 1000; // Number of nodes to process in one chunk
+export const NODE_POSITION_SIZE = 24;  // 6 floats * 4 bytes (position + velocity)
+
+// Performance configuration
+export const THROTTLE_INTERVAL = 16; // ~60fps
+export const EDGE_UPDATE_BATCH_INTERVAL = 16; // Batch edge updates at ~60fps
+
+// Visualization constants
+export const NODE_SIZE = 0.5;
+export const NODE_SEGMENTS = 16;
+export const EDGE_RADIUS = 0.25;
+export const EDGE_SEGMENTS = 8;
+
+// Font configuration
+export const FONT_URL = '/fonts/Roboto-Regular.woff2';
+
+// Colors
+export const NODE_COLOR = 0x4CAF50;  // Material Design Green
+export const NODE_HIGHLIGHT_COLOR = 0xff4444;  // Material Design Red
+export const EDGE_COLOR = 0xE0E0E0;  // Material Design Grey 300
+export const BACKGROUND_COLOR = 0x212121;  // Material Design Grey 900
+export const LABEL_COLOR = 0xFFFFFF;  // White
+
+// Debug configuration
+export const DEBUG = {
+    NETWORK_PANEL: {
+        MAX_MESSAGES: 50,
+        ENABLED: IS_DEVELOPMENT
+    }
+};
+
+----
+core/debugState.ts
+import { SettingsStore } from '../state/SettingsStore';
+
+export interface DebugState {
+    enabled: boolean;
+    logFullJson: boolean;
+    enableDataDebug: boolean;
+    enableWebsocketDebug: boolean;
+    logBinaryHeaders: boolean;
+}
+
+class DebugStateManager {
+    private static instance: DebugStateManager | null = null;
+    private state: DebugState = {
+        enabled: false,
+        logFullJson: false,
+        enableDataDebug: false,
+        enableWebsocketDebug: false,
+        logBinaryHeaders: false
+    };
+
+    private constructor() {}
+
+    public static getInstance(): DebugStateManager {
+        if (!DebugStateManager.instance) {
+            DebugStateManager.instance = new DebugStateManager();
+        }
+        return DebugStateManager.instance;
+    }
+
+    public async initialize(): Promise<void> {
+        const settingsStore = SettingsStore.getInstance();
+        await settingsStore.initialize();
+
+        // Load initial debug settings
+        this.state = {
+            enabled: settingsStore.get('system.debug.enabled') as boolean ?? false,
+            logFullJson: settingsStore.get('system.debug.log_full_json') as boolean ?? false,
+            enableDataDebug: settingsStore.get('system.debug.enable_data_debug') as boolean ?? false,
+            enableWebsocketDebug: settingsStore.get('system.debug.enable_websocket_debug') as boolean ?? false,
+            logBinaryHeaders: settingsStore.get('system.debug.log_binary_headers') as boolean ?? false
+        };
+
+        // Subscribe to debug setting changes
+        settingsStore.subscribe('system.debug.enabled', (_, value) => {
+            this.state.enabled = value as boolean;
+            this.updateLoggerConfig();
+        });
+
+        settingsStore.subscribe('system.debug.log_full_json', (_, value) => {
+            this.state.logFullJson = value as boolean;
+            this.updateLoggerConfig();
+        });
+
+        settingsStore.subscribe('system.debug.enable_data_debug', (_, value) => {
+            this.state.enableDataDebug = value as boolean;
+        });
+
+        settingsStore.subscribe('system.debug.enable_websocket_debug', (_, value) => {
+            this.state.enableWebsocketDebug = value as boolean;
+        });
+
+        settingsStore.subscribe('system.debug.log_binary_headers', (_, value) => {
+            this.state.logBinaryHeaders = value as boolean;
+        });
+
+        this.updateLoggerConfig();
+    }
+
+    private updateLoggerConfig(): void {
+        const { LoggerConfig } = require('./logger');
+        LoggerConfig.setGlobalDebug(this.state.enabled);
+        LoggerConfig.setFullJson(this.state.logFullJson);
+    }
+
+    public isEnabled(): boolean {
+        return this.state.enabled;
+    }
+
+    public isWebsocketDebugEnabled(): boolean {
+        return this.state.enabled && this.state.enableWebsocketDebug;
+    }
+
+    public isDataDebugEnabled(): boolean {
+        return this.state.enabled && this.state.enableDataDebug;
+    }
+
+    public shouldLogBinaryHeaders(): boolean {
+        return this.state.enabled && this.state.logBinaryHeaders;
+    }
+
+    public getState(): DebugState {
+        return { ...this.state };
+    }
+}
+
+export const debugState = DebugStateManager.getInstance();
+----
+core/logger.ts
+let debugEnabled = false;
+let logFullJson = false;
+
+export interface Logger {
+    debug: (...args: any[]) => void;
+    log: (...args: any[]) => void;
+    info: (...args: any[]) => void;
+    warn: (...args: any[]) => void;
+    error: (...args: any[]) => void;
+}
+
+export function setDebugEnabled(enabled: boolean, fullJson: boolean = false): void {
+    debugEnabled = enabled;
+    logFullJson = fullJson;
+}
+
+export function createLogger(context: string): Logger {
+    const prefix = `[${context}]`;
+    
+    const formatArgs = (args: any[]): any[] => {
+        if (logFullJson) {
+            return args.map(arg => 
+                typeof arg === 'object' ? JSON.stringify(arg, null, 2) : arg
+            );
+        }
+        return args;
+    };
+
+    // Add timestamp to prefix
+    const getPrefix = () => {
+        const now = new Date();
+        const timestamp = now.toISOString().split('T')[1].slice(0, -1);
+        return `${timestamp} ${prefix}`;
+    };
+    
+    return {
+        debug: (...args: any[]): void => {
+            if (debugEnabled) {
+                console.debug(getPrefix(), ...formatArgs(args));
+            }
+        },
+        log: (...args: any[]): void => {
+            if (debugEnabled) {
+                console.log(getPrefix(), ...formatArgs(args));
+            }
+        },
+        info: (...args: any[]): void => {
+            if (debugEnabled) {
+                console.info(getPrefix(), ...formatArgs(args));
+            }
+        },
+        warn: (...args: any[]): void => {
+            console.warn(getPrefix(), ...formatArgs(args));
+        },
+        error: (...args: any[]): void => {
+            console.error(getPrefix(), ...formatArgs(args));
+        }
+    };
+}
+
+// Create and export a global logger configuration
+export const LoggerConfig = {
+    setGlobalDebug(enabled: boolean) {
+        debugEnabled = enabled;
+        if (enabled) {
+            console.log(`[Logger] Debug logging enabled`);
+        }
+    },
+    setFullJson(enabled: boolean) {
+        logFullJson = enabled;
+    }
+};
+
+// Create core logger instance
+export const logger = createLogger('core');
+
+----
+core/physicsConstants.ts
+// Physics parameter ranges and defaults based on GPU-accelerated implementations
+export const PHYSICS_CONSTANTS = {
+    // Attraction force (cohesion between nodes)
+    ATTRACTION: {
+        MIN: 0.001,
+        MAX: 1.0,
+        DEFAULT: 0.015,  // Proven stable in Rust backend
+        RECOMMENDED_RANGE: {
+            MIN: 0.01,
+            MAX: 0.05
+        }
+    },
+
+    // Repulsion force (separation between nodes)
+    REPULSION: {
+        MIN: 1.0,
+        MAX: 10000.0,
+        DEFAULT: 1500.0,  // Proven stable in Rust backend
+        RECOMMENDED_RANGE: {
+            MIN: 1000.0,
+            MAX: 2000.0
+        }
+    },
+
+    // Spring force (edge elasticity)
+    SPRING: {
+        MIN: 0.001,
+        MAX: 1.0,
+        DEFAULT: 0.018,  // Proven stable in Rust backend
+        RECOMMENDED_RANGE: {
+            MIN: 0.01,
+            MAX: 0.05
+        }
+    },
+
+    // Damping (velocity decay)
+    DAMPING: {
+        MIN: 0.5,
+        MAX: 0.95,
+        DEFAULT: 0.88,  // Proven stable in Rust backend
+        RECOMMENDED_RANGE: {
+            MIN: 0.85,
+            MAX: 0.92
+        }
+    },
+
+    // Simulation iterations
+    ITERATIONS: {
+        MIN: 1,
+        MAX: 1000,
+        DEFAULT: 500,  // Proven stable in Rust backend
+        RECOMMENDED_RANGE: {
+            MIN: 200,
+            MAX: 600
+        }
+    },
+
+    // Maximum velocity
+    MAX_VELOCITY: {
+        MIN: 0.1,
+        MAX: 5.0,
+        DEFAULT: 2.5,  // Proven stable in Rust backend
+        RECOMMENDED_RANGE: {
+            MIN: 1.0,
+            MAX: 3.0
+        }
+    },
+
+    // Additional physics parameters
+    COLLISION_RADIUS: {
+        MIN: 0.1,
+        MAX: 1.0,
+        DEFAULT: 0.25,
+        RECOMMENDED_RANGE: {
+            MIN: 0.2,
+            MAX: 0.4
+        }
+    },
+
+    BOUNDS_SIZE: {
+        MIN: 5.0,
+        MAX: 50.0,
+        DEFAULT: 12.0,
+        RECOMMENDED_RANGE: {
+            MIN: 10.0,
+            MAX: 15.0
+        }
+    }
+};
+
+// Helper types for physics parameters
+export type PhysicsParameter = keyof typeof PHYSICS_CONSTANTS;
+export type PhysicsRange = {
+    MIN: number;
+    MAX: number;
+    DEFAULT: number;
+    RECOMMENDED_RANGE: {
+        MIN: number;
+        MAX: number;
+    };
+};
+
+// Helper functions for physics parameters
+export const isWithinPhysicsRange = (param: PhysicsParameter, value: number): boolean => {
+    const range = PHYSICS_CONSTANTS[param];
+    return value >= range.MIN && value <= range.MAX;
+};
+
+export const isWithinRecommendedRange = (param: PhysicsParameter, value: number): boolean => {
+    const range = PHYSICS_CONSTANTS[param].RECOMMENDED_RANGE;
+    return value >= range.MIN && value <= range.MAX;
+};
+
+export const getPhysicsRange = (param: PhysicsParameter): PhysicsRange => {
+    return PHYSICS_CONSTANTS[param];
+};
+
+export const getDefaultPhysicsValue = (param: PhysicsParameter): number => {
+    return PHYSICS_CONSTANTS[param].DEFAULT;
+};
+----
+core/types.ts
+// Core types for the application
+
+export interface Vector3 {
+  x: number;
+  y: number;
+  z: number;
+}
+
+export interface NodeMetadata {
+  name?: string;
+  lastModified?: number;
+  links?: string[];
+  references?: string[];
+  fileSize?: number;
+  hyperlinkCount?: number;
+}
+
+export interface NodeData {
+  position: Vector3;
+  velocity: Vector3;
+  metadata?: NodeMetadata;
+}
+
+export interface Node {
+  id: string;
+  data: {
+    position: Vector3;
+    velocity: Vector3;
+    metadata?: {
+      name?: string;
+      lastModified?: number;
+      links?: string[];
+      references?: string[];
+      fileSize?: number;
+      hyperlinkCount?: number;
+    };
+  };
+  color?: string;
+}
+
+export interface Position {
+  x: number;
+  y: number;
+  z: number;
+}
+
+export interface Edge {
+  source: string;
+  target: string;
+  id: string;
+  sourcePosition?: Position;
+  targetPosition?: Position;
+  type?: 'default' | 'hologram';
+}
+
+export interface PaginatedGraphData extends GraphData {
+  totalPages: number;
+  currentPage: number;
+  totalItems: number;
+  pageSize: number;
+}
+
+export interface GraphData {
+  nodes: Node[];
+  edges: Edge[];
+  metadata?: any;
+}
+
+// Platform types
+export type Platform = 'desktop' | 'quest' | 'browser';
+
+export interface PlatformCapabilities {
+  xrSupported: boolean;
+  webglSupported: boolean;
+  websocketSupported: boolean;
+  webxr: boolean;
+  handTracking: boolean;
+  planeDetection: boolean;
+}
+
+// Settings interfaces in camelCase
+export interface AnimationSettings {
+  enableMotionBlur: boolean;
+  enableNodeAnimations: boolean;
+  motionBlurStrength: number;
+  selectionWaveEnabled: boolean;
+  pulseEnabled: boolean;
+  rippleEnabled: boolean;
+  edgeAnimationEnabled: boolean;
+  flowParticlesEnabled: boolean;
+}
+
+export interface ARSettings {
+  dragThreshold: number;
+  enableHandTracking: boolean;
+  enableHaptics: boolean;
+  enableLightEstimation: boolean;
+  enablePassthroughPortal: boolean;
+  enablePlaneDetection: boolean;
+  enableSceneUnderstanding: boolean;
+  gestureSsmoothing: number;
+  handMeshColor: string;
+  handMeshEnabled: boolean;
+  handMeshOpacity: number;
+  handPointSize: number;
+  handRayColor: string;
+  handRayEnabled: boolean;
+  handRayWidth: number;
+  hapticIntensity: number;
+  passthroughBrightness: number;
+  passthroughContrast: number;
+  passthroughOpacity: number;
+  pinchThreshold: number;
+  planeColor: string;
+  planeOpacity: number;
+  portalEdgeColor: string;
+  portalEdgeWidth: number;
+  portalSize: number;
+  roomScale: boolean;
+  rotationThreshold: number;
+  showPlaneOverlay: boolean;
+  snapToFloor: boolean;
+  interactionRadius: number;
+}
+
+export interface AudioSettings {
+  enableAmbientSounds: boolean;
+  enableInteractionSounds: boolean;
+  enableSpatialAudio: boolean;
+}
+
+export interface BloomSettings {
+  edgeBloomStrength: number;
+  enabled: boolean;
+  environmentBloomStrength: number;
+  nodeBloomStrength: number;
+  radius: number;
+  strength: number;
+}
+
+export interface ClientDebugSettings {
+  enableDataDebug: boolean;
+  enableWebsocketDebug: boolean;
+  enabled: boolean;
+  logBinaryHeaders: boolean;
+  logFullJson: boolean;
+}
+
+export interface EdgeSettings {
+  arrowSize: number;
+  baseWidth: number;
+  color: string;
+  enableArrows: boolean;
+  opacity: number;
+  widthRange: [number, number];
+}
+
+export interface HologramSettings {
+  xrQuality: 'low' | 'medium' | 'high';
+  desktopQuality: 'low' | 'medium' | 'high';
+  ringCount: number;
+  ringColor: string;
+  ringOpacity: number;
+  ringSizes: number[];
+  ringRotationSpeed: number;
+  enableBuckminster: boolean;
+  buckminsterScale: number;
+  buckminsterOpacity: number;
+  enableGeodesic: boolean;
+  geodesicScale: number;
+  geodesicOpacity: number;
+  enableTriangleSphere: boolean;
+  triangleSphereScale: number;
+  triangleSphereOpacity: number;
+  globalRotationSpeed: number;
+}
+
+export interface LabelSettings {
+  desktopFontSize: number;
+  enableLabels: boolean;
+  textColor: string;
+  textOutlineColor: string;
+  textOutlineWidth: number;
+  textResolution: number;
+  textPadding: number;
+  billboardMode: 'camera' | 'up';
+}
+
+export interface NodeSettings {
+  baseColor: string;
+  baseSize: number;
+  sizeRange: [number, number];
+  enableMetadataShape: boolean;
+  colorRangeAge: [string, string];
+  colorRangeLinks: [string, string];
+  metalness: number;
+  roughness: number;
+  opacity: number;
+}
+
+export interface NetworkSettings {
+  bindAddress: string;
+  domain: string;
+  enableHttp2: boolean;
+  enableRateLimiting: boolean;
+  enableTls: boolean;
+  maxRequestSize: number;
+  minTlsVersion: string;
+  port: number;
+  rateLimitRequests: number;
+  rateLimitWindow: number;
+  tunnelId: string;
+}
+
+export interface DefaultSettings {
+  apiClientTimeout: number;
+  enableMetrics: boolean;
+  enableRequestLogging: boolean;
+  logFormat: string;
+  logLevel: string;
+  maxConcurrentRequests: number;
+  maxPayloadSize: number;
+  maxRetries: number;
+  metricsPort: number;
+  retryDelay: number;
+}
+
+export interface SecuritySettings {
+  allowedOrigins: string[];
+  auditLogPath: string;
+  cookieHttponly: boolean;
+  cookieSamesite: string;
+  cookieSecure: boolean;
+  csrfTokenTimeout: number;
+  enableAuditLogging: boolean;
+  enableRequestValidation: boolean;
+  sessionTimeout: number;
+}
+
+export interface ServerDebugSettings {
+  enabled: boolean;
+  enableDataDebug: boolean;
+  enableWebsocketDebug: boolean;
+  logBinaryHeaders: boolean;
+  logFullJson: boolean;
+}
+
+export interface PhysicsSettings {
+  attractionStrength: number;
+  boundsSize: number;
+  collisionRadius: number;
+  damping: number;
+  enableBounds: boolean;
+  enabled: boolean;
+  iterations: number;
+  maxVelocity: number;
+  repulsionStrength: number;
+  springStrength: number;
+}
+
+export interface RenderingSettings {
+  ambientLightIntensity: number;
+  backgroundColor: string;
+  directionalLightIntensity: number;
+  enableAmbientOcclusion: boolean;
+  enableAntialiasing: boolean;
+  enableShadows: boolean;
+  environmentIntensity: number;
+}
+
+export interface WebSocketSettings {
+  url: string;                   // WebSocket server URL
+  heartbeatInterval: number;     // Ping interval in seconds (default: 30)
+  heartbeatTimeout: number;      // Connection timeout in seconds (default: 60)
+  reconnectAttempts: number;     // Max reconnection attempts (default: 3)
+  reconnectDelay: number;        // Delay between reconnects in ms (default: 5000)
+  binaryChunkSize: number;       // Size of binary chunks
+  compressionEnabled: boolean;   // Enable/disable compression
+  compressionThreshold: number;  // Compression threshold
+  maxConnections: number;        // Maximum connections
+  maxMessageSize: number;        // Maximum message size
+  updateRate: number;           // Update rate in Hz
+}
+
+export interface Settings {
+  animations: AnimationSettings;
+  ar: ARSettings;
+  audio: AudioSettings;
+  bloom: BloomSettings;
+  clientDebug: ClientDebugSettings;
+  default: DefaultSettings;
+  edges: EdgeSettings;
+  hologram: HologramSettings;
+  labels: LabelSettings;
+  network: NetworkSettings;
+  nodes: NodeSettings;
+  physics: PhysicsSettings;
+  rendering: RenderingSettings;
+  security: SecuritySettings;
+  serverDebug: ServerDebugSettings;
+  websocket: WebSocketSettings;
+}
+
+export type SettingCategory = keyof Settings;
+export type SettingKey<T extends SettingCategory> = keyof Settings[T];
+export type SettingValue = string | number | boolean | number[] | string[];
+
+// WebSocket message types
+export type MessageType = 
+  | 'binaryPositionUpdate'  // Real-time position/velocity data
+  | 'ping'                  // Connection health check
+  | 'pong'                 // Connection health response
+  | 'connectionStatus'     // Connection status updates
+  | 'enableBinaryUpdates'; // Enable/disable binary updates
+
+// Base WebSocket message interface
+export interface BaseWebSocketMessage {
+  type: MessageType;
+}
+
+// Binary position update message (server -> client)
+export interface BinaryPositionUpdateMessage extends BaseWebSocketMessage {
+  type: 'binaryPositionUpdate';
+  data: {
+    nodes: Array<{
+      data: {
+        position: Vector3;
+        velocity: Vector3;
+      }
+    }>
+  };
+}
+
+// Connection health messages
+export interface PingMessage extends BaseWebSocketMessage {
+  type: 'ping';
+  timestamp: number;
+}
+
+export interface PongMessage extends BaseWebSocketMessage {
+  type: 'pong';
+  timestamp: number;
+}
+
+export type WebSocketMessage =
+  | BinaryPositionUpdateMessage
+  | PingMessage
+  | PongMessage;
+
+// WebSocket error types
+export enum WebSocketErrorType {
+  CONNECTION_ERROR = 'CONNECTION_ERROR',       // Failed to establish connection
+  CONNECTION_LOST = 'CONNECTION_LOST',         // Connection was lost
+  TIMEOUT = 'TIMEOUT',                        // Connection timed out
+  BINARY_FORMAT_ERROR = 'BINARY_FORMAT_ERROR', // Invalid binary data format
+}
+
+export interface WebSocketError {
+  type: WebSocketErrorType;
+  message: string;
+  code?: number;
+  details?: any;
+}
+
+// Logger interface
+export interface Logger {
+  log: (message: string, ...args: any[]) => void;
+  error: (message: string, ...args: any[]) => void;
+  warn: (message: string, ...args: any[]) => void;
+  debug: (message: string, ...args: any[]) => void;
+  info: (message: string, ...args: any[]) => void;
+}
+
+// Helper functions
+interface RawNode {
+  id: string;
+  data: {
+    position: Vector3;
+    metadata?: NodeMetadata;
+  };
+  color?: string;
+}
+
+interface RawEdge {
+  source: string;
+  target: string;
+  id?: string;
+}
+
+interface RawGraphData {
+  nodes: RawNode[];
+  edges: RawEdge[];
+  metadata?: any;
+  totalPages?: number;
+  currentPage?: number;
+  totalItems?: number;
+  pageSize?: number;
+}
+
+export function transformGraphData(data: RawGraphData): GraphData {
+  const nodes = data.nodes.map((node: RawNode) => transformNodeData(node));
+  const nodePositions = new Map(nodes.map((node: Node) => [
+    node.id,
+    node.data.position
+  ]));
+
+  const edges = data.edges.map((edge: any) => ({
+    ...edge,
+    sourcePosition: nodePositions.get(edge.source),
+    targetPosition: nodePositions.get(edge.target)
+  }));
+
+  return {
+    nodes,
+    edges,
+    metadata: data.metadata
+  };
+}
+
+export function transformNodeData(node: any): Node {
+  return {
+    id: node.id,
+    data: {
+      position: {
+        x: node.data.position.x,
+        y: node.data.position.y,
+        z: node.data.position.z
+      },
+      velocity: node.data.velocity || { x: 0, y: 0, z: 0 },
+      metadata: {
+        name: node.data.metadata?.name || node.id,
+        lastModified: parseInt(node.data.metadata?.lastModified) || Date.now(),
+        links: node.data.metadata?.links || [],
+        references: node.data.metadata?.references || [],
+        fileSize: parseInt(node.data.metadata?.fileSize) || 0,
+        hyperlinkCount: parseInt(node.data.metadata?.hyperlinkCount) || 0
+      }
+    },
+    color: node.color
+  };
+}
+
+----
+core/utils.ts
+/**
+ * Core utilities for the LogseqXR visualization system
+ */
+
+import { Vector3 } from './types';
+import { THROTTLE_INTERVAL } from './constants';
+
+// Debug logging utility
+export interface Logger {
+  log: (message: string, ...args: any[]) => void;
+  error: (message: string, ...args: any[]) => void;
+  warn: (message: string, ...args: any[]) => void;
+  debug: (message: string, ...args: any[]) => void;
+  info: (message: string, ...args: any[]) => void;
+}
+
+export function createLogger(namespace: string): Logger {
+  return {
+    log: (message: string, ...args: any[]) => console.log(`[${namespace}] ${message}`, ...args),
+    error: (message: string, ...args: any[]) => console.error(`[${namespace}] ${message}`, ...args),
+    warn: (message: string, ...args: any[]) => console.warn(`[${namespace}] ${message}`, ...args),
+    debug: (message: string, ...args: any[]) => console.debug(`[${namespace}] ${message}`, ...args),
+    info: (message: string, ...args: any[]) => console.info(`[${namespace}] ${message}`, ...args)
+  };
+}
+
+// Case conversion utilities
+export const camelToSnakeCase = (str: string): string => {
+  return str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);
+};
+
+export const snakeToCamelCase = (str: string): string => {
+  return str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
+};
+
+export const convertObjectKeysToSnakeCase = (obj: any): any => {
+  if (Array.isArray(obj)) {
+    return obj.map(item => convertObjectKeysToSnakeCase(item));
+  }
+  
+  if (obj !== null && typeof obj === 'object') {
+    return Object.keys(obj).reduce((acc, key) => {
+      const snakeKey = camelToSnakeCase(key);
+      acc[snakeKey] = convertObjectKeysToSnakeCase(obj[key]);
+      return acc;
+    }, {} as any);
+  }
+  
+  return obj;
+};
+
+export const convertObjectKeysToCamelCase = (obj: any): any => {
+  if (Array.isArray(obj)) {
+    return obj.map(item => convertObjectKeysToCamelCase(item));
+  }
+  
+  if (obj !== null && typeof obj === 'object') {
+    return Object.keys(obj).reduce((acc, key) => {
+      const camelKey = snakeToCamelCase(key);
+      acc[camelKey] = convertObjectKeysToCamelCase(obj[key]);
+      return acc;
+    }, {} as any);
+  }
+  
+  return obj;
+};
+
+// Update throttler for performance optimization
+export class UpdateThrottler {
+  private lastUpdate: number = 0;
+  private throttleInterval: number;
+
+  constructor(throttleInterval: number = THROTTLE_INTERVAL) {
+    this.throttleInterval = throttleInterval;
+  }
+
+  shouldUpdate(): boolean {
+    const now = performance.now();
+    if (now - this.lastUpdate >= this.throttleInterval) {
+      this.lastUpdate = now;
+      return true;
+    }
+    return false;
+  }
+
+  reset(): void {
+    this.lastUpdate = 0;
+  }
+}
+
+// Vector operations
+export const vectorOps = {
+  add: (a: Vector3, b: Vector3): Vector3 => ({
+    x: a.x + b.x,
+    y: a.y + b.y,
+    z: a.z + b.z
+  }),
+
+  subtract: (a: Vector3, b: Vector3): Vector3 => ({
+    x: a.x - b.x,
+    y: a.y - b.y,
+    z: a.z - b.z
+  }),
+
+  multiply: (v: Vector3, scalar: number): Vector3 => ({
+    x: v.x * scalar,
+    y: v.y * scalar,
+    z: v.z * scalar
+  }),
+
+  divide: (v: Vector3, scalar: number): Vector3 => ({
+    x: v.x / scalar,
+    y: v.y / scalar,
+    z: v.z / scalar
+  }),
+
+  length: (v: Vector3): number => 
+    Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z),
+
+  normalize: (v: Vector3): Vector3 => {
+    const len = vectorOps.length(v);
+    return len > 0 ? vectorOps.divide(v, len) : { x: 0, y: 0, z: 0 };
+  },
+
+  distance: (a: Vector3, b: Vector3): number => 
+    vectorOps.length(vectorOps.subtract(a, b)),
+
+  // Convert position array to Vector3
+  fromArray: (arr: number[]): Vector3 => ({
+    x: arr[0] || 0,
+    y: arr[1] || 0,
+    z: arr[2] || 0
+  })
+};
+
+// Scale utilities
+export const scaleOps = {
+  // Normalize a value between min and max
+  normalize: (value: number, min: number, max: number): number => {
+    return Math.min(max, Math.max(min, value));
+  },
+
+  // Map a value from one range to another
+  mapRange: (value: number, inMin: number, inMax: number, outMin: number, outMax: number): number => {
+    // First normalize to 0-1
+    const normalized = (value - inMin) / (inMax - inMin);
+    // Then map to output range
+    return outMin + normalized * (outMax - outMin);
+  },
+
+  // Scale node size from server range to visualization range
+  normalizeNodeSize: (size: number, serverMin: number = 20, serverMax: number = 30, visMin: number = 0.15, visMax: number = 0.4): number => {
+    return scaleOps.mapRange(size, serverMin, serverMax, visMin, visMax);
+  }
+};
+
+// Data validation utilities
+export const validateGraphData = (data: any): boolean => {
+  if (!data || typeof data !== 'object') return false;
+  if (!Array.isArray(data.nodes) || !Array.isArray(data.edges)) return false;
+  
+  // Validate nodes
+  for (const node of data.nodes) {
+    if (!node.id) return false;
+    // Allow position to be either array or Vector3
+    if (node.position) {
+      if (Array.isArray(node.position)) {
+        if (node.position.length !== 3 || 
+            typeof node.position[0] !== 'number' ||
+            typeof node.position[1] !== 'number' ||
+            typeof node.position[2] !== 'number') {
+          return false;
+        }
+      } else if (typeof node.position === 'object') {
+        if (typeof node.position.x !== 'number' ||
+            typeof node.position.y !== 'number' ||
+            typeof node.position.z !== 'number') {
+          return false;
+        }
+      } else {
+        return false;
+      }
+    }
+  }
+  
+  // Validate edges
+  for (const edge of data.edges) {
+    if (!edge.source || !edge.target) return false;
+  }
+  
+  return true;
+};
+
+// Binary data helpers
+export const binaryToFloat32Array = (buffer: ArrayBuffer): Float32Array => {
+  return new Float32Array(buffer);
+};
+
+export const float32ArrayToPositions = (array: Float32Array): Vector3[] => {
+  const positions: Vector3[] = [];
+  for (let i = 0; i < array.length; i += 3) {
+    positions.push({
+      x: array[i],
+      y: array[i + 1],
+      z: array[i + 2]
+    });
+  }
+  return positions;
+};
+
+// Error handling utility
+export class VisualizationError extends Error {
+  constructor(message: string, public code: string) {
+    super(message);
+    this.name = 'VisualizationError';
+  }
+}
+
+// Performance monitoring
+export class PerformanceMonitor {
+  private frames: number = 0;
+  private lastTime: number = performance.now();
+  private fps: number = 0;
+
+  update(): void {
+    this.frames++;
+    const now = performance.now();
+    const delta = now - this.lastTime;
+
+    if (delta >= 1000) {
+      this.fps = (this.frames * 1000) / delta;
+      this.frames = 0;
+      this.lastTime = now;
+    }
+  }
+
+  getFPS(): number {
+    return Math.round(this.fps);
+  }
+}
+
+----
+monitoring/NodeManagerMetrics.ts
+import { createLogger } from '../core/logger';
+
+const logger = createLogger('NodeManagerMetrics');
+
+interface PerformanceMetrics {
+    fps: number;
+    frameTime: number;
+    updateTime: number;
+    memoryUsage?: number;
+    nodeCount: number;
+    visibleNodes: number;
+    updateCount: number;
+}
+
+interface MetricsSummary {
+    avgFps: number;
+    avgFrameTime: number;
+    avgUpdateTime: number;
+    avgMemoryUsage?: number;
+    minFps: number;
+    maxUpdateTime: number;
+    totalUpdates: number;
+    sampleCount: number;
+}
+
+/**
+ * Monitoring system for tracking node manager performance
+ */
+export class NodeManagerMetrics {
+    private static instance: NodeManagerMetrics;
+    private metrics: PerformanceMetrics[] = [];
+    private currentMetrics: PerformanceMetrics;
+    private lastFrameTime: number = 0;
+    private frameCount: number = 0;
+    private readonly MAX_SAMPLES = 1000;
+    private readonly ALERT_THRESHOLD_FPS = 45;
+    private readonly ALERT_THRESHOLD_UPDATE_TIME = 16; // ms
+
+    // Performance monitoring
+    private performanceObserver: PerformanceObserver | null = null;
+
+    private constructor() {
+        this.currentMetrics = this.createEmptyMetrics();
+        this.setupPerformanceObserver();
+        
+        // Report metrics periodically
+        setInterval(() => this.reportMetrics(), 5000);
+    }
+
+    private createEmptyMetrics(): PerformanceMetrics {
+        return {
+            fps: 0,
+            frameTime: 0,
+            updateTime: 0,
+            nodeCount: 0,
+            visibleNodes: 0,
+            updateCount: 0
+        };
+    }
+
+    private setupPerformanceObserver(): void {
+        if (typeof PerformanceObserver !== 'undefined') {
+            this.performanceObserver = new PerformanceObserver((list) => {
+                for (const entry of list.getEntries()) {
+                    if (entry.entryType === 'measure' && entry.name === 'nodeUpdate') {
+                        this.currentMetrics.updateTime = entry.duration;
+                    }
+                }
+            });
+
+            try {
+                this.performanceObserver.observe({ entryTypes: ['measure'] });
+            } catch (error) {
+                logger.warn('Performance observer setup failed:', error);
+            }
+        }
+    }
+
+    public static getInstance(): NodeManagerMetrics {
+        if (!NodeManagerMetrics.instance) {
+            NodeManagerMetrics.instance = new NodeManagerMetrics();
+        }
+        return NodeManagerMetrics.instance;
+    }
+
+    /**
+     * Record metrics for current frame
+     */
+    public recordFrame(nodeCount: number, visibleNodes: number): void {
+        const now = performance.now();
+        
+        if (this.lastFrameTime > 0) {
+            const frameTime = now - this.lastFrameTime;
+            this.currentMetrics.frameTime = frameTime;
+            this.currentMetrics.fps = 1000 / frameTime;
+        }
+        
+        this.lastFrameTime = now;
+        this.currentMetrics.nodeCount = nodeCount;
+        this.currentMetrics.visibleNodes = visibleNodes;
+        
+        // Add memory usage if available (Chrome-specific API)
+        interface PerformanceWithMemory extends Performance {
+            memory?: {
+                usedJSHeapSize: number;
+            };
+        }
+        if ((performance as PerformanceWithMemory).memory) {
+            this.currentMetrics.memoryUsage = (performance as PerformanceWithMemory).memory!.usedJSHeapSize / (1024 * 1024);
+        }
+
+        // Check for performance issues
+        this.checkPerformance();
+
+        // Store metrics
+        this.metrics.push({ ...this.currentMetrics });
+        if (this.metrics.length > this.MAX_SAMPLES) {
+            this.metrics.shift();
+        }
+
+        // Reset current metrics
+        this.currentMetrics = this.createEmptyMetrics();
+        this.frameCount++;
+    }
+
+    /**
+     * Record start of node update
+     */
+    public startUpdate(): void {
+        performance.mark('nodeUpdateStart');
+    }
+
+    /**
+     * Record end of node update
+     */
+    public endUpdate(): void {
+        performance.mark('nodeUpdateEnd');
+        performance.measure('nodeUpdate', 'nodeUpdateStart', 'nodeUpdateEnd');
+        this.currentMetrics.updateCount++;
+    }
+
+    /**
+     * Get summary of collected metrics
+     */
+    public getMetricsSummary(): MetricsSummary {
+        if (this.metrics.length === 0) {
+            return {
+                avgFps: 0,
+                avgFrameTime: 0,
+                avgUpdateTime: 0,
+                minFps: 0,
+                maxUpdateTime: 0,
+                totalUpdates: 0,
+                sampleCount: 0
+            };
+        }
+
+        const summary = this.metrics.reduce((acc, metrics) => {
+            acc.avgFps += metrics.fps;
+            acc.avgFrameTime += metrics.frameTime;
+            acc.avgUpdateTime += metrics.updateTime;
+            if (metrics.memoryUsage) {
+                acc.avgMemoryUsage = (acc.avgMemoryUsage || 0) + metrics.memoryUsage;
+            }
+            acc.minFps = Math.min(acc.minFps, metrics.fps);
+            acc.maxUpdateTime = Math.max(acc.maxUpdateTime, metrics.updateTime);
+            acc.totalUpdates += metrics.updateCount;
+            return acc;
+        }, {
+            avgFps: 0,
+            avgFrameTime: 0,
+            avgUpdateTime: 0,
+            avgMemoryUsage: undefined as number | undefined,
+            minFps: Infinity,
+            maxUpdateTime: 0,
+            totalUpdates: 0,
+            sampleCount: this.metrics.length
+        });
+
+        // Calculate averages
+        summary.avgFps /= summary.sampleCount;
+        summary.avgFrameTime /= summary.sampleCount;
+        summary.avgUpdateTime /= summary.sampleCount;
+        if (summary.avgMemoryUsage !== undefined) {
+            summary.avgMemoryUsage /= summary.sampleCount;
+        }
+
+        return summary;
+    }
+
+    private checkPerformance(): void {
+        const metrics = this.currentMetrics;
+
+        // Check FPS
+        if (metrics.fps < this.ALERT_THRESHOLD_FPS) {
+            logger.warn('Low FPS detected:', {
+                fps: metrics.fps.toFixed(2),
+                nodeCount: metrics.nodeCount
+            });
+        }
+
+        // Check update time
+        if (metrics.updateTime > this.ALERT_THRESHOLD_UPDATE_TIME) {
+            logger.warn('High update time detected:', {
+                updateTime: metrics.updateTime.toFixed(2),
+                nodeCount: metrics.nodeCount
+            });
+        }
+    }
+
+    private reportMetrics(): void {
+        const summary = this.getMetricsSummary();
+
+        logger.info('Performance Summary:', {
+            avgFps: summary.avgFps.toFixed(2),
+            minFps: summary.minFps.toFixed(2),
+            avgUpdateTime: summary.avgUpdateTime.toFixed(2),
+            maxUpdateTime: summary.maxUpdateTime.toFixed(2),
+            avgMemoryUsage: summary.avgMemoryUsage?.toFixed(2),
+            totalUpdates: summary.totalUpdates,
+            sampleCount: summary.sampleCount
+        });
+    }
+
+    public dispose(): void {
+        if (this.performanceObserver) {
+            this.performanceObserver.disconnect();
+        }
+        clearInterval(this.reportMetrics as any);
+        this.metrics = [];
+        NodeManagerMetrics.instance = null!;
+        logger.info('NodeManagerMetrics disposed');
+    }
+}
+
+// Export singleton instance
+export const nodeManagerMetrics = NodeManagerMetrics.getInstance();
+----
+public/fonts/Roboto-Regular.woff2
+wOF2     =     t  =                       dd^`  T	<
+|{
+ 6$ t I3%؋8&4Z|t 8D$uNEPEAk=x9Xz`IR#F+B`}RP|EZ\W[CQBmcm?FgQ3шpL2ٽ[̮!+@U^~ޣ D?jUcUl6{ mCD]htջQ8@PLc
+
++ZD2K:4{g:~  v  < H^R'8?;uyVW8="FÓ*	@EĴc= Iby8$a){ԶKiIW&Ӕ~}1wM{4!{FH5#Kt5wve; 'NJ	'(%;?DMCq,<=?f _VbA(37v+uYCb
+w8AF3n-'U%2؟oٟl"^bj aoF!`
+Aj'މ:Zu.[݂pGW:U%Ejq	:IC	SCsJe6Dқ<UM,
+&hz} y|9
+DᛯjnB$T¬׵?/Q=BC_f#:Bo@]T(vF+d" RRR!~AX>!`p¢,08 9Ό/茓
+rQ Qpg\koC3Yyt'd9>#|3Ƹ?֌#$i
+g5z֏秲S{3ɲSpS2бw6 Ӣf]﵋F]&^fM%A}؊)ZLUX.&qOq?$nV_[3hQ詎ְ$ڥcEv0CQ4a=jwn'&Vwz'
+fxdjqv:ꡔVVF7:HZl*Тtj"O~ۿGJa1F~۷--J%MZ߱}:!%cV1&9עV5hUp}
+ѾtS߼w?<=VEk-xƻ1xP@F'O!#LXdÖ{pƓ	&.XX
+$4xǞhסSmq&G|O_ClNX\p@Ĉ/~q6A7^SsNjQ#-vV"qwq
+a#hoa|'|k/}w0ܯ2"n<0BCPAzǥ
+x>CEMTqXUX+SR٘xʀJ)X	2~8A/WѬdq9G
+ !4m1I7?ۗν<	o8&0y8/JYc"#>3%ahv|8C%. }pha '|Ɨsи}DK*SY\S%P8'K[J2*f
+"D ^ bt6220/:1F0cƁ+ܩIHDJC
+Zn;&YxP?%GFN&M<<2db	,Yaéĉg\ʕ#[`
+wTxD!PB`!(DDED%
+Kh41b(RF45iEMm馛[< CO'g yFb$#|_h~KOdLLW[1Pec`R^rT2Sbt "O7)Q@yAQU)@)`j"[lq11vFVc4F IDfXa9O܉gfCԜ[#9 =371G~$v:H6T>@v"A!nٝfso;}|7
+߻/ڊ<H(FІZ{&n2I-	-f[37D'"r?a3m -&J
+Uj+jcHD-U<p#l&c:AVvf19g-V9]p%!F$Y0Y`0lTY"_}ܵ
+ EHHQ)3{{"_aLb  :c<ˢ	eʹ|
+,`}A 3䱪 \@nޤRj1)6jWB$T`~t1Ըd*2SzKw]lüea[=l2t̏k]9]LU)a?OU(>Ai#mÕ'ҥ@NϡՃP㐮ks7;g'~5zoZ2F)+Bbb,.HgsXl.إꠧ ;k1{P16C2E0-@b ٧BL÷d^<Pfdbp3󢑔ܣ/&<#tXTkD9Fίث
+Vz倶(<Cl3_5JH6	>U)9NIac_XQO}h	~o~༰Vɕ[JށfK.rf0
+^xy0Gռ	KFߛIf <ex2hI;iҰ_D^275 >(?
+҅*G78BCXL8y	cA+ESs5Z!C
+>!/bx3ڔi{nx[㉭!dS P@Y<˂U{֍Ug'YjbIЙ7rA2UZM%dvxȢ&Wp6պF|J
+!:	Rhz oudQʫ#XXxBXa}+l^܊SH0Y	0	fTpV7O'1My$"B5SǛ0PVŜb]$WR
+PkE	Lܰ9 E!CK3X;RqtH45Ik`wiLTo7E2%{yU~nVb}8^RNY+;3SٴF|T=JHEIBw	ˡPm;7jMIڐF_sM
+U[t
+'\y٨叶skHȡ^][!4p̬:"O[+5h %C*1b]|e{*ȹu.ٞHʁ:!/ya]
+ܤkg1g=mCл0=SgMTHXV 9?D/[|!GϦ19@od_OW,
+:pax^m@MKc+CD%(U+\i!7X
+\r>}
+Ҷv48?)
+,yk
+=V|0>sjgVUeȒReT\VHJ+bӯP37L&Yp<
+ٮ7ݦ~L-z2=p+q23"s~pʩ
+EV8?ެCAۧ=J8M8s+x*"(D(*:)"W}`;k|SUW253ttJ!5Cgu2R˖yD[ǵʷR8'Ul}ݬdPAڇt!':@eAFZI%ϙ}V4ITz_CQNͨT۷3'G˲]PV<>f[ˍ|: Qp	|Hnb^^شm	!4 ź*quk<BI=vK,<-v)y-&S^L⮙LzR<fR]%!V6u\4]
+N}&'Y䅓Γ08ko^i_K5K\#)#seC\xL2joآ!IXc'm,*3(9ĮdGsТOt<u6$U(d轢{_'
+~/`eKxwGe{?ޜB隑~
+GnUkY[
+:6xx|O< 녭RoĆNd 
+p(!1-Jڲ{'3)MWpHBmg|SwF|qSi;[܆TNa%(˅Iy\:ڝYwEhlƥQVFiyU:RG(fQ!,E 9ۦO_lJ9?d#?JmSQCw~,J$iF..;벍Dm|dqs(MʘZWѥ)^׀
+&uVEoZ5F
+фS$xPE-~n*+\yd^C/:Wꋕ.Xv`fH$ǉPYrQ{hӐ&y<K"ޓ6Z;kQbyw.sjI
+xWg$YW//W/x
+
+Wӈ}$4QB½@@蛄tH53E5{^\Ã=J|Ҝ<JLj'7n/.~^$gw-Ǭ, <ESd/DabLޝ(=q opGU32qrꑌpFל]g[I,'zw؟pΞFtVt<?meE؟X%3V?\8B>&m5_-d7!Ӓ#ogZ(aBh(PLBy*t6gEgbtB+flaTpL0#-du	0sp%8dA*<'41/ހhFj!Ovs+1eҚ!-f7@6aIQ-dLBEץ'~x[
+.FnVg62-Y6(;GLRq{OK:1|e,PUwǚFWƳ߃W]CjFc:'Tjx .Gs<u5B\coօTOm$ϳll3oWp_~DddYf*MG
+կ0zbW`[ͫ4On37@W_yYk\#Z+qsJorӝȼX|EM>>Ϟֻ\ͦ?T$`@l$ p1G7_<M
+(̘	>ˎ%չ% BN9ǁPqumO9G/۬of_z?u0v2K:K̬$ce^.FbgGNVxq/qiq^!b;=NJ+ 
+e'dHbBt#[1YCw@z0>Bʟ%XLi \""''.*#Ƶ~씠=\I䋹sDU9ܗk3x\rSKٕ1O~~^l[6R)%JRS":
+7
+
+k
+(t˸FTKTSD<+GLODhDBpO`xY@UiߐrD}=KoHY	 +,~&8z/k4>㺭51]),rj3=ǿ#dV<zot_Fn+L릟8!ݟݏݎ&SvnڑA|侦WAhRf-nw:1 tɱ۱5/S&[NTyUJ(x:sQo1"cED:3kLv׶I1Aȥf
+p/z^Ee&A
+v񜝯ʲ_
+.W]"6@ԵD{	l vHs3
+F-BBP:Y	ɰP9~~~cLiP!(}
+?
+ک 1r<8qrc>pLb		ȱh|,,=6=$5	a湩Rj玪KϭW--g=O>Zٕ06c-%ꠅb[# Se!/^bϝ9ih~wvo<LCu!N-raPV8yW@DF0٬?bbmԡM\}sW-r@6to]po2=4L,FÂ`dlxDECE]&)n/@X F} wF$jojǝc_	kUj*\Q?H^m-PʉES2""8NsK`nes(H-X~8|=/_tKAƀrH#@V`z(S1ZP']f2eyP`d\1n'ơ6ۮhΞkٽtS;K` ^gXdL`vIrMZc>d\?VK;ͺr	|?4[*KmxKw
+<=\7`Xwbf.&wr{7OFns _?
+)	-]o#t$2SjldJy˗rvV-ŏһe[owtOrm
+]sc9%OV!ۢ[my|F|+L$/qqŻ.	%rwdKrn=SUknJ@2yڕ3ǚB<r}e,x94Y"i)p=^uIoʮCTQj=-YcQǿ+ .pqr#Qs
+mNL p;T}LM>Ȟ~߰JjBrS/,-`%q_%[
+Y|GM[-[y͏L훏OGc^_b4 xz
+Xq(mˮY7e4=E^wT"{A^vZvKka}e=ZlY_
+`	zR=U.XF;i5:e
+t
+A1fFFB:m(gwXYF?Mwp9$5My+6{&(KްfX氺q?vbA{5`e2Qs3I~_?AHoB_di7f$᧶O>!Rbor`rOU241}twS;{݊2eC	!ݍd`ht\%Ar<:ڿX6A2֋?=ܻGAm;ayrKť6a>ځAǸO1XgObu~(Y`(^NH=nYɭK2/vI"k-
+Xui,q6PCX0 _>&J-F׺FSB3+nyT53;73\Y/!g斐(STTY9G
+\))ȵɤՔ*:f2f #Dވ\,3n2N567MmM\zSrJ-z-fV9r27˅g繁X L^wk4ҫ*j oy~Jk""Lls۶EiϷ$lapS,I{5nGd8{4#:7Z^K]dV׶5J}<}RbP͏'|i]lh]noH	jKHA[̰9=ibkeX3:13%8؎PM5QQ=ܖ]Y/n|
+0UOdeI?dCj-5Rm5~v(ld') ..53HpgF@ZP|"RK<RVRRVB
+	%
+[jhZT`6RD9L,Ϥ4	}202orEG(6Ԡ |!aa6EDN03my0kԼjTXUb#ՔN225RCg=:tIXY3	؝R7S~̇i-3pg>)tgǱqp%W[wz*$JiD0[[绐m@'hHhqz/dh3lBOEFS=Yڽ{=;h1mm=>(<<waT@7mͅǝPo[ؚ$$ۘ3.pSA	a
+OGCYz~Ͽdekp_
+#㡗ٙ&aʈ>IO?`)뮴p!JswcKvT7--c":Z8]7<Wɹl{%L͞$Gy߻yrбJ$~tPpеp	]}(|scT|KAE)o@GP/rlY+?^BVv	GD;o75wW}Nc4j74bff*D~RQ֣_^V.<{J$ܫn9>Nt1\u{:WCC:\{/޼,t%"Fz_3/M
+ԧ(
+q(K
+̗
+NED:vdFc'.mg&\t`%C">صSP/9J"dLЩBiDKl-OoEa޽8@Idҋ?oy5LMHaGDlZ= 6ks67Iy%pJy$F<exkJWr|{r`rAu'[lk=~:gQRxQKRn?ysnJ+	1"
+`@|st<(B<p\,V#"`uKo5n[VkvAx˸FDxGFbYcZKXT *䯏&_x2}"x
+YiϡkCNvuuhsZldr 2yh)B2!M,$F{|2{Ln7,'|x-n>_Mn`k )P{ᱧd].N ^
+
+Y>q긢5dE(gɢ]\8{jaisarIgAgM'hxP`
+e_/-V=8X77Tv9;UbBu@k jjx	Bל3z8&Aa$BPR'`Q,oaYJ+IA2
+`ƺV0V4<V2!(1ZE7+-os/+VqFIO&ҾŦ{Lc		xMl
+OCZ,QM&ǧqz0
+eKtK
+;#Ϣy}]m~PB~^zR=-3T&A'S|j;jkY:XX{CP~q(T\G92DqVY`󽩭mٰMMb¯{^ٺpe^p5`hVVnE c>[D;¸ψ;#XűW$4C
+H&໼eZozrSZi`U-[P?t1,o4 !@dc ml[AA
+-q.O)tLE ml `]LWƳ`^ȇ}H,:w_v[bև]hsQx<'ټI[<q^?X.7y]7٦M>mQ-9nII6F؇`'ֹIoKiD Ban\wo{rbJ诤P`yɰ~y%d3v\\=ՃO<8v7 	"]=#b Z$YtWAE$TXihb/5pR>weO_ڿGv3Do
+=&'Z w;=UOUZ*KsrJ {>}i.C)J!1:E3 Z?&=,ŅD{^%DtK(2(`gih=|w
+JaȝGCTʾqIòvFG7ٴEWIh$O>罖 7`.~ 5g^h_;~)A)ĥwlSj@#`lv[EwLΜ7cڰRjJ,zdp_([bދv6LӲVڢ.A#y%?`,'@:0uNBp(VLW￳.H yx&n	FE~}Y)7nӉGhZ'	cI)ae:tEƶ|Ff5xИ&qKQlVd(%rb@$V?TUaMݮGe%
+az-W+M֌q"XaƿX@éKf>ެ4t:ێTͣg;v
+Mx^[\f:o/KԥCU3jY5io~aVQ4 ԤbR<fxIɔ9S>D"x*yzETa| OI,]Ԁ0\6j"y)=XCi~2=%zڌ<:XSkZcrsD#0]y-5g݀z4Nظ1-za\ݨ՞}Qt4[ha2AFOdȋřa@Gwub`pƴX݃InKaXg92cQr,g&wjkȟn0B"AA#k0s/S
+挷	rdNUexLenMpv_ä=;׭<7zxkxovwi}fB8"	%IZ*+id	ҵ
+T!zB`"9d7Xr)g1ۄwM6ğm1ari}x~׊z2t[0z"<Ƴul< [  WO_շ:K>/q/U]-\G]!F_{0
+>W28W+JJRf}1udXʢ`/r35@AhseHGm\nXhL}4dSZȡL V`%9",<i%³yJ \vQ%DRp`FWɹCRE0;YF@wќÑP^[kJ  YJ),۱6L$4fR$%W>eGN2tJ{i틭3e&/֊]:CH|g墶5D,hrV%͕Ӧ@*	229	:x#a3[G5[u v1#濑T֚XLB~[pS:<p?no#bݙcbqN{6D#FT|Hl,+Q@ďSMkI:A۠HCuCuH'bRV	^
+CM#gn8V9ʓ¿uoկNTI3*dQa˓X=#ëi8CD |D1lQ3TIo82D
+%rJkFbO#N|.VFqR_X;9׾U cƛTb],E?P;ѧ=BM&kF#eg"`9abePȣ\VMnrA@+uwe޺=q3:HH1<uo
+I_Svkel
+SP1,K-W=7Psx +9\
+M2>YAG'1JLcrKm8Pi\v;ȝfoBs7]=G`udI@Idwgs*se-nZxcdiE)tfȤ\q()@By34גIaz[EYHTTVД+w`l0tA=wrֆM/CѓSH(рT-<m[IʲӴ"}E4eRB@H2sIdflcؒ
+3;W}VtIzydwjh<޼,ۥ$D3Čіiډͳ~89|̥G }>ӆ5S >Myߙ=ۓ龼[?Е/B:\9ڠvYޜ6At2ûh>V%/lX_M@xng҅ی6U#׵3wOE}Z2L0;YVBXv+sAP (xw{2PWQW=`L^Ujݚ,IɜYL:o|p\·3yo@Bu7y1bviJ12n P>-u0;(BG=aqȊXlb{ΥMs!!*]Y]Vɰb3Q%,]u"_bȶȩؐh!PRYz')O8:	+9<nSDeXii=`o/<јRmɛI-}?.[NO5(ovRƶɘC=EXRBS_-YU U ma,kJ;x]]q)4?7cɍ2(ںe>-ɟ=Gwaa/a^.7vz89K_3/8M0̪siGf41z^l
+MeOުu%ĩƝ+VaeA(lVj;t2+hKmy{%4O}']MvdY9wiej/xƂY}([G)ҚD(&}|`ʬf:.Ÿ>N(&Rí/c r@g,M}<KXCAV4Ișp34/Iz"'{ZX ](Mɹp"0@
+QLp%رvZn#V=1p@+]YE}Dvi3P-z
+і-.4!m=đben}0>C?i{
+Rg;L;}\vgɱڵOVqA;'l#٦xWepg?B+yzm'`/ό{z) վr`XNT^Ӓc;HRS:e)qE:蕞8Xe3z0S4êe<Ɗ05FNHBAqme$do^'0Z`YK&#5Z,m<[-G=1?);Cd1{To=޼L1Z
+sjOdت5h*i)U}	wg#՝Xd=o]<n^tbD4^].+;e2kRʴ4^ohO%G<%r_;:
+	е(jd!\hYRjx+VKKkqKs"_<.Ё
+}	hzL~o{4V(?Ge֗n8,\#噦,JǇv
+l/"o"t-=g@Mm#4]qAi edR1F<D訉n?H{	gÄ<W>ԠfJ#SOb$A)g!* F( 	jZdYT8H?"x#qDɀ_[1^X$F	JDNbd0EkV!l(st;
+t^9"yǕc8^q6g?~jNw,g09w`?3^JBKE5X?eAY*LӶ$ܵcPhe%(]
+(#1CySEdH8ITVgyd4uZס9N c-nmsƮfۡVNSoQ9êYiFu. |B)6VsFnjh5 ");ԤĊMevjq&>Z}2:dq~/--U=:'zǉpk$ON RnHOz҉[/<Tom"TǥdLdmUWX;s;e%T_[Dl_;kuLJ:4KJmN%,8⬱%~j뤍Câ:cI
+ m[=R\T]Zy̹\_ZU5mY嶈|d6fiVVsڏIdń b ?<o @fX"HXS+h3PK!{"/RԆu PIzvueN=M]jv@7_YӞ4yV$ZF9"G (!`&%
+р+FQF3n&+i~ih\y).U"\,YU&\NF侞r$
+A٪<JV$BE$LU,K"@tS6dd:G^Y$EJ#xyKe4$
+,
+rj{><5`6l6%ܤ3$|d/ѺxG\o_i궫Q'氃-lڊAIQ5%ϋI!崓A!p1䲏JtZCXdE#[VB
+=aEXdcR	d1+s#]|QǘERSdŏ.
+)   
+----
+public/fonts/helvetiker_regular.typeface.json
+{"glyphs":{"ο":{"x_min":0,"x_max":712,"ha":815,"o":"m 356 -25 q 96 88 192 -25 q 0 368 0 201 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 "},"S":{"x_min":0,"x_max":788,"ha":890,"o":"m 788 291 q 662 54 788 144 q 397 -26 550 -26 q 116 68 226 -26 q 0 337 0 168 l 131 337 q 200 152 131 220 q 384 85 269 85 q 557 129 479 85 q 650 270 650 183 q 490 429 650 379 q 194 513 341 470 q 33 739 33 584 q 142 964 33 881 q 388 1041 242 1041 q 644 957 543 1041 q 756 716 756 867 l 625 716 q 561 874 625 816 q 395 933 497 933 q 243 891 309 933 q 164 759 164 841 q 325 609 164 656 q 625 526 475 568 q 788 291 788 454 "},"¦":{"x_min":343,"x_max":449,"ha":792,"o":"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "},"/":{"x_min":183.25,"x_max":608.328125,"ha":792,"o":"m 608 1041 l 266 -129 l 183 -129 l 520 1041 l 608 1041 "},"Τ":{"x_min":-0.4375,"x_max":777.453125,"ha":839,"o":"m 777 893 l 458 893 l 458 0 l 319 0 l 319 892 l 0 892 l 0 1013 l 777 1013 l 777 893 "},"y":{"x_min":0,"x_max":684.78125,"ha":771,"o":"m 684 738 l 388 -83 q 311 -216 356 -167 q 173 -279 252 -279 q 97 -266 133 -279 l 97 -149 q 132 -155 109 -151 q 168 -160 155 -160 q 240 -114 213 -160 q 274 -26 248 -98 l 0 738 l 137 737 l 341 139 l 548 737 l 684 738 "},"Π":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 803 1012 l 803 0 "},"ΐ":{"x_min":-111,"x_max":339,"ha":361,"o":"m 339 800 l 229 800 l 229 925 l 339 925 l 339 800 m -1 800 l -111 800 l -111 925 l -1 925 l -1 800 m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 m 302 1040 l 113 819 l 30 819 l 165 1040 l 302 1040 "},"g":{"x_min":0,"x_max":686,"ha":838,"o":"m 686 34 q 586 -213 686 -121 q 331 -306 487 -306 q 131 -252 216 -306 q 31 -84 31 -190 l 155 -84 q 228 -174 166 -138 q 345 -207 284 -207 q 514 -109 454 -207 q 564 89 564 -27 q 461 6 521 36 q 335 -23 401 -23 q 88 100 184 -23 q 0 370 0 215 q 87 634 0 522 q 330 758 183 758 q 457 728 398 758 q 564 644 515 699 l 564 737 l 686 737 l 686 34 m 582 367 q 529 560 582 481 q 358 652 468 652 q 189 561 250 652 q 135 369 135 482 q 189 176 135 255 q 361 85 251 85 q 529 176 468 85 q 582 367 582 255 "},"²":{"x_min":0,"x_max":442,"ha":539,"o":"m 442 383 l 0 383 q 91 566 0 492 q 260 668 176 617 q 354 798 354 727 q 315 875 354 845 q 227 905 277 905 q 136 869 173 905 q 99 761 99 833 l 14 761 q 82 922 14 864 q 232 974 141 974 q 379 926 316 974 q 442 797 442 878 q 351 635 442 704 q 183 539 321 611 q 92 455 92 491 l 442 455 l 442 383 "},"–":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "},"Κ":{"x_min":0,"x_max":819.5625,"ha":893,"o":"m 819 0 l 650 0 l 294 509 l 139 356 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "},"ƒ":{"x_min":-46.265625,"x_max":392,"ha":513,"o":"m 392 651 l 259 651 l 79 -279 l -46 -278 l 134 651 l 14 651 l 14 751 l 135 751 q 151 948 135 900 q 304 1041 185 1041 q 334 1040 319 1041 q 392 1034 348 1039 l 392 922 q 337 931 360 931 q 271 883 287 931 q 260 793 260 853 l 260 751 l 392 751 l 392 651 "},"e":{"x_min":0,"x_max":714,"ha":813,"o":"m 714 326 l 140 326 q 200 157 140 227 q 359 87 260 87 q 488 130 431 87 q 561 245 545 174 l 697 245 q 577 48 670 123 q 358 -26 484 -26 q 97 85 195 -26 q 0 363 0 197 q 94 642 0 529 q 358 765 195 765 q 626 627 529 765 q 714 326 714 503 m 576 429 q 507 583 564 522 q 355 650 445 650 q 206 583 266 650 q 140 429 152 522 l 576 429 "},"ό":{"x_min":0,"x_max":712,"ha":815,"o":"m 356 -25 q 94 91 194 -25 q 0 368 0 202 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 m 576 1040 l 387 819 l 303 819 l 438 1040 l 576 1040 "},"J":{"x_min":0,"x_max":588,"ha":699,"o":"m 588 279 q 287 -26 588 -26 q 58 73 126 -26 q 0 327 0 158 l 133 327 q 160 172 133 227 q 288 96 198 96 q 426 171 391 96 q 449 336 449 219 l 449 1013 l 588 1013 l 588 279 "},"»":{"x_min":-1,"x_max":503,"ha":601,"o":"m 503 302 l 280 136 l 281 256 l 429 373 l 281 486 l 280 608 l 503 440 l 503 302 m 221 302 l 0 136 l 0 255 l 145 372 l 0 486 l -1 608 l 221 440 l 221 302 "},"©":{"x_min":-3,"x_max":1008,"ha":1106,"o":"m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 741 394 q 661 246 731 302 q 496 190 591 190 q 294 285 369 190 q 228 497 228 370 q 295 714 228 625 q 499 813 370 813 q 656 762 588 813 q 733 625 724 711 l 634 625 q 589 704 629 673 q 498 735 550 735 q 377 666 421 735 q 334 504 334 597 q 374 340 334 408 q 490 272 415 272 q 589 304 549 272 q 638 394 628 337 l 741 394 "},"ώ":{"x_min":0,"x_max":922,"ha":1030,"o":"m 687 1040 l 498 819 l 415 819 l 549 1040 l 687 1040 m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 338 0 202 q 45 551 0 444 q 161 737 84 643 l 302 737 q 175 552 219 647 q 124 336 124 446 q 155 179 124 248 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 341 797 257 q 745 555 797 450 q 619 737 705 637 l 760 737 q 874 551 835 640 q 922 339 922 444 "},"^":{"x_min":193.0625,"x_max":598.609375,"ha":792,"o":"m 598 772 l 515 772 l 395 931 l 277 772 l 193 772 l 326 1013 l 462 1013 l 598 772 "},"«":{"x_min":0,"x_max":507.203125,"ha":604,"o":"m 506 136 l 284 302 l 284 440 l 506 608 l 507 485 l 360 371 l 506 255 l 506 136 m 222 136 l 0 302 l 0 440 l 222 608 l 221 486 l 73 373 l 222 256 l 222 136 "},"D":{"x_min":0,"x_max":828,"ha":935,"o":"m 389 1013 q 714 867 593 1013 q 828 521 828 729 q 712 161 828 309 q 382 0 587 0 l 0 0 l 0 1013 l 389 1013 m 376 124 q 607 247 523 124 q 681 510 681 355 q 607 771 681 662 q 376 896 522 896 l 139 896 l 139 124 l 376 124 "},"∙":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "},"ÿ":{"x_min":0,"x_max":47,"ha":125,"o":"m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 "},"w":{"x_min":0,"x_max":1009.71875,"ha":1100,"o":"m 1009 738 l 783 0 l 658 0 l 501 567 l 345 0 l 222 0 l 0 738 l 130 738 l 284 174 l 432 737 l 576 738 l 721 173 l 881 737 l 1009 738 "},"$":{"x_min":0,"x_max":700,"ha":793,"o":"m 664 717 l 542 717 q 490 825 531 785 q 381 872 450 865 l 381 551 q 620 446 540 522 q 700 241 700 370 q 618 45 700 116 q 381 -25 536 -25 l 381 -152 l 307 -152 l 307 -25 q 81 62 162 -25 q 0 297 0 149 l 124 297 q 169 146 124 204 q 307 81 215 89 l 307 441 q 80 536 148 469 q 13 725 13 603 q 96 910 13 839 q 307 982 180 982 l 307 1077 l 381 1077 l 381 982 q 574 917 494 982 q 664 717 664 845 m 307 565 l 307 872 q 187 831 233 872 q 142 724 142 791 q 180 618 142 656 q 307 565 218 580 m 381 76 q 562 237 562 96 q 517 361 562 313 q 381 423 472 409 l 381 76 "},"\\":{"x_min":-0.015625,"x_max":425.0625,"ha":522,"o":"m 425 -129 l 337 -129 l 0 1041 l 83 1041 l 425 -129 "},"µ":{"x_min":0,"x_max":697.21875,"ha":747,"o":"m 697 -4 q 629 -14 658 -14 q 498 97 513 -14 q 422 9 470 41 q 313 -23 374 -23 q 207 4 258 -23 q 119 81 156 32 l 119 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 173 124 246 q 308 83 216 83 q 452 178 402 83 q 493 359 493 255 l 493 738 l 617 738 l 617 214 q 623 136 617 160 q 673 92 637 92 q 697 96 684 92 l 697 -4 "},"Ι":{"x_min":42,"x_max":181,"ha":297,"o":"m 181 0 l 42 0 l 42 1013 l 181 1013 l 181 0 "},"Ύ":{"x_min":0,"x_max":1144.5,"ha":1214,"o":"m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"’":{"x_min":0,"x_max":139,"ha":236,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "},"Ν":{"x_min":0,"x_max":801,"ha":915,"o":"m 801 0 l 651 0 l 131 822 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 191 l 670 1013 l 801 1013 l 801 0 "},"-":{"x_min":8.71875,"x_max":350.390625,"ha":478,"o":"m 350 317 l 8 317 l 8 428 l 350 428 l 350 317 "},"Q":{"x_min":0,"x_max":968,"ha":1072,"o":"m 954 5 l 887 -79 l 744 35 q 622 -11 687 2 q 483 -26 556 -26 q 127 130 262 -26 q 0 504 0 279 q 127 880 0 728 q 484 1041 262 1041 q 841 884 708 1041 q 968 507 968 735 q 933 293 968 398 q 832 104 899 188 l 954 5 m 723 191 q 802 330 777 248 q 828 499 828 412 q 744 790 828 673 q 483 922 650 922 q 228 791 322 922 q 142 505 142 673 q 227 221 142 337 q 487 91 323 91 q 632 123 566 91 l 520 215 l 587 301 l 723 191 "},"ς":{"x_min":1,"x_max":676.28125,"ha":740,"o":"m 676 460 l 551 460 q 498 595 542 546 q 365 651 448 651 q 199 578 263 651 q 136 401 136 505 q 266 178 136 241 q 508 106 387 142 q 640 -50 640 62 q 625 -158 640 -105 q 583 -278 611 -211 l 465 -278 q 498 -182 490 -211 q 515 -80 515 -126 q 381 12 515 -15 q 134 91 197 51 q 1 388 1 179 q 100 651 1 542 q 354 761 199 761 q 587 680 498 761 q 676 460 676 599 "},"M":{"x_min":0,"x_max":954,"ha":1067,"o":"m 954 0 l 819 0 l 819 869 l 537 0 l 405 0 l 128 866 l 128 0 l 0 0 l 0 1013 l 200 1013 l 472 160 l 757 1013 l 954 1013 l 954 0 "},"Ψ":{"x_min":0,"x_max":1006,"ha":1094,"o":"m 1006 678 q 914 319 1006 429 q 571 200 814 200 l 571 0 l 433 0 l 433 200 q 92 319 194 200 q 0 678 0 429 l 0 1013 l 139 1013 l 139 679 q 191 417 139 492 q 433 326 255 326 l 433 1013 l 571 1013 l 571 326 l 580 326 q 813 423 747 326 q 868 679 868 502 l 868 1013 l 1006 1013 l 1006 678 "},"C":{"x_min":0,"x_max":886,"ha":944,"o":"m 886 379 q 760 87 886 201 q 455 -26 634 -26 q 112 136 236 -26 q 0 509 0 283 q 118 882 0 737 q 469 1041 245 1041 q 748 955 630 1041 q 879 708 879 859 l 745 708 q 649 862 724 805 q 473 920 573 920 q 219 791 312 920 q 136 509 136 675 q 217 229 136 344 q 470 99 311 99 q 672 179 591 99 q 753 379 753 259 l 886 379 "},"!":{"x_min":0,"x_max":138,"ha":236,"o":"m 138 684 q 116 409 138 629 q 105 244 105 299 l 33 244 q 16 465 33 313 q 0 684 0 616 l 0 1013 l 138 1013 l 138 684 m 138 0 l 0 0 l 0 151 l 138 151 l 138 0 "},"{":{"x_min":0,"x_max":480.5625,"ha":578,"o":"m 480 -286 q 237 -213 303 -286 q 187 -45 187 -159 q 194 48 187 -15 q 201 141 201 112 q 164 264 201 225 q 0 314 118 314 l 0 417 q 164 471 119 417 q 201 605 201 514 q 199 665 201 644 q 193 772 193 769 q 241 941 193 887 q 480 1015 308 1015 l 480 915 q 336 866 375 915 q 306 742 306 828 q 310 662 306 717 q 314 577 314 606 q 288 452 314 500 q 176 365 256 391 q 289 275 257 337 q 314 143 314 226 q 313 84 314 107 q 310 -11 310 -5 q 339 -131 310 -94 q 480 -182 377 -182 l 480 -286 "},"X":{"x_min":-0.015625,"x_max":854.15625,"ha":940,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 "},"#":{"x_min":0,"x_max":963.890625,"ha":1061,"o":"m 963 690 l 927 590 l 719 590 l 655 410 l 876 410 l 840 310 l 618 310 l 508 -3 l 393 -2 l 506 309 l 329 310 l 215 -2 l 102 -3 l 212 310 l 0 310 l 36 410 l 248 409 l 312 590 l 86 590 l 120 690 l 347 690 l 459 1006 l 573 1006 l 462 690 l 640 690 l 751 1006 l 865 1006 l 754 690 l 963 690 m 606 590 l 425 590 l 362 410 l 543 410 l 606 590 "},"ι":{"x_min":42,"x_max":284,"ha":361,"o":"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 738 l 167 738 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 "},"Ά":{"x_min":0,"x_max":906.953125,"ha":982,"o":"m 283 1040 l 88 799 l 5 799 l 145 1040 l 283 1040 m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1012 l 529 1012 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "},")":{"x_min":0,"x_max":318,"ha":415,"o":"m 318 365 q 257 25 318 191 q 87 -290 197 -141 l 0 -290 q 140 21 93 -128 q 193 360 193 189 q 141 704 193 537 q 0 1024 97 850 l 87 1024 q 257 706 197 871 q 318 365 318 542 "},"ε":{"x_min":0,"x_max":634.71875,"ha":714,"o":"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 314 0 265 q 128 390 67 353 q 56 460 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 "},"Δ":{"x_min":0,"x_max":952.78125,"ha":1028,"o":"m 952 0 l 0 0 l 400 1013 l 551 1013 l 952 0 m 762 124 l 476 867 l 187 124 l 762 124 "},"}":{"x_min":0,"x_max":481,"ha":578,"o":"m 481 314 q 318 262 364 314 q 282 136 282 222 q 284 65 282 97 q 293 -58 293 -48 q 241 -217 293 -166 q 0 -286 174 -286 l 0 -182 q 143 -130 105 -182 q 171 -2 171 -93 q 168 81 171 22 q 165 144 165 140 q 188 275 165 229 q 306 365 220 339 q 191 455 224 391 q 165 588 165 505 q 168 681 165 624 q 171 742 171 737 q 141 865 171 827 q 0 915 102 915 l 0 1015 q 243 942 176 1015 q 293 773 293 888 q 287 675 293 741 q 282 590 282 608 q 318 466 282 505 q 481 417 364 417 l 481 314 "},"‰":{"x_min":-3,"x_max":1672,"ha":1821,"o":"m 846 0 q 664 76 732 0 q 603 244 603 145 q 662 412 603 344 q 846 489 729 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 846 0 962 0 m 845 103 q 945 143 910 103 q 981 243 981 184 q 947 340 981 301 q 845 385 910 385 q 745 342 782 385 q 709 243 709 300 q 742 147 709 186 q 845 103 781 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 m 1428 0 q 1246 76 1314 0 q 1185 244 1185 145 q 1244 412 1185 344 q 1428 489 1311 489 q 1610 412 1542 489 q 1672 244 1672 343 q 1612 76 1672 144 q 1428 0 1545 0 m 1427 103 q 1528 143 1492 103 q 1564 243 1564 184 q 1530 340 1564 301 q 1427 385 1492 385 q 1327 342 1364 385 q 1291 243 1291 300 q 1324 147 1291 186 q 1427 103 1363 103 "},"a":{"x_min":0,"x_max":698.609375,"ha":794,"o":"m 698 0 q 661 -12 679 -7 q 615 -17 643 -17 q 536 12 564 -17 q 500 96 508 41 q 384 6 456 37 q 236 -25 312 -25 q 65 31 130 -25 q 0 194 0 88 q 118 390 0 334 q 328 435 180 420 q 488 483 476 451 q 495 523 495 504 q 442 619 495 584 q 325 654 389 654 q 209 617 257 654 q 152 513 161 580 l 33 513 q 123 705 33 633 q 332 772 207 772 q 528 712 448 772 q 617 531 617 645 l 617 163 q 624 108 617 126 q 664 90 632 90 l 698 94 l 698 0 m 491 262 l 491 372 q 272 329 350 347 q 128 201 128 294 q 166 113 128 144 q 264 83 205 83 q 414 130 346 83 q 491 262 491 183 "},"—":{"x_min":0,"x_max":941.671875,"ha":1039,"o":"m 941 334 l 0 334 l 0 410 l 941 410 l 941 334 "},"=":{"x_min":8.71875,"x_max":780.953125,"ha":792,"o":"m 780 510 l 8 510 l 8 606 l 780 606 l 780 510 m 780 235 l 8 235 l 8 332 l 780 332 l 780 235 "},"N":{"x_min":0,"x_max":801,"ha":914,"o":"m 801 0 l 651 0 l 131 823 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 193 l 670 1013 l 801 1013 l 801 0 "},"ρ":{"x_min":0,"x_max":712,"ha":797,"o":"m 712 369 q 620 94 712 207 q 362 -26 521 -26 q 230 2 292 -26 q 119 83 167 30 l 119 -278 l 0 -278 l 0 362 q 91 643 0 531 q 355 764 190 764 q 617 647 517 764 q 712 369 712 536 m 583 366 q 530 559 583 480 q 359 651 469 651 q 190 562 252 651 q 135 370 135 483 q 189 176 135 257 q 359 85 250 85 q 528 175 466 85 q 583 366 583 254 "},"2":{"x_min":59,"x_max":731,"ha":792,"o":"m 731 0 l 59 0 q 197 314 59 188 q 457 487 199 315 q 598 691 598 580 q 543 819 598 772 q 411 867 488 867 q 272 811 328 867 q 209 630 209 747 l 81 630 q 182 901 81 805 q 408 986 271 986 q 629 909 536 986 q 731 694 731 826 q 613 449 731 541 q 378 316 495 383 q 201 122 235 234 l 731 122 l 731 0 "},"¯":{"x_min":0,"x_max":941.671875,"ha":938,"o":"m 941 1033 l 0 1033 l 0 1109 l 941 1109 l 941 1033 "},"Z":{"x_min":0,"x_max":779,"ha":849,"o":"m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 "},"u":{"x_min":0,"x_max":617,"ha":729,"o":"m 617 0 l 499 0 l 499 110 q 391 10 460 45 q 246 -25 322 -25 q 61 58 127 -25 q 0 258 0 136 l 0 738 l 125 738 l 125 284 q 156 148 125 202 q 273 82 197 82 q 433 165 369 82 q 493 340 493 243 l 493 738 l 617 738 l 617 0 "},"k":{"x_min":0,"x_max":612.484375,"ha":697,"o":"m 612 738 l 338 465 l 608 0 l 469 0 l 251 382 l 121 251 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 402 l 456 738 l 612 738 "},"Η":{"x_min":0,"x_max":803,"ha":917,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"Α":{"x_min":0,"x_max":906.953125,"ha":985,"o":"m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "},"s":{"x_min":0,"x_max":604,"ha":697,"o":"m 604 217 q 501 36 604 104 q 292 -23 411 -23 q 86 43 166 -23 q 0 238 0 114 l 121 237 q 175 122 121 164 q 300 85 223 85 q 415 112 363 85 q 479 207 479 147 q 361 309 479 276 q 140 372 141 370 q 21 544 21 426 q 111 708 21 647 q 298 761 190 761 q 492 705 413 761 q 583 531 583 643 l 462 531 q 412 625 462 594 q 298 657 363 657 q 199 636 242 657 q 143 558 143 608 q 262 454 143 486 q 484 394 479 397 q 604 217 604 341 "},"B":{"x_min":0,"x_max":778,"ha":876,"o":"m 580 546 q 724 469 670 535 q 778 311 778 403 q 673 83 778 171 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 892 q 691 633 732 693 q 580 546 650 572 m 393 899 l 139 899 l 139 588 l 379 588 q 521 624 462 588 q 592 744 592 667 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 303 635 219 q 559 436 635 389 q 402 477 494 477 l 139 477 l 139 124 l 419 124 "},"…":{"x_min":0,"x_max":614,"ha":708,"o":"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 m 378 0 l 236 0 l 236 151 l 378 151 l 378 0 m 614 0 l 472 0 l 472 151 l 614 151 l 614 0 "},"?":{"x_min":0,"x_max":607,"ha":704,"o":"m 607 777 q 543 599 607 674 q 422 474 482 537 q 357 272 357 391 l 236 272 q 297 487 236 395 q 411 619 298 490 q 474 762 474 691 q 422 885 474 838 q 301 933 371 933 q 179 880 228 933 q 124 706 124 819 l 0 706 q 94 963 0 872 q 302 1044 177 1044 q 511 973 423 1044 q 607 777 607 895 m 370 0 l 230 0 l 230 151 l 370 151 l 370 0 "},"H":{"x_min":0,"x_max":803,"ha":915,"o":"m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "},"ν":{"x_min":0,"x_max":675,"ha":761,"o":"m 675 738 l 404 0 l 272 0 l 0 738 l 133 738 l 340 147 l 541 738 l 675 738 "},"c":{"x_min":1,"x_max":701.390625,"ha":775,"o":"m 701 264 q 584 53 681 133 q 353 -26 487 -26 q 91 91 188 -26 q 1 370 1 201 q 92 645 1 537 q 353 761 190 761 q 572 688 479 761 q 690 493 666 615 l 556 493 q 487 606 545 562 q 356 650 428 650 q 186 563 246 650 q 134 372 134 487 q 188 179 134 258 q 359 88 250 88 q 492 136 437 88 q 566 264 548 185 l 701 264 "},"¶":{"x_min":0,"x_max":566.671875,"ha":678,"o":"m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 "},"β":{"x_min":0,"x_max":660,"ha":745,"o":"m 471 550 q 610 450 561 522 q 660 280 660 378 q 578 64 660 151 q 367 -22 497 -22 q 239 5 299 -22 q 126 82 178 32 l 126 -278 l 0 -278 l 0 593 q 54 903 0 801 q 318 1042 127 1042 q 519 964 436 1042 q 603 771 603 887 q 567 644 603 701 q 471 550 532 586 m 337 79 q 476 138 418 79 q 535 279 535 198 q 427 437 535 386 q 226 477 344 477 l 226 583 q 398 620 329 583 q 486 762 486 668 q 435 884 486 833 q 312 935 384 935 q 169 861 219 935 q 126 698 126 797 l 126 362 q 170 169 126 242 q 337 79 224 79 "},"Μ":{"x_min":0,"x_max":954,"ha":1068,"o":"m 954 0 l 819 0 l 819 868 l 537 0 l 405 0 l 128 865 l 128 0 l 0 0 l 0 1013 l 199 1013 l 472 158 l 758 1013 l 954 1013 l 954 0 "},"Ό":{"x_min":0.109375,"x_max":1120,"ha":1217,"o":"m 1120 505 q 994 132 1120 282 q 642 -29 861 -29 q 290 130 422 -29 q 167 505 167 280 q 294 883 167 730 q 650 1046 430 1046 q 999 882 868 1046 q 1120 505 1120 730 m 977 504 q 896 784 977 669 q 644 915 804 915 q 391 785 484 915 q 307 504 307 669 q 391 224 307 339 q 644 95 486 95 q 894 224 803 95 q 977 504 977 339 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"Ή":{"x_min":0,"x_max":1158,"ha":1275,"o":"m 1158 0 l 1022 0 l 1022 475 l 496 475 l 496 0 l 356 0 l 356 1012 l 496 1012 l 496 599 l 1022 599 l 1022 1012 l 1158 1012 l 1158 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"•":{"x_min":0,"x_max":663.890625,"ha":775,"o":"m 663 529 q 566 293 663 391 q 331 196 469 196 q 97 294 194 196 q 0 529 0 393 q 96 763 0 665 q 331 861 193 861 q 566 763 469 861 q 663 529 663 665 "},"¥":{"x_min":0.1875,"x_max":819.546875,"ha":886,"o":"m 563 561 l 697 561 l 696 487 l 520 487 l 482 416 l 482 380 l 697 380 l 695 308 l 482 308 l 482 0 l 342 0 l 342 308 l 125 308 l 125 380 l 342 380 l 342 417 l 303 487 l 125 487 l 125 561 l 258 561 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 l 563 561 "},"(":{"x_min":0,"x_max":318.0625,"ha":415,"o":"m 318 -290 l 230 -290 q 61 23 122 -142 q 0 365 0 190 q 62 712 0 540 q 230 1024 119 869 l 318 1024 q 175 705 219 853 q 125 360 125 542 q 176 22 125 187 q 318 -290 223 -127 "},"U":{"x_min":0,"x_max":796,"ha":904,"o":"m 796 393 q 681 93 796 212 q 386 -25 566 -25 q 101 95 208 -25 q 0 393 0 211 l 0 1013 l 138 1013 l 138 391 q 204 191 138 270 q 394 107 276 107 q 586 191 512 107 q 656 391 656 270 l 656 1013 l 796 1013 l 796 393 "},"γ":{"x_min":0.5,"x_max":744.953125,"ha":822,"o":"m 744 737 l 463 54 l 463 -278 l 338 -278 l 338 54 l 154 495 q 104 597 124 569 q 13 651 67 651 l 0 651 l 0 751 l 39 753 q 168 711 121 753 q 242 594 207 676 l 403 208 l 617 737 l 744 737 "},"α":{"x_min":0,"x_max":765.5625,"ha":809,"o":"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 728 407 760 q 563 637 524 696 l 563 739 l 685 739 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 96 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 "},"F":{"x_min":0,"x_max":683.328125,"ha":717,"o":"m 683 888 l 140 888 l 140 583 l 613 583 l 613 458 l 140 458 l 140 0 l 0 0 l 0 1013 l 683 1013 l 683 888 "},"­":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "},":":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "},"Χ":{"x_min":0,"x_max":854.171875,"ha":935,"o":"m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 "},"*":{"x_min":116,"x_max":674,"ha":792,"o":"m 674 768 l 475 713 l 610 544 l 517 477 l 394 652 l 272 478 l 178 544 l 314 713 l 116 766 l 153 876 l 341 812 l 342 1013 l 446 1013 l 446 811 l 635 874 l 674 768 "},"†":{"x_min":0,"x_max":777,"ha":835,"o":"m 458 804 l 777 804 l 777 683 l 458 683 l 458 0 l 319 0 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 "},"°":{"x_min":0,"x_max":347,"ha":444,"o":"m 173 802 q 43 856 91 802 q 0 977 0 905 q 45 1101 0 1049 q 173 1153 90 1153 q 303 1098 255 1153 q 347 977 347 1049 q 303 856 347 905 q 173 802 256 802 m 173 884 q 238 910 214 884 q 262 973 262 937 q 239 1038 262 1012 q 173 1064 217 1064 q 108 1037 132 1064 q 85 973 85 1010 q 108 910 85 937 q 173 884 132 884 "},"V":{"x_min":0,"x_max":862.71875,"ha":940,"o":"m 862 1013 l 505 0 l 361 0 l 0 1013 l 143 1013 l 434 165 l 718 1012 l 862 1013 "},"Ξ":{"x_min":0,"x_max":734.71875,"ha":763,"o":"m 723 889 l 9 889 l 9 1013 l 723 1013 l 723 889 m 673 463 l 61 463 l 61 589 l 673 589 l 673 463 m 734 0 l 0 0 l 0 124 l 734 124 l 734 0 "}," ":{"x_min":0,"x_max":0,"ha":853},"Ϋ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 588 1046 l 460 1046 l 460 1189 l 588 1189 l 588 1046 m 360 1046 l 232 1046 l 232 1189 l 360 1189 l 360 1046 m 819 1012 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1012 l 140 1012 l 411 533 l 679 1012 l 819 1012 "},"0":{"x_min":73,"x_max":715,"ha":792,"o":"m 394 -29 q 153 129 242 -29 q 73 479 73 272 q 152 829 73 687 q 394 989 241 989 q 634 829 545 989 q 715 479 715 684 q 635 129 715 270 q 394 -29 546 -29 m 394 89 q 546 211 489 89 q 598 479 598 322 q 548 748 598 640 q 394 871 491 871 q 241 748 298 871 q 190 479 190 637 q 239 211 190 319 q 394 89 296 89 "},"”":{"x_min":0,"x_max":347,"ha":454,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 m 347 851 q 310 737 347 784 q 208 669 273 690 l 208 734 q 267 787 250 741 q 280 873 280 821 l 208 873 l 208 1013 l 347 1013 l 347 851 "},"@":{"x_min":0,"x_max":1260,"ha":1357,"o":"m 1098 -45 q 877 -160 1001 -117 q 633 -203 752 -203 q 155 -29 327 -203 q 0 360 0 127 q 176 802 0 616 q 687 1008 372 1008 q 1123 854 969 1008 q 1260 517 1260 718 q 1155 216 1260 341 q 868 82 1044 82 q 772 106 801 82 q 737 202 737 135 q 647 113 700 144 q 527 82 594 82 q 367 147 420 82 q 314 312 314 212 q 401 565 314 452 q 639 690 498 690 q 810 588 760 690 l 849 668 l 938 668 q 877 441 900 532 q 833 226 833 268 q 853 182 833 198 q 902 167 873 167 q 1088 272 1012 167 q 1159 512 1159 372 q 1051 793 1159 681 q 687 925 925 925 q 248 747 415 925 q 97 361 97 586 q 226 26 97 159 q 627 -122 370 -122 q 856 -87 737 -122 q 1061 8 976 -53 l 1098 -45 m 786 488 q 738 580 777 545 q 643 615 700 615 q 483 517 548 615 q 425 322 425 430 q 457 203 425 250 q 552 156 490 156 q 722 273 665 156 q 786 488 738 309 "},"Ί":{"x_min":0,"x_max":499,"ha":613,"o":"m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 m 499 0 l 360 0 l 360 1012 l 499 1012 l 499 0 "},"i":{"x_min":14,"x_max":136,"ha":275,"o":"m 136 873 l 14 873 l 14 1013 l 136 1013 l 136 873 m 136 0 l 14 0 l 14 737 l 136 737 l 136 0 "},"Β":{"x_min":0,"x_max":778,"ha":877,"o":"m 580 545 q 724 468 671 534 q 778 310 778 402 q 673 83 778 170 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 891 q 691 632 732 692 q 580 545 650 571 m 393 899 l 139 899 l 139 587 l 379 587 q 521 623 462 587 q 592 744 592 666 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 302 635 219 q 559 435 635 388 q 402 476 494 476 l 139 476 l 139 124 l 419 124 "},"υ":{"x_min":0,"x_max":617,"ha":725,"o":"m 617 352 q 540 94 617 199 q 308 -24 455 -24 q 76 94 161 -24 q 0 352 0 199 l 0 739 l 126 739 l 126 355 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 355 492 257 l 492 739 l 617 739 l 617 352 "},"]":{"x_min":0,"x_max":275,"ha":372,"o":"m 275 -281 l 0 -281 l 0 -187 l 151 -187 l 151 920 l 0 920 l 0 1013 l 275 1013 l 275 -281 "},"m":{"x_min":0,"x_max":1019,"ha":1128,"o":"m 1019 0 l 897 0 l 897 454 q 860 591 897 536 q 739 660 816 660 q 613 586 659 660 q 573 436 573 522 l 573 0 l 447 0 l 447 455 q 412 591 447 535 q 294 657 372 657 q 165 586 213 657 q 122 437 122 521 l 122 0 l 0 0 l 0 738 l 117 738 l 117 640 q 202 730 150 697 q 316 763 254 763 q 437 730 381 763 q 525 642 494 697 q 621 731 559 700 q 753 763 682 763 q 943 694 867 763 q 1019 512 1019 625 l 1019 0 "},"χ":{"x_min":8.328125,"x_max":780.5625,"ha":815,"o":"m 780 -278 q 715 -294 747 -294 q 616 -257 663 -294 q 548 -175 576 -227 l 379 133 l 143 -277 l 9 -277 l 313 254 l 163 522 q 127 586 131 580 q 36 640 91 640 q 8 637 27 640 l 8 752 l 52 757 q 162 719 113 757 q 236 627 200 690 l 383 372 l 594 737 l 726 737 l 448 250 l 625 -69 q 670 -153 647 -110 q 743 -188 695 -188 q 780 -184 759 -188 l 780 -278 "},"8":{"x_min":55,"x_max":736,"ha":792,"o":"m 571 527 q 694 424 652 491 q 736 280 736 358 q 648 71 736 158 q 395 -26 551 -26 q 142 69 238 -26 q 55 279 55 157 q 96 425 55 359 q 220 527 138 491 q 120 615 153 562 q 88 726 88 668 q 171 904 88 827 q 395 986 261 986 q 618 905 529 986 q 702 727 702 830 q 670 616 702 667 q 571 527 638 565 m 394 565 q 519 610 475 565 q 563 717 563 655 q 521 823 563 781 q 392 872 474 872 q 265 824 312 872 q 224 720 224 783 q 265 613 224 656 q 394 565 312 565 m 395 91 q 545 150 488 91 q 597 280 597 204 q 546 408 597 355 q 395 465 492 465 q 244 408 299 465 q 194 280 194 356 q 244 150 194 203 q 395 91 299 91 "},"ί":{"x_min":42,"x_max":326.71875,"ha":361,"o":"m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 102 239 101 q 284 112 257 104 l 284 3 m 326 1040 l 137 819 l 54 819 l 189 1040 l 326 1040 "},"Ζ":{"x_min":0,"x_max":779.171875,"ha":850,"o":"m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 "},"R":{"x_min":0,"x_max":781.953125,"ha":907,"o":"m 781 0 l 623 0 q 587 242 590 52 q 407 433 585 433 l 138 433 l 138 0 l 0 0 l 0 1013 l 396 1013 q 636 946 539 1013 q 749 731 749 868 q 711 597 749 659 q 608 502 674 534 q 718 370 696 474 q 729 207 722 352 q 781 26 736 62 l 781 0 m 373 551 q 533 594 465 551 q 614 731 614 645 q 532 859 614 815 q 373 896 465 896 l 138 896 l 138 551 l 373 551 "},"o":{"x_min":0,"x_max":713,"ha":821,"o":"m 357 -25 q 94 91 194 -25 q 0 368 0 202 q 93 642 0 533 q 357 761 193 761 q 618 644 518 761 q 713 368 713 533 q 619 91 713 201 q 357 -25 521 -25 m 357 85 q 528 175 465 85 q 584 369 584 255 q 529 562 584 484 q 357 651 467 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 357 85 250 85 "},"5":{"x_min":54.171875,"x_max":738,"ha":792,"o":"m 738 314 q 626 60 738 153 q 382 -23 526 -23 q 155 47 248 -23 q 54 256 54 125 l 183 256 q 259 132 204 174 q 382 91 314 91 q 533 149 471 91 q 602 314 602 213 q 538 469 602 411 q 386 528 475 528 q 284 506 332 528 q 197 439 237 484 l 81 439 l 159 958 l 684 958 l 684 840 l 254 840 l 214 579 q 306 627 258 612 q 407 643 354 643 q 636 552 540 643 q 738 314 738 457 "},"7":{"x_min":58.71875,"x_max":730.953125,"ha":792,"o":"m 730 839 q 469 448 560 641 q 335 0 378 255 l 192 0 q 328 441 235 252 q 593 830 421 630 l 58 830 l 58 958 l 730 958 l 730 839 "},"K":{"x_min":0,"x_max":819.46875,"ha":906,"o":"m 819 0 l 649 0 l 294 509 l 139 355 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "},",":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 -12 q 105 -132 142 -82 q 0 -205 68 -182 l 0 -138 q 57 -82 40 -124 q 70 0 70 -51 l 0 0 l 0 151 l 142 151 l 142 -12 "},"d":{"x_min":0,"x_max":683,"ha":796,"o":"m 683 0 l 564 0 l 564 93 q 456 6 516 38 q 327 -25 395 -25 q 87 100 181 -25 q 0 365 0 215 q 90 639 0 525 q 343 763 187 763 q 564 647 486 763 l 564 1013 l 683 1013 l 683 0 m 582 373 q 529 562 582 484 q 361 653 468 653 q 190 561 253 653 q 135 365 135 479 q 189 175 135 254 q 358 85 251 85 q 529 178 468 85 q 582 373 582 258 "},"¨":{"x_min":-109,"x_max":247,"ha":232,"o":"m 247 1046 l 119 1046 l 119 1189 l 247 1189 l 247 1046 m 19 1046 l -109 1046 l -109 1189 l 19 1189 l 19 1046 "},"E":{"x_min":0,"x_max":736.109375,"ha":789,"o":"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "},"Y":{"x_min":0,"x_max":820,"ha":886,"o":"m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 "},"\"":{"x_min":0,"x_max":299,"ha":396,"o":"m 299 606 l 203 606 l 203 988 l 299 988 l 299 606 m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "},"‹":{"x_min":17.984375,"x_max":773.609375,"ha":792,"o":"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "},"„":{"x_min":0,"x_max":364,"ha":467,"o":"m 141 -12 q 104 -132 141 -82 q 0 -205 67 -182 l 0 -138 q 56 -82 40 -124 q 69 0 69 -51 l 0 0 l 0 151 l 141 151 l 141 -12 m 364 -12 q 327 -132 364 -82 q 222 -205 290 -182 l 222 -138 q 279 -82 262 -124 q 292 0 292 -51 l 222 0 l 222 151 l 364 151 l 364 -12 "},"δ":{"x_min":1,"x_max":710,"ha":810,"o":"m 710 360 q 616 87 710 196 q 356 -28 518 -28 q 99 82 197 -28 q 1 356 1 192 q 100 606 1 509 q 355 703 199 703 q 180 829 288 754 q 70 903 124 866 l 70 1012 l 643 1012 l 643 901 l 258 901 q 462 763 422 794 q 636 592 577 677 q 710 360 710 485 m 584 365 q 552 501 584 447 q 451 602 521 555 q 372 611 411 611 q 197 541 258 611 q 136 355 136 472 q 190 171 136 245 q 358 85 252 85 q 528 173 465 85 q 584 365 584 252 "},"έ":{"x_min":0,"x_max":634.71875,"ha":714,"o":"m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 313 0 265 q 128 390 67 352 q 56 459 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 m 520 1040 l 331 819 l 248 819 l 383 1040 l 520 1040 "},"ω":{"x_min":0,"x_max":922,"ha":1031,"o":"m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 "},"´":{"x_min":0,"x_max":96,"ha":251,"o":"m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "},"±":{"x_min":11,"x_max":781,"ha":792,"o":"m 781 490 l 446 490 l 446 255 l 349 255 l 349 490 l 11 490 l 11 586 l 349 586 l 349 819 l 446 819 l 446 586 l 781 586 l 781 490 m 781 21 l 11 21 l 11 115 l 781 115 l 781 21 "},"|":{"x_min":343,"x_max":449,"ha":792,"o":"m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "},"ϋ":{"x_min":0,"x_max":617,"ha":725,"o":"m 482 800 l 372 800 l 372 925 l 482 925 l 482 800 m 239 800 l 129 800 l 129 925 l 239 925 l 239 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 "},"§":{"x_min":0,"x_max":593,"ha":690,"o":"m 593 425 q 554 312 593 369 q 467 233 516 254 q 537 83 537 172 q 459 -74 537 -12 q 288 -133 387 -133 q 115 -69 184 -133 q 47 96 47 -6 l 166 96 q 199 7 166 40 q 288 -26 232 -26 q 371 -5 332 -26 q 420 60 420 21 q 311 201 420 139 q 108 309 210 255 q 0 490 0 383 q 33 602 0 551 q 124 687 66 654 q 75 743 93 712 q 58 812 58 773 q 133 984 58 920 q 300 1043 201 1043 q 458 987 394 1043 q 529 814 529 925 l 411 814 q 370 908 404 877 q 289 939 336 939 q 213 911 246 939 q 180 841 180 883 q 286 720 180 779 q 484 612 480 615 q 593 425 593 534 m 467 409 q 355 544 467 473 q 196 630 228 612 q 146 587 162 609 q 124 525 124 558 q 239 387 124 462 q 398 298 369 315 q 448 345 429 316 q 467 409 467 375 "},"b":{"x_min":0,"x_max":685,"ha":783,"o":"m 685 372 q 597 99 685 213 q 347 -25 501 -25 q 219 5 277 -25 q 121 93 161 36 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 634 q 214 723 157 692 q 341 754 272 754 q 591 637 493 754 q 685 372 685 526 m 554 356 q 499 550 554 470 q 328 644 437 644 q 162 556 223 644 q 108 369 108 478 q 160 176 108 256 q 330 83 221 83 q 498 169 435 83 q 554 356 554 245 "},"q":{"x_min":0,"x_max":683,"ha":876,"o":"m 683 -278 l 564 -278 l 564 97 q 474 8 533 39 q 345 -23 415 -23 q 91 93 188 -23 q 0 364 0 203 q 87 635 0 522 q 337 760 184 760 q 466 727 408 760 q 564 637 523 695 l 564 737 l 683 737 l 683 -278 m 582 375 q 527 564 582 488 q 358 652 466 652 q 190 565 253 652 q 135 377 135 488 q 189 179 135 261 q 361 84 251 84 q 530 179 469 84 q 582 375 582 260 "},"Ω":{"x_min":-0.171875,"x_max":969.5625,"ha":1068,"o":"m 969 0 l 555 0 l 555 123 q 744 308 675 194 q 814 558 814 423 q 726 812 814 709 q 484 922 633 922 q 244 820 334 922 q 154 567 154 719 q 223 316 154 433 q 412 123 292 199 l 412 0 l 0 0 l 0 124 l 217 124 q 68 327 122 210 q 15 572 15 444 q 144 911 15 781 q 484 1041 274 1041 q 822 909 691 1041 q 953 569 953 777 q 899 326 953 443 q 750 124 846 210 l 969 124 l 969 0 "},"ύ":{"x_min":0,"x_max":617,"ha":725,"o":"m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 535 1040 l 346 819 l 262 819 l 397 1040 l 535 1040 "},"z":{"x_min":-0.015625,"x_max":613.890625,"ha":697,"o":"m 613 0 l 0 0 l 0 100 l 433 630 l 20 630 l 20 738 l 594 738 l 593 636 l 163 110 l 613 110 l 613 0 "},"™":{"x_min":0,"x_max":894,"ha":1000,"o":"m 389 951 l 229 951 l 229 503 l 160 503 l 160 951 l 0 951 l 0 1011 l 389 1011 l 389 951 m 894 503 l 827 503 l 827 939 l 685 503 l 620 503 l 481 937 l 481 503 l 417 503 l 417 1011 l 517 1011 l 653 580 l 796 1010 l 894 1011 l 894 503 "},"ή":{"x_min":0.78125,"x_max":697,"ha":810,"o":"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 721 124 755 q 200 630 193 687 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 m 479 1040 l 290 819 l 207 819 l 341 1040 l 479 1040 "},"Θ":{"x_min":0,"x_max":960,"ha":1056,"o":"m 960 507 q 833 129 960 280 q 476 -32 698 -32 q 123 129 255 -32 q 0 507 0 280 q 123 883 0 732 q 476 1045 255 1045 q 832 883 696 1045 q 960 507 960 732 m 817 500 q 733 789 817 669 q 476 924 639 924 q 223 792 317 924 q 142 507 142 675 q 222 222 142 339 q 476 89 315 89 q 730 218 636 89 q 817 500 817 334 m 716 449 l 243 449 l 243 571 l 716 571 l 716 449 "},"®":{"x_min":-3,"x_max":1008,"ha":1106,"o":"m 503 532 q 614 562 566 532 q 672 658 672 598 q 614 747 672 716 q 503 772 569 772 l 338 772 l 338 532 l 503 532 m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 788 146 l 678 146 q 653 316 655 183 q 527 449 652 449 l 338 449 l 338 146 l 241 146 l 241 854 l 518 854 q 688 808 621 854 q 766 658 766 755 q 739 563 766 607 q 668 497 713 519 q 751 331 747 472 q 788 164 756 190 l 788 146 "},"~":{"x_min":0,"x_max":833,"ha":931,"o":"m 833 958 q 778 753 833 831 q 594 665 716 665 q 402 761 502 665 q 240 857 302 857 q 131 795 166 857 q 104 665 104 745 l 0 665 q 54 867 0 789 q 237 958 116 958 q 429 861 331 958 q 594 765 527 765 q 704 827 670 765 q 729 958 729 874 l 833 958 "},"Ε":{"x_min":0,"x_max":736.21875,"ha":778,"o":"m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "},"³":{"x_min":0,"x_max":450,"ha":547,"o":"m 450 552 q 379 413 450 464 q 220 366 313 366 q 69 414 130 366 q 0 567 0 470 l 85 567 q 126 470 85 504 q 225 437 168 437 q 320 467 280 437 q 360 552 360 498 q 318 632 360 608 q 213 657 276 657 q 195 657 203 657 q 176 657 181 657 l 176 722 q 279 733 249 722 q 334 815 334 752 q 300 881 334 856 q 220 907 267 907 q 133 875 169 907 q 97 781 97 844 l 15 781 q 78 926 15 875 q 220 972 135 972 q 364 930 303 972 q 426 817 426 888 q 344 697 426 733 q 421 642 392 681 q 450 552 450 603 "},"[":{"x_min":0,"x_max":273.609375,"ha":371,"o":"m 273 -281 l 0 -281 l 0 1013 l 273 1013 l 273 920 l 124 920 l 124 -187 l 273 -187 l 273 -281 "},"L":{"x_min":0,"x_max":645.828125,"ha":696,"o":"m 645 0 l 0 0 l 0 1013 l 140 1013 l 140 126 l 645 126 l 645 0 "},"σ":{"x_min":0,"x_max":803.390625,"ha":894,"o":"m 803 628 l 633 628 q 713 368 713 512 q 618 93 713 204 q 357 -25 518 -25 q 94 91 194 -25 q 0 368 0 201 q 94 644 0 533 q 356 761 194 761 q 481 750 398 761 q 608 739 564 739 l 803 739 l 803 628 m 360 85 q 529 180 467 85 q 584 374 584 262 q 527 566 584 490 q 352 651 463 651 q 187 559 247 651 q 135 368 135 478 q 189 175 135 254 q 360 85 251 85 "},"ζ":{"x_min":0,"x_max":573,"ha":642,"o":"m 573 -40 q 553 -162 573 -97 q 510 -278 543 -193 l 400 -278 q 441 -187 428 -219 q 462 -90 462 -132 q 378 -14 462 -14 q 108 45 197 -14 q 0 290 0 117 q 108 631 0 462 q 353 901 194 767 l 55 901 l 55 1012 l 561 1012 l 561 924 q 261 669 382 831 q 128 301 128 489 q 243 117 128 149 q 458 98 350 108 q 573 -40 573 80 "},"θ":{"x_min":0,"x_max":674,"ha":778,"o":"m 674 496 q 601 160 674 304 q 336 -26 508 -26 q 73 153 165 -26 q 0 485 0 296 q 72 840 0 683 q 343 1045 166 1045 q 605 844 516 1045 q 674 496 674 692 m 546 579 q 498 798 546 691 q 336 935 437 935 q 178 798 237 935 q 126 579 137 701 l 546 579 m 546 475 l 126 475 q 170 233 126 348 q 338 80 230 80 q 504 233 447 80 q 546 475 546 346 "},"Ο":{"x_min":0,"x_max":958,"ha":1054,"o":"m 485 1042 q 834 883 703 1042 q 958 511 958 735 q 834 136 958 287 q 481 -26 701 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 729 q 485 1042 263 1042 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 670 q 480 913 640 913 q 226 785 321 913 q 142 504 142 671 q 226 224 142 339 q 480 98 319 98 "},"Γ":{"x_min":0,"x_max":705.28125,"ha":749,"o":"m 705 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 705 1012 l 705 886 "}," ":{"x_min":0,"x_max":0,"ha":375},"%":{"x_min":-3,"x_max":1089,"ha":1186,"o":"m 845 0 q 663 76 731 0 q 602 244 602 145 q 661 412 602 344 q 845 489 728 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 845 0 962 0 m 844 103 q 945 143 909 103 q 981 243 981 184 q 947 340 981 301 q 844 385 909 385 q 744 342 781 385 q 708 243 708 300 q 741 147 708 186 q 844 103 780 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 "},"P":{"x_min":0,"x_max":726,"ha":806,"o":"m 424 1013 q 640 931 555 1013 q 726 719 726 850 q 637 506 726 587 q 413 426 548 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 379 889 l 140 889 l 140 548 l 372 548 q 522 589 459 548 q 593 720 593 637 q 528 845 593 801 q 379 889 463 889 "},"Έ":{"x_min":0,"x_max":1078.21875,"ha":1118,"o":"m 1078 0 l 342 0 l 342 1013 l 1067 1013 l 1067 889 l 481 889 l 481 585 l 1019 585 l 1019 467 l 481 467 l 481 125 l 1078 125 l 1078 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "},"Ώ":{"x_min":0.125,"x_max":1136.546875,"ha":1235,"o":"m 1136 0 l 722 0 l 722 123 q 911 309 842 194 q 981 558 981 423 q 893 813 981 710 q 651 923 800 923 q 411 821 501 923 q 321 568 321 720 q 390 316 321 433 q 579 123 459 200 l 579 0 l 166 0 l 166 124 l 384 124 q 235 327 289 210 q 182 572 182 444 q 311 912 182 782 q 651 1042 441 1042 q 989 910 858 1042 q 1120 569 1120 778 q 1066 326 1120 443 q 917 124 1013 210 l 1136 124 l 1136 0 m 277 1040 l 83 800 l 0 800 l 140 1041 l 277 1040 "},"_":{"x_min":0,"x_max":705.5625,"ha":803,"o":"m 705 -334 l 0 -334 l 0 -234 l 705 -234 l 705 -334 "},"Ϊ":{"x_min":-110,"x_max":246,"ha":275,"o":"m 246 1046 l 118 1046 l 118 1189 l 246 1189 l 246 1046 m 18 1046 l -110 1046 l -110 1189 l 18 1189 l 18 1046 m 136 0 l 0 0 l 0 1012 l 136 1012 l 136 0 "},"+":{"x_min":23,"x_max":768,"ha":792,"o":"m 768 372 l 444 372 l 444 0 l 347 0 l 347 372 l 23 372 l 23 468 l 347 468 l 347 840 l 444 840 l 444 468 l 768 468 l 768 372 "},"½":{"x_min":0,"x_max":1050,"ha":1149,"o":"m 1050 0 l 625 0 q 712 178 625 108 q 878 277 722 187 q 967 385 967 328 q 932 456 967 429 q 850 484 897 484 q 759 450 798 484 q 721 352 721 416 l 640 352 q 706 502 640 448 q 851 551 766 551 q 987 509 931 551 q 1050 385 1050 462 q 976 251 1050 301 q 829 179 902 215 q 717 68 740 133 l 1050 68 l 1050 0 m 834 985 l 215 -28 l 130 -28 l 750 984 l 834 985 m 224 422 l 142 422 l 142 811 l 0 811 l 0 867 q 104 889 62 867 q 164 973 157 916 l 224 973 l 224 422 "},"Ρ":{"x_min":0,"x_max":720,"ha":783,"o":"m 424 1013 q 637 933 554 1013 q 720 723 720 853 q 633 508 720 591 q 413 426 546 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 378 889 l 140 889 l 140 548 l 371 548 q 521 589 458 548 q 592 720 592 637 q 527 845 592 801 q 378 889 463 889 "},"'":{"x_min":0,"x_max":139,"ha":236,"o":"m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "},"ª":{"x_min":0,"x_max":350,"ha":397,"o":"m 350 625 q 307 616 328 616 q 266 631 281 616 q 247 673 251 645 q 190 628 225 644 q 116 613 156 613 q 32 641 64 613 q 0 722 0 669 q 72 826 0 800 q 247 866 159 846 l 247 887 q 220 934 247 916 q 162 953 194 953 q 104 934 129 953 q 76 882 80 915 l 16 882 q 60 976 16 941 q 166 1011 104 1011 q 266 979 224 1011 q 308 891 308 948 l 308 706 q 311 679 308 688 q 331 670 315 670 l 350 672 l 350 625 m 247 757 l 247 811 q 136 790 175 798 q 64 726 64 773 q 83 682 64 697 q 132 667 103 667 q 207 690 174 667 q 247 757 247 718 "},"΅":{"x_min":0,"x_max":450,"ha":553,"o":"m 450 800 l 340 800 l 340 925 l 450 925 l 450 800 m 406 1040 l 212 800 l 129 800 l 269 1040 l 406 1040 m 110 800 l 0 800 l 0 925 l 110 925 l 110 800 "},"T":{"x_min":0,"x_max":777,"ha":835,"o":"m 777 894 l 458 894 l 458 0 l 319 0 l 319 894 l 0 894 l 0 1013 l 777 1013 l 777 894 "},"Φ":{"x_min":0,"x_max":915,"ha":997,"o":"m 527 0 l 389 0 l 389 122 q 110 231 220 122 q 0 509 0 340 q 110 785 0 677 q 389 893 220 893 l 389 1013 l 527 1013 l 527 893 q 804 786 693 893 q 915 509 915 679 q 805 231 915 341 q 527 122 696 122 l 527 0 m 527 226 q 712 310 641 226 q 779 507 779 389 q 712 705 779 627 q 527 787 641 787 l 527 226 m 389 226 l 389 787 q 205 698 275 775 q 136 505 136 620 q 206 308 136 391 q 389 226 276 226 "},"⁋":{"x_min":0,"x_max":0,"ha":694},"j":{"x_min":-77.78125,"x_max":167,"ha":349,"o":"m 167 871 l 42 871 l 42 1013 l 167 1013 l 167 871 m 167 -80 q 121 -231 167 -184 q -26 -278 76 -278 l -77 -278 l -77 -164 l -41 -164 q 26 -143 11 -164 q 42 -65 42 -122 l 42 737 l 167 737 l 167 -80 "},"Σ":{"x_min":0,"x_max":756.953125,"ha":819,"o":"m 756 0 l 0 0 l 0 107 l 395 523 l 22 904 l 22 1013 l 745 1013 l 745 889 l 209 889 l 566 523 l 187 125 l 756 125 l 756 0 "},"1":{"x_min":215.671875,"x_max":574,"ha":792,"o":"m 574 0 l 442 0 l 442 697 l 215 697 l 215 796 q 386 833 330 796 q 475 986 447 875 l 574 986 l 574 0 "},"›":{"x_min":18.0625,"x_max":774,"ha":792,"o":"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "},"<":{"x_min":17.984375,"x_max":773.609375,"ha":792,"o":"m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "},"£":{"x_min":0,"x_max":704.484375,"ha":801,"o":"m 704 41 q 623 -10 664 5 q 543 -26 583 -26 q 359 15 501 -26 q 243 36 288 36 q 158 23 197 36 q 73 -21 119 10 l 6 76 q 125 195 90 150 q 175 331 175 262 q 147 443 175 383 l 0 443 l 0 512 l 108 512 q 43 734 43 623 q 120 929 43 854 q 358 1010 204 1010 q 579 936 487 1010 q 678 729 678 857 l 678 684 l 552 684 q 504 838 552 780 q 362 896 457 896 q 216 852 263 896 q 176 747 176 815 q 199 627 176 697 q 248 512 217 574 l 468 512 l 468 443 l 279 443 q 297 356 297 398 q 230 194 297 279 q 153 107 211 170 q 227 133 190 125 q 293 142 264 142 q 410 119 339 142 q 516 96 482 96 q 579 105 550 96 q 648 142 608 115 l 704 41 "},"t":{"x_min":0,"x_max":367,"ha":458,"o":"m 367 0 q 312 -5 339 -2 q 262 -8 284 -8 q 145 28 183 -8 q 108 143 108 64 l 108 638 l 0 638 l 0 738 l 108 738 l 108 944 l 232 944 l 232 738 l 367 738 l 367 638 l 232 638 l 232 185 q 248 121 232 140 q 307 102 264 102 q 345 104 330 102 q 367 107 360 107 l 367 0 "},"¬":{"x_min":0,"x_max":706,"ha":803,"o":"m 706 411 l 706 158 l 630 158 l 630 335 l 0 335 l 0 411 l 706 411 "},"λ":{"x_min":0,"x_max":750,"ha":803,"o":"m 750 -7 q 679 -15 716 -15 q 538 59 591 -15 q 466 214 512 97 l 336 551 l 126 0 l 0 0 l 270 705 q 223 837 247 770 q 116 899 190 899 q 90 898 100 899 l 90 1004 q 152 1011 125 1011 q 298 938 244 1011 q 373 783 326 901 l 605 192 q 649 115 629 136 q 716 95 669 95 l 736 95 q 750 97 745 97 l 750 -7 "},"W":{"x_min":0,"x_max":1263.890625,"ha":1351,"o":"m 1263 1013 l 995 0 l 859 0 l 627 837 l 405 0 l 265 0 l 0 1013 l 136 1013 l 342 202 l 556 1013 l 701 1013 l 921 207 l 1133 1012 l 1263 1013 "},">":{"x_min":18.0625,"x_max":774,"ha":792,"o":"m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "},"v":{"x_min":0,"x_max":675.15625,"ha":761,"o":"m 675 738 l 404 0 l 272 0 l 0 738 l 133 737 l 340 147 l 541 737 l 675 738 "},"τ":{"x_min":0.28125,"x_max":644.5,"ha":703,"o":"m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 "},"ξ":{"x_min":0,"x_max":624.9375,"ha":699,"o":"m 624 -37 q 608 -153 624 -96 q 563 -278 593 -211 l 454 -278 q 491 -183 486 -200 q 511 -83 511 -126 q 484 -23 511 -44 q 370 1 452 1 q 323 0 354 1 q 283 -1 293 -1 q 84 76 169 -1 q 0 266 0 154 q 56 431 0 358 q 197 538 108 498 q 94 613 134 562 q 54 730 54 665 q 77 823 54 780 q 143 901 101 867 l 27 901 l 27 1012 l 576 1012 l 576 901 l 380 901 q 244 863 303 901 q 178 745 178 820 q 312 600 178 636 q 532 582 380 582 l 532 479 q 276 455 361 479 q 118 281 118 410 q 165 173 118 217 q 274 120 208 133 q 494 101 384 110 q 624 -37 624 76 "},"&":{"x_min":-3,"x_max":894.25,"ha":992,"o":"m 894 0 l 725 0 l 624 123 q 471 0 553 40 q 306 -41 390 -41 q 168 -7 231 -41 q 62 92 105 26 q 14 187 31 139 q -3 276 -3 235 q 55 433 -3 358 q 248 581 114 508 q 170 689 196 640 q 137 817 137 751 q 214 985 137 922 q 384 1041 284 1041 q 548 988 483 1041 q 622 824 622 928 q 563 666 622 739 q 431 556 516 608 l 621 326 q 649 407 639 361 q 663 493 653 426 l 781 493 q 703 229 781 352 l 894 0 m 504 818 q 468 908 504 877 q 384 940 433 940 q 293 907 331 940 q 255 818 255 875 q 289 714 255 767 q 363 628 313 678 q 477 729 446 682 q 504 818 504 771 m 556 209 l 314 499 q 179 395 223 449 q 135 283 135 341 q 146 222 135 253 q 183 158 158 192 q 333 80 241 80 q 556 209 448 80 "},"Λ":{"x_min":0,"x_max":862.5,"ha":942,"o":"m 862 0 l 719 0 l 426 847 l 143 0 l 0 0 l 356 1013 l 501 1013 l 862 0 "},"I":{"x_min":41,"x_max":180,"ha":293,"o":"m 180 0 l 41 0 l 41 1013 l 180 1013 l 180 0 "},"G":{"x_min":0,"x_max":921,"ha":1011,"o":"m 921 0 l 832 0 l 801 136 q 655 15 741 58 q 470 -28 568 -28 q 126 133 259 -28 q 0 499 0 284 q 125 881 0 731 q 486 1043 259 1043 q 763 957 647 1043 q 905 709 890 864 l 772 709 q 668 866 747 807 q 486 926 589 926 q 228 795 322 926 q 142 507 142 677 q 228 224 142 342 q 483 94 323 94 q 712 195 625 94 q 796 435 796 291 l 477 435 l 477 549 l 921 549 l 921 0 "},"ΰ":{"x_min":0,"x_max":617,"ha":725,"o":"m 524 800 l 414 800 l 414 925 l 524 925 l 524 800 m 183 800 l 73 800 l 73 925 l 183 925 l 183 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 489 1040 l 300 819 l 216 819 l 351 1040 l 489 1040 "},"`":{"x_min":0,"x_max":138.890625,"ha":236,"o":"m 138 699 l 0 699 l 0 861 q 36 974 0 929 q 138 1041 72 1020 l 138 977 q 82 931 95 969 q 69 839 69 893 l 138 839 l 138 699 "},"·":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "},"Υ":{"x_min":0.328125,"x_max":819.515625,"ha":889,"o":"m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 "},"r":{"x_min":0,"x_max":355.5625,"ha":432,"o":"m 355 621 l 343 621 q 179 569 236 621 q 122 411 122 518 l 122 0 l 0 0 l 0 737 l 117 737 l 117 604 q 204 719 146 686 q 355 753 262 753 l 355 621 "},"x":{"x_min":0,"x_max":675,"ha":764,"o":"m 675 0 l 525 0 l 331 286 l 144 0 l 0 0 l 256 379 l 12 738 l 157 737 l 336 473 l 516 738 l 661 738 l 412 380 l 675 0 "},"μ":{"x_min":0,"x_max":696.609375,"ha":747,"o":"m 696 -4 q 628 -14 657 -14 q 498 97 513 -14 q 422 8 470 41 q 313 -24 374 -24 q 207 3 258 -24 q 120 80 157 31 l 120 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 172 124 246 q 308 82 216 82 q 451 177 402 82 q 492 358 492 254 l 492 738 l 616 738 l 616 214 q 623 136 616 160 q 673 92 636 92 q 696 95 684 92 l 696 -4 "},"h":{"x_min":0,"x_max":615,"ha":724,"o":"m 615 472 l 615 0 l 490 0 l 490 454 q 456 590 490 535 q 338 654 416 654 q 186 588 251 654 q 122 436 122 522 l 122 0 l 0 0 l 0 1013 l 122 1013 l 122 633 q 218 727 149 694 q 362 760 287 760 q 552 676 484 760 q 615 472 615 600 "},".":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "},"φ":{"x_min":-2,"x_max":878,"ha":974,"o":"m 496 -279 l 378 -279 l 378 -17 q 101 88 204 -17 q -2 367 -2 194 q 68 626 -2 510 q 283 758 151 758 l 283 646 q 167 537 209 626 q 133 373 133 462 q 192 177 133 254 q 378 93 259 93 l 378 758 q 445 764 426 763 q 476 765 464 765 q 765 659 653 765 q 878 377 878 553 q 771 96 878 209 q 496 -17 665 -17 l 496 -279 m 496 93 l 514 93 q 687 183 623 93 q 746 380 746 265 q 691 569 746 491 q 522 658 629 658 l 496 656 l 496 93 "},";":{"x_min":0,"x_max":142,"ha":239,"o":"m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 -12 q 105 -132 142 -82 q 0 -206 68 -182 l 0 -138 q 58 -82 43 -123 q 68 0 68 -56 l 0 0 l 0 151 l 142 151 l 142 -12 "},"f":{"x_min":0,"x_max":378,"ha":472,"o":"m 378 638 l 246 638 l 246 0 l 121 0 l 121 638 l 0 638 l 0 738 l 121 738 q 137 935 121 887 q 290 1028 171 1028 q 320 1027 305 1028 q 378 1021 334 1026 l 378 908 q 323 918 346 918 q 257 870 273 918 q 246 780 246 840 l 246 738 l 378 738 l 378 638 "},"“":{"x_min":1,"x_max":348.21875,"ha":454,"o":"m 140 670 l 1 670 l 1 830 q 37 943 1 897 q 140 1011 74 990 l 140 947 q 82 900 97 940 q 68 810 68 861 l 140 810 l 140 670 m 348 670 l 209 670 l 209 830 q 245 943 209 897 q 348 1011 282 990 l 348 947 q 290 900 305 940 q 276 810 276 861 l 348 810 l 348 670 "},"A":{"x_min":0.03125,"x_max":906.953125,"ha":1008,"o":"m 906 0 l 756 0 l 648 303 l 251 303 l 142 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 610 421 l 452 867 l 293 421 l 610 421 "},"6":{"x_min":53,"x_max":739,"ha":792,"o":"m 739 312 q 633 62 739 162 q 400 -31 534 -31 q 162 78 257 -31 q 53 439 53 206 q 178 859 53 712 q 441 986 284 986 q 643 912 559 986 q 732 713 732 833 l 601 713 q 544 830 594 786 q 426 875 494 875 q 268 793 331 875 q 193 517 193 697 q 301 597 240 570 q 427 624 362 624 q 643 540 552 624 q 739 312 739 451 m 603 298 q 540 461 603 400 q 404 516 484 516 q 268 461 323 516 q 207 300 207 401 q 269 137 207 198 q 405 83 325 83 q 541 137 486 83 q 603 298 603 197 "},"‘":{"x_min":1,"x_max":139.890625,"ha":236,"o":"m 139 670 l 1 670 l 1 830 q 37 943 1 897 q 139 1011 74 990 l 139 947 q 82 900 97 940 q 68 810 68 861 l 139 810 l 139 670 "},"ϊ":{"x_min":-70,"x_max":283,"ha":361,"o":"m 283 800 l 173 800 l 173 925 l 283 925 l 283 800 m 40 800 l -70 800 l -70 925 l 40 925 l 40 800 m 283 3 q 232 -10 257 -5 q 181 -15 206 -15 q 84 26 118 -15 q 41 200 41 79 l 41 737 l 166 737 l 167 215 q 171 141 167 157 q 225 101 182 101 q 247 103 238 101 q 283 112 256 104 l 283 3 "},"π":{"x_min":-0.21875,"x_max":773.21875,"ha":857,"o":"m 773 -7 l 707 -11 q 575 40 607 -11 q 552 174 552 77 l 552 226 l 552 626 l 222 626 l 222 0 l 97 0 l 97 626 l 0 626 l 0 737 l 773 737 l 773 626 l 676 626 l 676 171 q 695 103 676 117 q 773 90 714 90 l 773 -7 "},"ά":{"x_min":0,"x_max":765.5625,"ha":809,"o":"m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 727 407 760 q 563 637 524 695 l 563 738 l 685 738 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 95 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 m 604 1040 l 415 819 l 332 819 l 466 1040 l 604 1040 "},"O":{"x_min":0,"x_max":958,"ha":1057,"o":"m 485 1041 q 834 882 702 1041 q 958 512 958 734 q 834 136 958 287 q 481 -26 702 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 728 q 485 1041 263 1041 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 669 q 480 912 640 912 q 226 784 321 912 q 142 504 142 670 q 226 224 142 339 q 480 98 319 98 "},"n":{"x_min":0,"x_max":615,"ha":724,"o":"m 615 463 l 615 0 l 490 0 l 490 454 q 453 592 490 537 q 331 656 410 656 q 178 585 240 656 q 117 421 117 514 l 117 0 l 0 0 l 0 738 l 117 738 l 117 630 q 218 728 150 693 q 359 764 286 764 q 552 675 484 764 q 615 463 615 593 "},"3":{"x_min":54,"x_max":737,"ha":792,"o":"m 737 284 q 635 55 737 141 q 399 -25 541 -25 q 156 52 248 -25 q 54 308 54 140 l 185 308 q 245 147 185 202 q 395 96 302 96 q 539 140 484 96 q 602 280 602 190 q 510 429 602 390 q 324 454 451 454 l 324 565 q 487 584 441 565 q 565 719 565 617 q 515 835 565 791 q 395 879 466 879 q 255 824 307 879 q 203 661 203 769 l 78 661 q 166 909 78 822 q 387 992 250 992 q 603 921 513 992 q 701 723 701 844 q 669 607 701 656 q 578 524 637 558 q 696 434 655 499 q 737 284 737 369 "},"9":{"x_min":53,"x_max":739,"ha":792,"o":"m 739 524 q 619 94 739 241 q 362 -32 516 -32 q 150 47 242 -32 q 59 244 59 126 l 191 244 q 246 129 191 176 q 373 82 301 82 q 526 161 466 82 q 597 440 597 255 q 363 334 501 334 q 130 432 216 334 q 53 650 53 521 q 134 880 53 786 q 383 986 226 986 q 659 841 566 986 q 739 524 739 719 m 388 449 q 535 514 480 449 q 585 658 585 573 q 535 805 585 744 q 388 873 480 873 q 242 809 294 873 q 191 658 191 745 q 239 514 191 572 q 388 449 292 449 "},"l":{"x_min":41,"x_max":166,"ha":279,"o":"m 166 0 l 41 0 l 41 1013 l 166 1013 l 166 0 "},"¤":{"x_min":40.09375,"x_max":728.796875,"ha":825,"o":"m 728 304 l 649 224 l 512 363 q 383 331 458 331 q 256 363 310 331 l 119 224 l 40 304 l 177 441 q 150 553 150 493 q 184 673 150 621 l 40 818 l 119 898 l 267 749 q 321 766 291 759 q 384 773 351 773 q 447 766 417 773 q 501 749 477 759 l 649 898 l 728 818 l 585 675 q 612 618 604 648 q 621 553 621 587 q 591 441 621 491 l 728 304 m 384 682 q 280 643 318 682 q 243 551 243 604 q 279 461 243 499 q 383 423 316 423 q 487 461 449 423 q 525 553 525 500 q 490 641 525 605 q 384 682 451 682 "},"κ":{"x_min":0,"x_max":632.328125,"ha":679,"o":"m 632 0 l 482 0 l 225 384 l 124 288 l 124 0 l 0 0 l 0 738 l 124 738 l 124 446 l 433 738 l 596 738 l 312 466 l 632 0 "},"4":{"x_min":48,"x_max":742.453125,"ha":792,"o":"m 742 243 l 602 243 l 602 0 l 476 0 l 476 243 l 48 243 l 48 368 l 476 958 l 602 958 l 602 354 l 742 354 l 742 243 m 476 354 l 476 792 l 162 354 l 476 354 "},"p":{"x_min":0,"x_max":685,"ha":786,"o":"m 685 364 q 598 96 685 205 q 350 -23 504 -23 q 121 89 205 -23 l 121 -278 l 0 -278 l 0 738 l 121 738 l 121 633 q 220 726 159 691 q 351 761 280 761 q 598 636 504 761 q 685 364 685 522 m 557 371 q 501 560 557 481 q 330 651 437 651 q 162 559 223 651 q 108 366 108 479 q 162 177 108 254 q 333 87 224 87 q 502 178 441 87 q 557 371 557 258 "},"‡":{"x_min":0,"x_max":777,"ha":835,"o":"m 458 238 l 458 0 l 319 0 l 319 238 l 0 238 l 0 360 l 319 360 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 l 777 804 l 777 683 l 458 683 l 458 360 l 777 360 l 777 238 l 458 238 "},"ψ":{"x_min":0,"x_max":808,"ha":907,"o":"m 465 -278 l 341 -278 l 341 -15 q 87 102 180 -15 q 0 378 0 210 l 0 739 l 133 739 l 133 379 q 182 195 133 275 q 341 98 242 98 l 341 922 l 465 922 l 465 98 q 623 195 563 98 q 675 382 675 278 l 675 742 l 808 742 l 808 381 q 720 104 808 213 q 466 -13 627 -13 l 465 -278 "},"η":{"x_min":0.78125,"x_max":697,"ha":810,"o":"m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 720 124 755 q 200 630 193 686 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 "}},"cssFontWeight":"normal","ascender":1189,"underlinePosition":-100,"cssFontStyle":"normal","boundingBox":{"yMin":-334,"xMin":-111,"yMax":1189,"xMax":1672},"resolution":1000,"original_font_information":{"postscript_name":"Helvetiker-Regular","version_string":"Version 1.00 2004 initial release","vendor_url":"http://www.magenta.gr/","full_font_name":"Helvetiker","font_family_name":"Helvetiker","copyright":"Copyright (c) Μagenta ltd, 2004","description":"","trademark":"","designer":"","designer_url":"","unique_font_identifier":"Μagenta ltd:Helvetiker:22-10-104","license_url":"http://www.ellak.gr/fonts/MgOpen/license.html","license_description":"Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license (\"Fonts\") and associated documentation files (the \"Font Software\"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \r\n\r\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\r\n\r\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word \"MgOpen\", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\r\n\r\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the \"MgOpen\" name.\r\n\r\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \r\n\r\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.","manufacturer_name":"Μagenta ltd","font_sub_family_name":"Regular"},"descender":-334,"familyName":"Helvetiker","lineHeight":1522,"underlineThickness":50}
+----
+rendering/EdgeManager.ts
+import { 
+    BufferGeometry,
+    BufferAttribute,
+    Vector3,
+    Scene,
+    Group,
+    Object3D,
+    Material,
+    Mesh
+} from 'three';
+import { Edge } from '../core/types';
+import { Settings } from '../types/settings';
+import { EdgeShaderMaterial } from './materials/EdgeShaderMaterial';
+import { NodeInstanceManager } from './node/instance/NodeInstanceManager';
+
+export class EdgeManager {
+    private scene: Scene;
+    private edges: Map<string, Mesh> = new Map();
+    private edgeGroup: Group;
+    private nodeManager: NodeInstanceManager;
+    private edgeData: Map<string, Edge> = new Map();
+    private settings: Settings;
+    private updateFrameCount = 0;
+    private readonly UPDATE_FREQUENCY = 2; // Update every other frame
+
+    constructor(scene: Scene, settings: Settings, nodeManager: NodeInstanceManager) {
+        this.scene = scene;
+        this.nodeManager = nodeManager;
+        this.settings = settings;
+        this.edgeGroup = new Group();
+        
+        // Enable both layers by default for desktop mode
+        this.edgeGroup.layers.enable(0);
+        this.edgeGroup.layers.enable(1);
+        
+        scene.add(this.edgeGroup);
+    }
+
+    private createEdgeGeometry(source: Vector3, target: Vector3): BufferGeometry {
+        const geometry = new BufferGeometry();
+        
+        // Calculate direction and create vertices directly in world space
+        const direction = new Vector3().subVectors(target, source);
+        const width = this.settings.visualization.edges.baseWidth * 0.1;
+        
+        // Calculate perpendicular vector for width
+        const up = new Vector3(0, 1, 0);
+        const right = new Vector3().crossVectors(direction, up).normalize().multiplyScalar(width);
+        
+        // Create vertices for a thin rectangular prism along the edge
+        const vertices = new Float32Array([
+            // Front face
+            source.x - right.x, source.y - right.y, source.z - right.z,
+            source.x + right.x, source.y + right.y, source.z + right.z,
+            target.x + right.x, target.y + right.y, target.z + right.z,
+            target.x - right.x, target.y - right.y, target.z - right.z,
+            
+            // Back face (slightly offset)
+            source.x - right.x, source.y - right.y, source.z - right.z + 0.001,
+            source.x + right.x, source.y + right.y, source.z + right.z + 0.001,
+            target.x + right.x, target.y + right.y, target.z + right.z + 0.001,
+            target.x - right.x, target.y - right.y, target.z - right.z + 0.001
+        ]);
+        
+        // Create indices for both faces
+        const indices = new Uint16Array([
+            // Front face
+            0, 1, 2,
+            0, 2, 3,
+            // Back face
+            4, 6, 5,
+            4, 7, 6,
+            // Connect front to back
+            0, 4, 1,
+            1, 4, 5,
+            1, 5, 2,
+            2, 5, 6,
+            2, 6, 3,
+            3, 6, 7,
+            3, 7, 0,
+            0, 7, 4
+        ]);
+        
+        geometry.setAttribute('position', new BufferAttribute(vertices, 3));
+        geometry.setIndex(new BufferAttribute(indices, 1));
+        
+        // Calculate normals for proper lighting
+        const normals = new Float32Array(vertices.length);
+        for (let i = 0; i < vertices.length; i += 3) {
+            // Set all normals to point outward from the edge
+            normals[i] = right.x;
+            normals[i + 1] = right.y;
+            normals[i + 2] = right.z;
+        }
+        geometry.setAttribute('normal', new BufferAttribute(normals, 3));
+        
+        return geometry;
+    }
+
+    private createEdgeMaterial(): Material {
+        return new EdgeShaderMaterial(this.settings, 
+            this.settings.visualization.rendering.context || 'desktop'
+        );
+    }
+
+    public updateEdges(edges: Edge[]): void {
+        // Clear existing edges
+        this.edgeData.clear();
+        this.edges.forEach(edge => {
+            this.edgeGroup.remove(edge);
+            edge.geometry.dispose();
+            if (edge.material instanceof Material) {
+                edge.material.dispose();
+            }
+        });
+        this.edges.clear();
+
+        // Create new edges
+        edges.forEach(edge => {
+            if (!edge.sourcePosition || !edge.targetPosition) return;
+
+            const source = new Vector3(
+                edge.sourcePosition.x,
+                edge.sourcePosition.y,
+                edge.sourcePosition.z
+            );
+            const target = new Vector3(
+                edge.targetPosition.x,
+                edge.targetPosition.y,
+                edge.targetPosition.z
+            );
+
+            const geometry = this.createEdgeGeometry(source, target);
+            const material = this.createEdgeMaterial();
+            const mesh = new Mesh(geometry, material);
+
+            // Enable both layers for the edge
+            mesh.layers.enable(0);
+            mesh.layers.enable(1);
+            
+            this.edgeGroup.add(mesh);
+            
+            // Set source and target positions for the shader
+            if (material instanceof EdgeShaderMaterial) {
+                material.setSourceTarget(source, target);
+            }
+            this.edges.set(edge.id, mesh);
+            this.edgeData.set(edge.id, edge);
+        });
+    }
+
+    public handleSettingsUpdate(settings: Settings): void {
+        this.settings = settings;
+        this.edges.forEach((edge) => {
+            if (edge.material instanceof EdgeShaderMaterial) {
+                const uniforms = edge.material.uniforms;
+                uniforms.opacity.value = settings.visualization.edges.opacity;
+                uniforms.color.value.set(settings.visualization.edges.color);
+                uniforms.flowSpeed.value = settings.visualization.edges.flowSpeed;
+                uniforms.flowIntensity.value = settings.visualization.edges.flowIntensity;
+                uniforms.glowStrength.value = settings.visualization.edges.glowStrength;
+                uniforms.distanceIntensity.value = settings.visualization.edges.distanceIntensity;
+                uniforms.useGradient.value = settings.visualization.edges.useGradient;
+                uniforms.gradientColorA.value.set(settings.visualization.edges.gradientColors[0]);
+                uniforms.gradientColorB.value.set(settings.visualization.edges.gradientColors[1]);
+                edge.material.needsUpdate = true;
+            }
+        });
+    }
+    
+    public update(deltaTime: number): void {
+        this.updateFrameCount++;
+        if (this.updateFrameCount % this.UPDATE_FREQUENCY !== 0) return;
+        
+        // Update edge positions based on current node positions
+        this.edgeData.forEach((edgeData, edgeId) => {
+            const mesh = this.edges.get(edgeId);
+            if (!mesh) return;
+
+            const sourcePos = this.nodeManager.getNodePosition(edgeData.source);
+            const targetPos = this.nodeManager.getNodePosition(edgeData.target);
+
+            if (sourcePos && targetPos) {
+                // Update edge geometry
+                const oldGeometry = mesh.geometry;
+                mesh.geometry.dispose();
+                
+                // Create new geometry and update mesh
+                mesh.geometry = this.createEdgeGeometry(sourcePos, targetPos);
+                
+                // Clean up old resources after successful update
+                oldGeometry.dispose();
+
+                // Update shader material source/target
+                if (mesh.material instanceof EdgeShaderMaterial) {
+                    mesh.material.setSourceTarget(sourcePos, targetPos);
+                    mesh.material.update(deltaTime * this.UPDATE_FREQUENCY);
+                }
+            }
+            // If positions not found, edge will remain at last known position
+            else if (mesh.material instanceof EdgeShaderMaterial) {
+                mesh.material.update(deltaTime * this.UPDATE_FREQUENCY);
+            }
+        });
+    }
+
+    public setXRMode(enabled: boolean): void {
+        if (enabled) {
+            // In XR mode, only show on layer 1
+            this.edgeGroup.layers.disable(0);
+            this.edgeGroup.layers.enable(1);
+            this.edgeGroup.traverse((child: Object3D) => {
+                child.layers.disable(0);
+                child.layers.enable(1);
+            });
+        } else {
+            // In desktop mode, show on both layers
+            this.edgeGroup.layers.enable(0);
+            this.edgeGroup.layers.enable(1);
+            this.edgeGroup.traverse((child: Object3D) => {
+                child.layers.enable(0);
+                child.layers.enable(1);
+            });
+        }
+    }
+
+    public dispose(): void {
+        this.clearEdges();
+        this.scene.remove(this.edgeGroup);
+    }
+
+    private clearEdges(): void {
+        this.edges.forEach(edge => {
+            if (edge) {
+                // Remove from group first
+                this.edgeGroup.remove(edge);
+                
+                // Dispose of geometry
+                if (edge.geometry) {
+                    edge.geometry.dispose();
+                }
+                
+                // Dispose of material
+                if (edge.material instanceof Material) {
+                    edge.material.dispose();
+                }
+            }
+        });
+        this.edges.clear();
+    }
+}
+
+----
+rendering/MetadataVisualizer.ts
+import * as THREE from 'three';
+import {
+    Mesh,
+    Group,
+    MeshBasicMaterial,
+    Vector3,
+    DoubleSide, 
+    BufferGeometry,
+    Object3D
+} from 'three';
+import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';
+import { FontLoader, Font } from 'three/examples/jsm/loaders/FontLoader.js';
+import { NodeMetadata } from '../types/metadata';
+import { Settings } from '../types/settings';
+import { platformManager } from '../platform/platformManager';
+
+interface MetadataLabelGroup extends Group {
+    name: string;
+    userData: {
+        isMetadata: boolean;
+    };
+}
+
+export type MetadataLabelCallback = (group: MetadataLabelGroup) => void;
+
+interface ExtendedTextGeometry extends TextGeometry {
+    computeBoundingBox: () => void;
+    boundingBox: {
+        max: { x: number };
+        min: { x: number };
+    } | null;
+}
+
+export class MetadataVisualizer {
+    private scene: THREE.Scene;
+    private camera: THREE.PerspectiveCamera;
+    private fontLoader: FontLoader;
+    private font: Font | null;
+    private fontPath: string;
+    private labelGroup: THREE.Group;
+    private settings: Settings;
+    private fontLoadAttempts: number = 0;
+
+    constructor(camera: THREE.PerspectiveCamera, scene: THREE.Scene, settings: Settings) {
+        this.camera = camera;
+        this.scene = scene;
+        this.fontLoader = new FontLoader();
+        this.font = null;
+        this.fontPath = '/fonts/helvetiker_regular.typeface.json';
+        this.labelGroup = new THREE.Group();
+        this.settings = settings;
+        
+        // Enable both layers by default for desktop mode
+        this.labelGroup.layers.enable(0);
+        this.labelGroup.layers.enable(1);
+        
+        this.scene.add(this.labelGroup);
+        this.loadFont();
+        
+        // Set initial layer mode
+        this.setXRMode(platformManager.isXRMode);
+        
+        // Listen for XR mode changes
+        platformManager.on('xrmodechange', (enabled: boolean) => {
+            this.setXRMode(enabled);
+        });
+    }
+
+    private async loadFont(): Promise<void> {
+        try {
+            await this.attemptFontLoad();
+        } catch (error) {
+            console.error('Initial font load failed:', error);
+            await this.retryFontLoad();
+        }
+    }
+
+    private async attemptFontLoad(): Promise<void> {
+        this.font = await new Promise((resolve, reject) => {
+            this.fontLoader.load(
+                this.fontPath,
+                resolve,
+                undefined,
+                reject
+            );
+        });
+    }
+
+    private async retryFontLoad(maxAttempts: number = 3): Promise<void> {
+        while (this.fontLoadAttempts < maxAttempts && !this.font) {
+            this.fontLoadAttempts++;
+            await new Promise(resolve => setTimeout(resolve, 1000));
+            try {
+                await this.attemptFontLoad();
+                console.log('Font loaded successfully after retry');
+                break;
+            } catch (error) {
+                console.error(`Font load attempt ${this.fontLoadAttempts} failed:`, error);
+            }
+        }
+    }
+
+    public async createMetadataLabel(metadata: NodeMetadata): Promise<MetadataLabelGroup> {
+        const group = new Group() as MetadataLabelGroup;
+        group.name = 'metadata-label';
+        group.userData = { isMetadata: true };
+
+        // Format file size
+        const fileSizeFormatted = metadata.fileSize > 1024 * 1024 
+            ? `${(metadata.fileSize / (1024 * 1024)).toFixed(1)}MB`
+            : metadata.fileSize > 1024
+                ? `${(metadata.fileSize / 1024).toFixed(1)}KB`
+                : `${metadata.fileSize}B`;
+
+        // Create text for file name and size
+        const nameMesh = await this.createTextMesh(`${metadata.name} (${fileSizeFormatted})`);
+        if (nameMesh) {
+            nameMesh.position.y = 1.5;
+            nameMesh.scale.setScalar(0.8);
+            group.add(nameMesh);
+        }
+
+        // Create text for node size
+        const nodeSizeMesh = await this.createTextMesh(`Size: ${metadata.nodeSize.toFixed(1)}`);
+        if (nodeSizeMesh) {
+            nodeSizeMesh.position.y = 1.0;
+            nodeSizeMesh.scale.setScalar(0.7);
+            group.add(nodeSizeMesh);
+        }
+
+        // Create text for hyperlink count
+        const linksMesh = await this.createTextMesh(`${metadata.hyperlinkCount} links`);
+        if (linksMesh) {
+            linksMesh.position.y = 0.5;
+            linksMesh.scale.setScalar(0.7);
+            group.add(linksMesh);
+        }
+
+        // Center all text meshes horizontally
+        group.children.forEach(child => {
+            if (child instanceof Mesh) {
+                const geometry = child.geometry as BufferGeometry;
+                if (!geometry.boundingSphere) {
+                    geometry.computeBoundingSphere();
+                }
+                if (geometry.boundingSphere) {
+                    child.position.x = -geometry.boundingSphere.radius;
+                }
+            }
+        });
+
+        // Set up billboarding
+        const tempVec = new Vector3();
+        const billboardMode = this.settings.visualization.labels.billboardMode;
+
+        const updateBillboard = () => {
+            if (billboardMode === 'camera') {
+                // Full billboard - always face camera
+                group.quaternion.copy(this.camera.quaternion);
+            } else {
+                // Vertical billboard - only rotate around Y axis
+                tempVec.copy(this.camera.position).sub(group.position);
+                tempVec.y = 0;
+                group.lookAt(tempVec.add(group.position));
+            }
+        };
+
+        // Add to render loop
+        group.onBeforeRender = updateBillboard;
+
+        // Set initial layer
+        this.setGroupLayer(group, platformManager.isXRMode);
+
+        return group;
+    }
+
+    private async createTextMesh(text: string): Promise<Mesh | Group | null> {
+        if (!this.font) {
+            console.warn('Font not loaded yet');
+            return null;
+        }
+
+        const textGeometry = new TextGeometry(text, {
+            font: this.font,
+            size: this.settings.visualization.labels.desktopFontSize / 12 || 0.4,
+            height: 0.01,
+            curveSegments: Math.max(4, this.settings.visualization.labels.textResolution || 4),
+            bevelEnabled: false
+        }) as ExtendedTextGeometry;
+
+        textGeometry.computeBoundingBox();
+
+        const material = new MeshBasicMaterial({
+            color: this.settings.visualization.labels.textColor || '#ffffff',
+            transparent: true,
+            opacity: 1.0,
+            side: DoubleSide,
+            depthWrite: true,
+            depthTest: true
+        });
+
+        // Add outline for better visibility
+        if (this.settings.visualization.labels.textOutlineWidth > 0) {
+            const outlineMaterial = new MeshBasicMaterial({
+                color: this.settings.visualization.labels.textOutlineColor || '#000000',
+                side: DoubleSide
+            });
+            
+            const outlineWidth = this.settings.visualization.labels.textOutlineWidth;
+            const outlineGeometry = new TextGeometry(text, {
+                font: this.font,
+                size: this.settings.visualization.labels.desktopFontSize / 12 || 0.4,
+                height: 0.01,
+                curveSegments: Math.max(4, this.settings.visualization.labels.textResolution || 4),
+                bevelEnabled: false
+            }) as unknown as BufferGeometry;
+            
+            const outlineMesh = new Mesh(outlineGeometry, outlineMaterial);
+            outlineMesh.scale.multiplyScalar(1 + outlineWidth);
+            const textMesh = new Mesh(textGeometry as unknown as BufferGeometry, material);
+            
+            const group = new Group();
+            group.add(outlineMesh);
+            group.add(textMesh);
+            
+            // Center the group if bounding box exists
+            if (textGeometry.boundingBox) {
+                const width = textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;
+                group.position.x -= width / 2;
+            }
+            return group;
+        }
+
+        // Create mesh with the text geometry and center it
+        const mesh = new Mesh(textGeometry as unknown as BufferGeometry, material);
+        
+        // Center the mesh if bounding box exists
+        if (textGeometry.boundingBox) {
+            const width = textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x;
+            mesh.position.x -= width / 2;
+        }
+        return mesh;
+    }
+
+    private setGroupLayer(group: Object3D, enabled: boolean): void {
+        if (enabled) {
+            group.traverse(child => {
+                child.layers.disable(0);
+                child.layers.enable(1);
+            });
+            group.layers.disable(0);
+            group.layers.enable(1);
+        } else {
+            group.traverse(child => {
+                child.layers.enable(0);
+                child.layers.enable(1);
+            });
+            group.layers.enable(0);
+            group.layers.enable(1);
+        }
+    }
+
+    public setXRMode(enabled: boolean): void {
+        if (enabled) {
+            this.labelGroup.traverse(child => {
+                child.layers.disable(0);
+                child.layers.enable(1);
+            });
+            this.labelGroup.layers.disable(0);
+            this.labelGroup.layers.enable(1);
+        } else {
+            this.labelGroup.traverse(child => {
+                child.layers.enable(0);
+                child.layers.enable(1);
+            });
+            this.labelGroup.layers.enable(0);
+            this.labelGroup.layers.enable(1);
+        }
+    }
+
+    public dispose(): void {
+        this.labelGroup.traverse(child => {
+            if (child instanceof THREE.Mesh) {
+                child.geometry.dispose();
+                if (child.material instanceof THREE.Material) {
+                    child.material.dispose();
+                }
+            }
+        });
+        this.scene.remove(this.labelGroup);
+    }
+}
+
+----
+rendering/renderManager.ts
+ 
+----
+rendering/textRenderer.ts
+import type { Settings, LabelSettings } from '../types/settings';
+import { settingsManager } from '../state/settings';
+import { createLogger } from '../core/logger';
+import {
+    Scene,
+    Camera,
+    Group,
+    Sprite,
+    SpriteMaterial,
+    Vector3,
+    Matrix4,
+    Texture
+} from 'three';
+const logger = createLogger('TextRenderer');
+
+interface LabelState {
+    text: string;
+    position: Vector3;
+    visible: boolean;
+    sprite?: Sprite;
+    texture?: Texture;
+}
+
+export class TextRenderer {
+    private camera: Camera;
+    private labelStates: Map<string, LabelState>;
+    private unsubscribers: Array<() => void> = [];
+    private projMatrix: Matrix4;
+    private viewMatrix: Matrix4;
+    private currentSettings: Settings;
+    private settings: LabelSettings;
+    private group: Group;
+
+    constructor(camera: Camera, scene: Scene) {
+        this.camera = camera;
+        this.labelStates = new Map();
+        this.projMatrix = new Matrix4();
+        this.viewMatrix = new Matrix4();
+        this.currentSettings = settingsManager.getCurrentSettings();
+        this.settings = this.currentSettings.visualization.labels;
+        this.group = new Group();
+        scene.add(this.group); // Add the group to the scene
+        this.setupSettingsSubscriptions();
+    }
+
+    private setupSettingsSubscriptions(): void {
+        Object.keys(this.currentSettings.visualization.labels).forEach(setting => {
+            const path = `visualization.labels.${setting}`;
+            const unsubscribe = settingsManager.subscribe(path, (value) => {
+                this.handleSettingChange(setting as keyof LabelSettings, value);
+            });
+            this.unsubscribers.push(unsubscribe);
+        });
+    }
+
+    private handleSettingChange(setting: keyof LabelSettings, value: any): void {
+        try {
+            switch (setting) {
+                case 'desktopFontSize':
+                    this.updateFontSize(value as number);
+                    break;
+                case 'textColor':
+                    this.updateTextColor(value as string);
+                    break;
+                case 'enableLabels':
+                    this.updateLabelVisibility(value as boolean);
+                    break;
+                default:
+                    // Other settings handled elsewhere
+                    break;
+            }
+        } catch (error) {
+            logger.error(`Error handling setting change for ${setting}:`, error);
+        }
+    }
+
+    private updateFontSize(fontSize: number): void {
+        this.labelStates.forEach((state) => {
+            if (state.sprite) {
+                // Remove old sprite
+                this.group.remove(state.sprite);
+                state.sprite.material.dispose();
+                state.sprite.material.map?.dispose();
+                state.texture?.dispose();
+
+                // Create new sprite with updated font size
+                state.sprite = this.createTextSprite(state.text, fontSize);
+                state.sprite.position.copy(state.position);
+                this.group.add(state.sprite);
+            }
+        });
+    }
+
+    private createTextSprite(text: string, fontSize: number): Sprite {
+        // Create a canvas to render the text
+        const canvas = document.createElement('canvas');
+        const context = canvas.getContext('2d');
+        if (!context) throw new Error('Could not get 2D context');
+
+        // Set canvas size
+        const padding = this.settings.textPadding || 2;
+        context.font = `${fontSize}px Arial`;
+        const textMetrics = context.measureText(text);
+        canvas.width = textMetrics.width + padding * 2;
+        canvas.height = fontSize + padding * 2;
+
+        // Draw text
+        context.font = `${fontSize}px Arial`;
+        context.textAlign = 'center';
+        context.textBaseline = 'middle';
+        
+        // Draw text outline if enabled
+        if (this.settings.textOutlineWidth > 0) {
+            context.strokeStyle = this.settings.textOutlineColor;
+            context.lineWidth = this.settings.textOutlineWidth;
+            context.strokeText(text, canvas.width / 2, canvas.height / 2);
+        }
+        
+        // Draw text fill
+        context.fillStyle = this.settings.textColor;
+        context.lineWidth = 1;
+        context.fillText(text, canvas.width / 2, canvas.height / 2);
+
+        // Create sprite material
+        const texture = new Texture(canvas);
+        texture.needsUpdate = true;
+        const material = new SpriteMaterial({
+            map: texture,
+            transparent: true,
+            depthTest: false // Ensure text is always visible
+        });
+
+        // Create sprite
+        const sprite = new Sprite(material);
+        
+        // Scale based on text resolution
+        const resolution = this.settings.textResolution || 16;
+        const scale = resolution / fontSize;
+        sprite.scale.set(
+            (canvas.width / fontSize) * scale,
+            (canvas.height / fontSize) * scale,
+            1);
+
+        return sprite;
+    }
+
+    private updateTextColor(newColor: string): void {
+        this.settings.textColor = newColor;
+        this.labelStates.forEach((state) => {
+            if (state.sprite) {
+                // Remove old sprite
+                this.group.remove(state.sprite);
+                state.sprite.material.dispose();
+                state.sprite.material.map?.dispose();
+                state.texture?.dispose();
+
+                // Create new sprite with updated color
+                state.sprite = this.createTextSprite(state.text, this.settings.desktopFontSize);
+                state.sprite.position.copy(state.position);
+                this.group.add(state.sprite);
+            }
+        });
+    }
+
+    private updateLabelVisibility(visible: boolean): void {
+        this.group.visible = visible;
+    }
+
+    public updateLabel(id: string, text: string, position: Vector3): void {
+        try {
+            let state = this.labelStates.get(id);
+            if (!state) {
+                state = {
+                    text,
+                    position: position.clone(),
+                    visible: true
+                };
+                this.labelStates.set(id, state);
+            } else {
+                state.text = text;
+                state.position.copy(position);
+            }
+
+            // Remove old sprite if it exists
+            if (state.sprite) {
+                this.group.remove(state.sprite);
+                state.sprite.material.dispose();
+                state.sprite.material.map?.dispose();
+                state.texture?.dispose();
+            }
+
+            // Create new sprite
+            state.sprite = this.createTextSprite(text, this.settings.desktopFontSize);
+            state.sprite.position.copy(position);
+            this.group.add(state.sprite);
+        } catch (error) {
+            logger.error('Error updating label:', error);
+        }
+    }
+
+    public removeLabel(id: string): void {
+        try {
+            const state = this.labelStates.get(id);
+            if (state?.sprite) {
+                this.group.remove(state.sprite);
+                state.sprite.material.dispose();
+                state.sprite.material.map?.dispose();
+                state.texture?.dispose();
+            }
+            this.labelStates.delete(id);
+        } catch (error) {
+            logger.error('Error removing label:', error);
+        }
+    }
+
+    private clearLabels(): void {
+        this.labelStates.forEach((state) => {
+            if (state.sprite) {
+                this.group.remove(state.sprite);
+                state.sprite.material.dispose();
+                state.sprite.material.map?.dispose();
+                state.texture?.dispose();
+            }
+        });
+        this.labelStates.clear();
+    }
+
+    public update(): void {
+        try {
+            // Update projection and view matrices
+            this.camera.updateMatrixWorld();
+            this.projMatrix.copy(this.camera.projectionMatrix);
+            this.viewMatrix.copy(this.camera.matrixWorldInverse);
+            
+            if (!this.settings.enableLabels) {
+                this.group.visible = false;
+                return;
+            }
+            
+            this.group.visible = true;
+
+            // Update label positions and visibility
+            this.labelStates.forEach((state) => {
+                if (state.sprite) {
+                    state.sprite.position.copy(state.position);
+                    // Make sprite face camera
+                    if (this.settings.billboardMode === 'camera') {
+                        // Full billboard - always face camera
+                        state.sprite.quaternion.copy(this.camera.quaternion);
+                    } else {
+                        // Vertical billboard - only rotate around Y axis
+                        const tempVec = new Vector3().copy(this.camera.position).sub(state.position);
+                        state.sprite.lookAt(tempVec.add(state.position));
+                    }
+                }
+            });
+        } catch (error) {
+            logger.error('Error updating labels:', error);
+        }
+    }
+
+    public dispose(): void {
+        try {
+            this.clearLabels();
+            this.unsubscribers.forEach(unsubscribe => unsubscribe());
+            this.unsubscribers = [];
+            if (this.group.parent) {
+                this.group.parent.remove(this.group);
+            }
+        } catch (error) {
+            logger.error('Error disposing TextRenderer:', error);
+        }
+    }
+
+    public handleSettingsUpdate(settings: LabelSettings): void {
+        this.settings = settings;
+        this.updateLabelVisibility(settings.enableLabels);
+        this.updateFontSize(settings.desktopFontSize);
+        this.updateTextColor(settings.textColor);
+    }
+}
+
+----
+rendering/VisualizationController.ts
+import { Scene, Camera } from 'three';
+import { createLogger } from '../core/logger';
+import { Settings } from '../types/settings/base';
+import { defaultSettings } from '../state/defaultSettings';
+import { XRHandWithHaptics } from '../types/xr';
+import { EdgeManager } from './EdgeManager';
+import { NodeManagerFacade } from './node/NodeManagerFacade';
+import { graphDataManager } from '../state/graphData';
+import { TextRenderer } from './textRenderer';
+import { GraphData } from '../core/types';
+import { WebSocketService } from '../websocket/websocketService';
+import { MaterialFactory } from './factories/MaterialFactory';
+
+const logger = createLogger('VisualizationController');
+
+type VisualizationCategory = 'visualization' | 'physics' | 'rendering';
+type PendingUpdate = { category: VisualizationCategory; value: any };
+
+export class VisualizationController {
+    private static instance: VisualizationController | null = null;
+    private currentSettings: Settings;
+    private edgeManager: EdgeManager | null = null;
+    private nodeManager: NodeManagerFacade | null = null;
+    private textRenderer: TextRenderer | null = null;
+    private isInitialized: boolean = false;
+    private pendingUpdates: Map<string, PendingUpdate> = new Map();
+    private lastUpdateTime: number = performance.now();
+    private websocketService: WebSocketService;
+
+    private constructor() {
+        // Initialize with complete default settings
+        this.currentSettings = defaultSettings;
+        this.websocketService = WebSocketService.getInstance();
+        
+        // Subscribe to graph data updates
+        graphDataManager.subscribe((data: GraphData) => {
+            if (this.isInitialized) {
+                if (this.nodeManager) {
+                    this.nodeManager.updateNodes(data.nodes);
+                }
+                if (this.edgeManager) {
+                    this.edgeManager.updateEdges(data.edges);
+                }
+            } else {
+                // Queue updates until initialized
+                if (import.meta.env.DEV) logger.debug('Queuing updates until initialization');
+            }
+        });
+
+        // Subscribe to websocket binary updates
+        this.websocketService.onBinaryMessage((nodes) => {
+            if (this.nodeManager && this.isInitialized) {
+                // Convert binary node data to the format expected by updateNodePositions
+                const updates = nodes.map(node => ({
+                    id: node.id.toString(),
+                    data: {
+                        position: node.position,
+                        velocity: node.velocity
+                    }
+                }));
+                this.nodeManager.updateNodePositions(updates);
+            }
+        });
+    }
+
+    public initializeScene(scene: Scene, camera: Camera): void {
+        logger.info('Initializing visualization scene');
+        
+        // Ensure camera can see nodes
+        camera.layers.enable(0);
+        logger.debug('Camera layers configured');
+        
+        // Enable WebSocket debugging
+        this.currentSettings.system.debug.enabled = true;
+        this.currentSettings.system.debug.enableWebsocketDebug = true;
+        
+        // Connect to websocket first
+        this.websocketService.connect().then(() => {
+            logger.info('WebSocket connected, enabling binary updates');
+            graphDataManager.enableBinaryUpdates();
+            
+            // Send initial request for data
+            this.websocketService.sendMessage({ 
+                type: 'requestInitialData',
+                timestamp: Date.now()
+            });
+        }).catch(error => {
+            logger.error('Failed to connect WebSocket:', error);
+        });
+        
+        const materialFactory = MaterialFactory.getInstance();
+        this.nodeManager = NodeManagerFacade.getInstance(
+            scene,
+            camera,
+            materialFactory.getNodeMaterial(this.currentSettings)
+        );
+        this.edgeManager = new EdgeManager(scene, this.currentSettings, this.nodeManager.getNodeInstanceManager());
+        this.textRenderer = new TextRenderer(camera, scene);
+        this.isInitialized = true;
+        
+        if (import.meta.env.DEV) logger.debug('Scene managers initialized');
+
+        // Initialize with current graph data (if any)
+        const currentData = graphDataManager.getGraphData();
+        if (currentData.nodes.length > 0 && this.nodeManager) {
+            this.nodeManager.updateNodes(currentData.nodes);
+        }
+
+        // Start animation loop
+        this.animate();
+
+        logger.info('Scene initialization complete');
+    }
+
+    public static getInstance(): VisualizationController {
+        if (!VisualizationController.instance) {
+            VisualizationController.instance = new VisualizationController();
+        }
+        return VisualizationController.instance;
+    }
+
+    public updateSetting(path: string, value: any): void {
+        const parts = path.split('.');
+        const category = parts[0] as VisualizationCategory;
+        
+        if (!['visualization', 'physics', 'rendering'].includes(category)) {
+            return;
+        }
+
+        if (!this.isInitialized) {
+            logger.debug(`Queuing setting update for ${path}`);
+            this.pendingUpdates.set(path, { category, value });
+            return;
+        }
+
+        let current = this.currentSettings as any;
+        for (let i = 0; i < parts.length - 1; i++) {
+            const part = parts[i];
+            if (!(part in current)) {
+                current[part] = {};
+            }
+            current = current[part];
+        }
+
+        current[parts[parts.length - 1]] = value;
+        this.applySettingUpdate(category);
+    }
+
+    public updateSettings(category: VisualizationCategory, settings: Partial<Settings>): void {
+        if (!this.isInitialized) {
+            logger.debug(`Queuing bulk settings update for ${category}`);
+            this.pendingUpdates.set(category, { category, value: settings });
+            return;
+        }
+
+        switch (category) {
+            case 'visualization':
+                if (settings.visualization) {
+                    this.currentSettings.visualization = {
+                        ...this.currentSettings.visualization,
+                        ...settings.visualization
+                    };
+                    this.applyVisualizationUpdates();
+                }
+                break;
+            case 'physics':
+                if (settings.visualization?.physics) {
+                    this.currentSettings.visualization.physics = {
+                        ...this.currentSettings.visualization.physics,
+                        ...settings.visualization.physics
+                    };
+                    this.updatePhysicsSimulation();
+                }
+                break;
+            case 'rendering':
+                if (settings.visualization?.rendering) {
+                    this.currentSettings.visualization.rendering = {
+                        ...this.currentSettings.visualization.rendering,
+                        ...settings.visualization.rendering
+                    };
+                    this.updateRenderingQuality();
+                }
+                break;
+        }
+    }
+
+    public getSettings(category: VisualizationCategory): Partial<Settings> {
+        const baseVisualization = {
+            nodes: { ...this.currentSettings.visualization.nodes },
+            edges: { ...this.currentSettings.visualization.edges },
+            physics: { ...this.currentSettings.visualization.physics },
+            rendering: { ...this.currentSettings.visualization.rendering },
+            animations: { ...this.currentSettings.visualization.animations },
+            labels: { ...this.currentSettings.visualization.labels },
+            bloom: { ...this.currentSettings.visualization.bloom },
+            hologram: { ...this.currentSettings.visualization.hologram }
+        };
+
+        switch (category) {
+            case 'visualization':
+                return {
+                    visualization: { ...this.currentSettings.visualization }
+                };
+            case 'physics':
+                return {
+                    visualization: {
+                        ...baseVisualization,
+                        physics: { ...this.currentSettings.visualization.physics }
+                    }
+                };
+            case 'rendering':
+                return {
+                    visualization: {
+                        ...baseVisualization,
+                        rendering: { ...this.currentSettings.visualization.rendering }
+                    }
+                };
+            default:
+                return {
+                    visualization: baseVisualization
+                };
+        }
+    }
+
+    public handleHandInput(hand: XRHandWithHaptics): void {
+        if (!this.isInitialized || !hand) return;
+
+        const pinchStrength = hand.pinchStrength || 0;
+        const gripStrength = hand.gripStrength || 0;
+
+        if (pinchStrength > (this.currentSettings.xr.pinchThreshold || 0.5)) {
+            logger.debug('Pinch gesture detected', { strength: pinchStrength });
+        }
+
+        if (gripStrength > (this.currentSettings.xr.dragThreshold || 0.5)) {
+            logger.debug('Grip gesture detected', { strength: gripStrength });
+        }
+
+        if (hand.hand?.joints) {
+            logger.debug('Processing hand joints');
+        }
+    }
+
+    private applySettingUpdate(category: VisualizationCategory): void {
+        if (!this.isInitialized) {
+            logger.debug(`Queuing category update for ${category}`);
+            return;
+        }
+
+        logger.debug(`Updating ${category} settings`);
+        
+        switch (category) {
+            case 'visualization':
+                this.applyVisualizationUpdates();
+                break;
+            case 'physics':
+                this.updatePhysicsSimulation();
+                break;
+            case 'rendering':
+                this.updateRenderingQuality();
+                break;
+        }
+    }
+
+    private applyVisualizationUpdates(): void {
+        if (!this.isInitialized) return;
+        this.updateNodeAppearance();
+        this.updateEdgeAppearance();
+        // Update text labels
+        if (this.textRenderer) {
+            this.textRenderer.update();
+        }
+    }
+
+    private updateNodeAppearance(): void {
+        if (!this.isInitialized) return;
+        logger.debug('Updating node appearance');
+        if (this.nodeManager) {
+            this.nodeManager.handleSettingsUpdate(this.currentSettings);
+        }
+    }
+
+    private updateEdgeAppearance(): void {
+        if (!this.isInitialized) {
+            logger.debug('Queuing edge appearance update');
+            return;
+        }
+
+        if (this.edgeManager) {
+            this.edgeManager.handleSettingsUpdate(this.currentSettings);
+            logger.debug('Edge appearance updated');
+        } else {
+            logger.warn('EdgeManager not initialized');
+        }
+    }
+
+    private updatePhysicsSimulation(): void {
+        if (!this.isInitialized) return;
+        logger.debug('Updating physics simulation');
+    }
+
+    private updateRenderingQuality(): void {
+        if (!this.isInitialized) return;
+        logger.debug('Updating rendering quality');
+    }
+
+    public updateNodePositions(nodes: any[]): void {
+        if (this.nodeManager) {
+            this.nodeManager.updateNodePositions(nodes);
+        }
+    }
+
+    private animate = (): void => {
+        if (!this.isInitialized) return;
+
+        requestAnimationFrame(this.animate);
+        const currentTime = performance.now();
+        const deltaTime = (currentTime - this.lastUpdateTime) / 1000;
+        this.update(deltaTime);
+    }
+
+    public update(deltaTime: number): void {
+        if (this.isInitialized) {
+            const currentTime = performance.now();
+            if (deltaTime === 0) {
+                deltaTime = (currentTime - this.lastUpdateTime) / 1000;
+            }
+            this.lastUpdateTime = currentTime;
+            if (this.nodeManager) {
+                this.nodeManager.update(deltaTime);
+            }
+
+            // Update edge animations
+            if (this.edgeManager) {
+                this.edgeManager.update(deltaTime);
+            }
+            
+            // Update text labels
+            if (this.textRenderer) {
+                this.textRenderer.update();
+            }
+        }
+    }
+
+    public dispose(): void {
+        // Dispose of managers and cleanup websocket
+        if (this.textRenderer) {
+            this.textRenderer.dispose();
+            this.textRenderer = null;
+        }
+        this.nodeManager?.dispose();
+        this.edgeManager?.dispose();
+        this.websocketService.dispose();
+        this.isInitialized = false;
+        VisualizationController.instance = null;
+    }
+}
+
+----
+rendering/scene.ts
+/**
+ * Three.js scene management with simplified setup
+ */
+
+import {
+  Scene,
+  PerspectiveCamera,
+  WebGLRenderer,
+  Color,
+  AmbientLight,
+  DirectionalLight,
+  GridHelper,
+  Vector2,
+  Material,
+  Mesh,
+  Object3D
+} from 'three';
+import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
+import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
+import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
+import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';
+import { createLogger } from '../core/utils';
+import { Settings } from '../types/settings';
+import { VisualizationController } from './VisualizationController';
+
+const logger = createLogger('SceneManager');
+
+// Constants
+const BACKGROUND_COLOR = 0x212121;  // Material Design Grey 900
+const LOW_PERF_FPS_THRESHOLD = 30;  // Lower FPS threshold for low performance mode
+
+export class SceneManager {
+  private static instance: SceneManager;
+  
+  // Three.js core components
+  private scene: Scene;
+  private camera: PerspectiveCamera;
+  private renderer: WebGLRenderer;
+  private canvas: HTMLCanvasElement;
+  private currentRenderingSettings: Settings['visualization']['rendering'] | null = null;
+  private controls: OrbitControls;
+  private sceneGrid: GridHelper | null = null;
+  
+  // Post-processing
+  private composer: EffectComposer;
+  private bloomPass: UnrealBloomPass;
+  
+  // Animation
+  private animationFrameId: number | null = null;
+  private isRunning: boolean = false;
+  private visualizationController: VisualizationController | null = null;
+  private lastFrameTime: number = 0;
+  private readonly FRAME_BUDGET: number = 16; // Target 60fps (1000ms/60)
+  private frameCount: number = 0;
+  private lastFpsUpdate: number = 0;
+  private currentFps: number = 60;
+
+  private constructor(canvas: HTMLCanvasElement) {
+    logger.log('Initializing SceneManager');
+    this.canvas = canvas;
+    
+    // Create scene
+    this.scene = new Scene();
+    this.scene.background = new Color(BACKGROUND_COLOR);
+    // Removed fog to ensure graph visibility
+
+    // Create camera with wider view
+    this.camera = new PerspectiveCamera(
+      60, // Reduced FOV for less distortion
+      window.innerWidth / window.innerHeight,
+      0.1,
+      2000
+    );
+    this.camera.position.set(0, 10, 50); // Position for better overview
+    this.camera.lookAt(0, 0, 0);
+    
+    // Enable both layers for desktop mode by default
+    this.camera.layers.enable(0); // Desktop layer
+    this.camera.layers.enable(1); // XR layer
+
+    // Create renderer with WebXR support
+    this.renderer = new WebGLRenderer({
+      canvas,
+      antialias: true,
+      alpha: true,
+      powerPreference: 'high-performance',
+      xr: {
+        enabled: true
+      }
+    });
+    this.renderer.setSize(window.innerWidth, window.innerHeight);
+    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
+    
+    // Enable performance optimizations
+    (this.renderer as any).sortObjects = false;  // Disable automatic object sorting
+    (this.renderer as any).physicallyCorrectLights = false;  // Disable physically correct lighting
+
+    // Create controls
+    this.controls = new OrbitControls(this.camera, canvas);
+    this.controls.enableDamping = true;
+    this.controls.dampingFactor = 0.1;
+    this.controls.screenSpacePanning = true;
+    this.controls.minDistance = 1;
+    this.controls.maxDistance = 1000;
+    this.controls.enableRotate = true;
+    this.controls.enableZoom = true;
+    this.controls.enablePan = true;
+    this.controls.rotateSpeed = 1.0;
+    this.controls.zoomSpeed = 1.2;
+    this.controls.panSpeed = 0.8;
+
+    // Setup post-processing
+    this.composer = new EffectComposer(this.renderer);
+    const renderPass = new RenderPass(this.scene, this.camera);
+    this.composer.addPass(renderPass);
+
+    // Initialize bloom with default state
+    this.bloomPass = new UnrealBloomPass(
+      new Vector2(window.innerWidth, window.innerHeight),
+      1.5,  // Default strength (will be overridden by settings)
+      0.4,  // Default radius (will be overridden by settings)
+      0.1   // Small threshold to prevent over-blooming
+    );
+    
+    // Initialize custom bloom properties
+    (this.bloomPass as any).edgeStrength = 3.0;
+    (this.bloomPass as any).nodeStrength = 2.0;
+    (this.bloomPass as any).environmentStrength = 1.0;
+    
+    this.composer.addPass(this.bloomPass);
+
+    // Setup basic lighting
+    this.setupLighting();
+
+    // Setup event listeners
+    window.addEventListener('resize', this.handleResize.bind(this));
+
+    // Initialize visualization controller
+    this.visualizationController = VisualizationController.getInstance();
+    this.visualizationController.initializeScene(this.scene, this.camera);
+
+    logger.log('SceneManager initialization complete');
+  }
+
+  static getInstance(canvas: HTMLCanvasElement): SceneManager {
+    if (!SceneManager.instance) {
+      SceneManager.instance = new SceneManager(canvas);
+    }
+    return SceneManager.instance;
+  }
+
+  static cleanup(): void {
+    if (SceneManager.instance) {
+      SceneManager.instance.dispose();
+      SceneManager.instance = null as any;
+    }
+  }
+
+  private setupLighting(): void {
+    const ambientLight = new AmbientLight(0xffffff, 0.6);
+    this.scene.add(ambientLight);
+
+    const directionalLight = new DirectionalLight(0xffffff, 0.8);
+    directionalLight.position.set(1, 1, 1).normalize();
+    this.scene.add(directionalLight);
+
+    // Add smaller grid helper
+    const gridHelper = new GridHelper(50, 50); // Reduced grid size
+    if (gridHelper.material instanceof Material) {
+      gridHelper.material.transparent = true;
+      gridHelper.material.opacity = 0.1;
+    }
+    this.scene.add(gridHelper);
+    this.sceneGrid = gridHelper;
+  }
+
+  private handleResize(): void {
+    const width = window.innerWidth;
+    const height = window.innerHeight;
+
+    this.camera.aspect = width / height;
+    this.camera.updateProjectionMatrix();
+
+    this.renderer.setSize(width, height);
+    this.composer.setSize(width, height);
+    
+    // Update bloom resolution
+    if (this.bloomPass) {
+      this.bloomPass.resolution.set(width, height);
+    }
+  }
+
+  start(): void {
+    if (this.isRunning) return;
+    this.isRunning = true;
+    requestAnimationFrame(this.animate);
+    logger.log('Scene rendering started');
+  }
+
+  // Alias for start() to maintain compatibility with new client code
+  startRendering(): void {
+    this.start();
+  }
+
+  stop(): void {
+    this.isRunning = false;
+    
+    // Clean up animation loops
+    if (this.renderer.xr.enabled) {
+      this.renderer.setAnimationLoop(null);
+    }
+    if (this.animationFrameId !== null) {
+      cancelAnimationFrame(this.animationFrameId);
+      this.animationFrameId = null;
+    }
+    
+    logger.log('Scene rendering stopped');
+  }
+
+  private animate = (timestamp: number): void => {
+    if (!this.isRunning) return;
+
+    // Calculate FPS
+    this.frameCount++;
+    if (timestamp - this.lastFpsUpdate >= 1000) {
+      this.currentFps = (this.frameCount * 1000) / (timestamp - this.lastFpsUpdate);
+      this.frameCount = 0;
+      this.lastFpsUpdate = timestamp;
+
+      // Apply performance optimizations if FPS is low
+      if (this.currentFps < LOW_PERF_FPS_THRESHOLD) {
+        this.applyLowPerformanceOptimizations();
+      }
+    }
+
+    const deltaTime = timestamp - this.lastFrameTime;
+    this.lastFrameTime = timestamp;
+
+    // Set up animation loop
+    if (this.renderer.xr.enabled) {
+      // For XR, use the built-in animation loop
+      this.renderer.setAnimationLoop(this.render);
+    } else {
+      // For non-XR, use requestAnimationFrame
+      this.render(deltaTime);
+      if (this.isRunning) {
+        this.animationFrameId = requestAnimationFrame(this.animate);
+      }
+    }
+  }
+
+  private render = (deltaTime?: number): void => {
+    const startTime = performance.now();
+
+    // Update controls only in non-XR mode
+    if (!this.renderer.xr.enabled) {
+      // Only update controls if enough time has passed
+      if (!deltaTime || deltaTime >= this.FRAME_BUDGET) {
+        this.controls.update();
+        // Show scene grid in non-XR mode
+        if (this.sceneGrid) this.sceneGrid.visible = true;
+      }
+    } else {
+      // Hide scene grid in XR mode
+      if (this.sceneGrid) this.sceneGrid.visible = false;
+    }
+
+    // Check if we have time for visualization update
+    // Always update visualization to maintain smooth movement
+    (this.visualizationController as any)?.update(deltaTime || 0);
+
+    // Check remaining time for rendering
+    const preRenderTime = performance.now();
+    const remainingTime = this.FRAME_BUDGET - (preRenderTime - startTime);
+
+    if (remainingTime >= 0) {
+      // Use post-processing in non-XR mode when bloom is enabled
+      if (!this.renderer.xr.enabled && this.bloomPass.enabled) {
+        // Skip bloom if we're running low on time
+        if (remainingTime >= 8) { // Give bloom half our frame budget
+          this.composer.render();
+        } else {
+          this.renderer.render(this.scene, this.camera);
+        }
+      } else {
+        this.renderer.render(this.scene, this.camera);
+      }
+    } else {
+      this.renderer.render(this.scene, this.camera);
+    }
+  }
+
+  // Public getters
+  getScene(): Scene {
+    return this.scene;
+  }
+
+  getCamera(): PerspectiveCamera {
+    return this.camera;
+  }
+
+  getRenderer(): WebGLRenderer {
+    return this.renderer;
+  }
+
+  getControls(): OrbitControls {
+    return this.controls;
+  }
+
+  // Scene management methods
+  add(object: Object3D): void {
+    this.scene.add(object);
+  }
+
+  remove(object: Object3D): void {
+    this.scene.remove(object);
+  }
+
+  dispose(): void {
+    this.stop();
+    
+    // Remove event listeners
+    const boundResize = this.handleResize.bind(this);
+    window.removeEventListener('resize', boundResize);
+
+    // Dispose of post-processing
+    if (this.composer) {
+      // Dispose of render targets
+      this.composer.renderTarget1.dispose();
+      this.composer.renderTarget2.dispose();
+      
+      // Clear passes
+      this.composer.passes.length = 0;
+    }
+
+    // Dispose of bloom pass resources
+    if (this.bloomPass) {
+      // Dispose of any textures or materials used by the bloom pass
+      if ((this.bloomPass as any).renderTargetsHorizontal) {
+        (this.bloomPass as any).renderTargetsHorizontal.forEach((target: any) => {
+          if (target && target.dispose) target.dispose();
+        });
+      }
+      if ((this.bloomPass as any).renderTargetsVertical) {
+        (this.bloomPass as any).renderTargetsVertical.forEach((target: any) => {
+          if (target && target.dispose) target.dispose();
+        });
+      }
+      if ((this.bloomPass as any).materialHorizontal) {
+        (this.bloomPass as any).materialHorizontal.dispose();
+      }
+      if ((this.bloomPass as any).materialVertical) {
+        (this.bloomPass as any).materialVertical.dispose();
+      }
+    }
+
+    // Dispose of controls
+    if (this.controls) {
+      this.controls.dispose();
+    }
+
+    // Dispose of renderer and materials
+    if (this.renderer) {
+      this.renderer.dispose();
+      this.renderer.domElement.remove();
+      (this.renderer.domElement as any).width = 0;
+      (this.renderer.domElement as any).height = 0;
+    }
+
+    // Dispose of scene objects
+    if (this.scene) {
+      this.scene.traverse((object) => {
+        if (object instanceof Mesh) {
+          if (object.geometry) object.geometry.dispose();
+          if (object.material) {
+            if (Array.isArray(object.material)) {
+              object.material.forEach(material => material.dispose());
+            } else {
+              object.material.dispose();
+            }
+          }
+        }
+      });
+    }
+
+    logger.log('Scene manager disposed');
+  }
+
+  public handleSettingsUpdate(settings: Settings): void {
+    if (!settings.visualization?.rendering) {
+      logger.warn('Received settings update without visualization.rendering section');
+      return;
+    }
+
+    const { rendering: newRendering, bloom: newBloom } = settings.visualization;
+    const hasRenderingChanged = JSON.stringify(this.currentRenderingSettings) !== JSON.stringify(newRendering);
+
+    // Update bloom settings
+    if (newBloom) {
+      const currentBloom = {
+        enabled: this.bloomPass.enabled,
+        strength: this.bloomPass.strength,
+        radius: this.bloomPass.radius,
+        threshold: this.bloomPass.threshold,
+        edgeStrength: (this.bloomPass as any).edgeStrength,
+        nodeStrength: (this.bloomPass as any).nodeStrength,
+        environmentStrength: (this.bloomPass as any).environmentStrength
+      };
+
+      const newBloomSettings = {
+        enabled: newBloom.enabled,
+        strength: newBloom.enabled ? (newBloom.strength || 1.5) : 0,
+        radius: newBloom.enabled ? (newBloom.radius || 0.4) : 0,
+        threshold: 0, // Always keep threshold at 0 for maximum bloom effect
+        edgeStrength: newBloom.enabled ? (newBloom.edgeBloomStrength || 3.0) : 0,
+        nodeStrength: newBloom.enabled ? (newBloom.nodeBloomStrength || 2.0) : 0,
+        environmentStrength: newBloom.enabled ? (newBloom.environmentBloomStrength || 1.0) : 0
+      };
+
+      const hasBloomChanged = JSON.stringify(currentBloom) !== JSON.stringify(newBloomSettings);
+      
+      if (hasBloomChanged) {
+        this.bloomPass.enabled = newBloomSettings.enabled;
+        this.bloomPass.strength = newBloomSettings.strength;
+        this.bloomPass.radius = newBloomSettings.radius;
+        this.bloomPass.threshold = newBloomSettings.threshold;
+        (this.bloomPass as any).edgeStrength = newBloomSettings.edgeStrength;
+        (this.bloomPass as any).nodeStrength = newBloomSettings.nodeStrength;
+        (this.bloomPass as any).environmentStrength = newBloomSettings.environmentStrength;
+      }
+    }
+
+    if (hasRenderingChanged) {
+      this.currentRenderingSettings = newRendering;
+
+      // Update background color
+      if (newRendering.backgroundColor) {
+        this.scene.background = new Color(newRendering.backgroundColor);
+      }
+
+      // Update lighting
+      const lights = this.scene.children.filter(child => 
+        child instanceof AmbientLight || child instanceof DirectionalLight
+      );
+      
+      lights.forEach(light => {
+        if (light instanceof AmbientLight) {
+          light.intensity = newRendering.ambientLightIntensity;
+        } else if (light instanceof DirectionalLight) {
+          light.intensity = newRendering.directionalLightIntensity;
+        }
+      });
+
+      // Update renderer settings
+      if (this.renderer) {
+        // Note: Some settings can only be changed at renderer creation
+        if (newRendering.enableAntialiasing) {
+          logger.warn('Antialiasing setting change requires renderer recreation');
+          this.recreateRenderer();
+        }
+        if (newRendering.enableShadows) {
+          logger.warn('Shadow settings change requires renderer recreation');
+        }
+      }
+    }
+
+    // Only log if something actually changed
+    if (hasRenderingChanged) {
+      logger.debug('Scene settings updated:', {
+        rendering: newRendering,
+        bloom: {
+          enabled: this.bloomPass.enabled,
+          strength: this.bloomPass.strength
+        }
+      });
+    }
+  }
+
+  private recreateRenderer(): void {
+    logger.log('Recreating renderer with updated settings');
+    
+    // Store current XR state
+    const wasXREnabled = this.renderer.xr.enabled;
+    
+    // Dispose of current renderer
+    this.renderer.dispose();
+    
+    // Create new renderer with updated settings
+    this.renderer = new WebGLRenderer({
+      canvas: this.canvas,
+      antialias: this.currentRenderingSettings?.enableAntialiasing || true,
+      alpha: true,
+      powerPreference: 'high-performance',
+      xr: {
+        enabled: wasXREnabled
+      }
+    });
+    this.renderer.setSize(window.innerWidth, window.innerHeight);
+    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
+    
+    // Recreate composer with new renderer
+    this.composer = new EffectComposer(this.renderer);
+    this.composer.addPass(new RenderPass(this.scene, this.camera));
+    this.composer.addPass(this.bloomPass);
+  }
+
+  private applyLowPerformanceOptimizations(): void {
+    // Optimize materials
+    this.scene.traverse((object: Object3D) => {
+      if (object instanceof Mesh) {
+        const material = object.material as Material;
+        if (material) {
+          // Keep material features that affect visual quality
+          material.needsUpdate = true;
+          
+          // Disable shadows
+          (object as any).castShadow = (object as any).receiveShadow = false;
+          
+          // Force material update
+          material.needsUpdate = true;
+        }
+      }
+    });
+
+    // Optimize renderer
+    (this.renderer as any).shadowMap.enabled = false;
+    
+    // Only disable bloom at very low FPS
+    if (this.bloomPass?.enabled && this.currentFps < 20) {
+      this.bloomPass.enabled = false;
+    }
+
+    // Log optimization application
+    logger.debug(`Applied low performance optimizations at ${this.currentFps.toFixed(1)} FPS`);
+  }
+}
+
+----
+rendering/factories/GeometryFactory.ts
+import { 
+    BufferGeometry, 
+    CylinderGeometry, 
+    IcosahedronGeometry,
+    TorusGeometry
+} from 'three';
+
+export class GeometryFactory {
+    private static instance: GeometryFactory;
+    private geometryCache = new Map<string, BufferGeometry>();
+
+    private constructor() {}
+
+    static getInstance(): GeometryFactory {
+        if (!GeometryFactory.instance) {
+            GeometryFactory.instance = new GeometryFactory();
+        }
+        return GeometryFactory.instance;
+    }
+
+    getNodeGeometry(quality: 'low' | 'medium' | 'high', context: 'ar' | 'desktop' = 'desktop', size: number = 40): BufferGeometry {
+        const cacheKey = `node-${quality}-${context}-${size}`;
+        if (this.geometryCache.has(cacheKey)) {
+            return this.geometryCache.get(cacheKey)!;
+        }
+
+        let geometry: BufferGeometry;
+        let detail: number;
+        
+        switch (quality) {
+            case 'low':
+               detail = context === 'ar' ? 1 : 2;
+                 break;
+            case 'medium':
+                detail = context === 'ar' ? 2 : 3;
+                break;
+            case 'high':
+                detail = context === 'ar' ? 2 : 4;
+                break;
+            default:
+                detail = context === 'ar' ? 1 : 2;
+        }
+        // Use IcosahedronGeometry for better performance while maintaining visual quality
+        // Convert from native units (40-120) to scene scale (0.4-1.2)
+        geometry = new IcosahedronGeometry(size / 80, detail);
+        this.geometryCache.set(cacheKey, geometry);
+        return geometry;
+    }
+
+    getHologramGeometry(type: string, quality: string, size: number = 40): BufferGeometry {
+        const cacheKey = `hologram-${type}-${quality}-${size}`;
+        if (this.geometryCache.has(cacheKey)) {
+            return this.geometryCache.get(cacheKey)!;
+        }
+
+        const segments = {
+            low: { ring: 16, sphere: 12 },
+            medium: { ring: 24, sphere: 16 },
+            high: { ring: 32, sphere: 16 }
+        }[quality] || { ring: 32, sphere: 16 };
+
+        let geometry: BufferGeometry;
+        switch (type) {
+            case 'ring':
+                geometry = new TorusGeometry(size, size * 0.05, segments.ring, segments.ring * 2);
+                break;
+            case 'triangleSphere':
+                geometry = new IcosahedronGeometry(size, 1); // One subdivision for all spheres
+                break;
+            default:
+                geometry = new IcosahedronGeometry(size, 1); // Base size
+        }
+
+        this.geometryCache.set(cacheKey, geometry);
+        return geometry;
+    }
+
+    getEdgeGeometry(context: 'ar' | 'desktop' = 'desktop', quality?: 'low' | 'medium' | 'high'): BufferGeometry {
+        const cacheKey = `edge-${context}-${quality || 'medium'}`;
+        if (this.geometryCache.has(cacheKey)) {
+            return this.geometryCache.get(cacheKey)!;
+        }
+
+        // Use CylinderGeometry for more reliable edge rendering
+        const baseRadius = context === 'ar' ? 0.5 : 1.0; // Native units for edge thickness
+        
+        // Adjust segments based on quality
+        const segments = {
+            low: context === 'ar' ? 4 : 5,
+            medium: context === 'ar' ? 5 : 6,
+            high: context === 'ar' ? 6 : 8
+        }[quality || 'medium'];
+        const geometry = new CylinderGeometry(baseRadius, baseRadius, 1, segments);
+        
+        // Rotate 90 degrees to align with Z-axis
+        geometry.rotateX(Math.PI / 2);
+        
+        this.geometryCache.set(cacheKey, geometry);
+        return geometry;
+    }
+
+    dispose(): void {
+        this.geometryCache.forEach(geometry => geometry.dispose());
+        this.geometryCache.clear();
+    }
+}
+
+----
+rendering/factories/MaterialFactory.ts
+import { HologramShaderMaterial } from '../materials/HologramShaderMaterial';
+import { 
+    Color, 
+    Material, 
+    MeshStandardMaterial, 
+    LineBasicMaterial,
+    DoubleSide
+} from 'three';
+
+export class MaterialFactory {
+    private static instance: MaterialFactory;
+    private materialCache: Map<string, Material>;
+
+    private constructor() {
+        this.materialCache = new Map();
+    }
+
+    public static getInstance(): MaterialFactory {
+        if (!MaterialFactory.instance) {
+            MaterialFactory.instance = new MaterialFactory();
+        }
+        return MaterialFactory.instance;
+    }
+
+    private hexToRgb(hex: string): Color {
+        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
+        if (!result) {
+            return new Color(0xffffff);
+        }
+        return new Color(`#${result[1]}${result[2]}${result[3]}`);
+    }
+
+    public createHologramMaterial(settings: any, context: 'ar' | 'desktop' = 'desktop'): HologramShaderMaterial {
+        const cacheKey = 'hologram';
+        if (this.materialCache.has(cacheKey)) {
+            return this.materialCache.get(cacheKey) as HologramShaderMaterial;
+        }
+
+        const material = new HologramShaderMaterial(settings);
+        
+        if (settings.visualization?.hologram?.ringColor) {
+            const materialColor = this.hexToRgb(settings.visualization.hologram.ringColor);
+            material.uniforms.color.value = materialColor;
+        }
+        
+        // Optimize for Quest
+        if (context === 'ar') {
+            material.transparent = true;
+            material.depthWrite = true; // Improve depth sorting
+            material.opacity = (settings.visualization?.hologram?.opacity || 0.6) * 0.8; // Reduce opacity for better performance
+        }
+
+        this.materialCache.set(cacheKey, material);
+        return material;
+    }
+
+    public getHologramMaterial(settings: any, context: 'ar' | 'desktop' = 'desktop'): HologramShaderMaterial {
+        return this.createHologramMaterial(settings, context);
+    }
+
+    public getSceneSphereMaterial(settings: any): Material {
+        const cacheKey = 'scene-sphere';
+        if (this.materialCache.has(cacheKey)) {
+            return this.materialCache.get(cacheKey)!;
+        }
+        const material = new MeshStandardMaterial({
+            color: settings.visualization?.hologram?.ringColor || 0xffffff,
+            transparent: true,
+            depthWrite: true,
+            opacity: settings.visualization?.hologram?.opacity || 0.8,
+            metalness: 0.1,
+            roughness: 0.8,
+            side: DoubleSide,
+        });
+        this.materialCache.set(cacheKey, material);
+        return material;
+    }
+
+    public getRingMaterial(settings: any, context: 'ar' | 'desktop' = 'desktop'): Material {
+        const cacheKey = `ring-${context}`;
+        if (this.materialCache.has(cacheKey)) {
+            return this.materialCache.get(cacheKey)!;
+        }
+        const material = this.getHologramMaterial(settings, context);
+        material.transparent = true;
+        material.depthWrite = true;
+        material.opacity = context === 'ar' ? (settings.visualization?.hologram?.opacity || 0.6) * 0.8 : (settings.visualization?.hologram?.opacity || 0.6);
+        this.materialCache.set(cacheKey, material);
+        return material;
+    }
+
+    public getNodeMaterial(settings: any, context: 'ar' | 'desktop' = 'desktop'): Material {
+        const cacheKey = `node-${context}`;
+        if (this.materialCache.has(cacheKey)) {
+            return this.materialCache.get(cacheKey)!;
+        }
+
+        const opacity = context === 'ar' ? (settings.visualization?.nodes?.opacity || 0.9) * 0.8 : (settings.visualization?.nodes?.opacity || 0.9);
+
+        const material = new MeshStandardMaterial({
+            color: settings.visualization?.nodes?.baseColor || 0x4287f5,
+            transparent: true,
+            opacity,
+            metalness: settings.visualization?.nodes?.metalness || 0.2,
+            roughness: settings.visualization?.nodes?.roughness || 0.7,
+            side: DoubleSide,
+            depthWrite: true // Improve depth sorting
+        });
+        
+        this.materialCache.set(cacheKey, material);
+        return material;
+    }
+
+    public getMetadataMaterial(): Material {
+        const cacheKey = 'metadata';
+        if (this.materialCache.has(cacheKey)) {
+            return this.materialCache.get(cacheKey)!;
+        }
+
+        const material = new MeshStandardMaterial({
+            color: 0xffffff,
+            transparent: true,
+            depthWrite: true,
+            metalness: 0.1,
+            roughness: 0.8,
+            side: DoubleSide, 
+            opacity: 0.7 // Slightly reduced opacity for better performance
+        });
+
+        this.materialCache.set(cacheKey, material);
+        return material;
+    }
+
+    public updateMaterial(type: string, settings: any): void {
+        const material = this.materialCache.get(type);
+        if (!material) return;
+
+        switch (type) {
+            case 'node-basic':
+            case 'node-phong': {
+                const nodeMaterial = material as MeshStandardMaterial;
+                nodeMaterial.color.set(settings.visualization?.nodes?.baseColor || '#4287f5');
+                nodeMaterial.metalness = settings.visualization?.nodes?.metalness || 0.2;
+                nodeMaterial.roughness = settings.visualization?.nodes?.roughness || 0.7;
+                nodeMaterial.opacity = type.includes('ar') ? (settings.visualization?.nodes?.opacity || 0.9) * 0.8 : (settings.visualization?.nodes?.opacity || 0.9);
+                nodeMaterial.needsUpdate = true;
+                break;
+            }
+            case 'edge':
+                (material as LineBasicMaterial).color = this.hexToRgb(settings.visualization?.edges?.color || '#6e7c91');
+                break;
+            case 'hologram':
+                if (material instanceof HologramShaderMaterial) {
+                    material.uniforms.color.value = this.hexToRgb(settings.visualization?.hologram?.ringColor || '#ffffff');
+                }
+                break;
+        }
+    }
+
+    public dispose(): void {
+        this.materialCache.forEach(material => material.dispose());
+        this.materialCache.clear();
+    }
+}
+
+----
+rendering/materials/EdgeShaderMaterial.ts
+import * as THREE from 'three';
+import { Settings } from '../../types/settings/base';
+
+export interface EdgeUniforms {
+    [key: string]: { value: any };
+    time: { value: number };
+    opacity: { value: number };
+    color: { value: THREE.Color };
+    flowSpeed: { value: number };
+    flowIntensity: { value: number };
+    glowStrength: { value: number };
+    distanceIntensity: { value: number };
+    useGradient: { value: boolean };
+    gradientColorA: { value: THREE.Color };
+    gradientColorB: { value: THREE.Color };
+    sourcePosition: { value: THREE.Vector3 };
+    targetPosition: { value: THREE.Vector3 };
+}
+
+export class EdgeShaderMaterial extends THREE.ShaderMaterial {
+    declare uniforms: EdgeUniforms;
+    private updateFrequency: number;
+    private frameCount: number = 0;
+
+    constructor(settings: Settings, context: 'ar' | 'desktop' = 'desktop') {
+        const isAR = context === 'ar';
+        
+        super({
+            uniforms: {
+                time: { value: 0 },
+                opacity: { value: settings.visualization.edges.opacity },
+                color: { value: new THREE.Color(settings.visualization.edges.color) },
+                flowSpeed: { value: settings.visualization.edges.flowSpeed },
+                flowIntensity: { value: settings.visualization.edges.flowIntensity },
+                glowStrength: { value: settings.visualization.edges.glowStrength },
+                distanceIntensity: { value: settings.visualization.edges.distanceIntensity },
+                useGradient: { value: settings.visualization.edges.useGradient },
+                gradientColorA: { value: new THREE.Color(settings.visualization.edges.gradientColors[0]) },
+                gradientColorB: { value: new THREE.Color(settings.visualization.edges.gradientColors[1]) },
+                sourcePosition: { value: new THREE.Vector3() },
+                targetPosition: { value: new THREE.Vector3() }
+            },
+            vertexShader: `
+                varying vec2 vUv;
+                varying vec3 vPosition;
+                varying float vDistance;
+                const float PI = 3.14159265359;
+                
+                uniform vec3 sourcePosition;
+                uniform vec3 targetPosition;
+                
+                void main() {
+                    vUv = uv;
+                    vPosition = position;
+                    
+                    // Optimize distance calculation
+                    vec3 edgeDir = normalize(targetPosition - sourcePosition);
+                    vec3 posVector = position - sourcePosition;
+                    vDistance = dot(edgeDir, normalize(posVector));
+                    
+                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
+                }
+            `,
+            fragmentShader: `
+                uniform float time;
+                uniform float opacity;
+                uniform vec3 color;
+                uniform float flowSpeed;
+                uniform float flowIntensity;
+                uniform float glowStrength;
+                uniform float distanceIntensity;
+                uniform bool useGradient;
+                uniform vec3 gradientColorA;
+                uniform vec3 gradientColorB;
+                
+                varying vec2 vUv;
+                varying vec3 vPosition;
+                varying float vDistance;
+                
+                void main() {
+                    // Simplified flow calculation
+                    float flow = sin(vDistance * 8.0 - time * flowSpeed) * 0.5 + 0.5;
+                    flow *= flowIntensity;
+
+                    // Optimized distance-based intensity
+                    float distanceFactor = 1.0 - abs(vDistance - 0.5) * 2.0;
+                    distanceFactor = pow(distanceFactor, distanceIntensity);
+                    
+                    // Base color with gradient
+                    vec3 finalColor = useGradient ? 
+                        mix(gradientColorA, gradientColorB, vDistance) : 
+                        color;
+
+                    // Add flow and glow effects
+                    finalColor += flow * 0.2;
+                    finalColor += (1.0 - vUv.y) * glowStrength * 0.3;
+                    
+                    // Apply distance factor
+                    finalColor *= mix(0.5, 1.0, distanceFactor);
+                    
+                    gl_FragColor = vec4(finalColor, opacity * (0.7 + flow * 0.3));
+                }
+            `,
+            transparent: true,
+            side: isAR ? 0 : 2, // THREE.FrontSide = 0, THREE.DoubleSide = 2
+            blending: isAR ? THREE.NormalBlending : THREE.AdditiveBlending, // Use normal blending in VR for better performance
+            depthWrite: !isAR // Disable depth write in VR for better performance
+        });
+
+        // Set update frequency based on context
+        this.updateFrequency = isAR ? 3 : 2; // Update less frequently in AR
+    }
+
+    update(deltaTime: number): void {
+        this.frameCount++;
+        if (this.frameCount % this.updateFrequency === 0) {
+            this.uniforms.time.value += deltaTime;
+        }
+    }
+
+    setSourceTarget(source: THREE.Vector3, target: THREE.Vector3): void {
+        this.uniforms.sourcePosition.value.copy(source);
+        this.uniforms.targetPosition.value.copy(target);
+    }
+
+    clone(): this {
+        const material = new EdgeShaderMaterial({
+            visualization: {
+                edges: {
+                    opacity: this.uniforms.opacity.value,
+                    color: this.uniforms.color.value.clone(),
+                    flowSpeed: this.uniforms.flowSpeed.value,
+                    flowIntensity: this.uniforms.flowIntensity.value,
+                    glowStrength: this.uniforms.glowStrength.value,
+                    distanceIntensity: this.uniforms.distanceIntensity.value,
+                    useGradient: this.uniforms.useGradient.value,
+                    gradientColors: [
+                        this.uniforms.gradientColorA.value.clone(),
+                        this.uniforms.gradientColorB.value.clone()
+                    ]
+                } as any
+            } as any
+        } as Settings);
+        return material as this;
+    }
+}
+----
+rendering/materials/HologramShaderMaterial.ts
+import * as THREE from 'three';
+
+export interface HologramUniforms {
+    [key: string]: { value: any };
+    time: { value: number };
+    opacity: { value: number };
+    color: { value: THREE.Color };
+    pulseIntensity: { value: number };
+    interactionPoint: { value: THREE.Vector3 };
+    interactionStrength: { value: number };
+    isEdgeOnly: { value: boolean };
+}
+
+export class HologramShaderMaterial extends THREE.ShaderMaterial {
+    declare uniforms: HologramUniforms;
+
+    constructor(settings?: any, context: 'ar' | 'desktop' = 'desktop') {
+        const isAR = context === 'ar';
+        super({
+            uniforms: {
+                time: { value: 0 },
+                opacity: { value: settings?.visualization?.hologram?.opacity ?? 1.0 },
+                color: { value: new THREE.Color(settings?.visualization?.hologram?.color ?? 0x00ff00) },
+                pulseIntensity: { value: isAR ? 0.1 : 0.2 }, // Reduced pulse intensity for AR
+                interactionPoint: { value: new THREE.Vector3() },
+                interactionStrength: { value: 0.0 },
+                isEdgeOnly: { value: false }
+            },
+            vertexShader: `
+                varying vec2 vUv;
+                varying vec3 vPosition;
+                void main() {
+                    vUv = uv;
+                    vPosition = position;
+                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
+                }
+            `,
+            fragmentShader: `
+                uniform float time;
+                uniform float opacity;
+                uniform vec3 color;
+                uniform float pulseIntensity;
+                uniform vec3 interactionPoint;
+                uniform float interactionStrength;
+                uniform bool isEdgeOnly;
+                varying vec2 vUv;
+                varying vec3 vPosition;
+
+                void main() {
+                    // Simplified pulse calculation
+                    float pulse = sin(time) * 0.5 + 0.5;
+                    
+                    // Only calculate interaction if strength is significant
+                    float interaction = 0.0;
+                    if (interactionStrength > 0.01) {
+                        float dist = length(vPosition - interactionPoint);
+                        interaction = interactionStrength * (1.0 - smoothstep(0.0, 2.0, dist));
+                    }
+                    
+                    float alpha;
+                    if (isEdgeOnly) {
+                        alpha = opacity * (0.8 + pulse * pulseIntensity + interaction);
+                        vec3 edgeColor = color + vec3(0.1) * pulse; // Reduced edge brightness
+                        gl_FragColor = vec4(edgeColor, clamp(alpha, 0.0, 1.0));
+                    } else {
+                        alpha = opacity * (0.5 + pulse * pulseIntensity + interaction);
+                        gl_FragColor = vec4(color, clamp(alpha, 0.0, 1.0));
+                    }
+                }
+            `,
+            transparent: true,
+            side: isAR ? 0 : 2, // THREE.FrontSide = 0, THREE.DoubleSide = 2
+            blending: THREE.AdditiveBlending,
+            wireframe: true,
+            wireframeLinewidth: 1
+        });
+
+        // Set update frequency based on context
+        this.updateFrequency = isAR ? 2 : 1; // Update every other frame in AR
+        this.frameCount = 0;
+    }
+
+    private updateFrequency: number;
+    private frameCount: number;
+
+    update(deltaTime: number): void {
+        this.frameCount++;
+        if (this.frameCount % this.updateFrequency === 0) {
+            this.uniforms.time.value += deltaTime;
+            if (this.uniforms.interactionStrength.value > 0.01) {
+                this.uniforms.interactionStrength.value *= 0.95; // Decay interaction effect
+            }
+        }
+    }
+
+    handleInteraction(position: THREE.Vector3): void {
+        if (this.frameCount % this.updateFrequency === 0) {
+            this.uniforms.interactionPoint.value.copy(position);
+            this.uniforms.interactionStrength.value = 1.0;
+        }
+    }
+
+    setEdgeOnly(enabled: boolean): void {
+        this.uniforms.isEdgeOnly.value = enabled;
+        // Increase pulse intensity for better visibility in wireframe mode
+        this.uniforms.pulseIntensity.value = enabled ? (this.side === 0 ? 0.15 : 0.3) : (this.side === 0 ? 0.1 : 0.2);
+    }
+
+    clone(): this {
+        const material = new HologramShaderMaterial();
+        material.uniforms = {
+            time: { value: this.uniforms.time.value },
+            opacity: { value: this.uniforms.opacity.value },
+            color: { value: this.uniforms.color.value.clone() },
+            pulseIntensity: { value: this.uniforms.pulseIntensity.value },
+            interactionPoint: { value: this.uniforms.interactionPoint.value.clone() },
+            interactionStrength: { value: this.uniforms.interactionStrength.value },
+            isEdgeOnly: { value: this.uniforms.isEdgeOnly.value }
+        };
+        return material as this;
+    }
+}
+
+----
+rendering/node/NodeManagerFacade.ts
+import {
+    Scene,
+    Camera,
+    Material,
+    InstancedMesh
+} from 'three';
+import { NodeGeometryManager } from './geometry/NodeGeometryManager';
+import { NodeInstanceManager } from './instance/NodeInstanceManager';
+import { NodeMetadataManager } from './metadata/NodeMetadataManager';
+import { NodeInteractionManager } from './interaction/NodeInteractionManager';
+import { NodeManagerInterface, NodeManagerError, NodeManagerErrorType } from './NodeManagerInterface';
+import { NodeData } from '../../core/types';
+import { XRHandWithHaptics } from '../../types/xr';
+import { createLogger } from '../../core/logger';
+
+const logger = createLogger('NodeManagerFacade');
+
+/**
+ * NodeManagerFacade provides a unified interface to the node management system.
+ * It coordinates between the geometry, instance, metadata, and interaction managers.
+ */
+export class NodeManagerFacade implements NodeManagerInterface {
+    private static instance: NodeManagerFacade;
+    private camera: Camera;
+    private geometryManager: NodeGeometryManager;
+    private instanceManager: NodeInstanceManager;
+    private metadataManager: NodeMetadataManager;
+    private interactionManager: NodeInteractionManager;
+    private isInitialized: boolean = false;
+
+    private constructor(scene: Scene, camera: Camera, material: Material) {
+        this.camera = camera;
+
+        try {
+            // Initialize managers in the correct order
+            this.geometryManager = NodeGeometryManager.getInstance();
+            this.instanceManager = NodeInstanceManager.getInstance(scene, material);
+            this.metadataManager = NodeMetadataManager.getInstance();
+            
+            // Initialize interaction manager with instance mesh
+            const instanceMesh = this.instanceManager.getInstanceMesh();
+            this.interactionManager = NodeInteractionManager.getInstance(instanceMesh);
+
+            this.isInitialized = true;
+            logger.info('NodeManagerFacade initialized');
+        } catch (error) {
+            throw new NodeManagerError(
+                NodeManagerErrorType.INITIALIZATION_FAILED,
+                'Failed to initialize NodeManagerFacade',
+                error
+            );
+        }
+    }
+    
+    public static getInstance(scene: Scene, camera: Camera, material: Material): NodeManagerFacade {
+        if (!NodeManagerFacade.instance) {
+            NodeManagerFacade.instance = new NodeManagerFacade(scene, camera, material);
+        }
+        return NodeManagerFacade.instance;
+    }
+
+    public setXRMode(enabled: boolean): void {
+        if (!this.isInitialized) return;
+
+        try {
+            const instanceMesh = this.instanceManager.getInstanceMesh();
+            instanceMesh.layers.set(enabled ? 1 : 0);
+            logger.debug(`XR mode ${enabled ? 'enabled' : 'disabled'}`);
+        } catch (error) {
+            throw new NodeManagerError(
+                NodeManagerErrorType.XR_MODE_SWITCH_FAILED,
+                'Failed to switch XR mode',
+                error
+            );
+        }
+    }
+
+    public handleSettingsUpdate(_settings: any): void {
+        if (!this.isInitialized) return;
+
+        // Update settings in each manager as needed
+        // This will be implemented based on what settings each manager needs
+        logger.debug('Settings update not yet implemented');
+    }
+
+    /**
+     * Update node positions and states
+     * @param nodes Array of node updates
+     */
+    public updateNodes(nodes: { id: string, data: NodeData }[]): void {
+        if (!this.isInitialized) return;
+
+        const calculateNodeSize = (fileSize?: number) => 
+            fileSize ? Math.min(700, Math.max(200, Math.log2(fileSize + 1) * 50)) : 200;
+
+        // Update instance positions
+        this.instanceManager.updateNodePositions(nodes.map(node => ({
+            id: node.id,
+            metadata: {
+                nodeSize: calculateNodeSize(node.data.metadata?.fileSize)
+            },
+            position: [
+                node.data.position.x,
+                node.data.position.y,
+                node.data.position.z
+            ],
+            velocity: node.data.velocity ? [
+                node.data.velocity.x,
+                node.data.velocity.y,
+                node.data.velocity.z
+            ] : undefined
+        })));
+
+        // Update metadata for each node
+        nodes.forEach(node => {
+            if (node.data.metadata) {
+                const nodeSize = calculateNodeSize(node.data.metadata.fileSize);
+                
+                // Update metadata with calculated node size
+                this.metadataManager.updateMetadata(node.id, {
+                    id: node.id,
+                    name: node.data.metadata.name || '',
+                    position: node.data.position,
+                    commitAge: 0,
+                    hyperlinkCount: node.data.metadata.links?.length || 0,
+                    importance: 0,
+                    fileSize: node.data.metadata.fileSize || 0,
+                    nodeSize: nodeSize
+                });
+            }
+        });
+    }
+
+    public updateNodePositions(nodes: { 
+        id: string, 
+        data: { 
+            position: [number, number, number],
+            velocity?: [number, number, number]
+        } 
+    }[]): void {
+        if (!this.isInitialized) return;
+
+        try {
+            // Update instance positions
+            this.instanceManager.updateNodePositions(nodes.map(node => ({
+                id: node.id,
+                position: node.data.position,
+                metadata: {
+                    nodeSize: 200 // Default size for position-only updates
+                },
+                velocity: node.data.velocity
+            })));
+        } catch (error) {
+            throw new NodeManagerError(
+                NodeManagerErrorType.UPDATE_FAILED,
+                'Failed to update node positions',
+                error
+            );
+        }
+    }
+
+
+    /**
+     * Handle XR hand interactions
+     * @param hand XR hand data with haptic feedback
+     */
+    public handleHandInteraction(hand: XRHandWithHaptics): void {
+        if (!this.isInitialized) return;
+        this.interactionManager.handleHandInteraction(hand);
+    }
+
+    /**
+     * Update the visualization state
+     * @param deltaTime Time since last update
+     */
+    public update(deltaTime: number): void {
+        if (!this.isInitialized) return;
+
+        // Update instance visibility and LOD
+        this.instanceManager.update(this.camera, deltaTime);
+
+        // Update metadata labels
+        this.metadataManager.update(this.camera);
+    }
+
+    /**
+     * Clean up resources
+     */
+    public dispose(): void {
+        if (!this.isInitialized) return;
+
+        try {
+            this.geometryManager.dispose();
+            this.instanceManager.dispose();
+            this.metadataManager.dispose();
+            this.interactionManager.dispose();
+
+            NodeManagerFacade.instance = null!;
+            this.isInitialized = false;
+            logger.info('NodeManagerFacade disposed');
+        } catch (error) {
+            throw new NodeManagerError(
+                NodeManagerErrorType.RESOURCE_CLEANUP_FAILED,
+                'Failed to dispose NodeManagerFacade',
+                error
+            );
+        }
+        logger.info('NodeManagerFacade disposed');
+    }
+
+    /**
+     * Get the underlying InstancedMesh
+     * Useful for adding to scenes or handling special cases
+     */
+    public getInstancedMesh(): InstancedMesh {
+        return this.instanceManager.getInstanceMesh();
+    }
+
+    /**
+     * Get node ID from instance index
+     * @param index Instance index in the InstancedMesh
+     * @returns Node ID or undefined if not found
+     */
+    public getNodeId(index: number): string | undefined {
+        return this.instanceManager.getNodeId(index);
+    }
+
+    /**
+     * Get the underlying NodeInstanceManager
+     * @returns The NodeInstanceManager instance
+     */
+    public getNodeInstanceManager(): NodeInstanceManager {
+        return this.instanceManager;
+    }
+}
+----
+rendering/node/NodeManagerFactory.ts
+import { Scene, Camera, Material } from 'three';
+import { NodeManagerInterface, NodeManagerError, NodeManagerErrorType } from './NodeManagerInterface';
+import { NodeManagerFacade } from './NodeManagerFacade';
+import { createLogger } from '../../core/logger';
+
+const logger = createLogger('NodeManagerFactory');
+
+/**
+ * Factory class for creating node manager instances.
+ */
+export class NodeManagerFactory {
+    private static instance: NodeManagerFactory;
+    private currentManager: NodeManagerInterface | null = null;
+
+    private constructor() {}
+
+    public static getInstance(): NodeManagerFactory {
+        if (!NodeManagerFactory.instance) {
+            NodeManagerFactory.instance = new NodeManagerFactory();
+        }
+        return NodeManagerFactory.instance;
+    }
+
+    /**
+     * Create a node manager instance
+     */
+    public createNodeManager(
+        scene: Scene,
+        camera: Camera,
+        material: Material,
+        _settings: any
+    ): NodeManagerInterface {
+        try {
+            // Clean up existing manager if any
+            if (this.currentManager) {
+                this.currentManager.dispose();
+                this.currentManager = null;
+            }
+
+            logger.info('Creating node manager');
+            this.currentManager = NodeManagerFacade.getInstance(
+                scene,
+                camera,
+                material
+            );
+            logger.debug('Node manager created successfully');
+
+            return this.currentManager;
+        } catch (error) {
+            throw new NodeManagerError(
+                NodeManagerErrorType.INITIALIZATION_FAILED,
+                'Failed to create node manager',
+                error
+            );
+        }
+    }
+
+    /**
+     * Get current node manager instance
+     */
+    public getCurrentManager(): NodeManagerInterface | null {
+        return this.currentManager;
+    }
+
+    /**
+     * Clean up resources
+     */
+    public dispose(): void {
+        if (this.currentManager) {
+            this.currentManager.dispose();
+            this.currentManager = null;
+        }
+        NodeManagerFactory.instance = null!;
+        logger.info('NodeManagerFactory disposed');
+    }
+}
+
+// Export singleton instance
+export const nodeManagerFactory = NodeManagerFactory.getInstance();
+----
+rendering/node/NodeManagerInterface.ts
+import { XRHandWithHaptics } from '../../types/xr';
+import { NodeData } from '../../core/types';
+import { Camera, Scene } from 'three';
+
+/**
+ * Common interface for node management implementations.
+ * This ensures compatibility between the old EnhancedNodeManager
+ * and the new NodeManagerFacade during migration.
+ */
+export interface NodeManagerInterface {
+    /**
+     * Update node positions and metadata
+     * @param nodes Array of node updates containing position and metadata
+     */
+    updateNodes(nodes: { id: string, data: NodeData }[]): void;
+
+    /**
+     * Update node positions from binary data
+     * @param nodes Array of node position updates
+     */
+    updateNodePositions(nodes: { 
+        id: string, 
+        data: { 
+            position: [number, number, number],
+            velocity?: [number, number, number]
+        } 
+    }[]): void;
+
+    /**
+     * Handle XR hand interactions
+     * @param hand XR hand data with haptic feedback capabilities
+     */
+    handleHandInteraction(hand: XRHandWithHaptics): void;
+
+    /**
+     * Update the visualization state
+     * @param deltaTime Time since last update in seconds
+     */
+    update(deltaTime: number): void;
+
+    /**
+     * Clean up resources
+     */
+    dispose(): void;
+
+    /**
+     * Set XR mode state
+     * @param enabled Whether XR mode is active
+     */
+    setXRMode(enabled: boolean): void;
+
+    /**
+     * Handle settings updates
+     * @param settings Updated settings object
+     */
+    handleSettingsUpdate(settings: any): void;
+}
+
+/**
+ * Factory interface for creating node managers
+ */
+export interface NodeManagerFactory {
+    /**
+     * Create a node manager instance
+     * @param scene Three.js scene
+     * @param camera Camera for visibility calculations
+     * @param settings Application settings
+     */
+    createNodeManager(scene: Scene, camera: Camera, settings: any): NodeManagerInterface;
+}
+
+/**
+ * Configuration options for node managers
+ */
+export interface NodeManagerConfig {
+    /**
+     * Maximum number of nodes to support
+     */
+    maxNodes?: number;
+
+    /**
+     * Distance threshold for LOD transitions
+     */
+    lodThresholds?: {
+        high: number;
+        medium: number;
+        low: number;
+    };
+
+    /**
+     * Performance settings
+     */
+    performance?: {
+        batchSize?: number;
+        updateInterval?: number;
+        cullingDistance?: number;
+    };
+
+    /**
+     * Metadata visualization settings
+     */
+    metadata?: {
+        enabled?: boolean;
+        maxDistance?: number;
+        updateInterval?: number;
+    };
+}
+
+/**
+ * Error types specific to node management
+ */
+export enum NodeManagerErrorType {
+    INITIALIZATION_FAILED = 'initialization_failed',
+    UPDATE_FAILED = 'update_failed',
+    RESOURCE_CLEANUP_FAILED = 'resource_cleanup_failed',
+    INVALID_NODE_DATA = 'invalid_node_data',
+    XR_MODE_SWITCH_FAILED = 'xr_mode_switch_failed'
+}
+
+/**
+ * Custom error class for node management errors
+ */
+export class NodeManagerError extends Error {
+    constructor(
+        public type: NodeManagerErrorType,
+        message: string,
+        public details?: any
+    ) {
+        super(message);
+        this.name = 'NodeManagerError';
+    }
+}
+----
+rendering/node/geometry/NodeGeometryManager.ts
+import {
+    BufferGeometry,
+    IcosahedronGeometry,
+    OctahedronGeometry
+} from 'three';
+import { GeometryFactory } from '../../factories/GeometryFactory';
+import { createLogger } from '../../../core/logger';
+
+const logger = createLogger('NodeGeometryManager');
+
+// LOD level definitions
+export enum LODLevel {
+    HIGH = 0,    // < 10 units: Full detail
+    MEDIUM = 1,  // 10-30 units: Medium detail
+    LOW = 2      // > 30 units: Low detail
+}
+
+interface LODThresholds {
+    [LODLevel.HIGH]: number;   // Distance threshold for high detail
+    [LODLevel.MEDIUM]: number; // Distance threshold for medium detail
+    [LODLevel.LOW]: number;    // Distance threshold for low detail
+}
+
+interface GeometryQuality {
+    segments: number;  // Number of segments/detail level
+    radius: number;    // Base size
+}
+
+export class NodeGeometryManager {
+    private static instance: NodeGeometryManager;
+    private geometryCache: Map<LODLevel, BufferGeometry>;
+    private currentLOD: LODLevel = LODLevel.HIGH;
+    
+    private readonly lodThresholds: LODThresholds = {
+        [LODLevel.HIGH]: 10,
+        [LODLevel.MEDIUM]: 30,
+        [LODLevel.LOW]: 50
+    };
+
+    private readonly qualitySettings: Record<LODLevel, GeometryQuality> = {
+        [LODLevel.HIGH]: { segments: 1, radius: 1 },     // 1 subdivision for icosahedron
+        [LODLevel.MEDIUM]: { segments: 0, radius: 1 },   // Basic octahedron
+        [LODLevel.LOW]: { segments: 0, radius: 0.8 }     // Smaller octahedron for distance
+    };
+
+    private constructor() {
+        GeometryFactory.getInstance(); // Initialize factory
+        this.geometryCache = new Map();
+        this.initializeGeometries();
+    }
+
+    public static getInstance(): NodeGeometryManager {
+        if (!NodeGeometryManager.instance) {
+            NodeGeometryManager.instance = new NodeGeometryManager();
+        }
+        return NodeGeometryManager.instance;
+    }
+
+    private initializeGeometries(): void {
+        // Initialize geometries for each LOD level
+        Object.values(LODLevel).forEach((level) => {
+            if (typeof level === 'number') {
+                const quality = this.qualitySettings[level];
+                const geometry = this.createOptimizedGeometry(level, quality);
+                this.geometryCache.set(level, geometry);
+            }
+        });
+        logger.info('Initialized geometries for all LOD levels');
+    }
+
+    private createOptimizedGeometry(level: LODLevel, quality: GeometryQuality): BufferGeometry {
+        // Create geometry based on LOD level
+        let geometry: BufferGeometry;
+
+        switch (level) {
+            case LODLevel.HIGH:
+                // High detail: Icosahedron with 1 subdivision
+                geometry = new IcosahedronGeometry(quality.radius, 1);
+                break;
+
+            case LODLevel.MEDIUM:
+                // Medium detail: Basic octahedron
+                geometry = new OctahedronGeometry(quality.radius);
+                break;
+
+            case LODLevel.LOW:
+                // Low detail: Smaller octahedron
+                geometry = new OctahedronGeometry(quality.radius);
+                break;
+
+            default:
+                logger.warn(`Unknown LOD level: ${level}, falling back to medium quality`);
+                geometry = new OctahedronGeometry(quality.radius);
+        }
+
+        // Compute and adjust bounding sphere for better frustum culling
+        geometry.computeBoundingSphere();
+        if (geometry.boundingSphere) {
+            geometry.boundingSphere.radius *= 1.2;
+        }
+
+        return geometry;
+    }
+
+    public getGeometryForDistance(distance: number): BufferGeometry {
+        // Determine appropriate LOD level based on distance
+        let targetLOD = LODLevel.HIGH;
+
+        if (distance > this.lodThresholds[LODLevel.LOW]) {
+            targetLOD = LODLevel.LOW;
+        } else if (distance > this.lodThresholds[LODLevel.MEDIUM]) {
+            targetLOD = LODLevel.MEDIUM;
+        }
+
+        // Only update if LOD level changed
+        if (targetLOD !== this.currentLOD) {
+            this.currentLOD = targetLOD;
+            logger.debug(`Switching to LOD level ${targetLOD} for distance ${distance}`);
+        }
+
+        return this.geometryCache.get(targetLOD) || this.geometryCache.get(LODLevel.MEDIUM)!;
+    }
+
+    public getCurrentLOD(): LODLevel {
+        return this.currentLOD;
+    }
+
+    public getThresholdForLOD(level: LODLevel): number {
+        return this.lodThresholds[level];
+    }
+
+    public dispose(): void {
+        // Clean up geometries
+        this.geometryCache.forEach(geometry => {
+            geometry.dispose();
+        });
+        this.geometryCache.clear();
+        logger.info('Disposed all geometries');
+    }
+}
+----
+rendering/node/instance/NodeInstanceManager.ts
+import {
+    Scene,
+    InstancedMesh,
+    Matrix4,
+    Vector3,
+    Quaternion,
+    Color,
+    Camera,
+    Material
+} from 'three';
+import { NodeGeometryManager, LODLevel } from '../geometry/NodeGeometryManager';
+import { createLogger } from '../../../core/logger';
+
+const logger = createLogger('NodeInstanceManager');
+
+// Constants for optimization
+const MAX_INSTANCES = 10000;
+const VISIBILITY_UPDATE_INTERVAL = 10; // frames
+
+// Reusable objects for matrix calculations
+const matrix = new Matrix4();
+const position = new Vector3();
+const quaternion = new Quaternion();
+const velocity = new Vector3();
+const scale = new Vector3();
+const BASE_SCALE = 0.01; // Scale factor to convert from units to scene scale
+
+// Visibility states (using setRGB for proper initialization)
+const VISIBLE = new Color(0xffffff);
+const INVISIBLE = new Color(0x000000);
+
+interface NodeUpdateMetadata {
+    nodeSize: number;
+}
+
+interface NodeUpdate {
+    id: string;
+    position: [number, number, number];
+    velocity?: [number, number, number];
+    metadata?: NodeUpdateMetadata;
+}
+
+export class NodeInstanceManager {
+    private static instance: NodeInstanceManager;
+    private scene: Scene;
+    private nodeInstances: InstancedMesh;
+    private geometryManager: NodeGeometryManager;
+    private nodeIndices: Map<string, number> = new Map();
+    private pendingUpdates: Set<number> = new Set();
+    private frameCount: number = 0;
+    private updateScheduled: boolean = false;
+    private velocities: Map<number, Vector3> = new Map();
+    private lastUpdateTime: number = performance.now();
+
+    private constructor(scene: Scene, material: Material) {
+        this.scene = scene;
+        this.geometryManager = NodeGeometryManager.getInstance();
+
+        // Initialize InstancedMesh with high-detail geometry
+        const initialGeometry = this.geometryManager.getGeometryForDistance(0);
+        this.nodeInstances = new InstancedMesh(initialGeometry, material, MAX_INSTANCES);
+        this.nodeInstances.count = 0; // Start with 0 visible instances
+        this.nodeInstances.frustumCulled = true;
+        this.nodeInstances.layers.enable(0); // Enable default layer
+
+        // Add to scene
+        this.scene.add(this.nodeInstances);
+        logger.info('Initialized NodeInstanceManager');
+    }
+
+    public static getInstance(scene: Scene, material: Material): NodeInstanceManager {
+        if (!NodeInstanceManager.instance) {
+            NodeInstanceManager.instance = new NodeInstanceManager(scene, material);
+        }
+        return NodeInstanceManager.instance;
+    }
+
+    public updateNodePositions(updates: NodeUpdate[]): void {
+        updates.forEach(update => {
+            const index = this.nodeIndices.get(update.id);
+            if (index === undefined) {
+                // New node
+                const newIndex = this.nodeInstances.count;
+                if (newIndex < MAX_INSTANCES) {
+                    this.nodeIndices.set(update.id, newIndex);
+                    this.nodeInstances.count++;
+                    
+                    // Set initial position
+                    position.fromArray(update.position);
+                    const nodeScale = update.metadata?.nodeSize || 200;
+                    const scaleValue = nodeScale * BASE_SCALE;
+                    scale.set(scaleValue, scaleValue, scaleValue);
+                    if (update.velocity) {
+                        const vel = new Vector3().fromArray(update.velocity);
+                        this.velocities.set(newIndex, vel);
+                    }
+                    this.nodeInstances.setMatrixAt(newIndex, matrix);
+                    this.nodeInstances.setColorAt(newIndex, VISIBLE);
+                    
+                    this.pendingUpdates.add(newIndex);
+                    logger.debug(`Added new node at index ${newIndex}`);
+                } else {
+                    logger.warn('Maximum instance count reached, cannot add more nodes');
+                }
+                return;
+            }
+
+            // Update existing node
+            position.fromArray(update.position);
+            if (update.velocity) {
+                const vel = new Vector3().fromArray(update.velocity);
+                this.velocities.set(index, vel);
+            }
+            
+            const nodeScale = update.metadata?.nodeSize || 200;
+            const scaleValue = nodeScale * BASE_SCALE;
+            scale.set(scaleValue, scaleValue, scaleValue);
+            matrix.compose(position, quaternion, scale);
+            this.nodeInstances.setMatrixAt(index, matrix);
+            this.pendingUpdates.add(index);
+        });
+
+        if (this.pendingUpdates.size > 0) {
+            this.scheduleBatchUpdate();
+        }
+    }
+
+    private scheduleBatchUpdate(): void {
+        if (this.updateScheduled) return;
+        this.updateScheduled = true;
+
+        requestAnimationFrame(() => {
+            this.processBatchUpdate();
+            this.updateScheduled = false;
+
+            if (this.pendingUpdates.size > 0) {
+                this.scheduleBatchUpdate();
+            }
+        });
+    }
+
+    private processBatchUpdate(): void {
+        if (this.pendingUpdates.size > 0) {
+            // Update all pending changes
+            this.nodeInstances.instanceMatrix.needsUpdate = true;
+            if (this.nodeInstances.instanceColor) {
+                this.nodeInstances.instanceColor.needsUpdate = true;
+            }
+            this.pendingUpdates.clear(); // Clear all pending updates
+        }
+    }
+
+    public update(camera: Camera, passedDeltaTime?: number): void {
+        this.frameCount++;
+        
+        // Update positions based on velocity
+        const currentTime = performance.now();
+        const deltaTime = passedDeltaTime !== undefined ? 
+            passedDeltaTime : 
+            (currentTime - this.lastUpdateTime) / 1000; // Convert to seconds
+        this.lastUpdateTime = currentTime;
+
+        // Update positions based on velocities
+        this.velocities.forEach((nodeVelocity, index) => {
+            if (nodeVelocity.lengthSq() > 0) {
+                this.nodeInstances.getMatrixAt(index, matrix);
+                position.setFromMatrixPosition(matrix);
+                
+                // Apply velocity
+                velocity.copy(nodeVelocity).multiplyScalar(deltaTime);
+                position.add(velocity);
+                
+                // Update matrix
+                matrix.compose(position, quaternion, scale);
+                this.nodeInstances.setMatrixAt(index, matrix);
+                this.pendingUpdates.add(index);
+            }
+        });
+
+        // Update visibility and LOD every N frames
+        if (this.frameCount % VISIBILITY_UPDATE_INTERVAL === 0) {
+            this.updateVisibilityAndLOD(camera);
+        }
+    }
+
+    private updateVisibilityAndLOD(camera: Camera): void {
+        const cameraPosition = camera.position;
+        
+        // Check each instance
+        for (let i = 0; i < this.nodeInstances.count; i++) {
+            this.nodeInstances.getMatrixAt(i, matrix);
+            position.setFromMatrixPosition(matrix);
+            
+            const distance = position.distanceTo(cameraPosition);
+            
+            // Update geometry based on distance
+            void this.geometryManager.getGeometryForDistance(distance); // Keep LOD calculation for future use
+
+            // Update visibility
+            const visible = distance < this.geometryManager.getThresholdForLOD(LODLevel.LOW);
+            this.nodeInstances.setColorAt(i, visible ? VISIBLE : INVISIBLE);
+        }
+
+        // Ensure updates are applied
+        if (this.nodeInstances.instanceColor) {
+            this.nodeInstances.instanceColor.needsUpdate = true;
+        }
+    }
+
+    public dispose(): void {
+        if (this.nodeInstances) {
+            this.nodeInstances.geometry.dispose();
+            this.scene.remove(this.nodeInstances);
+        }
+        this.nodeIndices.clear();
+        this.pendingUpdates.clear();
+        this.velocities.clear();
+        // Reset the singleton instance
+        NodeInstanceManager.instance = null!;
+        logger.info('Disposed NodeInstanceManager');
+    }
+
+    public getInstanceMesh(): InstancedMesh {
+        return this.nodeInstances;
+    }
+
+    /**
+     * Get node ID from instance index
+     * @param index Instance index in the InstancedMesh
+     * @returns Node ID or undefined if not found
+     */
+    public getNodeId(index: number): string | undefined {
+        // Find the node ID that maps to this index
+        return Array.from(this.nodeIndices.entries()).find(([_, idx]) => idx === index)?.[0];
+    }
+
+    /**
+     * Get current position of a node by its ID
+     * @param nodeId The ID of the node
+     * @returns Vector3 position or undefined if node not found
+     */
+    public getNodePosition(nodeId: string): Vector3 | undefined {
+        const index = this.nodeIndices.get(nodeId);
+        if (index !== undefined) {
+            this.nodeInstances.getMatrixAt(index, matrix);
+            const position = new Vector3();
+            position.setFromMatrixPosition(matrix);
+            return position;
+        }
+        return undefined;
+    }
+}
+----
+rendering/node/interaction/NodeInteractionManager.ts
+import {
+    InstancedMesh,
+    Vector3,
+    Matrix4,
+} from 'three';
+import { XRHandWithHaptics, HapticActuator } from '../../../types/xr';
+import { createLogger } from '../../../core/logger';
+
+const logger = createLogger('NodeInteractionManager');
+
+export class NodeInteractionManager {
+    private static instance: NodeInteractionManager;
+    private instanceMesh: InstancedMesh;
+    private tempMatrix: Matrix4 = new Matrix4();
+    private readonly interactionRadius: number = 0.1; // 10cm interaction radius
+    private readonly HAPTIC_STRENGTH = 0.5; // 50% intensity
+    private hapticActuators: HapticActuator[] | null = null;
+    
+    private constructor(instanceMesh: InstancedMesh) {
+        this.instanceMesh = instanceMesh;
+    }
+
+    public static getInstance(instanceMesh: InstancedMesh): NodeInteractionManager {
+        if (!NodeInteractionManager.instance) {
+            NodeInteractionManager.instance = new NodeInteractionManager(instanceMesh);
+        }
+        return NodeInteractionManager.instance;
+    }
+
+    /**
+     * Handle XR hand interaction
+     * @param hand XR hand data with haptic feedback
+     */
+    public handleHandInteraction(hand: XRHandWithHaptics): void {
+        if (!this.instanceMesh) return;
+
+        // Store haptic feedback actuator for later use
+        if (hand.hapticActuators && !this.hapticActuators) {
+            this.hapticActuators = hand.hapticActuators;
+        }
+
+        // Get hand joint positions
+        const indexTip = hand.hand.joints['index-finger-tip'];
+        if (!indexTip) return;
+
+        // Check for node intersection
+        const intersectedIndex = this.getIntersectedNodeIndex(indexTip.position);
+        if (intersectedIndex !== -1) {
+            this.handleNodeHover(intersectedIndex);
+        }
+    }
+
+    /**
+     * Get the index of the node closest to the given position
+     * @param position Position to check
+     * @returns Instance index of the closest node, or -1 if none found
+     */
+    public getIntersectedNodeIndex(position: Vector3): number {
+        if (!this.instanceMesh) return -1;
+
+        let closestIndex = -1;
+        let closestDistance = this.interactionRadius;
+
+        // Check each instance
+        for (let i = 0; i < this.instanceMesh.count; i++) {
+            // Get instance matrix
+            this.instanceMesh.getMatrixAt(i, this.tempMatrix);
+            const instancePosition = new Vector3().setFromMatrixPosition(this.tempMatrix);
+
+            // Check distance
+            const distance = position.distanceTo(instancePosition);
+            if (distance < closestDistance) {
+                closestDistance = distance;
+                closestIndex = i;
+            }
+        }
+
+        return closestIndex;
+    }
+
+    private handleNodeHover(_instanceIndex: number): void {
+        // Trigger haptic feedback if available
+        if (this.hapticActuators?.[0]) {
+            this.hapticActuators[0].pulse(this.HAPTIC_STRENGTH, 50).catch(logger.error);
+        }
+    }
+
+    public dispose(): void {
+        this.hapticActuators = null;
+        NodeInteractionManager.instance = null!;
+        logger.info('NodeInteractionManager disposed');
+    }
+}
+----
+rendering/node/metadata/NodeMetadataManager.ts
+import {
+    Object3D,
+    Camera,
+    Vector3,
+    Sprite,
+    SpriteMaterial,
+    Texture
+} from 'three';
+import { NodeMetadata } from '../../../types/metadata';
+import { createLogger } from '../../../core/logger';
+
+const logger = createLogger('NodeMetadataManager');
+
+interface MetadataLabel {
+    sprite: Sprite;
+    metadata: NodeMetadata;
+    lastUpdateDistance: number;
+}
+
+export class NodeMetadataManager {
+    private static instance: NodeMetadataManager;
+    private labels: Map<string, MetadataLabel> = new Map();
+    private readonly VISIBILITY_THRESHOLD = 50;  // Maximum distance for label visibility
+    private readonly UPDATE_INTERVAL = 5;        // Frames between visibility updates
+    private readonly LABEL_SCALE = 0.5;         // Base scale for labels
+    private frameCount = 0;
+
+    // Reusable objects
+    private tempVector = new Vector3();
+    private labelCanvas: HTMLCanvasElement;
+    private labelContext: CanvasRenderingContext2D;
+
+    private constructor() {
+        // Create canvas for label textures
+        this.labelCanvas = document.createElement('canvas');
+        this.labelCanvas.width = 256;
+        this.labelCanvas.height = 128;
+        
+        const context = this.labelCanvas.getContext('2d');
+        if (!context) {
+            throw new Error('Failed to get 2D context for label canvas');
+        }
+        this.labelContext = context;
+        
+        // Set up default text style
+        this.labelContext.textAlign = 'center';
+        this.labelContext.textBaseline = 'middle';
+        this.labelContext.font = 'bold 24px Arial';
+    }
+
+    public static getInstance(): NodeMetadataManager {
+        if (!NodeMetadataManager.instance) {
+            NodeMetadataManager.instance = new NodeMetadataManager();
+        }
+        return NodeMetadataManager.instance;
+    }
+
+    private createLabelTexture(metadata: NodeMetadata): Texture {
+        // Clear canvas
+        this.labelContext.clearRect(0, 0, this.labelCanvas.width, this.labelCanvas.height);
+
+        // Draw background
+        this.labelContext.fillStyle = 'rgba(0, 0, 0, 0.5)';
+        this.labelContext.fillRect(0, 0, this.labelCanvas.width, this.labelCanvas.height);
+
+        // Draw text
+        this.labelContext.fillStyle = 'white';
+        this.labelContext.fillText(
+            metadata.name || 'Unknown',
+            this.labelCanvas.width / 2,
+            this.labelCanvas.height / 2
+        );
+
+        // Create texture
+        const texture = new Texture(this.labelCanvas);
+        texture.needsUpdate = true;
+        return texture;
+    }
+
+    public async createMetadataLabel(metadata: NodeMetadata): Promise<Object3D> {
+        const texture = this.createLabelTexture(metadata);
+        const material = new SpriteMaterial({
+            map: texture,
+            color: 0xffffff,
+            transparent: true,
+            opacity: 0.8
+        });
+
+        const sprite = new Sprite(material);
+        sprite.scale.set(this.LABEL_SCALE, this.LABEL_SCALE * 0.5, 1);
+        sprite.position.y = 1.5; // Position above node
+
+        const label: MetadataLabel = {
+            sprite,
+            metadata,
+            lastUpdateDistance: Infinity
+        };
+
+        this.labels.set(metadata.id, label);
+        return sprite;
+    }
+
+    public update(camera: Camera): void {
+        this.frameCount++;
+        if (this.frameCount % this.UPDATE_INTERVAL !== 0) return;
+
+        const cameraPosition = camera.position;
+
+        this.labels.forEach((label) => {
+            const { sprite, metadata } = label;
+            
+            // Calculate distance to camera
+            this.tempVector.set(
+                metadata.position.x,
+                metadata.position.y,
+                metadata.position.z
+            );
+            const distance = this.tempVector.distanceTo(cameraPosition);
+
+            // Update visibility based on distance
+            const visible = distance < this.VISIBILITY_THRESHOLD;
+            sprite.visible = visible;
+
+            if (visible) {
+                // Scale based on distance
+                const scale = Math.max(0.3, 1 - (distance / this.VISIBILITY_THRESHOLD));
+                sprite.scale.set(
+                    this.LABEL_SCALE * scale,
+                    this.LABEL_SCALE * scale * 0.5,
+                    1
+                );
+
+                // Make sprite face camera
+                sprite.lookAt(cameraPosition);
+            }
+
+            // Update last known distance
+            label.lastUpdateDistance = distance;
+        });
+    }
+
+    public updateMetadata(id: string, metadata: NodeMetadata): void {
+        const label = this.labels.get(id);
+        if (!label) return;
+
+        // Update metadata
+        label.metadata = metadata;
+
+        // Update texture
+        const texture = this.createLabelTexture(metadata);
+        (label.sprite.material as SpriteMaterial).map?.dispose();
+        (label.sprite.material as SpriteMaterial).map = texture;
+    }
+
+    public removeLabel(id: string): void {
+        const label = this.labels.get(id);
+        if (!label) return;
+
+        // Clean up resources
+        (label.sprite.material as SpriteMaterial).map?.dispose();
+        label.sprite.material.dispose();
+        
+        // Remove from tracking
+        this.labels.delete(id);
+    }
+
+    public dispose(): void {
+        // Clean up all labels
+        this.labels.forEach((label) => {
+            (label.sprite.material as SpriteMaterial).map?.dispose();
+            label.sprite.material.dispose();
+        });
+        this.labels.clear();
+
+        // Reset singleton
+        NodeMetadataManager.instance = null!;
+        logger.info('Disposed NodeMetadataManager');
+    }
+}
+----
+settings/index.ts
+export enum SettingVisibility {
+    Basic = 'basic',
+    Advanced = 'advanced',
+    Debug = 'debug',
+    Hidden = 'hidden'
+}
+----
+state/SettingsObserver.ts
+import { SettingsStore } from './SettingsStore';
+import { VisualizationController } from '../rendering/VisualizationController';
+import { createLogger } from '../core/logger';
+
+const logger = createLogger('SettingsObserver');
+
+type SettingsCallback = (path: string, value: any) => void;
+
+export class SettingsObserver {
+    private static instance: SettingsObserver | null = null;
+    private settingsStore: SettingsStore;
+    private visualizationController: VisualizationController;
+    private callbacks: Map<string, Set<SettingsCallback>>;
+    private updateTimeout: number | null = null;
+    private readonly UPDATE_DELAY = 16; // ~60fps
+
+    private constructor() {
+        this.settingsStore = SettingsStore.getInstance();
+        this.visualizationController = VisualizationController.getInstance();
+        this.callbacks = new Map();
+        this.initializeObserver();
+    }
+
+    public static getInstance(): SettingsObserver {
+        if (!SettingsObserver.instance) {
+            SettingsObserver.instance = new SettingsObserver();
+        }
+        return SettingsObserver.instance;
+    }
+
+    private async initializeObserver(): Promise<void> {
+        try {
+            await this.settingsStore.initialize();
+            this.subscribeToSettings();
+            logger.info('Settings observer initialized');
+        } catch (error) {
+            logger.error('Failed to initialize settings observer:', error);
+        }
+    }
+
+    private subscribeToSettings(): void {
+        // Subscribe to all visualization settings
+        this.settingsStore.subscribe('visualization', (path, value) => {
+            this.handleVisualizationUpdate(path, value);
+        });
+
+        // Subscribe to physics settings
+        this.settingsStore.subscribe('physics', (path, value) => {
+            this.handlePhysicsUpdate(path, value);
+        });
+
+        // Subscribe to rendering settings
+        this.settingsStore.subscribe('rendering', (path, value) => {
+            this.handleRenderingUpdate(path, value);
+        });
+
+        // Subscribe to XR settings
+        this.settingsStore.subscribe('xr', (path, value) => {
+            this.handleXRUpdate(path, value);
+        });
+    }
+
+    private handleVisualizationUpdate(path: string, value: any): void {
+        this.debounceUpdate(() => {
+            this.visualizationController.updateSetting(path, value);
+            this.notifyCallbacks(path, value);
+        });
+    }
+
+    private handlePhysicsUpdate(path: string, value: any): void {
+        this.debounceUpdate(() => {
+            this.visualizationController.updateSetting(path, value);
+            this.notifyCallbacks(path, value);
+        });
+    }
+
+    private handleRenderingUpdate(path: string, value: any): void {
+        this.debounceUpdate(() => {
+            this.visualizationController.updateSetting(path, value);
+            this.notifyCallbacks(path, value);
+        });
+    }
+
+    private handleXRUpdate(path: string, value: any): void {
+        // XR updates should be immediate
+        this.visualizationController.updateSetting(path, value);
+        this.notifyCallbacks(path, value);
+    }
+
+    private debounceUpdate(callback: () => void): void {
+        if (this.updateTimeout !== null) {
+            window.clearTimeout(this.updateTimeout);
+        }
+        this.updateTimeout = window.setTimeout(() => {
+            callback();
+            this.updateTimeout = null;
+        }, this.UPDATE_DELAY);
+    }
+
+    public subscribe(path: string, callback: SettingsCallback): () => void {
+        if (!this.callbacks.has(path)) {
+            this.callbacks.set(path, new Set());
+        }
+
+        const callbacks = this.callbacks.get(path)!;
+        callbacks.add(callback);
+
+        // Immediately call with current value
+        const currentValue = this.settingsStore.get(path);
+        if (currentValue !== undefined) {
+            callback(path, currentValue);
+        }
+
+        // Return unsubscribe function
+        return () => {
+            const callbacks = this.callbacks.get(path);
+            if (callbacks) {
+                callbacks.delete(callback);
+                if (callbacks.size === 0) {
+                    this.callbacks.delete(path);
+                }
+            }
+        };
+    }
+
+    private notifyCallbacks(path: string, value: any): void {
+        // Notify callbacks for exact path match
+        const exactCallbacks = this.callbacks.get(path);
+        if (exactCallbacks) {
+            exactCallbacks.forEach(callback => {
+                try {
+                    callback(path, value);
+                } catch (error) {
+                    logger.error(`Error in settings callback for ${path}:`, error);
+                }
+            });
+        }
+
+        // Notify callbacks for parent paths
+        const parts = path.split('.');
+        while (parts.length > 1) {
+            parts.pop();
+            const parentPath = parts.join('.');
+            const parentCallbacks = this.callbacks.get(parentPath);
+            if (parentCallbacks) {
+                parentCallbacks.forEach(callback => {
+                    try {
+                        callback(path, value);
+                    } catch (error) {
+                        logger.error(`Error in settings callback for ${parentPath}:`, error);
+                    }
+                });
+            }
+        }
+    }
+
+    public dispose(): void {
+        if (this.updateTimeout !== null) {
+            window.clearTimeout(this.updateTimeout);
+        }
+        this.callbacks.clear();
+        SettingsObserver.instance = null;
+    }
+}
+
+----
+state/SettingsStore.ts
+import { Settings } from '../types/settings/base';
+import { createLogger } from '../core/logger';
+import { defaultSettings } from './defaultSettings';
+import { buildApiUrl } from '../core/api';
+import { API_ENDPOINTS } from '../core/constants';
+import { Logger, LoggerConfig } from '../core/logger';
+import { validateSettings, validateSettingValue, ValidationError } from '../types/settings/validation';
+import { convertObjectKeysToSnakeCase, convertObjectKeysToCamelCase } from '../core/utils';
+
+const logger = createLogger('SettingsStore');
+
+export type SettingsChangeCallback = (path: string, value: unknown) => void;
+export type ValidationErrorCallback = (errors: ValidationError[]) => void;
+
+export class SettingsStore {
+    private static instance: SettingsStore | null = null;
+    private settings: Settings;
+    private initialized: boolean = false;
+    private initializationPromise: Promise<void> | null = null;
+    private subscribers: Map<string, SettingsChangeCallback[]> = new Map();
+    private validationSubscribers: ValidationErrorCallback[] = [];
+    private logger: Logger;
+    private retryCount: number = 0;
+    private readonly MAX_RETRIES: number = 3;
+    private readonly RETRY_DELAY: number = 1000;
+    private settingsOrigin: 'server' | 'default' = 'default';
+
+    private constructor() {
+        this.settings = { ...defaultSettings };
+        this.subscribers = new Map();
+        this.logger = createLogger('SettingsStore');
+    }
+
+    public static getInstance(): SettingsStore {
+        if (!SettingsStore.instance) {
+            SettingsStore.instance = new SettingsStore();
+        }
+        return SettingsStore.instance;
+    }
+
+    public async initialize(): Promise<void> {
+        if (this.initialized) {
+            return Promise.resolve();
+        }
+        if (this.initializationPromise) {
+            return this.initializationPromise;
+        }
+
+        this.initializationPromise = (async () => {
+            try {
+                // Try to fetch settings from server first
+                try {
+                    logger.info('Fetching settings from:', buildApiUrl(API_ENDPOINTS.SETTINGS_ROOT));
+                    const response = await fetch(buildApiUrl(API_ENDPOINTS.SETTINGS_ROOT));
+                    logger.info('Server response status:', response.status);
+                    
+                    if (response.ok) {
+                        const serverSettings = await response.json();
+                        logger.info('Received server settings:', serverSettings);
+                        
+                        // Convert snake_case to camelCase
+                        const camelCaseSettings = convertObjectKeysToCamelCase(serverSettings);
+                        
+                        // Validate server settings
+                        const serverValidation = validateSettings(camelCaseSettings);
+                        if (!serverValidation.isValid) {
+                            throw new Error(`Invalid server settings: ${JSON.stringify(serverValidation.errors)}`);
+                        }
+                        
+                        // Use server settings as base, filling in any missing fields with defaults
+                        this.settings = this.deepMerge({ ...defaultSettings }, camelCaseSettings);
+                        this.settingsOrigin = 'server';
+                        
+                        // Initialize logger configuration from settings
+                        if (this.settings.system?.debug) {
+                            LoggerConfig.setGlobalDebug(this.settings.system.debug.enabled);
+                            LoggerConfig.setFullJson(this.settings.system.debug.logFullJson);
+                        }
+                        logger.info('Using server settings with defaults as fallback');
+                    } else {
+                        const errorText = await response.text();
+                        logger.error('Response text:', await response.text());
+                        throw new Error(`Failed to fetch server settings: ${response.statusText}. Details: ${errorText}`);
+                    }
+                } catch (error) {
+                    // If server settings fail, fall back to defaults
+                    if (error instanceof Error) {
+                        logger.error('Full error:', error);
+                    }
+                    logger.warn('Error loading server settings, falling back to defaults:', error);
+                    this.settings = { ...defaultSettings };
+                    
+                    // Initialize logger with default settings
+                    if (this.settings.system?.debug) {
+                        LoggerConfig.setGlobalDebug(this.settings.system.debug.enabled);
+                        LoggerConfig.setFullJson(this.settings.system.debug.logFullJson);
+                    }
+                    this.settingsOrigin = 'default';
+                    
+                    // Validate default settings
+                    const validationResult = validateSettings(this.settings);
+                    if (!validationResult.isValid) {
+                        this.logger.error('Default settings validation failed:', validationResult.errors);
+                        this.notifyValidationErrors(validationResult.errors);
+                    }
+                    
+                    logger.info('Using default settings:', this.settings);
+                }
+
+                this.initialized = true;
+                logger.info('SettingsStore initialized with origin:', this.settingsOrigin);
+            } catch (error) {
+                logger.error('Critical initialization failure:', error);
+                // Last resort: use defaults without validation
+                this.settings = { ...defaultSettings };
+                this.settingsOrigin = 'default';
+                this.initialized = true;
+            }
+        })();
+
+        return this.initializationPromise;
+    }
+
+    public isInitialized(): boolean {
+        return this.initialized;
+    }
+
+    public get(path: string): unknown {
+        if (!this.initialized) {
+            logger.warn('Attempting to access settings before initialization');
+            return undefined;
+        }
+        
+        if (!path) {
+            return this.settings;
+        }
+        
+        try {
+            return path.split('.').reduce((obj: any, key) => {
+                if (obj === null || obj === undefined) {
+                    throw new Error(`Invalid path: ${path}`);
+                }
+                return obj[key];
+            }, this.settings);
+        } catch (error) {
+            logger.error(`Error accessing setting at path ${path}:`, error);
+            return undefined;
+        }
+    }
+
+    public subscribeToValidationErrors(callback: ValidationErrorCallback): () => void {
+        this.validationSubscribers.push(callback);
+        return () => {
+            const index = this.validationSubscribers.indexOf(callback);
+            if (index > -1) {
+                this.validationSubscribers.splice(index, 1);
+            }
+        };
+    }
+
+    public async subscribe(path: string, callback: SettingsChangeCallback, immediate: boolean = false): Promise<() => void> {
+        if (!this.initialized) {
+            await this.initialize();
+        }
+
+        if (!this.subscribers.has(path)) {
+            this.subscribers.set(path, []);
+        }
+        
+        const subscribers = this.subscribers.get(path);
+        if (subscribers) {
+            subscribers.push(callback);
+        }
+
+        // Only call callback immediately if explicitly requested
+        if (immediate) {
+            const value = this.get(path);
+            if (value !== undefined) {
+                callback(path, value);
+            }
+        }
+
+        return () => {
+            const pathSubscribers = this.subscribers.get(path);
+            if (pathSubscribers) {
+                const index = pathSubscribers.indexOf(callback);
+                if (index > -1) {
+                    pathSubscribers.splice(index, 1);
+                }
+                if (pathSubscribers.length === 0) {
+                    this.subscribers.delete(path);
+                }
+            }
+        };
+    }
+
+    public async set(path: string, value: unknown): Promise<void> {
+        try {
+            // Validate the specific setting change
+            // Update logger config if debug settings change
+            if (path.startsWith('system.debug')) {
+                if (path === 'system.debug.enabled') {
+                    LoggerConfig.setGlobalDebug(value as boolean);
+                } else if (path === 'system.debug.logFullJson') {
+                    LoggerConfig.setFullJson(value as boolean);
+                }
+            }
+            const validationErrors = validateSettingValue(path, value, this.settings);
+            if (validationErrors.length > 0) {
+                this.notifyValidationErrors(validationErrors);
+                throw new Error(`Validation failed: ${JSON.stringify(validationErrors)}`);
+            }
+            
+            // Create a copy of settings for rollback
+            const previousSettings = JSON.parse(JSON.stringify(this.settings));
+            const previousOrigin = this.settingsOrigin;
+            
+            // Update local state
+            this.updateSettingValue(path, value);
+            // Mark as modified from default since this is a user action
+            this.settingsOrigin = 'default';
+            
+            // Validate entire settings object after update
+            const fullValidation = validateSettings(this.settings);
+            if (!fullValidation.isValid) {
+                // Rollback and notify of validation errors
+                this.settings = previousSettings;
+                this.settingsOrigin = previousOrigin;
+                this.notifyValidationErrors(fullValidation.errors);
+                throw new Error(`Full validation failed: ${JSON.stringify(fullValidation.errors)}`);
+            }
+            
+            // Sync with server (not an initial sync)
+            try {
+                await this.syncWithServer(false);
+            } catch (error) {
+                // Rollback on server sync failure
+                this.settings = previousSettings;
+                this.settingsOrigin = previousOrigin;
+                this.notifySubscribers(path, this.get(path));
+                throw error;
+            }
+            
+            // Notify subscribers of successful update
+            this.notifySubscribers(path, value);
+            
+            this.logger.debug(`Setting updated successfully: ${path}`, {
+                value,
+                origin: this.settingsOrigin
+            });
+        } catch (error) {
+            this.logger.error(`Failed to update setting: ${path}`, error);
+            throw error;
+        }
+    }
+
+    public isFromServer(): boolean {
+        return this.settingsOrigin === 'server';
+    }
+
+    private prepareSettingsForSync(settings: Settings): any {
+        // Create a copy of settings
+        const preparedSettings = JSON.parse(JSON.stringify(settings));
+
+        // Ensure required sections exist
+        if (!preparedSettings.system) preparedSettings.system = {};
+        if (!preparedSettings.system.debug) preparedSettings.system.debug = {};
+        if (!preparedSettings.xr) preparedSettings.xr = {};
+
+        // Always include all required debug fields
+        preparedSettings.system.debug = {
+            enabled: preparedSettings.system.debug.enabled ?? false,
+            enableDataDebug: preparedSettings.system.debug.enableDataDebug ?? false,
+            enableWebsocketDebug: preparedSettings.system.debug.enableWebsocketDebug ?? false,
+            logBinaryHeaders: preparedSettings.system.debug.logBinaryHeaders ?? false,
+            logFullJson: preparedSettings.system.debug.logFullJson ?? false,
+            logLevel: preparedSettings.system.debug.logLevel ?? 'info',
+            logFormat: preparedSettings.system.debug.logFormat ?? 'json'
+        };
+
+        // Always include required XR fields
+        const defaultXR = defaultSettings.xr;
+        preparedSettings.xr = {
+            ...preparedSettings.xr,
+            gestureSmoothing: preparedSettings.xr.gestureSmoothing ?? defaultXR.gestureSmoothing,
+            mode: preparedSettings.xr.mode ?? defaultXR.mode,
+            roomScale: preparedSettings.xr.roomScale ?? defaultXR.roomScale,
+            spaceType: preparedSettings.xr.spaceType ?? defaultXR.spaceType,
+            quality: preparedSettings.xr.quality ?? defaultXR.quality,
+            enableHandTracking: preparedSettings.xr.enableHandTracking ?? defaultXR.enableHandTracking,
+            handMeshEnabled: preparedSettings.xr.handMeshEnabled ?? defaultXR.handMeshEnabled,
+            handMeshColor: preparedSettings.xr.handMeshColor ?? defaultXR.handMeshColor,
+            handMeshOpacity: preparedSettings.xr.handMeshOpacity ?? defaultXR.handMeshOpacity,
+            handPointSize: preparedSettings.xr.handPointSize ?? defaultXR.handPointSize,
+            handRayEnabled: preparedSettings.xr.handRayEnabled ?? defaultXR.handRayEnabled,
+            handRayColor: preparedSettings.xr.handRayColor ?? defaultXR.handRayColor,
+            handRayWidth: preparedSettings.xr.handRayWidth ?? defaultXR.handRayWidth,
+            movementAxes: preparedSettings.xr.movementAxes ?? defaultXR.movementAxes
+        };
+
+        // Convert to snake_case for server
+        return convertObjectKeysToSnakeCase(preparedSettings);
+    }
+
+    private async syncWithServer(isInitialSync: boolean = false): Promise<void> {
+        // Don't sync to server during initialization if we got settings from server
+        if (isInitialSync && this.settingsOrigin === 'server') {
+            this.logger.debug('Skipping initial sync as settings came from server');
+            return;
+        }
+
+        try {
+            // Prepare settings for server sync
+            const serverSettings = this.prepareSettingsForSync(this.settings);
+            
+            this.logger.debug('Sending settings to server:', {
+                origin: this.settingsOrigin,
+                isInitialSync,
+                debug: serverSettings.system?.debug
+            });
+            
+            const response = await fetch(buildApiUrl(API_ENDPOINTS.SETTINGS_ROOT), {
+                method: 'POST',
+                headers: {
+                    'Content-Type': 'application/json',
+                },
+                body: JSON.stringify(serverSettings)
+            });
+            
+            if (!response.ok) {
+                const errorText = await response.text();
+                this.logger.error('Server sync failed:', {
+                    status: response.status,
+                    error: errorText,
+                    sentSettings: serverSettings.system?.debug
+                });
+                throw new Error(`Server returned ${response.status}: ${errorText}`);
+            }
+            
+            // Convert server response back to camelCase
+            const responseData = await response.json();
+            const camelCaseSettings = convertObjectKeysToCamelCase(responseData);
+            
+            this.logger.debug('Received settings from server:', {
+                debug: camelCaseSettings.system?.debug
+            });
+            
+            // Validate server response
+            const validationResult = validateSettings(camelCaseSettings);
+            if (!validationResult.isValid) {
+                this.logger.error('Settings validation failed:', {
+                    errors: validationResult.errors,
+                    receivedSettings: camelCaseSettings.system?.debug
+                });
+                throw new Error(`Invalid server response: ${JSON.stringify(validationResult.errors)}`);
+            }
+            
+            this.settings = this.deepMerge(this.settings, camelCaseSettings);
+            this.logger.debug('Settings synced successfully:', {
+                finalDebug: this.settings.system?.debug
+            });
+        } catch (error) {
+            this.logger.error('Failed to sync settings with server:', error);
+            if (this.retryCount < this.MAX_RETRIES) {
+                this.retryCount++;
+                this.logger.info(`Retrying sync (attempt ${this.retryCount}/${this.MAX_RETRIES})...`);
+                await new Promise(resolve => setTimeout(resolve, this.RETRY_DELAY));
+                return this.syncWithServer();
+            }
+            throw error;
+        }
+    }
+
+    private notifyValidationErrors(errors: ValidationError[]): void {
+        this.validationSubscribers.forEach(callback => {
+            try {
+                callback(errors);
+            } catch (error) {
+                this.logger.error('Error in validation subscriber:', error);
+            }
+        });
+    }
+
+    private notifySubscribers(path: string, value: unknown): void {
+        const subscribers = this.subscribers.get(path);
+        if (subscribers) {
+            let scheduledCallbacks = new Set<SettingsChangeCallback>();
+            
+            subscribers.forEach(callback => {
+                try {
+                    if (!scheduledCallbacks.has(callback)) {
+                        scheduledCallbacks.add(callback);
+                        window.requestAnimationFrame(() => {
+                            if (scheduledCallbacks.has(callback)) {
+                                callback(path, value);
+                            }
+                        });
+                    }
+                } catch (error) {
+                    this.logger.error(`Error scheduling settings notification for ${path}:`, error);
+                }
+            });
+        }
+    }
+
+    private deepMerge(target: any, source: any): any {
+        const result = { ...target };
+        
+        // Handle arrays
+        if (Array.isArray(source)) {
+            return [...source];
+        }
+        
+        if (source && typeof source === 'object') {
+            Object.keys(source).forEach(key => {
+                if (source[key] instanceof Object && !Array.isArray(source[key])) {
+                    result[key] = this.deepMerge(result[key] || {}, source[key]);
+                } else {
+                    result[key] = source[key];
+                }
+            });
+        }
+        
+        return result;
+    }
+
+   private updateSettingValue(path: string, value: unknown): void {
+        if (!path) {
+            throw new Error('Setting path cannot be empty');
+        }
+
+        const parts = path.split('.');
+        const section = parts[0];
+        const lastKey = parts.pop()!;
+
+        // Create a new settings object with the updated value
+        this.settings = this.deepUpdate(this.settings, parts, lastKey, value);
+
+        // If this is an XR setting, ensure all required fields are present
+        if (section === 'xr') {
+            const currentXR = this.settings.xr;
+            const defaultXR = defaultSettings.xr;
+
+            // Ensure all required XR fields are present with defaults
+            this.settings.xr = {
+                ...currentXR,
+                mode: currentXR.mode ?? defaultXR.mode,
+                roomScale: currentXR.roomScale ?? defaultXR.roomScale,
+                spaceType: currentXR.spaceType ?? defaultXR.spaceType,
+                quality: currentXR.quality ?? defaultXR.quality,
+                gestureSmoothing: currentXR.gestureSmoothing ?? defaultXR.gestureSmoothing,
+                enableHandTracking: currentXR.enableHandTracking ?? defaultXR.enableHandTracking,
+                handMeshEnabled: currentXR.handMeshEnabled ?? defaultXR.handMeshEnabled,
+                handMeshColor: currentXR.handMeshColor ?? defaultXR.handMeshColor,
+                handMeshOpacity: currentXR.handMeshOpacity ?? defaultXR.handMeshOpacity,
+                handPointSize: currentXR.handPointSize ?? defaultXR.handPointSize,
+                handRayEnabled: currentXR.handRayEnabled ?? defaultXR.handRayEnabled,
+                handRayColor: currentXR.handRayColor ?? defaultXR.handRayColor,
+                handRayWidth: currentXR.handRayWidth ?? defaultXR.handRayWidth,
+                movementAxes: currentXR.movementAxes ?? defaultXR.movementAxes
+            };
+        }
+    }
+
+    private deepUpdate(obj: any, path: string[], lastKey: string, value: unknown): any {
+        if (path.length === 0) {
+            return { ...obj, [lastKey]: value };
+        }
+
+        const key = path.shift()!;
+        return {
+            ...obj,
+            [key]: this.deepUpdate(obj[key] || {}, path, lastKey, value)
+        };
+    }
+
+    public dispose(): void {
+        this.subscribers.clear();
+        this.validationSubscribers = [];
+        this.settings = { ...defaultSettings };
+        SettingsStore.instance = null;
+    }
+}
+
+----
+state/graphData.ts
+import { transformGraphData, Node, Edge, GraphData } from '../core/types';
+import { createLogger } from '../core/utils';
+import { API_ENDPOINTS } from '../core/constants';
+
+const logger = createLogger('GraphDataManager');
+
+// Constants
+const FLOATS_PER_NODE = 6;     // x, y, z, vx, vy, vz
+
+interface WebSocketService {
+  send(data: ArrayBuffer): void;
+}
+
+// Extend Edge interface to include id
+interface EdgeWithId extends Edge {
+  id: string;
+}
+
+export class GraphDataManager {
+  private static instance: GraphDataManager;
+  private nodes: Map<string, Node>;
+  private edges: Map<string, EdgeWithId>;
+  private wsService!: WebSocketService;  // Use definite assignment assertion
+  private metadata: Record<string, any>;
+  private updateListeners: Set<(data: GraphData) => void>;
+  private positionUpdateListeners: Set<(positions: Float32Array) => void>;
+  private binaryUpdatesEnabled: boolean = false;
+
+  private constructor() {
+    this.nodes = new Map();
+    this.edges = new Map();
+    this.metadata = {};
+    this.updateListeners = new Set();
+    this.positionUpdateListeners = new Set();
+    // Initialize with a no-op websocket service
+    this.wsService = {
+      send: () => logger.warn('WebSocket service not configured')
+    };
+    this.enableBinaryUpdates();  // Start binary updates by default
+  }
+
+  /**
+   * Configure the WebSocket service for binary updates
+   */
+  public setWebSocketService(service: WebSocketService): void {
+    this.wsService = service;
+    logger.info('WebSocket service configured');
+    if (this.binaryUpdatesEnabled) {
+      this.updatePositions(new Float32Array());  // Send initial empty update
+    }
+  }
+
+  static getInstance(): GraphDataManager {
+    if (!GraphDataManager.instance) {
+      GraphDataManager.instance = new GraphDataManager();
+    }
+    return GraphDataManager.instance;
+  }
+
+  public async fetchInitialData(): Promise<void> {
+    try {
+      // Start with first page
+      await this.fetchPaginatedData(1, 100);
+      logger.info('Initial graph data page loaded');
+      
+      // Get total pages from metadata
+      const totalPages = this.metadata.pagination?.totalPages || 1;
+      
+      if (totalPages > 1) {
+        logger.info(`Loading remaining ${totalPages - 1} pages in background`);
+        // Load remaining pages in background
+        for (let page = 2; page <= totalPages; page++) {
+          try {
+            await this.fetchPaginatedData(page, 100);
+            logger.debug(`Loaded page ${page}/${totalPages}`);
+          } catch (error) {
+            logger.error(`Failed to load page ${page}:`, error);
+            // Continue with next page even if one fails
+          }
+        }
+      }
+    } catch (error) {
+      logger.error('Failed to fetch initial graph data:', error);
+      throw error;
+    }
+  }
+
+  public async fetchPaginatedData(page: number = 1, pageSize: number = 100): Promise<void> {
+    try {
+      const response = await fetch(
+        `${API_ENDPOINTS.GRAPH_PAGINATED}?page=${page}&pageSize=${pageSize}`,
+        {
+          method: 'GET',
+          headers: {
+            'Content-Type': 'application/json',
+          },
+        }
+      );
+      if (!response.ok) {
+        throw new Error(`Failed to fetch paginated data: ${response.statusText}`);
+      }
+
+      const data = await response.json();
+      this.updateGraphData(data);
+      logger.info(`Paginated data loaded for page ${page}`);
+    } catch (error) {
+      logger.error('Failed to fetch paginated data:', error);
+      throw error;
+    }
+  }
+
+  async loadInitialGraphData(): Promise<void> {
+    try {
+      // Try both endpoints
+      const endpoints = [
+        API_ENDPOINTS.GRAPH_PAGINATED
+      ];
+
+      let response = null;
+      for (const endpoint of endpoints) {
+        try {
+          response = await fetch(`${endpoint}?page=1&pageSize=100`);
+          if (response.ok) break;
+        } catch (e) {
+          continue;
+        }
+      }
+
+      if (!response || !response.ok) {
+        throw new Error('Failed to fetch graph data from any endpoint');
+      }
+
+      const data = await response.json();
+      const transformedData = transformGraphData(data);
+      
+      // Update nodes and edges
+      this.nodes = new Map(transformedData.nodes.map((node: Node) => [node.id, node]));
+      const edgesWithIds = transformedData.edges.map((edge: Edge) => ({
+        ...edge,
+        id: this.createEdgeId(edge.source, edge.target)
+      }));
+      this.edges = new Map(edgesWithIds.map(edge => [edge.id, edge]));
+      
+      // Update metadata
+      this.metadata = {
+        ...transformedData.metadata || {},
+        pagination: {
+          totalPages: data.totalPages,
+          currentPage: data.currentPage,
+          totalItems: data.totalItems,
+          pageSize: data.pageSize
+        }
+      };
+
+      // Enable WebSocket updates immediately
+      this.enableBinaryUpdates();
+      this.setBinaryUpdatesEnabled(true);
+      
+      // Notify listeners of initial data
+      this.notifyUpdateListeners();
+      
+      // Load remaining pages if any
+      if (data.totalPages > 1) {
+        await this.loadRemainingPages(data.totalPages, data.pageSize);
+      }
+      
+      logger.info('Initial graph data loaded successfully');
+    } catch (error) {
+      logger.error('Failed to fetch graph data:', error);
+      throw new Error('Failed to fetch graph data: ' + error);
+    }
+  }
+
+  private async loadRemainingPages(totalPages: number, pageSize: number): Promise<void> {
+    try {
+      // Load remaining pages in parallel with a reasonable chunk size
+      const chunkSize = 5;
+      for (let i = 2; i <= totalPages; i += chunkSize) {
+        const pagePromises = [];
+        for (let j = i; j < Math.min(i + chunkSize, totalPages + 1); j++) {
+          pagePromises.push(this.loadPage(j, pageSize));
+        }
+        await Promise.all(pagePromises);
+        // Update listeners after each chunk
+        this.notifyUpdateListeners();
+      }
+    } catch (error) {
+      logger.error('Error loading remaining pages:', error);
+      throw error;
+    }
+  }
+
+  private async loadPage(page: number, pageSize: number): Promise<void> {
+    try {
+      const response = await fetch(
+        `${API_ENDPOINTS.GRAPH_PAGINATED}?page=${page}&pageSize=${pageSize}`,
+        {
+          method: 'GET',
+          headers: {
+            'Content-Type': 'application/json',
+          },
+        }
+      );
+      if (!response.ok) {
+        throw new Error(`Failed to fetch page ${page}: ${response.statusText}`);
+      }
+
+      const data = await response.json();
+      const transformedData = transformGraphData(data);
+      
+      // Add new nodes
+      transformedData.nodes.forEach((node: Node) => {
+        if (!this.nodes.has(node.id)) {
+          this.nodes.set(node.id, node);
+        }
+      });
+      
+      // Add new edges
+      transformedData.edges.forEach((edge: Edge) => {
+        const edgeId = this.createEdgeId(edge.source, edge.target);
+        if (!this.edges.has(edgeId)) {
+          this.edges.set(edgeId, { ...edge, id: edgeId });
+        }
+      });
+
+      logger.debug(`Loaded page ${page} with ${transformedData.nodes.length} nodes`);
+    } catch (error) {
+      logger.error(`Error loading page ${page}:`, error);
+      throw error;
+    }
+  }
+
+  /**
+   * Enable binary position updates via WebSocket
+   */
+  public enableBinaryUpdates(): void {
+    // Enable binary updates flag - actual WebSocket connection is handled by WebSocketService
+    this.setBinaryUpdatesEnabled(true);
+    logger.info('Binary updates enabled');
+  }
+
+  /**
+   * Update node positions from binary data
+   */
+  private updatePositions(positions: Float32Array): void {
+    if (!this.binaryUpdatesEnabled) return;
+    this.wsService.send(positions.buffer);
+  }
+
+  /**
+   * Initialize or update the graph data
+   */
+  updateGraphData(data: any): void {
+    // Transform and validate incoming data
+    const transformedData = transformGraphData(data);
+    
+    // Update nodes with proper position and velocity
+    transformedData.nodes.forEach((node: Node) => {
+      this.nodes.set(node.id, node);
+    });
+
+    // Store edges in Map with generated IDs
+    if (Array.isArray(transformedData.edges)) {
+      transformedData.edges.forEach((edge: Edge) => {
+        const edgeId = this.createEdgeId(edge.source, edge.target);
+        const edgeWithId: EdgeWithId = {
+          ...edge,
+          id: edgeId
+        };
+        this.edges.set(edgeId, edgeWithId);
+      });
+    }
+
+    // Update metadata, including pagination info if available
+    this.metadata = {
+      ...transformedData.metadata,
+      pagination: data.totalPages ? {
+        totalPages: data.totalPages,
+        currentPage: data.currentPage,
+        totalItems: data.totalItems,
+        pageSize: data.pageSize
+      } : undefined
+    };
+
+    // Notify listeners
+    this.notifyUpdateListeners();
+    logger.debug(`Updated graph data: ${this.nodes.size} nodes, ${this.edges.size} edges`);
+
+    // Enable binary updates after initial data is received
+    if (!this.binaryUpdatesEnabled) {
+      this.enableBinaryUpdates();
+    }
+  }
+
+  /**
+   * Get the current graph data
+   */
+  getGraphData(): GraphData {
+    return {
+      nodes: Array.from(this.nodes.values()),
+      edges: Array.from(this.edges.values()) as Edge[],
+      metadata: this.metadata
+    };
+  }
+
+  /**
+   * Get a specific node by ID
+   */
+  getNode(id: string): Node | undefined {
+    return this.nodes.get(id);
+  }
+
+  /**
+   * Subscribe to graph data updates
+   */
+  subscribe(listener: (data: GraphData) => void): () => void {
+    this.updateListeners.add(listener);
+    return () => {
+      this.updateListeners.delete(listener);
+    };
+  }
+
+  /**
+   * Subscribe to position updates only
+   */
+  subscribeToPositionUpdates(
+    listener: (positions: Float32Array) => void
+  ): () => void {
+    this.positionUpdateListeners.add(listener);
+    return () => {
+      this.positionUpdateListeners.delete(listener);
+    };
+  }
+
+  /**
+   * Clear all graph data
+   */
+  clear(): void {
+    this.nodes.clear();
+    this.edges.clear();
+    this.metadata = {};
+    this.notifyUpdateListeners();
+  }
+
+  private createEdgeId(source: string, target: string): string {
+    return [source, target].sort().join('_');
+  }
+
+  private notifyUpdateListeners(): void {
+    const data = this.getGraphData();
+    this.updateListeners.forEach(listener => {
+      try {
+        listener(data);
+      } catch (error) {
+        logger.error('Error in graph update listener:', error);
+      }
+    });
+  }
+
+  private notifyPositionUpdateListeners(positions: Float32Array): void {
+    this.positionUpdateListeners.forEach(listener => {
+      try {
+        listener(positions);
+      } catch (error) {
+        logger.error('Error in position update listener:', error);
+      }
+    });
+  }
+
+  public setBinaryUpdatesEnabled(enabled: boolean): void {
+    this.binaryUpdatesEnabled = enabled;
+    if (enabled) {
+      this.updatePositions(new Float32Array());  // Send initial empty update
+    }
+    logger.info(`Binary updates ${enabled ? 'enabled' : 'disabled'}`);
+    
+    // Notify listeners of state change
+    this.updateListeners.forEach(listener => {
+      listener({
+        nodes: Array.from(this.nodes.values()),
+        edges: Array.from(this.edges.values()) as Edge[],
+        metadata: { ...this.metadata, binaryUpdatesEnabled: enabled }
+      });
+    });
+  }
+
+  public updateNodePositions(positions: Float32Array): void {
+    if (!this.binaryUpdatesEnabled) {
+      return;
+    }
+    logger.debug('Received binary position update:', positions);
+       
+    if (positions.length % FLOATS_PER_NODE !== 0) {
+      logger.error('Invalid position array length:', positions.length);
+      return;
+    }  
+
+        // Notify listeners of position updates
+        this.notifyPositionUpdateListeners(positions);
+  }
+}
+
+// Export a singleton instance
+export const graphDataManager = GraphDataManager.getInstance();
+
+// Declare WebSocket on window for TypeScript
+declare global {
+  interface Window {
+    ws: WebSocket;
+  }
+}
+
+----
+state/settings.ts
+import { Settings } from '../types/settings';
+import { createLogger } from '../core/logger';
+import { SettingsStore } from './SettingsStore';
+import { defaultSettings } from './defaultSettings';
+import {
+    SettingsCategory,
+    SettingsPath,
+    SettingsValue,
+    getSettingValue,
+    setSettingValue,
+    isValidSettingPath
+} from '../types/settings/utils';
+
+const logger = createLogger('SettingsManager');
+
+export class SettingsManager {
+    private store: SettingsStore;
+    private initialized: boolean = false;
+    private settings: Settings = { ...defaultSettings };
+
+    constructor() {
+        this.store = SettingsStore.getInstance();
+    }
+
+    private useDefaultSettings(): void {
+        // Reset to default settings
+        this.settings = { ...defaultSettings };
+        this.initialized = true;
+    }
+
+    public async initialize(): Promise<void> {
+        if (this.initialized) return;
+
+        try {
+            await this.store.initialize();
+            this.settings = this.store.get('') as Settings;
+            this.initialized = true;
+            logger.info('Settings initialized from server');
+        } catch (error) {
+            logger.error('Failed to initialize settings from server:', error);
+            this.useDefaultSettings();
+        }
+    }
+
+    public getCurrentSettings(): Settings {
+        // Always return settings, which will be defaults if initialization failed
+        return this.settings;
+    }
+
+    public async updateSetting(path: SettingsPath, value: SettingsValue): Promise<void> {
+        if (!isValidSettingPath(this.settings, path)) {
+            throw new Error(`Invalid settings path: ${path}`);
+        }
+
+        try {
+            setSettingValue(this.settings, path, value);
+            if (this.initialized) {
+                await this.store.set(path, value);
+            } else {
+                logger.warn(`Setting ${path} updated in memory only - store not initialized`);
+            }
+            logger.debug(`Updated setting ${path} to ${value}`);
+        } catch (error) {
+            logger.error(`Failed to update setting ${path}:`, error);
+            throw error;
+        }
+    }
+
+    public get(path: SettingsPath): SettingsValue {
+        if (!isValidSettingPath(this.settings, path)) {
+            throw new Error(`Invalid settings path: ${path}`);
+        }
+        
+        try {
+            return getSettingValue(this.settings, path)!;
+        } catch (error) {
+            logger.error(`Error getting setting at path ${path}:`, error);
+            // Return default value for this path if available
+            return getSettingValue(defaultSettings, path)!;
+        }
+    }
+
+    public getCategory(category: SettingsCategory): Settings[typeof category] {
+        if (!(category in this.settings)) {
+            logger.warn(`Category ${category} not found, using defaults`);
+            return defaultSettings[category];
+        }
+        return this.settings[category];
+    }
+
+    public subscribe(path: string, callback: (value: unknown) => void): () => void {
+        const store = SettingsStore.getInstance();
+        let unsubscriber: (() => void) | undefined;
+        
+        store.subscribe(path, (_, value) => {
+            callback(value);
+        }).then(unsub => {
+            unsubscriber = unsub;
+        });
+
+        return () => {
+            if (unsubscriber) {
+                unsubscriber();
+            }
+        };
+    }
+
+    public onSettingChange(path: SettingsPath, callback: (value: SettingsValue) => void): () => void {
+        const store = SettingsStore.getInstance();
+        let unsubscriber: (() => void) | undefined;
+        
+        store.subscribe(path, (_, value) => {
+            callback(value as SettingsValue);
+        }).then(unsub => {
+            unsubscriber = unsub;
+        });
+
+        return () => {
+            if (unsubscriber) {
+                unsubscriber();
+            }
+        };
+    }
+
+    public async batchUpdate(updates: Array<{ path: SettingsPath; value: SettingsValue }>): Promise<void> {
+        try {
+            // Validate all paths first
+            for (const { path } of updates) {
+                if (!isValidSettingPath(this.settings, path)) {
+                    throw new Error(`Invalid settings path: ${path}`);
+                }
+            }
+
+            // Apply updates to local settings first
+            for (const { path, value } of updates) {
+                setSettingValue(this.settings, path, value);
+            }
+
+            // Then sync with store if initialized
+            if (this.initialized) {
+                await Promise.all(
+                    updates.map(({ path, value }) => this.store.set(path, value))
+                );
+            } else {
+                logger.warn('Settings updated in memory only - store not initialized');
+            }
+        } catch (error) {
+            logger.error('Failed to apply batch updates:', error);
+            throw error;
+        }
+    }
+
+    public dispose(): void {
+        this.store.dispose();
+        this.initialized = false;
+    }
+}
+
+// Export singleton instance
+export const settingsManager = new SettingsManager();
+
+----
+state/defaultSettings.ts
+import { Settings } from '../types/settings/base';
+
+export const defaultSettings: Settings = {
+    visualization: {
+        nodes: {
+            baseColor: '#32aeae',
+            metalness: 0.8,
+            opacity: 1.0,
+            roughness: 0.2,
+            sizeRange: [200, 700], // Wider range for better size differentiation
+            quality: 'medium', // Default to medium quality for better performance
+            enableInstancing: true,
+            enableHologram: true,
+            enableMetadataShape: false,
+            enableMetadataVisualization: false, // Disable for performance
+            colorRangeAge: ['#ff0000', '#00ff00'],
+            colorRangeLinks: ['#0000ff', '#ff00ff']
+        },
+        edges: {
+            arrowSize: 5.0,
+            baseWidth: 3.0,
+            color: '#888888',
+            enableArrows: false,
+            opacity: 0.8,
+            widthRange: [1.5, 4.0],
+            quality: 'medium',
+            // New shader-based edge settings
+            enableFlowEffect: true,
+            flowSpeed: 1.0,
+            flowIntensity: 0.6,
+            glowStrength: 0.4,
+            distanceIntensity: 0.3,
+            useGradient: false,
+            gradientColors: ['#888888', '#aaaaaa']
+        },
+        physics: {
+            attractionStrength: 0.015,
+            boundsSize: 100.0,
+            collisionRadius: 0.25,
+            damping: 0.5,
+            enableBounds: false,
+            enabled: true,
+            iterations: 100,
+            maxVelocity: 2.0,
+            repulsionStrength: 0.4,
+            springStrength: 0.6
+        },
+        rendering: {
+            ambientLightIntensity: 0.2,
+            backgroundColor: '#1a1a1a',
+            directionalLightIntensity: 0.2,
+            enableAmbientOcclusion: false,
+            enableAntialiasing: true,
+            enableShadows: false,
+            environmentIntensity: 0.2,
+            shadowMapSize: 2048,
+            shadowBias: 0.00001,
+            context: 'desktop'
+        },
+        animations: {
+            enableMotionBlur: true,
+            enableNodeAnimations: true,
+            motionBlurStrength: 1.0,
+            selectionWaveEnabled: false,
+            pulseEnabled: false,
+            pulseSpeed: 1.0,
+            pulseStrength: 0.5,
+            waveSpeed: 1.0
+        },
+        labels: {
+            desktopFontSize: 14,
+            enableLabels: true,
+            textColor: '#ffffff',
+            textOutlineColor: '#000000',
+            textOutlineWidth: 0.1,
+            textResolution: 16,
+            textPadding: 2,
+            billboardMode: 'camera' 
+        },
+        bloom: {
+            edgeBloomStrength: 2.0,
+            enabled: true,
+            environmentBloomStrength: 3.0,
+            nodeBloomStrength: 3.0,
+            radius: 2.0,
+            strength: 3.0,
+            threshold: 0.3
+        },
+        hologram: {
+            ringCount: 2,
+            sphereSizes: [40, 80],  // Reduced to 2 layers
+            ringRotationSpeed: 1.0,
+            ringColor: '#00ffff',
+            ringOpacity: 0.6,
+            enableBuckminster: false,
+            enableGeodesic: false,
+            buckminsterSize: 0,  // Keep but set to 0 since disabled
+            buckminsterOpacity: 0,  // Keep but set to 0 since disabled
+            geodesicSize: 0,  // Keep but set to 0 since disabled
+            geodesicOpacity: 0,  // Keep but set to 0 since disabled
+            enableTriangleSphere: true,
+            triangleSphereSize: 80,  // Single size for instanced geometry
+            triangleSphereOpacity: 0.15,
+            globalRotationSpeed: 0.03
+        }
+    },
+    system: {
+        websocket: {
+            binaryChunkSize: 32768,
+            compressionEnabled: true,
+            compressionThreshold: 1024,
+            reconnectAttempts: 5,
+            reconnectDelay: 5000,
+            updateRate: 30
+        },
+        debug: {
+            enabled: false,
+            enableDataDebug: false,
+            enableWebsocketDebug: false,
+            logBinaryHeaders: false,
+            logFullJson: false,
+            logLevel: 'info',
+            logFormat: 'json'
+        }
+    },
+    xr: {
+        mode: 'immersive-vr',
+        roomScale: 0.01,
+        spaceType: 'local-floor',
+        quality: 'high',
+        autoEnterAR: false,
+        hideControlPanel: true,
+        preferredMode: 'immersive-vr',
+        enableHandTracking: true,
+        handMeshEnabled: true,
+        handMeshColor: '#4287f5',
+        handMeshOpacity: 0.3,
+        handPointSize: 3.0,
+        handRayEnabled: true,
+        handRayColor: '#4287f5',
+        handRayWidth: 1.5,
+        gestureSmoothing: 0.5,
+        enableHaptics: true,
+        hapticIntensity: 0.5,
+        dragThreshold: 0.02,
+        pinchThreshold: 0.5,
+        rotationThreshold: 0.1,
+        interactionRadius: 0.5,
+        movementSpeed: 0.05,
+        deadZone: 0.1,
+        movementAxes: {
+            horizontal: 2,
+            vertical: 3
+        },
+        enableLightEstimation: false,
+        enablePlaneDetection: true,
+        enableSceneUnderstanding: true,
+        planeColor: '#808080',
+        planeOpacity: 0.5,
+        showPlaneOverlay: false,
+        snapToFloor: false,
+        planeDetectionDistance: 3.0,
+        enablePassthroughPortal: false,
+        passthroughOpacity: 0.8,
+        passthroughBrightness: 1.1,
+        passthroughContrast: 1.0,
+        portalSize: 2.0,
+        portalEdgeColor: '#ffffff',
+        portalEdgeWidth: 2.0
+    }
+};
+
+----
+ui/ModularControlPanel.css
+:root {
+    --primary-color: #4CAF50;
+    --background-color: #212121;
+    --text-color: #ffffff;
+    --border-color: rgba(255, 255, 255, 0.1);
+    --control-bg-color: rgba(255, 255, 255, 0.05);
+    --control-hover-bg-color: rgba(255, 255, 255, 0.1);
+    --control-active-bg-color: rgba(255, 255, 255, 0.15);
+    --slider-track-color: #444;
+    --slider-thumb-color: var(--primary-color);
+    --error-color: #f44336;
+    --section-header-bg: rgba(40, 40, 40, 0.95);
+    --subsection-bg: rgba(0, 0, 0, 0.2);
+    --tooltip-bg: rgba(0, 0, 0, 0.9);
+}
+
+/* Control Panel Container */
+#control-panel {
+    position: fixed;
+    top: 20px;
+    right: 20px;
+    width: 400px;
+    max-height: calc(100vh - 40px);
+    background: var(--background-color);
+    color: var(--text-color);
+    border-radius: 12px;
+    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
+    overflow-y: auto;
+    font-family: system-ui, -apple-system, sans-serif;
+    z-index: 1000;
+    transition: transform 0.3s ease, opacity 0.3s ease;
+}
+
+#control-panel.hidden {
+    transform: translateX(420px);
+    opacity: 0;
+}
+
+/* Sections */
+.settings-section {
+    margin-bottom: 1rem;
+    background: rgba(30, 30, 30, 0.95);
+    border: 1px solid var(--border-color);
+    border-radius: 8px;
+    overflow: hidden;
+}
+
+.section-header {
+    padding: 1rem;
+    background: var(--section-header-bg);
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    cursor: pointer;
+    user-select: none;
+    transition: background-color 0.2s;
+}
+
+.section-header:hover {
+    background: rgba(50, 50, 50, 0.95);
+}
+
+.section-header h4 {
+    margin: 0;
+    font-size: 1.1rem;
+    font-weight: 500;
+    color: var(--text-color);
+}
+
+/* Subsections */
+.settings-subsection {
+    margin: 1rem;
+    padding: 1rem;
+    background: var(--subsection-bg);
+    border-radius: 8px;
+    border: 1px solid var(--border-color);
+}
+
+.settings-subsection-header {
+    margin: 0 0 1rem 0;
+    font-size: 0.9rem;
+    font-weight: 600;
+    color: var(--primary-color);
+    text-transform: uppercase;
+    letter-spacing: 0.05em;
+}
+
+/* Setting Controls */
+.setting-control {
+    display: flex;
+    align-items: center;
+    margin-bottom: 1rem;
+    position: relative;
+}
+
+.setting-control label {
+    flex: 1;
+    font-size: 0.9rem;
+    color: var(--text-color);
+    margin-right: 1rem;
+}
+
+/* Sliders */
+.setting-control input[type="range"] {
+    -webkit-appearance: none;
+    width: 140px;
+    height: 4px;
+    background: var(--slider-track-color);
+    border-radius: 2px;
+    outline: none;
+}
+
+.setting-control input[type="range"]::-webkit-slider-thumb {
+    -webkit-appearance: none;
+    width: 16px;
+    height: 16px;
+    border-radius: 50%;
+    background: var(--slider-thumb-color);
+    cursor: pointer;
+    border: 2px solid var(--background-color);
+    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
+    transition: transform 0.2s;
+}
+
+.setting-control input[type="range"]::-webkit-slider-thumb:hover {
+    transform: scale(1.1);
+}
+
+.setting-control input[type="range"]::-moz-range-thumb {
+    width: 16px;
+    height: 16px;
+    border-radius: 50%;
+    background: var(--slider-thumb-color);
+    cursor: pointer;
+    border: 2px solid var(--background-color);
+    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
+    transition: transform 0.2s;
+}
+
+.setting-control input[type="range"]::-moz-range-thumb:hover {
+    transform: scale(1.1);
+}
+
+/* Toggle Switches */
+.toggle-switch {
+    position: relative;
+    display: inline-block;
+    width: 44px;
+    height: 24px;
+}
+
+.toggle-switch input {
+    opacity: 0;
+    width: 0;
+    height: 0;
+}
+
+.toggle-switch .slider {
+    position: absolute;
+    cursor: pointer;
+    top: 0;
+    left: 0;
+    right: 0;
+    bottom: 0;
+    background-color: var(--slider-track-color);
+    transition: .4s;
+    border-radius: 24px;
+}
+
+.toggle-switch .slider:before {
+    position: absolute;
+    content: "";
+    height: 18px;
+    width: 18px;
+    left: 3px;
+    bottom: 3px;
+    background-color: white;
+    transition: .4s;
+    border-radius: 50%;
+}
+
+.toggle-switch input:checked + .slider {
+    background-color: var(--primary-color);
+}
+
+.toggle-switch input:checked + .slider:before {
+    transform: translateX(20px);
+}
+
+/* Color Picker */
+.setting-control input[type="color"] {
+    -webkit-appearance: none;
+    width: 44px;
+    height: 24px;
+    border: none;
+    border-radius: 4px;
+    padding: 0;
+    cursor: pointer;
+}
+
+.setting-control input[type="color"]::-webkit-color-swatch-wrapper {
+    padding: 0;
+}
+
+.setting-control input[type="color"]::-webkit-color-swatch {
+    border: 2px solid var(--border-color);
+    border-radius: 4px;
+}
+
+/* Number and Text Inputs */
+.setting-control input[type="number"],
+.setting-control input[type="text"] {
+    width: 140px;
+    padding: 6px 8px;
+    background: var(--control-bg-color);
+    border: 1px solid var(--border-color);
+    border-radius: 4px;
+    color: var(--text-color);
+    font-size: 0.9rem;
+    transition: border-color 0.2s;
+}
+
+.setting-control input[type="number"]:focus,
+.setting-control input[type="text"]:focus {
+    border-color: var(--primary-color);
+    outline: none;
+}
+
+/* Select Dropdowns */
+.setting-control select {
+    width: 140px;
+    padding: 6px 24px 6px 8px;
+    background: var(--control-bg-color);
+    border: 1px solid var(--border-color);
+    border-radius: 4px;
+    color: var(--text-color);
+    font-size: 0.9rem;
+    appearance: none;
+    cursor: pointer;
+    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%23ffffff' d='M2 4l4 4 4-4'/%3E%3C/svg%3E");
+    background-repeat: no-repeat;
+    background-position: right 8px center;
+}
+
+.setting-control select:focus {
+    border-color: var(--primary-color);
+    outline: none;
+}
+
+/* Tooltips */
+.setting-control[title] {
+    position: relative;
+}
+
+.setting-control[title]:hover:after {
+    content: attr(title);
+    position: absolute;
+    right: calc(100% + 10px);
+    top: 50%;
+    transform: translateY(-50%);
+    background: var(--tooltip-bg);
+    color: var(--text-color);
+    padding: 6px 10px;
+    border-radius: 4px;
+    font-size: 0.8rem;
+    white-space: nowrap;
+    z-index: 1000;
+    pointer-events: none;
+}
+
+/* Error States */
+.setting-control.error input,
+.setting-control.error select {
+    border-color: var(--error-color);
+}
+
+.error-message {
+    color: var(--error-color);
+    font-size: 0.8rem;
+    margin-top: 4px;
+}
+
+/* Responsive Design */
+@media (max-width: 768px) {
+    #control-panel {
+        width: 100%;
+        max-width: none;
+        top: auto;
+        bottom: 0;
+        right: 0;
+        border-radius: 12px 12px 0 0;
+        max-height: 80vh;
+    }
+
+    .setting-control {
+        flex-direction: column;
+        align-items: flex-start;
+    }
+
+    .setting-control label {
+        margin-bottom: 0.5rem;
+    }
+
+    .setting-control input[type="range"],
+    .setting-control input[type="number"],
+    .setting-control input[type="text"],
+    .setting-control select {
+        width: 100%;
+    }
+}
+
+/* Animations */
+@keyframes slideIn {
+    from {
+        transform: translateX(420px);
+        opacity: 0;
+    }
+    to {
+        transform: translateX(0);
+        opacity: 1;
+    }
+}
+
+.control-panel-enter {
+    animation: slideIn 0.3s ease forwards;
+}
+----
+ui/index.ts
+import { ModularControlPanel } from './ModularControlPanel';
+import { createLogger } from '../core/logger';
+import './ModularControlPanel.css';
+
+const logger = createLogger('UI');
+
+// Initialize UI components
+export async function initializeUI(): Promise<void> {
+    try {
+        logger.debug('Initializing UI components');
+        
+        // Initialize ModularControlPanel
+        const controlPanel = ModularControlPanel.getInstance();
+        
+        // Wait for settings to be ready
+        if (!controlPanel.isReady()) {
+            await new Promise<void>((resolve) => {
+                controlPanel.on('settings:ready', () => resolve());
+            });
+        }
+        
+        // Show panel by default
+        controlPanel.show();
+        
+        logger.debug('ModularControlPanel initialized successfully');
+    } catch (error) {
+        logger.error('Failed to initialize UI:', error);
+        throw error;
+    }
+}
+
+// Initialize when DOM is ready
+if (document.readyState === 'loading') {
+    document.addEventListener('DOMContentLoaded', () => {
+        initializeUI().catch(error => {
+            logger.error('Failed to initialize UI on DOMContentLoaded:', error);
+        });
+    });
+} else {
+    initializeUI().catch(error => {
+        logger.error('Failed to initialize UI:', error);
+    });
+}
+
+export { ModularControlPanel };
+
+----
+ui/styles.css
+.control-panel {
+    position: fixed;
+    top: 20px;
+    right: 20px;
+    width: 300px;
+    max-height: calc(100vh - 40px);
+    background: rgba(28, 28, 38, 0.95);
+    color: #fff;
+    border-radius: 8px;
+    padding: 15px;
+    overflow-y: auto;
+    font-family: 'Inter', system-ui, -apple-system, sans-serif;
+    z-index: 1000;
+    backdrop-filter: blur(10px);
+    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
+}
+
+.control-section {
+    margin-bottom: 20px;
+}
+
+.control-section h2 {
+    font-size: 1.2em;
+    margin: 0 0 15px 0;
+    padding-bottom: 8px;
+    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
+    color: #4287f5;
+}
+
+.control-subsection {
+    margin: 15px 0;
+    padding: 10px;
+    background: rgba(255, 255, 255, 0.05);
+    border-radius: 6px;
+}
+
+.control-subsection h3 {
+    font-size: 1em;
+    margin: 0 0 10px 0;
+    color: #6087c3;
+}
+
+.settings-content {
+    font-family: 'Fira Code', monospace;
+    font-size: 0.85em;
+    margin: 0;
+    padding: 10px;
+    background: rgba(0, 0, 0, 0.2);
+    border-radius: 4px;
+    white-space: pre-wrap;
+    word-break: break-word;
+    color: #a0a0a0;
+}
+
+.settings-content:hover {
+    background: rgba(0, 0, 0, 0.3);
+} 
+----
+ui/ModularControlPanel.ts
+import { SettingsStore } from '../state/SettingsStore';
+import { formatSettingName } from '../types/settings/utils';
+import { ValidationErrorDisplay } from '../components/settings/ValidationErrorDisplay';
+import { createLogger } from '../core/logger';
+import { platformManager } from '../platform/platformManager';
+import { nostrAuth } from '../services/NostrAuthService';
+import { EventEmitter } from '../utils/eventEmitter';
+import { settingsMap, SettingControl } from './controlPanelConfig';
+import './ModularControlPanel.css';
+
+const logger = createLogger('ModularControlPanel');
+
+interface SectionConfig {
+    id: string;
+    title: string;
+    isDetached: boolean;
+    position?: { x: number; y: number };
+    size?: { width: number; height: number };
+    isCollapsed: boolean;
+    isAdvanced: boolean;
+}
+
+export interface ModularControlPanelEvents {
+    'settings:ready': null;
+    'settings:updated': { path: string; value: any };
+}
+
+export class ModularControlPanel extends EventEmitter<ModularControlPanelEvents> {
+    private static instance: ModularControlPanel | null = null;
+    private readonly container: HTMLDivElement;
+    private readonly toggleButton: HTMLButtonElement;
+    private readonly settingsStore: SettingsStore;
+    private readonly validationDisplay: ValidationErrorDisplay;
+    private readonly unsubscribers: Array<() => void> = [];
+    private readonly sections: Map<string, SectionConfig> = new Map();
+    private updateTimeout: number | null = null;
+    private isInitialized: boolean = false;
+
+    private constructor(parentElement: HTMLElement) {
+        super();
+        this.settingsStore = SettingsStore.getInstance();
+        
+        // Create toggle button first
+        this.toggleButton = document.createElement('button');
+        this.toggleButton.className = 'panel-toggle-btn';
+        this.toggleButton.innerHTML = '⚙️';
+        this.toggleButton.onclick = () => this.toggle();
+        parentElement.appendChild(this.toggleButton);
+
+        // Create main container
+        const existingContainer = document.getElementById('control-panel');
+        if (!existingContainer) {
+            throw new Error('Could not find #control-panel element');
+        }
+        this.container = existingContainer as HTMLDivElement;
+        this.container.innerHTML = ''; // Clear existing content
+
+        // Initialize validation error display
+        this.validationDisplay = new ValidationErrorDisplay(this.container);
+
+        // Set initial visibility based on platform
+        this.updateVisibilityForPlatform();
+
+        // Listen for platform changes
+        platformManager.on('platformchange', () => {
+            this.updateVisibilityForPlatform();
+        });
+        platformManager.on('xrmodechange', (isXRMode: boolean) => {
+            isXRMode ? this.hide() : this.updateVisibilityForPlatform();
+        });
+
+        this.initializeComponents();
+    }
+
+    private async initializeComponents(): Promise<void> {
+        try {
+            await this.initializeSettings();
+            await this.initializePanel();
+            this.initializeDragAndDrop();
+            await this.initializeNostrAuth();
+            
+            this.isInitialized = true;
+            this.emit('settings:ready', null);
+            
+            logger.info('ModularControlPanel fully initialized');
+        } catch (error) {
+            logger.error('Failed to initialize ModularControlPanel:', error);
+            throw error;
+        }
+    }
+
+    private async initializeSettings(): Promise<void> {
+        try {
+            await this.settingsStore.initialize();
+            logger.info('Settings initialized successfully');
+        } catch (error) {
+            logger.error('Failed to initialize settings:', error);
+            throw error;
+        }
+    }
+
+    private async initializePanel(): Promise<void> {
+        try {
+            // Create main categories container
+            const categoriesContainer = document.createElement('div');
+            categoriesContainer.className = 'settings-categories';
+            
+            // Create sections for each main category in settingsMap
+            for (const [category, settings] of Object.entries(settingsMap)) {
+                const sectionConfig: SectionConfig = {
+                    id: category,
+                    title: formatSettingName(category),
+                    isDetached: false,
+                    isCollapsed: false,
+                    isAdvanced: this.isAdvancedCategory(category)
+                };
+                
+                this.sections.set(category, sectionConfig);
+                const section = await this.createSection(sectionConfig, settings);
+                categoriesContainer.appendChild(section);
+            }
+            
+            this.container.appendChild(categoriesContainer);
+            logger.info('Panel UI initialized');
+        } catch (error) {
+            logger.error('Failed to initialize panel:', error);
+            throw error;
+        }
+    }
+
+    private initializeDragAndDrop(): void {
+        this.container.addEventListener('mousedown', (e: MouseEvent) => {
+            const target = e.target as HTMLElement;
+            const section = target.closest('.settings-section') as HTMLElement;
+            
+            if (!section || !target.classList.contains('section-header')) return;
+            
+            const sectionId = section.dataset.sectionId;
+            if (!sectionId) return;
+
+            const sectionConfig = this.sections.get(sectionId);
+            if (!sectionConfig) return;
+
+            if (sectionConfig.isDetached) {
+                this.startDragging(section, e);
+            }
+        });
+    }
+
+    private startDragging(element: HTMLElement, e: MouseEvent): void {
+        const rect = element.getBoundingClientRect();
+        const offsetX = e.clientX - rect.left;
+        const offsetY = e.clientY - rect.top;
+
+        const moveHandler = (e: MouseEvent) => {
+            const x = e.clientX - offsetX;
+            const y = e.clientY - offsetY;
+            
+            element.style.left = `${x}px`;
+            element.style.top = `${y}px`;
+            
+            const sectionId = element.dataset.sectionId;
+            if (sectionId) {
+                const config = this.sections.get(sectionId);
+                if (config) {
+                    config.position = { x, y };
+                }
+            }
+        };
+
+        const upHandler = () => {
+            document.removeEventListener('mousemove', moveHandler);
+            document.removeEventListener('mouseup', upHandler);
+        };
+
+        document.addEventListener('mousemove', moveHandler);
+        document.addEventListener('mouseup', upHandler);
+    }
+
+    private async initializeNostrAuth(): Promise<void> {
+        const authSection = document.createElement('div');
+        authSection.className = 'settings-section auth-section';
+        
+        const header = document.createElement('div');
+        header.className = 'section-header';
+        header.innerHTML = '<h4>Authentication</h4>';
+        authSection.appendChild(header);
+
+        const content = document.createElement('div');
+        content.className = 'section-content';
+
+        const loginBtn = document.createElement('button');
+        loginBtn.className = 'nostr-login-btn';
+        loginBtn.textContent = 'Login with Nostr';
+        
+        const statusDisplay = document.createElement('div');
+        statusDisplay.className = 'auth-status';
+        statusDisplay.innerHTML = '<div class="not-authenticated">Not authenticated</div>';
+        
+        content.appendChild(loginBtn);
+        content.appendChild(statusDisplay);
+        authSection.appendChild(content);
+
+        this.container.insertBefore(authSection, this.container.firstChild);
+
+        // Set up login button click handler
+        loginBtn.onclick = async () => {
+            try {
+                loginBtn.disabled = true;
+                loginBtn.textContent = 'Connecting...';
+                
+                const result = await nostrAuth.login();
+                if (!result.authenticated) {
+                    throw new Error(result.error || 'Authentication failed');
+                }
+            } catch (error) {
+                logger.error('Nostr login failed:', error);
+                const errorMsg = document.createElement('div');
+                errorMsg.className = 'auth-error';
+                
+                let errorText = 'Login failed';
+                if (error instanceof Error) {
+                    if (error.message.includes('Alby extension not found')) {
+                        errorText = 'Please install Alby extension to use Nostr login';
+                    } else if (error.message.includes('Failed to get public key')) {
+                        errorText = 'Please allow access to your Nostr public key';
+                    } else {
+                        errorText = error.message;
+                    }
+                }
+                
+                errorMsg.textContent = errorText;
+                content.appendChild(errorMsg);
+                setTimeout(() => errorMsg.remove(), 5000);
+            } finally {
+                loginBtn.disabled = false;
+            }
+        };
+
+        // Subscribe to auth state changes
+        this.unsubscribers.push(
+            nostrAuth.onAuthStateChanged(({ authenticated, user }) => {
+                if (authenticated && user) {
+                    loginBtn.textContent = 'Logout';
+                    loginBtn.onclick = async () => {
+                        try {
+                            loginBtn.disabled = true;
+                            loginBtn.textContent = 'Logging out...';
+                            await nostrAuth.logout();
+                        } catch (error) {
+                            logger.error('Logout failed:', error);
+                        }
+                    };
+                    statusDisplay.innerHTML = `
+                        <div class="user-info">
+                            <div class="pubkey">${user.pubkey.substring(0, 8)}...</div>
+                            <div class="role">${user.isPowerUser ? 'Power User' : 'Basic User'}</div>
+                        </div>
+                    `;
+                } else {
+                    loginBtn.textContent = 'Login with Nostr';
+                    loginBtn.onclick = () => nostrAuth.login();
+                    statusDisplay.innerHTML = '<div class="not-authenticated">Not authenticated</div>';
+                }
+                loginBtn.disabled = false;
+            })
+        );
+
+        await nostrAuth.initialize();
+    }
+
+    private isAdvancedCategory(category: string): boolean {
+        const advancedCategories = ['physics', 'rendering', 'debug', 'network'];
+        return advancedCategories.includes(category.toLowerCase());
+    }
+
+    private async createSection(config: SectionConfig, settings: Record<string, SettingControl | Record<string, SettingControl>>): Promise<HTMLElement> {
+        const section = document.createElement('div');
+        section.className = `settings-section ${config.isAdvanced ? 'advanced' : 'basic'}`;
+        section.dataset.sectionId = config.id;
+        
+        if (config.isDetached) {
+            section.classList.add('detached');
+            if (config.position) {
+                section.style.left = `${config.position.x}px`;
+                section.style.top = `${config.position.y}px`;
+            }
+        }
+
+        const header = document.createElement('div');
+        header.className = 'section-header';
+        
+        const title = document.createElement('h4');
+        title.textContent = config.title;
+        header.appendChild(title);
+
+        const controls = document.createElement('div');
+        controls.className = 'section-controls';
+
+        const detachBtn = document.createElement('button');
+        detachBtn.className = 'section-control detach';
+        detachBtn.innerHTML = config.isDetached ? '📌' : '📎';
+        detachBtn.title = config.isDetached ? 'Dock section' : 'Detach section';
+        detachBtn.onclick = (e) => {
+            e.stopPropagation();
+            this.toggleDetached(config.id);
+        };
+        controls.appendChild(detachBtn);
+
+        const collapseBtn = document.createElement('button');
+        collapseBtn.className = 'section-control collapse';
+        collapseBtn.innerHTML = config.isCollapsed ? '▼' : '▲';
+        collapseBtn.onclick = (e) => {
+            e.stopPropagation();
+            this.toggleCollapsed(config.id);
+        };
+        controls.appendChild(collapseBtn);
+
+        header.appendChild(controls);
+        section.appendChild(header);
+
+        const content = document.createElement('div');
+        content.className = 'section-content';
+        if (config.isCollapsed) {
+            content.style.display = 'none';
+        }
+
+        // Create subsections for each group of settings
+        for (const [subsectionKey, subsectionSettings] of Object.entries(settings)) {
+            const subsection = await this.createSubsection(subsectionKey, subsectionSettings);
+            content.appendChild(subsection);
+        }
+
+        section.appendChild(content);
+        return section;
+    }
+
+    private async createSubsection(title: string, settings: Record<string, SettingControl> | SettingControl): Promise<HTMLElement> {
+        const subsection = document.createElement('div');
+        subsection.className = 'settings-subsection';
+
+        const header = document.createElement('h3');
+        header.textContent = formatSettingName(title);
+        header.className = 'settings-subsection-header';
+        subsection.appendChild(header);
+
+        if (this.isSettingControl(settings)) {
+            // Single setting
+            const control = await this.createSettingControl(title, settings);
+            subsection.appendChild(control);
+        } else {
+            // Group of settings
+            for (const [key, setting] of Object.entries(settings)) {
+                const control = await this.createSettingControl(key, setting);
+                subsection.appendChild(control);
+            }
+        }
+
+        return subsection;
+    }
+
+    private isSettingControl(value: any): value is SettingControl {
+        return value && typeof value === 'object' && 'type' in value;
+    }
+
+    private async createSettingControl(key: string, setting: SettingControl): Promise<HTMLElement> {
+        const container = document.createElement('div');
+        container.className = 'setting-control';
+        container.dataset.settingPath = key;
+
+        if (setting.tooltip) {
+            container.title = setting.tooltip;
+        }
+
+        const label = document.createElement('label');
+        label.textContent = setting.label;
+        container.appendChild(label);
+
+        const control = await this.createInputElement(key, setting);
+        container.appendChild(control);
+
+        return container;
+    }
+
+    private async createInputElement(path: string, setting: SettingControl): Promise<HTMLElement> {
+        const currentValue = this.settingsStore.get(path);
+        let input: HTMLElement;
+
+        switch (setting.type) {
+            case 'slider': {
+                const slider = document.createElement('input');
+                slider.type = 'range';
+                slider.min = setting.min?.toString() ?? '0';
+                slider.max = setting.max?.toString() ?? '1';
+                slider.step = setting.step?.toString() ?? '0.1';
+                slider.value = (currentValue ?? slider.min).toString();
+                slider.onchange = (e) => {
+                    const target = e.target as HTMLInputElement;
+                    this.updateSetting(path, parseFloat(target.value));
+                };
+                input = slider;
+                break;
+            }
+
+            case 'toggle': {
+                const toggleContainer = document.createElement('div');
+                toggleContainer.className = 'toggle-switch';
+                
+                const checkbox = document.createElement('input');
+                checkbox.type = 'checkbox';
+                checkbox.checked = Boolean(currentValue);
+                checkbox.onchange = (e) => {
+                    const target = e.target as HTMLInputElement;
+                    this.updateSetting(path, target.checked);
+                };
+                
+                const slider = document.createElement('span');
+                slider.className = 'slider';
+                
+                toggleContainer.appendChild(checkbox);
+                toggleContainer.appendChild(slider);
+                input = toggleContainer;
+                break;
+            }
+
+            case 'color': {
+                const colorInput = document.createElement('input');
+                colorInput.type = 'color';
+                colorInput.value = (currentValue as string) ?? '#ffffff';
+                colorInput.onchange = (e) => {
+                    const target = e.target as HTMLInputElement;
+                    this.updateSetting(path, target.value);
+                };
+                input = colorInput;
+                break;
+            }
+
+            case 'select': {
+                const select = document.createElement('select');
+                setting.options?.forEach(option => {
+                    const optionElement = document.createElement('option');
+                    optionElement.value = option;
+                    optionElement.textContent = formatSettingName(option);
+                    select.appendChild(optionElement);
+                });
+                select.value = (currentValue as string) ?? setting.options?.[0] ?? '';
+                select.onchange = (e) => {
+                    const target = e.target as HTMLSelectElement;
+                    this.updateSetting(path, target.value);
+                };
+                input = select;
+                break;
+            }
+
+            case 'number': {
+                const numberInput = document.createElement('input');
+                numberInput.type = 'number';
+                numberInput.min = setting.min?.toString() ?? '0';
+                if (setting.max !== undefined) numberInput.max = setting.max.toString();
+                numberInput.step = setting.step?.toString() ?? '1';
+                numberInput.value = (currentValue ?? 0).toString();
+                numberInput.onchange = (e) => {
+                    const target = e.target as HTMLInputElement;
+                    this.updateSetting(path, parseFloat(target.value));
+                };
+                input = numberInput;
+                break;
+            }
+
+            case 'text':
+            default: {
+                const textInput = document.createElement('input');
+                textInput.type = 'text';
+                textInput.value = (currentValue ?? '').toString();
+                textInput.onchange = (e) => {
+                    const target = e.target as HTMLInputElement;
+                    this.updateSetting(path, target.value);
+                };
+                input = textInput;
+                break;
+            }
+        }
+
+        return input;
+    }
+
+    private updateSetting(path: string, value: any): void {
+        try {
+            const currentValue = this.settingsStore.get(path);
+            
+            let processedValue = value;
+            if (Array.isArray(currentValue)) {
+                processedValue = value.map((v: any, i: number) => {
+                    const originalValue = currentValue[i];
+                    if (typeof originalValue === 'number') {
+                        const parsed = parseFloat(v);
+                        return isNaN(parsed) ? originalValue : parsed;
+                    }
+                    return v;
+                });
+            } else if (typeof currentValue === 'number') {
+                const parsed = parseFloat(value);
+                processedValue = isNaN(parsed) ? currentValue : parsed;
+            }
+
+            this.settingsStore.set(path, processedValue);
+            this.emit('settings:updated', { path, value: processedValue });
+        } catch (error) {
+            logger.error(`Failed to update setting ${path}:`, error);
+            
+            // Create an error element
+            const errorElement = document.createElement('div');
+            errorElement.className = 'error-message';
+            errorElement.textContent = error instanceof Error ? error.message : 'Unknown error occurred';
+            
+            const control = this.container.querySelector(`[data-setting-path="${path}"]`);
+            if (control) {
+                // Add error class to the control
+                control.classList.add('error');
+                
+                // Add error message
+                control.appendChild(errorElement);
+                
+                // Remove error after 5 seconds
+                setTimeout(() => {
+                    control.classList.remove('error');
+                    errorElement.remove();
+                }, 5000);
+                
+                // Revert the input value
+                const input = control.querySelector('input, select') as HTMLInputElement;
+                if (input) {
+                    const currentValue = this.settingsStore.get(path);
+                    if (Array.isArray(currentValue)) {
+                        const inputs = control.querySelectorAll('.array-item') as NodeListOf<HTMLInputElement>;
+                        inputs.forEach((input, i) => {
+                            input.value = currentValue[i].toString();
+                        });
+                    } else {
+                        input.value = currentValue?.toString() || '';
+                    }
+                }
+            }
+        }
+    }
+
+    private toggleDetached(sectionId: string): void {
+        const config = this.sections.get(sectionId);
+        if (!config) return;
+
+        config.isDetached = !config.isDetached;
+        const section = this.container.querySelector(`[data-section-id="${sectionId}"]`);
+        if (section) {
+            section.classList.toggle('detached');
+            if (config.isDetached) {
+                const rect = section.getBoundingClientRect();
+                config.position = { x: rect.left, y: rect.top };
+            } else {
+                (section as HTMLElement).removeAttribute('style');
+            }
+        }
+    }
+
+    private toggleCollapsed(sectionId: string): void {
+        const config = this.sections.get(sectionId);
+        if (!config) return;
+
+        config.isCollapsed = !config.isCollapsed;
+        const section = this.container.querySelector(`[data-section-id="${sectionId}"]`);
+        if (section) {
+            const content = section.querySelector('.section-content');
+            if (content) {
+                content.classList.toggle('collapsed');
+                (content as HTMLElement).style.display = config.isCollapsed ? 'none' : '';
+            }
+            const collapseBtn = section.querySelector('.collapse') as HTMLElement;
+            if (collapseBtn) {
+                collapseBtn.innerHTML = config.isCollapsed ? '▼' : '▲';
+            }
+        }
+    }
+
+    public show(): void {
+        this.container.classList.remove('hidden');
+        this.toggleButton.classList.add('panel-open');
+    }
+
+    public hide(): void {
+        this.container.classList.add('hidden');
+        this.toggleButton.classList.remove('panel-open');
+    }
+
+    public toggle(): void {
+        this.container.classList.toggle('hidden');
+        this.toggleButton.classList.toggle('panel-open');
+    }
+
+    public isReady(): boolean {
+        return this.isInitialized;
+    }
+
+    private updateVisibilityForPlatform(): void {
+        if (platformManager.isQuest() || platformManager.isXRMode) {
+            this.hide();
+        } else {
+            this.show();
+        }
+    }
+
+    public static getInstance(): ModularControlPanel {
+        if (!ModularControlPanel.instance) {
+            ModularControlPanel.instance = new ModularControlPanel(document.body);
+        }
+        return ModularControlPanel.instance;
+    }
+
+    public dispose(): void {
+        this.unsubscribers.forEach(unsubscribe => unsubscribe());
+        this.validationDisplay.dispose();
+        if (this.updateTimeout !== null) {
+            window.clearTimeout(this.updateTimeout);
+        }
+        this.container.remove();
+        this.toggleButton.remove();
+        ModularControlPanel.instance = null;
+    }
+}
+
+// Export the class as default as well to maintain compatibility
+export default ModularControlPanel;
+----
+ui/controlPanelConfig.ts
+// Interface for UI control settings
+export interface SettingControl {
+    label: string;
+    type: 'slider' | 'toggle' | 'color' | 'select' | 'number' | 'text';
+    options?: string[]; // For select controls
+    min?: number;      // For sliders and number inputs
+    max?: number;      // For sliders and number inputs
+    step?: number;     // For sliders and number inputs
+    tooltip?: string;
+}
+
+export const settingsMap: Record<string, Record<string, SettingControl | Record<string, SettingControl>>> = {
+    visualization: {
+        nodes: {
+            baseColor: { label: 'Base Color', type: 'color', tooltip: 'The base color of the nodes.' },
+            metalness: { label: 'Metalness', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The metalness of the nodes.' },
+            opacity: { label: 'Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the nodes.' },
+            roughness: { label: 'Roughness', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The roughness of the nodes.' },
+            sizeRange: { label: 'Size Range', type: 'text', tooltip: 'Min and max size of the nodes (e.g., "200.0, 700.0").' },
+            quality: { label: 'Quality', type: 'select', options: ['low', 'medium', 'high'], tooltip: 'The quality level of the node geometry.' },
+            enableInstancing: { label: 'Enable Instancing', type: 'toggle', tooltip: 'Enable instanced rendering for improved performance.' },
+            enableHologram: { label: 'Enable Hologram', type: 'toggle', tooltip: 'Enable the hologram effect around nodes.' },
+            enableMetadataShape: { label: 'Enable Metadata Shape', type: 'toggle', tooltip: 'Enable a shape based on node metadata.' },
+            enableMetadataVisualization: { label: 'Enable Metadata Visualization', type: 'toggle', tooltip: 'Enable visualization of node metadata.' },
+        },
+        edges: {
+            arrowSize: { label: 'Arrow Size', type: 'number', min: 0, tooltip: 'The size of the arrowheads on edges.' },
+            baseWidth: { label: 'Base Width', type: 'number', min: 0, tooltip: 'The base width of the edges.' },
+            color: { label: 'Color', type: 'color', tooltip: 'The color of the edges.' },
+            enableArrows: { label: 'Enable Arrows', type: 'toggle', tooltip: 'Enable arrowheads on edges.' },
+            opacity: { label: 'Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the edges.' },
+            widthRange: { label: 'Width Range', type: 'text', tooltip: 'Min and max width of the edges (e.g., "2.0, 3.0").' },
+            quality: { label: 'Quality', type: 'select', options: ['low', 'medium', 'high'], tooltip: 'The quality level of the edge geometry.' },
+            enableFlowEffect: { label: 'Flow Effect', type: 'toggle', tooltip: 'Enable flowing animation on edges.' },
+            flowSpeed: { label: 'Flow Speed', type: 'slider', min: 0, max: 2, step: 0.1, tooltip: 'Speed of the flow animation.' },
+            flowIntensity: { label: 'Flow Intensity', type: 'slider', min: 0, max: 1, step: 0.1, tooltip: 'Intensity of the flow effect.' },
+            glowStrength: { label: 'Glow Strength', type: 'slider', min: 0, max: 1, step: 0.1, tooltip: 'Strength of the edge glow effect.' },
+            distanceIntensity: { label: 'Distance Intensity', type: 'slider', min: 0, max: 1, step: 0.1, tooltip: 'How edge appearance changes with distance.' },
+            useGradient: { label: 'Use Gradient', type: 'toggle', tooltip: 'Enable gradient coloring on edges.' },
+            gradientColors: { label: 'Gradient Colors', type: 'text', tooltip: 'Start and end colors for the gradient (e.g., "#ff0000, #00ff00").' },
+        },
+        physics: {
+            attractionStrength: { label: 'Attraction Strength', type: 'slider', min: 0, max: 0.1, step: 0.001, tooltip: 'The strength of the attraction force between connected nodes.' },
+            boundsSize: { label: 'Bounds Size', type: 'number', min: 0, tooltip: 'The size of the bounding box that contains the nodes.' },
+            collisionRadius: { label: 'Collision Radius', type: 'number', min: 0, tooltip: 'The radius within which nodes will collide.' },
+            damping: { label: 'Damping', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The damping factor that slows down node movement.' },
+            enableBounds: { label: 'Enable Bounds', type: 'toggle', tooltip: 'Enable a bounding box to contain the nodes.' },
+            enabled: { label: 'Enabled', type: 'toggle', tooltip: 'Enable/disable the physics simulation.' },
+            iterations: { label: 'Iterations', type: 'number', min: 1, tooltip: 'The number of physics simulation iterations per frame.' },
+            maxVelocity: { label: 'Max Velocity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The maximum velocity of the nodes.' },
+            repulsionStrength: { label: 'Repulsion Strength', type: 'number', min: 0, tooltip: 'The strength of the repulsion force between nodes.' },
+            springStrength: { label: 'Spring Strength', type: 'slider', min: 0, max: 0.1, step: 0.001, tooltip: 'The strength of the spring force that keeps connected nodes together.' },
+        },
+        rendering: {
+            ambientLightIntensity: { label: 'Ambient Light', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The intensity of the ambient light.' },
+            backgroundColor: { label: 'Background Color', type: 'color', tooltip: 'The background color of the scene.' },
+            directionalLightIntensity: { label: 'Directional Light', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The intensity of the directional light.' },
+            enableAmbientOcclusion: { label: 'Ambient Occlusion', type: 'toggle', tooltip: 'Enable ambient occlusion for more realistic shadows.' },
+            enableAntialiasing: { label: 'Antialiasing', type: 'toggle', tooltip: 'Enable antialiasing for smoother edges.' },
+            enableShadows: { label: 'Shadows', type: 'toggle', tooltip: 'Enable shadows (can be performance-intensive).' },
+            environmentIntensity: { label: 'Environment Light', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The intensity of the environment lighting.' },
+            shadowMapSize: { label: 'Shadow Map Size', type: 'select', options: ['1024', '2048', '4096'], tooltip: 'Resolution of shadow maps.' },
+            shadowBias: { label: 'Shadow Bias', type: 'slider', min: -0.01, max: 0.01, step: 0.0001, tooltip: 'Bias value to prevent shadow acne.' },
+            context: { label: 'Context', type: 'select', options: ['desktop', 'ar'], tooltip: 'Rendering context (desktop or AR).' },
+        },
+        animations: {
+            enableMotionBlur: { label: 'Motion Blur', type: 'toggle', tooltip: 'Enable motion blur for smoother animations.' },
+            enableNodeAnimations: { label: 'Node Animations', type: 'toggle', tooltip: 'Enable animations on the nodes.' },
+            motionBlurStrength: { label: 'Motion Blur Strength', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The strength of the motion blur effect.' },
+            selectionWaveEnabled: { label: "Selection Wave", type: "toggle", tooltip: 'Enable wave effect on node selection.' },
+            pulseEnabled: { label: "Pulse", type: "toggle", tooltip: 'Enable node pulsing.' },
+            pulseSpeed: { label: "Pulse Speed", type: 'slider', min: 0, max: 2, step: 0.1, tooltip: 'Speed of node pulsing.' },
+            pulseStrength: { label: "Pulse Strength", type: 'slider', min: 0, max: 1, step: 0.1, tooltip: 'Strength of node pulsing.' },
+            waveSpeed: { label: "Wave Speed", type: 'slider', min: 0, max: 2, step: 0.1, tooltip: 'Speed of the selection wave.' },
+        },
+        labels: {
+            desktopFontSize: { label: 'Font Size', type: 'number', min: 1, tooltip: 'The font size for labels on desktop.' },
+            enableLabels: { label: 'Enable Labels', type: 'toggle', tooltip: 'Enable/disable node labels.' },
+            textColor: { label: 'Text Color', type: 'color', tooltip: 'The color of the label text.' },
+            textOutlineColor: { label: 'Outline Color', type: 'color', tooltip: 'The color of the label text outline.' },
+            textOutlineWidth: { label: 'Outline Width', type: 'number', min: 0, tooltip: 'The width of the label text outline.' },
+            textResolution: { label: 'Resolution', type: 'number', min: 1, tooltip: 'The resolution of the label text.' },
+            textPadding: { label: 'Padding', type: 'number', min: 0, tooltip: 'Padding around label text.' },
+            billboardMode: { label: 'Billboard Mode', type: 'select', options: ['camera', 'vertical'], tooltip: 'Orientation of labels.' },
+        },
+        bloom: {
+            edgeBloomStrength: { label: 'Edge Bloom', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The strength of the bloom effect on edges.' },
+            enabled: { label: 'Enable Bloom', type: 'toggle', tooltip: 'Enable/disable the bloom effect.' },
+            environmentBloomStrength: { label: 'Environment Bloom', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The strength of the bloom effect on the environment.' },
+            nodeBloomStrength: { label: 'Node Bloom', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The strength of the bloom effect on nodes.' },
+            radius: { label: 'Radius', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The radius of the bloom effect.' },
+            strength: { label: 'Strength', type: 'slider', min: 0, max: 5, step: 0.1, tooltip: 'The overall strength of the bloom effect.' },
+            threshold: { label: 'Threshold', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The brightness threshold for the bloom effect.' },
+        },
+        hologram: {
+            ringCount: { label: 'Ring Count', type: 'number', min: 0, tooltip: 'The number of rings in the hologram effect.' },
+            ringColor: { label: 'Ring Color', type: 'color', tooltip: 'The color of the hologram rings.' },
+            ringOpacity: { label: 'Ring Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the hologram rings.' },
+            sphereSizes: { label: 'Sphere Sizes', type: 'text', tooltip: 'Sizes of the hologram spheres (e.g., "40.0, 80.0").' },
+            ringRotationSpeed: { label: 'Ring Speed', type: 'number', min: 0, tooltip: 'The rotation speed of the hologram rings.' },
+            enableBuckminster: { label: 'Buckminster', type: 'toggle', tooltip: 'Enable the Buckminsterfullerene hologram effect.' },
+            buckminsterSize: { label: 'Buckminster Size', type: 'number', min: 0, tooltip: 'The size of the Buckminsterfullerene hologram.' },
+            buckminsterOpacity: { label: 'Buckminster Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the Buckminsterfullerene hologram.' },
+            enableGeodesic: { label: 'Geodesic', type: 'toggle', tooltip: 'Enable the geodesic sphere hologram effect.' },
+            geodesicSize: { label: 'Geodesic Size', type: 'number', min: 0, tooltip: 'The size of the geodesic sphere hologram.' },
+            geodesicOpacity: { label: 'Geodesic Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the geodesic sphere hologram.' },
+            enableTriangleSphere: { label: 'Triangle Sphere', type: 'toggle', tooltip: 'Enable the triangle sphere hologram effect.' },
+            triangleSphereSize: { label: 'Triangle Size', type: 'number', min: 0, tooltip: 'The size of the triangle sphere hologram.' },
+            triangleSphereOpacity: { label: 'Triangle Opacity', type: 'slider', min: 0, max: 1, step: 0.01, tooltip: 'The opacity of the triangle sphere hologram.' },
+            globalRotationSpeed: { label: 'Global Speed', type: 'number', min: 0, tooltip: 'The global rotation speed of the hologram.' },
+        },
+    },
+    system: {
+        websocket: {
+            reconnectAttempts: { label: 'Reconnect Attempts', type: 'number', min: 0, tooltip: 'Number of reconnection attempts.' },
+            reconnectDelay: { label: 'Reconnect Delay', type: 'number', min: 1000, tooltip: 'Delay between reconnection attempts (ms).' },
+            binaryChunkSize: { label: 'Binary Chunk Size', type: 'number', min: 1, tooltip: 'Size of binary message chunks.' },
+            compressionEnabled: { label: 'Enable Compression', type: 'toggle', tooltip: 'Enable WebSocket message compression.' },
+            compressionThreshold: { label: 'Compression Threshold', type: 'number', min: 0, tooltip: 'Message size threshold for compression.' },
+            updateRate: { label: 'Update Rate', type: 'number', min: 1, tooltip: 'Rate of WebSocket updates (Hz).' },
+        },
+        debug: {
+            enabled: { label: 'Enable Debug', type: 'toggle', tooltip: 'Enable debug mode.' },
+            enableDataDebug: { label: 'Data Debug', type: 'toggle', tooltip: 'Enable data debugging.' },
+            enableWebsocketDebug: { label: 'WebSocket Debug', type: 'toggle', tooltip: 'Enable WebSocket debugging.' },
+            logBinaryHeaders: { label: 'Log Binary Headers', type: 'toggle', tooltip: 'Log binary message headers.' },
+            logFullJson: { label: 'Log Full JSON', type: 'toggle', tooltip: 'Log complete JSON messages.' },
+            logLevel: { label: 'Log Level', type: 'select', options: ['error', 'warn', 'info', 'debug', 'trace'], tooltip: 'Logging level.' },
+            logFormat: { label: 'Log Format', type: 'text', tooltip: 'Format string for log messages.' },
+        },
+    },
+};
+----
+websocket/websocketService.ts
+import { createLogger } from '../core/logger';
+import { buildWsUrl } from '../core/api';
+import { debugState } from '../core/debugState';
+import pako from 'pako';
+
+const logger = createLogger('WebSocketService');
+
+// Helper for conditional debug logging
+function debugLog(message: string, ...args: any[]) {
+    if (debugState.isWebsocketDebugEnabled()) {
+        logger.debug(message, ...args);
+    }
+}
+
+// Compression settings
+const COMPRESSION_THRESHOLD = 1024; // Only compress messages larger than 1KB
+
+enum ConnectionState {
+    DISCONNECTED = 'disconnected',
+    CONNECTING = 'connecting',
+    CONNECTED = 'connected',
+    RECONNECTING = 'reconnecting',
+    FAILED = 'failed'
+}
+
+// Interface for node updates from user interaction
+interface NodeUpdate {
+    id: string;          // Node ID (converted to u32 for binary protocol)
+    position: {          // Current position
+        x: number;
+        y: number;
+        z: number;
+    };
+    velocity?: {         // Optional velocity (defaults to 0 if not provided)
+        x: number;
+        y: number;
+        z: number;
+    };
+}
+
+// Interface matching server's binary protocol format (28 bytes per node):
+// - id: 4 bytes (u32)
+// - position: 12 bytes (3 × f32)
+// - velocity: 12 bytes (3 × f32)
+interface BinaryNodeData {
+    id: number;
+    position: [number, number, number];
+    velocity: [number, number, number];
+}
+
+type BinaryMessageCallback = (nodes: BinaryNodeData[]) => void;
+
+export class WebSocketService {
+    private static instance: WebSocketService | null = null;
+    private ws: WebSocket | null = null;
+    private binaryMessageCallback: BinaryMessageCallback | null = null;
+    private reconnectTimeout: number | null = null;
+    private connectionState: ConnectionState = ConnectionState.DISCONNECTED;
+    private reconnectAttempts: number = 0;
+    private readonly _maxReconnectAttempts: number = 5;
+    private readonly initialReconnectDelay: number = 5000; // 5 seconds
+    private readonly maxReconnectDelay: number = 60000; // 60 seconds
+    private url: string = '';
+    private connectionStatusHandler: ((status: boolean) => void) | null = null;
+
+    private constructor() {
+        // Don't automatically connect - wait for explicit connect() call
+    }
+
+    public connect(): Promise<void> {
+        if (this.connectionState !== ConnectionState.DISCONNECTED) {
+            logger.warn('WebSocket already connected or connecting');
+            // If already connecting, return a promise that resolves when connected
+            if (this.connectionState === ConnectionState.CONNECTING) {
+                return new Promise((resolve) => {
+                    const checkConnection = () => {
+                        if (this.connectionState === ConnectionState.CONNECTED) {
+                            resolve();
+                        } else {
+                            setTimeout(checkConnection, 100);
+                        }
+                    };
+                    checkConnection();
+                });
+            }
+            return Promise.resolve();
+        }
+        return this.initializeWebSocket();
+    }
+
+    private async initializeWebSocket(): Promise<void> {
+        if (this.connectionState !== ConnectionState.DISCONNECTED) {
+            return;
+        }
+
+        try {
+            this.url = buildWsUrl();
+            
+            if (!this.url) {
+                throw new Error('No WebSocket URL available');
+            }
+
+            this.connectionState = ConnectionState.CONNECTING;
+            return new Promise((resolve, reject) => {
+                this.ws = new WebSocket(this.url);
+                this.setupWebSocketHandlers();
+                
+                // Add one-time open handler to resolve the promise
+                this.ws!.addEventListener('open', () => resolve(), { once: true });
+                // Add one-time error handler to reject the promise
+                this.ws!.addEventListener('error', (e) => reject(e), { once: true });
+            });
+        } catch (error) {
+            logger.error('Failed to initialize WebSocket:', error);
+            this.handleReconnect();
+            return Promise.reject(error);
+        }
+    }
+
+    private getReconnectDelay(): number {
+        // Exponential backoff with max delay
+        const delay = Math.min(
+            this.initialReconnectDelay * Math.pow(2, this.reconnectAttempts),
+            this.maxReconnectDelay
+        );
+        // Add some jitter
+        return delay + (Math.random() * 1000);
+    }
+
+    private setupWebSocketHandlers(): void {
+        if (!this.ws) return;
+        
+        this.ws.binaryType = 'arraybuffer';
+
+        this.ws.onopen = (): void => {
+            logger.info(`WebSocket connected successfully to ${this.url}`);
+            this.connectionState = ConnectionState.CONNECTED;
+            this.reconnectAttempts = 0;
+
+            if (this.connectionStatusHandler) {
+                this.connectionStatusHandler(true);
+                debugLog('Connection status handler notified: connected');
+            }
+
+            // Send request for position updates after connection
+            debugLog('Requesting position updates');
+            this.sendMessage({ type: 'requestInitialData' });
+        };
+
+        this.ws.onerror = (event: Event): void => {
+            logger.error('WebSocket error:', event);
+            if (this.ws?.readyState === WebSocket.CLOSED) {
+                this.handleReconnect();
+            }
+        };
+
+        this.ws.onclose = (event: CloseEvent): void => {
+            logger.warn(`WebSocket closed with code ${event.code}: ${event.reason}`);
+            
+            if (this.connectionStatusHandler) {
+                this.connectionStatusHandler(false);
+            }
+            
+            this.handleReconnect();
+        };
+
+        this.ws.onmessage = (event: MessageEvent) => {
+            try {
+                if (event.data instanceof ArrayBuffer) {
+                    debugLog('Received binary position update');
+                    this.handleBinaryMessage(event.data);
+                } else if (typeof event.data === 'string') {
+                    try {
+                        const message = JSON.parse(event.data);
+                        if (message.type === 'connection_established' || message.type === 'updatesStarted') {
+                            logger.info(`WebSocket ${message.type}`);
+                        } else {
+                            logger.warn('Unknown message type:', {
+                                type: message.type,
+                                message
+                            });
+                        }
+                    } catch (error) {
+                        logger.error('Failed to parse WebSocket message:', error);
+                    }
+                }
+            } catch (error) {
+                logger.error('Critical error in message handler:', error);
+            }
+        };
+    }
+
+    private readonly MessageType = {
+        PositionVelocityUpdate: 0x01
+    } as const;
+
+    private tryDecompress(buffer: ArrayBuffer): ArrayBuffer {
+        try {
+            const decompressed = pako.inflate(new Uint8Array(buffer));
+            if (decompressed.length < 8 || decompressed.length % 4 !== 0) {
+                return buffer;
+            }
+            return decompressed.buffer;
+        } catch (error) {
+            return buffer;
+        }
+    }
+
+    private compressIfNeeded(buffer: ArrayBuffer): ArrayBuffer {
+        if (buffer.byteLength > COMPRESSION_THRESHOLD) {
+            try {
+                const compressed = pako.deflate(new Uint8Array(buffer));
+                return compressed.buffer;
+            } catch (error) {
+                logger.warn('Compression failed, using original data:', error);
+                return buffer;
+            }
+        }
+        return buffer;
+    }
+
+    private handleBinaryMessage(buffer: ArrayBuffer): void {
+        try {
+            debugLog('Processing binary message:', { size: buffer.byteLength });
+            const decompressedBuffer = this.tryDecompress(buffer);
+            debugLog('After decompression:', { size: decompressedBuffer.byteLength });
+            
+            if (!decompressedBuffer || decompressedBuffer.byteLength < 8) {
+                throw new Error(`Invalid buffer size: ${decompressedBuffer?.byteLength ?? 0} bytes`);
+            }
+
+            const dataView = new DataView(decompressedBuffer);
+            let offset = 0;
+
+            const messageType = dataView.getUint32(offset, true);
+            debugLog('Binary message type:', { type: messageType });
+            offset += 4;
+
+            if (messageType !== this.MessageType.PositionVelocityUpdate) {
+                logger.warn('Unexpected binary message type:', messageType);
+                return;
+            }
+
+            const nodeCount = dataView.getUint32(offset, true);
+            debugLog('Node count:', { count: nodeCount });
+            offset += 4;
+
+            const expectedSize = 8 + (nodeCount * 28);
+            if (decompressedBuffer.byteLength !== expectedSize) {
+                throw new Error(`Invalid buffer size: ${decompressedBuffer.byteLength} bytes (expected ${expectedSize})`);
+            }
+
+            const nodes: BinaryNodeData[] = [];
+            
+            for (let i = 0; i < nodeCount; i++) {
+                const id = dataView.getUint32(offset, true);
+                offset += 4;
+
+                const position: [number, number, number] = [
+                    dataView.getFloat32(offset, true),
+                    dataView.getFloat32(offset + 4, true),
+                    dataView.getFloat32(offset + 8, true)
+                ];
+                offset += 12;
+
+                const velocity: [number, number, number] = [
+                    dataView.getFloat32(offset, true),
+                    dataView.getFloat32(offset + 4, true),
+                    dataView.getFloat32(offset + 8, true)
+                ];
+                offset += 12;
+
+                const sanitizedPosition = position.map(v => isNaN(v) ? 0 : v) as [number, number, number];
+                const sanitizedVelocity = velocity.map(v => isNaN(v) ? 0 : v) as [number, number, number];
+
+                nodes.push({ id, position: sanitizedPosition, velocity: sanitizedVelocity });
+            }
+
+            if (nodes.length > 0 && this.binaryMessageCallback) {
+                debugLog('Calling binary message callback with nodes:', { count: nodes.length });
+                this.binaryMessageCallback(nodes);
+            } else {
+                debugLog('No nodes to process or no callback registered', {
+                    nodesLength: nodes.length,
+                    hasCallback: !!this.binaryMessageCallback
+                });
+            }
+        } catch (error) {
+            logger.error('Failed to process binary message:', error);
+        }
+    }
+
+    private handleReconnect(): void {
+        const wasConnected = this.connectionState === ConnectionState.CONNECTED;
+        
+        this.connectionState = ConnectionState.DISCONNECTED;
+        this.binaryMessageCallback = null;
+        
+        if (this.reconnectTimeout !== null) {
+            window.clearTimeout(this.reconnectTimeout);
+            this.reconnectTimeout = null;
+        }
+        
+        if (this.reconnectAttempts < this._maxReconnectAttempts &&
+            (wasConnected || this.reconnectAttempts === 0)) {
+            
+            this.reconnectAttempts++;
+            const delay = this.getReconnectDelay();
+            
+            this.connectionState = ConnectionState.RECONNECTING;
+            
+            this.reconnectTimeout = window.setTimeout(async () => {
+                this.reconnectTimeout = null;
+                try {
+                    await this.connect();
+                } catch (error) {
+                    logger.error('Reconnection attempt failed:', error);
+                }
+            }, delay);
+        } else {
+            this.handleReconnectFailure();
+        }
+    }
+
+    private handleReconnectFailure(): void {
+        this.connectionState = ConnectionState.FAILED;
+        if (this.connectionStatusHandler) {
+            this.connectionStatusHandler(false);
+        }
+    }
+
+    public static getInstance(): WebSocketService {
+        if (!WebSocketService.instance) {
+            WebSocketService.instance = new WebSocketService();
+        }
+        return WebSocketService.instance;
+    }
+
+    public onBinaryMessage(callback: BinaryMessageCallback): void {
+        this.binaryMessageCallback = callback;
+    }
+
+    public getConnectionStatus(): ConnectionState {
+        return this.connectionState;
+    }
+
+    public sendMessage(message: any): void {
+        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
+            try {
+                this.ws.send(JSON.stringify(message));
+            } catch (error) {
+                logger.error('Error sending message:', error);
+            }
+        }
+    }
+
+    public sendNodeUpdates(updates: NodeUpdate[]): void {
+        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
+            logger.warn('WebSocket not connected, cannot send node updates');
+            return;
+        }
+
+        // Limit to 2 nodes per update as per server requirements
+        if (updates.length > 2) {
+            logger.warn('Too many nodes in update, limiting to first 2');
+            updates = updates.slice(0, 2);
+        }
+
+        const buffer = new ArrayBuffer(8 + updates.length * 28);
+        const dataView = new DataView(buffer);
+        let offset = 0;
+
+        dataView.setUint32(offset, this.MessageType.PositionVelocityUpdate, true);
+        offset += 4;
+
+        dataView.setUint32(offset, updates.length, true);
+        offset += 4;
+
+        updates.forEach(update => {
+            const id = parseInt(update.id, 10);
+            if (isNaN(id)) {
+                logger.warn('Invalid node ID:', update.id);
+                return;
+            }
+            dataView.setUint32(offset, id, true);
+            offset += 4;
+
+            dataView.setFloat32(offset, update.position.x, true);
+            dataView.setFloat32(offset + 4, update.position.y, true);
+            dataView.setFloat32(offset + 8, update.position.z, true);
+            offset += 12;
+
+            dataView.setFloat32(offset, update.velocity?.x ?? 0, true);
+            dataView.setFloat32(offset + 4, update.velocity?.y ?? 0, true);
+            dataView.setFloat32(offset + 8, update.velocity?.z ?? 0, true);
+            offset += 12;
+        });
+
+        const finalBuffer = this.compressIfNeeded(buffer);
+        this.ws.send(finalBuffer);
+    }
+
+    public onConnectionStatusChange(handler: (status: boolean) => void): void {
+        this.connectionStatusHandler = handler;
+        if (this.connectionState === ConnectionState.CONNECTED && handler) {
+            handler(true);
+        }
+    }
+
+    public dispose(): void {
+        if (this.reconnectTimeout !== null) {
+            window.clearTimeout(this.reconnectTimeout);
+            this.reconnectTimeout = null;
+        }
+        
+        if (this.ws) {
+            this.ws.close();
+            this.ws = null;
+        }
+        
+        this.binaryMessageCallback = null;
+        this.connectionStatusHandler = null;
+        this.connectionState = ConnectionState.DISCONNECTED;
+        WebSocketService.instance = null;
+    }
+
+    public close(): void {
+        if (this.ws) {
+            this.ws.close();
+            this.ws = null;
+        }
+    }
+}
+----
+platform/platformManager.ts
+import { Platform, PlatformCapabilities } from '../core/types';
+import { createLogger } from '../core/utils';
+import { Settings } from '../types/settings';
+import { XRSessionMode } from '../types/xr';
+import { SceneManager } from '../rendering/scene';
+
+const logger = createLogger('PlatformManager');
+
+declare global {
+  interface Navigator {
+    xr?: XRSystem;
+  }
+}
+
+class BrowserEventEmitter {
+  private listeners: { [event: string]: Function[] } = {};
+
+  on(event: string, listener: Function): void {
+    if (!this.listeners[event]) {
+      this.listeners[event] = [];
+    }
+    this.listeners[event].push(listener);
+  }
+
+  emit(event: string, ...args: any[]): void {
+    const eventListeners = this.listeners[event];
+    if (eventListeners) {
+      eventListeners.forEach(listener => listener(...args));
+    }
+  }
+
+  removeAllListeners(): void {
+    this.listeners = {};
+  }
+}
+
+export class PlatformManager extends BrowserEventEmitter {
+  private static instance: PlatformManager | null = null;
+  private platform: Platform;
+  private capabilities: PlatformCapabilities;
+  private initialized: boolean = false;
+  private _isXRMode: boolean = false;
+  private sceneManager: SceneManager | null = null;
+
+  private constructor() {
+    super();
+    this.platform = 'desktop';
+    this.capabilities = {
+      xrSupported: false,
+      webglSupported: false,
+      websocketSupported: false,
+      webxr: false,
+      handTracking: false,
+      planeDetection: false
+    };
+  }
+
+  static getInstance(): PlatformManager {
+    if (!PlatformManager.instance) {
+      PlatformManager.instance = new PlatformManager();
+    }
+    return PlatformManager.instance;
+  }
+
+  public setSceneManager(sceneManager: SceneManager): void {
+    this.sceneManager = sceneManager;
+  }
+
+  async initialize(settings: Settings): Promise<void> {
+    if (this.initialized) {
+      return;
+    }
+
+    this.detectPlatform();
+    await this.detectCapabilities();
+    
+    // Auto-enable XR mode for Quest devices unless explicitly disabled in settings
+    if (this.isQuest()) {
+      this._isXRMode = settings.xr?.mode !== 'inline';
+      if (this._isXRMode) {
+        this.capabilities.xrSupported = await this.checkXRSupport('immersive-ar');
+      }
+    }
+    // For other platforms, initialize based on settings
+    else if (settings.xr?.mode) {
+      this._isXRMode = true;
+      this.capabilities.xrSupported = await this.checkXRSupport(
+        settings.xr?.mode as XRSessionMode
+      );
+    }
+    
+    this.initialized = true;
+    logger.log('Platform manager initialized:', {
+      platform: this.platform,
+      isXRMode: this._isXRMode,
+      capabilities: this.capabilities
+    });
+  }
+
+  private detectPlatform(): void {
+    // Try modern User-Agent Client Hints API first
+    if ('userAgentData' in navigator) {
+      const brands = (navigator as any).userAgentData.brands;
+      const isOculusDevice = brands.some((b: any) =>
+        /oculus|meta|quest/i.test(b.brand)
+      );
+      if (isOculusDevice) {
+        this.platform = 'quest';
+        logger.log('Quest platform detected via userAgentData');
+        return;
+      }
+    }
+
+    // Fallback to traditional user agent detection
+    const userAgent = navigator.userAgent.toLowerCase();
+    const isQuest = userAgent.includes('quest') ||
+                    userAgent.includes('oculus') ||
+                    userAgent.includes('oculusbrowser') ||
+                    userAgent.includes('meta');
+    
+    if (isQuest) {
+      this.platform = 'quest';
+      logger.log('Quest platform detected via userAgent');
+    } else if (userAgent.includes('chrome') || userAgent.includes('firefox') || userAgent.includes('safari')) {
+      this.platform = 'browser';
+    } else {
+      this.platform = 'desktop';
+    }
+  }
+
+  private async detectCapabilities(): Promise<void> {
+    // WebXR support
+    if ('xr' in navigator && navigator.xr) {
+      try {
+        // For Quest devices, prioritize checking immersive-ar support
+        if (this.isQuest()) {
+          this.capabilities.xrSupported = await navigator.xr.isSessionSupported('immersive-ar');
+        } else {
+          // For other platforms, check both VR and AR
+          this.capabilities.xrSupported = 
+            await navigator.xr.isSessionSupported('immersive-ar') ||
+            await navigator.xr.isSessionSupported('immersive-vr');
+        }
+        
+        this.capabilities.webxr = this.capabilities.xrSupported;
+        this.capabilities.handTracking = this.capabilities.xrSupported;
+        this.capabilities.planeDetection = this.capabilities.xrSupported;
+      } catch (error) {
+        logger.warn('WebXR not supported:', error);
+        this.capabilities.xrSupported = false;
+        this.capabilities.webxr = false;
+        this.capabilities.handTracking = false;
+        this.capabilities.planeDetection = false;
+      }
+    }
+
+    // WebGL support
+    try {
+      const canvas = document.createElement('canvas');
+      const gl = canvas.getContext('webgl2') || canvas.getContext('webgl');
+      this.capabilities.webglSupported = !!gl;
+    } catch (error) {
+      logger.warn('WebGL not supported:', error);
+      this.capabilities.webglSupported = false;
+    }
+
+    // WebSocket support
+    this.capabilities.websocketSupported = 'WebSocket' in window;
+
+    logger.log('Platform capabilities detected:', this.capabilities);
+  }
+
+  getPlatform(): Platform {
+    return this.platform;
+  }
+
+  getCapabilities(): PlatformCapabilities {
+    return { ...this.capabilities };
+  }
+
+  isDesktop(): boolean {
+    return this.platform === 'desktop';
+  }
+
+  isQuest(): boolean {
+    return this.platform === 'quest';
+  }
+
+  isBrowser(): boolean {
+    return this.platform === 'browser';
+  }
+
+  isXRSupported(): boolean {
+    return this.capabilities.xrSupported;
+  }
+
+  isWebGLSupported(): boolean {
+    return this.capabilities.webglSupported;
+  }
+
+  isWebSocketSupported(): boolean {
+    return this.capabilities.websocketSupported;
+  }
+
+  async requestXRSession(mode: XRSessionMode = 'immersive-ar'): Promise<XRSession | null> {
+    if (!this.capabilities.xrSupported || !('xr' in navigator) || !navigator.xr) {
+      logger.warn('WebXR not supported');
+      return null;
+    }
+
+    try {
+      const requiredFeatures: string[] = ['local-floor'];
+      const optionalFeatures: string[] = ['hand-tracking'];
+
+      // Add mode-specific features
+      if (mode === 'immersive-ar') {
+        requiredFeatures.push('hit-test');
+        optionalFeatures.push('plane-detection');
+      } else if (mode === 'immersive-vr') {
+        optionalFeatures.push('bounded-floor');
+      }
+
+      const features: XRSessionInit = {
+        requiredFeatures,
+        optionalFeatures
+      };
+
+      const session = await navigator.xr.requestSession(mode, features);
+
+      session.addEventListener('end', () => {
+        logger.log('XR session ended');
+        this.emit('xrsessionend');
+      });
+
+      logger.log(`XR session started in ${mode} mode`);
+      return session;
+    } catch (error) {
+      logger.error('Failed to start XR session:', error);
+      return null;
+    }
+  }
+
+  async checkXRSupport(mode: XRSessionMode = 'immersive-ar'): Promise<boolean> {
+    if ('xr' in navigator && navigator.xr) {
+      try {
+        const supported = await navigator.xr.isSessionSupported(mode);
+        if (supported) {
+          this.capabilities.webxr = true;
+          this.capabilities.handTracking = true;
+          this.capabilities.planeDetection = mode === 'immersive-ar';
+          this.emit('xrdevicechange', true);
+          logger.log('WebXR supported for mode:', mode);
+          return true;
+        }
+      } catch (error) {
+        logger.warn('WebXR check failed:', error);
+      }
+    }
+    this.capabilities.webxr = false;
+    this.capabilities.handTracking = false;
+    this.capabilities.planeDetection = false;
+    this.emit('xrdevicechange', false);
+    return false;
+  }
+
+  dispose(): void {
+    this.removeAllListeners();
+    this.initialized = false;
+    PlatformManager.instance = null;
+  }
+
+  get isXRMode(): boolean {
+    return this._isXRMode;
+  }
+
+  setXRMode(enabled: boolean): void {
+    this._isXRMode = enabled;
+    // Update camera layers
+    const camera = this.sceneManager?.getCamera();
+    if (camera) {
+      if (enabled) {
+        camera.layers.enable(1);  // Enable XR layer
+        camera.layers.disable(0); // Disable desktop layer
+      } else {
+        camera.layers.enable(0);  // Enable desktop layer
+        camera.layers.disable(1); // Disable XR layer
+      }
+    }
+    this.emit('xrmodechange', enabled);
+  }
+}
+
+export const platformManager = PlatformManager.getInstance();
+
+----
+types/env.d.ts
+/// <reference types="vite/client" />
+
+interface ImportMetaEnv {
+  readonly VITE_APP_TITLE: string;
+  readonly DEV: boolean;
+  readonly PROD: boolean;
+  readonly MODE: string;
+}
+
+interface ImportMeta {
+  readonly env: ImportMetaEnv;
+}
+
+----
+types/gestures.ts
+export enum HandGestureType {
+    None = 'none',
+    Pinch = 'pinch',
+    Grab = 'grab',
+    Point = 'point',
+    Wave = 'wave'
+}
+
+----
+types/metadata.ts
+export interface NodeMetadata {
+    id: string;
+    name: string;
+    commitAge: number;        // Age in days
+    hyperlinkCount: number;   // Number of hyperlinks
+    fileSize: number;         // Size in bytes
+    nodeSize: number;         // Normalized node size (0-50)
+    importance: number;       // Normalized importance (0-1)
+    position: {
+        x: number;
+        y: number;
+        z: number;
+    };
+}
+
+export interface HologramSettings {
+    enabled: boolean;
+    desktopQuality: 'low' | 'medium' | 'high';
+    xrQuality: 'low' | 'medium';
+    ringCount: number;
+    ringSizes: number[];
+    ringOpacity: number;
+    ringColor: string;
+    ringRotationSpeed: number;
+    enableBuckminster: boolean;
+    buckminsterScale: number;
+    buckminsterOpacity: number;
+    enableGeodesic: boolean;
+    geodesicScale: number;
+    geodesicOpacity: number;
+    enableTriangleSphere: boolean;
+    triangleSphereScale: number;
+    triangleSphereOpacity: number;
+    globalRotationSpeed: number;
+    wireframeThickness: number;
+}
+
+export interface LabelSettings {
+    textRenderingMode: 'sdf' | 'bitmap';
+    textResolution: number;
+    textPadding: number;
+    textOutlineWidth: number;
+    textOutlineColor: string;
+    billboardMode: 'camera' | 'vertical';
+    desktopFontSize: number;
+    enableLabels: boolean;
+    textColor: string;
+}
+
+// Alias for backward compatibility and clarity
+export type Metadata = NodeMetadata;
+----
+types/nostr.d.ts
+interface NostrProvider {
+    /**
+     * Get the user's public key from the Nostr extension
+     * @returns Promise that resolves to the public key as a hex string
+     */
+    getPublicKey(): Promise<string>;
+
+    /**
+     * Sign an event with the user's private key
+     * @param event The event to sign
+     * @returns Promise that resolves to the signed event
+     */
+    signEvent(event: any): Promise<any>;
+
+    /**
+     * Get the relay URLs from the extension
+     * @returns Promise that resolves to an array of relay URLs
+     */
+    getRelays?(): Promise<string[]>;
+}
+
+declare global {
+    interface Window {
+        nostr?: NostrProvider;
+    }
+}
+
+export {};
+----
+types/settings.ts
+// Re-export everything from base
+export * from './settings/base';
+
+----
+types/webxr.d.ts
+/**
+ * WebXR API type extensions
+ */
+
+declare module 'three' {
+  interface Object3DEventMap {
+    connected: XRControllerEvent;
+    disconnected: XRControllerEvent;
+  }
+}
+
+interface XRControllerEvent extends THREE.Event {
+  type: 'connected' | 'disconnected';
+  data: XRInputSource;
+}
+
+interface XRLightEstimate {
+  primaryLightIntensity?: { value: number };
+  primaryLightDirection?: { x: number; y: number; z: number };
+}
+
+// Extend existing WebXR types
+declare global {
+  interface XRFrame {
+    // Make getLightEstimate optional
+    getLightEstimate?(): XRLightEstimate | null;
+    getHitTestResults(hitTestSource: XRHitTestSource): XRHitTestResult[];
+    getViewerPose(referenceSpace: XRReferenceSpace): XRViewerPose | null;
+    getPose(space: XRSpace, baseSpace: XRReferenceSpace): XRPose | null;
+  }
+
+  interface XRSession {
+    requestReferenceSpace(type: XRReferenceSpaceType): Promise<XRReferenceSpace>;
+    // Make requestHitTestSource non-optional
+    requestHitTestSource(options: XRHitTestOptionsInit): Promise<XRHitTestSource>;
+    end(): Promise<void>;
+    addEventListener(type: string, listener: EventListener): void;
+    removeEventListener(type: string, listener: EventListener): void;
+  }
+
+  interface XRHitTestOptionsInit {
+    space: XRSpace;
+    offsetRay?: XRRay;
+  }
+
+  interface XRHitTestSource {
+    cancel(): void;
+  }
+
+  interface XRHitTestResult {
+    getPose(baseSpace: XRSpace): XRPose | null;
+  }
+
+  interface XRPose {
+    transform: XRRigidTransform;
+  }
+
+  interface XRViewerPose extends XRPose {
+    views: XRView[];
+  }
+
+  interface XRView {
+    projectionMatrix: Float32Array;
+    transform: XRRigidTransform;
+  }
+
+  interface XRRigidTransform {
+    matrix: Float32Array;
+    position: { x: number; y: number; z: number };
+    orientation: { x: number; y: number; z: number; w: number };
+  }
+
+  interface XRReferenceSpace extends XRSpace {
+    getOffsetReferenceSpace(originOffset: XRRigidTransform): XRReferenceSpace;
+  }
+
+  interface XRSpace {}
+
+  interface XRRay {
+    origin: DOMPointReadOnly;
+    direction: DOMPointReadOnly;
+    matrix: Float32Array;
+  }
+
+  type XRReferenceSpaceType = 
+    | 'viewer'
+    | 'local'
+    | 'local-floor'
+    | 'bounded-floor'
+    | 'unbounded';
+
+  interface XRInputSource {
+    handedness: 'none' | 'left' | 'right';
+    targetRayMode: 'gaze' | 'tracked-pointer' | 'screen';
+    targetRaySpace: XRSpace;
+    gripSpace?: XRSpace;
+    profiles: string[];
+    gamepad?: Gamepad;
+    hand?: XRHand;
+  }
+
+  interface XRHand extends Map<XRHandJoint, XRJointSpace> {
+    get(joint: XRHandJoint): XRJointSpace | undefined;
+  }
+
+  export type XRHandJoint =
+    | 'wrist'
+    | 'thumb-metacarpal'
+    | 'thumb-phalanx-proximal'
+    | 'thumb-phalanx-distal'
+    | 'thumb-tip'
+    | 'index-finger-metacarpal'
+    | 'index-finger-phalanx-proximal'
+    | 'index-finger-phalanx-intermediate'
+    | 'index-finger-phalanx-distal'
+    | 'index-finger-tip';
+
+  export interface XRJointSpace extends XRSpace {
+    jointRadius: number | undefined;
+    position: { x: number; y: number; z: number };
+    matrixWorld: THREE.Matrix4;
+  }
+
+  interface Navigator {
+    xr?: {
+      isSessionSupported(mode: string): Promise<boolean>;
+      requestSession(mode: string, options?: XRSessionInit): Promise<XRSession>;
+    };
+  }
+
+  interface XRSessionInit {
+    requiredFeatures?: string[];
+    optionalFeatures?: string[];
+  }
+}
+
+// Prevent conflicts with @types/webxr
+declare module '@types/webxr' {
+  export {};
+}
+
+----
+types/xr.ts
+import * as THREE from 'three';
+import { Platform } from '../core/types';
+
+// Core XR Types
+export type XRSessionMode = 'inline' | 'immersive-vr' | 'immersive-ar';
+export type XRHandedness = 'none' | 'left' | 'right';
+export type XRHand = THREE.XRHand;
+
+export type XRHandJoint =
+    | 'wrist'
+    | 'thumb-metacarpal'
+    | 'thumb-phalanx-proximal'
+    | 'thumb-phalanx-distal'
+    | 'thumb-tip'
+    | 'index-finger-metacarpal'
+    | 'index-finger-phalanx-proximal'
+    | 'index-finger-phalanx-intermediate'
+    | 'index-finger-phalanx-distal'
+    | 'index-finger-tip'
+    | 'middle-finger-metacarpal'
+    | 'middle-finger-phalanx-proximal'
+    | 'middle-finger-phalanx-intermediate'
+    | 'middle-finger-phalanx-distal'
+    | 'middle-finger-tip'
+    | 'ring-finger-metacarpal'
+    | 'ring-finger-phalanx-proximal'
+    | 'ring-finger-phalanx-intermediate'
+    | 'ring-finger-phalanx-distal'
+    | 'ring-finger-tip'
+    | 'pinky-finger-metacarpal'
+    | 'pinky-finger-phalanx-proximal'
+    | 'pinky-finger-phalanx-intermediate'
+    | 'pinky-finger-phalanx-distal'
+    | 'pinky-finger-tip';
+
+export interface XRSessionConfig {
+    mode: XRSessionMode;
+    features: {
+        required?: string[];
+        optional?: string[];
+    };
+    spaceType: XRReferenceSpaceType;
+}
+
+// Input and Interaction Types
+export interface HapticActuator {
+    pulse: (intensity: number, duration: number) => Promise<boolean>;
+}
+
+export interface WorldObject3D extends THREE.Object3D {
+    getWorldPosition(target: THREE.Vector3): THREE.Vector3;
+}
+
+export interface XRControllerState {
+    position: THREE.Vector3;
+    rotation: THREE.Quaternion;
+    hapticActuator?: HapticActuator;
+    platform: Platform;
+}
+
+export interface XRHandJointState {
+    position: THREE.Vector3;
+    rotation: THREE.Quaternion;
+    radius?: number;
+}
+
+export interface XRHandState {
+    position: THREE.Vector3;
+    joints: Map<XRHandJoint, XRHandJointState>;
+    pinchStrength: number;
+    gripStrength: number;
+    platform: Platform;
+}
+
+export interface XRHandWithHaptics extends THREE.Group {
+    hapticActuators?: HapticActuator[];
+    hand: {
+        joints: {
+            [key in XRHandJoint]?: WorldObject3D;
+        };
+    };
+    pinchStrength: number;
+    gripStrength: number;
+    userData: {
+        hapticActuator?: HapticActuator;
+        platform: Platform;
+    };
+}
+
+// Input Configuration
+export interface XRInputConfig {
+    controllers: boolean;
+    hands: boolean;
+    haptics: boolean;
+}
+
+// Event Types
+export interface XRControllerEvent {
+    controller: XRSpace;
+    inputSource: XRInputSource;
+    hapticActuator?: HapticActuator;
+}
+
+export interface XRHandEvent {
+    hand: XRHandWithHaptics;
+    inputSource: XRInputSource;
+}
+
+export interface XRInteractionState {
+    pinching: boolean;
+    pinchStrength: number;
+    gripping: boolean;
+    gripStrength: number;
+    position: THREE.Vector3;
+    rotation: THREE.Quaternion;
+}
+
+// Platform-specific Types
+export interface QuestHandTracking extends XRHandState {
+    confidence: number;
+    gestureId?: number;
+}
+
+export interface QuestControllerTracking extends XRControllerState {
+    thumbstick: THREE.Vector2;
+    trigger: number;
+    grip: number;
+}
+
+----
+types/three-ext.d.ts
+declare module 'three/examples/jsm/controls/OrbitControls' {
+  import { Camera, EventDispatcher, MOUSE, TOUCH, Vector3 } from 'three';
+
+  export class OrbitControls extends EventDispatcher {
+    constructor(object: Camera, domElement?: HTMLElement);
+
+    object: Camera;
+    domElement: HTMLElement | HTMLDocument;
+
+    enabled: boolean;
+    target: Vector3;
+
+    minDistance: number;
+    maxDistance: number;
+
+    minZoom: number;
+    maxZoom: number;
+
+    minPolarAngle: number;
+    maxPolarAngle: number;
+
+    minAzimuthAngle: number;
+    maxAzimuthAngle: number;
+
+    enableDamping: boolean;
+    dampingFactor: number;
+
+    enableZoom: boolean;
+    zoomSpeed: number;
+
+    enableRotate: boolean;
+    rotateSpeed: number;
+
+    enablePan: boolean;
+    panSpeed: number;
+    screenSpacePanning: boolean;
+    keyPanSpeed: number;
+
+    autoRotate: boolean;
+    autoRotateSpeed: number;
+
+    enableKeys: boolean;
+
+    keys: { LEFT: number; UP: number; RIGHT: number; BOTTOM: number };
+    mouseButtons: { LEFT: MOUSE; MIDDLE: MOUSE; RIGHT: MOUSE };
+    touches: { ONE: TOUCH; TWO: TOUCH };
+
+    update(): boolean;
+    dispose(): void;
+  }
+}
+
+declare module 'three/examples/jsm/webxr/XRControllerModelFactory' {
+  import { Group, Texture } from 'three';
+
+  export class XRControllerModelFactory {
+    constructor();
+    createControllerModel(controller: Group): Group;
+  }
+}
+
+declare module 'three/examples/jsm/postprocessing/EffectComposer' {
+  import { WebGLRenderer, WebGLRenderTarget } from 'three';
+
+  export class Pass {
+    enabled: boolean;
+    needsSwap: boolean;
+    clear: boolean;
+    renderToScreen: boolean;
+
+    setSize(width: number, height: number): void;
+    render(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget, deltaTime?: number, maskActive?: boolean): void;
+  }
+
+  export class EffectComposer {
+    constructor(renderer: WebGLRenderer, renderTarget?: WebGLRenderTarget);
+    
+    renderTarget1: WebGLRenderTarget;
+    renderTarget2: WebGLRenderTarget;
+    writeBuffer: WebGLRenderTarget;
+    readBuffer: WebGLRenderTarget;
+    passes: Pass[];
+    
+    swapBuffers(): void;
+    addPass(pass: Pass): void;
+    insertPass(pass: Pass, __index: number): void;
+    removePass(pass: Pass): void;
+    render(deltaTime?: number): void;
+    reset(renderTarget?: WebGLRenderTarget): void;
+    setSize(width: number, height: number): void;
+    dispose(): void;
+  }
+}
+
+declare module 'three/examples/jsm/postprocessing/RenderPass' {
+  import { Scene, Camera } from 'three';
+  import { Pass } from 'three/examples/jsm/postprocessing/EffectComposer';
+
+  export class RenderPass extends Pass {
+    constructor(scene: Scene, camera: Camera);
+    scene: Scene;
+    camera: Camera;
+  }
+}
+
+declare module 'three/examples/jsm/postprocessing/UnrealBloomPass' {
+  import { Vector2 } from 'three';
+  import { Pass } from 'three/examples/jsm/postprocessing/EffectComposer';
+
+  export class UnrealBloomPass extends Pass {
+    constructor(resolution: Vector2, strength?: number, radius?: number, threshold?: number);
+    resolution: Vector2;
+    strength: number;
+    radius: number;
+    threshold: number;
+  }
+}
+
+----
+types/three.d.ts
+declare module 'three' {
+  export interface Event {
+    type: string;
+    target: Group;
+  }
+
+  export interface XRControllerEvent extends Event {
+    type: 'connected' | 'disconnected';
+    target: Group;
+    data: XRInputSource;
+  }
+
+  export interface Object3DEventMap {
+    connected: XRControllerEvent;
+    disconnected: XRControllerEvent;
+  }
+
+  export interface EventDispatcher<E extends Event = Event> {
+    addEventListener<T extends E['type']>(type: T, listener: (event: E & { type: T }) => void): void;
+    removeEventListener<T extends E['type']>(type: T, listener: (event: E & { type: T }) => void): void;
+    dispatchEvent(event: E): void;
+  }
+
+  export class Layers {
+    mask: number;
+    set(layer: number): void;
+    enable(layer: number): void;
+    disable(layer: number): void;
+    toggle(layer: number): void;
+    test(layers: Layers): boolean;
+  }
+
+  export class Object3D implements EventDispatcher<Event & XRControllerEvent> {
+    position: Vector3;
+    quaternion: Quaternion;
+    scale: Vector3;
+    matrix: Matrix4;
+    matrixWorld: Matrix4;
+    children: Object3D[];
+    parent: Object3D | null;
+    userData: any;
+    visible: boolean;
+    renderOrder: number;
+    frustumCulled: boolean;
+    matrixAutoUpdate: boolean;
+    layers: Layers;
+    add(...objects: Object3D[]): this;
+    remove(...objects: Object3D[]): this;
+    rotateX(angle: number): this;
+    rotateY(angle: number): this;
+    rotateZ(angle: number): this;
+    updateMatrix(): void;
+    updateMatrixWorld(force?: boolean): void;
+    traverse(callback: (object: Object3D) => void): void;
+    lookAt(x: number | Vector3, y?: number, z?: number): void;
+    addEventListener<K extends keyof Object3DEventMap>(
+      type: K,
+      listener: (event: Object3DEventMap[K]) => void
+    ): void;
+    addEventListener(
+      type: string,
+      listener: (event: Event) => void
+    ): void;
+    removeEventListener<K extends keyof Object3DEventMap>(
+      type: K,
+      listener: (event: Object3DEventMap[K]) => void
+    ): void;
+    removeEventListener(
+      type: string,
+      listener: (event: Event) => void
+    ): void;
+    dispatchEvent(event: Event): void;
+  }
+
+  export class Group extends Object3D {
+    constructor();
+  }
+
+  export class Scene extends Object3D {
+    constructor();
+    fog: FogExp2 | null;
+    background: Color | Texture | null;
+  }
+
+  export class Material {
+    transparent: boolean;
+    opacity: number;
+    depthWrite: boolean;
+    depthTest: boolean;
+    side: Side;
+    color: Color;
+    dispose(): void;
+  }
+
+  export class Mesh extends Object3D {
+    constructor(geometry: BufferGeometry, material: Material);
+    geometry: BufferGeometry;
+    material: Material;
+  }
+
+  export class GridHelper extends Object3D {
+    constructor(size: number, divisions: number, color1?: ColorRepresentation, color2?: ColorRepresentation);
+    material: Material;
+    geometry: BufferGeometry;
+  }
+
+  export class Light extends Object3D {
+    constructor(color?: ColorRepresentation, intensity?: number);
+    intensity: number;
+  }
+
+  export class DirectionalLight extends Light {
+    constructor(color?: ColorRepresentation, intensity?: number);
+    intensity: number;
+  }
+
+  export class AmbientLight extends Light {
+    constructor(color?: ColorRepresentation, intensity?: number);
+  }
+
+  export class BufferAttribute {
+    array: ArrayLike<number>;
+    itemSize: number;
+    count: number;
+    normalized: boolean;
+    needsUpdate: boolean;
+    constructor(array: ArrayLike<number>, itemSize: number, normalized?: boolean);
+    setX(index: number, x: number): this;
+    setY(index: number, y: number): this;
+    setZ(index: number, z: number): this;
+    setW(index: number, w: number): this;
+    setXY(index: number, x: number, y: number): this;
+    setXYZ(index: number, x: number, y: number, z: number): this;
+    setXYZW(index: number, x: number, y: number, z: number, w: number): this;
+  }
+
+  export class InstancedBufferAttribute extends BufferAttribute {
+    constructor(array: ArrayLike<number>, itemSize: number, normalized?: boolean, meshPerAttribute?: number);
+    meshPerAttribute: number;
+  }
+
+  export class InstancedMesh extends Mesh {
+    constructor(geometry: BufferGeometry, material: Material | Material[], count: number);
+    count: number;
+    instanceMatrix: InstancedBufferAttribute;
+    instanceColor: InstancedBufferAttribute | null;
+    frustumCulled: boolean;
+    setColorAt(index: number, color: Color): void;
+    setMatrixAt(index: number, matrix: Matrix4): void;
+    getMatrixAt(index: number, matrix: Matrix4): void;
+    getColorAt(index: number, color: Color): void;
+    dispose(): void;
+  }
+
+  export class MeshBasicMaterial extends Material {
+    constructor(parameters?: MeshBasicMaterialParameters);
+  }
+
+  export class LineBasicMaterial extends Material {
+    constructor(parameters?: MaterialParameters);
+  }
+
+  export class MeshPhongMaterial extends Material {
+    constructor(parameters?: MeshPhongMaterialParameters);
+    shininess: number;
+    specular: Color;
+  }
+
+  export class MeshStandardMaterial extends Material {
+    constructor(parameters?: MeshStandardMaterialParameters);
+    metalness: number;
+    roughness: number;
+    map: Texture | null;
+    emissive: Color;
+  }
+
+  export class SpriteMaterial extends Material {
+    constructor(parameters?: SpriteMaterialParameters);
+    map: Texture | null;
+    color: Color;
+    sizeAttenuation: boolean;
+    rotation: number;
+  }
+
+  export class BufferGeometry {
+    dispose(): void;
+    rotateX(angle: number): this;
+    rotateY(angle: number): this;
+    rotateZ(angle: number): this;
+    setAttribute(name: string, attribute: BufferAttribute): this;
+    setIndex(index: BufferAttribute): this;
+    computeBoundingSphere(): void;
+    boundingSphere: { center: Vector3; radius: number } | null;
+    boundingBox: { min: Vector3; max: Vector3 } | null;
+  }
+
+  export class PlaneGeometry extends BufferGeometry {
+    constructor(width?: number, height?: number, widthSegments?: number, heightSegments?: number);
+  }
+
+  export class SphereGeometry extends BufferGeometry {
+    constructor(radius?: number, widthSegments?: number, heightSegments?: number);
+  }
+
+  export class CylinderGeometry extends BufferGeometry {
+    constructor(
+      radiusTop?: number,
+      radiusBottom?: number,
+      height?: number,
+      radialSegments?: number
+    );
+  }
+
+  export class RingGeometry extends BufferGeometry {
+    constructor(
+      innerRadius?: number,
+      outerRadius?: number,
+      thetaSegments?: number
+    );
+  }
+
+  export class Vector2 {
+    x: number;
+    y: number;
+    constructor(x?: number, y?: number);
+    set(x: number, y: number): this;
+  }
+
+  export class Vector3 {
+    x: number;
+    y: number;
+    z: number;
+    constructor(x?: number, y?: number, z?: number);
+    set(x: number, y: number, z: number): this;
+    copy(v: Vector3): this;
+    add(v: Vector3): this;
+    sub(v: Vector3): this;
+    multiply(v: Vector3): this;
+    multiplyScalar(s: number): this;
+    normalize(): this;
+    dot(v: Vector3): number;
+    cross(v: Vector3): this;
+    length(): number;
+    lengthSq(): number;
+    clone(): Vector3;
+    fromArray(array: number[] | ArrayLike<number>, offset?: number): this;
+    subVectors(a: Vector3, b: Vector3): this;
+    addVectors(a: Vector3, b: Vector3): this;
+    crossVectors(a: Vector3, b: Vector3): this;
+    setFromMatrixPosition(m: Matrix4): this;
+    distanceTo(v: Vector3): number;
+    applyMatrix4(m: Matrix4): this;
+    lookAt(v: Vector3): this;
+  }
+
+  export class Matrix4 {
+    elements: number[];
+    constructor();
+    set(...elements: number[]): this;
+    identity(): this;
+    copy(m: Matrix4): this;
+    compose(position: Vector3, quaternion: Quaternion, scale: Vector3): this;
+    decompose(position: Vector3, quaternion: Quaternion, scale: Vector3): this;
+    fromArray(array: ArrayLike<number>, offset?: number): this;
+    extractRotation(m: Matrix4): this;
+    makeRotationX(theta: number): this;
+    makeRotationY(theta: number): this;
+    makeRotationZ(theta: number): this;
+    makeScale(x: number, y: number, z: number): this;
+    multiply(m: Matrix4): this;
+    makeRotationFromQuaternion(q: Quaternion): this;
+  }
+
+  export class Quaternion {
+    x: number;
+    y: number;
+    z: number;
+    w: number;
+    constructor(x?: number, y?: number, z?: number, w?: number);
+    setFromAxisAngle(axis: Vector3, angle: number): this;
+    identity(): this;
+    multiply(q: Quaternion): this;
+    setFromEuler(euler: Euler): this;
+  }
+
+  export class Euler {
+    constructor(x?: number, y?: number, z?: number, order?: string);
+    x: number;
+    y: number;
+    z: number;
+    order: string;
+  }
+
+  export class Color {
+    constructor(color?: ColorRepresentation);
+    set(color: ColorRepresentation): this;
+    setHSL(h: number, s: number, l: number): Color;
+    clone(): Color;
+  }
+
+  export class Sprite extends Object3D {
+    constructor(material: SpriteMaterial);
+    material: SpriteMaterial;
+  }
+
+  export class Raycaster {
+    constructor();
+    ray: Ray;
+    near: number;
+    far: number;
+    camera: Camera;
+    params: {
+      Mesh?: {},
+      Line?: {},
+      LOD?: {},
+      Points?: { threshold: number },
+      Sprite?: {}
+    };
+    setFromCamera(coords: Vector2, camera: Camera): void;
+    intersectObject(object: Object3D, recursive?: boolean, intersects?: Intersection[]): Intersection[];
+    intersectObjects(objects: Object3D[], recursive?: boolean, intersects?: Intersection[]): Intersection[];
+  }
+
+  export class Ray {
+    origin: Vector3;
+    direction: Vector3;
+    constructor(origin?: Vector3, direction?: Vector3);
+  }
+
+  export class WebGLRenderer {
+    constructor(parameters?: WebGLRendererParameters);
+    domElement: HTMLCanvasElement;
+    setSize(width: number, height: number, updateStyle?: boolean): void;
+    setPixelRatio(value: number): void;
+    render(scene: Scene, camera: Camera): void;
+    dispose(): void;
+    xr: WebXRManager;
+    setAnimationLoop(callback: ((time: number) => void) | null): void;
+  }
+
+  export interface WebXRManager {
+    enabled: boolean;
+    setSession(session: XRSession): Promise<void>;
+    addEventListener(type: string, listener: EventListener): void;
+    removeEventListener(type: string, listener: EventListener): void;
+  }
+
+  export class Camera extends Object3D {
+    matrixWorldInverse: Matrix4;
+    projectionMatrix: Matrix4;
+    projectionMatrixInverse: Matrix4;
+    layers: Layers;
+    lookAt(target: Vector3 | number, y?: number, z?: number): void;
+  }
+
+  export class PerspectiveCamera extends Camera {
+    constructor(fov?: number, aspect?: number, near?: number, far?: number);
+    fov: number;
+    aspect: number;
+    near: number;
+    far: number;
+    updateProjectionMatrix(): void;
+    lookAt(target: Vector3 | number, y?: number, z?: number): void;
+  }
+
+  export interface MaterialParameters {
+    color?: ColorRepresentation;
+    transparent?: boolean;
+    opacity?: number;
+    side?: Side;
+    depthWrite?: boolean;
+    depthTest?: boolean;
+    map?: Texture;
+  }
+
+  export interface MeshBasicMaterialParameters extends MaterialParameters {
+    wireframe?: boolean;
+  }
+
+  export interface MeshPhongMaterialParameters extends MaterialParameters {
+    shininess?: number;
+    specular?: ColorRepresentation;
+  }
+  export interface MeshStandardMaterialParameters extends MaterialParameters {
+    metalness?: number;
+    roughness?: number;
+    map?: Texture | null;
+    emissive?: ColorRepresentation;
+  }
+
+  export interface SpriteMaterialParameters extends MaterialParameters {
+    sizeAttenuation?: boolean;
+    rotation?: number;
+  }
+
+  export class Texture {
+    constructor(image?: HTMLImageElement | HTMLCanvasElement);
+    needsUpdate: boolean;
+    dispose(): void;
+  }
+
+  export class FogExp2 {
+    constructor(color: ColorRepresentation, density?: number);
+    color: Color;
+    density: number;
+  }
+
+  export interface Intersection {
+    distance: number;
+    point: Vector3;
+    face: { normal: Vector3 } | null;
+    object: Object3D;
+  }
+
+  export class MathUtils {
+    static clamp(value: number, min: number, max: number): number;
+    static degToRad(degrees: number): number;
+    static radToDeg(radians: number): number;
+    static lerp(x: number, y: number, t: number): number;
+    static smoothstep(x: number, min: number, max: number): number;
+  }
+
+  export const DoubleSide: Side;
+  export type Side = 0 | 1 | 2;
+  export type ColorRepresentation = Color | string | number;
+
+  export class Clock {
+    constructor(autoStart?: boolean);
+    start(): void;
+    stop(): void;
+    getElapsedTime(): number;
+    getDelta(): number;
+  }
+
+  export class TorusGeometry extends BufferGeometry {
+    constructor(radius?: number, tube?: number, radialSegments?: number, tubularSegments?: number, arc?: number);
+  }
+
+  export class IcosahedronGeometry extends BufferGeometry {
+    constructor(radius?: number, detail?: number);
+  }
+
+  export class OctahedronGeometry extends BufferGeometry {
+    constructor(radius?: number, detail?: number);
+  }
+
+  export class ShaderMaterial extends Material {
+    constructor(parameters?: ShaderMaterialParameters);
+    uniforms: { [uniform: string]: { value: any } };
+    defines: { [define: string]: string | number | boolean };
+    needsUpdate: boolean;
+  }
+
+  export interface Material {
+    clone(): Material;
+    uniforms?: { [uniform: string]: { value: any } };
+    defines?: { [define: string]: string | number | boolean };
+    needsUpdate: boolean;
+  }
+
+  export interface Vector3 {
+    setScalar(scalar: number): Vector3;
+    fromBufferAttribute(attribute: BufferAttribute, index: number): Vector3;
+  }
+
+  export interface Quaternion {
+    copy(quaternion: Quaternion): Quaternion;
+  }
+
+  export interface Mesh extends Object3D {
+    rotation: Euler;
+    material: Material;
+  }
+
+  export interface Group extends Object3D {
+    onBeforeRender?: (renderer: WebGLRenderer, scene: Scene, camera: Camera) => void;
+  }
+
+  export interface Color {
+    setHSL(h: number, s: number, l: number): Color;
+  }
+
+  export interface XRHand extends Map<XRHandJoint, XRJointSpace> {
+    joints: { [key: string]: XRJointSpace };
+  }
+
+  export const AdditiveBlending: number;
+  export const NormalBlending: number;
+  export const MultiplyBlending: number;
+
+  export class TextGeometry extends BufferGeometry {
+    constructor(text: string, parameters?: {
+        font: Font;
+        size?: number;
+        height?: number;
+        curveSegments?: number;
+        bevelEnabled?: boolean;
+        bevelThickness?: number;
+        bevelSize?: number;
+        bevelOffset?: number;
+        bevelSegments?: number;
+    });
+    computeBoundingBox(): void;
+    boundingBox: Box3 | null;
+    dispose(): void;
+    rotateX(angle: number): this;
+    rotateY(angle: number): this;
+    rotateZ(angle: number): this;
+    translate(x: number, y: number, z: number): this;
+  }
+
+  export class Box3 {
+    min: Vector3;
+    max: Vector3;
+    constructor(min?: Vector3, max?: Vector3);
+  }
+
+  export interface XRJointSpace {
+    position: Vector3;
+    matrixWorld: Matrix4;
+  }
+
+  export interface XRHand extends Map<XRHandJoint, XRJointSpace> {
+    joints: { [key: string]: XRJointSpace };
+  }
+}
+
+----
+types/websocket.ts
+// WebSocket types for graph synchronization
+
+export enum ConnectionState {
+    DISCONNECTED = 'DISCONNECTED',
+    CONNECTING = 'CONNECTING',
+    CONNECTED = 'CONNECTED',
+    RECONNECTING = 'RECONNECTING'
+}
+
+export enum MessageType {
+    PING = 'ping',                          // Connection health check
+    PONG = 'pong'                           // Connection health response
+}
+
+// Connection health messages
+export interface PingMessage {
+    type: MessageType.PING;
+    timestamp: number;
+}
+
+export interface PongMessage {
+    type: MessageType.PONG;
+    timestamp: number;
+}
+
+export type WebSocketMessage = PingMessage | PongMessage;
+
+// WebSocket settings loaded via REST API
+export interface WebSocketSettings {
+    url: string;                  // WebSocket URL
+    reconnectAttempts: number;     // Max reconnection attempts (default: 3)
+    reconnectDelay: number;        // Delay between reconnects in ms (default: 5000)
+    updateRate: number;            // Update rate in Hz
+}
+
+----
+types/settings/utils.ts
+import { Settings, SettingsPath, SettingsValue } from './base';
+
+// Settings categories
+export type SettingsCategory = keyof Settings;
+
+// Re-export base types
+export type { SettingsPath, SettingsValue };
+
+/**
+ * Get all possible setting paths from a settings object
+ */
+export function getAllSettingPaths(settings: Partial<Settings>): string[] {
+    const paths: string[] = [];
+
+    function traverse(obj: any, path: string = '') {
+        if (!obj || typeof obj !== 'object') return;
+
+        Object.entries(obj).forEach(([key, value]) => {
+            const currentPath = path ? `${path}.${key}` : key;
+            paths.push(currentPath);
+
+            if (value && typeof value === 'object' && !Array.isArray(value)) {
+                traverse(value, currentPath);
+            }
+        });
+    }
+
+    traverse(settings);
+    return paths;
+}
+
+/**
+ * Format a setting path into a human-readable name
+ */
+export function formatSettingName(path: string): string {
+    return path
+        .split('.')
+        .pop()!
+        .split(/(?=[A-Z])|[-_]/)
+        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
+        .join(' ');
+}
+
+/**
+ * Get the appropriate step value for a numeric setting
+ */
+export function getStepValue(path: SettingsPath): string {
+    // Physics settings need finer control
+    if (path.includes('physics.attractionStrength') || 
+        path.includes('physics.repulsionStrength') ||
+        path.includes('physics.springStrength')) {
+        return '0.001';
+    }
+
+    // Opacity and other normalized values
+    if (path.includes('opacity') || 
+        path.includes('metalness') || 
+        path.includes('roughness')) {
+        return '0.01';
+    }
+
+    // Size related settings
+    if (path.includes('Size') || path.includes('scale')) {
+        return '0.1';
+    }
+
+    // Animation speeds
+    if (path.includes('speed') || path.includes('strength')) {
+        return '0.05';
+    }
+
+    // Default step value
+    return '1';
+}
+
+/**
+ * Get the appropriate min/max values for a numeric setting
+ */
+export function getValueRange(path: SettingsPath): [number, number] {
+    // Physics settings
+    if (path.includes('physics.attractionStrength') || 
+        path.includes('physics.repulsionStrength') ||
+        path.includes('physics.springStrength')) {
+        return [0, 2];
+    }
+
+    // Normalized values
+    if (path.includes('opacity') || 
+        path.includes('metalness') || 
+        path.includes('roughness')) {
+        return [0, 1];
+    }
+
+    // Size related settings
+    if (path.includes('Size') || path.includes('scale')) {
+        return [0.1, 10];
+    }
+
+    // Animation speeds
+    if (path.includes('speed')) {
+        return [0, 5];
+    }
+
+    // Strength values
+    if (path.includes('strength')) {
+        return [0, 2];
+    }
+
+    // Default range
+    return [0, 100];
+}
+
+/**
+ * Get the appropriate input type for a setting
+ */
+export function getInputType(path: SettingsPath, value: SettingsValue): string {
+    // Handle specific path cases
+    if (path.endsWith('.mode') || 
+        path.endsWith('.spaceType') || 
+        path.endsWith('.quality')) {
+        return 'select';
+    }
+
+    // Handle value type cases
+    if (typeof value === 'boolean') {
+        return 'toggle';
+    }
+
+    if (typeof value === 'number') {
+        return 'slider';
+    }
+
+    if (typeof value === 'string' && value.startsWith('#')) {
+        return 'color';
+    }
+
+    if (Array.isArray(value)) {
+        if (value.length === 2 && value.every(v => typeof v === 'number')) {
+            return 'range';
+        }
+        return 'array';
+    }
+
+    return 'text';
+}
+
+/**
+ * Get select options for a setting
+ */
+export function getSelectOptions(path: SettingsPath): string[] {
+    if (path.endsWith('.mode')) {
+        return ['immersive-ar', 'immersive-vr'];
+    }
+
+    if (path.endsWith('.spaceType')) {
+        return ['viewer', 'local', 'local-floor', 'bounded-floor', 'unbounded'];
+    }
+
+    if (path.endsWith('.quality')) {
+        return ['low', 'medium', 'high'];
+    }
+
+    return [];
+}
+
+/**
+ * Check if a setting should be considered advanced
+ */
+export function isAdvancedSetting(path: SettingsPath): boolean {
+    const advancedPatterns = [
+        /physics\./,
+        /rendering\.(?!quality|backgroundColour)/,
+        /system\./,
+        /debug\./,
+        /enableInstancing/,
+        /enableMetadata/,
+        /compression/,
+        /binary/
+    ];
+
+    return advancedPatterns.some(pattern => pattern.test(path));
+}
+
+/**
+ * Get a setting value by path
+ */
+export function getSettingValue(settings: Settings, path: SettingsPath): SettingsValue | undefined {
+    const parts = path.split('.');
+    let current: any = settings;
+
+    for (const part of parts) {
+        if (current === undefined || current === null) return undefined;
+        current = current[part];
+    }
+
+    return current;
+}
+
+/**
+ * Set a setting value by path
+ */
+export function setSettingValue(settings: Settings, path: SettingsPath, value: SettingsValue): void {
+    const parts = path.split('.');
+    let current: any = settings;
+
+    for (let i = 0; i < parts.length - 1; i++) {
+        const part = parts[i];
+        if (!(part in current)) {
+            current[part] = {};
+        }
+        current = current[part];
+    }
+
+    current[parts[parts.length - 1]] = value;
+}
+
+/**
+ * Check if a setting path is valid
+ */
+export function isValidSettingPath(settings: Settings, path: SettingsPath): boolean {
+    return getSettingValue(settings, path) !== undefined;
+}
+
+/**
+ * Format a setting value for display
+ */
+export function formatSettingValue(value: SettingsValue): string {
+    if (typeof value === 'number') {
+        // Use more decimal places for small values
+        return value < 1 ? value.toFixed(3) : value.toFixed(1);
+    }
+
+    if (typeof value === 'boolean') {
+        return value ? 'Enabled' : 'Disabled';
+    }
+
+    if (Array.isArray(value)) {
+        return value.join(', ');
+    }
+
+    return String(value);
+}
+
+----
+types/settings/xr.ts
+import { XRSessionMode } from '../xr';
+
+export interface XRSettings {
+    // Session Settings
+    mode: XRSessionMode;
+    roomScale: number;
+    spaceType: 'viewer' | 'local' | 'local-floor' | 'bounded-floor' | 'unbounded';
+    quality: 'low' | 'medium' | 'high';
+    
+    // Platform Settings
+    autoEnterAR?: boolean;
+    hideControlPanel?: boolean;
+    preferredMode?: XRSessionMode;
+    
+    // Hand Tracking
+    enableHandTracking: boolean;
+    handMeshEnabled: boolean;
+    handMeshColor: string;
+    handMeshOpacity: number;
+    handPointSize: number;
+    handRayEnabled: boolean;
+    handRayColor: string;
+    handRayWidth: number;
+    gestureSmoothing: number;
+    
+    // Interaction
+    enableHaptics: boolean;
+    hapticIntensity: number;
+    dragThreshold: number;
+    pinchThreshold: number;
+    rotationThreshold: number;
+    interactionRadius: number;
+    movementSpeed: number;
+    deadZone: number;
+    movementAxes: {
+        horizontal: number;
+        vertical: number;
+    };
+    
+    // Scene Understanding
+    enableLightEstimation: boolean;
+    enablePlaneDetection: boolean;
+    enableSceneUnderstanding: boolean;
+    planeColor: string;
+    planeOpacity: number;
+    showPlaneOverlay: boolean;
+    snapToFloor: boolean;
+    planeDetectionDistance?: number;  // Maximum distance for plane detection
+    
+    // Passthrough
+    enablePassthroughPortal: boolean;
+    passthroughOpacity: number;
+    passthroughBrightness: number;
+    passthroughContrast: number;
+    portalSize: number;
+    portalEdgeColor: string;
+    portalEdgeWidth: number;
+}
+
+// Platform-specific XR settings
+export interface QuestXRSettings extends XRSettings {
+    enableHandMeshes: boolean;
+    enableControllerModel: boolean;
+    controllerProfile: string;
+}
+
+export interface WebXRSettings extends XRSettings {
+    fallbackToInline: boolean;
+    requireFeatures: string[];
+    optionalFeatures: string[];
+}
+
+// Default XR settings
+export const defaultXRSettings: XRSettings = {
+    // Session Settings
+    mode: 'immersive-ar',
+    roomScale: 0.01,  // Updated: Scale factor of 0.01 for AR visualization (1/100th scaling)
+    spaceType: 'local-floor',
+    quality: 'high',
+    
+    // Platform Settings
+    autoEnterAR: true,
+    hideControlPanel: true,
+    preferredMode: 'immersive-ar',
+    
+    // Hand Tracking
+    enableHandTracking: true,
+    handMeshEnabled: true,
+    handMeshColor: '#ffffff',
+    handMeshOpacity: 0.5,
+    handPointSize: 5,
+    handRayEnabled: true,
+    handRayColor: '#00ff00',
+    handRayWidth: 2,
+    gestureSmoothing: 0.5,
+    
+    // Interaction
+    enableHaptics: true,
+    hapticIntensity: 0.5,
+    dragThreshold: 0.02,
+    pinchThreshold: 0.5,  // Updated: Reduced pinch threshold for improved responsiveness
+    rotationThreshold: 0.1,
+    interactionRadius: 0.5,
+    movementSpeed: 0.05,
+    deadZone: 0.1,
+    movementAxes: {
+        horizontal: 2, // Right joystick X
+        vertical: 3   // Right joystick Y
+    },
+    
+    // Scene Understanding
+    enableLightEstimation: true,
+    enablePlaneDetection: true,
+    enableSceneUnderstanding: true,
+    planeColor: '#808080',
+    planeOpacity: 0.5,
+    showPlaneOverlay: true,
+    snapToFloor: true,
+    planeDetectionDistance: 3.0,
+    
+    // Passthrough
+    enablePassthroughPortal: false,
+    passthroughOpacity: 1.0,
+    passthroughBrightness: 1.0,
+    passthroughContrast: 1.0,
+    portalSize: 2.0,
+    portalEdgeColor: '#ffffff',
+    portalEdgeWidth: 2.0
+};
+
+----
+types/settings/validation.ts
+import { Settings } from './base';
+
+export interface ValidationError {
+    path: string;
+    message: string;
+    value?: any;
+}
+
+export interface ValidationResult {
+    isValid: boolean;
+    errors: ValidationError[];
+}
+
+interface ValidationRule {
+    validate: (value: any) => boolean;
+    message: string;
+}
+
+const validationRules: Record<string, Record<string, ValidationRule>> = {
+    visualization: {
+        'nodes.baseSize': {
+            validate: (value: number) => value >= 0.1 && value <= 10,
+            message: 'Base size must be between 0.1 and 10'
+        },
+        'nodes.opacity': {
+            validate: (value: number) => value >= 0 && value <= 1,
+            message: 'Opacity must be between 0 and 1'
+        },
+        'nodes.metalness': {
+            validate: (value: number) => value >= 0 && value <= 1,
+            message: 'Metalness must be between 0 and 1'
+        },
+        'nodes.roughness': {
+            validate: (value: number) => value >= 0 && value <= 1,
+            message: 'Roughness must be between 0 and 1'
+        },
+        'edges.width': {
+            validate: (value: number) => value >= 0.1 && value <= 5,
+            message: 'Edge width must be between 0.1 and 5'
+        },
+        'physics.attractionStrength': {
+            validate: (value: number) => value >= 0 && value <= 2,
+            message: 'Attraction strength must be between 0 and 2'
+        },
+        'physics.repulsionStrength': {
+            validate: (value: number) => value >= 0 && value <= 2,
+            message: 'Repulsion strength must be between 0 and 2'
+        },
+        'physics.springStrength': {
+            validate: (value: number) => value >= 0 && value <= 2,
+            message: 'Spring strength must be between 0 and 2'
+        },
+        'rendering.quality': {
+            validate: (value: string) => ['low', 'medium', 'high'].includes(value),
+            message: 'Quality must be low, medium, or high'
+        },
+        'rendering.ambientLightIntensity': {
+            validate: (value: number) => value >= 0 && value <= 2,
+            message: 'Ambient light intensity must be between 0 and 2'
+        }
+    },
+    'visualization.bloom': {
+        'visualization.bloom.strength': {
+            validate: (value: number) => value >= 0 && value <= 5,
+            message: 'Bloom strength must be between 0 and 5'
+        },
+        'visualization.bloom.radius': {
+            validate: (value: number) => value >= 0 && value <= 3,
+            message: 'Bloom radius must be between 0 and 3'
+        },
+        'visualization.bloom.edge_bloom_strength': {
+            validate: (value: number) => value >= 0 && value <= 5,
+            message: 'Edge bloom strength must be between 0 and 5'
+        },
+        'visualization.bloom.node_bloom_strength': {
+            validate: (value: number) => value >= 0 && value <= 5,
+            message: 'Node bloom strength must be between 0 and 5'
+        },
+        'visualization.bloom.environment_bloom_strength': {
+            validate: (value: number) => value >= 0 && value <= 5,
+            message: 'Environment bloom strength must be between 0 and 5'
+        }
+    }
+};
+
+export function validateSettings(settings: Partial<Settings>): ValidationResult {
+    const errors: ValidationError[] = [];
+    
+    // Recursively validate all settings
+    function validateObject(obj: any, path: string = '') {
+        if (!obj || typeof obj !== 'object') return;
+        
+        Object.entries(obj).forEach(([key, value]) => {
+            const currentPath = path ? `${path}.${key}` : key;
+            
+            // Check if there's a validation rule for this path
+            for (const [category, rules] of Object.entries(validationRules)) {
+                if (currentPath.startsWith(category)) {
+                    const rule = rules[currentPath];
+                    if (rule && !rule.validate(value)) {
+                        errors.push({
+                            path: currentPath,
+                            message: rule.message,
+                            value
+                        });
+                    }
+                }
+            }
+            
+            // Recursively validate nested objects
+            if (value && typeof value === 'object' && !Array.isArray(value)) {
+                validateObject(value, currentPath);
+            }
+        });
+    }
+    
+    validateObject(settings);
+    
+    return {
+        isValid: errors.length === 0,
+        errors
+    };
+}
+
+export function validateSettingValue(path: string, value: any, currentSettings: Settings): ValidationError[] {
+    const errors: ValidationError[] = [];
+    
+    // Find matching validation rule
+    for (const [category, rules] of Object.entries(validationRules)) {
+        if (path.startsWith(category)) {
+            const rule = rules[path];
+            if (rule && !rule.validate(value)) {
+                errors.push({
+                    path,
+                    message: rule.message,
+                    value
+                });
+            }
+        }
+    }
+    
+    // Special validation for interdependent settings
+    if (path.includes('physics')) {
+        validatePhysicsSettings(path, value, currentSettings, errors);
+    } else if (path.includes('rendering')) {
+        validateRenderingSettings(path, value, currentSettings, errors);
+    }
+    
+    return errors;
+}
+
+function validatePhysicsSettings(
+    path: string,
+    value: any,
+    settings: Settings,
+    errors: ValidationError[]
+): void {
+    const physics = settings.visualization.physics;
+    
+    // Example: Ensure attraction and repulsion strengths are balanced
+    if (path === 'visualization.physics.attractionStrength' && physics.repulsionStrength) {
+        const ratio = value / physics.repulsionStrength;
+        if (ratio > 3 || ratio < 0.33) {
+            errors.push({
+                path,
+                message: 'Attraction and repulsion strengths should be relatively balanced',
+                value
+            });
+        }
+    }
+}
+
+function validateRenderingSettings(
+    path: string,
+    value: any,
+    settings: Settings,
+    errors: ValidationError[]
+): void {
+    const rendering = settings.visualization.rendering;
+    
+    // Example: Warn about performance impact of combined settings
+    if (path === 'visualization.rendering.quality' && value === 'high') {
+        if (rendering.enableShadows && rendering.enableAmbientOcclusion) {
+            errors.push({
+                path,
+                message: 'High quality with shadows and ambient occlusion may impact performance',
+                value
+            });
+        }
+    }
+}
+
+export function getValidationTooltip(path: string): string | undefined {
+    for (const [category, rules] of Object.entries(validationRules)) {
+        if (path.startsWith(category)) {
+            const rule = rules[path];
+            if (rule) {
+                return rule.message;
+            }
+        }
+    }
+    return undefined;
+}
+----
+types/settings/base.ts
+// Base settings interfaces
+import { XRSettings } from './xr';
+
+export interface Settings {
+    visualization: {
+        nodes: NodeSettings;
+        edges: EdgeSettings;
+        physics: PhysicsSettings;
+        rendering: RenderingSettings;
+        animations: AnimationSettings;
+        labels: LabelSettings;
+        bloom: BloomSettings;
+        hologram: HologramSettings;
+    };
+    system: {
+        websocket: WebSocketSettings;
+        debug: DebugSettings;
+    };
+    xr: XRSettings;
+}
+
+export interface NodeSettings {
+    quality: 'low' | 'medium' | 'high';
+    enableInstancing: boolean;
+    enableHologram: boolean;
+    enableMetadataShape: boolean;
+    enableMetadataVisualization: boolean;
+    sizeRange: [number, number];
+    baseColor: string;
+    opacity: number;
+    colorRangeAge: [string, string];
+    colorRangeLinks: [string, string];
+    metalness: number;
+    roughness: number;
+}
+
+export interface EdgeSettings {
+    color: string;
+    opacity: number;
+    arrowSize: number;
+    baseWidth: number;
+    enableArrows: boolean;
+    widthRange: [number, number];
+    quality: 'low' | 'medium' | 'high';
+    // New shader-based edge settings
+    enableFlowEffect: boolean;
+    flowSpeed: number;
+    flowIntensity: number;
+    glowStrength: number;
+    distanceIntensity: number;
+    useGradient: boolean;
+    gradientColors: [string, string];
+}
+
+export interface AnimationSettings {
+    enableNodeAnimations: boolean;
+    enableMotionBlur: boolean;
+    motionBlurStrength: number;
+    selectionWaveEnabled: boolean;
+    pulseEnabled: boolean;
+    pulseSpeed: number;
+    pulseStrength: number;
+    waveSpeed: number;
+}
+
+export interface LabelSettings {
+    enableLabels: boolean;
+    desktopFontSize: number;
+    textColor: string;
+    textOutlineColor: string;
+    textOutlineWidth: number;
+    textResolution: number;
+    textPadding: number;
+    billboardMode: 'camera' | 'vertical';
+}
+
+export interface BloomSettings {
+    enabled: boolean;
+    strength: number;
+    radius: number;
+    threshold: number;
+    edgeBloomStrength: number;
+    nodeBloomStrength: number;
+    environmentBloomStrength: number;
+}
+
+export interface HologramSettings {
+    ringCount: number;
+    sphereSizes: number[];  // Native world units (e.g. [40, 80, 120])
+    ringRotationSpeed: number;
+    globalRotationSpeed: number;
+    ringColor: string;
+    ringOpacity: number;
+    enableBuckminster: boolean;
+    buckminsterSize: number;  // Native world units (e.g. 120)
+    buckminsterOpacity: number;
+    enableGeodesic: boolean;
+    geodesicSize: number;  // Native world units (e.g. 100)
+    geodesicOpacity: number;
+    enableTriangleSphere: boolean;
+    triangleSphereSize: number;  // Native world units (e.g. 140)
+    triangleSphereOpacity: number;
+}
+
+export interface PhysicsSettings {
+    enabled: boolean;
+    attractionStrength: number;
+    repulsionStrength: number;
+    springStrength: number;
+    damping: number;
+    iterations: number;
+    maxVelocity: number;
+    collisionRadius: number;
+    enableBounds: boolean;
+    boundsSize: number;
+}
+
+export interface RenderingSettings {
+    ambientLightIntensity: number;
+    directionalLightIntensity: number;
+    environmentIntensity: number;
+    backgroundColor: string;
+    enableAmbientOcclusion: boolean;
+    enableAntialiasing: boolean;
+    enableShadows: boolean;
+    shadowMapSize: number;
+    shadowBias: number;
+    context: 'ar' | 'desktop';
+}
+
+export interface WebSocketSettings {
+    reconnectAttempts: number;
+    reconnectDelay: number;
+    binaryChunkSize: number;
+    compressionEnabled: boolean;
+    compressionThreshold: number;
+    updateRate: number;
+}
+
+export interface DebugSettings {
+    enabled: boolean;
+    enableDataDebug: boolean;
+    enableWebsocketDebug: boolean;
+    logBinaryHeaders: boolean;
+    logFullJson: boolean;
+    logLevel: 'error' | 'warn' | 'info' | 'debug' | 'trace';
+    logFormat: string;
+}
+
+// Helper type for settings paths
+export type SettingsPath = string;
+
+// Helper type for settings values
+export type SettingsValue = string | number | boolean | number[] | object;
+
+----
+components/settings/ValidationErrorDisplay.ts
+import { ValidationError } from '../../types/settings/validation';
+import { SettingsStore } from '../../state/SettingsStore';
+import { formatSettingName } from '../../types/settings/utils';
+
+export class ValidationErrorDisplay {
+    private container: HTMLDivElement;
+    private errorList: HTMLUListElement;
+    private unsubscribe: (() => void) | null = null;
+
+    constructor(parentElement: HTMLElement) {
+        // Create container
+        this.container = document.createElement('div');
+        this.container.className = 'validation-error-container';
+        this.container.style.cssText = `
+            display: none;
+            position: fixed;
+            bottom: 20px;
+            right: 20px;
+            max-width: 400px;
+            background-color: #fee;
+            border: 1px solid #faa;
+            border-radius: 4px;
+            padding: 12px;
+            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
+            z-index: 1000;
+            font-family: Arial, sans-serif;
+        `;
+
+        // Create header
+        const header = document.createElement('div');
+        header.style.cssText = `
+            display: flex;
+            justify-content: space-between;
+            align-items: center;
+            margin-bottom: 8px;
+        `;
+
+        const title = document.createElement('h3');
+        title.textContent = 'Settings Validation Errors';
+        title.style.cssText = `
+            margin: 0;
+            color: #d32f2f;
+            font-size: 16px;
+        `;
+
+        const closeButton = document.createElement('button');
+        closeButton.innerHTML = '&times;';
+        closeButton.style.cssText = `
+            background: none;
+            border: none;
+            color: #666;
+            font-size: 20px;
+            cursor: pointer;
+            padding: 0 4px;
+        `;
+        closeButton.onclick = () => this.hide();
+
+        header.appendChild(title);
+        header.appendChild(closeButton);
+        this.container.appendChild(header);
+
+        // Create error list
+        this.errorList = document.createElement('ul');
+        this.errorList.style.cssText = `
+            margin: 0;
+            padding-left: 20px;
+            color: #d32f2f;
+            font-size: 14px;
+        `;
+        this.container.appendChild(this.errorList);
+
+        // Add to parent
+        parentElement.appendChild(this.container);
+
+        // Subscribe to validation errors
+        this.subscribeToValidationErrors();
+    }
+
+    private subscribeToValidationErrors(): void {
+        const settingsStore = SettingsStore.getInstance();
+        this.unsubscribe = settingsStore.subscribeToValidationErrors((errors: ValidationError[]) => {
+            if (errors.length > 0) {
+                this.showErrors(errors);
+            } else {
+                this.hide();
+            }
+        });
+    }
+
+    private showErrors(errors: ValidationError[]): void {
+        // Clear existing errors
+        this.errorList.innerHTML = '';
+
+        // Add new errors
+        errors.forEach(error => {
+            const li = document.createElement('li');
+            li.style.marginBottom = '4px';
+            
+            // Format the error message
+            const settingName = formatSettingName(error.path.split('.').pop() || '');
+            const formattedPath = error.path.split('.').map(formatSettingName).join(' → ');
+            
+            li.innerHTML = `
+                <strong>${settingName}:</strong> ${error.message}<br>
+                <small style="color: #666;">Path: ${formattedPath}</small>
+            `;
+            
+            this.errorList.appendChild(li);
+        });
+
+        // Show the container
+        this.container.style.display = 'block';
+
+        // Auto-hide after 5 seconds
+        setTimeout(() => this.hide(), 5000);
+    }
+
+    private hide(): void {
+        this.container.style.display = 'none';
+    }
+
+    public dispose(): void {
+        if (this.unsubscribe) {
+            this.unsubscribe();
+            this.unsubscribe = null;
+        }
+        this.container.remove();
+    }
+
+    // Helper method to create an instance and attach it to the document body
+    public static initialize(): ValidationErrorDisplay {
+        return new ValidationErrorDisplay(document.body);
+    }
+}
+
+// Add CSS to document
+const style = document.createElement('style');
+style.textContent = `
+    .validation-error-container {
+        animation: slideIn 0.3s ease-out;
+    }
+
+    @keyframes slideIn {
+        from {
+            transform: translateX(100%);
+            opacity: 0;
+        }
+        to {
+            transform: translateX(0);
+            opacity: 1;
+        }
+    }
+
+    .validation-error-container button:hover {
+        color: #000;
+    }
+
+    .validation-error-container ul li {
+        line-height: 1.4;
+    }
+`;
+document.head.appendChild(style);
+----
+services/NostrAuthService.ts
+import { SettingsEventEmitter, SettingsEventType } from './SettingsEventEmitter';
+import { SettingsPersistenceService } from './SettingsPersistenceService';
+import { createLogger } from '../core/logger';
+import { buildApiUrl } from '../core/api';
+import { API_ENDPOINTS } from '../core/constants';
+
+const logger = createLogger('NostrAuthService');
+
+declare global {
+    interface Window {
+        nostr?: {
+            getPublicKey(): Promise<string>;
+            signEvent(event: any): Promise<any>;
+        };
+    }
+}
+
+/**
+ * Represents a Nostr user with their access rights
+ */
+export interface NostrUser {
+    pubkey: string;
+    isPowerUser: boolean;
+    features: string[];
+}
+
+/**
+ * Result of an authentication attempt
+ */
+export interface AuthResult {
+    authenticated: boolean;
+    user?: NostrUser;
+    error?: string;
+}
+
+/**
+ * Service for handling Nostr authentication and feature access
+ */
+export class NostrAuthService {
+    private static instance: NostrAuthService;
+    private currentUser: NostrUser | null = null;
+    private eventEmitter: SettingsEventEmitter;
+    private settingsPersistence: SettingsPersistenceService;
+
+    private constructor() {
+        this.eventEmitter = SettingsEventEmitter.getInstance();
+        this.settingsPersistence = SettingsPersistenceService.getInstance();
+    }
+
+    /**
+     * Get the singleton instance of NostrAuthService
+     */
+    public static getInstance(): NostrAuthService {
+        if (!NostrAuthService.instance) {
+            NostrAuthService.instance = new NostrAuthService();
+        }
+        return NostrAuthService.instance;
+    }
+
+    /**
+     * Initialize the auth service and check for existing session
+     */
+    public async initialize(): Promise<void> {
+        const storedPubkey = localStorage.getItem('nostr_pubkey');
+        if (storedPubkey) {
+            // Wait for checkAuthStatus to complete
+            await this.checkAuthStatus(storedPubkey);
+            
+            // Emit auth state change after initialization
+            this.eventEmitter.emit(SettingsEventType.AUTH_STATE_CHANGED, {
+                authState: {
+                    isAuthenticated: this.currentUser !== null,
+                    pubkey: this.currentUser?.pubkey
+                }
+            });
+        }
+    }
+
+    /**
+     * Check if Alby extension is available
+     */
+    private checkAlbyAvailability(): boolean {
+        return typeof window !== 'undefined' && 'nostr' in window;
+    }
+
+    /**
+     * Create a Nostr event for authentication
+     */
+    private async createAuthEvent(pubkey: string): Promise<any> {
+        const createdAt = Math.floor(Date.now() / 1000);
+        const tags = [
+            ['domain', window.location.hostname],
+            ['challenge', Date.now().toString()]
+        ];
+
+        const event = {
+            kind: 27235,
+            created_at: createdAt,
+            tags,
+            content: `Authenticate with ${window.location.hostname} at ${new Date().toISOString()}`,
+            pubkey
+        };
+
+        // Sign the event using the Alby extension
+        const signedEvent = await window.nostr?.signEvent(event);
+        if (!signedEvent) {
+            throw new Error('Failed to sign authentication event');
+        }
+
+        return signedEvent;
+    }
+
+    /**
+     * Attempt to authenticate with Nostr using Alby
+     */
+    public async login(): Promise<AuthResult> {
+        try {
+            // Check if Alby is available
+            if (!this.checkAlbyAvailability()) {
+                throw new Error('Alby extension not found. Please install Alby to use Nostr login.');
+            }
+
+            // Get public key from Alby
+            const pubkey = await window.nostr?.getPublicKey();
+            if (!pubkey) {
+                throw new Error('Failed to get public key from Alby');
+            }
+
+            // Create and sign the authentication event
+            const signedEvent = await this.createAuthEvent(pubkey);
+
+            // Send authentication request to server
+            const response = await fetch(buildApiUrl(API_ENDPOINTS.AUTH_NOSTR), {
+                method: 'POST',
+                headers: {
+                    'Content-Type': 'application/json',
+                },
+                body: JSON.stringify(signedEvent)
+            });
+
+            if (!response.ok) {
+                const errorText = await response.text();
+                throw new Error(`Authentication failed: ${errorText}`);
+            }
+
+            const authData = await response.json();
+            this.currentUser = {
+                pubkey: authData.user.pubkey,
+                isPowerUser: authData.user.is_power_user,
+                features: authData.features
+            };
+
+            localStorage.setItem('nostr_pubkey', pubkey);
+            localStorage.setItem('nostr_token', authData.token);
+            this.settingsPersistence.setCurrentPubkey(pubkey);
+            
+            this.eventEmitter.emit(SettingsEventType.AUTH_STATE_CHANGED, {
+                authState: {
+                    isAuthenticated: true,
+                    pubkey
+                }
+            });
+
+            return {
+                authenticated: true,
+                user: this.currentUser
+            };
+        } catch (error) {
+            logger.error('Login failed:', error);
+            return {
+                authenticated: false,
+                error: error instanceof Error ? error.message : 'Unknown error occurred'
+            };
+        }
+    }
+
+    /**
+     * Log out the current user
+     */
+    public async logout(): Promise<void> {
+        const currentPubkey = this.currentUser?.pubkey;
+        const token = localStorage.getItem('nostr_token');
+        
+        if (currentPubkey && token) {
+            try {
+                await fetch(buildApiUrl(API_ENDPOINTS.AUTH_NOSTR), {
+                    method: 'DELETE',
+                    headers: {
+                        'Content-Type': 'application/json',
+                    },
+                    body: JSON.stringify({
+                        pubkey: currentPubkey,
+                        token
+                    })
+                });
+            } catch (error) {
+                logger.error('Logout request failed:', error);
+            }
+        }
+
+        localStorage.removeItem('nostr_pubkey');
+        localStorage.removeItem('nostr_token');
+        this.currentUser = null;
+        this.settingsPersistence.setCurrentPubkey(null);
+        
+        this.eventEmitter.emit(SettingsEventType.AUTH_STATE_CHANGED, {
+            authState: {
+                isAuthenticated: false
+            }
+        });
+
+        // If user was using server settings, revert to local settings
+        if (currentPubkey) {
+            await this.settingsPersistence.loadSettings();
+        }
+    }
+
+    /**
+     * Get the current authenticated user
+     */
+    public getCurrentUser(): NostrUser | null {
+        return this.currentUser;
+    }
+
+    /**
+     * Check if the current user is authenticated
+     */
+    public isAuthenticated(): boolean {
+        return this.currentUser !== null;
+    }
+
+    /**
+     * Check if the current user is a power user
+     */
+    public isPowerUser(): boolean {
+        return this.currentUser?.isPowerUser || false;
+    }
+
+    /**
+     * Check if the current user has access to a specific feature
+     */
+    public hasFeatureAccess(feature: string): boolean {
+        return this.currentUser?.features.includes(feature) || false;
+    }
+
+    /**
+     * Check authentication status with the server
+     */
+    private async checkAuthStatus(pubkey: string): Promise<void> {
+        const token = localStorage.getItem('nostr_token');
+        if (!token) {
+            await this.logout();
+            return;
+        }
+
+        try {
+            const response = await fetch(buildApiUrl(API_ENDPOINTS.AUTH_NOSTR_VERIFY), {
+                method: 'POST',
+                headers: {
+                    'Content-Type': 'application/json',
+                },
+                body: JSON.stringify({
+                    pubkey,
+                    token
+                })
+            });
+
+            if (!response.ok) {
+                throw new Error('Authentication check failed');
+            }
+
+            const verifyData = await response.json();
+            if (!verifyData.valid) {
+                throw new Error('Invalid session');
+            }
+
+            // Set currentUser before emitting event
+            this.currentUser = {
+                pubkey,
+                isPowerUser: verifyData.is_power_user,
+                features: verifyData.features
+            };
+
+            this.settingsPersistence.setCurrentPubkey(pubkey);
+        } catch (error) {
+            logger.error('Auth check failed:', error);
+            await this.logout();
+        }
+    }
+
+    /**
+     * Subscribe to authentication state changes
+     */
+    public onAuthStateChanged(callback: (state: { authenticated: boolean; user?: NostrUser }) => void): () => void {
+        return this.eventEmitter.on(SettingsEventType.AUTH_STATE_CHANGED, (data) => {
+            callback({
+                authenticated: data.authState?.isAuthenticated || false,
+                user: this.currentUser || undefined
+            });
+        });
+    }
+}
+
+// Export singleton instance
+export const nostrAuth = NostrAuthService.getInstance();
+----
+services/SettingsEventEmitter.ts
+import { createLogger } from '../core/logger';
+import { Settings } from '../types/settings/base';
+import { ValidationError } from '../types/settings/validation';
+
+const logger = createLogger('SettingsEventEmitter');
+
+export enum SettingsEventType {
+    SETTINGS_LOADED = 'settings:loaded',
+    SETTINGS_SAVED = 'settings:saved',
+    SETTINGS_CHANGED = 'settings:changed',
+    SETTINGS_ERROR = 'settings:error',
+    SETTINGS_SYNCED = 'settings:synced',
+    SETTINGS_VALIDATION_ERROR = 'settings:validation_error',
+    SECTION_DETACHED = 'section:detached',
+    SECTION_DOCKED = 'section:docked',
+    SECTION_MOVED = 'section:moved',
+    SECTION_RESIZED = 'section:resized',
+    SECTION_COLLAPSED = 'section:collapsed',
+    SECTION_EXPANDED = 'section:expanded',
+    LAYOUT_CHANGED = 'layout:changed',
+    LAYOUT_SAVED = 'layout:saved',
+    LAYOUT_LOADED = 'layout:loaded',
+    PREVIEW_UPDATED = 'preview:updated',
+    PREVIEW_RESET = 'preview:reset',
+    AUTH_STATE_CHANGED = 'auth:state_changed'
+}
+
+export interface EventData {
+    type: SettingsEventType;
+    path?: string;
+    value?: any;
+    error?: Error;
+    validationErrors?: ValidationError[];
+    sectionId?: string;
+    position?: { x: number; y: number };
+    size?: { width: number; height: number };
+    layout?: any;
+    settings?: Partial<Settings>;
+    authState?: {
+        isAuthenticated: boolean;
+        pubkey?: string;
+    };
+}
+
+export type EventCallback = (data: EventData) => void;
+
+export class SettingsEventEmitter {
+    private static instance: SettingsEventEmitter | null = null;
+    private listeners: Map<SettingsEventType, Set<EventCallback>>;
+    private lastEvents: Map<SettingsEventType, EventData>;
+
+    private constructor() {
+        this.listeners = new Map();
+        this.lastEvents = new Map();
+    }
+
+    public static getInstance(): SettingsEventEmitter {
+        if (!SettingsEventEmitter.instance) {
+            SettingsEventEmitter.instance = new SettingsEventEmitter();
+        }
+        return SettingsEventEmitter.instance;
+    }
+
+    public on(event: SettingsEventType, callback: EventCallback): () => void {
+        if (!this.listeners.has(event)) {
+            this.listeners.set(event, new Set());
+        }
+
+        const callbacks = this.listeners.get(event)!;
+        callbacks.add(callback);
+
+        // Call with last event data if available
+        const lastEvent = this.lastEvents.get(event);
+        if (lastEvent) {
+            try {
+                callback(lastEvent);
+            } catch (error) {
+                logger.error(`Error in event listener for ${event}:`, error);
+            }
+        }
+
+        // Return unsubscribe function
+        return () => {
+            const callbacks = this.listeners.get(event);
+            if (callbacks) {
+                callbacks.delete(callback);
+                if (callbacks.size === 0) {
+                    this.listeners.delete(event);
+                }
+            }
+        };
+    }
+
+    public emit(event: SettingsEventType, data: Omit<EventData, 'type'>): void {
+        const eventData: EventData = { type: event, ...data };
+        
+        // Store last event data
+        this.lastEvents.set(event, eventData);
+
+        const callbacks = this.listeners.get(event);
+        if (callbacks) {
+            callbacks.forEach(callback => {
+                try {
+                    callback(eventData);
+                } catch (error) {
+                    logger.error(`Error in event listener for ${event}:`, error);
+                }
+            });
+        }
+
+        // Log significant events
+        switch (event) {
+            case SettingsEventType.SETTINGS_ERROR:
+            case SettingsEventType.SETTINGS_VALIDATION_ERROR:
+                logger.error(`${event}:`, data.error || data.validationErrors);
+                break;
+            case SettingsEventType.SETTINGS_LOADED:
+            case SettingsEventType.SETTINGS_SAVED:
+            case SettingsEventType.SETTINGS_SYNCED:
+                logger.info(`${event} completed`);
+                break;
+            case SettingsEventType.AUTH_STATE_CHANGED:
+                logger.info('Authentication state changed:', data.authState);
+                break;
+        }
+    }
+
+    public getLastEvent(event: SettingsEventType): EventData | undefined {
+        return this.lastEvents.get(event);
+    }
+
+    public clearLastEvent(event: SettingsEventType): void {
+        this.lastEvents.delete(event);
+    }
+
+    public clearAllListeners(): void {
+        this.listeners.clear();
+    }
+
+    public dispose(): void {
+        this.clearAllListeners();
+        this.lastEvents.clear();
+        SettingsEventEmitter.instance = null;
+    }
+}
+
+// Create a singleton instance for easy access
+export const settingsEvents = SettingsEventEmitter.getInstance();
+----
+services/SettingsLayoutManager.ts
+import { createLogger } from '../core/logger';
+import { settingsEvents, SettingsEventType } from './SettingsEventEmitter';
+import { SettingVisibility } from '../settings';
+
+const logger = createLogger('SettingsLayoutManager');
+
+export interface SectionLayout {
+    id: string;
+    isDetached: boolean;
+    isCollapsed: boolean;
+    isAdvanced: boolean;
+    visibility: SettingVisibility;
+    position?: { x: number; y: number };
+    size?: { width: number; height: number };
+    order: number;
+}
+
+export interface PanelLayout {
+    sections: Record<string, SectionLayout>;
+    version: string;
+    timestamp: number;
+    pubkey?: string;
+}
+
+export class SettingsLayoutManager {
+    private static instance: SettingsLayoutManager | null = null;
+    private readonly LOCAL_STORAGE_KEY = 'logseq_spring_panel_layout';
+    private readonly LAYOUT_VERSION = '1.0.0';
+    private currentLayout: PanelLayout;
+    private currentPubkey: string | null = null;
+
+    private constructor() {
+        this.currentLayout = this.createDefaultLayout();
+        this.initializeLayoutManager();
+    }
+
+    public static getInstance(): SettingsLayoutManager {
+        if (!SettingsLayoutManager.instance) {
+            SettingsLayoutManager.instance = new SettingsLayoutManager();
+        }
+        return SettingsLayoutManager.instance;
+    }
+
+    private initializeLayoutManager(): void {
+        // Listen for section events
+        settingsEvents.on(SettingsEventType.SECTION_DETACHED, ({ sectionId, position, size }) => {
+            if (sectionId) {
+                this.updateSectionLayout(sectionId, { isDetached: true, position, size });
+            }
+        });
+
+        settingsEvents.on(SettingsEventType.SECTION_DOCKED, ({ sectionId }) => {
+            if (sectionId) {
+                this.updateSectionLayout(sectionId, { isDetached: false });
+            }
+        });
+
+        settingsEvents.on(SettingsEventType.SECTION_MOVED, ({ sectionId, position }) => {
+            if (sectionId && position) {
+                this.updateSectionLayout(sectionId, { position });
+            }
+        });
+
+        settingsEvents.on(SettingsEventType.SECTION_RESIZED, ({ sectionId, size }) => {
+            if (sectionId && size) {
+                this.updateSectionLayout(sectionId, { size });
+            }
+        });
+
+        settingsEvents.on(SettingsEventType.SECTION_COLLAPSED, ({ sectionId }) => {
+            if (sectionId) {
+                this.updateSectionLayout(sectionId, { isCollapsed: true });
+            }
+        });
+
+        settingsEvents.on(SettingsEventType.SECTION_EXPANDED, ({ sectionId }) => {
+            if (sectionId) {
+                this.updateSectionLayout(sectionId, { isCollapsed: false });
+            }
+        });
+
+        // Listen for auth state changes
+        settingsEvents.on(SettingsEventType.AUTH_STATE_CHANGED, ({ authState }) => {
+            if (authState) {
+                this.setCurrentPubkey(authState.isAuthenticated ? authState.pubkey ?? null : null);
+            }
+        });
+    }
+
+    private createDefaultLayout(): PanelLayout {
+        return {
+            sections: {
+                visualization: {
+                    id: 'visualization',
+                    isDetached: false,
+                    isCollapsed: false,
+                    isAdvanced: false,
+                    visibility: SettingVisibility.Basic,
+                    order: 0
+                },
+                physics: {
+                    id: 'physics',
+                    isDetached: false,
+                    isCollapsed: true,
+                    isAdvanced: true,
+                    visibility: SettingVisibility.Advanced,
+                    order: 1
+                },
+                rendering: {
+                    id: 'rendering',
+                    isDetached: false,
+                    isCollapsed: true,
+                    isAdvanced: true,
+                    visibility: SettingVisibility.Advanced,
+                    order: 2
+                },
+                system: {
+                    id: 'system',
+                    isDetached: false,
+                    isCollapsed: true,
+                    isAdvanced: true,
+                    visibility: SettingVisibility.Advanced,
+                    order: 3
+                },
+                xr: {
+                    id: 'xr',
+                    isDetached: false,
+                    isCollapsed: true,
+                    isAdvanced: false,
+                    visibility: SettingVisibility.Basic,
+                    order: 4
+                }
+            },
+            version: this.LAYOUT_VERSION,
+            timestamp: Date.now()
+        };
+    }
+
+    public setCurrentPubkey(pubkey: string | null): void {
+        this.currentPubkey = pubkey;
+        this.loadLayout();
+    }
+
+    private updateSectionLayout(sectionId: string, updates: Partial<SectionLayout>): void {
+        const section = this.currentLayout.sections[sectionId];
+        if (section) {
+            Object.assign(section, updates);
+            this.saveLayout();
+            settingsEvents.emit(SettingsEventType.LAYOUT_CHANGED, {
+                layout: this.currentLayout
+            });
+        }
+    }
+
+    public getSectionLayout(sectionId: string): SectionLayout | undefined {
+        return this.currentLayout.sections[sectionId];
+    }
+
+    public getAllSectionLayouts(): Record<string, SectionLayout> {
+        return { ...this.currentLayout.sections };
+    }
+
+    public async saveLayout(): Promise<void> {
+        try {
+            this.currentLayout.timestamp = Date.now();
+            if (this.currentPubkey) {
+                this.currentLayout.pubkey = this.currentPubkey;
+            }
+
+            localStorage.setItem(
+                this.LOCAL_STORAGE_KEY,
+                JSON.stringify(this.currentLayout)
+            );
+
+            settingsEvents.emit(SettingsEventType.LAYOUT_SAVED, {
+                layout: this.currentLayout
+            });
+
+            logger.info('Layout saved successfully');
+        } catch (error) {
+            logger.error('Failed to save layout:', error);
+            throw error;
+        }
+    }
+
+    public loadLayout(): void {
+        try {
+            const storedJson = localStorage.getItem(this.LOCAL_STORAGE_KEY);
+            if (storedJson) {
+                const stored: PanelLayout = JSON.parse(storedJson);
+
+                // Version check
+                if (stored.version !== this.LAYOUT_VERSION) {
+                    logger.warn('Layout version mismatch, using defaults');
+                    this.currentLayout = this.createDefaultLayout();
+                    return;
+                }
+
+                // Pubkey check
+                if (stored.pubkey && stored.pubkey !== this.currentPubkey) {
+                    logger.warn('Layout pubkey mismatch, using defaults');
+                    this.currentLayout = this.createDefaultLayout();
+                    return;
+                }
+
+                this.currentLayout = stored;
+                settingsEvents.emit(SettingsEventType.LAYOUT_LOADED, {
+                    layout: this.currentLayout
+                });
+                logger.info('Layout loaded successfully');
+            }
+        } catch (error) {
+            logger.error('Failed to load layout:', error);
+            this.currentLayout = this.createDefaultLayout();
+        }
+    }
+
+    public resetLayout(): void {
+        this.currentLayout = this.createDefaultLayout();
+        this.saveLayout();
+        settingsEvents.emit(SettingsEventType.LAYOUT_LOADED, {
+            layout: this.currentLayout
+        });
+        logger.info('Layout reset to defaults');
+    }
+
+    public dispose(): void {
+        SettingsLayoutManager.instance = null;
+    }
+}
+
+// Create a singleton instance for easy access
+export const layoutManager = SettingsLayoutManager.getInstance();
+----
+services/SettingsPersistenceService.ts
+import { Settings } from '../types/settings/base';
+import { defaultSettings } from '../state/defaultSettings';
+import { createLogger } from '../core/logger';
+import { validateSettings } from '../types/settings/validation';
+
+const logger = createLogger('SettingsPersistenceService');
+
+export interface StoredSettings {
+    settings: Settings;
+    timestamp: number;
+    version: string;
+    pubkey?: string;
+}
+
+export class SettingsPersistenceService {
+    private static instance: SettingsPersistenceService | null = null;
+    private readonly LOCAL_STORAGE_KEY = 'logseq_spring_settings';
+    private readonly SETTINGS_VERSION = '1.0.0';
+    private currentPubkey: string | null = null;
+
+    private constructor() {}
+
+    public static getInstance(): SettingsPersistenceService {
+        if (!SettingsPersistenceService.instance) {
+            SettingsPersistenceService.instance = new SettingsPersistenceService();
+        }
+        return SettingsPersistenceService.instance;
+    }
+
+    public setCurrentPubkey(pubkey: string | null): void {
+        this.currentPubkey = pubkey;
+    }
+
+    public async saveSettings(settings: Settings): Promise<void> {
+        try {
+            // Validate settings before saving
+            const validation = validateSettings(settings);
+            if (!validation.isValid) {
+                throw new Error(`Invalid settings: ${JSON.stringify(validation.errors)}`);
+            }
+
+            const storedSettings: StoredSettings = {
+                settings,
+                timestamp: Date.now(),
+                version: this.SETTINGS_VERSION,
+                pubkey: this.currentPubkey ?? undefined
+            };
+
+            // Save locally
+            localStorage.setItem(this.LOCAL_STORAGE_KEY, JSON.stringify(storedSettings));
+
+            // If user is authenticated, sync to server
+            if (this.currentPubkey) {
+                await this.syncToServer(storedSettings);
+            }
+
+            logger.info('Settings saved successfully');
+        } catch (error) {
+            logger.error('Failed to save settings:', error);
+            throw error;
+        }
+    }
+
+    public async loadSettings(): Promise<Settings> {
+        try {
+            // Try to load from server if authenticated
+            if (this.currentPubkey) {
+                try {
+                    const serverSettings = await this.loadFromServer();
+                    if (serverSettings) {
+                        return serverSettings;
+                    }
+                } catch (error) {
+                    logger.warn('Failed to load settings from server:', error);
+                }
+            }
+
+            // Fall back to local storage
+            const storedJson = localStorage.getItem(this.LOCAL_STORAGE_KEY);
+            if (storedJson) {
+                const stored: StoredSettings = JSON.parse(storedJson);
+
+                // Version check
+                if (stored.version !== this.SETTINGS_VERSION) {
+                    logger.warn('Settings version mismatch, using defaults');
+                    return this.migrateSettings(stored.settings);
+                }
+
+                // Pubkey check
+                if (stored.pubkey && stored.pubkey !== this.currentPubkey) {
+                    logger.warn('Settings pubkey mismatch, using defaults');
+                    return { ...defaultSettings };
+                }
+
+                // Validate loaded settings
+                const validation = validateSettings(stored.settings);
+                if (!validation.isValid) {
+                    logger.warn('Invalid stored settings, using defaults');
+                    return { ...defaultSettings };
+                }
+
+                return stored.settings;
+            }
+
+            // No stored settings found, use defaults
+            return { ...defaultSettings };
+        } catch (error) {
+            logger.error('Failed to load settings:', error);
+            return { ...defaultSettings };
+        }
+    }
+
+    private async syncToServer(storedSettings: StoredSettings): Promise<void> {
+        try {
+            const response = await fetch('/api/settings/sync', {
+                method: 'POST',
+                headers: {
+                    'Content-Type': 'application/json',
+                    'X-Nostr-Pubkey': this.currentPubkey!
+                },
+                body: JSON.stringify(storedSettings)
+            });
+
+            if (!response.ok) {
+                throw new Error(`Server returned ${response.status}: ${await response.text()}`);
+            }
+
+            logger.info('Settings synced to server');
+        } catch (error) {
+            logger.error('Failed to sync settings to server:', error);
+            throw error;
+        }
+    }
+
+    private async loadFromServer(): Promise<Settings | null> {
+        try {
+            const response = await fetch('/api/settings/sync', {
+                headers: {
+                    'X-Nostr-Pubkey': this.currentPubkey!
+                }
+            });
+
+            if (!response.ok) {
+                if (response.status === 404) {
+                    return null;
+                }
+                throw new Error(`Server returned ${response.status}: ${await response.text()}`);
+            }
+
+            const stored: StoredSettings = await response.json();
+            
+            // Version check
+            if (stored.version !== this.SETTINGS_VERSION) {
+                return this.migrateSettings(stored.settings);
+            }
+
+            return stored.settings;
+        } catch (error) {
+            logger.error('Failed to load settings from server:', error);
+            throw error;
+        }
+    }
+
+    private migrateSettings(oldSettings: Settings): Settings {
+        // Implement version-specific migrations here
+        logger.info('Migrating settings from older version');
+        
+        // For now, just merge with defaults
+        return {
+            ...defaultSettings,
+            ...oldSettings,
+            // Ensure critical sections are preserved
+            system: {
+                ...defaultSettings.system,
+                ...oldSettings.system
+            },
+            xr: {
+                ...defaultSettings.xr,
+                ...oldSettings.xr
+            }
+        };
+    }
+
+    public clearSettings(): void {
+        localStorage.removeItem(this.LOCAL_STORAGE_KEY);
+        logger.info('Settings cleared');
+    }
+
+    public dispose(): void {
+        SettingsPersistenceService.instance = null;
+    }
+}
+----
+services/SettingsPreviewManager.ts
+import { createLogger } from '../core/logger';
+import { settingsEvents, SettingsEventType } from './SettingsEventEmitter';
+import { VisualizationController } from '../rendering/VisualizationController';
+import { Settings } from '../types/settings/base';
+
+const logger = createLogger('SettingsPreviewManager');
+
+type VisualizationCategory = 'visualization' | 'physics' | 'rendering';
+
+export interface PreviewState {
+    originalSettings: Partial<Settings>;
+    previewSettings: Partial<Settings>;
+    isPreviewActive: boolean;
+    previewTimeout: number | null;
+}
+
+export class SettingsPreviewManager {
+    private static instance: SettingsPreviewManager | null = null;
+    private visualizationController: VisualizationController;
+    private readonly UPDATE_DELAY = 16; // ~60fps
+    private previewStates: Map<VisualizationCategory, PreviewState>;
+
+    private constructor() {
+        this.visualizationController = VisualizationController.getInstance();
+        this.previewStates = new Map();
+        this.initializePreviewManager();
+    }
+
+    public static getInstance(): SettingsPreviewManager {
+        if (!SettingsPreviewManager.instance) {
+            SettingsPreviewManager.instance = new SettingsPreviewManager();
+        }
+        return SettingsPreviewManager.instance;
+    }
+
+    private initializePreviewManager(): void {
+        // Listen for settings changes
+        settingsEvents.on(SettingsEventType.SETTINGS_CHANGED, ({ path, value }) => {
+            if (path) {
+                this.handleSettingChange(path, value);
+            }
+        });
+
+        // Listen for preview reset events
+        settingsEvents.on(SettingsEventType.PREVIEW_RESET, ({ path }) => {
+            if (path) {
+                const category = this.getCategoryFromPath(path);
+                if (category) {
+                    this.resetPreview(category);
+                }
+            }
+        });
+    }
+
+    private getCategoryFromPath(path: string): VisualizationCategory | null {
+        const category = path.split('.')[0];
+        if (['visualization', 'physics', 'rendering'].includes(category)) {
+            return category as VisualizationCategory;
+        }
+        return null;
+    }
+
+    private handleSettingChange(path: string, value: any): void {
+        const category = this.getCategoryFromPath(path);
+        if (!category) return;
+
+        let previewState = this.previewStates.get(category);
+
+        if (!previewState) {
+            previewState = {
+                originalSettings: {},
+                previewSettings: {},
+                isPreviewActive: false,
+                previewTimeout: null
+            };
+            this.previewStates.set(category, previewState);
+        }
+
+        // Store original value if not already stored
+        if (!previewState.isPreviewActive) {
+            previewState.originalSettings = this.visualizationController.getSettings(category);
+            previewState.isPreviewActive = true;
+        }
+
+        // Update preview settings
+        this.updatePreviewSettings(previewState, path, value);
+
+        // Debounce preview update
+        if (previewState.previewTimeout !== null) {
+            window.clearTimeout(previewState.previewTimeout);
+        }
+
+        previewState.previewTimeout = window.setTimeout(() => {
+            this.applyPreview(category, previewState);
+            previewState.previewTimeout = null;
+        }, this.UPDATE_DELAY);
+    }
+
+    private updatePreviewSettings(state: PreviewState, path: string, value: any): void {
+        const parts = path.split('.');
+        let current = state.previewSettings as any;
+
+        // Create nested structure
+        for (let i = 0; i < parts.length - 1; i++) {
+            const part = parts[i];
+            if (!(part in current)) {
+                current[part] = {};
+            }
+            current = current[part];
+        }
+
+        // Set the value
+        current[parts[parts.length - 1]] = value;
+    }
+
+    private applyPreview(category: VisualizationCategory, state: PreviewState): void {
+        try {
+            // Apply preview settings to visualization
+            this.visualizationController.updateSettings(category, state.previewSettings);
+
+            // Emit preview updated event
+            settingsEvents.emit(SettingsEventType.PREVIEW_UPDATED, {
+                path: category,
+                value: state.previewSettings
+            });
+
+            logger.debug(`Preview applied for ${category}`);
+        } catch (error) {
+            logger.error(`Failed to apply preview for ${category}:`, error);
+            this.resetPreview(category);
+        }
+    }
+
+    public resetPreview(category: VisualizationCategory): void {
+        const state = this.previewStates.get(category);
+        if (state?.isPreviewActive) {
+            try {
+                // Clear any pending preview
+                if (state.previewTimeout !== null) {
+                    window.clearTimeout(state.previewTimeout);
+                    state.previewTimeout = null;
+                }
+
+                // Restore original settings
+                this.visualizationController.updateSettings(category, state.originalSettings);
+
+                // Reset state
+                state.previewSettings = {};
+                state.isPreviewActive = false;
+
+                logger.debug(`Preview reset for ${category}`);
+            } catch (error) {
+                logger.error(`Failed to reset preview for ${category}:`, error);
+            }
+        }
+    }
+
+    public resetAllPreviews(): void {
+        ['visualization', 'physics', 'rendering'].forEach(category => {
+            this.resetPreview(category as VisualizationCategory);
+        });
+    }
+
+    public isPreviewActive(category: VisualizationCategory): boolean {
+        const state = this.previewStates.get(category);
+        return state?.isPreviewActive ?? false;
+    }
+
+    public getPreviewSettings(category: VisualizationCategory): Partial<Settings> | null {
+        const state = this.previewStates.get(category);
+        return state?.isPreviewActive ? state.previewSettings : null;
+    }
+
+    public dispose(): void {
+        this.resetAllPreviews();
+        this.previewStates.clear();
+        SettingsPreviewManager.instance = null;
+    }
+}
+
+// Create a singleton instance for easy access
+export const previewManager = SettingsPreviewManager.getInstance();
+----
+utils/eventEmitter.ts
+type EventCallback<T = any> = (data: T) => void;
+type EventMap = Record<string, any>;
+
+export class EventEmitter<Events extends EventMap = EventMap> {
+    private events: {
+        [E in keyof Events]?: EventCallback<Events[E]>[];
+    } = {};
+
+    on<E extends keyof Events>(event: E, callback: EventCallback<Events[E]>): void {
+        if (!this.events[event]) {
+            this.events[event] = [];
+        }
+        this.events[event]?.push(callback);
+    }
+
+    emit<E extends keyof Events>(event: E, data: Events[E]): void {
+        const callbacks = this.events[event];
+        if (callbacks) {
+            callbacks.forEach(callback => callback(data));
+        }
+    }
+
+    off<E extends keyof Events>(event: E, callback: EventCallback<Events[E]>): void {
+        const callbacks = this.events[event];
+        if (callbacks) {
+            this.events[event] = callbacks.filter(cb => cb !== callback);
+        }
+    }
+} 
+--END--
\ No newline at end of file
diff --git a/scripts/large_files_output.txt b/scripts/large_files_output.txt
new file mode 100644
index 00000000..db0f30c2
--- /dev/null
+++ b/scripts/large_files_output.txt
@@ -0,0 +1,57 @@
+index.html
+index.ts
+visualization/HologramManager.ts
+visualization/MetadataVisualizer.ts
+xr/handInteraction.ts
+xr/xrInitializer.ts
+xr/xrInteraction.ts
+xr/xrSessionManager.ts
+audio/AudioPlayer.ts
+config/featureFlags.ts
+core/constants.ts
+core/debugState.ts
+core/physicsConstants.ts
+core/types.ts
+core/utils.ts
+monitoring/NodeManagerMetrics.ts
+public/fonts/Roboto-Regular.woff2
+public/fonts/helvetiker_regular.typeface.json
+rendering/EdgeManager.ts
+rendering/MetadataVisualizer.ts
+rendering/textRenderer.ts
+rendering/VisualizationController.ts
+rendering/scene.ts
+rendering/factories/GeometryFactory.ts
+rendering/factories/MaterialFactory.ts
+rendering/materials/EdgeShaderMaterial.ts
+rendering/materials/HologramShaderMaterial.ts
+rendering/node/NodeManagerFacade.ts
+rendering/node/NodeManagerInterface.ts
+rendering/node/geometry/NodeGeometryManager.ts
+rendering/node/instance/NodeInstanceManager.ts
+rendering/node/interaction/NodeInteractionManager.ts
+rendering/node/metadata/NodeMetadataManager.ts
+state/SettingsObserver.ts
+state/SettingsStore.ts
+state/graphData.ts
+state/settings.ts
+state/defaultSettings.ts
+ui/ModularControlPanel.css
+ui/ModularControlPanel.ts
+ui/controlPanelConfig.ts
+websocket/websocketService.ts
+platform/platformManager.ts
+types/webxr.d.ts
+types/xr.ts
+types/three-ext.d.ts
+types/three.d.ts
+types/settings/utils.ts
+types/settings/xr.ts
+types/settings/validation.ts
+types/settings/base.ts
+components/settings/ValidationErrorDisplay.ts
+services/NostrAuthService.ts
+services/SettingsEventEmitter.ts
+services/SettingsLayoutManager.ts
+services/SettingsPersistenceService.ts
+services/SettingsPreviewManager.ts
diff --git a/scripts/launch-docker.sh b/scripts/launch-docker.sh
index 867ec629..0c6dcebc 100755
--- a/scripts/launch-docker.sh
+++ b/scripts/launch-docker.sh
@@ -465,6 +465,25 @@ fi
 GIT_HASH=$(git rev-parse HEAD 2>/dev/null || echo "development")
 export GIT_HASH
 
+# Compile CUDA to PTX
+log "${YELLOW}Compiling CUDA to PTX...${NC}"
+if ! command -v nvcc &>/dev/null; then
+    log "${RED}Error: NVIDIA CUDA Compiler (nvcc) not found${NC}"
+    log "${YELLOW}Please install CUDA toolkit to compile PTX files${NC}"
+    exit 1
+fi
+
+# Compile CUDA to PTX with optimizations
+if ! nvcc \
+    -arch=sm_86 \
+    -O3 \
+    --use_fast_math \
+    -ptx src/utils/compute_forces.cu \
+    -o src/utils/compute_forces.ptx; then
+    log "${RED}Failed to compile CUDA to PTX${NC}"
+    exit 1
+fi
+
 # Build client code before building container
 log "${YELLOW}Building client code...${NC}"
 pnpm build || { log "${RED}Client build failed${NC}"; exit 1; }
diff --git a/src/models/simulation_params.rs b/src/models/simulation_params.rs
index 14756c34..9b6a251a 100755
--- a/src/models/simulation_params.rs
+++ b/src/models/simulation_params.rs
@@ -4,9 +4,9 @@ use bytemuck::{Pod, Zeroable};
 #[derive(Debug, Clone, Copy, Serialize, Deserialize, PartialEq)]
 #[serde(rename_all = "camelCase")]
 pub enum SimulationMode {
-    Remote,  // GPU-accelerated remote computation
-    GPU,     // Local GPU computation
-    Local,   // CPU-based computation
+    Remote,  // GPU-accelerated remote computation (default)
+    GPU,     // Local GPU computation (deprecated)
+    Local,   // CPU-based computation (disabled)
 }
 
 impl Default for SimulationMode {
@@ -34,25 +34,37 @@ impl Default for SimulationPhase {
 #[derive(Default, Clone, Copy, Pod, Zeroable, Debug)]
 pub struct GPUSimulationParams {
     pub iterations: u32,
-    pub spring_length: f32,
     pub spring_strength: f32,
     pub repulsion: f32,
-    pub attraction: f32,
     pub damping: f32,
-    pub time_step: f32,
-    pub padding: u32,  // For alignment
+    pub max_repulsion_distance: f32,
+    pub viewport_bounds: f32,
+    pub mass_scale: f32,
+    pub boundary_damping: f32,
 }
 
 #[derive(Default, Serialize, Deserialize, Clone, Debug)]
 #[serde(rename_all = "camelCase")]
 pub struct SimulationParams {
+    // Core iteration parameters
     pub iterations: u32,           // Range: 1-500, Default: varies by phase
-    pub spring_length: f32,        // Range: 10-500, Default: 100
+    pub time_step: f32,           // Range: 0.01-1, Default: 0.2 (5fps)
+    
+    // Force parameters
     pub spring_strength: f32,      // Range: 0.1-10, Default: 0.5
-    pub repulsion: f32,           // Range: 1-1000, Default: 100
-    pub attraction: f32,          // Range: 0.1-10, Default: 1.0
+    pub repulsion: f32,           // Range: 1-2000, Default: 100
+    pub max_repulsion_distance: f32, // Range: 100-2000, Default: 500
+    
+    // Mass and damping
+    pub mass_scale: f32,          // Range: 0.1-5, Default: 1.0, Affects force scaling
     pub damping: f32,             // Range: 0-1, Default: 0.5
-    pub time_step: f32,           // Range: 0.01-1, Default: 0.2 (5fps)
+    pub boundary_damping: f32,    // Range: 0.5-1, Default: 0.9
+    
+    // Boundary control
+    pub viewport_bounds: f32,     // Range: 100-5000, Default: 1000
+    pub enable_bounds: bool,      // Default: true
+    
+    // Simulation state
     pub phase: SimulationPhase,   // Current simulation phase
     pub mode: SimulationMode,     // Computation mode
 }
@@ -61,12 +73,15 @@ impl SimulationParams {
     pub fn new() -> Self {
         Self {
             iterations: 100,
-            spring_length: 100.0,
+            time_step: 0.2,
             spring_strength: 0.5,
             repulsion: 100.0,
-            attraction: 1.0,
+            max_repulsion_distance: 500.0,
+            mass_scale: 1.0,
             damping: 0.5,
-            time_step: 0.2,        // Updated to 5fps
+            boundary_damping: 0.9,
+            viewport_bounds: 1000.0,
+            enable_bounds: true,
             phase: SimulationPhase::Initial,
             mode: SimulationMode::Remote,
         }
@@ -75,35 +90,44 @@ impl SimulationParams {
     pub fn with_phase(phase: SimulationPhase) -> Self {
         match phase {
             SimulationPhase::Initial => Self {
-                iterations: 300,           // Reduced from 500
-                spring_length: 100.0,
-                spring_strength: 0.5,      // Reduced from 1.0
-                repulsion: 100.0,          // Reduced from 200.0
-                attraction: 1.0,           // Reduced from 2.0
-                damping: 0.95,            // Increased from 0.9
-                time_step: 0.2,           // Updated to 5fps
+                iterations: 300,
+                time_step: 0.2,
+                spring_strength: 0.3,      // Reduced for initial spread
+                repulsion: 200.0,          // Increased for better separation
+                max_repulsion_distance: 800.0, // Larger range for initial layout
+                mass_scale: 1.2,           // Slightly higher mass influence
+                damping: 0.95,             // High damping for stability
+                boundary_damping: 0.95,
+                viewport_bounds: 1000.0,
+                enable_bounds: true,
                 phase,
                 mode: SimulationMode::Remote,
             },
             SimulationPhase::Dynamic => Self {
                 iterations: 50,
-                spring_length: 100.0,
+                time_step: 0.2,
                 spring_strength: 0.5,
                 repulsion: 100.0,
-                attraction: 1.0,
+                max_repulsion_distance: 500.0,
+                mass_scale: 1.0,
                 damping: 0.5,
-                time_step: 0.2,           // Updated to 5fps
+                boundary_damping: 0.9,
+                viewport_bounds: 1000.0,
+                enable_bounds: true,
                 phase,
                 mode: SimulationMode::Remote,
             },
             SimulationPhase::Finalize => Self {
                 iterations: 200,
-                spring_length: 100.0,
-                spring_strength: 0.1,
-                repulsion: 50.0,
-                attraction: 0.5,
-                damping: 0.95,
-                time_step: 0.2,           // Updated to 5fps
+                time_step: 0.2,
+                spring_strength: 0.1,      // Minimal spring forces
+                repulsion: 50.0,           // Reduced repulsion
+                max_repulsion_distance: 300.0, // Tighter packing
+                mass_scale: 0.8,           // Reduced mass influence
+                damping: 0.95,             // High damping for stability
+                boundary_damping: 0.95,
+                viewport_bounds: 1000.0,
+                enable_bounds: true,
                 phase,
                 mode: SimulationMode::Remote,
             },
@@ -114,13 +138,13 @@ impl SimulationParams {
     pub fn to_gpu_params(&self) -> GPUSimulationParams {
         GPUSimulationParams {
             iterations: self.iterations,
-            spring_length: self.spring_length,
             spring_strength: self.spring_strength,
             repulsion: self.repulsion,
-            attraction: self.attraction,
             damping: self.damping,
-            time_step: self.time_step,
-            padding: 0,
+            max_repulsion_distance: self.max_repulsion_distance,
+            viewport_bounds: if self.enable_bounds { self.viewport_bounds } else { 0.0 },
+            mass_scale: self.mass_scale,
+            boundary_damping: self.boundary_damping,
         }
     }
 }
diff --git a/src/services/graph_service.rs b/src/services/graph_service.rs
index 67a305fe..10646ad5 100755
--- a/src/services/graph_service.rs
+++ b/src/services/graph_service.rs
@@ -31,14 +31,17 @@ impl GraphService {
         tokio::spawn(async move {
             let params = SimulationParams {
                 iterations: 1,  // One iteration per frame
-                spring_length: 50.0,  // Match ideal_length in CPU layout
-                spring_strength: 0.05,  // Reduced for stability
-                repulsion: 10.0,  // Significantly reduced repulsion
-                attraction: 0.2,  // Reduced attraction
-                damping: 0.95,  // Higher damping for more stability
-                time_step: 0.1,  // Match dt in CPU layout
+                spring_strength: 0.5,            // Moderate spring force
+                repulsion: 700.0,                // Strong repulsion for good spacing
+                damping: 0.95,                   // High damping for stability
+                max_repulsion_distance: 1000.0,  // Large repulsion range
+                viewport_bounds: 1000.0,         // Reasonable bounds size
+                mass_scale: 1.0,                 // Default mass scaling
+                boundary_damping: 0.9,           // Strong boundary damping
+                enable_bounds: true,             // Enable bounds by default
+                time_step: 0.1,                  // Match dt in CPU layout
                 phase: SimulationPhase::Dynamic,
-                mode: SimulationMode::Local,  // Use CPU for continuous updates
+                mode: SimulationMode::Remote,    // Force GPU-accelerated computation
             };
 
             loop {
@@ -265,14 +268,16 @@ impl GraphService {
             },
             None => {
                 warn!("GPU not available. Falling back to CPU-based layout calculation.");
-                Self::calculate_layout_cpu(graph, params.iterations, params.spring_strength, params.damping)?;
-                Ok(())
+                Err(Box::new(std::io::Error::new(std::io::ErrorKind::Unsupported, 
+                    "GPU computation is required. CPU fallback is disabled.")))
             }
         }
     }
 
     fn calculate_layout_cpu(graph: &mut GraphData, iterations: u32, spring_strength: f32, damping: f32) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
-        let repulsion_strength = spring_strength * 1000.0; // Reduced repulsion strength
+        let repulsion_strength = 700.0; // Match CUDA implementation
+        let max_repulsion_distance = 1000.0; // Match CUDA implementation
+        let bounds = 1000.0; // Match viewport_bounds
         let min_distance = 0.1; // Minimum distance to prevent division by zero
         
         for _ in 0..iterations {
@@ -289,8 +294,14 @@ impl GraphService {
                     let distance_squared = dx * dx + dy * dy + dz * dz;
                     let distance = distance_squared.sqrt().max(min_distance);
                     
-                    // Use inverse square law with clamped maximum force
-                    let force = (repulsion_strength / distance_squared).min(100.0);
+                    if distance < max_repulsion_distance {
+                        // Quadratic falloff matching CUDA implementation
+                        let falloff = 1.0 - (distance / max_repulsion_distance);
+                        let falloff = falloff * falloff;
+                        
+                        // Mass-weighted repulsion
+                        let force = repulsion_strength * falloff / distance_squared;
+
                     
                     // Normalize direction vector
                     let fx = (dx / distance) * force;
@@ -304,12 +315,13 @@ impl GraphService {
                     forces[j].0 += fx;
                     forces[j].1 += fy;
                     forces[j].2 += fz;
+                    }
                 }
             }
 
             // Calculate spring forces along edges
-            let ideal_length = 50.0; // Ideal spring length
-            let max_spring_force = 10.0; // Maximum spring force
+            let rest_length = 100.0; // Base rest length
+            let max_spring_force = spring_strength * 10.0; // Scale with spring strength
             
             for edge in &graph.edges {
                 // Find indices of source and target nodes
@@ -328,8 +340,8 @@ impl GraphService {
                     let distance = distance_squared.sqrt().max(0.1); // Prevent division by zero
                     
                     // Calculate spring force with ideal length and weight
-                    let displacement = distance - ideal_length;
-                    let force = (spring_strength * displacement * edge.weight)
+                    let mass_adjusted_length = rest_length * (1.0 + 0.5 * (edge.weight / 10.0));
+                    let force = (spring_strength * (distance - mass_adjusted_length) * edge.weight)
                         .clamp(-max_spring_force, max_spring_force);
                     
                     // Normalize direction vector and apply force
@@ -348,7 +360,6 @@ impl GraphService {
             }
             
             // Apply forces and update positions with stability constraints
-            let max_velocity = 5.0; // Maximum allowed velocity
             let dt = 0.1; // Time step for integration
             
             for (i, node) in graph.nodes.iter_mut().enumerate() {
@@ -362,6 +373,9 @@ impl GraphService {
                 vy *= damping;
                 vz *= damping;
                 
+                // Mass-aware velocity limiting
+                let mass = node.size.unwrap_or(1.0);
+                let max_velocity = 2.0 / (0.5 + mass);
                 // Clamp velocity magnitude
                 let v_mag = (vx * vx + vy * vy + vz * vz).sqrt();
                 if v_mag > max_velocity {
@@ -371,10 +385,25 @@ impl GraphService {
                     vz *= scale;
                 }
                 
-                // Update position using clamped velocity
-                let x = node.x() + vx * dt;
-                let y = node.y() + vy * dt;
-                let z = node.z() + vz * dt;
+                // Update position
+                let mut x = node.x() + vx * dt;
+                let mut y = node.y() + vy * dt;
+                let mut z = node.z() + vz * dt;
+                
+                // Apply boundary constraints with additional damping
+                if bounds > 0.0 {
+                    let near_boundary = x.abs() > bounds * 0.9 || 
+                                      y.abs() > bounds * 0.9 || 
+                                      z.abs() > bounds * 0.9;
+                    if near_boundary {
+                        vx *= 0.9;
+                        vy *= 0.9;
+                        vz *= 0.9;
+                    }
+                    x = x.clamp(-bounds, bounds);
+                    y = y.clamp(-bounds, bounds);
+                    z = z.clamp(-bounds, bounds);
+                }
                 
                 // Store updated values
                 node.set_vx(vx);
diff --git a/src/utils/compute_forces.cu b/src/utils/compute_forces.cu
index f5229315..ac5baf3a 100644
--- a/src/utils/compute_forces.cu
+++ b/src/utils/compute_forces.cu
@@ -27,6 +27,10 @@ struct alignas(16) Vec3 {
         float inv_len = 1.0f / len;
         return Vec3(x * inv_len, y * inv_len, z * inv_len);
     }
+    
+    __device__ float dot(const Vec3& other) const {
+        return x * other.x + y * other.y + z * other.z;
+    }
 };
 
 // Node data structure with Vec3
@@ -43,7 +47,9 @@ extern "C" __global__ void compute_forces(
     int num_nodes,
     float spring_strength,
     float repulsion,
-    float damping
+    float damping,
+    float max_repulsion_distance,
+    float viewport_bounds
 ) {
     int idx = blockIdx.x * blockDim.x + threadIdx.x;
     if (idx >= num_nodes) return;
@@ -51,7 +57,7 @@ extern "C" __global__ void compute_forces(
     // Load node data
     NodeData node_i = nodes[idx];
     Vec3 pos_i = node_i.position;
-    float mass_i = static_cast<float>(node_i.mass);
+    float mass_i = static_cast<float>(node_i.mass) / 255.0f; // Normalize mass to [0,1]
     Vec3 force;
 
     __shared__ Vec3 shared_positions[256];
@@ -65,7 +71,7 @@ extern "C" __global__ void compute_forces(
         if (shared_idx < num_nodes) {
             NodeData shared_node = nodes[shared_idx];
             shared_positions[threadIdx.x] = shared_node.position;
-            shared_masses[threadIdx.x] = static_cast<float>(shared_node.mass);
+            shared_masses[threadIdx.x] = static_cast<float>(shared_node.mass) / 255.0f;
         }
         __syncthreads();
 
@@ -85,16 +91,36 @@ extern "C" __global__ void compute_forces(
             
             // Calculate force magnitude with minimum distance clamp
             float dist = fmaxf(diff.length(), 0.0001f);
-            float force_mag = repulsion * mass_i * mass_j / (dist * dist);
+            
+            // Calculate bounded repulsion force
+            float force_mag = 0.0f;
+            if (dist < max_repulsion_distance) {
+                // Smooth falloff near max distance
+                float falloff = 1.0f - (dist / max_repulsion_distance);
+                falloff = falloff * falloff; // Quadratic falloff
+                
+                // Mass-weighted repulsion
+                float effective_mass = sqrtf(mass_i * mass_j); // Geometric mean of masses
+                force_mag = repulsion * effective_mass * falloff / (dist * dist);
+            }
 
             // Add spring force if nodes are connected (check flags)
             if ((node_i.flags & 0x2) && (nodes[tile * blockDim.x + j].flags & 0x2)) {
-                float spring_force = spring_strength * (dist - 1.0f); // Natural length = 1.0
+                // Mass-weighted spring force
+                float rest_length = 1.0f + 0.5f * (mass_i + mass_j); // Heavier nodes prefer more distance
+                float spring_force = spring_strength * (dist - rest_length);
+                spring_force *= sqrtf(mass_i * mass_j); // Scale by geometric mean of masses
                 force_mag += spring_force;
             }
 
             // Accumulate force using normalized direction
-            force = force + diff.normalized() * force_mag;
+            Vec3 force_dir = diff.normalized();
+            force = force + force_dir * force_mag;
+            
+            // Add mass-dependent inertial damping
+            float velocity_alignment = node_i.velocity.dot(force_dir);
+            if (velocity_alignment > 0)
+                force = force + force_dir * (-velocity_alignment * mass_i * 0.1f);
         }
         __syncthreads();
     }
@@ -102,9 +128,30 @@ extern "C" __global__ void compute_forces(
     // Update velocity with damping
     Vec3 new_velocity = (node_i.velocity + force) * damping;
 
+    // Apply mass-based velocity limiting
+    float max_velocity = 2.0f / (0.5f + mass_i); // Heavier nodes move slower
+    float velocity_mag = new_velocity.length();
+    if (velocity_mag > max_velocity) {
+        new_velocity = new_velocity * (max_velocity / velocity_mag);
+    }
+
     // Update position
     Vec3 new_position = pos_i + new_velocity;
 
+    // Apply viewport bounds
+    if (viewport_bounds > 0.0f) {
+        new_position.x = fmaxf(fminf(new_position.x, viewport_bounds), -viewport_bounds);
+        new_position.y = fmaxf(fminf(new_position.y, viewport_bounds), -viewport_bounds);
+        new_position.z = fmaxf(fminf(new_position.z, viewport_bounds), -viewport_bounds);
+    }
+
+    // Apply additional damping for nodes near bounds
+    if (viewport_bounds > 0.0f && (fabsf(new_position.x) > viewport_bounds * 0.9f ||
+                                  fabsf(new_position.y) > viewport_bounds * 0.9f ||
+                                  fabsf(new_position.z) > viewport_bounds * 0.9f)) {
+        new_velocity = new_velocity * 0.9f; // Extra damping near bounds
+    }
+
     // Store updated position and velocity
     nodes[idx].position = new_position;
     nodes[idx].velocity = new_velocity;
diff --git a/src/utils/compute_forces.ptx b/src/utils/compute_forces.ptx
index 97614a0f..c866535f 100644
--- a/src/utils/compute_forces.ptx
+++ b/src/utils/compute_forces.ptx
@@ -16,662 +16,1008 @@
 
 .visible .entry compute_forces(
 	.param .u64 compute_forces_param_0,
-	.param .u64 compute_forces_param_1,
-	.param .u64 compute_forces_param_2,
-	.param .u32 compute_forces_param_3,
+	.param .u32 compute_forces_param_1,
+	.param .f32 compute_forces_param_2,
+	.param .f32 compute_forces_param_3,
 	.param .f32 compute_forces_param_4,
 	.param .f32 compute_forces_param_5,
 	.param .f32 compute_forces_param_6
 )
 {
-	.reg .pred 	%p<31>;
-	.reg .b16 	%rs<3>;
-	.reg .f32 	%f<528>;
-	.reg .b32 	%r<106>;
-	.reg .b64 	%rd<20>;
+	.reg .pred 	%p<98>;
+	.reg .b16 	%rs<223>;
+	.reg .f32 	%f<821>;
+	.reg .b32 	%r<98>;
+	.reg .b64 	%rd<27>;
 	// demoted variable
-	.shared .align 4 .b8 _ZZ14compute_forcesE16shared_positions[3072];
+	.shared .align 16 .b8 _ZZ14compute_forcesE16shared_positions[4096];
 	// demoted variable
 	.shared .align 4 .b8 _ZZ14compute_forcesE13shared_masses[1024];
 
-	ld.param.u64 	%rd6, [compute_forces_param_0];
-	ld.param.u64 	%rd7, [compute_forces_param_2];
-	ld.param.u32 	%r26, [compute_forces_param_3];
-	cvta.to.global.u64 	%rd1, %rd7;
-	cvta.to.global.u64 	%rd2, %rd6;
-	mov.u32 	%r27, %ntid.x;
-	mov.u32 	%r28, %ctaid.x;
-	mov.u32 	%r1, %tid.x;
-	mad.lo.s32 	%r2, %r28, %r27, %r1;
-	setp.ge.s32 	%p1, %r2, %r26;
-	@%p1 bra 	$L__BB0_47;
-
-	mul.lo.s32 	%r29, %r2, 3;
-	mul.wide.s32 	%rd8, %r29, 4;
-	add.s64 	%rd4, %rd2, %rd8;
-	ld.global.f32 	%f1, [%rd4];
-	ld.global.f32 	%f2, [%rd4+4];
-	ld.global.f32 	%f3, [%rd4+8];
-	setp.lt.s32 	%p2, %r26, 1;
-	mov.f32 	%f474, 0f00000000;
-	mov.f32 	%f475, %f474;
-	mov.f32 	%f476, %f474;
-	@%p2 bra 	$L__BB0_46;
-
-	ld.param.f32 	%f467, [compute_forces_param_5];
-	cvt.s64.s32 	%rd9, %r2;
-	add.s64 	%rd10, %rd1, %rd9;
-	ld.global.u8 	%rs1, [%rd10];
-	cvt.rn.f32.u16 	%f118, %rs1;
-	mov.u32 	%r31, _ZZ14compute_forcesE16shared_positions;
-	mad.lo.s32 	%r3, %r1, 12, %r31;
-	shl.b32 	%r32, %r1, 2;
-	mov.u32 	%r33, _ZZ14compute_forcesE13shared_masses;
-	add.s32 	%r4, %r33, %r32;
-	mul.f32 	%f4, %f118, %f467;
-	add.s32 	%r34, %r26, 255;
-	shr.s32 	%r35, %r34, 31;
-	shr.u32 	%r36, %r35, 24;
-	add.s32 	%r37, %r34, %r36;
-	shr.s32 	%r5, %r37, 8;
-	mov.f32 	%f476, 0f00000000;
-	mov.u32 	%r100, 0;
-	mov.f32 	%f475, %f476;
-	mov.f32 	%f474, %f476;
+	ld.param.u64 	%rd3, [compute_forces_param_0];
+	ld.param.u32 	%r46, [compute_forces_param_1];
+	ld.param.f32 	%f317, [compute_forces_param_2];
+	ld.param.f32 	%f318, [compute_forces_param_3];
+	ld.param.f32 	%f320, [compute_forces_param_5];
+	cvta.to.global.u64 	%rd1, %rd3;
+	mov.u32 	%r1, %ntid.x;
+	mov.u32 	%r47, %ctaid.x;
+	mov.u32 	%r2, %tid.x;
+	mad.lo.s32 	%r3, %r47, %r1, %r2;
+	setp.ge.s32 	%p1, %r3, %r46;
+	@%p1 bra 	$L__BB0_111;
+
+	mul.wide.s32 	%rd4, %r3, 48;
+	add.s64 	%rd2, %rd1, %rd4;
+	.pragma "used_bytes_mask 4095";
+	ld.global.v4.f32 	{%f325, %f326, %f327, %f328}, [%rd2];
+	.pragma "used_bytes_mask 4095";
+	ld.global.v4.f32 	{%f329, %f330, %f331, %f332}, [%rd2+16];
+	ld.global.v4.u32 	{%r48, %r49, %r50, %r51}, [%rd2+32];
+	mov.b32 	{%rs83, %rs84}, %r48;
+	and.b16  	%rs85, %rs83, 255;
+	shr.u16 	%rs1, %rs83, 8;
+	cvt.rn.f32.u16 	%f333, %rs85;
+	mov.f32 	%f334, 0f437F0000;
+	div.approx.ftz.f32 	%f7, %f333, %f334;
+	add.s32 	%r53, %r1, %r46;
+	add.s32 	%r4, %r53, -1;
+	setp.gt.u32 	%p2, %r1, %r4;
+	mov.f32 	%f738, 0f00000000;
+	mov.f32 	%f739, %f738;
+	mov.f32 	%f740, %f738;
+	@%p2 bra 	$L__BB0_103;
+
+	shl.b32 	%r55, %r2, 4;
+	mov.u32 	%r56, _ZZ14compute_forcesE16shared_positions;
+	add.s32 	%r5, %r56, %r55;
+	shl.b32 	%r57, %r2, 2;
+	mov.u32 	%r58, _ZZ14compute_forcesE13shared_masses;
+	add.s32 	%r6, %r58, %r57;
+	mov.u32 	%r87, 0;
+	div.u32 	%r8, %r4, %r1;
+	mov.f32 	%f740, 0f00000000;
+	mov.f32 	%f739, %f740;
+	mov.f32 	%f738, %f740;
 
 $L__BB0_3:
-	shl.b32 	%r7, %r100, 8;
-	sub.s32 	%r38, %r7, %r26;
-	add.s32 	%r10, %r7, %r1;
-	setp.ge.s32 	%p3, %r10, %r26;
+	neg.s32 	%r82, %r1;
+	mul.lo.s32 	%r10, %r1, %r87;
+	sub.s32 	%r59, %r10, %r46;
+	max.u32 	%r11, %r59, %r82;
+	neg.s32 	%r12, %r11;
+	add.s32 	%r13, %r10, %r2;
+	setp.ge.s32 	%p3, %r13, %r46;
 	@%p3 bra 	$L__BB0_5;
 
-	mul.lo.s32 	%r39, %r10, 3;
-	mul.wide.s32 	%rd11, %r39, 4;
-	add.s64 	%rd12, %rd2, %rd11;
-	ld.global.f32 	%f119, [%rd12];
-	ld.global.f32 	%f120, [%rd12+4];
-	ld.global.f32 	%f121, [%rd12+8];
-	st.shared.f32 	[%r3], %f119;
-	st.shared.f32 	[%r3+4], %f120;
-	st.shared.f32 	[%r3+8], %f121;
-	cvt.s64.s32 	%rd13, %r10;
-	add.s64 	%rd14, %rd1, %rd13;
-	ld.global.u8 	%rs2, [%rd14];
-	cvt.rn.f32.u16 	%f122, %rs2;
-	st.shared.f32 	[%r4], %f122;
+	mul.wide.s32 	%rd5, %r13, 48;
+	add.s64 	%rd6, %rd1, %rd5;
+	.pragma "used_bytes_mask 4095";
+	ld.global.v4.f32 	{%f338, %f339, %f340, %f341}, [%rd6];
+	ld.global.v4.u32 	{%r60, %r61, %r62, %r63}, [%rd6+32];
+	cvt.u16.u32 	%rs86, %r60;
+	and.b16  	%rs87, %rs86, 255;
+	st.shared.v2.f32 	[%r5], {%f338, %f339};
+	st.shared.f32 	[%r5+8], %f340;
+	cvt.rn.f32.u16 	%f345, %rs87;
+	mov.f32 	%f346, 0f437F0000;
+	div.approx.ftz.f32 	%f347, %f345, %f346;
+	st.shared.f32 	[%r6], %f347;
 
 $L__BB0_5:
-	shl.b32 	%r78, %r100, 8;
+	setp.eq.s32 	%p4, %r1, 0;
 	bar.sync 	0;
-	setp.ge.s32 	%p4, %r78, %r26;
-	@%p4 bra 	$L__BB0_45;
-
-	max.u32 	%r85, %r38, -256;
-	shl.b32 	%r84, %r100, 8;
-	sub.s32 	%r83, %r84, %r26;
-	max.u32 	%r82, %r83, -256;
-	neg.s32 	%r81, %r82;
-	shl.b32 	%r104, %r100, 8;
-	and.b32  	%r11, %r81, 7;
-	setp.gt.u32 	%p5, %r82, -8;
-	mov.u32 	%r105, 0;
-	@%p5 bra 	$L__BB0_25;
-
-	shl.b32 	%r89, %r100, 8;
-	sub.s32 	%r88, %r89, %r26;
-	max.u32 	%r87, %r88, -256;
-	neg.s32 	%r86, %r87;
-	shl.b32 	%r104, %r100, 8;
-	sub.s32 	%r103, %r86, %r11;
-	mov.u32 	%r105, 0;
+	setp.ge.u32 	%p5, %r10, %r46;
+	or.pred  	%p6, %p4, %p5;
+	@%p6 bra 	$L__BB0_102;
+
+	mul.lo.s32 	%r91, %r1, %r87;
+	neg.s32 	%r85, %r1;
+	sub.s32 	%r84, %r91, %r46;
+	max.u32 	%r83, %r84, %r85;
+	and.b32  	%r97, %r12, 7;
+	setp.gt.u32 	%p7, %r83, -8;
+	mov.u32 	%r92, 0;
+	@%p7 bra 	$L__BB0_89;
+
+	sub.s32 	%r90, %r12, %r97;
+	mov.u32 	%r92, 0;
+	mov.u32 	%r91, %r10;
 
 $L__BB0_8:
 	.pragma "nounroll";
-	mad.lo.s32 	%r16, %r105, 12, %r31;
-	shl.b32 	%r43, %r105, 2;
-	add.s32 	%r17, %r33, %r43;
-	setp.eq.s32 	%p6, %r104, %r2;
-	@%p6 bra 	$L__BB0_10;
-
-	ld.shared.f32 	%f124, [%r16];
-	sub.f32 	%f125, %f1, %f124;
-	ld.shared.f32 	%f126, [%r16+4];
-	sub.f32 	%f127, %f2, %f126;
-	ld.shared.f32 	%f128, [%r16+8];
-	sub.f32 	%f129, %f3, %f128;
-	mul.f32 	%f130, %f127, %f127;
-	fma.rn.f32 	%f131, %f125, %f125, %f130;
-	fma.rn.f32 	%f132, %f129, %f129, %f131;
-	sqrt.rn.f32 	%f133, %f132;
-	mov.f32 	%f134, 0f38D1B717;
-	max.f32 	%f135, %f133, %f134;
-	ld.shared.f32 	%f136, [%r17];
-	mul.f32 	%f137, %f4, %f136;
-	mul.f32 	%f138, %f135, %f135;
-	div.rn.f32 	%f139, %f137, %f138;
-	mul.f32 	%f140, %f125, %f139;
-	div.rn.f32 	%f141, %f140, %f135;
-	add.f32 	%f474, %f474, %f141;
-	mul.f32 	%f142, %f127, %f139;
-	div.rn.f32 	%f143, %f142, %f135;
-	add.f32 	%f475, %f475, %f143;
-	mul.f32 	%f144, %f129, %f139;
-	div.rn.f32 	%f145, %f144, %f135;
-	add.f32 	%f476, %f476, %f145;
-
-$L__BB0_10:
-	shl.b32 	%r75, %r100, 8;
-	add.s32 	%r45, %r105, %r75;
-	add.s32 	%r46, %r45, 1;
-	setp.eq.s32 	%p7, %r46, %r2;
-	@%p7 bra 	$L__BB0_12;
-
-	ld.shared.f32 	%f146, [%r16+12];
-	sub.f32 	%f147, %f1, %f146;
-	ld.shared.f32 	%f148, [%r16+16];
-	sub.f32 	%f149, %f2, %f148;
-	ld.shared.f32 	%f150, [%r16+20];
-	sub.f32 	%f151, %f3, %f150;
-	mul.f32 	%f152, %f149, %f149;
-	fma.rn.f32 	%f153, %f147, %f147, %f152;
-	fma.rn.f32 	%f154, %f151, %f151, %f153;
-	sqrt.rn.f32 	%f155, %f154;
-	mov.f32 	%f156, 0f38D1B717;
-	max.f32 	%f157, %f155, %f156;
-	ld.shared.f32 	%f158, [%r17+4];
-	mul.f32 	%f159, %f4, %f158;
-	mul.f32 	%f160, %f157, %f157;
-	div.rn.f32 	%f161, %f159, %f160;
-	mul.f32 	%f162, %f147, %f161;
-	div.rn.f32 	%f163, %f162, %f157;
-	add.f32 	%f474, %f474, %f163;
-	mul.f32 	%f164, %f149, %f161;
-	div.rn.f32 	%f165, %f164, %f157;
-	add.f32 	%f475, %f475, %f165;
-	mul.f32 	%f166, %f151, %f161;
-	div.rn.f32 	%f167, %f166, %f157;
-	add.f32 	%f476, %f476, %f167;
+	shl.b32 	%r67, %r92, 4;
+	add.s32 	%r19, %r56, %r67;
+	shl.b32 	%r69, %r92, 2;
+	add.s32 	%r20, %r58, %r69;
+	setp.eq.s32 	%p8, %r91, %r3;
+	@%p8 bra 	$L__BB0_18;
+
+	mul.wide.u32 	%rd7, %r91, 48;
+	add.s64 	%rd8, %rd1, %rd7;
+	ld.global.u8 	%rs2, [%rd8+33];
+	and.b16  	%rs88, %rs2, 1;
+	setp.eq.b16 	%p9, %rs88, 1;
+	mov.pred 	%p10, 0;
+	xor.pred  	%p11, %p9, %p10;
+	not.pred 	%p12, %p11;
+	@%p12 bra 	$L__BB0_18;
+
+	.pragma "used_bytes_mask 4095";
+	ld.shared.v4.f32 	{%f350, %f351, %f352, %f353}, [%r19];
+	ld.shared.f32 	%f14, [%r20];
+	sub.ftz.f32 	%f15, %f325, %f350;
+	sub.ftz.f32 	%f16, %f326, %f351;
+	sub.ftz.f32 	%f17, %f327, %f352;
+	mul.ftz.f32 	%f357, %f16, %f16;
+	fma.rn.ftz.f32 	%f358, %f15, %f15, %f357;
+	fma.rn.ftz.f32 	%f359, %f17, %f17, %f358;
+	sqrt.approx.ftz.f32 	%f18, %f359;
+	mov.f32 	%f360, 0f38D1B717;
+	max.ftz.f32 	%f19, %f18, %f360;
+	setp.geu.ftz.f32 	%p13, %f19, %f320;
+	mov.f32 	%f726, 0f00000000;
+	@%p13 bra 	$L__BB0_12;
+
+	mov.f32 	%f710, 0f38D1B717;
+	max.ftz.f32 	%f709, %f18, %f710;
+	div.approx.ftz.f32 	%f361, %f709, %f320;
+	mov.f32 	%f362, 0f3F800000;
+	sub.ftz.f32 	%f363, %f362, %f361;
+	mul.ftz.f32 	%f364, %f363, %f363;
+	mul.ftz.f32 	%f365, %f7, %f14;
+	sqrt.approx.ftz.f32 	%f366, %f365;
+	mul.ftz.f32 	%f367, %f366, %f318;
+	mul.ftz.f32 	%f368, %f367, %f364;
+	mul.ftz.f32 	%f369, %f709, %f709;
+	div.approx.ftz.f32 	%f726, %f368, %f369;
 
 $L__BB0_12:
-	add.s32 	%r48, %r45, 2;
-	setp.eq.s32 	%p8, %r48, %r2;
-	@%p8 bra 	$L__BB0_14;
-
-	ld.shared.f32 	%f168, [%r16+24];
-	sub.f32 	%f169, %f1, %f168;
-	ld.shared.f32 	%f170, [%r16+28];
-	sub.f32 	%f171, %f2, %f170;
-	ld.shared.f32 	%f172, [%r16+32];
-	sub.f32 	%f173, %f3, %f172;
-	mul.f32 	%f174, %f171, %f171;
-	fma.rn.f32 	%f175, %f169, %f169, %f174;
-	fma.rn.f32 	%f176, %f173, %f173, %f175;
-	sqrt.rn.f32 	%f177, %f176;
-	mov.f32 	%f178, 0f38D1B717;
-	max.f32 	%f179, %f177, %f178;
-	ld.shared.f32 	%f180, [%r17+8];
-	mul.f32 	%f181, %f4, %f180;
-	mul.f32 	%f182, %f179, %f179;
-	div.rn.f32 	%f183, %f181, %f182;
-	mul.f32 	%f184, %f169, %f183;
-	div.rn.f32 	%f185, %f184, %f179;
-	add.f32 	%f474, %f474, %f185;
-	mul.f32 	%f186, %f171, %f183;
-	div.rn.f32 	%f187, %f186, %f179;
-	add.f32 	%f475, %f475, %f187;
-	mul.f32 	%f188, %f173, %f183;
-	div.rn.f32 	%f189, %f188, %f179;
-	add.f32 	%f476, %f476, %f189;
+	and.b16  	%rs89, %rs1, %rs2;
+	and.b16  	%rs90, %rs89, 2;
+	setp.eq.s16 	%p14, %rs90, 0;
+	@%p14 bra 	$L__BB0_14;
+
+	mov.f32 	%f708, 0f38D1B717;
+	max.ftz.f32 	%f707, %f18, %f708;
+	add.ftz.f32 	%f370, %f7, %f14;
+	fma.rn.ftz.f32 	%f371, %f370, 0f3F000000, 0f3F800000;
+	sub.ftz.f32 	%f372, %f707, %f371;
+	mul.ftz.f32 	%f373, %f372, %f317;
+	mul.ftz.f32 	%f374, %f7, %f14;
+	sqrt.approx.ftz.f32 	%f375, %f374;
+	fma.rn.ftz.f32 	%f726, %f373, %f375, %f726;
 
 $L__BB0_14:
-	add.s32 	%r50, %r45, 3;
-	setp.eq.s32 	%p9, %r50, %r2;
-	@%p9 bra 	$L__BB0_16;
-
-	ld.shared.f32 	%f190, [%r16+36];
-	sub.f32 	%f191, %f1, %f190;
-	ld.shared.f32 	%f192, [%r16+40];
-	sub.f32 	%f193, %f2, %f192;
-	ld.shared.f32 	%f194, [%r16+44];
-	sub.f32 	%f195, %f3, %f194;
-	mul.f32 	%f196, %f193, %f193;
-	fma.rn.f32 	%f197, %f191, %f191, %f196;
-	fma.rn.f32 	%f198, %f195, %f195, %f197;
-	sqrt.rn.f32 	%f199, %f198;
-	mov.f32 	%f200, 0f38D1B717;
-	max.f32 	%f201, %f199, %f200;
-	ld.shared.f32 	%f202, [%r17+12];
-	mul.f32 	%f203, %f4, %f202;
-	mul.f32 	%f204, %f201, %f201;
-	div.rn.f32 	%f205, %f203, %f204;
-	mul.f32 	%f206, %f191, %f205;
-	div.rn.f32 	%f207, %f206, %f201;
-	add.f32 	%f474, %f474, %f207;
-	mul.f32 	%f208, %f193, %f205;
-	div.rn.f32 	%f209, %f208, %f201;
-	add.f32 	%f475, %f475, %f209;
-	mul.f32 	%f210, %f195, %f205;
-	div.rn.f32 	%f211, %f210, %f201;
-	add.f32 	%f476, %f476, %f211;
+	setp.lt.ftz.f32 	%p15, %f18, 0f358637BD;
+	mov.f32 	%f727, 0f00000000;
+	mov.f32 	%f728, %f727;
+	mov.f32 	%f729, %f727;
+	@%p15 bra 	$L__BB0_16;
+
+	rcp.approx.ftz.f32 	%f379, %f18;
+	mul.ftz.f32 	%f729, %f17, %f379;
+	mul.ftz.f32 	%f728, %f16, %f379;
+	mul.ftz.f32 	%f727, %f15, %f379;
 
 $L__BB0_16:
-	add.s32 	%r52, %r45, 4;
-	setp.eq.s32 	%p10, %r52, %r2;
-	@%p10 bra 	$L__BB0_18;
-
-	ld.shared.f32 	%f212, [%r16+48];
-	sub.f32 	%f213, %f1, %f212;
-	ld.shared.f32 	%f214, [%r16+52];
-	sub.f32 	%f215, %f2, %f214;
-	ld.shared.f32 	%f216, [%r16+56];
-	sub.f32 	%f217, %f3, %f216;
-	mul.f32 	%f218, %f215, %f215;
-	fma.rn.f32 	%f219, %f213, %f213, %f218;
-	fma.rn.f32 	%f220, %f217, %f217, %f219;
-	sqrt.rn.f32 	%f221, %f220;
-	mov.f32 	%f222, 0f38D1B717;
-	max.f32 	%f223, %f221, %f222;
-	ld.shared.f32 	%f224, [%r17+16];
-	mul.f32 	%f225, %f4, %f224;
-	mul.f32 	%f226, %f223, %f223;
-	div.rn.f32 	%f227, %f225, %f226;
-	mul.f32 	%f228, %f213, %f227;
-	div.rn.f32 	%f229, %f228, %f223;
-	add.f32 	%f474, %f474, %f229;
-	mul.f32 	%f230, %f215, %f227;
-	div.rn.f32 	%f231, %f230, %f223;
-	add.f32 	%f475, %f475, %f231;
-	mul.f32 	%f232, %f217, %f227;
-	div.rn.f32 	%f233, %f232, %f223;
-	add.f32 	%f476, %f476, %f233;
+	fma.rn.ftz.f32 	%f738, %f726, %f727, %f738;
+	fma.rn.ftz.f32 	%f739, %f726, %f728, %f739;
+	fma.rn.ftz.f32 	%f740, %f726, %f729, %f740;
+	mul.ftz.f32 	%f380, %f330, %f728;
+	fma.rn.ftz.f32 	%f381, %f329, %f727, %f380;
+	fma.rn.ftz.f32 	%f36, %f331, %f729, %f381;
+	setp.leu.ftz.f32 	%p16, %f36, 0f00000000;
+	@%p16 bra 	$L__BB0_18;
+
+	mul.ftz.f32 	%f382, %f7, %f36;
+	mul.ftz.f32 	%f383, %f382, 0fBDCCCCCD;
+	fma.rn.ftz.f32 	%f738, %f727, %f383, %f738;
+	fma.rn.ftz.f32 	%f739, %f728, %f383, %f739;
+	fma.rn.ftz.f32 	%f740, %f729, %f383, %f740;
 
 $L__BB0_18:
-	add.s32 	%r54, %r45, 5;
-	setp.eq.s32 	%p11, %r54, %r2;
-	@%p11 bra 	$L__BB0_20;
-
-	ld.shared.f32 	%f234, [%r16+60];
-	sub.f32 	%f235, %f1, %f234;
-	ld.shared.f32 	%f236, [%r16+64];
-	sub.f32 	%f237, %f2, %f236;
-	ld.shared.f32 	%f238, [%r16+68];
-	sub.f32 	%f239, %f3, %f238;
-	mul.f32 	%f240, %f237, %f237;
-	fma.rn.f32 	%f241, %f235, %f235, %f240;
-	fma.rn.f32 	%f242, %f239, %f239, %f241;
-	sqrt.rn.f32 	%f243, %f242;
-	mov.f32 	%f244, 0f38D1B717;
-	max.f32 	%f245, %f243, %f244;
-	ld.shared.f32 	%f246, [%r17+20];
-	mul.f32 	%f247, %f4, %f246;
-	mul.f32 	%f248, %f245, %f245;
-	div.rn.f32 	%f249, %f247, %f248;
-	mul.f32 	%f250, %f235, %f249;
-	div.rn.f32 	%f251, %f250, %f245;
-	add.f32 	%f474, %f474, %f251;
-	mul.f32 	%f252, %f237, %f249;
-	div.rn.f32 	%f253, %f252, %f245;
-	add.f32 	%f475, %f475, %f253;
-	mul.f32 	%f254, %f239, %f249;
-	div.rn.f32 	%f255, %f254, %f245;
-	add.f32 	%f476, %f476, %f255;
-
-$L__BB0_20:
-	add.s32 	%r56, %r45, 6;
-	setp.eq.s32 	%p12, %r56, %r2;
-	@%p12 bra 	$L__BB0_22;
-
-	ld.shared.f32 	%f256, [%r16+72];
-	sub.f32 	%f257, %f1, %f256;
-	ld.shared.f32 	%f258, [%r16+76];
-	sub.f32 	%f259, %f2, %f258;
-	ld.shared.f32 	%f260, [%r16+80];
-	sub.f32 	%f261, %f3, %f260;
-	mul.f32 	%f262, %f259, %f259;
-	fma.rn.f32 	%f263, %f257, %f257, %f262;
-	fma.rn.f32 	%f264, %f261, %f261, %f263;
-	sqrt.rn.f32 	%f265, %f264;
-	mov.f32 	%f266, 0f38D1B717;
-	max.f32 	%f267, %f265, %f266;
-	ld.shared.f32 	%f268, [%r17+24];
-	mul.f32 	%f269, %f4, %f268;
-	mul.f32 	%f270, %f267, %f267;
-	div.rn.f32 	%f271, %f269, %f270;
-	mul.f32 	%f272, %f257, %f271;
-	div.rn.f32 	%f273, %f272, %f267;
-	add.f32 	%f474, %f474, %f273;
-	mul.f32 	%f274, %f259, %f271;
-	div.rn.f32 	%f275, %f274, %f267;
-	add.f32 	%f475, %f475, %f275;
-	mul.f32 	%f276, %f261, %f271;
-	div.rn.f32 	%f277, %f276, %f267;
-	add.f32 	%f476, %f476, %f277;
+	add.s32 	%r71, %r92, %r10;
+	add.s32 	%r21, %r71, 1;
+	setp.eq.s32 	%p17, %r21, %r3;
+	@%p17 bra 	$L__BB0_28;
+
+	mul.wide.u32 	%rd9, %r21, 48;
+	add.s64 	%rd10, %rd1, %rd9;
+	ld.global.u8 	%rs11, [%rd10+33];
+	and.b16  	%rs103, %rs11, 1;
+	setp.eq.b16 	%p18, %rs103, 1;
+	mov.pred 	%p19, 0;
+	xor.pred  	%p20, %p18, %p19;
+	not.pred 	%p21, %p20;
+	@%p21 bra 	$L__BB0_28;
+
+	.pragma "used_bytes_mask 4095";
+	ld.shared.v4.f32 	{%f385, %f386, %f387, %f388}, [%r19+16];
+	ld.shared.f32 	%f43, [%r20+4];
+	sub.ftz.f32 	%f44, %f325, %f385;
+	sub.ftz.f32 	%f45, %f326, %f386;
+	sub.ftz.f32 	%f46, %f327, %f387;
+	mul.ftz.f32 	%f392, %f45, %f45;
+	fma.rn.ftz.f32 	%f393, %f44, %f44, %f392;
+	fma.rn.ftz.f32 	%f394, %f46, %f46, %f393;
+	sqrt.approx.ftz.f32 	%f47, %f394;
+	mov.f32 	%f395, 0f38D1B717;
+	max.ftz.f32 	%f48, %f47, %f395;
+	setp.geu.ftz.f32 	%p22, %f48, %f320;
+	mov.f32 	%f734, 0f00000000;
+	@%p22 bra 	$L__BB0_22;
+
+	mov.f32 	%f686, 0f38D1B717;
+	max.ftz.f32 	%f685, %f47, %f686;
+	div.approx.ftz.f32 	%f396, %f685, %f320;
+	mov.f32 	%f397, 0f3F800000;
+	sub.ftz.f32 	%f398, %f397, %f396;
+	mul.ftz.f32 	%f399, %f398, %f398;
+	mul.ftz.f32 	%f400, %f7, %f43;
+	sqrt.approx.ftz.f32 	%f401, %f400;
+	mul.ftz.f32 	%f402, %f401, %f318;
+	mul.ftz.f32 	%f403, %f402, %f399;
+	mul.ftz.f32 	%f404, %f685, %f685;
+	div.approx.ftz.f32 	%f734, %f403, %f404;
 
 $L__BB0_22:
-	add.s32 	%r58, %r45, 7;
-	setp.eq.s32 	%p13, %r58, %r2;
-	@%p13 bra 	$L__BB0_24;
-
-	ld.shared.f32 	%f278, [%r16+84];
-	sub.f32 	%f279, %f1, %f278;
-	ld.shared.f32 	%f280, [%r16+88];
-	sub.f32 	%f281, %f2, %f280;
-	ld.shared.f32 	%f282, [%r16+92];
-	sub.f32 	%f283, %f3, %f282;
-	mul.f32 	%f284, %f281, %f281;
-	fma.rn.f32 	%f285, %f279, %f279, %f284;
-	fma.rn.f32 	%f286, %f283, %f283, %f285;
-	sqrt.rn.f32 	%f287, %f286;
-	mov.f32 	%f288, 0f38D1B717;
-	max.f32 	%f289, %f287, %f288;
-	ld.shared.f32 	%f290, [%r17+28];
-	mul.f32 	%f291, %f4, %f290;
-	mul.f32 	%f292, %f289, %f289;
-	div.rn.f32 	%f293, %f291, %f292;
-	mul.f32 	%f294, %f279, %f293;
-	div.rn.f32 	%f295, %f294, %f289;
-	add.f32 	%f474, %f474, %f295;
-	mul.f32 	%f296, %f281, %f293;
-	div.rn.f32 	%f297, %f296, %f289;
-	add.f32 	%f475, %f475, %f297;
-	mul.f32 	%f298, %f283, %f293;
-	div.rn.f32 	%f299, %f298, %f289;
-	add.f32 	%f476, %f476, %f299;
+	and.b16  	%rs104, %rs1, %rs11;
+	and.b16  	%rs105, %rs104, 2;
+	setp.eq.s16 	%p23, %rs105, 0;
+	@%p23 bra 	$L__BB0_24;
+
+	mov.f32 	%f681, 0f38D1B717;
+	max.ftz.f32 	%f680, %f47, %f681;
+	add.ftz.f32 	%f405, %f7, %f43;
+	fma.rn.ftz.f32 	%f406, %f405, 0f3F000000, 0f3F800000;
+	sub.ftz.f32 	%f407, %f680, %f406;
+	mul.ftz.f32 	%f408, %f407, %f317;
+	mul.ftz.f32 	%f409, %f7, %f43;
+	sqrt.approx.ftz.f32 	%f410, %f409;
+	fma.rn.ftz.f32 	%f734, %f408, %f410, %f734;
 
 $L__BB0_24:
-	shl.b32 	%r74, %r100, 8;
-	add.s32 	%r105, %r105, 8;
-	add.s32 	%r104, %r105, %r74;
-	add.s32 	%r103, %r103, -8;
-	setp.ne.s32 	%p14, %r103, 0;
-	@%p14 bra 	$L__BB0_8;
-
-$L__BB0_25:
-	setp.eq.s32 	%p15, %r11, 0;
-	@%p15 bra 	$L__BB0_45;
-
-	setp.eq.s32 	%p16, %r104, %r2;
-	mad.lo.s32 	%r23, %r105, 12, %r31;
-	shl.b32 	%r60, %r105, 2;
-	add.s32 	%r24, %r33, %r60;
-	@%p16 bra 	$L__BB0_28;
-
-	ld.shared.f32 	%f300, [%r23];
-	sub.f32 	%f301, %f1, %f300;
-	ld.shared.f32 	%f302, [%r23+4];
-	sub.f32 	%f303, %f2, %f302;
-	ld.shared.f32 	%f304, [%r23+8];
-	sub.f32 	%f305, %f3, %f304;
-	mul.f32 	%f306, %f303, %f303;
-	fma.rn.f32 	%f307, %f301, %f301, %f306;
-	fma.rn.f32 	%f308, %f305, %f305, %f307;
-	sqrt.rn.f32 	%f309, %f308;
-	mov.f32 	%f310, 0f38D1B717;
-	max.f32 	%f311, %f309, %f310;
-	ld.shared.f32 	%f312, [%r24];
-	mul.f32 	%f313, %f4, %f312;
-	mul.f32 	%f314, %f311, %f311;
-	div.rn.f32 	%f315, %f313, %f314;
-	mul.f32 	%f316, %f301, %f315;
-	div.rn.f32 	%f317, %f316, %f311;
-	add.f32 	%f474, %f474, %f317;
-	mul.f32 	%f318, %f303, %f315;
-	div.rn.f32 	%f319, %f318, %f311;
-	add.f32 	%f475, %f475, %f319;
-	mul.f32 	%f320, %f305, %f315;
-	div.rn.f32 	%f321, %f320, %f311;
-	add.f32 	%f476, %f476, %f321;
+	setp.lt.ftz.f32 	%p24, %f47, 0f358637BD;
+	mov.f32 	%f735, 0f00000000;
+	mov.f32 	%f736, %f735;
+	mov.f32 	%f737, %f735;
+	@%p24 bra 	$L__BB0_26;
+
+	rcp.approx.ftz.f32 	%f414, %f47;
+	mul.ftz.f32 	%f737, %f46, %f414;
+	mul.ftz.f32 	%f736, %f45, %f414;
+	mul.ftz.f32 	%f735, %f44, %f414;
+
+$L__BB0_26:
+	fma.rn.ftz.f32 	%f738, %f734, %f735, %f738;
+	fma.rn.ftz.f32 	%f739, %f734, %f736, %f739;
+	fma.rn.ftz.f32 	%f740, %f734, %f737, %f740;
+	mul.ftz.f32 	%f415, %f330, %f736;
+	fma.rn.ftz.f32 	%f416, %f329, %f735, %f415;
+	fma.rn.ftz.f32 	%f65, %f331, %f737, %f416;
+	setp.leu.ftz.f32 	%p25, %f65, 0f00000000;
+	@%p25 bra 	$L__BB0_28;
+
+	mul.ftz.f32 	%f417, %f7, %f65;
+	mul.ftz.f32 	%f418, %f417, 0fBDCCCCCD;
+	fma.rn.ftz.f32 	%f738, %f735, %f418, %f738;
+	fma.rn.ftz.f32 	%f739, %f736, %f418, %f739;
+	fma.rn.ftz.f32 	%f740, %f737, %f418, %f740;
 
 $L__BB0_28:
-	setp.eq.s32 	%p17, %r11, 1;
-	@%p17 bra 	$L__BB0_45;
-
-	shl.b32 	%r76, %r100, 8;
-	add.s32 	%r62, %r105, %r76;
-	add.s32 	%r63, %r62, 1;
-	setp.eq.s32 	%p18, %r63, %r2;
-	@%p18 bra 	$L__BB0_31;
-
-	ld.shared.f32 	%f322, [%r23+12];
-	sub.f32 	%f323, %f1, %f322;
-	ld.shared.f32 	%f324, [%r23+16];
-	sub.f32 	%f325, %f2, %f324;
-	ld.shared.f32 	%f326, [%r23+20];
-	sub.f32 	%f327, %f3, %f326;
-	mul.f32 	%f328, %f325, %f325;
-	fma.rn.f32 	%f329, %f323, %f323, %f328;
-	fma.rn.f32 	%f330, %f327, %f327, %f329;
-	sqrt.rn.f32 	%f331, %f330;
-	mov.f32 	%f332, 0f38D1B717;
-	max.f32 	%f333, %f331, %f332;
-	ld.shared.f32 	%f334, [%r24+4];
-	mul.f32 	%f335, %f4, %f334;
-	mul.f32 	%f336, %f333, %f333;
-	div.rn.f32 	%f337, %f335, %f336;
-	mul.f32 	%f338, %f323, %f337;
-	div.rn.f32 	%f339, %f338, %f333;
-	add.f32 	%f474, %f474, %f339;
-	mul.f32 	%f340, %f325, %f337;
-	div.rn.f32 	%f341, %f340, %f333;
-	add.f32 	%f475, %f475, %f341;
-	mul.f32 	%f342, %f327, %f337;
-	div.rn.f32 	%f343, %f342, %f333;
-	add.f32 	%f476, %f476, %f343;
-
-$L__BB0_31:
-	setp.eq.s32 	%p19, %r11, 2;
-	@%p19 bra 	$L__BB0_45;
-
-	shl.b32 	%r91, %r100, 8;
-	add.s32 	%r90, %r105, %r91;
-	add.s32 	%r65, %r90, 2;
-	setp.eq.s32 	%p20, %r65, %r2;
-	@%p20 bra 	$L__BB0_34;
-
-	ld.shared.f32 	%f344, [%r23+24];
-	sub.f32 	%f345, %f1, %f344;
-	ld.shared.f32 	%f346, [%r23+28];
-	sub.f32 	%f347, %f2, %f346;
-	ld.shared.f32 	%f348, [%r23+32];
-	sub.f32 	%f349, %f3, %f348;
-	mul.f32 	%f350, %f347, %f347;
-	fma.rn.f32 	%f351, %f345, %f345, %f350;
-	fma.rn.f32 	%f352, %f349, %f349, %f351;
-	sqrt.rn.f32 	%f353, %f352;
-	mov.f32 	%f354, 0f38D1B717;
-	max.f32 	%f355, %f353, %f354;
-	ld.shared.f32 	%f356, [%r24+8];
-	mul.f32 	%f357, %f4, %f356;
-	mul.f32 	%f358, %f355, %f355;
-	div.rn.f32 	%f359, %f357, %f358;
-	mul.f32 	%f360, %f345, %f359;
-	div.rn.f32 	%f361, %f360, %f355;
-	add.f32 	%f474, %f474, %f361;
-	mul.f32 	%f362, %f347, %f359;
-	div.rn.f32 	%f363, %f362, %f355;
-	add.f32 	%f475, %f475, %f363;
-	mul.f32 	%f364, %f349, %f359;
-	div.rn.f32 	%f365, %f364, %f355;
-	add.f32 	%f476, %f476, %f365;
+	add.s32 	%r22, %r71, 2;
+	setp.eq.s32 	%p26, %r22, %r3;
+	@%p26 bra 	$L__BB0_38;
+
+	mul.wide.u32 	%rd11, %r22, 48;
+	add.s64 	%rd12, %rd1, %rd11;
+	ld.global.u8 	%rs20, [%rd12+33];
+	and.b16  	%rs118, %rs20, 1;
+	setp.eq.b16 	%p27, %rs118, 1;
+	mov.pred 	%p28, 0;
+	xor.pred  	%p29, %p27, %p28;
+	not.pred 	%p30, %p29;
+	@%p30 bra 	$L__BB0_38;
+
+	.pragma "used_bytes_mask 4095";
+	ld.shared.v4.f32 	{%f420, %f421, %f422, %f423}, [%r19+32];
+	ld.shared.f32 	%f72, [%r20+8];
+	sub.ftz.f32 	%f73, %f325, %f420;
+	sub.ftz.f32 	%f74, %f326, %f421;
+	sub.ftz.f32 	%f75, %f327, %f422;
+	mul.ftz.f32 	%f427, %f74, %f74;
+	fma.rn.ftz.f32 	%f428, %f73, %f73, %f427;
+	fma.rn.ftz.f32 	%f429, %f75, %f75, %f428;
+	sqrt.approx.ftz.f32 	%f76, %f429;
+	mov.f32 	%f430, 0f38D1B717;
+	max.ftz.f32 	%f77, %f76, %f430;
+	setp.geu.ftz.f32 	%p31, %f77, %f320;
+	mov.f32 	%f742, 0f00000000;
+	@%p31 bra 	$L__BB0_32;
+
+	mov.f32 	%f690, 0f38D1B717;
+	max.ftz.f32 	%f689, %f76, %f690;
+	div.approx.ftz.f32 	%f431, %f689, %f320;
+	mov.f32 	%f432, 0f3F800000;
+	sub.ftz.f32 	%f433, %f432, %f431;
+	mul.ftz.f32 	%f434, %f433, %f433;
+	mul.ftz.f32 	%f435, %f7, %f72;
+	sqrt.approx.ftz.f32 	%f436, %f435;
+	mul.ftz.f32 	%f437, %f436, %f318;
+	mul.ftz.f32 	%f438, %f437, %f434;
+	mul.ftz.f32 	%f439, %f689, %f689;
+	div.approx.ftz.f32 	%f742, %f438, %f439;
+
+$L__BB0_32:
+	and.b16  	%rs119, %rs1, %rs20;
+	and.b16  	%rs120, %rs119, 2;
+	setp.eq.s16 	%p32, %rs120, 0;
+	@%p32 bra 	$L__BB0_34;
+
+	mov.f32 	%f688, 0f38D1B717;
+	max.ftz.f32 	%f687, %f76, %f688;
+	add.ftz.f32 	%f440, %f7, %f72;
+	fma.rn.ftz.f32 	%f441, %f440, 0f3F000000, 0f3F800000;
+	sub.ftz.f32 	%f442, %f687, %f441;
+	mul.ftz.f32 	%f443, %f442, %f317;
+	mul.ftz.f32 	%f444, %f7, %f72;
+	sqrt.approx.ftz.f32 	%f445, %f444;
+	fma.rn.ftz.f32 	%f742, %f443, %f445, %f742;
 
 $L__BB0_34:
-	setp.eq.s32 	%p21, %r11, 3;
-	@%p21 bra 	$L__BB0_45;
-
-	shl.b32 	%r93, %r100, 8;
-	add.s32 	%r92, %r105, %r93;
-	add.s32 	%r67, %r92, 3;
-	setp.eq.s32 	%p22, %r67, %r2;
-	@%p22 bra 	$L__BB0_37;
-
-	ld.shared.f32 	%f366, [%r23+36];
-	sub.f32 	%f367, %f1, %f366;
-	ld.shared.f32 	%f368, [%r23+40];
-	sub.f32 	%f369, %f2, %f368;
-	ld.shared.f32 	%f370, [%r23+44];
-	sub.f32 	%f371, %f3, %f370;
-	mul.f32 	%f372, %f369, %f369;
-	fma.rn.f32 	%f373, %f367, %f367, %f372;
-	fma.rn.f32 	%f374, %f371, %f371, %f373;
-	sqrt.rn.f32 	%f375, %f374;
-	mov.f32 	%f376, 0f38D1B717;
-	max.f32 	%f377, %f375, %f376;
-	ld.shared.f32 	%f378, [%r24+12];
-	mul.f32 	%f379, %f4, %f378;
-	mul.f32 	%f380, %f377, %f377;
-	div.rn.f32 	%f381, %f379, %f380;
-	mul.f32 	%f382, %f367, %f381;
-	div.rn.f32 	%f383, %f382, %f377;
-	add.f32 	%f474, %f474, %f383;
-	mul.f32 	%f384, %f369, %f381;
-	div.rn.f32 	%f385, %f384, %f377;
-	add.f32 	%f475, %f475, %f385;
-	mul.f32 	%f386, %f371, %f381;
-	div.rn.f32 	%f387, %f386, %f377;
-	add.f32 	%f476, %f476, %f387;
-
-$L__BB0_37:
-	setp.eq.s32 	%p23, %r11, 4;
-	@%p23 bra 	$L__BB0_45;
-
-	shl.b32 	%r95, %r100, 8;
-	add.s32 	%r94, %r105, %r95;
-	add.s32 	%r69, %r94, 4;
-	setp.eq.s32 	%p24, %r69, %r2;
-	@%p24 bra 	$L__BB0_40;
-
-	ld.shared.f32 	%f388, [%r23+48];
-	sub.f32 	%f389, %f1, %f388;
-	ld.shared.f32 	%f390, [%r23+52];
-	sub.f32 	%f391, %f2, %f390;
-	ld.shared.f32 	%f392, [%r23+56];
-	sub.f32 	%f393, %f3, %f392;
-	mul.f32 	%f394, %f391, %f391;
-	fma.rn.f32 	%f395, %f389, %f389, %f394;
-	fma.rn.f32 	%f396, %f393, %f393, %f395;
-	sqrt.rn.f32 	%f397, %f396;
-	mov.f32 	%f398, 0f38D1B717;
-	max.f32 	%f399, %f397, %f398;
-	ld.shared.f32 	%f400, [%r24+16];
-	mul.f32 	%f401, %f4, %f400;
-	mul.f32 	%f402, %f399, %f399;
-	div.rn.f32 	%f403, %f401, %f402;
-	mul.f32 	%f404, %f389, %f403;
-	div.rn.f32 	%f405, %f404, %f399;
-	add.f32 	%f474, %f474, %f405;
-	mul.f32 	%f406, %f391, %f403;
-	div.rn.f32 	%f407, %f406, %f399;
-	add.f32 	%f475, %f475, %f407;
-	mul.f32 	%f408, %f393, %f403;
-	div.rn.f32 	%f409, %f408, %f399;
-	add.f32 	%f476, %f476, %f409;
-
-$L__BB0_40:
-	setp.eq.s32 	%p25, %r11, 5;
-	@%p25 bra 	$L__BB0_45;
-
-	shl.b32 	%r97, %r100, 8;
-	add.s32 	%r96, %r105, %r97;
-	add.s32 	%r71, %r96, 5;
-	setp.eq.s32 	%p26, %r71, %r2;
-	@%p26 bra 	$L__BB0_43;
-
-	ld.shared.f32 	%f410, [%r23+60];
-	sub.f32 	%f411, %f1, %f410;
-	ld.shared.f32 	%f412, [%r23+64];
-	sub.f32 	%f413, %f2, %f412;
-	ld.shared.f32 	%f414, [%r23+68];
-	sub.f32 	%f415, %f3, %f414;
-	mul.f32 	%f416, %f413, %f413;
-	fma.rn.f32 	%f417, %f411, %f411, %f416;
-	fma.rn.f32 	%f418, %f415, %f415, %f417;
-	sqrt.rn.f32 	%f419, %f418;
-	mov.f32 	%f420, 0f38D1B717;
-	max.f32 	%f421, %f419, %f420;
-	ld.shared.f32 	%f422, [%r24+20];
-	mul.f32 	%f423, %f4, %f422;
-	mul.f32 	%f424, %f421, %f421;
-	div.rn.f32 	%f425, %f423, %f424;
-	mul.f32 	%f426, %f411, %f425;
-	div.rn.f32 	%f427, %f426, %f421;
-	add.f32 	%f474, %f474, %f427;
-	mul.f32 	%f428, %f413, %f425;
-	div.rn.f32 	%f429, %f428, %f421;
-	add.f32 	%f475, %f475, %f429;
-	mul.f32 	%f430, %f415, %f425;
-	div.rn.f32 	%f431, %f430, %f421;
-	add.f32 	%f476, %f476, %f431;
-
-$L__BB0_43:
-	shl.b32 	%r99, %r100, 8;
-	add.s32 	%r98, %r105, %r99;
-	add.s32 	%r73, %r98, 6;
-	setp.eq.s32 	%p27, %r73, %r2;
-	setp.eq.s32 	%p28, %r11, 6;
-	or.pred  	%p29, %p28, %p27;
-	@%p29 bra 	$L__BB0_45;
-
-	ld.shared.f32 	%f432, [%r23+72];
-	sub.f32 	%f433, %f1, %f432;
-	ld.shared.f32 	%f434, [%r23+76];
-	sub.f32 	%f435, %f2, %f434;
-	ld.shared.f32 	%f436, [%r23+80];
-	sub.f32 	%f437, %f3, %f436;
-	mul.f32 	%f438, %f435, %f435;
-	fma.rn.f32 	%f439, %f433, %f433, %f438;
-	fma.rn.f32 	%f440, %f437, %f437, %f439;
-	sqrt.rn.f32 	%f441, %f440;
-	mov.f32 	%f442, 0f38D1B717;
-	max.f32 	%f443, %f441, %f442;
-	ld.shared.f32 	%f444, [%r24+24];
-	mul.f32 	%f445, %f4, %f444;
-	mul.f32 	%f446, %f443, %f443;
-	div.rn.f32 	%f447, %f445, %f446;
-	mul.f32 	%f448, %f433, %f447;
-	div.rn.f32 	%f449, %f448, %f443;
-	add.f32 	%f474, %f474, %f449;
-	mul.f32 	%f450, %f435, %f447;
-	div.rn.f32 	%f451, %f450, %f443;
-	add.f32 	%f475, %f475, %f451;
-	mul.f32 	%f452, %f437, %f447;
-	div.rn.f32 	%f453, %f452, %f443;
-	add.f32 	%f476, %f476, %f453;
-
-$L__BB0_45:
-	bar.sync 	0;
-	add.s32 	%r100, %r100, 1;
-	setp.lt.s32 	%p30, %r100, %r5;
-	@%p30 bra 	$L__BB0_3;
+	setp.lt.ftz.f32 	%p33, %f76, 0f358637BD;
+	mov.f32 	%f743, 0f00000000;
+	mov.f32 	%f744, %f743;
+	mov.f32 	%f745, %f743;
+	@%p33 bra 	$L__BB0_36;
+
+	rcp.approx.ftz.f32 	%f449, %f76;
+	mul.ftz.f32 	%f745, %f75, %f449;
+	mul.ftz.f32 	%f744, %f74, %f449;
+	mul.ftz.f32 	%f743, %f73, %f449;
+
+$L__BB0_36:
+	fma.rn.ftz.f32 	%f738, %f742, %f743, %f738;
+	fma.rn.ftz.f32 	%f739, %f742, %f744, %f739;
+	fma.rn.ftz.f32 	%f740, %f742, %f745, %f740;
+	mul.ftz.f32 	%f450, %f330, %f744;
+	fma.rn.ftz.f32 	%f451, %f329, %f743, %f450;
+	fma.rn.ftz.f32 	%f94, %f331, %f745, %f451;
+	setp.leu.ftz.f32 	%p34, %f94, 0f00000000;
+	@%p34 bra 	$L__BB0_38;
+
+	mul.ftz.f32 	%f452, %f7, %f94;
+	mul.ftz.f32 	%f453, %f452, 0fBDCCCCCD;
+	fma.rn.ftz.f32 	%f738, %f743, %f453, %f738;
+	fma.rn.ftz.f32 	%f739, %f744, %f453, %f739;
+	fma.rn.ftz.f32 	%f740, %f745, %f453, %f740;
+
+$L__BB0_38:
+	add.s32 	%r23, %r71, 3;
+	setp.eq.s32 	%p35, %r23, %r3;
+	@%p35 bra 	$L__BB0_48;
+
+	mul.wide.u32 	%rd13, %r23, 48;
+	add.s64 	%rd14, %rd1, %rd13;
+	ld.global.u8 	%rs29, [%rd14+33];
+	and.b16  	%rs133, %rs29, 1;
+	setp.eq.b16 	%p36, %rs133, 1;
+	mov.pred 	%p37, 0;
+	xor.pred  	%p38, %p36, %p37;
+	not.pred 	%p39, %p38;
+	@%p39 bra 	$L__BB0_48;
+
+	.pragma "used_bytes_mask 4095";
+	ld.shared.v4.f32 	{%f455, %f456, %f457, %f458}, [%r19+48];
+	ld.shared.f32 	%f101, [%r20+12];
+	sub.ftz.f32 	%f102, %f325, %f455;
+	sub.ftz.f32 	%f103, %f326, %f456;
+	sub.ftz.f32 	%f104, %f327, %f457;
+	mul.ftz.f32 	%f462, %f103, %f103;
+	fma.rn.ftz.f32 	%f463, %f102, %f102, %f462;
+	fma.rn.ftz.f32 	%f464, %f104, %f104, %f463;
+	sqrt.approx.ftz.f32 	%f105, %f464;
+	mov.f32 	%f465, 0f38D1B717;
+	max.ftz.f32 	%f106, %f105, %f465;
+	setp.geu.ftz.f32 	%p40, %f106, %f320;
+	mov.f32 	%f750, 0f00000000;
+	@%p40 bra 	$L__BB0_42;
+
+	mov.f32 	%f694, 0f38D1B717;
+	max.ftz.f32 	%f693, %f105, %f694;
+	div.approx.ftz.f32 	%f466, %f693, %f320;
+	mov.f32 	%f467, 0f3F800000;
+	sub.ftz.f32 	%f468, %f467, %f466;
+	mul.ftz.f32 	%f469, %f468, %f468;
+	mul.ftz.f32 	%f470, %f7, %f101;
+	sqrt.approx.ftz.f32 	%f471, %f470;
+	mul.ftz.f32 	%f472, %f471, %f318;
+	mul.ftz.f32 	%f473, %f472, %f469;
+	mul.ftz.f32 	%f474, %f693, %f693;
+	div.approx.ftz.f32 	%f750, %f473, %f474;
+
+$L__BB0_42:
+	and.b16  	%rs134, %rs1, %rs29;
+	and.b16  	%rs135, %rs134, 2;
+	setp.eq.s16 	%p41, %rs135, 0;
+	@%p41 bra 	$L__BB0_44;
+
+	mov.f32 	%f692, 0f38D1B717;
+	max.ftz.f32 	%f691, %f105, %f692;
+	add.ftz.f32 	%f475, %f7, %f101;
+	fma.rn.ftz.f32 	%f476, %f475, 0f3F000000, 0f3F800000;
+	sub.ftz.f32 	%f477, %f691, %f476;
+	mul.ftz.f32 	%f478, %f477, %f317;
+	mul.ftz.f32 	%f479, %f7, %f101;
+	sqrt.approx.ftz.f32 	%f480, %f479;
+	fma.rn.ftz.f32 	%f750, %f478, %f480, %f750;
+
+$L__BB0_44:
+	setp.lt.ftz.f32 	%p42, %f105, 0f358637BD;
+	mov.f32 	%f751, 0f00000000;
+	mov.f32 	%f752, %f751;
+	mov.f32 	%f753, %f751;
+	@%p42 bra 	$L__BB0_46;
+
+	rcp.approx.ftz.f32 	%f484, %f105;
+	mul.ftz.f32 	%f753, %f104, %f484;
+	mul.ftz.f32 	%f752, %f103, %f484;
+	mul.ftz.f32 	%f751, %f102, %f484;
 
 $L__BB0_46:
-	ld.param.f32 	%f466, [compute_forces_param_6];
-	mul.lo.s32 	%r77, %r2, 3;
-	cvt.s64.s32 	%rd19, %r77;
-	ld.param.u64 	%rd18, [compute_forces_param_1];
-	cvta.to.global.u64 	%rd15, %rd18;
-	shl.b64 	%rd16, %rd19, 2;
-	add.s64 	%rd17, %rd15, %rd16;
-	ld.global.f32 	%f454, [%rd17];
-	add.f32 	%f455, %f474, %f454;
-	mul.f32 	%f456, %f455, %f466;
-	ld.global.f32 	%f457, [%rd17+4];
-	add.f32 	%f458, %f475, %f457;
-	mul.f32 	%f459, %f458, %f466;
-	ld.global.f32 	%f460, [%rd17+8];
-	add.f32 	%f461, %f476, %f460;
-	mul.f32 	%f462, %f461, %f466;
-	add.f32 	%f463, %f1, %f456;
-	add.f32 	%f464, %f2, %f459;
-	add.f32 	%f465, %f3, %f462;
-	st.global.f32 	[%rd4], %f463;
-	st.global.f32 	[%rd4+4], %f464;
-	st.global.f32 	[%rd4+8], %f465;
-	st.global.f32 	[%rd17], %f456;
-	st.global.f32 	[%rd17+4], %f459;
-	st.global.f32 	[%rd17+8], %f462;
-
-$L__BB0_47:
+	fma.rn.ftz.f32 	%f738, %f750, %f751, %f738;
+	fma.rn.ftz.f32 	%f739, %f750, %f752, %f739;
+	fma.rn.ftz.f32 	%f740, %f750, %f753, %f740;
+	mul.ftz.f32 	%f485, %f330, %f752;
+	fma.rn.ftz.f32 	%f486, %f329, %f751, %f485;
+	fma.rn.ftz.f32 	%f123, %f331, %f753, %f486;
+	setp.leu.ftz.f32 	%p43, %f123, 0f00000000;
+	@%p43 bra 	$L__BB0_48;
+
+	mul.ftz.f32 	%f487, %f7, %f123;
+	mul.ftz.f32 	%f488, %f487, 0fBDCCCCCD;
+	fma.rn.ftz.f32 	%f738, %f751, %f488, %f738;
+	fma.rn.ftz.f32 	%f739, %f752, %f488, %f739;
+	fma.rn.ftz.f32 	%f740, %f753, %f488, %f740;
+
+$L__BB0_48:
+	add.s32 	%r24, %r71, 4;
+	setp.eq.s32 	%p44, %r24, %r3;
+	@%p44 bra 	$L__BB0_58;
+
+	mul.wide.u32 	%rd15, %r24, 48;
+	add.s64 	%rd16, %rd1, %rd15;
+	ld.global.u8 	%rs38, [%rd16+33];
+	and.b16  	%rs148, %rs38, 1;
+	setp.eq.b16 	%p45, %rs148, 1;
+	mov.pred 	%p46, 0;
+	xor.pred  	%p47, %p45, %p46;
+	not.pred 	%p48, %p47;
+	@%p48 bra 	$L__BB0_58;
+
+	.pragma "used_bytes_mask 4095";
+	ld.shared.v4.f32 	{%f490, %f491, %f492, %f493}, [%r19+64];
+	ld.shared.f32 	%f130, [%r20+16];
+	sub.ftz.f32 	%f131, %f325, %f490;
+	sub.ftz.f32 	%f132, %f326, %f491;
+	sub.ftz.f32 	%f133, %f327, %f492;
+	mul.ftz.f32 	%f497, %f132, %f132;
+	fma.rn.ftz.f32 	%f498, %f131, %f131, %f497;
+	fma.rn.ftz.f32 	%f499, %f133, %f133, %f498;
+	sqrt.approx.ftz.f32 	%f134, %f499;
+	mov.f32 	%f500, 0f38D1B717;
+	max.ftz.f32 	%f135, %f134, %f500;
+	setp.geu.ftz.f32 	%p49, %f135, %f320;
+	mov.f32 	%f758, 0f00000000;
+	@%p49 bra 	$L__BB0_52;
+
+	mov.f32 	%f698, 0f38D1B717;
+	max.ftz.f32 	%f697, %f134, %f698;
+	div.approx.ftz.f32 	%f501, %f697, %f320;
+	mov.f32 	%f502, 0f3F800000;
+	sub.ftz.f32 	%f503, %f502, %f501;
+	mul.ftz.f32 	%f504, %f503, %f503;
+	mul.ftz.f32 	%f505, %f7, %f130;
+	sqrt.approx.ftz.f32 	%f506, %f505;
+	mul.ftz.f32 	%f507, %f506, %f318;
+	mul.ftz.f32 	%f508, %f507, %f504;
+	mul.ftz.f32 	%f509, %f697, %f697;
+	div.approx.ftz.f32 	%f758, %f508, %f509;
+
+$L__BB0_52:
+	and.b16  	%rs149, %rs1, %rs38;
+	and.b16  	%rs150, %rs149, 2;
+	setp.eq.s16 	%p50, %rs150, 0;
+	@%p50 bra 	$L__BB0_54;
+
+	mov.f32 	%f696, 0f38D1B717;
+	max.ftz.f32 	%f695, %f134, %f696;
+	add.ftz.f32 	%f510, %f7, %f130;
+	fma.rn.ftz.f32 	%f511, %f510, 0f3F000000, 0f3F800000;
+	sub.ftz.f32 	%f512, %f695, %f511;
+	mul.ftz.f32 	%f513, %f512, %f317;
+	mul.ftz.f32 	%f514, %f7, %f130;
+	sqrt.approx.ftz.f32 	%f515, %f514;
+	fma.rn.ftz.f32 	%f758, %f513, %f515, %f758;
+
+$L__BB0_54:
+	setp.lt.ftz.f32 	%p51, %f134, 0f358637BD;
+	mov.f32 	%f759, 0f00000000;
+	mov.f32 	%f760, %f759;
+	mov.f32 	%f761, %f759;
+	@%p51 bra 	$L__BB0_56;
+
+	rcp.approx.ftz.f32 	%f519, %f134;
+	mul.ftz.f32 	%f761, %f133, %f519;
+	mul.ftz.f32 	%f760, %f132, %f519;
+	mul.ftz.f32 	%f759, %f131, %f519;
+
+$L__BB0_56:
+	fma.rn.ftz.f32 	%f738, %f758, %f759, %f738;
+	fma.rn.ftz.f32 	%f739, %f758, %f760, %f739;
+	fma.rn.ftz.f32 	%f740, %f758, %f761, %f740;
+	mul.ftz.f32 	%f520, %f330, %f760;
+	fma.rn.ftz.f32 	%f521, %f329, %f759, %f520;
+	fma.rn.ftz.f32 	%f152, %f331, %f761, %f521;
+	setp.leu.ftz.f32 	%p52, %f152, 0f00000000;
+	@%p52 bra 	$L__BB0_58;
+
+	mul.ftz.f32 	%f522, %f7, %f152;
+	mul.ftz.f32 	%f523, %f522, 0fBDCCCCCD;
+	fma.rn.ftz.f32 	%f738, %f759, %f523, %f738;
+	fma.rn.ftz.f32 	%f739, %f760, %f523, %f739;
+	fma.rn.ftz.f32 	%f740, %f761, %f523, %f740;
+
+$L__BB0_58:
+	add.s32 	%r25, %r71, 5;
+	setp.eq.s32 	%p53, %r25, %r3;
+	@%p53 bra 	$L__BB0_68;
+
+	mul.wide.u32 	%rd17, %r25, 48;
+	add.s64 	%rd18, %rd1, %rd17;
+	ld.global.u8 	%rs47, [%rd18+33];
+	and.b16  	%rs163, %rs47, 1;
+	setp.eq.b16 	%p54, %rs163, 1;
+	mov.pred 	%p55, 0;
+	xor.pred  	%p56, %p54, %p55;
+	not.pred 	%p57, %p56;
+	@%p57 bra 	$L__BB0_68;
+
+	.pragma "used_bytes_mask 4095";
+	ld.shared.v4.f32 	{%f525, %f526, %f527, %f528}, [%r19+80];
+	ld.shared.f32 	%f159, [%r20+20];
+	sub.ftz.f32 	%f160, %f325, %f525;
+	sub.ftz.f32 	%f161, %f326, %f526;
+	sub.ftz.f32 	%f162, %f327, %f527;
+	mul.ftz.f32 	%f532, %f161, %f161;
+	fma.rn.ftz.f32 	%f533, %f160, %f160, %f532;
+	fma.rn.ftz.f32 	%f534, %f162, %f162, %f533;
+	sqrt.approx.ftz.f32 	%f163, %f534;
+	mov.f32 	%f535, 0f38D1B717;
+	max.ftz.f32 	%f164, %f163, %f535;
+	setp.geu.ftz.f32 	%p58, %f164, %f320;
+	mov.f32 	%f766, 0f00000000;
+	@%p58 bra 	$L__BB0_62;
+
+	mov.f32 	%f702, 0f38D1B717;
+	max.ftz.f32 	%f701, %f163, %f702;
+	div.approx.ftz.f32 	%f536, %f701, %f320;
+	mov.f32 	%f537, 0f3F800000;
+	sub.ftz.f32 	%f538, %f537, %f536;
+	mul.ftz.f32 	%f539, %f538, %f538;
+	mul.ftz.f32 	%f540, %f7, %f159;
+	sqrt.approx.ftz.f32 	%f541, %f540;
+	mul.ftz.f32 	%f542, %f541, %f318;
+	mul.ftz.f32 	%f543, %f542, %f539;
+	mul.ftz.f32 	%f544, %f701, %f701;
+	div.approx.ftz.f32 	%f766, %f543, %f544;
+
+$L__BB0_62:
+	and.b16  	%rs164, %rs1, %rs47;
+	and.b16  	%rs165, %rs164, 2;
+	setp.eq.s16 	%p59, %rs165, 0;
+	@%p59 bra 	$L__BB0_64;
+
+	mov.f32 	%f700, 0f38D1B717;
+	max.ftz.f32 	%f699, %f163, %f700;
+	add.ftz.f32 	%f545, %f7, %f159;
+	fma.rn.ftz.f32 	%f546, %f545, 0f3F000000, 0f3F800000;
+	sub.ftz.f32 	%f547, %f699, %f546;
+	mul.ftz.f32 	%f548, %f547, %f317;
+	mul.ftz.f32 	%f549, %f7, %f159;
+	sqrt.approx.ftz.f32 	%f550, %f549;
+	fma.rn.ftz.f32 	%f766, %f548, %f550, %f766;
+
+$L__BB0_64:
+	setp.lt.ftz.f32 	%p60, %f163, 0f358637BD;
+	mov.f32 	%f767, 0f00000000;
+	mov.f32 	%f768, %f767;
+	mov.f32 	%f769, %f767;
+	@%p60 bra 	$L__BB0_66;
+
+	rcp.approx.ftz.f32 	%f554, %f163;
+	mul.ftz.f32 	%f769, %f162, %f554;
+	mul.ftz.f32 	%f768, %f161, %f554;
+	mul.ftz.f32 	%f767, %f160, %f554;
+
+$L__BB0_66:
+	fma.rn.ftz.f32 	%f738, %f766, %f767, %f738;
+	fma.rn.ftz.f32 	%f739, %f766, %f768, %f739;
+	fma.rn.ftz.f32 	%f740, %f766, %f769, %f740;
+	mul.ftz.f32 	%f555, %f330, %f768;
+	fma.rn.ftz.f32 	%f556, %f329, %f767, %f555;
+	fma.rn.ftz.f32 	%f181, %f331, %f769, %f556;
+	setp.leu.ftz.f32 	%p61, %f181, 0f00000000;
+	@%p61 bra 	$L__BB0_68;
+
+	mul.ftz.f32 	%f557, %f7, %f181;
+	mul.ftz.f32 	%f558, %f557, 0fBDCCCCCD;
+	fma.rn.ftz.f32 	%f738, %f767, %f558, %f738;
+	fma.rn.ftz.f32 	%f739, %f768, %f558, %f739;
+	fma.rn.ftz.f32 	%f740, %f769, %f558, %f740;
+
+$L__BB0_68:
+	add.s32 	%r26, %r71, 6;
+	setp.eq.s32 	%p62, %r26, %r3;
+	@%p62 bra 	$L__BB0_78;
+
+	mul.wide.u32 	%rd19, %r26, 48;
+	add.s64 	%rd20, %rd1, %rd19;
+	ld.global.u8 	%rs56, [%rd20+33];
+	and.b16  	%rs178, %rs56, 1;
+	setp.eq.b16 	%p63, %rs178, 1;
+	mov.pred 	%p64, 0;
+	xor.pred  	%p65, %p63, %p64;
+	not.pred 	%p66, %p65;
+	@%p66 bra 	$L__BB0_78;
+
+	.pragma "used_bytes_mask 4095";
+	ld.shared.v4.f32 	{%f560, %f561, %f562, %f563}, [%r19+96];
+	ld.shared.f32 	%f188, [%r20+24];
+	sub.ftz.f32 	%f189, %f325, %f560;
+	sub.ftz.f32 	%f190, %f326, %f561;
+	sub.ftz.f32 	%f191, %f327, %f562;
+	mul.ftz.f32 	%f567, %f190, %f190;
+	fma.rn.ftz.f32 	%f568, %f189, %f189, %f567;
+	fma.rn.ftz.f32 	%f569, %f191, %f191, %f568;
+	sqrt.approx.ftz.f32 	%f192, %f569;
+	mov.f32 	%f570, 0f38D1B717;
+	max.ftz.f32 	%f193, %f192, %f570;
+	setp.geu.ftz.f32 	%p67, %f193, %f320;
+	mov.f32 	%f774, 0f00000000;
+	@%p67 bra 	$L__BB0_72;
+
+	mov.f32 	%f706, 0f38D1B717;
+	max.ftz.f32 	%f705, %f192, %f706;
+	div.approx.ftz.f32 	%f571, %f705, %f320;
+	mov.f32 	%f572, 0f3F800000;
+	sub.ftz.f32 	%f573, %f572, %f571;
+	mul.ftz.f32 	%f574, %f573, %f573;
+	mul.ftz.f32 	%f575, %f7, %f188;
+	sqrt.approx.ftz.f32 	%f576, %f575;
+	mul.ftz.f32 	%f577, %f576, %f318;
+	mul.ftz.f32 	%f578, %f577, %f574;
+	mul.ftz.f32 	%f579, %f705, %f705;
+	div.approx.ftz.f32 	%f774, %f578, %f579;
+
+$L__BB0_72:
+	and.b16  	%rs179, %rs1, %rs56;
+	and.b16  	%rs180, %rs179, 2;
+	setp.eq.s16 	%p68, %rs180, 0;
+	@%p68 bra 	$L__BB0_74;
+
+	mov.f32 	%f704, 0f38D1B717;
+	max.ftz.f32 	%f703, %f192, %f704;
+	add.ftz.f32 	%f580, %f7, %f188;
+	fma.rn.ftz.f32 	%f581, %f580, 0f3F000000, 0f3F800000;
+	sub.ftz.f32 	%f582, %f703, %f581;
+	mul.ftz.f32 	%f583, %f582, %f317;
+	mul.ftz.f32 	%f584, %f7, %f188;
+	sqrt.approx.ftz.f32 	%f585, %f584;
+	fma.rn.ftz.f32 	%f774, %f583, %f585, %f774;
+
+$L__BB0_74:
+	setp.lt.ftz.f32 	%p69, %f192, 0f358637BD;
+	mov.f32 	%f775, 0f00000000;
+	mov.f32 	%f776, %f775;
+	mov.f32 	%f777, %f775;
+	@%p69 bra 	$L__BB0_76;
+
+	rcp.approx.ftz.f32 	%f589, %f192;
+	mul.ftz.f32 	%f777, %f191, %f589;
+	mul.ftz.f32 	%f776, %f190, %f589;
+	mul.ftz.f32 	%f775, %f189, %f589;
+
+$L__BB0_76:
+	fma.rn.ftz.f32 	%f738, %f774, %f775, %f738;
+	fma.rn.ftz.f32 	%f739, %f774, %f776, %f739;
+	fma.rn.ftz.f32 	%f740, %f774, %f777, %f740;
+	mul.ftz.f32 	%f590, %f330, %f776;
+	fma.rn.ftz.f32 	%f591, %f329, %f775, %f590;
+	fma.rn.ftz.f32 	%f210, %f331, %f777, %f591;
+	setp.leu.ftz.f32 	%p70, %f210, 0f00000000;
+	@%p70 bra 	$L__BB0_78;
+
+	mul.ftz.f32 	%f592, %f7, %f210;
+	mul.ftz.f32 	%f593, %f592, 0fBDCCCCCD;
+	fma.rn.ftz.f32 	%f738, %f775, %f593, %f738;
+	fma.rn.ftz.f32 	%f739, %f776, %f593, %f739;
+	fma.rn.ftz.f32 	%f740, %f777, %f593, %f740;
+
+$L__BB0_78:
+	add.s32 	%r27, %r71, 7;
+	setp.eq.s32 	%p71, %r27, %r3;
+	@%p71 bra 	$L__BB0_88;
+
+	mul.wide.u32 	%rd21, %r27, 48;
+	add.s64 	%rd22, %rd1, %rd21;
+	ld.global.u8 	%rs65, [%rd22+33];
+	and.b16  	%rs193, %rs65, 1;
+	setp.eq.b16 	%p72, %rs193, 1;
+	mov.pred 	%p73, 0;
+	xor.pred  	%p74, %p72, %p73;
+	not.pred 	%p75, %p74;
+	@%p75 bra 	$L__BB0_88;
+
+	.pragma "used_bytes_mask 4095";
+	ld.shared.v4.f32 	{%f595, %f596, %f597, %f598}, [%r19+112];
+	ld.shared.f32 	%f217, [%r20+28];
+	sub.ftz.f32 	%f218, %f325, %f595;
+	sub.ftz.f32 	%f219, %f326, %f596;
+	sub.ftz.f32 	%f220, %f327, %f597;
+	mul.ftz.f32 	%f602, %f219, %f219;
+	fma.rn.ftz.f32 	%f603, %f218, %f218, %f602;
+	fma.rn.ftz.f32 	%f604, %f220, %f220, %f603;
+	sqrt.approx.ftz.f32 	%f221, %f604;
+	mov.f32 	%f605, 0f38D1B717;
+	max.ftz.f32 	%f222, %f221, %f605;
+	setp.geu.ftz.f32 	%p76, %f222, %f320;
+	mov.f32 	%f782, 0f00000000;
+	@%p76 bra 	$L__BB0_82;
+
+	mov.f32 	%f714, 0f38D1B717;
+	max.ftz.f32 	%f713, %f221, %f714;
+	div.approx.ftz.f32 	%f606, %f713, %f320;
+	mov.f32 	%f607, 0f3F800000;
+	sub.ftz.f32 	%f608, %f607, %f606;
+	mul.ftz.f32 	%f609, %f608, %f608;
+	mul.ftz.f32 	%f610, %f7, %f217;
+	sqrt.approx.ftz.f32 	%f611, %f610;
+	mul.ftz.f32 	%f612, %f611, %f318;
+	mul.ftz.f32 	%f613, %f612, %f609;
+	mul.ftz.f32 	%f614, %f713, %f713;
+	div.approx.ftz.f32 	%f782, %f613, %f614;
+
+$L__BB0_82:
+	and.b16  	%rs194, %rs1, %rs65;
+	and.b16  	%rs195, %rs194, 2;
+	setp.eq.s16 	%p77, %rs195, 0;
+	@%p77 bra 	$L__BB0_84;
+
+	mov.f32 	%f712, 0f38D1B717;
+	max.ftz.f32 	%f711, %f221, %f712;
+	add.ftz.f32 	%f615, %f7, %f217;
+	fma.rn.ftz.f32 	%f616, %f615, 0f3F000000, 0f3F800000;
+	sub.ftz.f32 	%f617, %f711, %f616;
+	mul.ftz.f32 	%f618, %f617, %f317;
+	mul.ftz.f32 	%f619, %f7, %f217;
+	sqrt.approx.ftz.f32 	%f620, %f619;
+	fma.rn.ftz.f32 	%f782, %f618, %f620, %f782;
+
+$L__BB0_84:
+	setp.lt.ftz.f32 	%p78, %f221, 0f358637BD;
+	mov.f32 	%f783, 0f00000000;
+	mov.f32 	%f784, %f783;
+	mov.f32 	%f785, %f783;
+	@%p78 bra 	$L__BB0_86;
+
+	rcp.approx.ftz.f32 	%f624, %f221;
+	mul.ftz.f32 	%f785, %f220, %f624;
+	mul.ftz.f32 	%f784, %f219, %f624;
+	mul.ftz.f32 	%f783, %f218, %f624;
+
+$L__BB0_86:
+	fma.rn.ftz.f32 	%f738, %f782, %f783, %f738;
+	fma.rn.ftz.f32 	%f739, %f782, %f784, %f739;
+	fma.rn.ftz.f32 	%f740, %f782, %f785, %f740;
+	mul.ftz.f32 	%f625, %f330, %f784;
+	fma.rn.ftz.f32 	%f626, %f329, %f783, %f625;
+	fma.rn.ftz.f32 	%f239, %f331, %f785, %f626;
+	setp.leu.ftz.f32 	%p79, %f239, 0f00000000;
+	@%p79 bra 	$L__BB0_88;
+
+	mul.ftz.f32 	%f627, %f7, %f239;
+	mul.ftz.f32 	%f628, %f627, 0fBDCCCCCD;
+	fma.rn.ftz.f32 	%f738, %f783, %f628, %f738;
+	fma.rn.ftz.f32 	%f739, %f784, %f628, %f739;
+	fma.rn.ftz.f32 	%f740, %f785, %f628, %f740;
+
+$L__BB0_88:
+	add.s32 	%r92, %r92, 8;
+	add.s32 	%r91, %r92, %r10;
+	add.s32 	%r90, %r90, -8;
+	setp.ne.s32 	%p80, %r90, 0;
+	@%p80 bra 	$L__BB0_8;
+
+$L__BB0_89:
+	setp.eq.s32 	%p81, %r97, 0;
+	@%p81 bra 	$L__BB0_102;
+
+	shl.b32 	%r78, %r92, 2;
+	add.s32 	%r94, %r58, %r78;
+	shl.b32 	%r80, %r92, 4;
+	add.s32 	%r93, %r56, %r80;
+
+$L__BB0_91:
+	.pragma "nounroll";
+	setp.eq.s32 	%p82, %r91, %r3;
+	@%p82 bra 	$L__BB0_101;
+
+	mul.wide.u32 	%rd23, %r91, 48;
+	add.s64 	%rd24, %rd1, %rd23;
+	ld.global.u8 	%rs74, [%rd24+33];
+	and.b16  	%rs208, %rs74, 1;
+	setp.eq.b16 	%p83, %rs208, 1;
+	mov.pred 	%p84, 0;
+	xor.pred  	%p85, %p83, %p84;
+	not.pred 	%p86, %p85;
+	@%p86 bra 	$L__BB0_101;
+
+	.pragma "used_bytes_mask 4095";
+	ld.shared.v4.f32 	{%f630, %f631, %f632, %f633}, [%r93];
+	ld.shared.f32 	%f255, [%r94];
+	sub.ftz.f32 	%f256, %f325, %f630;
+	sub.ftz.f32 	%f257, %f326, %f631;
+	sub.ftz.f32 	%f258, %f327, %f632;
+	mul.ftz.f32 	%f637, %f257, %f257;
+	fma.rn.ftz.f32 	%f638, %f256, %f256, %f637;
+	fma.rn.ftz.f32 	%f639, %f258, %f258, %f638;
+	sqrt.approx.ftz.f32 	%f259, %f639;
+	mov.f32 	%f640, 0f38D1B717;
+	max.ftz.f32 	%f260, %f259, %f640;
+	setp.geu.ftz.f32 	%p87, %f260, %f320;
+	mov.f32 	%f799, 0f00000000;
+	@%p87 bra 	$L__BB0_95;
+
+	mov.f32 	%f718, 0f38D1B717;
+	max.ftz.f32 	%f717, %f259, %f718;
+	div.approx.ftz.f32 	%f641, %f717, %f320;
+	mov.f32 	%f642, 0f3F800000;
+	sub.ftz.f32 	%f643, %f642, %f641;
+	mul.ftz.f32 	%f644, %f643, %f643;
+	mul.ftz.f32 	%f645, %f7, %f255;
+	sqrt.approx.ftz.f32 	%f646, %f645;
+	mul.ftz.f32 	%f647, %f646, %f318;
+	mul.ftz.f32 	%f648, %f647, %f644;
+	mul.ftz.f32 	%f649, %f717, %f717;
+	div.approx.ftz.f32 	%f799, %f648, %f649;
+
+$L__BB0_95:
+	and.b16  	%rs209, %rs1, %rs74;
+	and.b16  	%rs210, %rs209, 2;
+	setp.eq.s16 	%p88, %rs210, 0;
+	@%p88 bra 	$L__BB0_97;
+
+	mov.f32 	%f716, 0f38D1B717;
+	max.ftz.f32 	%f715, %f259, %f716;
+	add.ftz.f32 	%f650, %f7, %f255;
+	fma.rn.ftz.f32 	%f651, %f650, 0f3F000000, 0f3F800000;
+	sub.ftz.f32 	%f652, %f715, %f651;
+	mul.ftz.f32 	%f653, %f652, %f317;
+	mul.ftz.f32 	%f654, %f7, %f255;
+	sqrt.approx.ftz.f32 	%f655, %f654;
+	fma.rn.ftz.f32 	%f799, %f653, %f655, %f799;
+
+$L__BB0_97:
+	setp.lt.ftz.f32 	%p89, %f259, 0f358637BD;
+	mov.f32 	%f800, 0f00000000;
+	mov.f32 	%f801, %f800;
+	mov.f32 	%f802, %f800;
+	@%p89 bra 	$L__BB0_99;
+
+	rcp.approx.ftz.f32 	%f659, %f259;
+	mul.ftz.f32 	%f802, %f258, %f659;
+	mul.ftz.f32 	%f801, %f257, %f659;
+	mul.ftz.f32 	%f800, %f256, %f659;
+
+$L__BB0_99:
+	fma.rn.ftz.f32 	%f738, %f799, %f800, %f738;
+	fma.rn.ftz.f32 	%f739, %f799, %f801, %f739;
+	fma.rn.ftz.f32 	%f740, %f799, %f802, %f740;
+	mul.ftz.f32 	%f660, %f330, %f801;
+	fma.rn.ftz.f32 	%f661, %f329, %f800, %f660;
+	fma.rn.ftz.f32 	%f277, %f331, %f802, %f661;
+	setp.leu.ftz.f32 	%p90, %f277, 0f00000000;
+	@%p90 bra 	$L__BB0_101;
+
+	mul.ftz.f32 	%f662, %f7, %f277;
+	mul.ftz.f32 	%f663, %f662, 0fBDCCCCCD;
+	fma.rn.ftz.f32 	%f738, %f800, %f663, %f738;
+	fma.rn.ftz.f32 	%f739, %f801, %f663, %f739;
+	fma.rn.ftz.f32 	%f740, %f802, %f663, %f740;
+
+$L__BB0_101:
+	add.s32 	%r92, %r92, 1;
+	add.s32 	%r91, %r92, %r10;
+	add.s32 	%r94, %r94, 4;
+	add.s32 	%r93, %r93, 16;
+	add.s32 	%r97, %r97, -1;
+	setp.ne.s32 	%p91, %r97, 0;
+	@%p91 bra 	$L__BB0_91;
+
+$L__BB0_102:
+	bar.sync 	0;
+	add.s32 	%r87, %r87, 1;
+	setp.lt.u32 	%p92, %r87, %r8;
+	@%p92 bra 	$L__BB0_3;
+
+$L__BB0_103:
+	ld.param.f32 	%f682, [compute_forces_param_4];
+	add.ftz.f32 	%f664, %f329, %f738;
+	mul.ftz.f32 	%f818, %f664, %f682;
+	add.ftz.f32 	%f665, %f330, %f739;
+	mul.ftz.f32 	%f819, %f665, %f682;
+	add.ftz.f32 	%f666, %f331, %f740;
+	mul.ftz.f32 	%f820, %f666, %f682;
+	add.ftz.f32 	%f667, %f7, 0f3F000000;
+	mov.f32 	%f668, 0f40000000;
+	div.approx.ftz.f32 	%f293, %f668, %f667;
+	mul.ftz.f32 	%f669, %f819, %f819;
+	fma.rn.ftz.f32 	%f670, %f818, %f818, %f669;
+	fma.rn.ftz.f32 	%f671, %f820, %f820, %f670;
+	sqrt.approx.ftz.f32 	%f294, %f671;
+	setp.leu.ftz.f32 	%p93, %f294, %f293;
+	@%p93 bra 	$L__BB0_105;
+
+	div.approx.ftz.f32 	%f672, %f293, %f294;
+	mul.ftz.f32 	%f818, %f818, %f672;
+	mul.ftz.f32 	%f819, %f819, %f672;
+	mul.ftz.f32 	%f820, %f820, %f672;
+
+$L__BB0_105:
+	ld.param.f32 	%f683, [compute_forces_param_6];
+	add.ftz.f32 	%f817, %f325, %f818;
+	add.ftz.f32 	%f816, %f326, %f819;
+	add.ftz.f32 	%f815, %f327, %f820;
+	setp.leu.ftz.f32 	%p94, %f683, 0f00000000;
+	@%p94 bra 	$L__BB0_110;
+
+	ld.param.f32 	%f684, [compute_forces_param_6];
+	min.ftz.f32 	%f673, %f817, %f684;
+	neg.ftz.f32 	%f674, %f684;
+	max.ftz.f32 	%f817, %f673, %f674;
+	min.ftz.f32 	%f675, %f816, %f684;
+	max.ftz.f32 	%f816, %f675, %f674;
+	min.ftz.f32 	%f676, %f815, %f684;
+	max.ftz.f32 	%f815, %f676, %f674;
+	abs.ftz.f32 	%f677, %f817;
+	mul.ftz.f32 	%f307, %f684, 0f3F666666;
+	setp.gt.ftz.f32 	%p95, %f677, %f307;
+	@%p95 bra 	$L__BB0_109;
+
+	abs.ftz.f32 	%f678, %f816;
+	setp.gt.ftz.f32 	%p96, %f678, %f307;
+	@%p96 bra 	$L__BB0_109;
+
+	abs.ftz.f32 	%f679, %f815;
+	setp.leu.ftz.f32 	%p97, %f679, %f307;
+	@%p97 bra 	$L__BB0_110;
+
+$L__BB0_109:
+	mul.ftz.f32 	%f818, %f818, 0f3F666666;
+	mul.ftz.f32 	%f819, %f819, 0f3F666666;
+	mul.ftz.f32 	%f820, %f820, 0f3F666666;
+
+$L__BB0_110:
+	mul.wide.s32 	%rd26, %r3, 48;
+	add.s64 	%rd25, %rd1, %rd26;
+	st.global.v2.f32 	[%rd25], {%f817, %f816};
+	st.global.f32 	[%rd25+8], %f815;
+	st.global.v2.f32 	[%rd25+16], {%f818, %f819};
+	st.global.f32 	[%rd25+24], %f820;
+
+$L__BB0_111:
 	ret;
 
 }
diff --git a/src/utils/gpu_compute.rs b/src/utils/gpu_compute.rs
index dc067cc2..9cbc6fef 100755
--- a/src/utils/gpu_compute.rs
+++ b/src/utils/gpu_compute.rs
@@ -60,7 +60,7 @@ impl GPUCompute {
             .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?);
 
         debug!("Loading force computation kernel");
-        let ptx = Ptx::from_file("/app/compute_forces.ptx");
+        let ptx = Ptx::from_file("/app/compute_forces/compute_forces.ptx");
             
         device.load_ptx(ptx, "compute_forces", &["compute_forces"])
             .map_err(|e| Error::new(std::io::ErrorKind::Other, e.to_string()))?;
@@ -124,19 +124,22 @@ impl GPUCompute {
             shared_mem_bytes: SHARED_MEM_SIZE,
         };
 
-        // Adjust simulation parameters for stability
-        let mut params = self.simulation_params.clone();
-        params.spring_strength *= 0.1; // Reduce force strength
-        params.repulsion *= 0.1;      // Reduce repulsion force
-        params.damping = params.damping.max(0.95); // Increase damping for stability
+        // Use parameters directly without scaling
+        let params = &self.simulation_params;
 
         unsafe {
             self.force_kernel.clone().launch(cfg, (
                 &mut self.node_data,
                 self.num_nodes as i32,
-                params.spring_strength,
-                params.repulsion,
-                params.damping,
+                params.spring_strength,        // Spring force strength
+                params.repulsion,             // Repulsion force strength
+                params.damping,               // Velocity damping
+                params.max_repulsion_distance, // Maximum distance for repulsion
+                if params.enable_bounds {      // Viewport bounds (0 if disabled)
+                    params.viewport_bounds
+                } else {
+                    0.0
+                }
             )).map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
         }
         

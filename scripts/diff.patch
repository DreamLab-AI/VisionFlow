diff --git a/.env_template b/.env_template
index 2743c64c..077b6c6f 100755
--- a/.env_template
+++ b/.env_template
@@ -44,8 +44,3 @@ OPENAI_BASE_URL=wss://api.openai.com/v1/realtime
 OPENAI_TIMEOUT=30
 OPENAI_RATE_LIMIT=100
 
-# Authentication Configuration
-AUTH_PASSWORD_HASH=           # bcrypt hash of admin password
-AUTH_SALT=                   # Random salt for password hashing
-AUTH_TOKEN_SECRET=           # Secret for JWT token signing
-AUTH_TOKEN_EXPIRY=3600      # Token expiry in seconds (default 1 hour)
diff --git a/Cargo.lock b/Cargo.lock
index dff1428c..ac1eb45f 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -46,9 +46,9 @@ dependencies = [
 
 [[package]]
 name = "actix-cors"
-version = "0.6.5"
+version = "0.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0346d8c1f762b41b458ed3145eea914966bb9ad20b9be0d6d463b20d45586370"
+checksum = "f9e772b3bcafe335042b5db010ab7c09013dad6eac4915c91d8d50902769f331"
 dependencies = [
  "actix-utils",
  "actix-web",
@@ -103,7 +103,7 @@ dependencies = [
  "flate2",
  "futures-core",
  "h2",
- "http",
+ "http 0.2.12",
  "httparse",
  "httpdate",
  "itoa",
@@ -139,7 +139,7 @@ checksum = "13d324164c51f63867b57e73ba5936ea151b8a41a1d23d1031eeb9f70d0236f8"
 dependencies = [
  "bytestring",
  "cfg-if",
- "http",
+ "http 0.2.12",
  "regex",
  "regex-lite",
  "serde",
@@ -290,27 +290,6 @@ version = "2.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627"
 
-[[package]]
-name = "aead"
-version = "0.5.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0"
-dependencies = [
- "crypto-common",
- "generic-array",
-]
-
-[[package]]
-name = "aes"
-version = "0.8.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b169f7a6d4742236a0a00c541b845991d0ac43e546831af1249753ab4c3aa3a0"
-dependencies = [
- "cfg-if",
- "cipher",
- "cpufeatures",
-]
-
 [[package]]
 name = "ahash"
 version = "0.7.8"
@@ -359,6 +338,12 @@ dependencies = [
  "alloc-no-stdlib",
 ]
 
+[[package]]
+name = "allocator-api2"
+version = "0.2.21"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "683d7910e743518b0e34f1186f92494becacb047c7b6bf616c96772180fef923"
+
 [[package]]
 name = "android-tzdata"
 version = "0.1.1"
@@ -380,6 +365,62 @@ version = "1.0.95"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "34ac096ce696dc2fcabef30516bb13c0a68a11d30131d3df6f04711467681b04"
 
+[[package]]
+name = "approx"
+version = "0.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cab112f0a86d568ea0e627cc1d6be74a1e9cd55214684db5561995f6dad897c6"
+dependencies = [
+ "num-traits",
+]
+
+[[package]]
+name = "arrayvec"
+version = "0.7.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50"
+
+[[package]]
+name = "ash"
+version = "0.37.3+1.3.251"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "39e9c3835d686b0a6084ab4234fcd1b07dbf6e4767dce60874b12356a25ecd4a"
+dependencies = [
+ "libloading 0.7.4",
+]
+
+[[package]]
+name = "async-convert"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6d416feee97712e43152cd42874de162b8f9b77295b1c85e5d92725cc8310bae"
+dependencies = [
+ "async-trait",
+]
+
+[[package]]
+name = "async-openai"
+version = "0.14.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7e1df052c2bd7b241fc828bc2fda74ce9a7ef05e0a593c37275aaaba52caf49d"
+dependencies = [
+ "async-convert",
+ "backoff",
+ "base64 0.21.7",
+ "derive_builder",
+ "futures",
+ "rand",
+ "reqwest",
+ "reqwest-eventsource",
+ "serde",
+ "serde_json",
+ "thiserror 1.0.69",
+ "tokio",
+ "tokio-stream",
+ "tokio-util",
+ "tracing",
+]
+
 [[package]]
 name = "async-stream"
 version = "0.3.6"
@@ -419,6 +460,20 @@ version = "1.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26"
 
+[[package]]
+name = "backoff"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b62ddb9cb1ec0a098ad4bbf9344d0713fa193ae1a80af55febcff2627b6a00c1"
+dependencies = [
+ "futures-core",
+ "getrandom",
+ "instant",
+ "pin-project-lite",
+ "rand",
+ "tokio",
+]
+
 [[package]]
 name = "backtrace"
 version = "0.3.74"
@@ -453,86 +508,19 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "72b3254f16251a8381aa12e40e3c4d2f0199f8c6508fbecb9d91f575e0fbb8c6"
 
 [[package]]
-name = "base64ct"
-version = "1.6.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8c3c1a368f70d6cf7302d78f8f7093da241fb8e8807c05cc9e51a125895a6d5b"
-
-[[package]]
-name = "bcrypt"
-version = "0.15.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e65938ed058ef47d92cf8b346cc76ef48984572ade631927e9937b5ffc7662c7"
-dependencies = [
- "base64 0.22.1",
- "blowfish",
- "getrandom",
- "subtle",
- "zeroize",
-]
-
-[[package]]
-name = "bech32"
-version = "0.9.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d86b93f97252c47b41663388e6d155714a9d0c398b99f1005cbc5f978b29f445"
-
-[[package]]
-name = "bip39"
-version = "2.1.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "33415e24172c1b7d6066f6d999545375ab8e1d95421d6784bdfff9496f292387"
-dependencies = [
- "bitcoin_hashes 0.13.0",
- "serde",
- "unicode-normalization",
-]
-
-[[package]]
-name = "bitcoin"
-version = "0.30.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1945a5048598e4189e239d3f809b19bdad4845c4b2ba400d304d2dcf26d2c462"
-dependencies = [
- "bech32",
- "bitcoin-private",
- "bitcoin_hashes 0.12.0",
- "hex_lit",
- "secp256k1 0.27.0",
- "serde",
-]
-
-[[package]]
-name = "bitcoin-internals"
-version = "0.2.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9425c3bf7089c983facbae04de54513cce73b41c7f9ff8c845b54e7bc64ebbfb"
-
-[[package]]
-name = "bitcoin-private"
-version = "0.1.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "73290177011694f38ec25e165d0387ab7ea749a4b81cd4c80dae5988229f7a57"
-
-[[package]]
-name = "bitcoin_hashes"
-version = "0.12.0"
+name = "bit-set"
+version = "0.5.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5d7066118b13d4b20b23645932dfb3a81ce7e29f95726c2036fa33cd7b092501"
+checksum = "0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1"
 dependencies = [
- "bitcoin-private",
- "serde",
+ "bit-vec",
 ]
 
 [[package]]
-name = "bitcoin_hashes"
-version = "0.13.0"
+name = "bit-vec"
+version = "0.6.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1930a4dabfebb8d7d9992db18ebe3ae2876f0a305fab206fd168df931ede293b"
-dependencies = [
- "bitcoin-internals",
- "hex-conservative",
-]
+checksum = "349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb"
 
 [[package]]
 name = "bitflags"
@@ -547,33 +535,20 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1be3f42a67d6d345ecd59f675f3f012d6974981560836e938c22b424b85ce1be"
 
 [[package]]
-name = "block-buffer"
-version = "0.10.4"
+name = "block"
+version = "0.1.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71"
-dependencies = [
- "generic-array",
-]
+checksum = "0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a"
 
 [[package]]
-name = "block-padding"
-version = "0.3.3"
+name = "block-buffer"
+version = "0.10.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a8894febbff9f758034a5b8e12d87918f56dfc64a8e1fe757d65e29041538d93"
+checksum = "3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71"
 dependencies = [
  "generic-array",
 ]
 
-[[package]]
-name = "blowfish"
-version = "0.9.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e412e2cd0f2b2d93e02543ceae7917b3c70331573df19ee046bcbc35e45e87d7"
-dependencies = [
- "byteorder",
- "cipher",
-]
-
 [[package]]
 name = "brotli"
 version = "6.0.0"
@@ -642,15 +617,6 @@ dependencies = [
  "bytes",
 ]
 
-[[package]]
-name = "cbc"
-version = "0.1.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "26b52a9543ae338f279b96b0b9fed9c8093744685043739079ce85cd58f289a6"
-dependencies = [
- "cipher",
-]
-
 [[package]]
 name = "cc"
 version = "1.2.8"
@@ -668,30 +634,6 @@ version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
 
-[[package]]
-name = "chacha20"
-version = "0.9.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c3613f74bd2eac03dad61bd53dbe620703d4371614fe0bc3b9f04dd36fe4e818"
-dependencies = [
- "cfg-if",
- "cipher",
- "cpufeatures",
-]
-
-[[package]]
-name = "chacha20poly1305"
-version = "0.10.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "10cd79432192d1c0f4e1a0fef9527696cc039165d729fb41b3f4f4f354c2dc35"
-dependencies = [
- "aead",
- "chacha20",
- "cipher",
- "poly1305",
- "zeroize",
-]
-
 [[package]]
 name = "chrono"
 version = "0.4.39"
@@ -708,16 +650,21 @@ dependencies = [
 ]
 
 [[package]]
-name = "cipher"
-version = "0.4.4"
+name = "codespan-reporting"
+version = "0.11.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "773f3b9af64447d2ce9850330c473515014aa235e6a783b02db81ff39e4a3dad"
+checksum = "3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e"
 dependencies = [
- "crypto-common",
- "inout",
- "zeroize",
+ "termcolor",
+ "unicode-width",
 ]
 
+[[package]]
+name = "com-rs"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bf43edc576402991846b093a7ca18a3477e0ef9c588cde84964b5d3e43016642"
+
 [[package]]
 name = "config"
 version = "0.13.4"
@@ -770,6 +717,17 @@ version = "0.8.7"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b"
 
+[[package]]
+name = "core-graphics-types"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "45390e6114f68f718cc7a830514a96f903cccd70d02a8f6d9f643ac4ba45afaf"
+dependencies = [
+ "bitflags 1.3.2",
+ "core-foundation",
+ "libc",
+]
+
 [[package]]
 name = "cpufeatures"
 version = "0.2.16"
@@ -810,21 +768,66 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3"
 dependencies = [
  "generic-array",
- "rand_core",
  "typenum",
 ]
 
 [[package]]
 name = "cudarc"
-version = "0.9.15"
+version = "0.10.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9395df0cab995685664e79cc35ad6302bf08fb9c5d82301875a183affe1278b1"
+
+[[package]]
+name = "d3d12"
+version = "0.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f1871a911a2b9a3f66a285896a719159985683bf9903aa2cf89e0c9f53e14552"
+checksum = "e16e44ab292b1dddfdaf7be62cfd8877df52f2f3fde5858d95bab606be259f20"
+dependencies = [
+ "bitflags 2.7.0",
+ "libloading 0.8.6",
+ "winapi",
+]
+
+[[package]]
+name = "darling"
+version = "0.14.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850"
+dependencies = [
+ "darling_core",
+ "darling_macro",
+]
+
+[[package]]
+name = "darling_core"
+version = "0.14.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0"
+dependencies = [
+ "fnv",
+ "ident_case",
+ "proc-macro2",
+ "quote",
+ "strsim",
+ "syn 1.0.109",
+]
+
+[[package]]
+name = "darling_macro"
+version = "0.14.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e"
+dependencies = [
+ "darling_core",
+ "quote",
+ "syn 1.0.109",
+]
 
 [[package]]
 name = "data-encoding"
-version = "2.7.0"
+version = "2.6.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0e60eed09d8c01d3cee5b7d30acb059b76614c918fa0f992e0dd6eeb10daad6f"
+checksum = "e8566979429cf69b49a5c740c60791108e86440e8be149bbea4fe54d2c32d6e2"
 
 [[package]]
 name = "deranged"
@@ -835,6 +838,37 @@ dependencies = [
  "powerfmt",
 ]
 
+[[package]]
+name = "derive_builder"
+version = "0.12.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8d67778784b508018359cbc8696edb3db78160bab2c2a28ba7f56ef6932997f8"
+dependencies = [
+ "derive_builder_macro",
+]
+
+[[package]]
+name = "derive_builder_core"
+version = "0.12.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c11bdc11a0c47bc7d37d582b5285da6849c96681023680b906673c5707af7b0f"
+dependencies = [
+ "darling",
+ "proc-macro2",
+ "quote",
+ "syn 1.0.109",
+]
+
+[[package]]
+name = "derive_builder_macro"
+version = "0.12.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ebcda35c7a396850a55ffeac740804b40ffec779b98fffbb1738f4033f0ee79e"
+dependencies = [
+ "derive_builder_core",
+ "syn 1.0.109",
+]
+
 [[package]]
 name = "derive_more"
 version = "0.99.18"
@@ -848,6 +882,12 @@ dependencies = [
  "syn 2.0.96",
 ]
 
+[[package]]
+name = "diff"
+version = "0.1.13"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "56254986775e3233ffa9c4d7d3faaf6d36a2c09d30b20687e9f88bc8bafc16c8"
+
 [[package]]
 name = "difflib"
 version = "0.4.0"
@@ -862,7 +902,6 @@ checksum = "9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292"
 dependencies = [
  "block-buffer",
  "crypto-common",
- "subtle",
 ]
 
 [[package]]
@@ -909,19 +948,6 @@ dependencies = [
  "cfg-if",
 ]
 
-[[package]]
-name = "env_logger"
-version = "0.10.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "4cd405aab171cb85d6735e5c8d9db038c17d3ca007a4d2c25f337935c3d90580"
-dependencies = [
- "humantime",
- "is-terminal",
- "log",
- "regex",
- "termcolor",
-]
-
 [[package]]
 name = "equivalent"
 version = "1.0.1"
@@ -948,12 +974,29 @@ dependencies = [
  "windows-sys 0.59.0",
 ]
 
+[[package]]
+name = "eventsource-stream"
+version = "0.2.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "74fef4569247a5f429d9156b9d0a2599914385dd189c539334c625d8099d90ab"
+dependencies = [
+ "futures-core",
+ "nom",
+ "pin-project-lite",
+]
+
 [[package]]
 name = "fastrand"
 version = "2.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be"
 
+[[package]]
+name = "fixedbitset"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80"
+
 [[package]]
 name = "flate2"
 version = "1.0.35"
@@ -985,7 +1028,28 @@ version = "0.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1"
 dependencies = [
- "foreign-types-shared",
+ "foreign-types-shared 0.1.1",
+]
+
+[[package]]
+name = "foreign-types"
+version = "0.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d737d9aa519fb7b749cbc3b962edcf310a8dd1f4b67c91c4f83975dbdd17d965"
+dependencies = [
+ "foreign-types-macros",
+ "foreign-types-shared 0.3.1",
+]
+
+[[package]]
+name = "foreign-types-macros"
+version = "0.2.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1a5c6c585bc94aaf2c7b51dd4c2ba22680844aba4c687be581871a6f518c5742"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.96",
 ]
 
 [[package]]
@@ -994,6 +1058,12 @@ version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b"
 
+[[package]]
+name = "foreign-types-shared"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "aa9a19cbb55df58761df49b23516a86d432839add4af60fc256da840f66ed35b"
+
 [[package]]
 name = "form_urlencoded"
 version = "1.2.1"
@@ -1080,6 +1150,12 @@ version = "0.3.31"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f90f7dce0722e95104fcb095585910c0977252f286e354b5e3bd38902cd99988"
 
+[[package]]
+name = "futures-timer"
+version = "3.0.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f288b0a4f20f9a56b5d1da57e2227c661b7b16168e2f72365f57b63326e29b24"
+
 [[package]]
 name = "futures-util"
 version = "0.3.31"
@@ -1115,10 +1191,8 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7"
 dependencies = [
  "cfg-if",
- "js-sys",
  "libc",
  "wasi",
- "wasm-bindgen",
 ]
 
 [[package]]
@@ -1133,6 +1207,70 @@ version = "0.24.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b5418c17512bdf42730f9032c74e1ae39afc408745ebb2acf72fbc4691c17945"
 
+[[package]]
+name = "glow"
+version = "0.12.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ca0fe580e4b60a8ab24a868bc08e2f03cbcb20d3d676601fa909386713333728"
+dependencies = [
+ "js-sys",
+ "slotmap",
+ "wasm-bindgen",
+ "web-sys",
+]
+
+[[package]]
+name = "gpu-alloc"
+version = "0.6.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fbcd2dba93594b227a1f57ee09b8b9da8892c34d55aa332e034a228d0fe6a171"
+dependencies = [
+ "bitflags 2.7.0",
+ "gpu-alloc-types",
+]
+
+[[package]]
+name = "gpu-alloc-types"
+version = "0.3.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "98ff03b468aa837d70984d55f5d3f846f6ec31fe34bbb97c4f85219caeee1ca4"
+dependencies = [
+ "bitflags 2.7.0",
+]
+
+[[package]]
+name = "gpu-allocator"
+version = "0.22.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ce95f9e2e11c2c6fadfce42b5af60005db06576f231f5c92550fdded43c423e8"
+dependencies = [
+ "backtrace",
+ "log",
+ "thiserror 1.0.69",
+ "winapi",
+ "windows",
+]
+
+[[package]]
+name = "gpu-descriptor"
+version = "0.2.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cc11df1ace8e7e564511f53af41f3e42ddc95b56fd07b3f4445d2a6048bc682c"
+dependencies = [
+ "bitflags 2.7.0",
+ "gpu-descriptor-types",
+ "hashbrown 0.14.5",
+]
+
+[[package]]
+name = "gpu-descriptor-types"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6bf0b36e6f090b7e1d8a4b49c0cb81c1f8376f72198c65dd3ad9ff3556b8b78c"
+dependencies = [
+ "bitflags 2.7.0",
+]
+
 [[package]]
 name = "h2"
 version = "0.3.26"
@@ -1144,8 +1282,8 @@ dependencies = [
  "futures-core",
  "futures-sink",
  "futures-util",
- "http",
- "indexmap",
+ "http 0.2.12",
+ "indexmap 2.7.0",
  "slab",
  "tokio",
  "tokio-util",
@@ -1163,48 +1301,57 @@ dependencies = [
 
 [[package]]
 name = "hashbrown"
-version = "0.15.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289"
-
-[[package]]
-name = "hermit-abi"
-version = "0.4.0"
+version = "0.14.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc"
+checksum = "e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1"
+dependencies = [
+ "ahash 0.8.11",
+ "allocator-api2",
+]
 
 [[package]]
-name = "hex"
-version = "0.4.3"
+name = "hashbrown"
+version = "0.15.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70"
+checksum = "bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289"
 
 [[package]]
-name = "hex-conservative"
-version = "0.1.2"
+name = "hassle-rs"
+version = "0.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "212ab92002354b4819390025006c897e8140934349e8635c9b077f47b4dcbd20"
+checksum = "1397650ee315e8891a0df210707f0fc61771b0cc518c3023896064c5407cb3b0"
+dependencies = [
+ "bitflags 1.3.2",
+ "com-rs",
+ "libc",
+ "libloading 0.7.4",
+ "thiserror 1.0.69",
+ "widestring",
+ "winapi",
+]
 
 [[package]]
-name = "hex_lit"
-version = "0.1.1"
+name = "hexf-parse"
+version = "0.2.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3011d1213f159867b13cfd6ac92d2cd5f1345762c63be3554e84092d85a50bbd"
+checksum = "dfa686283ad6dd069f105e5ab091b04c62850d3e4cf5d67debad1933f55023df"
 
 [[package]]
-name = "hmac"
-version = "0.12.1"
+name = "http"
+version = "0.2.12"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e"
+checksum = "601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1"
 dependencies = [
- "digest",
+ "bytes",
+ "fnv",
+ "itoa",
 ]
 
 [[package]]
 name = "http"
-version = "0.2.12"
+version = "1.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1"
+checksum = "f16ca2af56261c99fba8bac40a10251ce8188205a4c448fbb745a2e4daa76fea"
 dependencies = [
  "bytes",
  "fnv",
@@ -1218,7 +1365,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7ceab25649e9960c0311ea418d17bee82c0dcec1bd053b5f9a66e265a693bed2"
 dependencies = [
  "bytes",
- "http",
+ "http 0.2.12",
  "pin-project-lite",
 ]
 
@@ -1240,12 +1387,6 @@ version = "1.0.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "df3b46402a9d5adb4c86a0cf463f42e19994e3ee891101b1841f30a545cb49a9"
 
-[[package]]
-name = "humantime"
-version = "2.1.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4"
-
 [[package]]
 name = "hyper"
 version = "0.14.32"
@@ -1257,7 +1398,7 @@ dependencies = [
  "futures-core",
  "futures-util",
  "h2",
- "http",
+ "http 0.2.12",
  "http-body",
  "httparse",
  "httpdate",
@@ -1277,7 +1418,7 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ec3efd23720e2049821a693cbc7e65ea87c72f1c58ff2f9522ff332b1491e590"
 dependencies = [
  "futures-util",
- "http",
+ "http 0.2.12",
  "hyper",
  "rustls",
  "tokio",
@@ -1438,6 +1579,12 @@ dependencies = [
  "syn 2.0.96",
 ]
 
+[[package]]
+name = "ident_case"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39"
+
 [[package]]
 name = "idna"
 version = "1.0.3"
@@ -1461,22 +1608,22 @@ dependencies = [
 
 [[package]]
 name = "indexmap"
-version = "2.7.0"
+version = "1.9.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "62f822373a4fe84d4bb149bf54e584a7f4abec90e072ed49cda0edea5b95471f"
+checksum = "bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99"
 dependencies = [
- "equivalent",
- "hashbrown 0.15.2",
+ "autocfg",
+ "hashbrown 0.12.3",
 ]
 
 [[package]]
-name = "inout"
-version = "0.1.3"
+name = "indexmap"
+version = "2.7.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a0c10553d664a4d0bcff9f4215d0aac67a639cc68ef660840afe309b807bc9f5"
+checksum = "62f822373a4fe84d4bb149bf54e584a7f4abec90e072ed49cda0edea5b95471f"
 dependencies = [
- "block-padding",
- "generic-array",
+ "equivalent",
+ "hashbrown 0.15.2",
 ]
 
 [[package]]
@@ -1486,9 +1633,6 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "e0242819d153cba4b4b05a5a8f2a7e9bbf97b6055b2a002b395c96b5ff3c0222"
 dependencies = [
  "cfg-if",
- "js-sys",
- "wasm-bindgen",
- "web-sys",
 ]
 
 [[package]]
@@ -1497,17 +1641,6 @@ version = "2.10.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ddc24109865250148c2e0f3d25d4f0f479571723792d3802153c60922a4fb708"
 
-[[package]]
-name = "is-terminal"
-version = "0.4.15"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e19b23d53f35ce9f56aebc7d1bb4e6ac1e9c0db7ac85c8d1760c04379edced37"
-dependencies = [
- "hermit-abi",
- "libc",
- "windows-sys 0.59.0",
-]
-
 [[package]]
 name = "itertools"
 version = "0.10.5"
@@ -1554,18 +1687,14 @@ dependencies = [
 ]
 
 [[package]]
-name = "jsonwebtoken"
-version = "9.3.0"
+name = "khronos-egl"
+version = "4.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b9ae10193d25051e74945f1ea2d0b42e03cc3b890f7e4cc5faa44997d808193f"
+checksum = "8c2352bd1d0bceb871cb9d40f24360c8133c11d7486b68b5381c1dd1a32015e3"
 dependencies = [
- "base64 0.21.7",
- "js-sys",
- "pem",
- "ring",
- "serde",
- "serde_json",
- "simple_asn1",
+ "libc",
+ "libloading 0.7.4",
+ "pkg-config",
 ]
 
 [[package]]
@@ -1586,6 +1715,26 @@ version = "0.2.169"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a"
 
+[[package]]
+name = "libloading"
+version = "0.7.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b67380fd3b2fbe7527a606e18729d21c6f3951633d0500574c4dc22d2d638b9f"
+dependencies = [
+ "cfg-if",
+ "winapi",
+]
+
+[[package]]
+name = "libloading"
+version = "0.8.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "fc2f4eb4bc735547cfed7c0a4922cbd04a4655978c09b54f1f7b228750664c34"
+dependencies = [
+ "cfg-if",
+ "windows-targets 0.52.6",
+]
+
 [[package]]
 name = "linked-hash-map"
 version = "0.5.6"
@@ -1641,53 +1790,22 @@ dependencies = [
 ]
 
 [[package]]
-name = "logseq-spring-thing"
-version = "0.1.0"
+name = "malloc_buf"
+version = "0.0.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb"
 dependencies = [
- "actix",
- "actix-cors",
- "actix-files",
- "actix-web",
- "actix-web-actors",
- "anyhow",
- "async-trait",
- "base64 0.21.7",
- "bcrypt",
- "bytemuck",
- "byteorder",
- "chrono",
- "config",
- "cudarc",
- "dotenvy",
- "env_logger",
- "flate2",
- "futures",
- "glam",
- "hex",
- "jsonwebtoken",
- "lazy_static",
- "log",
- "mockall",
- "nostr",
- "rand",
- "regex",
- "reqwest",
- "secp256k1 0.28.2",
- "serde",
- "serde_json",
- "serde_yaml",
- "sha1",
- "simplelog",
- "thiserror 1.0.69",
- "tokio",
- "tokio-stream",
- "tokio-test",
- "tokio-tungstenite",
- "toml 0.8.19",
- "tungstenite",
- "url",
- "urlencoding",
- "uuid",
+ "libc",
+]
+
+[[package]]
+name = "matrixmultiply"
+version = "0.3.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9380b911e3e96d10c1f415da0876389aaf1b56759054eeb0de7df940c456ba1a"
+dependencies = [
+ "autocfg",
+ "rawpointer",
 ]
 
 [[package]]
@@ -1696,6 +1814,21 @@ version = "2.7.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3"
 
+[[package]]
+name = "metal"
+version = "0.26.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "623b5e6cefd76e58f774bd3cc0c6f5c7615c58c03a97815245a25c3c9bdee318"
+dependencies = [
+ "bitflags 2.7.0",
+ "block",
+ "core-graphics-types",
+ "foreign-types 0.5.0",
+ "log",
+ "objc",
+ "paste",
+]
+
 [[package]]
 name = "mime"
 version = "0.3.17"
@@ -1766,6 +1899,54 @@ dependencies = [
  "syn 1.0.109",
 ]
 
+[[package]]
+name = "naga"
+version = "0.13.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c1ceaaa4eedaece7e4ec08c55c640ba03dbb73fb812a6570a59bcf1930d0f70e"
+dependencies = [
+ "bit-set",
+ "bitflags 2.7.0",
+ "codespan-reporting",
+ "hexf-parse",
+ "indexmap 1.9.3",
+ "log",
+ "num-traits",
+ "petgraph",
+ "rustc-hash",
+ "spirv",
+ "termcolor",
+ "thiserror 1.0.69",
+ "unicode-xid",
+]
+
+[[package]]
+name = "nalgebra"
+version = "0.32.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7b5c17de023a86f59ed79891b2e5d5a94c705dbe904a5b5c9c952ea6221b03e4"
+dependencies = [
+ "approx",
+ "matrixmultiply",
+ "nalgebra-macros",
+ "num-complex",
+ "num-rational",
+ "num-traits",
+ "simba",
+ "typenum",
+]
+
+[[package]]
+name = "nalgebra-macros"
+version = "0.2.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "254a5372af8fc138e36684761d3c0cdb758a4410e938babcff1c860ce14ddbfc"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.96",
+]
+
 [[package]]
 name = "native-tls"
 version = "0.2.12"
@@ -1783,12 +1964,6 @@ dependencies = [
  "tempfile",
 ]
 
-[[package]]
-name = "negentropy"
-version = "0.3.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e664971378a3987224f7a0e10059782035e89899ae403718ee07de85bec42afe"
-
 [[package]]
 name = "nom"
 version = "7.1.3"
@@ -1806,42 +1981,11 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "61807f77802ff30975e01f4f071c8ba10c022052f98b3294119f3e615d13e5be"
 
 [[package]]
-name = "nostr"
-version = "0.29.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "25e4e34578e8cc2b4050c6224a0c422b23ba1e61f2602b4e320c221ac3cbbc2e"
-dependencies = [
- "aes",
- "base64 0.21.7",
- "bip39",
- "bitcoin",
- "cbc",
- "chacha20",
- "chacha20poly1305",
- "getrandom",
- "instant",
- "js-sys",
- "negentropy",
- "once_cell",
- "reqwest",
- "scrypt",
- "serde",
- "serde_json",
- "tracing",
- "unicode-normalization",
- "url",
- "wasm-bindgen",
- "wasm-bindgen-futures",
- "web-sys",
-]
-
-[[package]]
-name = "num-bigint"
+name = "num-complex"
 version = "0.4.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a5e44f723f1133c9deac646763579fdb3ac745e418f2a7af9cd0c431da1f20b9"
+checksum = "73f88a1307638156682bada9d7604135552957b7818057dcef22705b4d509495"
 dependencies = [
- "num-integer",
  "num-traits",
 ]
 
@@ -1860,6 +2004,16 @@ dependencies = [
  "num-traits",
 ]
 
+[[package]]
+name = "num-rational"
+version = "0.4.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f83d14da390562dca69fc84082e73e548e1ad308d24accdedd2720017cb37824"
+dependencies = [
+ "num-integer",
+ "num-traits",
+]
+
 [[package]]
 name = "num-traits"
 version = "0.2.19"
@@ -1878,6 +2032,25 @@ dependencies = [
  "libc",
 ]
 
+[[package]]
+name = "objc"
+version = "0.2.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1"
+dependencies = [
+ "malloc_buf",
+ "objc_exception",
+]
+
+[[package]]
+name = "objc_exception"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ad970fb455818ad6cba4c122ad012fae53ae8b4795f86378bce65e4f6bab2ca4"
+dependencies = [
+ "cc",
+]
+
 [[package]]
 name = "object"
 version = "0.36.7"
@@ -1893,12 +2066,6 @@ version = "1.20.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775"
 
-[[package]]
-name = "opaque-debug"
-version = "0.3.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "c08d65885ee38876c4f86fa503fb49d7b507c2b62552df7c70b2fce627e06381"
-
 [[package]]
 name = "openssl"
 version = "0.10.68"
@@ -1907,7 +2074,7 @@ checksum = "6174bc48f102d208783c2c84bf931bb75927a617866870de8a4ea85597f871f5"
 dependencies = [
  "bitflags 2.7.0",
  "cfg-if",
- "foreign-types",
+ "foreign-types 0.3.2",
  "libc",
  "once_cell",
  "openssl-macros",
@@ -1976,17 +2143,6 @@ dependencies = [
  "windows-targets 0.52.6",
 ]
 
-[[package]]
-name = "password-hash"
-version = "0.5.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "346f04948ba92c43e8469c1ee6736c7563d71012b17d40745260fe106aac2166"
-dependencies = [
- "base64ct",
- "rand_core",
- "subtle",
-]
-
 [[package]]
 name = "paste"
 version = "1.0.15"
@@ -1999,26 +2155,6 @@ version = "0.2.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "df94ce210e5bc13cb6651479fa48d14f601d9858cfe0467f43ae157023b938d3"
 
-[[package]]
-name = "pbkdf2"
-version = "0.12.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "f8ed6a7761f76e3b9f92dfb0a60a6a6477c61024b775147ff0973a02653abaf2"
-dependencies = [
- "digest",
- "hmac",
-]
-
-[[package]]
-name = "pem"
-version = "3.0.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8e459365e590736a54c3fa561947c84837534b8e9af6fc5bf781307e82658fae"
-dependencies = [
- "base64 0.22.1",
- "serde",
-]
-
 [[package]]
 name = "percent-encoding"
 version = "2.3.1"
@@ -2070,6 +2206,16 @@ dependencies = [
  "sha2",
 ]
 
+[[package]]
+name = "petgraph"
+version = "0.6.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b4c5cc86750666a3ed20bdaf5ca2a0344f9c67674cae0515bec2da16fbaa47db"
+dependencies = [
+ "fixedbitset",
+ "indexmap 2.7.0",
+]
+
 [[package]]
 name = "pin-project-lite"
 version = "0.2.16"
@@ -2089,15 +2235,10 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "953ec861398dccce10c670dfeaf3ec4911ca479e9c02154b3a215178c5f566f2"
 
 [[package]]
-name = "poly1305"
-version = "0.8.0"
+name = "pollster"
+version = "0.3.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8159bd90725d2df49889a078b54f4f79e87f1f8a8444194cdca81d38f5393abf"
-dependencies = [
- "cpufeatures",
- "opaque-debug",
- "universal-hash",
-]
+checksum = "22686f4785f02a4fcc856d3b3bb19bf6c8160d103f7a99cc258bddd0251dc7f2"
 
 [[package]]
 name = "powerfmt"
@@ -2144,6 +2285,16 @@ dependencies = [
  "termtree",
 ]
 
+[[package]]
+name = "pretty_assertions"
+version = "1.4.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "3ae130e2f271fbc2ac3a40fb1d07180839cdbbe443c7a27e1e3c13c5cac0116d"
+dependencies = [
+ "diff",
+ "yansi",
+]
+
 [[package]]
 name = "proc-macro2"
 version = "1.0.93"
@@ -2153,6 +2304,12 @@ dependencies = [
  "unicode-ident",
 ]
 
+[[package]]
+name = "profiling"
+version = "1.0.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "afbdc74edc00b6f6a218ca6a5364d6226a259d4b8ea1af4a0ea063f27e179f4d"
+
 [[package]]
 name = "quote"
 version = "1.0.38"
@@ -2192,6 +2349,24 @@ dependencies = [
  "getrandom",
 ]
 
+[[package]]
+name = "range-alloc"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9c8a99fddc9f0ba0a85884b8d14e3592853e787d581ca1816c91349b10e4eeab"
+
+[[package]]
+name = "raw-window-handle"
+version = "0.5.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f2ff9a1f06a88b01621b7ae906ef0211290d1c8a168a15542486a8f61c0833b9"
+
+[[package]]
+name = "rawpointer"
+version = "0.2.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "60a357793950651c4ed0f3f52338f53b2f809f32d83a07f72909fa13e4c6c1e3"
+
 [[package]]
 name = "redox_syscall"
 version = "0.5.8"
@@ -2236,6 +2411,12 @@ version = "0.8.5"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"
 
+[[package]]
+name = "renderdoc-sys"
+version = "1.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "19b30a45b0cd0bcca8037f3d0dc3421eaf95327a17cad11964fb8179b4fc4832"
+
 [[package]]
 name = "reqwest"
 version = "0.11.27"
@@ -2248,7 +2429,7 @@ dependencies = [
  "futures-core",
  "futures-util",
  "h2",
- "http",
+ "http 0.2.12",
  "http-body",
  "hyper",
  "hyper-rustls",
@@ -2257,11 +2438,13 @@ dependencies = [
  "js-sys",
  "log",
  "mime",
+ "mime_guess",
  "native-tls",
  "once_cell",
  "percent-encoding",
  "pin-project-lite",
  "rustls",
+ "rustls-native-certs",
  "rustls-pemfile",
  "serde",
  "serde_json",
@@ -2271,7 +2454,6 @@ dependencies = [
  "tokio",
  "tokio-native-tls",
  "tokio-rustls",
- "tokio-socks",
  "tokio-util",
  "tower-service",
  "url",
@@ -2279,10 +2461,25 @@ dependencies = [
  "wasm-bindgen-futures",
  "wasm-streams",
  "web-sys",
- "webpki-roots",
  "winreg",
 ]
 
+[[package]]
+name = "reqwest-eventsource"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8f03f570355882dd8d15acc3a313841e6e90eddbc76a93c748fd82cc13ba9f51"
+dependencies = [
+ "eventsource-stream",
+ "futures-core",
+ "futures-timer",
+ "mime",
+ "nom",
+ "pin-project-lite",
+ "reqwest",
+ "thiserror 1.0.69",
+]
+
 [[package]]
 name = "ring"
 version = "0.17.8"
@@ -2325,6 +2522,12 @@ version = "0.1.24"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f"
 
+[[package]]
+name = "rustc-hash"
+version = "1.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2"
+
 [[package]]
 name = "rustc_version"
 version = "0.4.1"
@@ -2359,6 +2562,18 @@ dependencies = [
  "sct",
 ]
 
+[[package]]
+name = "rustls-native-certs"
+version = "0.6.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a9aace74cb666635c918e9c12bc0d348266037aa8eb599b5cba565709a8dff00"
+dependencies = [
+ "openssl-probe",
+ "rustls-pemfile",
+ "schannel",
+ "security-framework",
+]
+
 [[package]]
 name = "rustls-pemfile"
 version = "1.0.4"
@@ -2385,12 +2600,12 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f"
 
 [[package]]
-name = "salsa20"
-version = "0.10.2"
+name = "safe_arch"
+version = "0.7.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "97a22f5af31f73a954c10289c93e8a50cc23d971e80ee446f1f6f7137a088213"
+checksum = "96b02de82ddbe1b636e6170c21be622223aea188ef2e139be0a5b219ec215323"
 dependencies = [
- "cipher",
+ "bytemuck",
 ]
 
 [[package]]
@@ -2408,18 +2623,6 @@ version = "1.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49"
 
-[[package]]
-name = "scrypt"
-version = "0.11.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0516a385866c09368f0b5bcd1caff3366aace790fcd46e2bb032697bb172fd1f"
-dependencies = [
- "password-hash",
- "pbkdf2",
- "salsa20",
- "sha2",
-]
-
 [[package]]
 name = "sct"
 version = "0.7.1"
@@ -2430,46 +2633,6 @@ dependencies = [
  "untrusted",
 ]
 
-[[package]]
-name = "secp256k1"
-version = "0.27.0"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "25996b82292a7a57ed3508f052cfff8640d38d32018784acd714758b43da9c8f"
-dependencies = [
- "bitcoin_hashes 0.12.0",
- "rand",
- "secp256k1-sys 0.8.1",
- "serde",
-]
-
-[[package]]
-name = "secp256k1"
-version = "0.28.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10"
-dependencies = [
- "rand",
- "secp256k1-sys 0.9.2",
-]
-
-[[package]]
-name = "secp256k1-sys"
-version = "0.8.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "70a129b9e9efbfb223753b9163c4ab3b13cff7fd9c7f010fbac25ab4099fa07e"
-dependencies = [
- "cc",
-]
-
-[[package]]
-name = "secp256k1-sys"
-version = "0.9.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb"
-dependencies = [
- "cc",
-]
-
 [[package]]
 name = "security-framework"
 version = "2.11.1"
@@ -2534,7 +2697,6 @@ version = "1.0.135"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "2b0d7ba2887406110130a978386c4e1befb98c674b4fba677954e4db976630d9"
 dependencies = [
- "indexmap",
  "itoa",
  "memchr",
  "ryu",
@@ -2568,7 +2730,7 @@ version = "0.9.34+deprecated"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "6a8b1a1a2ebf674015cc02edccce75287f1a0130d394307b36743c2f5d504b47"
 dependencies = [
- "indexmap",
+ "indexmap 2.7.0",
  "itoa",
  "ryu",
  "serde",
@@ -2613,15 +2775,16 @@ dependencies = [
 ]
 
 [[package]]
-name = "simple_asn1"
-version = "0.6.3"
+name = "simba"
+version = "0.8.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "297f631f50729c8c99b84667867963997ec0b50f32b2a7dbcab828ef0541e8bb"
+checksum = "061507c94fc6ab4ba1c9a0305018408e312e17c041eb63bef8aa726fa33aceae"
 dependencies = [
- "num-bigint",
+ "approx",
+ "num-complex",
  "num-traits",
- "thiserror 2.0.11",
- "time",
+ "paste",
+ "wide",
 ]
 
 [[package]]
@@ -2644,6 +2807,15 @@ dependencies = [
  "autocfg",
 ]
 
+[[package]]
+name = "slotmap"
+version = "1.0.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dbff4acf519f630b3a3ddcfaea6c06b42174d9a44bc70c620e9ed1649d58b82a"
+dependencies = [
+ "version_check",
+]
+
 [[package]]
 name = "smallvec"
 version = "1.13.2"
@@ -2666,6 +2838,16 @@ version = "0.9.8"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67"
 
+[[package]]
+name = "spirv"
+version = "0.2.0+1.5.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "246bfa38fe3db3f1dfc8ca5a2cdeb7348c78be2112740cc0ec8ef18b6d94f830"
+dependencies = [
+ "bitflags 1.3.2",
+ "num-traits",
+]
+
 [[package]]
 name = "stable_deref_trait"
 version = "1.2.0"
@@ -2673,10 +2855,16 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3"
 
 [[package]]
-name = "subtle"
-version = "2.6.1"
+name = "static_assertions"
+version = "1.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f"
+
+[[package]]
+name = "strsim"
+version = "0.10.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "13c2bddecc57b384dee18652358fb23172facb8a2c51ccc10d74c157bdea3292"
+checksum = "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623"
 
 [[package]]
 name = "sval"
@@ -2928,21 +3116,6 @@ dependencies = [
  "zerovec",
 ]
 
-[[package]]
-name = "tinyvec"
-version = "1.8.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "022db8904dfa342efe721985167e9fcd16c29b226db4397ed752a761cfce81e8"
-dependencies = [
- "tinyvec_macros",
-]
-
-[[package]]
-name = "tinyvec_macros"
-version = "0.1.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"
-
 [[package]]
 name = "tokio"
 version = "1.43.0"
@@ -2992,18 +3165,6 @@ dependencies = [
  "tokio",
 ]
 
-[[package]]
-name = "tokio-socks"
-version = "0.5.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0d4770b8024672c1101b3f6733eab95b18007dbe0847a8afe341fcf79e06043f"
-dependencies = [
- "either",
- "futures-util",
- "thiserror 1.0.69",
- "tokio",
-]
-
 [[package]]
 name = "tokio-stream"
 version = "0.1.17"
@@ -3030,9 +3191,9 @@ dependencies = [
 
 [[package]]
 name = "tokio-tungstenite"
-version = "0.20.1"
+version = "0.21.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "212d5dcb2a1ce06d81107c3d0ffa3121fe974b73f068c8282cb1c32328113b6c"
+checksum = "c83b561d025642014097b66e6c1bb422783339e0909e4429cde4749d1990bc38"
 dependencies = [
  "futures-util",
  "log",
@@ -3085,11 +3246,11 @@ dependencies = [
 
 [[package]]
 name = "toml_edit"
-version = "0.22.23"
+version = "0.22.22"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "02a8b472d1a3d7c18e2d61a489aee3453fd9031c33e4f55bd533f4a7adca1bee"
+checksum = "4ae48d6208a266e853d946088ed816055e556cc6028c5e8e2b84d9fa5dd7c7f5"
 dependencies = [
- "indexmap",
+ "indexmap 2.7.0",
  "serde",
  "serde_spanned",
  "toml_datetime",
@@ -3110,9 +3271,21 @@ checksum = "784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0"
 dependencies = [
  "log",
  "pin-project-lite",
+ "tracing-attributes",
  "tracing-core",
 ]
 
+[[package]]
+name = "tracing-attributes"
+version = "0.1.28"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn 2.0.96",
+]
+
 [[package]]
 name = "tracing-core"
 version = "0.1.33"
@@ -3130,14 +3303,14 @@ checksum = "e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b"
 
 [[package]]
 name = "tungstenite"
-version = "0.20.1"
+version = "0.21.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "9e3dac10fd62eaf6617d3a904ae222845979aec67c615d1c842b4002c7666fb9"
+checksum = "9ef1a641ea34f399a848dea702823bbecfb4c486f911735368f1f137cb8257e1"
 dependencies = [
  "byteorder",
  "bytes",
  "data-encoding",
- "http",
+ "http 1.2.0",
  "httparse",
  "log",
  "rand",
@@ -3178,23 +3351,16 @@ source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83"
 
 [[package]]
-name = "unicode-normalization"
-version = "0.1.22"
+name = "unicode-width"
+version = "0.1.14"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5c5713f0fc4b5db668a2ac63cdb7bb4469d8c9fed047b1d0292cc7b0ce2ba921"
-dependencies = [
- "tinyvec",
-]
+checksum = "7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af"
 
 [[package]]
-name = "universal-hash"
-version = "0.5.1"
+name = "unicode-xid"
+version = "0.2.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "fc1de2c688dc15305988b563c3854064043356019f97a4b46276fe734c4f07ea"
-dependencies = [
- "crypto-common",
- "subtle",
-]
+checksum = "ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853"
 
 [[package]]
 name = "unsafe-libyaml"
@@ -3217,7 +3383,6 @@ dependencies = [
  "form_urlencoded",
  "idna",
  "percent-encoding",
- "serde",
 ]
 
 [[package]]
@@ -3413,10 +3578,186 @@ dependencies = [
 ]
 
 [[package]]
-name = "webpki-roots"
-version = "0.25.4"
+name = "webxr"
+version = "0.1.0"
+dependencies = [
+ "actix",
+ "actix-cors",
+ "actix-files",
+ "actix-web",
+ "actix-web-actors",
+ "anyhow",
+ "async-openai",
+ "async-trait",
+ "backoff",
+ "base64 0.21.7",
+ "bytemuck",
+ "byteorder",
+ "chrono",
+ "config",
+ "cudarc",
+ "dotenvy",
+ "flate2",
+ "futures",
+ "glam",
+ "lazy_static",
+ "log",
+ "mockall",
+ "naga",
+ "nalgebra",
+ "pollster",
+ "pretty_assertions",
+ "rand",
+ "regex",
+ "reqwest",
+ "serde",
+ "serde_json",
+ "serde_yaml",
+ "sha1",
+ "simplelog",
+ "thiserror 1.0.69",
+ "tokio",
+ "tokio-test",
+ "tokio-tungstenite",
+ "toml 0.8.19",
+ "tungstenite",
+ "url",
+ "urlencoding",
+ "uuid",
+ "web-sys",
+ "wgpu",
+]
+
+[[package]]
+name = "wgpu"
+version = "0.17.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "752e44d3998ef35f71830dd1ad3da513e628e2e4d4aedb0ab580f850827a0b41"
+dependencies = [
+ "arrayvec",
+ "cfg-if",
+ "js-sys",
+ "log",
+ "naga",
+ "parking_lot",
+ "profiling",
+ "raw-window-handle",
+ "smallvec",
+ "static_assertions",
+ "wasm-bindgen",
+ "wasm-bindgen-futures",
+ "web-sys",
+ "wgpu-core",
+ "wgpu-hal",
+ "wgpu-types",
+]
+
+[[package]]
+name = "wgpu-core"
+version = "0.17.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0f8a44dd301a30ceeed3c27d8c0090433d3da04d7b2a4042738095a424d12ae7"
+dependencies = [
+ "arrayvec",
+ "bit-vec",
+ "bitflags 2.7.0",
+ "codespan-reporting",
+ "log",
+ "naga",
+ "parking_lot",
+ "profiling",
+ "raw-window-handle",
+ "rustc-hash",
+ "smallvec",
+ "thiserror 1.0.69",
+ "web-sys",
+ "wgpu-hal",
+ "wgpu-types",
+]
+
+[[package]]
+name = "wgpu-hal"
+version = "0.17.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9a80bf0e3c77399bb52850cb0830af9bad073d5cfcb9dd8253bef8125c42db17"
+dependencies = [
+ "android_system_properties",
+ "arrayvec",
+ "ash",
+ "bit-set",
+ "bitflags 2.7.0",
+ "block",
+ "core-graphics-types",
+ "d3d12",
+ "glow",
+ "gpu-alloc",
+ "gpu-allocator",
+ "gpu-descriptor",
+ "hassle-rs",
+ "js-sys",
+ "khronos-egl",
+ "libc",
+ "libloading 0.8.6",
+ "log",
+ "metal",
+ "naga",
+ "objc",
+ "parking_lot",
+ "profiling",
+ "range-alloc",
+ "raw-window-handle",
+ "renderdoc-sys",
+ "rustc-hash",
+ "smallvec",
+ "thiserror 1.0.69",
+ "wasm-bindgen",
+ "web-sys",
+ "wgpu-types",
+ "winapi",
+]
+
+[[package]]
+name = "wgpu-types"
+version = "0.17.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ee64d7398d0c2f9ca48922c902ef69c42d000c759f3db41e355f4a570b052b67"
+dependencies = [
+ "bitflags 2.7.0",
+ "js-sys",
+ "web-sys",
+]
+
+[[package]]
+name = "wide"
+version = "0.7.32"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "41b5576b9a81633f3e8df296ce0063042a73507636cbe956c61133dd7034ab22"
+dependencies = [
+ "bytemuck",
+ "safe_arch",
+]
+
+[[package]]
+name = "widestring"
+version = "1.1.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "7219d36b6eac893fa81e84ebe06485e7dcbb616177469b142df14f1f4deb1311"
+
+[[package]]
+name = "winapi"
+version = "0.3.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419"
+dependencies = [
+ "winapi-i686-pc-windows-gnu",
+ "winapi-x86_64-pc-windows-gnu",
+]
+
+[[package]]
+name = "winapi-i686-pc-windows-gnu"
+version = "0.4.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5f20c57d8d7db6d3b86154206ae5d8fba62dd39573114de97c2cb0578251f8e1"
+checksum = "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6"
 
 [[package]]
 name = "winapi-util"
@@ -3427,6 +3768,21 @@ dependencies = [
  "windows-sys 0.59.0",
 ]
 
+[[package]]
+name = "winapi-x86_64-pc-windows-gnu"
+version = "0.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f"
+
+[[package]]
+name = "windows"
+version = "0.44.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9e745dab35a0c4c77aa3ce42d595e13d2003d6902d6b08c9ef5fc326d08da12b"
+dependencies = [
+ "windows-targets 0.42.2",
+]
+
 [[package]]
 name = "windows-core"
 version = "0.52.0"
@@ -3463,6 +3819,21 @@ dependencies = [
  "windows-targets 0.52.6",
 ]
 
+[[package]]
+name = "windows-targets"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071"
+dependencies = [
+ "windows_aarch64_gnullvm 0.42.2",
+ "windows_aarch64_msvc 0.42.2",
+ "windows_i686_gnu 0.42.2",
+ "windows_i686_msvc 0.42.2",
+ "windows_x86_64_gnu 0.42.2",
+ "windows_x86_64_gnullvm 0.42.2",
+ "windows_x86_64_msvc 0.42.2",
+]
+
 [[package]]
 name = "windows-targets"
 version = "0.48.5"
@@ -3494,6 +3865,12 @@ dependencies = [
  "windows_x86_64_msvc 0.52.6",
 ]
 
+[[package]]
+name = "windows_aarch64_gnullvm"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8"
+
 [[package]]
 name = "windows_aarch64_gnullvm"
 version = "0.48.5"
@@ -3506,6 +3883,12 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3"
 
+[[package]]
+name = "windows_aarch64_msvc"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43"
+
 [[package]]
 name = "windows_aarch64_msvc"
 version = "0.48.5"
@@ -3518,6 +3901,12 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469"
 
+[[package]]
+name = "windows_i686_gnu"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f"
+
 [[package]]
 name = "windows_i686_gnu"
 version = "0.48.5"
@@ -3536,6 +3925,12 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66"
 
+[[package]]
+name = "windows_i686_msvc"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060"
+
 [[package]]
 name = "windows_i686_msvc"
 version = "0.48.5"
@@ -3548,6 +3943,12 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66"
 
+[[package]]
+name = "windows_x86_64_gnu"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36"
+
 [[package]]
 name = "windows_x86_64_gnu"
 version = "0.48.5"
@@ -3560,6 +3961,12 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78"
 
+[[package]]
+name = "windows_x86_64_gnullvm"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3"
+
 [[package]]
 name = "windows_x86_64_gnullvm"
 version = "0.48.5"
@@ -3572,6 +3979,12 @@ version = "0.52.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d"
 
+[[package]]
+name = "windows_x86_64_msvc"
+version = "0.42.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0"
+
 [[package]]
 name = "windows_x86_64_msvc"
 version = "0.48.5"
@@ -3586,9 +3999,9 @@ checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"
 
 [[package]]
 name = "winnow"
-version = "0.7.0"
+version = "0.6.24"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7e49d2d35d3fad69b39b94139037ecfb4f359f08958b9c11e7315ce770462419"
+checksum = "c8d71a593cc5c42ad7876e2c1fda56f314f3754c084128833e64f1345ff8a03a"
 dependencies = [
  "memchr",
 ]
@@ -3624,6 +4037,12 @@ dependencies = [
  "linked-hash-map",
 ]
 
+[[package]]
+name = "yansi"
+version = "1.0.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cfe53a6657fd280eaa890a3bc59152892ffa3e30101319d168b781ed6529b049"
+
 [[package]]
 name = "yoke"
 version = "0.7.5"
@@ -3690,12 +4109,6 @@ dependencies = [
  "synstructure",
 ]
 
-[[package]]
-name = "zeroize"
-version = "1.8.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ced3678a2879b30306d323f4542626697a464a97c0a07c9aebf7ebca65cd4dde"
-
 [[package]]
 name = "zerovec"
 version = "0.10.4"
diff --git a/Cargo.toml b/Cargo.toml
index 37825417..ed3ac5df 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,52 +1,106 @@
 [package]
-name = "logseq-spring-thing"
+name = "webxr"
 version = "0.1.0"
 edition = "2021"
+description = "A WebXR graph visualization server with GPU-accelerated physics"
+authors = ["Your Name <your.email@example.com>"]
 
 [dependencies]
-actix = "0.13"
-actix-web = "4.4"
-actix-files = "0.6"
-actix-cors = "0.6"
-actix-web-actors = "4.2"
+# Web framework and WebSocket
+actix-web = { version = "=4.5.1", features = ["compress-gzip"] }
+actix-cors = "=0.7.0"
+actix-files = "=0.6.5"
+actix = "=0.13.1"
+actix-web-actors = "=4.3.0"
+tungstenite = "0.21"
+tokio-tungstenite = { version = "0.21" }
+
+# Async runtime
 tokio = { version = "1.32", features = ["full"] }
-tokio-stream = "0.1"
-tokio-tungstenite = "0.20"
+futures = "0.3"
+async-trait = "0.1"
+
+# Serialization
 serde = { version = "1.0", features = ["derive"] }
 serde_json = "1.0"
 serde_yaml = "0.9"
-config = "0.13"
-env_logger = "0.10"
+
+# Configuration
+config = { version = "0.13", features = ["toml"] }
+dotenvy = "0.15"
+toml = "0.8"
+
+# Logging
 log = "0.4"
+simplelog = "0.12"
+
+# Error handling
 thiserror = "1.0"
 anyhow = "1.0"
-futures = "0.3"
-async-trait = "0.1"
+
+# GPU/Compute
+wgpu = { version = "0.17", features = ["spirv", "webgl"] }
+bytemuck = { version = "1.14", features = ["derive"] }
+pollster = "0.3"
+naga = { version = "0.13", features = ["wgsl-in", "spv-out", "wgsl-out"] }
+cudarc = "0.10"
+
+# HTTP client and API
+reqwest = { version = "0.11", features = ["json", "stream"] }
+async-openai = "0.14"
+backoff = { version = "0.4", features = ["tokio"] }
+
+# Utilities
 uuid = { version = "1.4", features = ["v4", "serde"] }
 chrono = { version = "0.4", features = ["serde"] }
-jsonwebtoken = "9.1"
-bcrypt = "0.15"
-reqwest = { version = "0.11", features = ["json", "stream"] }
-nostr = "0.29"
-hex = "0.4"
-secp256k1 = { version = "0.28", features = ["rand-std"] }
+base64 = "0.21"
 rand = "0.8"
-sha1 = "0.10"
+regex = "1.10"
 lazy_static = "1.4"
-regex = "1.9"
-cudarc = "0.9"
-bytemuck = { version = "1.13", features = ["derive"] }
+sha1 = "0.10"
+url = "2.5"
 flate2 = "1.0"
-glam = "0.24"
-simplelog = "0.12"
-tungstenite = "0.20"
-urlencoding = "2.1"
-dotenvy = "0.15"
-toml = "0.8"
-base64 = "0.21"
-url = "2.4"
 byteorder = "1.5"
+urlencoding = "2.1"
+
+# Math/Linear Algebra (needed for GPU compute)
+nalgebra = "0.32"
+
+# WebGL (minimal features needed for GPU compute visualization)
+web-sys = { version = "0.3", features = [
+    "WebGl2RenderingContext",
+    "WebGlBuffer",
+    "WebGlProgram",
+    "WebGlShader",
+    "WebGlUniformLocation",
+    "Window"
+]}
+
+# Added from the code block
+glam = "0.24"
 
 [dev-dependencies]
-mockall = "0.11"
 tokio-test = "0.4"
+mockall = "0.11"
+pretty_assertions = "1.4"
+
+[features]
+default = ["gpu"]
+gpu = []
+
+[profile.release]
+opt-level = 3
+lto = true
+codegen-units = 1
+panic = "abort"
+strip = true
+
+[profile.dev]
+opt-level = 1
+
+[package.metadata.rust-version]
+min = "1.70.0"
+
+[package.metadata.docs.rs]
+all-features = true
+rustdoc-args = ["--cfg", "docsrs"]
diff --git a/README.md b/README.md
index b4c7e348..21e58373 100755
--- a/README.md
+++ b/README.md
@@ -13,16 +13,6 @@ This project visualizes a Logseq knowledge graph in 3D using WebXR, enhancing it
 
 ## Key Features
 
-- **Nostr Authentication System:**
-  - **Public Key Authentication:** Secure login using Nostr protocol and browser extensions (Alby/nos2x)
-  - **Dual User Modes:**
-    - Normal Mode: User-managed API keys with secure storage
-    - Power User Mode: Direct access to environment-provided API keys
-  - **Persistent Sessions:** Long-lived authentication with secure token management
-  - **Secure Event Verification:** Cryptographic validation of Nostr events
-  - **Mode-Specific Access Control:** Protected routes based on user mode
-  - **Automatic Session Management:** Cleanup of expired sessions and tokens
-
 - **WebXR 3D Visualization:** Immersive exploration of the knowledge graph in AR/VR environments with support for:
   - **Node Interaction and Manipulation:** Click, drag, and reposition nodes within the 3D space.
   - **Dynamic Force-Directed Layout:** Real-time recalculation of graph layout based on interactions and data updates.
@@ -127,7 +117,6 @@ graph TB
         DataManager[Graph Data Manager]
         LayoutEngine[Layout Engine]
         SpaceMouse[SpaceMouse Controller]
-        NostrAuth[Nostr Auth Component]
     end
 
     subgraph Backend
@@ -138,14 +127,12 @@ graph TB
         PerplexityH[Perplexity Handler]
         RagFlowH[RagFlow Handler]
         VisualizationH[Visualization Handler]
-        NostrAuthH[Nostr Auth Handler]
         FileS[File Service]
         GraphS[Graph Service]
         GPUS[GPU Compute Service]
         PerplexityS[Perplexity Service]
         RagFlowS[RagFlow Service]
         SpeechS[Speech Service]
-        NostrS[Nostr Service]
         WSManager[WebSocket Manager]
         GPUCompute[GPU Compute]
         Compression[Compression Utils]
@@ -163,7 +150,6 @@ graph TB
         Perplexity[Perplexity AI]
         RagFlow[RagFlow API]
         OpenAI[OpenAI API]
-        NostrExt[Nostr Extension]
     end
 
     UI --> ChatUI
@@ -193,12 +179,6 @@ graph TB
     RagFlowS --> RagFlow
     SpeechS --> OpenAI
 
-    %% Nostr authentication connections
-    NostrAuth --> NostrExt
-    NostrAuth --> WSService
-    NostrAuthH --> NostrS
-    NostrS --> WSManager
-
     style Frontend fill:#f9f,stroke:#333,stroke-width:2px
     style Backend fill:#bbf,stroke:#333,stroke-width:2px
     style External fill:#bfb,stroke:#333,stroke-width:2px
@@ -339,30 +319,7 @@ class SpeechWs {
     +handle(msg: Message, ctx: Context)
 }
 
-class NostrService {
-    +users: Map<String, NostrUser>
-    +keys: Keys
-    +verify_auth_event(event: AuthEvent): Result<NostrUser, NostrError>
-    +validate_session(pubkey: String, token: String): bool
-    +update_user_mode(pubkey: String, mode: UserMode): Result<NostrUser, NostrError>
-    +refresh_session(pubkey: String): Result<String, NostrError>
-    +cleanup_sessions(max_age_hours: i64): void
-}
-
-class NostrAuthComponent {
-    +nostrService: NostrService
-    +isLoading: boolean
-    +error: string | null
-    +authResponse: NostrAuthResponse | null
-    +handleLogin(): Promise<void>
-    +handleLogout(): Promise<void>
-    +handleModeSwitch(): Promise<void>
-    +initializeNostr(): Promise<void>
-}
-
 App --> WebsocketService
-App --> NostrService
-NostrAuthComponent --> NostrService
 App --> GraphDataManager
 App --> WebXRVisualization
 App --> ChatManager
diff --git a/architecture.md b/architecture.md
deleted file mode 100644
index cda15435..00000000
--- a/architecture.md
+++ /dev/null
@@ -1,118 +0,0 @@
-# Nostr Authentication Architecture
-
-## Backend (Rust)
-
-### 1. Nostr Authentication Service
-```rust
-// src/services/nostr_service.rs
-pub struct NostrService {
-    // Handles Nostr-specific operations
-    - Verify signed events
-    - Generate and validate auth tokens
-    - Manage user sessions
-}
-```
-
-### 2. User Management
-```rust
-// src/models/user.rs
-pub struct User {
-    pub pubkey: String,     // Nostr public key
-    pub npub: String,      // Bech32 encoded public key
-    pub mode: UserMode,    // Normal/Power user mode
-    pub api_keys: ApiKeys, // User's API keys
-}
-```
-
-### 3. Protected Settings Enhancement
-```rust
-// src/models/protected_settings.rs
-pub struct ProtectedSettings {
-    pub users: HashMap<String, User>, // Keyed by pubkey
-    pub api_keys: ApiKeys,           // Global/default API keys
-}
-```
-
-### 4. Authentication Flow
-1. Client sends signed Nostr event
-2. Server verifies signature
-3. Server generates JWT with pubkey claim
-4. Client stores JWT for subsequent requests
-
-## Frontend (TypeScript)
-
-### 1. Nostr Integration
-```typescript
-// client/core/nostr.ts
-class NostrManager {
-    // Handle browser extension integration
-    - Connect to extension
-    - Request signatures
-    - Manage public key
-}
-```
-
-### 2. Auth UI Components
-```typescript
-// client/components/auth/NostrLogin.tsx
-- Handle extension detection
-- Manage login flow
-- Display connection status
-```
-
-### 3. API Key Management
-```typescript
-// client/components/settings/ApiKeyManager.tsx
-- Display current keys
-- Handle key updates
-- Show validation status
-```
-
-## Security Considerations
-
-1. Server-side:
-- Never store private keys
-- Validate all signatures
-- Rate limit auth attempts
-- Secure API key storage
-
-2. Client-side:
-- Use secure storage for tokens
-- Clear sensitive data on logout
-- Handle extension errors
-
-## Implementation Steps
-
-1. Backend:
-- Add Nostr crate dependencies
-- Implement NostrService
-- Update auth middleware
-- Enhance protected settings
-
-2. Frontend:
-- Add Nostr-browser extension types
-- Create NostrManager
-- Update auth components
-- Enhance settings UI
-
-3. API:
-- Add Nostr auth endpoints
-- Update existing auth routes
-- Add user management endpoints
-
-## Benefits
-
-1. Security:
-- Cryptographic authentication
-- No password storage
-- Decentralized identity
-
-2. User Experience:
-- Single-click login
-- Consistent identity
-- Cross-site compatibility
-
-3. Management:
-- Clear user ownership
-- Simplified key management
-- Flexible permission model
\ No newline at end of file
diff --git a/client/components/settings/ModeToggle.tsx b/client/components/settings/ModeToggle.tsx
deleted file mode 100644
index 58527a41..00000000
--- a/client/components/settings/ModeToggle.tsx
+++ /dev/null
@@ -1,243 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import { UserMode } from '../../types/settings';
-import { settingsManager } from '../../state/settings';
-import { createLogger } from '../../core/logger';
-
-const logger = createLogger('ModeToggle');
-
-interface ModeToggleProps {
-    onModeChange: (mode: UserMode) => void;
-}
-
-export const ModeToggle: React.FC<ModeToggleProps> = ({ onModeChange }) => {
-    const [mode, setMode] = useState<UserMode>('normal');
-    const [password, setPassword] = useState('');
-    const [showAuth, setShowAuth] = useState(false);
-    const [error, setError] = useState<string | null>(null);
-
-    useEffect(() => {
-        // Check for existing token on mount
-        const clientId = localStorage.getItem('clientId');
-        const token = localStorage.getItem('authToken');
-        const savedMode = localStorage.getItem('userMode') as UserMode;
-
-        if (clientId && token) {
-            validateToken(clientId, token).then(valid => {
-                if (valid) {
-                    setMode(savedMode || 'normal');
-                    onModeChange(savedMode || 'normal');
-                } else {
-                    // Clear invalid tokens
-                    localStorage.removeItem('clientId');
-                    localStorage.removeItem('authToken');
-                    localStorage.removeItem('userMode');
-                }
-            });
-        }
-    }, []);
-
-    const validateToken = async (clientId: string, token: string) => {
-        try {
-            const response = await fetch('/api/auth/validate', {
-                method: 'POST',
-                headers: {
-                    'Content-Type': 'application/json',
-                },
-                body: JSON.stringify({ clientId, token }),
-            });
-            const data = await response.json();
-            return data.valid;
-        } catch (error) {
-            logger.error('Token validation failed:', error);
-            return false;
-        }
-    };
-
-    const handleModeSwitch = async () => {
-        if (mode === 'power') {
-            // Switching back to normal mode doesn't require authentication
-            await switchMode('normal');
-        } else {
-            // Show authentication dialog for power mode
-            setShowAuth(true);
-        }
-    };
-
-    const handleAuth = async (e: React.FormEvent) => {
-        e.preventDefault();
-        try {
-            const response = await fetch('/api/auth/login', {
-                method: 'POST',
-                headers: {
-                    'Content-Type': 'application/json',
-                },
-                body: JSON.stringify({
-                    password,
-                    mode: 'power',
-                }),
-            });
-
-            if (response.ok) {
-                const data = await response.json();
-                localStorage.setItem('clientId', data.clientId);
-                localStorage.setItem('authToken', data.token);
-                localStorage.setItem('userMode', data.mode);
-                
-                setMode('power');
-                onModeChange('power');
-                setShowAuth(false);
-                setError(null);
-            } else {
-                const error = await response.json();
-                setError(error.error || 'Authentication failed');
-            }
-        } catch (error) {
-            logger.error('Authentication failed:', error);
-            setError('Authentication failed. Please try again.');
-        }
-    };
-
-    const switchMode = async (newMode: UserMode) => {
-        const clientId = localStorage.getItem('clientId');
-        const token = localStorage.getItem('authToken');
-
-        if (!clientId || !token) {
-            setError('No valid session found');
-            return;
-        }
-
-        try {
-            const response = await fetch('/api/auth/mode', {
-                method: 'POST',
-                headers: {
-                    'Content-Type': 'application/json',
-                },
-                body: JSON.stringify({
-                    clientId,
-                    token,
-                    mode: newMode,
-                }),
-            });
-
-            if (response.ok) {
-                const data = await response.json();
-                localStorage.setItem('clientId', data.clientId);
-                localStorage.setItem('authToken', data.token);
-                localStorage.setItem('userMode', data.mode);
-                
-                setMode(newMode);
-                onModeChange(newMode);
-                setError(null);
-            } else {
-                const error = await response.json();
-                setError(error.error || 'Mode switch failed');
-            }
-        } catch (error) {
-            logger.error('Mode switch failed:', error);
-            setError('Failed to switch mode. Please try again.');
-        }
-    };
-
-    return (
-        <div className="mode-toggle">
-            <div className="mode-status">
-                Current Mode: {mode === 'power' ? 'Power User' : 'Normal User'}
-            </div>
-            
-            <button 
-                onClick={handleModeSwitch}
-                className={`mode-switch-button ${mode === 'power' ? 'power' : 'normal'}`}
-            >
-                Switch to {mode === 'power' ? 'Normal' : 'Power'} Mode
-            </button>
-
-            {showAuth && (
-                <div className="auth-dialog">
-                    <form onSubmit={handleAuth}>
-                        <input
-                            type="password"
-                            value={password}
-                            onChange={(e) => setPassword(e.target.value)}
-                            placeholder="Enter admin password"
-                            required
-                        />
-                        <div className="auth-buttons">
-                            <button type="submit">Authenticate</button>
-                            <button type="button" onClick={() => setShowAuth(false)}>
-                                Cancel
-                            </button>
-                        </div>
-                    </form>
-                </div>
-            )}
-
-            {error && <div className="error-message">{error}</div>}
-
-            <style jsx>{`
-                .mode-toggle {
-                    padding: 1rem;
-                    border-radius: 8px;
-                    background: var(--background-secondary);
-                    margin-bottom: 1rem;
-                }
-
-                .mode-status {
-                    margin-bottom: 0.5rem;
-                    font-weight: bold;
-                }
-
-                .mode-switch-button {
-                    padding: 0.5rem 1rem;
-                    border-radius: 4px;
-                    border: none;
-                    cursor: pointer;
-                    transition: all 0.2s;
-                }
-
-                .mode-switch-button.normal {
-                    background: var(--primary-color);
-                    color: white;
-                }
-
-                .mode-switch-button.power {
-                    background: var(--warning-color);
-                    color: white;
-                }
-
-                .auth-dialog {
-                    margin-top: 1rem;
-                    padding: 1rem;
-                    border-radius: 4px;
-                    background: var(--background-tertiary);
-                }
-
-                .auth-dialog input {
-                    width: 100%;
-                    padding: 0.5rem;
-                    margin-bottom: 0.5rem;
-                    border-radius: 4px;
-                    border: 1px solid var(--border-color);
-                }
-
-                .auth-buttons {
-                    display: flex;
-                    gap: 0.5rem;
-                }
-
-                .auth-buttons button {
-                    flex: 1;
-                    padding: 0.5rem;
-                    border-radius: 4px;
-                    border: none;
-                    cursor: pointer;
-                }
-
-                .error-message {
-                    margin-top: 0.5rem;
-                    color: var(--error-color);
-                    font-size: 0.9rem;
-                }
-            `}</style>
-        </div>
-    );
-};
\ No newline at end of file
diff --git a/client/components/settings/NostrAuthComponent.tsx b/client/components/settings/NostrAuthComponent.tsx
deleted file mode 100644
index 2a0de7dc..00000000
--- a/client/components/settings/NostrAuthComponent.tsx
+++ /dev/null
@@ -1,194 +0,0 @@
-import React, { useEffect, useState } from 'react';
-import { nostrService, NostrAuthResponse } from '../../core/nostr';
-import { createLogger } from '../../core/logger';
-import { UserMode } from '../../types/nostr';
-
-const logger = createLogger('NostrAuthComponent');
-
-const styles = {
-    container: {
-        padding: '1rem',
-        borderRadius: '8px',
-        background: 'var(--background-secondary)',
-        marginBottom: '1rem',
-    },
-    statusSection: {
-        marginBottom: '1rem',
-    },
-    buttonContainer: {
-        display: 'flex',
-        gap: '1rem',
-        marginBottom: '1rem',
-    },
-    button: {
-        padding: '0.5rem 1rem',
-        borderRadius: '4px',
-        border: 'none',
-        cursor: 'pointer',
-        background: 'var(--primary-color)',
-        color: 'white',
-        transition: 'opacity 0.2s',
-    },
-    warningButton: {
-        background: 'var(--warning-color)',
-    },
-    disabledButton: {
-        opacity: 0.5,
-        cursor: 'not-allowed',
-    },
-    errorMessage: {
-        color: 'var(--error-color)',
-        marginTop: '0.5rem',
-        fontSize: '0.9rem',
-    },
-} as const;
-
-interface NostrAuthComponentProps {
-    onModeChange: (mode: UserMode) => void;
-}
-
-export const NostrAuthComponent: React.FC<NostrAuthComponentProps> = ({ onModeChange }) => {
-    const [isLoading, setIsLoading] = useState(false);
-    const [error, setError] = useState<string | null>(null);
-    const [authResponse, setAuthResponse] = useState<NostrAuthResponse | null>(null);
-
-    useEffect(() => {
-        initializeNostr();
-    }, []);
-
-    const initializeNostr = async () => {
-        try {
-            await nostrService.init();
-            if (nostrService.isLoggedIn()) {
-                // TODO: Fetch current mode from backend
-                const mode = nostrService.getCurrentMode();
-                onModeChange(mode);
-            }
-        } catch (error) {
-            logger.error('Failed to initialize Nostr:', error);
-            setError('Failed to initialize Nostr connection');
-        }
-    };
-
-    const handleLogin = async () => {
-        setIsLoading(true);
-        setError(null);
-        try {
-            const response = await nostrService.login();
-            setAuthResponse(response);
-            onModeChange(response.user.mode);
-        } catch (error) {
-            logger.error('Login failed:', error);
-            setError(error instanceof Error ? error.message : 'Login failed');
-        } finally {
-            setIsLoading(false);
-        }
-    };
-
-    const handleLogout = async () => {
-        setIsLoading(true);
-        try {
-            await nostrService.logout();
-            setAuthResponse(null);
-            onModeChange('normal');
-        } catch (error) {
-            logger.error('Logout failed:', error);
-            setError(error instanceof Error ? error.message : 'Logout failed');
-        } finally {
-            setIsLoading(false);
-        }
-    };
-
-    const handleModeSwitch = async () => {
-        if (!authResponse) return;
-
-        const newMode = authResponse.user.mode === 'normal' ? 'power' : 'normal';
-        setIsLoading(true);
-        setError(null);
-
-        try {
-            const response = await fetch('/api/auth/nostr/mode', {
-                method: 'POST',
-                headers: {
-                    'Content-Type': 'application/json',
-                    ...nostrService.getAuthHeaders(),
-                },
-                body: JSON.stringify({
-                    mode: newMode,
-                }),
-            });
-
-            if (!response.ok) {
-                throw new Error('Failed to switch mode');
-            }
-
-            const updatedAuth = await response.json();
-            setAuthResponse(updatedAuth);
-            onModeChange(updatedAuth.user.mode);
-        } catch (error) {
-            logger.error('Mode switch failed:', error);
-            setError(error instanceof Error ? error.message : 'Failed to switch mode');
-        } finally {
-            setIsLoading(false);
-        }
-    };
-
-    const npub = nostrService.getNpub();
-    const currentMode = nostrService.getCurrentMode();
-
-    return (
-        <div style={styles.container}>
-            <div style={styles.statusSection}>
-                {npub ? (
-                    <>
-                        <div>Logged in as: {npub}</div>
-                        <div>Mode: {currentMode === 'power' ? 'Power User' : 'Normal User'}</div>
-                    </>
-                ) : (
-                    <div>Not logged in</div>
-                )}
-            </div>
-
-            <div style={styles.buttonContainer}>
-                {!npub ? (
-                    <button
-                        onClick={handleLogin}
-                        disabled={isLoading}
-                        style={{
-                            ...styles.button,
-                            ...(isLoading ? styles.disabledButton : {}),
-                        }}
-                    >
-                        {isLoading ? 'Connecting...' : 'Login with Nostr'}
-                    </button>
-                ) : (
-                    <>
-                        <button
-                            onClick={handleModeSwitch}
-                            disabled={isLoading}
-                            style={{
-                                ...styles.button,
-                                ...(isLoading ? styles.disabledButton : {}),
-                            }}
-                        >
-                            Switch to {currentMode === 'power' ? 'Normal' : 'Power'} Mode
-                        </button>
-                        <button
-                            onClick={handleLogout}
-                            disabled={isLoading}
-                            style={{
-                                ...styles.button,
-                                ...styles.warningButton,
-                                ...(isLoading ? styles.disabledButton : {}),
-                            }}
-                        >
-                            Logout
-                        </button>
-                    </>
-                )}
-            </div>
-
-            {error && <div style={styles.errorMessage}>{error}</div>}
-        </div>
-    );
-};
\ No newline at end of file
diff --git a/client/core/nostr.ts b/client/core/nostr.ts
deleted file mode 100644
index 5a717750..00000000
--- a/client/core/nostr.ts
+++ /dev/null
@@ -1,194 +0,0 @@
-import { nip19, UnsignedEvent } from 'nostr-tools';
-import { createLogger } from './logger';
-import { NostrAuthResponse, UserMode } from '../types/nostr';
-
-const logger = createLogger('NostrService');
-
-export type { NostrAuthResponse };
-
-export class NostrService {
-    private pubkey: string | null = null;
-    private token: string | null = null;
-    private mode: UserMode = 'normal';
-
-    async init(): Promise<void> {
-        try {
-            // Check for existing session
-            const storedPubkey = localStorage.getItem('nostr_pubkey');
-            const storedToken = localStorage.getItem('nostr_token');
-            
-            if (storedPubkey && storedToken) {
-                const isValid = await this.validateSession(storedPubkey, storedToken);
-                if (isValid) {
-                    this.pubkey = storedPubkey;
-                    this.token = storedToken;
-                    logger.info('Restored existing Nostr session');
-                } else {
-                    this.clearSession();
-                }
-            }
-        } catch (error) {
-            logger.error('Failed to initialize Nostr:', error);
-            throw error;
-        }
-    }
-
-    async login(): Promise<NostrAuthResponse> {
-        try {
-            // Check if we have a browser extension (e.g., Alby, nos2x)
-            if (typeof window.nostr === 'undefined') {
-                throw new Error('No Nostr extension found. Please install Alby or nos2x.');
-            }
-
-            // Request public key
-            const pubkey = await window.nostr.getPublicKey();
-            
-            // Create authentication event
-            const event: UnsignedEvent = {
-                kind: 27235,
-                pubkey,
-                created_at: Math.floor(Date.now() / 1000),
-                tags: [],
-                content: 'Login request',
-            };
-
-            // Sign the event using the extension
-            const signedEvent = await window.nostr.signEvent(event);
-
-            // Send to our backend
-            const response = await fetch('/api/auth/nostr/login', {
-                method: 'POST',
-                headers: {
-                    'Content-Type': 'application/json',
-                },
-                body: JSON.stringify(signedEvent),
-            });
-
-            if (!response.ok) {
-                throw new Error('Login failed');
-            }
-
-            const authResponse: NostrAuthResponse = await response.json();
-
-            // Store session
-            this.pubkey = authResponse.user.pubkey;
-            this.token = authResponse.token;
-            this.mode = authResponse.user.mode;
-
-            localStorage.setItem('nostr_pubkey', authResponse.user.pubkey);
-            localStorage.setItem('nostr_token', authResponse.token);
-
-            return authResponse;
-        } catch (error) {
-            logger.error('Login failed:', error);
-            throw error;
-        }
-    }
-
-    async logout(): Promise<void> {
-        if (!this.pubkey) {
-            return;
-        }
-
-        try {
-            await fetch('/api/auth/nostr/logout', {
-                method: 'POST',
-                headers: {
-                    'Content-Type': 'application/json',
-                },
-                body: JSON.stringify({ pubkey: this.pubkey }),
-            });
-        } finally {
-            this.clearSession();
-        }
-    }
-
-    private async validateSession(pubkey: string, token: string): Promise<boolean> {
-        try {
-            const response = await fetch('/api/auth/nostr/validate', {
-                method: 'POST',
-                headers: {
-                    'Content-Type': 'application/json',
-                },
-                body: JSON.stringify({ pubkey, token }),
-            });
-
-            const data = await response.json();
-            return data.valid;
-        } catch (error) {
-            logger.error('Session validation failed:', error);
-            return false;
-        }
-    }
-
-    async refreshSession(): Promise<string | null> {
-        if (!this.pubkey || !this.token) {
-            return null;
-        }
-
-        try {
-            const response = await fetch('/api/auth/nostr/refresh', {
-                method: 'POST',
-                headers: {
-                    'Content-Type': 'application/json',
-                },
-                body: JSON.stringify({
-                    pubkey: this.pubkey,
-                    token: this.token,
-                }),
-            });
-
-            if (!response.ok) {
-                throw new Error('Session refresh failed');
-            }
-
-            const data = await response.json();
-            this.token = data.token;
-            localStorage.setItem('nostr_token', data.token);
-            
-            return data.token;
-        } catch (error) {
-            logger.error('Failed to refresh session:', error);
-            this.clearSession();
-            return null;
-        }
-    }
-
-    private clearSession(): void {
-        this.pubkey = null;
-        this.token = null;
-        this.mode = 'normal';
-        localStorage.removeItem('nostr_pubkey');
-        localStorage.removeItem('nostr_token');
-    }
-
-    isLoggedIn(): boolean {
-        return !!(this.pubkey && this.token);
-    }
-
-    getCurrentMode(): UserMode {
-        return this.mode;
-    }
-
-    getAuthHeaders(): Record<string, string> {
-        if (!this.pubkey || !this.token) {
-            return {};
-        }
-
-        return {
-            'X-Nostr-Pubkey': this.pubkey,
-            'X-Nostr-Auth': this.token,
-        };
-    }
-
-    getPubkey(): string | null {
-        return this.pubkey;
-    }
-
-    getNpub(): string | null {
-        return this.pubkey ? nip19.npubEncode(this.pubkey) : null;
-    }
-}
-
-// Export singleton instance
-export const nostrService = new NostrService();
\ No newline at end of file
diff --git a/client/state/defaultSettings.ts b/client/state/defaultSettings.ts
index 75c25429..84445395 100644
--- a/client/state/defaultSettings.ts
+++ b/client/state/defaultSettings.ts
@@ -102,8 +102,6 @@ export const defaultVisualizationSettings: VisualizationSettings = {
 
 // Main settings object with all defaults
 export const defaultSettings: Settings = {
-    mode: 'normal',
-    apiKeys: {},
     visualization: defaultVisualizationSettings,
     system: {
         network: {
@@ -153,7 +151,7 @@ export const defaultSettings: Settings = {
         mode: 'immersive-ar' as const,
         quality: 'medium',
         roomScale: true,
-        spaceType: 'local-floor',
+        spaceType: 'local-floor' as XRReferenceSpaceType,
         enableHandTracking: true,
         handMeshEnabled: true,
         handMeshColor: '#ffffff',
diff --git a/client/types/nostr.ts b/client/types/nostr.ts
deleted file mode 100644
index 419de96c..00000000
--- a/client/types/nostr.ts
+++ /dev/null
@@ -1,29 +0,0 @@
-import { Event as NostrToolsEvent, UnsignedEvent } from 'nostr-tools';
-
-export type UserMode = 'normal' | 'power';
-
-export interface NostrAuthResponse {
-    user: {
-        pubkey: string;
-        npub: string;
-        mode: UserMode;
-        created_at: number;
-        last_seen: number;
-    };
-    token: string;
-}
-
-export interface NostrWindow {
-    nostr?: {
-        getPublicKey(): Promise<string>;
-        signEvent(event: UnsignedEvent): Promise<NostrToolsEvent>;
-        nip04?: {
-            encrypt(pubkey: string, plaintext: string): Promise<string>;
-            decrypt(pubkey: string, ciphertext: string): Promise<string>;
-        };
-    };
-}
-
-declare global {
-    interface Window extends NostrWindow {}
-}
\ No newline at end of file
diff --git a/client/types/settings.ts b/client/types/settings.ts
index ec212a3f..c48e9f90 100644
--- a/client/types/settings.ts
+++ b/client/types/settings.ts
@@ -1,16 +1,29 @@
-import { z } from 'zod';
+import { XRSessionMode } from './xr';
 
-export type UserMode = 'normal' | 'power';
-export type Quality = 'low' | 'medium' | 'high';
+// Core visualization settings
+export interface VisualizationSettings {
+    animations: AnimationSettings;
+    bloom: BloomSettings;
+    edges: EdgeSettings;
+    hologram: HologramSettings;
+    labels: LabelSettings;
+    nodes: NodeSettings;
+    physics: PhysicsSettings;
+    rendering: RenderingSettings;
+}
 
-export interface ApiKeys {
-    perplexity?: string;
-    openai?: string;
+// System settings
+export interface SystemSettings {
+    network: NetworkSettings;
+    websocket: WebSocketSettings;
+    security: SecuritySettings;
+    debug: DebugSettings;
 }
 
+// Component settings interfaces
 export interface AnimationSettings {
-    enableMotionBlur: boolean;
     enableNodeAnimations: boolean;
+    enableMotionBlur: boolean;
     motionBlurStrength: number;
     selectionWaveEnabled: boolean;
     pulseEnabled: boolean;
@@ -30,20 +43,21 @@ export interface BloomSettings {
 }
 
 export interface EdgeSettings {
+    color: string;
+    opacity: number;
     arrowSize: number;
     baseWidth: number;
-    color: string;
     enableArrows: boolean;
-    opacity: number;
     widthRange: [number, number];
 }
 
 export interface HologramSettings {
     ringCount: number;
-    ringColor: string;
-    ringOpacity: number;
     ringSizes: number[];
     ringRotationSpeed: number;
+    globalRotationSpeed: number;
+    ringColor: string;
+    ringOpacity: number;
     enableBuckminster: boolean;
     buckminsterScale: number;
     buckminsterOpacity: number;
@@ -53,34 +67,33 @@ export interface HologramSettings {
     enableTriangleSphere: boolean;
     triangleSphereScale: number;
     triangleSphereOpacity: number;
-    globalRotationSpeed: number;
 }
 
 export interface LabelSettings {
     enableLabels: boolean;
+    desktopFontSize: number;
     textColor: string;
     textOutlineColor: string;
     textOutlineWidth: number;
     textResolution: number;
     textPadding: number;
-    desktopFontSize: number;
     billboardMode: boolean;
 }
 
 export interface NodeSettings {
-    baseColor: string;
+    quality: 'low' | 'medium' | 'high';
+    enableInstancing: boolean;
+    enableHologram: boolean;
+    enableMetadataShape: boolean;
+    enableMetadataVisualization: boolean;
     baseSize: number;
     sizeRange: [number, number];
-    enableMetadataShape: boolean;
+    baseColor: string;
+    opacity: number;
     colorRangeAge: [string, string];
     colorRangeLinks: [string, string];
     metalness: number;
     roughness: number;
-    opacity: number;
-    enableMetadataVisualization: boolean;
-    enableHologram: boolean;
-    enableInstancing: boolean;
-    quality: Quality;
 }
 
 export interface PhysicsSettings {
@@ -120,7 +133,7 @@ export interface NetworkSettings {
     tunnelId: string;
 }
 
-export interface WebsocketSettings {
+export interface WebSocketSettings {
     url: string;
     reconnectAttempts: number;
     reconnectDelay: number;
@@ -152,77 +165,46 @@ export interface DebugSettings {
     logFullJson: boolean;
 }
 
-export interface SystemSettings {
-    network: NetworkSettings;
-    websocket: WebsocketSettings;
-    security: SecuritySettings;
-    debug: DebugSettings;
-}
-
-export interface XRSettings {
-    mode: 'immersive-ar';
-    quality: Quality;
-    roomScale: boolean;
-    spaceType: 'viewer' | 'local' | 'local-floor' | 'bounded-floor' | 'unbounded';
-    enableHandTracking: boolean;
-    handMeshEnabled: boolean;
-    handMeshColor: string;
-    handMeshOpacity: number;
-    handPointSize: number;
-    handRayEnabled: boolean;
-    handRayColor: string;
-    handRayWidth: number;
-    gestureSsmoothing: number;
-    enableHaptics: boolean;
-    hapticIntensity: number;
-    dragThreshold: number;
-    pinchThreshold: number;
-    rotationThreshold: number;
-    interactionRadius: number;
-}
-
-export interface VisualizationSettings {
-    animations: AnimationSettings;
-    bloom: BloomSettings;
-    edges: EdgeSettings;
-    hologram: HologramSettings;
-    labels: LabelSettings;
-    nodes: NodeSettings;
-    physics: PhysicsSettings;
-    rendering: RenderingSettings;
-}
-
+// Main settings interface
 export interface Settings {
-    mode: UserMode;
-    apiKeys: ApiKeys;
-    visualization: VisualizationSettings;
-    system: SystemSettings;
-    xr: XRSettings;
-}
-
-// Validation schemas
-export const apiKeysSchema = z.object({
-    perplexity: z.string().optional(),
-    openai: z.string().optional(),
-});
-
-export const settingsSchema = z.object({
-    mode: z.enum(['normal', 'power']),
-    apiKeys: apiKeysSchema,
-    visualization: z.any(), // TODO: Add detailed validation
-    system: z.any(), // TODO: Add detailed validation
-    xr: z.any(), // TODO: Add detailed validation
-});
-
-// Type guards
-export const isValidUserMode = (mode: string): mode is UserMode => {
-    return mode === 'normal' || mode === 'power';
-};
-
-export const isValidApiKeys = (keys: unknown): keys is ApiKeys => {
-    return apiKeysSchema.safeParse(keys).success;
-};
-
-export const isValidSettings = (settings: unknown): settings is Settings => {
-    return settingsSchema.safeParse(settings).success;
-};
+    visualization: {
+        nodes: NodeSettings;
+        edges: EdgeSettings;
+        physics: PhysicsSettings;
+        rendering: RenderingSettings;
+        animations: AnimationSettings;
+        labels: LabelSettings;
+        bloom: BloomSettings;
+        hologram: HologramSettings;
+    };
+    system: {
+        network: NetworkSettings;
+        websocket: WebSocketSettings;
+        security: SecuritySettings;
+        debug: DebugSettings;
+    };
+    xr: {
+        mode: XRSessionMode;
+        quality: 'low' | 'medium' | 'high';
+        roomScale: boolean;
+        spaceType: 'viewer' | 'local' | 'local-floor' | 'bounded-floor' | 'unbounded';
+        enableHandTracking: boolean;
+        handMeshEnabled: boolean;
+        handMeshColor: string;
+        handMeshOpacity: number;
+        handPointSize: number;
+        handRayEnabled: boolean;
+        handRayColor: string;
+        handRayWidth: number;
+        gestureSsmoothing: number;
+        enableHaptics: boolean;
+        hapticIntensity: number;
+        dragThreshold: number;
+        pinchThreshold: number;
+        rotationThreshold: number;
+        interactionRadius: number;
+    };
+}
+
+export * from './settings/base';
+export * from './settings/utils';
diff --git a/package.json b/package.json
index e7bb45ef..8ec06cdd 100755
--- a/package.json
+++ b/package.json
@@ -14,13 +14,8 @@
   },
   "dependencies": {
     "@mui/material": "^5.15.11",
-    "@noble/curves": "^1.8.1",
-    "@noble/hashes": "^1.7.1",
-    "@nostr-dev-kit/ndk": "^2.11.0",
-    "nostr-tools": "^2.10.4",
     "react": "^18.2.0",
-    "three": "0.170.0",
-    "zod": "^3.24.1"
+    "three": "0.170.0"
   },
   "devDependencies": {
     "@types/node": "^22.10.0",
diff --git a/pnpm-lock.yaml b/pnpm-lock.yaml
index 557a4f10..f599fe7d 100644
--- a/pnpm-lock.yaml
+++ b/pnpm-lock.yaml
@@ -14,27 +14,12 @@ importers:
       '@mui/material':
         specifier: ^5.15.11
         version: 5.16.14(@types/react@18.3.18)(react-dom@19.0.0(react@18.3.1))(react@18.3.1)
-      '@noble/curves':
-        specifier: ^1.8.1
-        version: 1.8.1
-      '@noble/hashes':
-        specifier: ^1.7.1
-        version: 1.7.1
-      '@nostr-dev-kit/ndk':
-        specifier: ^2.11.0
-        version: 2.11.0(typescript@5.4.5)
-      nostr-tools:
-        specifier: ^2.10.4
-        version: 2.10.4(typescript@5.4.5)
       react:
         specifier: ^18.2.0
         version: 18.3.1
       three:
         specifier: 0.170.0
         version: 0.170.0
-      zod:
-        specifier: ^3.24.1
-        version: 3.24.1
     devDependencies:
       '@types/node':
         specifier: ^22.10.0
@@ -355,34 +340,6 @@ packages:
       '@types/react':
         optional: true
 
-  '@noble/ciphers@0.5.3':
-    resolution: {integrity: sha512-B0+6IIHiqEs3BPMT0hcRmHvEj2QHOLu+uwt+tqDDeVd0oyVzh7BPrDcPjRnV1PV/5LaknXJJQvOuRGR0zQJz+w==}
-
-  '@noble/curves@1.1.0':
-    resolution: {integrity: sha512-091oBExgENk/kGj3AZmtBDMpxQPDtxQABR2B9lb1JbVTs6ytdzZNwvhxQ4MWasRNEzlbEH8jCWFCwhF/Obj5AA==}
-
-  '@noble/curves@1.2.0':
-    resolution: {integrity: sha512-oYclrNgRaM9SsBUBVbb8M6DTV7ZHRTKugureoYEncY5c65HOmRzvSiTE3y5CYaPYJA/GVkrhXEoF0M3Ya9PMnw==}
-
-  '@noble/curves@1.8.1':
-    resolution: {integrity: sha512-warwspo+UYUPep0Q+vtdVB4Ugn8GGQj8iyB3gnRWsztmUHTI3S1nhdiWNsPUGL0vud7JlRRk1XEu7Lq1KGTnMQ==}
-    engines: {node: ^14.21.3 || >=16}
-
-  '@noble/hashes@1.3.1':
-    resolution: {integrity: sha512-EbqwksQwz9xDRGfDST86whPBgM65E0OH/pCgqW0GBVzO22bNE+NuIbeTb714+IfSjU3aRk47EUvXIb5bTsenKA==}
-    engines: {node: '>= 16'}
-
-  '@noble/hashes@1.3.2':
-    resolution: {integrity: sha512-MVC8EAQp7MvEcm30KWENFjgR+Mkmf+D189XJTkFIlwohU5hcBbn1ZkKq7KVTi2Hme3PMGF390DaL52beVrIihQ==}
-    engines: {node: '>= 16'}
-
-  '@noble/hashes@1.7.1':
-    resolution: {integrity: sha512-B8XBPsn4vT/KJAGqDzbwztd+6Yte3P4V7iafm24bxgDe/mlRuK6xmWPuCNrKt2vDafZ8MfJLlchDG/vYafQEjQ==}
-    engines: {node: ^14.21.3 || >=16}
-
-  '@noble/secp256k1@2.2.3':
-    resolution: {integrity: sha512-l7r5oEQym9Us7EAigzg30/PQAvynhMt2uoYtT3t26eGDVm9Yii5mZ5jWSWmZ/oSIR2Et0xfc6DXrG0bZ787V3w==}
-
   '@nodelib/fs.scandir@2.1.5':
     resolution: {integrity: sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==}
     engines: {node: '>= 8'}
@@ -395,10 +352,6 @@ packages:
     resolution: {integrity: sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==}
     engines: {node: '>= 8'}
 
-  '@nostr-dev-kit/ndk@2.11.0':
-    resolution: {integrity: sha512-FKIMtcVsVcquzrC+yir9lOXHCIHmQ3IKEVCMohqEB7N96HjP2qrI9s5utbjI3lkavFNF5tXg1Gp9ODEo7XCfLA==}
-    engines: {node: '>=16'}
-
   '@popperjs/core@2.11.8':
     resolution: {integrity: sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==}
 
@@ -497,18 +450,6 @@ packages:
     cpu: [x64]
     os: [win32]
 
-  '@scure/base@1.1.1':
-    resolution: {integrity: sha512-ZxOhsSyxYwLJj3pLZCefNitxsj093tb2vq90mp2txoYeBqbcjDjqFhyM8eUjq/uFm6zJ+mUuqxlS2FkuSY1MTA==}
-
-  '@scure/base@1.2.4':
-    resolution: {integrity: sha512-5Yy9czTO47mqz+/J8GM6GIId4umdCk1wc1q8rKERQulIoc8VP9pzDcghv10Tl2E7R96ZUx/PhND3ESYUQX8NuQ==}
-
-  '@scure/bip32@1.3.1':
-    resolution: {integrity: sha512-osvveYtyzdEVbt3OfwwXFr4P2iVBL5u1Q3q4ONBfDY/UpOuXmOlbgwc1xECEboY8wIays8Yt6onaWMUdUbfl0A==}
-
-  '@scure/bip39@1.2.1':
-    resolution: {integrity: sha512-Z3/Fsz1yr904dduJD0NpiyRHhRYHdcnyh73FZWiV+/qhWi83wNJ3NWolYqCEN+ZWsUz2TWwajJggcRE9r1zUYg==}
-
   '@tweenjs/tween.js@23.1.3':
     resolution: {integrity: sha512-vJmvvwFxYuGnF2axRtPYocag6Clbb5YS7kLL+SO/TeVFzHqDIWrNKYtcsPMibjDx9O+bu+psAy9NKfWklassUA==}
 
@@ -631,10 +572,6 @@ packages:
   buffer-from@1.1.2:
     resolution: {integrity: sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==}
 
-  bufferutil@4.0.9:
-    resolution: {integrity: sha512-WDtdLmJvAuNNPzByAYpRo2rF1Mmradw6gvWsQKf63476DDXmomT9zUiGypLcG4ibIM67vhAj8jJRdbmEws2Aqw==}
-    engines: {node: '>=6.14.2'}
-
   callsites@3.1.0:
     resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
     engines: {node: '>=6'}
@@ -667,18 +604,6 @@ packages:
   csstype@3.1.3:
     resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}
 
-  d@1.0.2:
-    resolution: {integrity: sha512-MOqHvMWF9/9MX6nza0KgvFH4HpMU0EF5uUDXqX/BtxtU8NfB0QzRtJ8Oe/6SuS4kbhyzVJwjd97EA4PKrzJ8bw==}
-    engines: {node: '>=0.12'}
-
-  debug@2.6.9:
-    resolution: {integrity: sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==}
-    peerDependencies:
-      supports-color: '*'
-    peerDependenciesMeta:
-      supports-color:
-        optional: true
-
   debug@4.4.0:
     resolution: {integrity: sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==}
     engines: {node: '>=6.0'}
@@ -698,17 +623,6 @@ packages:
   dom-helpers@5.2.1:
     resolution: {integrity: sha512-nRCa7CK3VTrM2NmGkIy4cbK7IZlgBE/PYMn55rrXefr5xXDP0LdtfPnblFDoVdcAfslJ7or6iqAUnx0CCGIWQA==}
 
-  es5-ext@0.10.64:
-    resolution: {integrity: sha512-p2snDhiLaXe6dahss1LddxqEm+SkuDvV8dnIQG0MWjyHpcMNfXKPE+/Cc0y+PhxJX3A4xGNeFCj5oc0BUh6deg==}
-    engines: {node: '>=0.10'}
-
-  es6-iterator@2.0.3:
-    resolution: {integrity: sha512-zw4SRzoUkd+cl+ZoE15A9o1oQd920Bb0iOJMQkQhl3jNc03YqVjAhG7scf9C5KWRU/R13Orf588uCC6525o02g==}
-
-  es6-symbol@3.1.4:
-    resolution: {integrity: sha512-U9bFFjX8tFiATgtkJ1zg25+KviIXpgRvRHS8sau3GfhVzThRQrOeksPeT0BWW2MNZs1OEWJ1DPXOQMn0KKRkvg==}
-    engines: {node: '>=0.12'}
-
   esbuild@0.21.5:
     resolution: {integrity: sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==}
     engines: {node: '>=12'}
@@ -736,10 +650,6 @@ packages:
     deprecated: This version is no longer supported. Please see https://eslint.org/version-support for other options.
     hasBin: true
 
-  esniff@2.0.1:
-    resolution: {integrity: sha512-kTUIGKQ/mDPFoJ0oVfcmyJn4iBDRptjNVIzwIFR7tqWXdVI9xfA2RMwY/gbSpJG3lkdWNEjLap/NqVHZiJsdfg==}
-    engines: {node: '>=0.10'}
-
   espree@9.6.1:
     resolution: {integrity: sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==}
     engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
@@ -760,12 +670,6 @@ packages:
     resolution: {integrity: sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==}
     engines: {node: '>=0.10.0'}
 
-  event-emitter@0.3.5:
-    resolution: {integrity: sha512-D9rRn9y7kLPnJ+hMq7S/nhvoKwwvVJahBi2BPmx3bvbsEdK3W9ii8cBSGjP+72/LnM4n6fo3+dkCX5FeTQruXA==}
-
-  ext@1.7.0:
-    resolution: {integrity: sha512-6hxeJYaL110a9b5TEJSj0gojyHQAmA2ch5Os+ySCiA1QGdS697XWY1pzsrSjqA9LDEEgdB/KypIlR59RcLuHYw==}
-
   fast-deep-equal@3.1.3:
     resolution: {integrity: sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==}
 
@@ -870,9 +774,6 @@ packages:
     resolution: {integrity: sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==}
     engines: {node: '>=8'}
 
-  is-typedarray@1.0.0:
-    resolution: {integrity: sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==}
-
   isexe@2.0.0:
     resolution: {integrity: sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==}
 
@@ -899,9 +800,6 @@ packages:
     resolution: {integrity: sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==}
     engines: {node: '>= 0.8.0'}
 
-  light-bolt11-decoder@3.2.0:
-    resolution: {integrity: sha512-3QEofgiBOP4Ehs9BI+RkZdXZNtSys0nsJ6fyGeSiAGCBsMwHGUDS/JQlY/sTnWs91A2Nh0S9XXfA8Sy9g6QpuQ==}
-
   locate-path@6.0.0:
     resolution: {integrity: sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==}
     engines: {node: '>=10'}
@@ -931,9 +829,6 @@ packages:
     resolution: {integrity: sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==}
     engines: {node: '>=16 || 14 >=14.17'}
 
-  ms@2.0.0:
-    resolution: {integrity: sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==}
-
   ms@2.1.3:
     resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}
 
@@ -945,24 +840,6 @@ packages:
   natural-compare@1.4.0:
     resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}
 
-  next-tick@1.1.0:
-    resolution: {integrity: sha512-CXdUiJembsNjuToQvxayPZF9Vqht7hewsvy2sOWafLvi2awflj9mOC6bHIg50orX8IJvWKY9wYQ/zB2kogPslQ==}
-
-  node-gyp-build@4.8.4:
-    resolution: {integrity: sha512-LA4ZjwlnUblHVgq0oBF3Jl/6h/Nvs5fzBLwdEF4nuxnFdsfajde4WfxtJr3CaiH+F6ewcIB/q4jQ4UzPyid+CQ==}
-    hasBin: true
-
-  nostr-tools@2.10.4:
-    resolution: {integrity: sha512-biU7sk+jxHgVASfobg2T5ttxOGGSt69wEVBC51sHHOEaKAAdzHBLV/I2l9Rf61UzClhliZwNouYhqIso4a3HYg==}
-    peerDependencies:
-      typescript: '>=5.0.0'
-    peerDependenciesMeta:
-      typescript:
-        optional: true
-
-  nostr-wasm@0.1.0:
-    resolution: {integrity: sha512-78BTryCLcLYv96ONU8Ws3Q1JzjlAt+43pWQhIl86xZmWeegYCNLPml7yQ+gG3vR6V5h4XGj+TxO+SS5dsThQIA==}
-
   object-assign@4.1.1:
     resolution: {integrity: sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==}
     engines: {node: '>=0.10.0'}
@@ -1136,12 +1013,6 @@ packages:
     peerDependencies:
       typescript: '>=4.2.0'
 
-  tseep@1.3.1:
-    resolution: {integrity: sha512-ZPtfk1tQnZVyr7BPtbJ93qaAh2lZuIOpTMjhrYa4XctT8xe7t4SAW9LIxrySDuYMsfNNayE51E/WNGrNVgVicQ==}
-
-  tstl@2.5.16:
-    resolution: {integrity: sha512-+O2ybLVLKcBwKm4HymCEwZIT0PpwS3gCYnxfSDEjJEKADvIFruaQjd3m7CAKNU1c7N3X3WjVz87re7TA2A5FUw==}
-
   type-check@0.4.0:
     resolution: {integrity: sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==}
     engines: {node: '>= 0.8.0'}
@@ -1150,15 +1021,6 @@ packages:
     resolution: {integrity: sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==}
     engines: {node: '>=10'}
 
-  type@2.7.3:
-    resolution: {integrity: sha512-8j+1QmAbPvLZow5Qpi6NCaN8FB60p/6x8/vfNqOk/hC+HuvFZhL4+WfekuhQLiqFZXOgQdrs3B+XxEmCc6b3FQ==}
-
-  typedarray-to-buffer@3.1.5:
-    resolution: {integrity: sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==}
-
-  typescript-lru-cache@2.0.0:
-    resolution: {integrity: sha512-Jp57Qyy8wXeMkdNuZiglE6v2Cypg13eDA1chHwDG6kq51X7gk4K7P7HaDdzZKCxkegXkVHNcPD0n5aW6OZH3aA==}
-
   typescript@5.4.5:
     resolution: {integrity: sha512-vcI4UpRgg81oIRUFwR0WSIHKt11nJ7SAVlYNIu+QpqeyXP+gpQJy/Z4+F0aGxSE4MqwjyXvW/TzgkLAx2AGHwQ==}
     engines: {node: '>=14.17'}
@@ -1170,14 +1032,6 @@ packages:
   uri-js@4.4.1:
     resolution: {integrity: sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==}
 
-  utf-8-validate@5.0.10:
-    resolution: {integrity: sha512-Z6czzLq4u8fPOyx7TU6X3dvUZVvoJmxSQ+IcrlmagKhilxlhZgxPK6C5Jqbkw1IDUmFTM+cz9QDnnLTwDz/2gQ==}
-    engines: {node: '>=6.14.2'}
-
-  utf8-buffer@1.0.0:
-    resolution: {integrity: sha512-ueuhzvWnp5JU5CiGSY4WdKbiN/PO2AZ/lpeLiz2l38qwdLy/cW40XobgyuIWucNyum0B33bVB0owjFCeGBSLqg==}
-    engines: {node: '>=8'}
-
   vite@5.4.14:
     resolution: {integrity: sha512-EK5cY7Q1D8JNhSaPKVK4pwBFvaTmZxEnoKXLG/U9gmdDcihQGNzFlgIvaxezFR4glP1LsuiedwMBqCXH3wZccA==}
     engines: {node: ^18.0.0 || >=20.0.0}
@@ -1209,13 +1063,6 @@ packages:
       terser:
         optional: true
 
-  websocket-polyfill@0.0.3:
-    resolution: {integrity: sha512-pF3kR8Uaoau78MpUmFfzbIRxXj9PeQrCuPepGE6JIsfsJ/o/iXr07Q2iQNzKSSblQJ0FiGWlS64N4pVSm+O3Dg==}
-
-  websocket@1.0.35:
-    resolution: {integrity: sha512-/REy6amwPZl44DDzvRCkaI1q1bIiQB0mEFQLUrhz3z2EK91cp3n72rAjUlrTP0zV22HJIUOVHQGPxhFRjxjt+Q==}
-    engines: {node: '>=4.0.0'}
-
   which@2.0.2:
     resolution: {integrity: sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==}
     engines: {node: '>= 8'}
@@ -1228,17 +1075,10 @@ packages:
   wrappy@1.0.2:
     resolution: {integrity: sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==}
 
-  yaeti@0.0.6:
-    resolution: {integrity: sha512-MvQa//+KcZCUkBTIC9blM+CU9J2GzuTytsOUwf2lidtvkx/6gnEp1QvJv34t9vdjhFmha/mUiNDbN0D0mJWdug==}
-    engines: {node: '>=0.10.32'}
-
   yocto-queue@0.1.0:
     resolution: {integrity: sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==}
     engines: {node: '>=10'}
 
-  zod@3.24.1:
-    resolution: {integrity: sha512-muH7gBL9sI1nciMZV67X5fTKKBLtwpZ5VBp1vsOQzj1MhrBZ4wlVCm3gedKZWLp0Oyel8sIGfeiz54Su+OVT+A==}
-
 snapshots:
 
   '@babel/runtime@7.26.0':
@@ -1455,28 +1295,6 @@ snapshots:
     optionalDependencies:
       '@types/react': 18.3.18
 
-  '@noble/ciphers@0.5.3': {}
-
-  '@noble/curves@1.1.0':
-    dependencies:
-      '@noble/hashes': 1.3.1
-
-  '@noble/curves@1.2.0':
-    dependencies:
-      '@noble/hashes': 1.3.2
-
-  '@noble/curves@1.8.1':
-    dependencies:
-      '@noble/hashes': 1.7.1
-
-  '@noble/hashes@1.3.1': {}
-
-  '@noble/hashes@1.3.2': {}
-
-  '@noble/hashes@1.7.1': {}
-
-  '@noble/secp256k1@2.2.3': {}
-
   '@nodelib/fs.scandir@2.1.5':
     dependencies:
       '@nodelib/fs.stat': 2.0.5
@@ -1489,23 +1307,6 @@ snapshots:
       '@nodelib/fs.scandir': 2.1.5
       fastq: 1.17.1
 
-  '@nostr-dev-kit/ndk@2.11.0(typescript@5.4.5)':
-    dependencies:
-      '@noble/curves': 1.8.1
-      '@noble/hashes': 1.7.1
-      '@noble/secp256k1': 2.2.3
-      '@scure/base': 1.2.4
-      debug: 4.4.0
-      light-bolt11-decoder: 3.2.0
-      nostr-tools: 2.10.4(typescript@5.4.5)
-      tseep: 1.3.1
-      typescript-lru-cache: 2.0.0
-      utf8-buffer: 1.0.0
-      websocket-polyfill: 0.0.3
-    transitivePeerDependencies:
-      - supports-color
-      - typescript
-
   '@popperjs/core@2.11.8': {}
 
   '@rollup/rollup-android-arm-eabi@4.28.1':
@@ -1565,21 +1366,6 @@ snapshots:
   '@rollup/rollup-win32-x64-msvc@4.28.1':
     optional: true
 
-  '@scure/base@1.1.1': {}
-
-  '@scure/base@1.2.4': {}
-
-  '@scure/bip32@1.3.1':
-    dependencies:
-      '@noble/curves': 1.1.0
-      '@noble/hashes': 1.3.2
-      '@scure/base': 1.1.1
-
-  '@scure/bip39@1.2.1':
-    dependencies:
-      '@noble/hashes': 1.3.2
-      '@scure/base': 1.1.1
-
   '@tweenjs/tween.js@23.1.3': {}
 
   '@types/estree@1.0.6': {}
@@ -1731,10 +1517,6 @@ snapshots:
 
   buffer-from@1.1.2: {}
 
-  bufferutil@4.0.9:
-    dependencies:
-      node-gyp-build: 4.8.4
-
   callsites@3.1.0: {}
 
   chalk@4.1.2:
@@ -1762,15 +1544,6 @@ snapshots:
 
   csstype@3.1.3: {}
 
-  d@1.0.2:
-    dependencies:
-      es5-ext: 0.10.64
-      type: 2.7.3
-
-  debug@2.6.9:
-    dependencies:
-      ms: 2.0.0
-
   debug@4.4.0:
     dependencies:
       ms: 2.1.3
@@ -1786,24 +1559,6 @@ snapshots:
       '@babel/runtime': 7.26.0
       csstype: 3.1.3
 
-  es5-ext@0.10.64:
-    dependencies:
-      es6-iterator: 2.0.3
-      es6-symbol: 3.1.4
-      esniff: 2.0.1
-      next-tick: 1.1.0
-
-  es6-iterator@2.0.3:
-    dependencies:
-      d: 1.0.2
-      es5-ext: 0.10.64
-      es6-symbol: 3.1.4
-
-  es6-symbol@3.1.4:
-    dependencies:
-      d: 1.0.2
-      ext: 1.7.0
-
   esbuild@0.21.5:
     optionalDependencies:
       '@esbuild/aix-ppc64': 0.21.5
@@ -1884,13 +1639,6 @@ snapshots:
     transitivePeerDependencies:
       - supports-color
 
-  esniff@2.0.1:
-    dependencies:
-      d: 1.0.2
-      es5-ext: 0.10.64
-      event-emitter: 0.3.5
-      type: 2.7.3
-
   espree@9.6.1:
     dependencies:
       acorn: 8.14.0
@@ -1909,15 +1657,6 @@ snapshots:
 
   esutils@2.0.3: {}
 
-  event-emitter@0.3.5:
-    dependencies:
-      d: 1.0.2
-      es5-ext: 0.10.64
-
-  ext@1.7.0:
-    dependencies:
-      type: 2.7.3
-
   fast-deep-equal@3.1.3: {}
 
   fast-glob@3.3.2:
@@ -2015,8 +1754,6 @@ snapshots:
 
   is-path-inside@3.0.3: {}
 
-  is-typedarray@1.0.0: {}
-
   isexe@2.0.0: {}
 
   js-tokens@4.0.0: {}
@@ -2040,10 +1777,6 @@ snapshots:
       prelude-ls: 1.2.1
       type-check: 0.4.0
 
-  light-bolt11-decoder@3.2.0:
-    dependencies:
-      '@scure/base': 1.1.1
-
   locate-path@6.0.0:
     dependencies:
       p-locate: 5.0.0
@@ -2071,33 +1804,12 @@ snapshots:
     dependencies:
       brace-expansion: 2.0.1
 
-  ms@2.0.0: {}
-
   ms@2.1.3: {}
 
   nanoid@3.3.8: {}
 
   natural-compare@1.4.0: {}
 
-  next-tick@1.1.0: {}
-
-  node-gyp-build@4.8.4: {}
-
-  nostr-tools@2.10.4(typescript@5.4.5):
-    dependencies:
-      '@noble/ciphers': 0.5.3
-      '@noble/curves': 1.2.0
-      '@noble/hashes': 1.3.1
-      '@scure/base': 1.1.1
-      '@scure/bip32': 1.3.1
-      '@scure/bip39': 1.2.1
-    optionalDependencies:
-      nostr-wasm: 0.1.0
-      typescript: 5.4.5
-
-  nostr-wasm@0.1.0:
-    optional: true
-
   object-assign@4.1.1: {}
 
   once@1.4.0:
@@ -2266,24 +1978,12 @@ snapshots:
     dependencies:
       typescript: 5.4.5
 
-  tseep@1.3.1: {}
-
-  tstl@2.5.16: {}
-
   type-check@0.4.0:
     dependencies:
       prelude-ls: 1.2.1
 
   type-fest@0.20.2: {}
 
-  type@2.7.3: {}
-
-  typedarray-to-buffer@3.1.5:
-    dependencies:
-      is-typedarray: 1.0.0
-
-  typescript-lru-cache@2.0.0: {}
-
   typescript@5.4.5: {}
 
   undici-types@6.20.0: {}
@@ -2292,12 +1992,6 @@ snapshots:
     dependencies:
       punycode: 2.3.1
 
-  utf-8-validate@5.0.10:
-    dependencies:
-      node-gyp-build: 4.8.4
-
-  utf8-buffer@1.0.0: {}
-
   vite@5.4.14(@types/node@22.10.2)(terser@5.37.0):
     dependencies:
       esbuild: 0.21.5
@@ -2308,24 +2002,6 @@ snapshots:
       fsevents: 2.3.3
       terser: 5.37.0
 
-  websocket-polyfill@0.0.3:
-    dependencies:
-      tstl: 2.5.16
-      websocket: 1.0.35
-    transitivePeerDependencies:
-      - supports-color
-
-  websocket@1.0.35:
-    dependencies:
-      bufferutil: 4.0.9
-      debug: 2.6.9
-      es5-ext: 0.10.64
-      typedarray-to-buffer: 3.1.5
-      utf-8-validate: 5.0.10
-      yaeti: 0.0.6
-    transitivePeerDependencies:
-      - supports-color
-
   which@2.0.2:
     dependencies:
       isexe: 2.0.0
@@ -2334,8 +2010,4 @@ snapshots:
 
   wrappy@1.0.2: {}
 
-  yaeti@0.0.6: {}
-
   yocto-queue@0.1.0: {}
-
-  zod@3.24.1: {}
diff --git a/scripts/test_nostr_auth.sh b/scripts/test_nostr_auth.sh
deleted file mode 100755
index c8343a2c..00000000
--- a/scripts/test_nostr_auth.sh
+++ /dev/null
@@ -1,89 +0,0 @@
-#!/bin/bash
-
-# Colors for output
-GREEN='\033[0;32m'
-RED='\033[0;31m'
-NC='\033[0m'
-
-echo "Testing Nostr Authentication System"
-echo "================================="
-
-# Test 1: Backend Health Check
-echo -e "\n${GREEN}Test 1: Backend Health Check${NC}"
-response=$(curl -s -w "\n%{http_code}" http://localhost:4000/api/health)
-status_code=$(echo "$response" | tail -n1)
-if [ "$status_code" -eq 200 ]; then
-    echo "✓ Backend is running"
-else
-    echo -e "${RED}✗ Backend is not running (Status: $status_code)${NC}"
-    exit 1
-fi
-
-# Test 2: Nostr Login Endpoint
-echo -e "\n${GREEN}Test 2: Nostr Login Endpoint${NC}"
-test_event='{
-    "id": "test_id",
-    "pubkey": "test_pubkey",
-    "content": "Login request",
-    "sig": "test_sig",
-    "created_at": '$(date +%s)',
-    "kind": 27235,
-    "tags": []
-}'
-
-response=$(curl -s -w "\n%{http_code}" -X POST \
-    -H "Content-Type: application/json" \
-    -d "$test_event" \
-    http://localhost:4000/api/auth/nostr/login)
-status_code=$(echo "$response" | tail -n1)
-if [ "$status_code" -eq 401 ]; then
-    echo "✓ Login endpoint correctly rejects invalid signature"
-else
-    echo -e "${RED}✗ Unexpected response from login endpoint (Status: $status_code)${NC}"
-fi
-
-# Test 3: Session Validation
-echo -e "\n${GREEN}Test 3: Session Validation${NC}"
-response=$(curl -s -w "\n%{http_code}" -X POST \
-    -H "Content-Type: application/json" \
-    -d '{"pubkey": "test_pubkey", "token": "invalid_token"}' \
-    http://localhost:4000/api/auth/nostr/validate)
-status_code=$(echo "$response" | tail -n1)
-if [ "$status_code" -eq 200 ]; then
-    valid=$(echo "$response" | head -n1 | jq -r '.valid')
-    if [ "$valid" = "false" ]; then
-        echo "✓ Session validation correctly identifies invalid token"
-    else
-        echo -e "${RED}✗ Session validation incorrectly accepts invalid token${NC}"
-    fi
-else
-    echo -e "${RED}✗ Unexpected response from validation endpoint (Status: $status_code)${NC}"
-fi
-
-# Test 4: Mode Switch Protection
-echo -e "\n${GREEN}Test 4: Mode Switch Protection${NC}"
-response=$(curl -s -w "\n%{http_code}" -X POST \
-    -H "Content-Type: application/json" \
-    -d '{"mode": "power", "pubkey": "test_pubkey", "token": "invalid_token"}' \
-    http://localhost:4000/api/auth/nostr/mode)
-status_code=$(echo "$response" | tail -n1)
-if [ "$status_code" -eq 401 ]; then
-    echo "✓ Mode switch correctly requires authentication"
-else
-    echo -e "${RED}✗ Mode switch does not properly check authentication (Status: $status_code)${NC}"
-fi
-
-# Test 5: Protected Settings Access
-echo -e "\n${GREEN}Test 5: Protected Settings Access${NC}"
-response=$(curl -s -w "\n%{http_code}" -X GET \
-    -H "X-Nostr-Pubkey: test_pubkey" \
-    -H "X-Nostr-Auth: invalid_token" \
-    http://localhost:4000/api/settings/protected)
-status_code=$(echo "$response" | tail -n1)
-if [ "$status_code" -eq 401 ]; then
-    echo "✓ Protected settings correctly requires authentication"
-else
-    echo -e "${RED}✗ Protected settings does not properly check authentication (Status: $status_code)${NC}"
-fi
-
-echo -e "\n${GREEN}Tests completed!${NC}"
\ No newline at end of file
diff --git a/src/app_state.rs b/src/app_state.rs
index 9bcdfcb3..ec09d64f 100755
--- a/src/app_state.rs
+++ b/src/app_state.rs
@@ -1,53 +1,57 @@
-use crate::models::protected_settings::ProtectedSettings;
-use crate::services::{
-    NostrService, FileService, GraphService, PerplexityService, 
-    speech_service::SpeechService, ragflow_service::RAGFlowService
-};
-use crate::services::github::content::ContentAPI;
-use crate::utils::gpu_compute::GPUCompute;
-use actix_web::web;
-use std::sync::Arc;
+use std::sync::{Arc, atomic::{AtomicUsize, Ordering}};
 use tokio::sync::RwLock;
-use serde_json::Value;
 
+use crate::config::Settings;
+use crate::models::metadata::MetadataStore;
+use crate::services::graph_service::GraphService;
+use crate::services::github::{GitHubClient, ContentAPI};
+use crate::services::perplexity_service::PerplexityService;
+use crate::services::ragflow_service::RAGFlowService;
+use crate::utils::gpu_compute::GPUCompute;
+
+#[derive(Clone)]
 pub struct AppState {
-    pub settings: Arc<RwLock<Value>>,
-    pub protected_settings: Arc<RwLock<ProtectedSettings>>,
-    pub nostr_service: Option<web::Data<NostrService>>,
+    pub graph_service: GraphService,
+    pub gpu_compute: Option<Arc<RwLock<GPUCompute>>>,
+    pub settings: Arc<RwLock<Settings>>,
+    pub metadata: Arc<RwLock<MetadataStore>>,
+    pub github_client: Arc<GitHubClient>,
     pub content_api: Arc<ContentAPI>,
-    pub metadata: Arc<RwLock<Value>>,
-    pub graph_service: Arc<GraphService>,
     pub perplexity_service: Option<Arc<PerplexityService>>,
     pub ragflow_service: Option<Arc<RAGFlowService>>,
-    pub ragflow_conversation_id: Option<String>,
-    pub speech_service: Option<Arc<SpeechService>>,
-    pub gpu_compute: Option<Arc<GPUCompute>>,
+    pub ragflow_conversation_id: String,
+    pub active_connections: Arc<AtomicUsize>,
 }
 
 impl AppState {
-    pub fn new() -> Self {
+    pub fn new(
+        settings: Arc<RwLock<Settings>>,
+        github_client: Arc<GitHubClient>,
+        content_api: Arc<ContentAPI>,
+        perplexity_service: Option<Arc<PerplexityService>>,
+        ragflow_service: Option<Arc<RAGFlowService>>,
+        gpu_compute: Option<Arc<RwLock<GPUCompute>>>,
+        ragflow_conversation_id: String,
+    ) -> Self {
         Self {
-            settings: Arc::new(RwLock::new(serde_json::json!({}))),
-            protected_settings: Arc::new(RwLock::new(ProtectedSettings::default())),
-            nostr_service: None,
-            content_api: Arc::new(ContentAPI::new()),
-            metadata: Arc::new(RwLock::new(serde_json::json!({}))),
-            graph_service: Arc::new(GraphService::new()),
-            perplexity_service: None,
-            ragflow_service: None,
-            ragflow_conversation_id: None,
-            speech_service: None,
-            gpu_compute: None,
+            graph_service: GraphService::new(),
+            gpu_compute,
+            settings,
+            metadata: Arc::new(RwLock::new(MetadataStore::new())),
+            github_client,
+            content_api,
+            perplexity_service,
+            ragflow_service,
+            ragflow_conversation_id,
+            active_connections: Arc::new(AtomicUsize::new(0)),
         }
     }
 
-    pub fn get_nostr_service(&self) -> Option<&web::Data<NostrService>> {
-        self.nostr_service.as_ref()
+    pub fn increment_connections(&self) -> usize {
+        self.active_connections.fetch_add(1, Ordering::SeqCst)
     }
-}
 
-impl Default for AppState {
-    fn default() -> Self {
-        Self::new()
+    pub fn decrement_connections(&self) -> usize {
+        self.active_connections.fetch_sub(1, Ordering::SeqCst)
     }
 }
diff --git a/src/auth/mod.rs b/src/auth/mod.rs
deleted file mode 100644
index 8e208763..00000000
--- a/src/auth/mod.rs
+++ /dev/null
@@ -1,136 +0,0 @@
-use bcrypt::{hash, verify, DEFAULT_COST};
-use jsonwebtoken::{encode, decode, EncodingKey, DecodingKey, Header, Validation};
-use serde::{Deserialize, Serialize};
-use std::env;
-use std::time::{SystemTime, UNIX_EPOCH};
-use thiserror::Error;
-use uuid::Uuid;
-use crate::models::protected_settings::UserMode;
-
-#[derive(Debug, Error)]
-pub enum AuthError {
-    #[error("Invalid credentials")]
-    InvalidCredentials,
-    #[error("Token creation failed: {0}")]
-    TokenCreation(String),
-    #[error("Token validation failed: {0}")]
-    TokenValidation(String),
-    #[error("Environment error: {0}")]
-    Environment(String),
-    #[error("Bcrypt error: {0}")]
-    BcryptError(#[from] bcrypt::BcryptError),
-}
-
-#[derive(Debug, Serialize, Deserialize)]
-pub struct Claims {
-    pub sub: String,      // Subject (user ID)
-    pub exp: usize,       // Expiration time
-    pub iat: usize,       // Issued at
-    pub mode: UserMode,   // User mode
-    pub client_id: String, // Client identifier
-}
-
-pub struct Auth {
-    password_hash: String,
-    token_secret: String,
-    token_expiry: u64,
-}
-
-impl Auth {
-    pub fn new() -> Result<Self, AuthError> {
-        let password_hash = env::var("AUTH_PASSWORD_HASH")
-            .map_err(|_| AuthError::Environment("AUTH_PASSWORD_HASH not set".to_string()))?;
-        
-        let token_secret = env::var("AUTH_TOKEN_SECRET")
-            .map_err(|_| AuthError::Environment("AUTH_TOKEN_SECRET not set".to_string()))?;
-        
-        let token_expiry = env::var("AUTH_TOKEN_EXPIRY")
-            .unwrap_or_else(|_| "3600".to_string())
-            .parse()
-            .unwrap_or(3600);
-
-        Ok(Auth {
-            password_hash,
-            token_secret,
-            token_expiry,
-        })
-    }
-
-    pub fn validate_password(&self, password: &str) -> Result<bool, AuthError> {
-        Ok(verify(password, &self.password_hash)?)
-    }
-
-    pub fn create_token(&self, mode: UserMode) -> Result<(String, String), AuthError> {
-        let now = SystemTime::now()
-            .duration_since(UNIX_EPOCH)
-            .unwrap()
-            .as_secs() as usize;
-
-        let client_id = Uuid::new_v4().to_string();
-        
-        let claims = Claims {
-            sub: "user".to_string(),
-            exp: now + self.token_expiry as usize,
-            iat: now,
-            mode,
-            client_id: client_id.clone(),
-        };
-
-        let token = encode(
-            &Header::default(),
-            &claims,
-            &EncodingKey::from_secret(self.token_secret.as_bytes()),
-        )
-        .map_err(|e| AuthError::TokenCreation(e.to_string()))?;
-
-        Ok((token, client_id))
-    }
-
-    pub fn verify_token(&self, token: &str) -> Result<Claims, AuthError> {
-        let validation = Validation::default();
-        
-        decode::<Claims>(
-            token,
-            &DecodingKey::from_secret(self.token_secret.as_bytes()),
-            &validation,
-        )
-        .map(|token_data| token_data.claims)
-        .map_err(|e| AuthError::TokenValidation(e.to_string()))
-    }
-
-    pub fn hash_password(password: &str) -> Result<String, AuthError> {
-        Ok(hash(password, DEFAULT_COST)?)
-    }
-}
-
-#[cfg(test)]
-mod tests {
-    use super::*;
-    use std::env;
-
-    #[test]
-    fn test_password_validation() {
-        let test_password = "test_password";
-        let hashed = Auth::hash_password(test_password).unwrap();
-        
-        env::set_var("AUTH_PASSWORD_HASH", &hashed);
-        env::set_var("AUTH_TOKEN_SECRET", "test_secret");
-        
-        let auth = Auth::new().unwrap();
-        assert!(auth.validate_password(test_password).unwrap());
-        assert!(!auth.validate_password("wrong_password").unwrap());
-    }
-
-    #[test]
-    fn test_token_creation_and_verification() {
-        env::set_var("AUTH_PASSWORD_HASH", "dummy_hash");
-        env::set_var("AUTH_TOKEN_SECRET", "test_secret");
-        
-        let auth = Auth::new().unwrap();
-        let (token, client_id) = auth.create_token(UserMode::Normal).unwrap();
-        
-        let claims = auth.verify_token(&token).unwrap();
-        assert_eq!(claims.client_id, client_id);
-        assert!(matches!(claims.mode, UserMode::Normal));
-    }
-}
\ No newline at end of file
diff --git a/src/handlers/auth_handler.rs b/src/handlers/auth_handler.rs
deleted file mode 100644
index 4d4d6364..00000000
--- a/src/handlers/auth_handler.rs
+++ /dev/null
@@ -1,113 +0,0 @@
-use crate::app_state::AppState;
-use crate::auth::{Auth, AuthError};
-use crate::models::protected_settings::UserMode;
-use actix_web::{web, Error, HttpResponse};
-use serde::{Deserialize, Serialize};
-use serde_json::json;
-use std::sync::Arc;
-
-#[derive(Debug, Deserialize)]
-pub struct LoginRequest {
-    password: String,
-    mode: Option<UserMode>,
-}
-
-#[derive(Debug, Serialize)]
-pub struct LoginResponse {
-    token: String,
-    client_id: String,
-    mode: UserMode,
-}
-
-#[derive(Debug, Deserialize)]
-pub struct SwitchModeRequest {
-    client_id: String,
-    token: String,
-    mode: UserMode,
-}
-
-pub fn config(cfg: &mut web::ServiceConfig) {
-    cfg.service(
-        web::scope("/auth")
-            .route("/login", web::post().to(login))
-            .route("/mode", web::post().to(switch_mode))
-            .route("/validate", web::post().to(validate_token)),
-    );
-}
-
-async fn login(
-    req: web::Json<LoginRequest>,
-    state: web::Data<AppState>,
-    auth: web::Data<Arc<Auth>>,
-) -> Result<HttpResponse, Error> {
-    match auth.validate_password(&req.password) {
-        Ok(true) => {
-            let mode = req.mode.clone().unwrap_or(UserMode::Normal);
-            let (token, client_id) = auth.create_token(mode.clone())?;
-
-            // Store the client token
-            let mut protected_settings = state.protected_settings.write().await;
-            protected_settings.store_client_token(client_id.clone(), token.clone(), mode.clone());
-
-            Ok(HttpResponse::Ok().json(LoginResponse {
-                token,
-                client_id,
-                mode,
-            }))
-        }
-        Ok(false) => Ok(HttpResponse::Unauthorized().json(json!({
-            "error": "Invalid credentials"
-        }))),
-        Err(e) => Ok(HttpResponse::InternalServerError().json(json!({
-            "error": format!("Authentication error: {}", e)
-        }))),
-    }
-}
-
-async fn switch_mode(
-    req: web::Json<SwitchModeRequest>,
-    state: web::Data<AppState>,
-    auth: web::Data<Arc<Auth>>,
-) -> Result<HttpResponse, Error> {
-    // First validate the existing token
-    let mut protected_settings = state.protected_settings.write().await;
-    
-    if let Some(_current_mode) = protected_settings.validate_client_token(&req.client_id, &req.token) {
-        // Create new token for the new mode
-        let (new_token, client_id) = auth.create_token(req.mode.clone())?;
-        
-        // Store the new client token
-        protected_settings.store_client_token(client_id.clone(), new_token.clone(), req.mode.clone());
-        
-        // Clean up expired tokens
-        protected_settings.cleanup_expired_tokens(30); // Clean up tokens older than 30 days
-
-        Ok(HttpResponse::Ok().json(LoginResponse {
-            token: new_token,
-            client_id,
-            mode: req.mode.clone(),
-        }))
-    } else {
-        Ok(HttpResponse::Unauthorized().json(json!({
-            "error": "Invalid token"
-        })))
-    }
-}
-
-async fn validate_token(
-    req: web::Json<SwitchModeRequest>,
-    state: web::Data<AppState>,
-) -> Result<HttpResponse, Error> {
-    let mut protected_settings = state.protected_settings.write().await;
-    
-    if let Some(mode) = protected_settings.validate_client_token(&req.client_id, &req.token) {
-        Ok(HttpResponse::Ok().json(json!({
-            "valid": true,
-            "mode": mode
-        })))
-    } else {
-        Ok(HttpResponse::Ok().json(json!({
-            "valid": false
-        })))
-    }
-}
\ No newline at end of file
diff --git a/src/handlers/mod.rs b/src/handlers/mod.rs
index 41cc7357..5d6237e7 100755
--- a/src/handlers/mod.rs
+++ b/src/handlers/mod.rs
@@ -1,22 +1,7 @@
-pub mod auth_handler;
-pub mod file_handler;
-pub mod graph_handler;
+pub mod api_handler;
 pub mod health_handler;
 pub mod pages_handler;
 pub mod perplexity_handler;
 pub mod ragflow_handler;
 pub mod settings_handler;
 pub mod socket_flow_handler;
-pub mod visualization_handler;
-pub mod nostr_auth_handler;
-
-pub mod api_handler {
-    pub mod files;
-    pub mod graph;
-    pub mod visualization;
-}
-
-// Re-export commonly used handlers
-pub use auth_handler::config as auth_config;
-pub use nostr_auth_handler::config as nostr_auth_config;
-pub use settings_handler::config as settings_config;
diff --git a/src/handlers/nostr_auth_handler.rs b/src/handlers/nostr_auth_handler.rs
deleted file mode 100644
index 9d3a2c32..00000000
--- a/src/handlers/nostr_auth_handler.rs
+++ /dev/null
@@ -1,158 +0,0 @@
-use crate::app_state::AppState;
-use crate::models::protected_settings::UserMode;
-use crate::services::nostr_service::{NostrService, NostrUser, AuthEvent, NostrError};
-use actix_web::{web, Error, HttpResponse};
-use serde::{Deserialize, Serialize};
-use serde_json::json;
-
-#[derive(Debug, Serialize)]
-pub struct AuthResponse {
-    pub user: NostrUser,
-    pub token: String,
-}
-
-#[derive(Debug, Deserialize)]
-pub struct ModeRequest {
-    pub mode: UserMode,
-}
-
-#[derive(Debug, Deserialize)]
-pub struct ValidateRequest {
-    pub pubkey: String,
-    pub token: String,
-}
-
-pub fn config(cfg: &mut web::ServiceConfig) {
-    cfg.service(
-        web::scope("/auth/nostr")
-            .route("/login", web::post().to(login))
-            .route("/logout", web::post().to(logout))
-            .route("/mode", web::post().to(switch_mode))
-            .route("/validate", web::post().to(validate_session))
-            .route("/refresh", web::post().to(refresh_session)),
-    );
-}
-
-async fn login(
-    event: web::Json<AuthEvent>,
-    nostr_service: web::Data<NostrService>,
-) -> Result<HttpResponse, Error> {
-    match nostr_service.verify_auth_event(event.into_inner()).await {
-        Ok(user) => {
-            let token = user.session_token.clone().unwrap_or_default();
-            Ok(HttpResponse::Ok().json(AuthResponse { user, token }))
-        }
-        Err(NostrError::InvalidSignature) => {
-            Ok(HttpResponse::Unauthorized().json(json!({
-                "error": "Invalid signature"
-            })))
-        }
-        Err(e) => {
-            Ok(HttpResponse::InternalServerError().json(json!({
-                "error": format!("Authentication error: {}", e)
-            })))
-        }
-    }
-}
-
-async fn logout(
-    req: web::Json<ValidateRequest>,
-    nostr_service: web::Data<NostrService>,
-) -> Result<HttpResponse, Error> {
-    // Validate session before logout
-    if !nostr_service.validate_session(&req.pubkey, &req.token).await {
-        return Ok(HttpResponse::Unauthorized().json(json!({
-            "error": "Invalid session"
-        })));
-    }
-
-    match nostr_service.logout(&req.pubkey).await {
-        Ok(_) => Ok(HttpResponse::Ok().json(json!({
-            "message": "Logged out successfully"
-        }))),
-        Err(e) => Ok(HttpResponse::InternalServerError().json(json!({
-            "error": format!("Logout error: {}", e)
-        }))),
-    }
-}
-
-async fn switch_mode(
-    req: web::Json<ModeRequest>,
-    validate: web::Json<ValidateRequest>,
-    nostr_service: web::Data<NostrService>,
-) -> Result<HttpResponse, Error> {
-    // Validate session before mode switch
-    if !nostr_service.validate_session(&validate.pubkey, &validate.token).await {
-        return Ok(HttpResponse::Unauthorized().json(json!({
-            "error": "Invalid session"
-        })));
-    }
-
-    match nostr_service.update_user_mode(&validate.pubkey, req.mode.clone()).await {
-        Ok(user) => {
-            let token = user.session_token.clone().unwrap_or_default();
-            Ok(HttpResponse::Ok().json(AuthResponse { user, token }))
-        }
-        Err(e) => Ok(HttpResponse::InternalServerError().json(json!({
-            "error": format!("Mode switch error: {}", e)
-        }))),
-    }
-}
-
-async fn validate_session(
-    req: web::Json<ValidateRequest>,
-    nostr_service: web::Data<NostrService>,
-) -> Result<HttpResponse, Error> {
-    let is_valid = nostr_service.validate_session(&req.pubkey, &req.token).await;
-
-    Ok(HttpResponse::Ok().json(json!({
-        "valid": is_valid
-    })))
-}
-
-async fn refresh_session(
-    req: web::Json<ValidateRequest>,
-    nostr_service: web::Data<NostrService>,
-) -> Result<HttpResponse, Error> {
-    // First validate the current session
-    if !nostr_service.validate_session(&req.pubkey, &req.token).await {
-        return Ok(HttpResponse::Unauthorized().json(json!({
-            "error": "Invalid session"
-        })));
-    }
-
-    match nostr_service.refresh_session(&req.pubkey).await {
-        Ok(new_token) => {
-            if let Some(user) = nostr_service.get_user(&req.pubkey).await {
-                Ok(HttpResponse::Ok().json(AuthResponse {
-                    user,
-                    token: new_token,
-                }))
-            } else {
-                Ok(HttpResponse::InternalServerError().json(json!({
-                    "error": "User not found after refresh"
-                })))
-            }
-        }
-        Err(e) => Ok(HttpResponse::InternalServerError().json(json!({
-            "error": format!("Session refresh error: {}", e)
-        }))),
-    }
-}
-
-// Add Nostr service to app state during startup
-pub fn init_nostr_service(app_state: &mut AppState) {
-    let nostr_service = NostrService::new();
-    
-    // Start session cleanup task
-    let service_clone = nostr_service.clone();
-    tokio::spawn(async move {
-        let mut interval = tokio::time::interval(tokio::time::Duration::from_secs(3600)); // Every hour
-        loop {
-            interval.tick().await;
-            service_clone.cleanup_sessions(24).await; // Clean up sessions older than 24 hours
-        }
-    });
-
-    app_state.nostr_service = Some(web::Data::new(nostr_service));
-}
\ No newline at end of file
diff --git a/src/handlers/perplexity_handler.rs b/src/handlers/perplexity_handler.rs
index 3c3542e7..0ad75858 100755
--- a/src/handlers/perplexity_handler.rs
+++ b/src/handlers/perplexity_handler.rs
@@ -1,69 +1,47 @@
-use crate::app_state::AppState;
-use actix_web::{web, HttpRequest, HttpResponse, Error};
+use crate::AppState;
+use actix_web::{post, web, HttpResponse, Responder};
 use serde::{Deserialize, Serialize};
+use serde_json::json;
 use log::{error, info};
 
-#[derive(Debug, Serialize, Deserialize)]
-pub struct QueryRequest {
+#[derive(Debug, Deserialize)]
+pub struct PerplexityRequest {
     pub query: String,
-    pub mode: Option<String>,
-    pub context: Option<String>,
+    pub conversation_id: Option<String>,
 }
 
-#[derive(Debug, Serialize, Deserialize)]
-pub struct QueryResponse {
+#[derive(Debug, Serialize)]
+pub struct PerplexityResponse {
     pub answer: String,
-    pub sources: Vec<String>,
-    pub conversation_id: Option<String>,
+    pub conversation_id: String,
 }
 
-pub async fn query_handler(
-    req: HttpRequest,
-    payload: web::Json<QueryRequest>,
+#[post("")]
+pub async fn handle_perplexity(
     state: web::Data<AppState>,
-) -> Result<HttpResponse, Error> {
-    // Get client auth info from headers
-    let client_id = req.headers()
-        .get("X-Client-ID")
-        .and_then(|h| h.to_str().ok())
-        .unwrap_or("");
-    
-    let client_token = req.headers()
-        .get("X-Client-Token")
-        .and_then(|h| h.to_str().ok())
-        .unwrap_or("");
+    request: web::Json<PerplexityRequest>,
+) -> impl Responder {
+    info!("Received perplexity request: {:?}", request);
 
-    // Validate client auth
-    let protected_settings = state.protected_settings.read().await;
-    if protected_settings.validate_client_token(client_id, client_token).is_none() {
-        return Ok(HttpResponse::Unauthorized().finish());
-    }
-
-    // Get perplexity service
     let perplexity_service = match &state.perplexity_service {
         Some(service) => service,
-        None => {
-            error!("Perplexity service not initialized");
-            return Ok(HttpResponse::ServiceUnavailable().finish());
-        }
+        None => return HttpResponse::ServiceUnavailable().json(json!({
+            "error": "Perplexity service is not available"
+        }))
     };
 
     let conversation_id = state.ragflow_conversation_id.clone();
-    
-    // Process query
-    match perplexity_service.query(
-        &payload.query,
-        payload.mode.as_deref(),
-        payload.context.as_deref(),
-        conversation_id.as_deref(),
-    ).await {
-        Ok(response) => {
-            info!("Query processed successfully");
-            Ok(HttpResponse::Ok().json(response))
+    match perplexity_service.query(&request.query, &conversation_id).await {
+        Ok(answer) => {
+            let response = PerplexityResponse {
+                answer,
+                conversation_id,
+            };
+            HttpResponse::Ok().json(response)
         }
         Err(e) => {
-            error!("Query processing failed: {}", e);
-            Ok(HttpResponse::InternalServerError().body(e.to_string()))
+            error!("Error processing perplexity request: {}", e);
+            HttpResponse::InternalServerError().json(format!("Error: {}", e))
         }
     }
 }
diff --git a/src/handlers/settings_handler.rs b/src/handlers/settings_handler.rs
index 54375b6f..87538e55 100644
--- a/src/handlers/settings_handler.rs
+++ b/src/handlers/settings_handler.rs
@@ -1,57 +1,16 @@
 use crate::app_state::AppState;
-use crate::auth::{Auth, AuthError};
-use crate::models::protected_settings::{ProtectedSettings, UserMode};
 use crate::utils::case_conversion::to_camel_case;
-use actix_web::{web, Error, HttpRequest, HttpResponse};
+use actix_web::{web, Error, HttpResponse};
 use serde_json::{json, Value};
-use std::sync::Arc;
 
 pub fn config(cfg: &mut web::ServiceConfig) {
     cfg.service(
-        web::scope("/settings")
-            .route("", web::get().to(get_settings))
-            .route("", web::post().to(update_settings))
-            .route("/protected", web::get().to(get_protected_settings))
-            .route("/protected", web::post().to(update_protected_settings)),
+        web::resource("/settings")
+            .route(web::get().to(get_settings))
+            .route(web::post().to(update_settings)),
     );
 }
 
-// Helper to extract and validate client auth
-async fn validate_client_auth(
-    req: &HttpRequest,
-    state: &web::Data<AppState>,
-) -> Result<(String, UserMode), HttpResponse> {
-    let client_id = req
-        .headers()
-        .get("X-Client-ID")
-        .and_then(|h| h.to_str().ok())
-        .ok_or_else(|| {
-            HttpResponse::Unauthorized().json(json!({
-                "error": "Missing client ID"
-            }))
-        })?;
-
-    let token = req
-        .headers()
-        .get("Authorization")
-        .and_then(|h| h.to_str().ok())
-        .and_then(|s| s.strip_prefix("Bearer "))
-        .ok_or_else(|| {
-            HttpResponse::Unauthorized().json(json!({
-                "error": "Missing or invalid authorization header"
-            }))
-        })?;
-
-    let protected_settings = state.protected_settings.read().await;
-    if let Some(mode) = protected_settings.validate_client_token(client_id, token) {
-        Ok((client_id.to_string(), mode))
-    } else {
-        Err(HttpResponse::Unauthorized().json(json!({
-            "error": "Invalid or expired token"
-        })))
-    }
-}
-
 async fn get_settings(state: web::Data<AppState>) -> Result<HttpResponse, Error> {
     let settings_guard = state.settings.read().await;
     let settings_json = convert_struct_to_camel_case(&*settings_guard);
@@ -82,60 +41,6 @@ async fn update_settings(
     Ok(HttpResponse::Ok().json(settings_json))
 }
 
-async fn get_protected_settings(
-    req: HttpRequest,
-    state: web::Data<AppState>,
-) -> Result<HttpResponse, Error> {
-    let (_, mode) = validate_client_auth(&req, &state).await?;
-    let protected_settings = state.protected_settings.read().await;
-
-    let response = match mode {
-        UserMode::Power => {
-            // In power user mode, return env-based keys
-            json!({
-                "mode": "power",
-                "api_keys": protected_settings.get_active_keys()
-            })
-        }
-        UserMode::Normal => {
-            // In normal mode, return user-configured keys
-            json!({
-                "mode": "normal",
-                "api_keys": protected_settings.api_keys
-            })
-        }
-    };
-
-    Ok(HttpResponse::Ok().json(response))
-}
-
-async fn update_protected_settings(
-    req: HttpRequest,
-    payload: web::Json<ProtectedSettings>,
-    state: web::Data<AppState>,
-) -> Result<HttpResponse, Error> {
-    let (_, mode) = validate_client_auth(&req, &state).await?;
-
-    match mode {
-        UserMode::Power => {
-            Ok(HttpResponse::Forbidden().json(json!({
-                "error": "Cannot update settings in power user mode",
-                "message": "Power user mode uses environment variables"
-            })))
-        }
-        UserMode::Normal => {
-            let mut protected_settings = state.protected_settings.write().await;
-            protected_settings.api_keys = payload.api_keys.clone();
-            
-            Ok(HttpResponse::Ok().json(json!({
-                "message": "Settings updated successfully",
-                "api_keys": protected_settings.api_keys
-            })))
-        }
-    }
-}
-
-// Validation functions remain unchanged
 fn validate_settings(settings: &Value) -> Result<(), String> {
     if !settings.is_object() {
         return Err("Settings must be an object".to_string());
@@ -189,7 +94,6 @@ fn validate_visualization_settings(settings: &Value) -> Result<(), String> {
     Ok(())
 }
 
-// Rest of the validation functions remain unchanged...
 fn validate_bloom_settings(settings: &Value) -> Result<(), String> {
     let obj = settings
         .as_object()
diff --git a/src/lib.rs b/src/lib.rs
index e28c5723..4f27176e 100755
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -1,25 +1,45 @@
+#![recursion_limit = "256"]
+
+extern crate log;
+
+// Declare modules
+pub mod utils;
 pub mod app_state;
-pub mod auth;
 pub mod config;
-pub mod core;
 pub mod handlers;
-pub mod middleware;
 pub mod models;
-pub mod modules;
 pub mod services;
-pub mod state;
 pub mod types;
-pub mod utils;
-pub mod websocket;
+pub mod state;
+
+// Re-export standard logging if needed
+pub use log::{debug, error, info, warn};
+
+// Re-export GPU compute
+pub use crate::utils::gpu_compute::GPUCompute;
 
-// Re-exports
+// Re-export socket flow handler
+pub use crate::handlers::socket_flow_handler::{SocketFlowServer, socket_flow_handler};
+
+// Public re-exports
 pub use app_state::AppState;
-pub use auth::{Auth, AuthError};
-pub use config::Config;
-pub use handlers::*;
-pub use middleware::*;
-pub use models::*;
-pub use services::*;
-pub use types::*;
-pub use utils::*;
-pub use websocket::*;
+pub use config::Settings;
+pub use models::position_update::PositionUpdate;
+pub use models::metadata::MetadataStore;
+pub use models::simulation_params::SimulationParams;
+pub use models::graph::GraphData;
+pub use services::graph_service::GraphService;
+pub use services::file_service::FileService;
+pub use services::perplexity_service::PerplexityService;
+pub use services::ragflow_service::{RAGFlowService, RAGFlowError};
+pub use services::github::{GitHubClient, ContentAPI};
+
+// Re-export handlers
+pub use handlers::api_handler::files as file_handler;
+pub use handlers::api_handler::graph as graph_handler;
+pub use handlers::health_handler;
+pub use handlers::pages_handler;
+pub use handlers::perplexity_handler;
+pub use handlers::ragflow_handler;
+pub use handlers::api_handler::visualization as visualization_handler;
+pub use handlers::settings_handler;
diff --git a/src/main.rs b/src/main.rs
index b40ba7f9..236bbfe7 100755
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,62 +1,191 @@
+use webxr::{
+    AppState, Settings,
+    handlers::{
+        api_handler,
+        health_handler,
+        pages_handler,
+        socket_flow_handler::socket_flow_handler,
+    },
+    GPUCompute, GraphData,
+    services::{
+        file_service::FileService,
+        graph_service::GraphService,
+        github::{GitHubClient, ContentAPI},
+    },
+};
+
+use actix_web::{web, App, HttpServer, middleware};
 use actix_cors::Cors;
-use actix_web::{middleware, web, App, HttpServer};
+use actix_files::Files;
 use std::sync::Arc;
-
-mod app_state;
-mod auth;
-mod config;
-mod handlers;
-mod models;
-mod services;
-mod utils;
-
-use app_state::AppState;
-use auth::Auth;
-use config::Config;
-use handlers::nostr_auth_handler;
+use tokio::sync::RwLock;
+use dotenvy::dotenv;
+use log::{error, warn, info, debug};
+use webxr::utils::logging::{init_logging_with_config, LogConfig};
 
 #[actix_web::main]
 async fn main() -> std::io::Result<()> {
-    env_logger::init();
+    dotenv().ok();
+
+    // Load settings first to get the log level
+    let settings = match Settings::new() {
+        Ok(s) => {
+            info!("Settings loaded successfully from: {}", 
+                std::env::var("SETTINGS_FILE_PATH").unwrap_or_default());
+            Arc::new(RwLock::new(s))
+        },
+        Err(e) => {
+            error!("Failed to load settings: {:?}", e);
+            return Err(std::io::Error::new(std::io::ErrorKind::Other, format!("Failed to initialize settings: {:?}", e)));
+        }
+    };
+
+    // Initialize logging with settings-based configuration
+    let log_config = {
+        let settings_read = settings.read().await;
+        let file_level = if settings_read.system.debug.enabled {
+            "debug"
+        } else {
+            &settings_read.system.debug.log_level
+        };
+        
+        let console_level = if settings_read.system.debug.enable_websocket_debug {
+            "debug"
+        } else {
+            &settings_read.system.debug.log_level
+        };
+        
+        LogConfig::new(
+            file_level,
+            console_level,
+        )
+    };
 
-    // Load configuration
-    let config = Config::new().expect("Failed to load configuration");
+    init_logging_with_config(log_config)?;
+
+    debug!("Successfully loaded settings");
+
+    info!("Starting WebXR application...");
+    
+    // Replace log_data! and log_warn! with standard log macros
+    info!("Initializing GPU compute...");
     
-    // Initialize auth
-    let auth = Arc::new(Auth::new().expect("Failed to initialize auth"));
+    let gpu_compute = match GPUCompute::new(&GraphData::default()).await {
+        Ok(gpu) => {
+            info!("GPU initialization successful");
+            Some(gpu)
+        }
+        Err(e) => {
+            warn!("Failed to initialize GPU: {}. Falling back to CPU computations.", e);
+            None
+        }
+    };
+
+    // Create web::Data instances first
+    let settings_data = web::Data::new(settings.clone());
+
+    // Initialize services
+    let settings_read = settings.read().await;
+    let github_client = match GitHubClient::new(
+        settings_read.github.token.clone(),
+        settings_read.github.owner.clone(),
+        settings_read.github.repo.clone(),
+        settings_read.github.base_path.clone(),
+        settings.clone(),
+    ).await {
+        Ok(client) => Arc::new(client),
+        Err(e) => return Err(std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))
+    };
+
+    let content_api = Arc::new(ContentAPI::new(github_client.clone()));
+    drop(settings_read);
 
     // Initialize app state
-    let mut app_state = AppState::new();
-    
-    // Initialize Nostr service
-    nostr_auth_handler::init_nostr_service(&mut app_state);
+    let app_state = web::Data::new(AppState::new(
+        settings.clone(),
+        github_client.clone(),
+        content_api.clone(),
+        None,
+        None,
+        gpu_compute,
+        "default_conversation".to_string(),
+    ));
+
+    // Initialize local storage and fetch initial data
+    info!("Initializing local storage and fetching initial data");
+    if let Err(e) = FileService::initialize_local_storage(settings.clone()).await {
+        error!("Failed to initialize local storage: {}", e);
+        return Err(std::io::Error::new(std::io::ErrorKind::Other, e.to_string()));
+    }
+
+    // Load metadata and build initial graph
+    info!("Building initial graph from metadata");
+    let metadata_store = FileService::load_or_create_metadata()
+        .map_err(|e| {
+            error!("Failed to load metadata: {}", e);
+            std::io::Error::new(std::io::ErrorKind::Other, e.to_string())
+        })?;
+
+    info!("Loaded {} items from metadata store", metadata_store.len());
 
-    // Create app state data
-    let app_state = web::Data::new(app_state);
-    let auth = web::Data::new(auth);
+    // Update metadata in app state
+    {
+        let mut app_metadata = app_state.metadata.write().await;
+        *app_metadata = metadata_store.clone();
+        info!("Loaded metadata into app state");
+    }
+
+    // Build initial graph from metadata
+    match GraphService::build_graph_from_metadata(&metadata_store).await {
+        Ok(graph_data) => {
+            let mut graph = app_state.graph_service.graph_data.write().await;
+            *graph = graph_data;
+            info!("Built initial graph from metadata");
+        },
+        Err(e) => {
+            error!("Failed to build initial graph: {}", e);
+            return Err(std::io::Error::new(std::io::ErrorKind::Other, format!("Failed to build initial graph: {}", e)));
+        }
+    }
+
+    // Start the server
+    let bind_address = {
+        let settings_read = settings.read().await;
+        format!("{}:{}", (*settings_read).system.network.bind_address, (*settings_read).system.network.port)
+    };
+
+    info!("Starting HTTP server on {}", bind_address);
 
     HttpServer::new(move || {
+        // Configure CORS
         let cors = Cors::default()
             .allow_any_origin()
             .allow_any_method()
             .allow_any_header()
-            .max_age(3600);
+            .max_age(3600)
+            .supports_credentials();
 
         App::new()
             .wrap(middleware::Logger::default())
             .wrap(cors)
+            .wrap(middleware::Compress::default())
+            .app_data(settings_data.clone())
             .app_data(app_state.clone())
-            .app_data(auth.clone())
-            // Register handlers
+            .app_data(web::Data::new(github_client.clone()))
+            .app_data(web::Data::new(content_api.clone()))
+            .route("/wss", web::get().to(socket_flow_handler))
             .service(
-                web::scope("/api")
-                    .configure(handlers::auth_handler::config)
-                    .configure(nostr_auth_handler::config)
-                    .configure(handlers::settings_handler::config)
-                    // Add other handlers here
+                web::scope("")
+                    .configure(api_handler::config)
+                    .service(web::scope("/health").configure(health_handler::config))
+                    .service(web::scope("/pages").configure(pages_handler::config))
             )
+            .service(Files::new("/", "/app/client").index_file("index.html"))
     })
-    .bind(("0.0.0.0", config.server.port))?
+    .bind(&bind_address)?
     .run()
-    .await
+    .await?;
+
+    info!("HTTP server stopped");
+    Ok(())
 }
diff --git a/src/middleware/auth.rs b/src/middleware/auth.rs
deleted file mode 100644
index b5d47e8f..00000000
--- a/src/middleware/auth.rs
+++ /dev/null
@@ -1,104 +0,0 @@
-use crate::app_state::AppState;
-use crate::models::protected_settings::UserMode;
-use actix_web::dev::{Service, ServiceRequest, ServiceResponse, Transform};
-use actix_web::Error;
-use actix_web::error::ErrorUnauthorized;
-use futures::future::{ok, Ready};
-use futures::Future;
-use std::pin::Pin;
-use std::task::{Context, Poll};
-
-pub struct Auth;
-
-impl Auth {
-    pub fn new() -> Self {
-        Auth
-    }
-}
-
-impl<S, B> Transform<S, ServiceRequest> for Auth
-where
-    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error>,
-    S::Future: 'static,
-    B: 'static,
-{
-    type Response = ServiceResponse<B>;
-    type Error = Error;
-    type InitError = ();
-    type Transform = AuthMiddleware<S>;
-    type Future = Ready<Result<Self::Transform, Self::InitError>>;
-
-    fn new_transform(&self, service: S) -> Self::Future {
-        ok(AuthMiddleware { service })
-    }
-}
-
-pub struct AuthMiddleware<S> {
-    service: S,
-}
-
-impl<S, B> Service<ServiceRequest> for AuthMiddleware<S>
-where
-    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error>,
-    S::Future: 'static,
-    B: 'static,
-{
-    type Response = ServiceResponse<B>;
-    type Error = Error;
-    type Future = Pin<Box<dyn Future<Output = Result<Self::Response, Self::Error>>>>;
-
-    fn poll_ready(&self, cx: &mut Context<'_>) -> Poll<Result<(), Self::Error>> {
-        self.service.poll_ready(cx)
-    }
-
-    fn call(&self, req: ServiceRequest) -> Self::Future {
-        let app_state = req.app_data::<actix_web::web::Data<AppState>>().cloned();
-        
-        // Skip auth for non-protected routes
-        if !req.path().starts_with("/api/protected") {
-            let fut = self.service.call(req);
-            return Box::pin(async move {
-                let res = fut.await?;
-                Ok(res)
-            });
-        }
-
-        let client_id = req.headers().get("X-Client-ID").and_then(|h| h.to_str().ok());
-        let token = req
-            .headers()
-            .get("Authorization")
-            .and_then(|h| h.to_str().ok())
-            .and_then(|s| s.strip_prefix("Bearer "));
-
-        if client_id.is_none() || token.is_none() {
-            return Box::pin(async move {
-                Err(ErrorUnauthorized("Missing authentication credentials"))
-            });
-        }
-
-        let client_id = client_id.unwrap();
-        let token = token.unwrap();
-
-        let fut = self.service.call(req);
-        
-        Box::pin(async move {
-            if let Some(state) = app_state {
-                let protected_settings = state.protected_settings.read().await;
-                
-                if let Some(mode) = protected_settings.validate_client_token(client_id, token) {
-                    // For power-user-only routes, check if user is in power mode
-                    if req.path().starts_with("/api/protected/power") && mode != UserMode::Power {
-                        return Err(ErrorUnauthorized("Power user access required"));
-                    }
-                    
-                    let res = fut.await?;
-                    Ok(res)
-                } else {
-                    Err(ErrorUnauthorized("Invalid or expired token"))
-                }
-            } else {
-                Err(ErrorUnauthorized("Server configuration error"))
-            }
-        })
-    }
-}
\ No newline at end of file
diff --git a/src/middleware/mod.rs b/src/middleware/mod.rs
deleted file mode 100644
index f7a092a1..00000000
--- a/src/middleware/mod.rs
+++ /dev/null
@@ -1,3 +0,0 @@
-pub mod auth;
-
-pub use auth::AuthMiddleware;
\ No newline at end of file
diff --git a/src/models/mod.rs b/src/models/mod.rs
index bd14d6bc..c3af0a03 100755
--- a/src/models/mod.rs
+++ b/src/models/mod.rs
@@ -4,5 +4,4 @@ pub mod metadata;
 pub mod node;
 pub mod pagination;
 pub mod position_update;
-pub mod protected_settings;
 pub mod simulation_params;
diff --git a/src/models/protected_settings.rs b/src/models/protected_settings.rs
deleted file mode 100644
index 5cbba0ef..00000000
--- a/src/models/protected_settings.rs
+++ /dev/null
@@ -1,147 +0,0 @@
-use serde::{Deserialize, Serialize};
-use std::collections::HashMap;
-use chrono::{DateTime, Utc};
-
-#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
-pub enum UserMode {
-    Normal,
-    Power,
-}
-
-#[derive(Debug, Clone, Serialize, Deserialize)]
-pub struct ApiKeys {
-    pub perplexity: Option<String>,
-    pub openai: Option<String>,
-}
-
-#[derive(Debug, Clone, Serialize, Deserialize)]
-pub struct UserSettings {
-    pub mode: UserMode,
-    pub api_keys: ApiKeys,
-    pub last_active: i64,
-    pub token: Option<String>,
-    pub token_created: Option<DateTime<Utc>>,
-}
-
-#[derive(Debug, Clone, Serialize, Deserialize)]
-pub struct ProtectedSettings {
-    pub users: HashMap<String, UserSettings>,
-    pub default_api_keys: ApiKeys,
-}
-
-impl Default for ProtectedSettings {
-    fn default() -> Self {
-        Self {
-            users: HashMap::new(),
-            default_api_keys: ApiKeys {
-                perplexity: None,
-                openai: None,
-            },
-        }
-    }
-}
-
-impl ProtectedSettings {
-    pub fn from_env() -> Self {
-        Self {
-            users: HashMap::new(),
-            default_api_keys: ApiKeys {
-                perplexity: std::env::var("PERPLEXITY_API_KEY").ok(),
-                openai: std::env::var("OPENAI_API_KEY").ok(),
-            },
-        }
-    }
-
-    pub fn get_user_settings(&self, pubkey: &str) -> Option<&UserSettings> {
-        self.users.get(pubkey)
-    }
-
-    pub fn get_active_keys(&self, pubkey: &str) -> ApiKeys {
-        if let Some(user_settings) = self.users.get(pubkey) {
-            match user_settings.mode {
-                UserMode::Power => ApiKeys {
-                    perplexity: std::env::var("PERPLEXITY_API_KEY").ok(),
-                    openai: std::env::var("OPENAI_API_KEY").ok(),
-                },
-                UserMode::Normal => user_settings.api_keys.clone(),
-            }
-        } else {
-            self.default_api_keys.clone()
-        }
-    }
-
-    pub fn update_user_settings(
-        &mut self,
-        pubkey: String,
-        mode: UserMode,
-        api_keys: Option<ApiKeys>,
-    ) -> UserSettings {
-        let now = chrono::Utc::now().timestamp();
-        let settings = self.users.entry(pubkey).or_insert(UserSettings {
-            mode: UserMode::Normal,
-            api_keys: ApiKeys {
-                perplexity: None,
-                openai: None,
-            },
-            last_active: now,
-            token: None,
-            token_created: None,
-        });
-
-        settings.mode = mode;
-        if let Some(keys) = api_keys {
-            settings.api_keys = keys;
-        }
-        settings.last_active = now;
-
-        settings.clone()
-    }
-
-    pub fn store_client_token(&mut self, pubkey: String, token: String, mode: UserMode) {
-        let now = Utc::now();
-        let settings = self.users.entry(pubkey).or_insert(UserSettings {
-            mode,
-            api_keys: ApiKeys {
-                perplexity: None,
-                openai: None,
-            },
-            last_active: now.timestamp(),
-            token: None,
-            token_created: None,
-        });
-
-        settings.token = Some(token);
-        settings.token_created = Some(now);
-        settings.last_active = now.timestamp();
-    }
-
-    pub fn validate_client_token(&self, pubkey: &str, token: &str) -> Option<UserMode> {
-        if let Some(settings) = self.users.get(pubkey) {
-            if let Some(stored_token) = &settings.token {
-                if stored_token == token {
-                    return Some(settings.mode.clone());
-                }
-            }
-        }
-        None
-    }
-
-    pub fn cleanup_expired_tokens(&mut self, max_age_days: i64) {
-        let now = Utc::now();
-        self.users.retain(|_, settings| {
-            if let Some(created) = settings.token_created {
-                now.signed_duration_since(created).num_days() < max_age_days
-            } else {
-                true // Keep users without tokens
-            }
-        });
-    }
-
-    pub fn cleanup_inactive_users(&mut self, max_age_hours: i64) {
-        let now = chrono::Utc::now().timestamp();
-        let max_age_secs = max_age_hours * 3600;
-        self.users.retain(|_, settings| {
-            now - settings.last_active < max_age_secs
-        });
-    }
-}
\ No newline at end of file
diff --git a/src/services/mod.rs b/src/services/mod.rs
index 43e85357..657be730 100755
--- a/src/services/mod.rs
+++ b/src/services/mod.rs
@@ -1,25 +1,6 @@
+pub mod github;
 pub mod file_service;
 pub mod graph_service;
 pub mod perplexity_service;
 pub mod ragflow_service;
 pub mod speech_service;
-pub mod nostr_service;
-
-pub mod github {
-    pub mod api;
-    pub mod content;
-    pub mod pr;
-    pub mod types;
-
-    pub use api::GitHubClient;
-    pub use content::ContentAPI;
-    pub use types::GitHubFileMetadata;
-}
-
-// Re-export commonly used services
-pub use file_service::FileService;
-pub use graph_service::GraphService;
-pub use nostr_service::NostrService;
-pub use perplexity_service::PerplexityService;
-pub use ragflow_service::RAGFlowService;
-pub use speech_service::SpeechService;
diff --git a/src/services/nostr_service.rs b/src/services/nostr_service.rs
deleted file mode 100644
index d6b2ee26..00000000
--- a/src/services/nostr_service.rs
+++ /dev/null
@@ -1,178 +0,0 @@
-use crate::models::protected_settings::UserMode;
-use chrono::{DateTime, Utc};
-use nostr::prelude::*;
-use serde::{Deserialize, Serialize};
-use std::collections::HashMap;
-use std::sync::Arc;
-use thiserror::Error;
-use tokio::sync::RwLock;
-use uuid::Uuid;
-
-#[derive(Debug, Error)]
-pub enum NostrError {
-    #[error("Invalid event: {0}")]
-    InvalidEvent(String),
-    #[error("Invalid signature")]
-    InvalidSignature,
-    #[error("User not found")]
-    UserNotFound,
-    #[error("Nostr error: {0}")]
-    NostrError(String),
-}
-
-#[derive(Debug, Clone, Serialize, Deserialize)]
-pub struct NostrUser {
-    pub pubkey: String,
-    pub npub: String,
-    pub mode: UserMode,
-    pub created_at: DateTime<Utc>,
-    pub last_seen: DateTime<Utc>,
-    pub session_token: Option<String>,
-}
-
-#[derive(Debug, Clone, Serialize, Deserialize)]
-pub struct AuthEvent {
-    pub id: String,
-    pub pubkey: String,
-    pub content: String,
-    pub sig: String,
-    pub created_at: i64,
-    pub kind: i32,
-    pub tags: Vec<Vec<String>>,
-}
-
-impl TryFrom<AuthEvent> for Event {
-    type Error = NostrError;
-
-    fn try_from(auth: AuthEvent) -> Result<Self, Self::Error> {
-        let pubkey = XOnlyPublicKey::from_str(&auth.pubkey)
-            .map_err(|e| NostrError::InvalidEvent(e.to_string()))?;
-        
-        let tags = auth.tags
-            .iter()
-            .map(|t| Tag::parse(t))
-            .collect::<Result<Vec<Tag>, _>>()
-            .map_err(|e| NostrError::InvalidEvent(e.to_string()))?;
-
-        Ok(Event {
-            id: EventId::from_str(&auth.id)
-                .map_err(|e| NostrError::InvalidEvent(e.to_string()))?,
-            pubkey,
-            created_at: Timestamp::from(auth.created_at as u64),
-            kind: Kind::from(auth.kind),
-            tags,
-            content: auth.content,
-            sig: Signature::from_str(&auth.sig)
-                .map_err(|e| NostrError::InvalidEvent(e.to_string()))?,
-        })
-    }
-}
-
-#[derive(Clone)]
-pub struct NostrService {
-    users: Arc<RwLock<HashMap<String, NostrUser>>>,
-    keys: Arc<Keys>,
-}
-
-impl NostrService {
-    pub fn new() -> Self {
-        let secret_key = SecretKey::generate();
-        let keys = Keys::new(secret_key);
-        
-        Self {
-            users: Arc::new(RwLock::new(HashMap::new())),
-            keys: Arc::new(keys),
-        }
-    }
-
-    pub async fn verify_auth_event(&self, event: AuthEvent) -> Result<NostrUser, NostrError> {
-        // Convert to Nostr Event
-        let nostr_event: Event = event.try_into()?;
-
-        // Verify the event
-        nostr_event.verify().map_err(|e| NostrError::NostrError(e.to_string()))?;
-
-        let now = Utc::now();
-        let user = NostrUser {
-            pubkey: nostr_event.pubkey.to_string(),
-            npub: nostr_event.pubkey.to_bech32()
-                .map_err(|e| NostrError::InvalidEvent(e.to_string()))?,
-            mode: UserMode::Normal, // Default to normal mode
-            created_at: now,
-            last_seen: now,
-            session_token: Some(Uuid::new_v4().to_string()),
-        };
-
-        // Store or update user
-        let mut users = self.users.write().await;
-        users.insert(user.pubkey.clone(), user.clone());
-
-        Ok(user)
-    }
-
-    pub async fn get_user(&self, pubkey: &str) -> Option<NostrUser> {
-        let users = self.users.read().await;
-        users.get(pubkey).cloned()
-    }
-
-    pub async fn update_user_mode(&self, pubkey: &str, mode: UserMode) -> Result<NostrUser, NostrError> {
-        let mut users = self.users.write().await;
-        
-        if let Some(user) = users.get_mut(pubkey) {
-            user.mode = mode;
-            user.last_seen = Utc::now();
-            Ok(user.clone())
-        } else {
-            Err(NostrError::UserNotFound)
-        }
-    }
-
-    pub async fn validate_session(&self, pubkey: &str, token: &str) -> bool {
-        if let Some(user) = self.get_user(pubkey).await {
-            if let Some(session_token) = user.session_token {
-                return session_token == token;
-            }
-        }
-        false
-    }
-
-    pub async fn refresh_session(&self, pubkey: &str) -> Result<String, NostrError> {
-        let mut users = self.users.write().await;
-        
-        if let Some(user) = users.get_mut(pubkey) {
-            let new_token = Uuid::new_v4().to_string();
-            user.session_token = Some(new_token.clone());
-            user.last_seen = Utc::now();
-            Ok(new_token)
-        } else {
-            Err(NostrError::UserNotFound)
-        }
-    }
-
-    pub async fn logout(&self, pubkey: &str) -> Result<(), NostrError> {
-        let mut users = self.users.write().await;
-        
-        if let Some(user) = users.get_mut(pubkey) {
-            user.session_token = None;
-            user.last_seen = Utc::now();
-            Ok(())
-        } else {
-            Err(NostrError::UserNotFound)
-        }
-    }
-
-    pub async fn cleanup_sessions(&self, max_age_hours: i64) {
-        let now = Utc::now();
-        let mut users = self.users.write().await;
-        
-        users.retain(|_, user| {
-            now.signed_duration_since(user.last_seen).num_hours() < max_age_hours
-        });
-    }
-}
-
-impl Default for NostrService {
-    fn default() -> Self {
-        Self::new()
-    }
-}
\ No newline at end of file
diff --git a/vite.config.ts b/vite.config.ts
index 5657de8f..c680fdaa 100644
--- a/vite.config.ts
+++ b/vite.config.ts
@@ -14,14 +14,7 @@ export default defineConfig(({ mode, command }) => {
       outDir: resolve(__dirname, 'data/public/dist'),
       emptyOutDir: true,
       sourcemap: !isProd,
-      minify: isProd ? 'esbuild' : false,
-      target: 'esnext',
-      assetsInlineLimit: 4096,
-      cssMinify: isProd,
-      cssCodeSplit: true,
-      modulePreload: {
-        polyfill: true
-      },
+      minify: false,
       rollupOptions: {
         input: {
           main: resolve(__dirname, 'client/index.html')
@@ -69,24 +62,7 @@ export default defineConfig(({ mode, command }) => {
     },
 
     optimizeDeps: {
-      include: ['three'],
-      esbuildOptions: {
-        target: 'esnext',
-        supported: {
-          'top-level-await': true
-        },
-        treeShaking: true
-      }
-    },
-
-    esbuild: {
-      target: 'esnext',
-      drop: isProd ? ['console', 'debugger'] : [],
-      pure: isProd ? ['console.log', 'console.debug', 'console.trace'] : [],
-      treeShaking: true,
-      minifyWhitespace: isProd,
-      minifyIdentifiers: isProd,
-      minifySyntax: isProd
+      include: ['three']
     },
 
     define: {
